
TimunV2-FC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f818  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  0800f9a8  0800f9a8  000109a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fb04  0800fb04  00011150  2**0
                  CONTENTS
  4 .ARM          00000008  0800fb04  0800fb04  00010b04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fb0c  0800fb0c  00011150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fb0c  0800fb0c  00010b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fb10  0800fb10  00010b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000150  20000000  0800fb14  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00011150  2**0
                  CONTENTS
 10 .bss          00006390  20000150  20000150  00011150  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200064e0  200064e0  00011150  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00011150  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002246f  00000000  00000000  00011180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005071  00000000  00000000  000335ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d28  00000000  00000000  00038660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000169d  00000000  00000000  0003a388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000282a1  00000000  00000000  0003ba25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024e7f  00000000  00000000  00063cc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e7d27  00000000  00000000  00088b45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0017086c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007d14  00000000  00000000  001708b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  001785c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000150 	.word	0x20000150
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f990 	.word	0x0800f990

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000154 	.word	0x20000154
 80001cc:	0800f990 	.word	0x0800f990

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	@ 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2f>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad4:	bf24      	itt	cs
 8000ad6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ada:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ade:	d90d      	bls.n	8000afc <__aeabi_d2f+0x30>
 8000ae0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aec:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000af0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af4:	bf08      	it	eq
 8000af6:	f020 0001 	biceq.w	r0, r0, #1
 8000afa:	4770      	bx	lr
 8000afc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b00:	d121      	bne.n	8000b46 <__aeabi_d2f+0x7a>
 8000b02:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b06:	bfbc      	itt	lt
 8000b08:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b0c:	4770      	bxlt	lr
 8000b0e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b16:	f1c2 0218 	rsb	r2, r2, #24
 8000b1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b22:	fa20 f002 	lsr.w	r0, r0, r2
 8000b26:	bf18      	it	ne
 8000b28:	f040 0001 	orrne.w	r0, r0, #1
 8000b2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b38:	ea40 000c 	orr.w	r0, r0, ip
 8000b3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b44:	e7cc      	b.n	8000ae0 <__aeabi_d2f+0x14>
 8000b46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b4a:	d107      	bne.n	8000b5c <__aeabi_d2f+0x90>
 8000b4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b50:	bf1e      	ittt	ne
 8000b52:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b56:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b5a:	4770      	bxne	lr
 8000b5c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b60:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b64:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b80:	f000 b96a 	b.w	8000e58 <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f806 	bl	8000b9c <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba0:	9d08      	ldr	r5, [sp, #32]
 8000ba2:	460c      	mov	r4, r1
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d14e      	bne.n	8000c46 <__udivmoddi4+0xaa>
 8000ba8:	4694      	mov	ip, r2
 8000baa:	458c      	cmp	ip, r1
 8000bac:	4686      	mov	lr, r0
 8000bae:	fab2 f282 	clz	r2, r2
 8000bb2:	d962      	bls.n	8000c7a <__udivmoddi4+0xde>
 8000bb4:	b14a      	cbz	r2, 8000bca <__udivmoddi4+0x2e>
 8000bb6:	f1c2 0320 	rsb	r3, r2, #32
 8000bba:	4091      	lsls	r1, r2
 8000bbc:	fa20 f303 	lsr.w	r3, r0, r3
 8000bc0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bc4:	4319      	orrs	r1, r3
 8000bc6:	fa00 fe02 	lsl.w	lr, r0, r2
 8000bca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bce:	fa1f f68c 	uxth.w	r6, ip
 8000bd2:	fbb1 f4f7 	udiv	r4, r1, r7
 8000bd6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bda:	fb07 1114 	mls	r1, r7, r4, r1
 8000bde:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000be2:	fb04 f106 	mul.w	r1, r4, r6
 8000be6:	4299      	cmp	r1, r3
 8000be8:	d90a      	bls.n	8000c00 <__udivmoddi4+0x64>
 8000bea:	eb1c 0303 	adds.w	r3, ip, r3
 8000bee:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000bf2:	f080 8112 	bcs.w	8000e1a <__udivmoddi4+0x27e>
 8000bf6:	4299      	cmp	r1, r3
 8000bf8:	f240 810f 	bls.w	8000e1a <__udivmoddi4+0x27e>
 8000bfc:	3c02      	subs	r4, #2
 8000bfe:	4463      	add	r3, ip
 8000c00:	1a59      	subs	r1, r3, r1
 8000c02:	fa1f f38e 	uxth.w	r3, lr
 8000c06:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c0a:	fb07 1110 	mls	r1, r7, r0, r1
 8000c0e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c12:	fb00 f606 	mul.w	r6, r0, r6
 8000c16:	429e      	cmp	r6, r3
 8000c18:	d90a      	bls.n	8000c30 <__udivmoddi4+0x94>
 8000c1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c1e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000c22:	f080 80fc 	bcs.w	8000e1e <__udivmoddi4+0x282>
 8000c26:	429e      	cmp	r6, r3
 8000c28:	f240 80f9 	bls.w	8000e1e <__udivmoddi4+0x282>
 8000c2c:	4463      	add	r3, ip
 8000c2e:	3802      	subs	r0, #2
 8000c30:	1b9b      	subs	r3, r3, r6
 8000c32:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c36:	2100      	movs	r1, #0
 8000c38:	b11d      	cbz	r5, 8000c42 <__udivmoddi4+0xa6>
 8000c3a:	40d3      	lsrs	r3, r2
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	e9c5 3200 	strd	r3, r2, [r5]
 8000c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c46:	428b      	cmp	r3, r1
 8000c48:	d905      	bls.n	8000c56 <__udivmoddi4+0xba>
 8000c4a:	b10d      	cbz	r5, 8000c50 <__udivmoddi4+0xb4>
 8000c4c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c50:	2100      	movs	r1, #0
 8000c52:	4608      	mov	r0, r1
 8000c54:	e7f5      	b.n	8000c42 <__udivmoddi4+0xa6>
 8000c56:	fab3 f183 	clz	r1, r3
 8000c5a:	2900      	cmp	r1, #0
 8000c5c:	d146      	bne.n	8000cec <__udivmoddi4+0x150>
 8000c5e:	42a3      	cmp	r3, r4
 8000c60:	d302      	bcc.n	8000c68 <__udivmoddi4+0xcc>
 8000c62:	4290      	cmp	r0, r2
 8000c64:	f0c0 80f0 	bcc.w	8000e48 <__udivmoddi4+0x2ac>
 8000c68:	1a86      	subs	r6, r0, r2
 8000c6a:	eb64 0303 	sbc.w	r3, r4, r3
 8000c6e:	2001      	movs	r0, #1
 8000c70:	2d00      	cmp	r5, #0
 8000c72:	d0e6      	beq.n	8000c42 <__udivmoddi4+0xa6>
 8000c74:	e9c5 6300 	strd	r6, r3, [r5]
 8000c78:	e7e3      	b.n	8000c42 <__udivmoddi4+0xa6>
 8000c7a:	2a00      	cmp	r2, #0
 8000c7c:	f040 8090 	bne.w	8000da0 <__udivmoddi4+0x204>
 8000c80:	eba1 040c 	sub.w	r4, r1, ip
 8000c84:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c88:	fa1f f78c 	uxth.w	r7, ip
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c92:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c96:	fb08 4416 	mls	r4, r8, r6, r4
 8000c9a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c9e:	fb07 f006 	mul.w	r0, r7, r6
 8000ca2:	4298      	cmp	r0, r3
 8000ca4:	d908      	bls.n	8000cb8 <__udivmoddi4+0x11c>
 8000ca6:	eb1c 0303 	adds.w	r3, ip, r3
 8000caa:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x11a>
 8000cb0:	4298      	cmp	r0, r3
 8000cb2:	f200 80cd 	bhi.w	8000e50 <__udivmoddi4+0x2b4>
 8000cb6:	4626      	mov	r6, r4
 8000cb8:	1a1c      	subs	r4, r3, r0
 8000cba:	fa1f f38e 	uxth.w	r3, lr
 8000cbe:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cc2:	fb08 4410 	mls	r4, r8, r0, r4
 8000cc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cca:	fb00 f707 	mul.w	r7, r0, r7
 8000cce:	429f      	cmp	r7, r3
 8000cd0:	d908      	bls.n	8000ce4 <__udivmoddi4+0x148>
 8000cd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cd6:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000cda:	d202      	bcs.n	8000ce2 <__udivmoddi4+0x146>
 8000cdc:	429f      	cmp	r7, r3
 8000cde:	f200 80b0 	bhi.w	8000e42 <__udivmoddi4+0x2a6>
 8000ce2:	4620      	mov	r0, r4
 8000ce4:	1bdb      	subs	r3, r3, r7
 8000ce6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cea:	e7a5      	b.n	8000c38 <__udivmoddi4+0x9c>
 8000cec:	f1c1 0620 	rsb	r6, r1, #32
 8000cf0:	408b      	lsls	r3, r1
 8000cf2:	fa22 f706 	lsr.w	r7, r2, r6
 8000cf6:	431f      	orrs	r7, r3
 8000cf8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cfc:	fa04 f301 	lsl.w	r3, r4, r1
 8000d00:	ea43 030c 	orr.w	r3, r3, ip
 8000d04:	40f4      	lsrs	r4, r6
 8000d06:	fa00 f801 	lsl.w	r8, r0, r1
 8000d0a:	0c38      	lsrs	r0, r7, #16
 8000d0c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d10:	fbb4 fef0 	udiv	lr, r4, r0
 8000d14:	fa1f fc87 	uxth.w	ip, r7
 8000d18:	fb00 441e 	mls	r4, r0, lr, r4
 8000d1c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d20:	fb0e f90c 	mul.w	r9, lr, ip
 8000d24:	45a1      	cmp	r9, r4
 8000d26:	fa02 f201 	lsl.w	r2, r2, r1
 8000d2a:	d90a      	bls.n	8000d42 <__udivmoddi4+0x1a6>
 8000d2c:	193c      	adds	r4, r7, r4
 8000d2e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000d32:	f080 8084 	bcs.w	8000e3e <__udivmoddi4+0x2a2>
 8000d36:	45a1      	cmp	r9, r4
 8000d38:	f240 8081 	bls.w	8000e3e <__udivmoddi4+0x2a2>
 8000d3c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d40:	443c      	add	r4, r7
 8000d42:	eba4 0409 	sub.w	r4, r4, r9
 8000d46:	fa1f f983 	uxth.w	r9, r3
 8000d4a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d4e:	fb00 4413 	mls	r4, r0, r3, r4
 8000d52:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d56:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	d907      	bls.n	8000d6e <__udivmoddi4+0x1d2>
 8000d5e:	193c      	adds	r4, r7, r4
 8000d60:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000d64:	d267      	bcs.n	8000e36 <__udivmoddi4+0x29a>
 8000d66:	45a4      	cmp	ip, r4
 8000d68:	d965      	bls.n	8000e36 <__udivmoddi4+0x29a>
 8000d6a:	3b02      	subs	r3, #2
 8000d6c:	443c      	add	r4, r7
 8000d6e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d72:	fba0 9302 	umull	r9, r3, r0, r2
 8000d76:	eba4 040c 	sub.w	r4, r4, ip
 8000d7a:	429c      	cmp	r4, r3
 8000d7c:	46ce      	mov	lr, r9
 8000d7e:	469c      	mov	ip, r3
 8000d80:	d351      	bcc.n	8000e26 <__udivmoddi4+0x28a>
 8000d82:	d04e      	beq.n	8000e22 <__udivmoddi4+0x286>
 8000d84:	b155      	cbz	r5, 8000d9c <__udivmoddi4+0x200>
 8000d86:	ebb8 030e 	subs.w	r3, r8, lr
 8000d8a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d8e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d92:	40cb      	lsrs	r3, r1
 8000d94:	431e      	orrs	r6, r3
 8000d96:	40cc      	lsrs	r4, r1
 8000d98:	e9c5 6400 	strd	r6, r4, [r5]
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	e750      	b.n	8000c42 <__udivmoddi4+0xa6>
 8000da0:	f1c2 0320 	rsb	r3, r2, #32
 8000da4:	fa20 f103 	lsr.w	r1, r0, r3
 8000da8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dac:	fa24 f303 	lsr.w	r3, r4, r3
 8000db0:	4094      	lsls	r4, r2
 8000db2:	430c      	orrs	r4, r1
 8000db4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000dbc:	fa1f f78c 	uxth.w	r7, ip
 8000dc0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dc4:	fb08 3110 	mls	r1, r8, r0, r3
 8000dc8:	0c23      	lsrs	r3, r4, #16
 8000dca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dce:	fb00 f107 	mul.w	r1, r0, r7
 8000dd2:	4299      	cmp	r1, r3
 8000dd4:	d908      	bls.n	8000de8 <__udivmoddi4+0x24c>
 8000dd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000dda:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000dde:	d22c      	bcs.n	8000e3a <__udivmoddi4+0x29e>
 8000de0:	4299      	cmp	r1, r3
 8000de2:	d92a      	bls.n	8000e3a <__udivmoddi4+0x29e>
 8000de4:	3802      	subs	r0, #2
 8000de6:	4463      	add	r3, ip
 8000de8:	1a5b      	subs	r3, r3, r1
 8000dea:	b2a4      	uxth	r4, r4
 8000dec:	fbb3 f1f8 	udiv	r1, r3, r8
 8000df0:	fb08 3311 	mls	r3, r8, r1, r3
 8000df4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000df8:	fb01 f307 	mul.w	r3, r1, r7
 8000dfc:	42a3      	cmp	r3, r4
 8000dfe:	d908      	bls.n	8000e12 <__udivmoddi4+0x276>
 8000e00:	eb1c 0404 	adds.w	r4, ip, r4
 8000e04:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000e08:	d213      	bcs.n	8000e32 <__udivmoddi4+0x296>
 8000e0a:	42a3      	cmp	r3, r4
 8000e0c:	d911      	bls.n	8000e32 <__udivmoddi4+0x296>
 8000e0e:	3902      	subs	r1, #2
 8000e10:	4464      	add	r4, ip
 8000e12:	1ae4      	subs	r4, r4, r3
 8000e14:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e18:	e739      	b.n	8000c8e <__udivmoddi4+0xf2>
 8000e1a:	4604      	mov	r4, r0
 8000e1c:	e6f0      	b.n	8000c00 <__udivmoddi4+0x64>
 8000e1e:	4608      	mov	r0, r1
 8000e20:	e706      	b.n	8000c30 <__udivmoddi4+0x94>
 8000e22:	45c8      	cmp	r8, r9
 8000e24:	d2ae      	bcs.n	8000d84 <__udivmoddi4+0x1e8>
 8000e26:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e2a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e2e:	3801      	subs	r0, #1
 8000e30:	e7a8      	b.n	8000d84 <__udivmoddi4+0x1e8>
 8000e32:	4631      	mov	r1, r6
 8000e34:	e7ed      	b.n	8000e12 <__udivmoddi4+0x276>
 8000e36:	4603      	mov	r3, r0
 8000e38:	e799      	b.n	8000d6e <__udivmoddi4+0x1d2>
 8000e3a:	4630      	mov	r0, r6
 8000e3c:	e7d4      	b.n	8000de8 <__udivmoddi4+0x24c>
 8000e3e:	46d6      	mov	lr, sl
 8000e40:	e77f      	b.n	8000d42 <__udivmoddi4+0x1a6>
 8000e42:	4463      	add	r3, ip
 8000e44:	3802      	subs	r0, #2
 8000e46:	e74d      	b.n	8000ce4 <__udivmoddi4+0x148>
 8000e48:	4606      	mov	r6, r0
 8000e4a:	4623      	mov	r3, r4
 8000e4c:	4608      	mov	r0, r1
 8000e4e:	e70f      	b.n	8000c70 <__udivmoddi4+0xd4>
 8000e50:	3e02      	subs	r6, #2
 8000e52:	4463      	add	r3, ip
 8000e54:	e730      	b.n	8000cb8 <__udivmoddi4+0x11c>
 8000e56:	bf00      	nop

08000e58 <__aeabi_idiv0>:
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop

08000e5c <bit16ToInt>:
void intTo16Bit(int num, int ind, uint8_t* buffer) {
  buffer[ind] = (num >> 8) & 0xFF;  // Byte pertama
  buffer[ind+1] = num & 0xFF;         // Byte kedua
}

int bit16ToInt(int ind, uint8_t* buffer) {
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	6039      	str	r1, [r7, #0]
  int num = ((int) buffer[ind] << 8) | (int) buffer[ind+1];
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	683a      	ldr	r2, [r7, #0]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	021b      	lsls	r3, r3, #8
 8000e70:	687a      	ldr	r2, [r7, #4]
 8000e72:	3201      	adds	r2, #1
 8000e74:	6839      	ldr	r1, [r7, #0]
 8000e76:	440a      	add	r2, r1
 8000e78:	7812      	ldrb	r2, [r2, #0]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	60fb      	str	r3, [r7, #12]
  if (num > 32767) {
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000e84:	db03      	blt.n	8000e8e <bit16ToInt+0x32>
    num -= 65536;
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
 8000e8c:	60fb      	str	r3, [r7, #12]
  }
  return num;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3714      	adds	r7, #20
 8000e94:	46bd      	mov	sp, r7
 8000e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9a:	4770      	bx	lr

08000e9c <merge16>:

void merge16(int16_t *values, uint8_t *merged_data, size_t num_values) {
 8000e9c:	b480      	push	{r7}
 8000e9e:	b087      	sub	sp, #28
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	607a      	str	r2, [r7, #4]
    for (size_t i = 0; i < num_values; i++) {
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]
 8000eac:	e01d      	b.n	8000eea <merge16+0x4e>
        merged_data[i * 2] = (uint8_t)(values[i] & 0xFF);
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	68fa      	ldr	r2, [r7, #12]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	68ba      	ldr	r2, [r7, #8]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	b2ca      	uxtb	r2, r1
 8000ec4:	701a      	strb	r2, [r3, #0]
        merged_data[i * 2 + 1] = (uint8_t)((values[i] >> 8) & 0xFF);
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	68fa      	ldr	r2, [r7, #12]
 8000ecc:	4413      	add	r3, r2
 8000ece:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ed2:	121b      	asrs	r3, r3, #8
 8000ed4:	b219      	sxth	r1, r3
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	3301      	adds	r3, #1
 8000edc:	68ba      	ldr	r2, [r7, #8]
 8000ede:	4413      	add	r3, r2
 8000ee0:	b2ca      	uxtb	r2, r1
 8000ee2:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < num_values; i++) {
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	617b      	str	r3, [r7, #20]
 8000eea:	697a      	ldr	r2, [r7, #20]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	429a      	cmp	r2, r3
 8000ef0:	d3dd      	bcc.n	8000eae <merge16+0x12>
    }
}
 8000ef2:	bf00      	nop
 8000ef4:	bf00      	nop
 8000ef6:	371c      	adds	r7, #28
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <Set_LED>:
uint8_t LED_Data[MAX_LED][4];
uint8_t LED_Mod[MAX_LED][4];
uint16_t pwmData[(24 * MAX_LED) + 50];

// Function definitions
void Set_LED(int LEDnum, int Red, int Green, int Blue) {
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	60f8      	str	r0, [r7, #12]
 8000f08:	60b9      	str	r1, [r7, #8]
 8000f0a:	607a      	str	r2, [r7, #4]
 8000f0c:	603b      	str	r3, [r7, #0]
    LED_Data[LEDnum][0] = LEDnum;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	b2d9      	uxtb	r1, r3
 8000f12:	4a11      	ldr	r2, [pc, #68]	@ (8000f58 <Set_LED+0x58>)
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
    LED_Data[LEDnum][1] = Green;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	b2d9      	uxtb	r1, r3
 8000f1e:	4a0e      	ldr	r2, [pc, #56]	@ (8000f58 <Set_LED+0x58>)
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	4413      	add	r3, r2
 8000f26:	460a      	mov	r2, r1
 8000f28:	705a      	strb	r2, [r3, #1]
    LED_Data[LEDnum][2] = Red;
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	b2d9      	uxtb	r1, r3
 8000f2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f58 <Set_LED+0x58>)
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	4413      	add	r3, r2
 8000f36:	460a      	mov	r2, r1
 8000f38:	709a      	strb	r2, [r3, #2]
    LED_Data[LEDnum][3] = Blue;
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	b2d9      	uxtb	r1, r3
 8000f3e:	4a06      	ldr	r2, [pc, #24]	@ (8000f58 <Set_LED+0x58>)
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	4413      	add	r3, r2
 8000f46:	460a      	mov	r2, r1
 8000f48:	70da      	strb	r2, [r3, #3]
}
 8000f4a:	bf00      	nop
 8000f4c:	3714      	adds	r7, #20
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	2000016c 	.word	0x2000016c
 8000f5c:	00000000 	.word	0x00000000

08000f60 <WS2812_Send>:
        }
    }
#endif
}

void WS2812_Send(TIM_HandleTypeDef *htim, uint32_t channel, int timer_arr) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b08c      	sub	sp, #48	@ 0x30
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
    uint32_t indx = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t color;
    float twothird = (2.0 / 3.0) * timer_arr;
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f7ff fa7f 	bl	8000474 <__aeabi_i2d>
 8000f76:	a344      	add	r3, pc, #272	@ (adr r3, 8001088 <WS2812_Send+0x128>)
 8000f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f7c:	f7ff fae4 	bl	8000548 <__aeabi_dmul>
 8000f80:	4602      	mov	r2, r0
 8000f82:	460b      	mov	r3, r1
 8000f84:	4610      	mov	r0, r2
 8000f86:	4619      	mov	r1, r3
 8000f88:	f7ff fda0 	bl	8000acc <__aeabi_d2f>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	61fb      	str	r3, [r7, #28]
    float onethird = (1.0 / 3.0) * timer_arr;
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	f7ff fa6f 	bl	8000474 <__aeabi_i2d>
 8000f96:	a33e      	add	r3, pc, #248	@ (adr r3, 8001090 <WS2812_Send+0x130>)
 8000f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f9c:	f7ff fad4 	bl	8000548 <__aeabi_dmul>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	4610      	mov	r0, r2
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	f7ff fd90 	bl	8000acc <__aeabi_d2f>
 8000fac:	4603      	mov	r3, r0
 8000fae:	61bb      	str	r3, [r7, #24]

    for (int i = 0; i < MAX_LED; i++) {
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000fb4:	e042      	b.n	800103c <WS2812_Send+0xdc>
#if USE_BRIGHTNESS
        color = ((LED_Mod[i][1] << 16) | (LED_Mod[i][2] << 8) | (LED_Mod[i][3]));
#else
        color = ((LED_Data[i][1] << 16) | (LED_Data[i][2] << 8) | (LED_Data[i][3]));
 8000fb6:	4a32      	ldr	r2, [pc, #200]	@ (8001080 <WS2812_Send+0x120>)
 8000fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fba:	009b      	lsls	r3, r3, #2
 8000fbc:	4413      	add	r3, r2
 8000fbe:	785b      	ldrb	r3, [r3, #1]
 8000fc0:	041a      	lsls	r2, r3, #16
 8000fc2:	492f      	ldr	r1, [pc, #188]	@ (8001080 <WS2812_Send+0x120>)
 8000fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fc6:	009b      	lsls	r3, r3, #2
 8000fc8:	440b      	add	r3, r1
 8000fca:	789b      	ldrb	r3, [r3, #2]
 8000fcc:	021b      	lsls	r3, r3, #8
 8000fce:	431a      	orrs	r2, r3
 8000fd0:	492b      	ldr	r1, [pc, #172]	@ (8001080 <WS2812_Send+0x120>)
 8000fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000fd4:	009b      	lsls	r3, r3, #2
 8000fd6:	440b      	add	r3, r1
 8000fd8:	78db      	ldrb	r3, [r3, #3]
 8000fda:	4313      	orrs	r3, r2
 8000fdc:	617b      	str	r3, [r7, #20]
#endif

        for (int i = 23; i >= 0; i--) {
 8000fde:	2317      	movs	r3, #23
 8000fe0:	627b      	str	r3, [r7, #36]	@ 0x24
 8000fe2:	e025      	b.n	8001030 <WS2812_Send+0xd0>
            if (color & (1 << i)) {
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	461a      	mov	r2, r3
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d00b      	beq.n	800100e <WS2812_Send+0xae>
                pwmData[indx] = (uint16_t)twothird;  // 2/3 of arr
 8000ff6:	edd7 7a07 	vldr	s15, [r7, #28]
 8000ffa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000ffe:	ee17 3a90 	vmov	r3, s15
 8001002:	b299      	uxth	r1, r3
 8001004:	4a1f      	ldr	r2, [pc, #124]	@ (8001084 <WS2812_Send+0x124>)
 8001006:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001008:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 800100c:	e00a      	b.n	8001024 <WS2812_Send+0xc4>
            } else {
                pwmData[indx] = (uint16_t)onethird;  // 1/3 of arr
 800100e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001012:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001016:	ee17 3a90 	vmov	r3, s15
 800101a:	b299      	uxth	r1, r3
 800101c:	4a19      	ldr	r2, [pc, #100]	@ (8001084 <WS2812_Send+0x124>)
 800101e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001020:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            }
            indx++;
 8001024:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001026:	3301      	adds	r3, #1
 8001028:	62fb      	str	r3, [r7, #44]	@ 0x2c
        for (int i = 23; i >= 0; i--) {
 800102a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800102c:	3b01      	subs	r3, #1
 800102e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001030:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001032:	2b00      	cmp	r3, #0
 8001034:	dad6      	bge.n	8000fe4 <WS2812_Send+0x84>
    for (int i = 0; i < MAX_LED; i++) {
 8001036:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001038:	3301      	adds	r3, #1
 800103a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800103c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800103e:	2b0a      	cmp	r3, #10
 8001040:	ddb9      	ble.n	8000fb6 <WS2812_Send+0x56>
        }
    }

    for (int i = 0; i < 50; i++) {
 8001042:	2300      	movs	r3, #0
 8001044:	623b      	str	r3, [r7, #32]
 8001046:	e00a      	b.n	800105e <WS2812_Send+0xfe>
        pwmData[indx] = 0;
 8001048:	4a0e      	ldr	r2, [pc, #56]	@ (8001084 <WS2812_Send+0x124>)
 800104a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800104c:	2100      	movs	r1, #0
 800104e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        indx++;
 8001052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001054:	3301      	adds	r3, #1
 8001056:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (int i = 0; i < 50; i++) {
 8001058:	6a3b      	ldr	r3, [r7, #32]
 800105a:	3301      	adds	r3, #1
 800105c:	623b      	str	r3, [r7, #32]
 800105e:	6a3b      	ldr	r3, [r7, #32]
 8001060:	2b31      	cmp	r3, #49	@ 0x31
 8001062:	ddf1      	ble.n	8001048 <WS2812_Send+0xe8>
    }

    HAL_TIM_PWM_Start_DMA(htim, channel, (uint32_t *)pwmData, indx);
 8001064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001066:	b29b      	uxth	r3, r3
 8001068:	4a06      	ldr	r2, [pc, #24]	@ (8001084 <WS2812_Send+0x124>)
 800106a:	68b9      	ldr	r1, [r7, #8]
 800106c:	68f8      	ldr	r0, [r7, #12]
 800106e:	f007 f997 	bl	80083a0 <HAL_TIM_PWM_Start_DMA>
}
 8001072:	bf00      	nop
 8001074:	3730      	adds	r7, #48	@ 0x30
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	f3af 8000 	nop.w
 8001080:	2000016c 	.word	0x2000016c
 8001084:	20000198 	.word	0x20000198
 8001088:	55555555 	.word	0x55555555
 800108c:	3fe55555 	.word	0x3fe55555
 8001090:	55555555 	.word	0x55555555
 8001094:	3fd55555 	.word	0x3fd55555

08001098 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8001098:	b480      	push	{r7}
 800109a:	b085      	sub	sp, #20
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80010a4:	68fb      	ldr	r3, [r7, #12]
 80010a6:	4a07      	ldr	r2, [pc, #28]	@ (80010c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80010a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	4a06      	ldr	r2, [pc, #24]	@ (80010c8 <vApplicationGetIdleTaskMemory+0x30>)
 80010ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2280      	movs	r2, #128	@ 0x80
 80010b4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80010b6:	bf00      	nop
 80010b8:	3714      	adds	r7, #20
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	2000040c 	.word	0x2000040c
 80010c8:	20000460 	.word	0x20000460

080010cc <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
//	HAL_UART_Receive_IT(&huart2, atmega_buffer, 1);
	if (huart->Instance == USART2) {
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a78      	ldr	r2, [pc, #480]	@ (80012bc <HAL_UART_RxCpltCallback+0x1f0>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	f040 80e9 	bne.w	80012b2 <HAL_UART_RxCpltCallback+0x1e6>
		if (atmega_buffer[0] == 0xAA && status_rx_atmega == 0) {
 80010e0:	4b77      	ldr	r3, [pc, #476]	@ (80012c0 <HAL_UART_RxCpltCallback+0x1f4>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2baa      	cmp	r3, #170	@ 0xaa
 80010e6:	d10d      	bne.n	8001104 <HAL_UART_RxCpltCallback+0x38>
 80010e8:	4b76      	ldr	r3, [pc, #472]	@ (80012c4 <HAL_UART_RxCpltCallback+0x1f8>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d109      	bne.n	8001104 <HAL_UART_RxCpltCallback+0x38>
			status_rx_atmega = 1;
 80010f0:	4b74      	ldr	r3, [pc, #464]	@ (80012c4 <HAL_UART_RxCpltCallback+0x1f8>)
 80010f2:	2201      	movs	r2, #1
 80010f4:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart2, atmega_buffer + 1, 1);
 80010f6:	4b74      	ldr	r3, [pc, #464]	@ (80012c8 <HAL_UART_RxCpltCallback+0x1fc>)
 80010f8:	2201      	movs	r2, #1
 80010fa:	4619      	mov	r1, r3
 80010fc:	4873      	ldr	r0, [pc, #460]	@ (80012cc <HAL_UART_RxCpltCallback+0x200>)
 80010fe:	f008 fa01 	bl	8009504 <HAL_UART_Receive_IT>
 8001102:	e0d6      	b.n	80012b2 <HAL_UART_RxCpltCallback+0x1e6>
		} else if (atmega_buffer[1] == 0xBB && status_rx_atmega == 1){
 8001104:	4b6e      	ldr	r3, [pc, #440]	@ (80012c0 <HAL_UART_RxCpltCallback+0x1f4>)
 8001106:	785b      	ldrb	r3, [r3, #1]
 8001108:	2bbb      	cmp	r3, #187	@ 0xbb
 800110a:	d10d      	bne.n	8001128 <HAL_UART_RxCpltCallback+0x5c>
 800110c:	4b6d      	ldr	r3, [pc, #436]	@ (80012c4 <HAL_UART_RxCpltCallback+0x1f8>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d109      	bne.n	8001128 <HAL_UART_RxCpltCallback+0x5c>
			status_rx_atmega = 2;
 8001114:	4b6b      	ldr	r3, [pc, #428]	@ (80012c4 <HAL_UART_RxCpltCallback+0x1f8>)
 8001116:	2202      	movs	r2, #2
 8001118:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart2, atmega_buffer + 2, 11);
 800111a:	4b6d      	ldr	r3, [pc, #436]	@ (80012d0 <HAL_UART_RxCpltCallback+0x204>)
 800111c:	220b      	movs	r2, #11
 800111e:	4619      	mov	r1, r3
 8001120:	486a      	ldr	r0, [pc, #424]	@ (80012cc <HAL_UART_RxCpltCallback+0x200>)
 8001122:	f008 f9ef 	bl	8009504 <HAL_UART_Receive_IT>
 8001126:	e0c4      	b.n	80012b2 <HAL_UART_RxCpltCallback+0x1e6>
		} else if ( status_rx_atmega == 2) {
 8001128:	4b66      	ldr	r3, [pc, #408]	@ (80012c4 <HAL_UART_RxCpltCallback+0x1f8>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	2b02      	cmp	r3, #2
 800112e:	f040 80b7 	bne.w	80012a0 <HAL_UART_RxCpltCallback+0x1d4>
			raw_bno055_yaw = (atmega_buffer[4] << 16) | (atmega_buffer[3] << 8) | atmega_buffer[2];
 8001132:	4b63      	ldr	r3, [pc, #396]	@ (80012c0 <HAL_UART_RxCpltCallback+0x1f4>)
 8001134:	791b      	ldrb	r3, [r3, #4]
 8001136:	041a      	lsls	r2, r3, #16
 8001138:	4b61      	ldr	r3, [pc, #388]	@ (80012c0 <HAL_UART_RxCpltCallback+0x1f4>)
 800113a:	78db      	ldrb	r3, [r3, #3]
 800113c:	021b      	lsls	r3, r3, #8
 800113e:	4313      	orrs	r3, r2
 8001140:	4a5f      	ldr	r2, [pc, #380]	@ (80012c0 <HAL_UART_RxCpltCallback+0x1f4>)
 8001142:	7892      	ldrb	r2, [r2, #2]
 8001144:	4313      	orrs	r3, r2
 8001146:	4a63      	ldr	r2, [pc, #396]	@ (80012d4 <HAL_UART_RxCpltCallback+0x208>)
 8001148:	6013      	str	r3, [r2, #0]
			raw_bno055_pitch = (atmega_buffer[7] << 16) | (atmega_buffer[6] << 8) | atmega_buffer[5];
 800114a:	4b5d      	ldr	r3, [pc, #372]	@ (80012c0 <HAL_UART_RxCpltCallback+0x1f4>)
 800114c:	79db      	ldrb	r3, [r3, #7]
 800114e:	041a      	lsls	r2, r3, #16
 8001150:	4b5b      	ldr	r3, [pc, #364]	@ (80012c0 <HAL_UART_RxCpltCallback+0x1f4>)
 8001152:	799b      	ldrb	r3, [r3, #6]
 8001154:	021b      	lsls	r3, r3, #8
 8001156:	4313      	orrs	r3, r2
 8001158:	4a59      	ldr	r2, [pc, #356]	@ (80012c0 <HAL_UART_RxCpltCallback+0x1f4>)
 800115a:	7952      	ldrb	r2, [r2, #5]
 800115c:	4313      	orrs	r3, r2
 800115e:	4a5e      	ldr	r2, [pc, #376]	@ (80012d8 <HAL_UART_RxCpltCallback+0x20c>)
 8001160:	6013      	str	r3, [r2, #0]
			raw_bno055_roll = (atmega_buffer[10] << 16) | (atmega_buffer[9] << 8) | atmega_buffer[8];
 8001162:	4b57      	ldr	r3, [pc, #348]	@ (80012c0 <HAL_UART_RxCpltCallback+0x1f4>)
 8001164:	7a9b      	ldrb	r3, [r3, #10]
 8001166:	041a      	lsls	r2, r3, #16
 8001168:	4b55      	ldr	r3, [pc, #340]	@ (80012c0 <HAL_UART_RxCpltCallback+0x1f4>)
 800116a:	7a5b      	ldrb	r3, [r3, #9]
 800116c:	021b      	lsls	r3, r3, #8
 800116e:	4313      	orrs	r3, r2
 8001170:	4a53      	ldr	r2, [pc, #332]	@ (80012c0 <HAL_UART_RxCpltCallback+0x1f4>)
 8001172:	7a12      	ldrb	r2, [r2, #8]
 8001174:	4313      	orrs	r3, r2
 8001176:	4a59      	ldr	r2, [pc, #356]	@ (80012dc <HAL_UART_RxCpltCallback+0x210>)
 8001178:	6013      	str	r3, [r2, #0]

			if (raw_bno055_yaw > 8388607) {
 800117a:	4b56      	ldr	r3, [pc, #344]	@ (80012d4 <HAL_UART_RxCpltCallback+0x208>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001182:	db15      	blt.n	80011b0 <HAL_UART_RxCpltCallback+0xe4>
				bno055_yaw = ((raw_bno055_yaw - 16777216) / 100.0);
 8001184:	4b53      	ldr	r3, [pc, #332]	@ (80012d4 <HAL_UART_RxCpltCallback+0x208>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f103 437f 	add.w	r3, r3, #4278190080	@ 0xff000000
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff f971 	bl	8000474 <__aeabi_i2d>
 8001192:	f04f 0200 	mov.w	r2, #0
 8001196:	4b52      	ldr	r3, [pc, #328]	@ (80012e0 <HAL_UART_RxCpltCallback+0x214>)
 8001198:	f7ff fb00 	bl	800079c <__aeabi_ddiv>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	4610      	mov	r0, r2
 80011a2:	4619      	mov	r1, r3
 80011a4:	f7ff fc92 	bl	8000acc <__aeabi_d2f>
 80011a8:	4603      	mov	r3, r0
 80011aa:	4a4e      	ldr	r2, [pc, #312]	@ (80012e4 <HAL_UART_RxCpltCallback+0x218>)
 80011ac:	6013      	str	r3, [r2, #0]
 80011ae:	e012      	b.n	80011d6 <HAL_UART_RxCpltCallback+0x10a>
			} else {
				bno055_yaw = (raw_bno055_yaw / 100.0);
 80011b0:	4b48      	ldr	r3, [pc, #288]	@ (80012d4 <HAL_UART_RxCpltCallback+0x208>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff f95d 	bl	8000474 <__aeabi_i2d>
 80011ba:	f04f 0200 	mov.w	r2, #0
 80011be:	4b48      	ldr	r3, [pc, #288]	@ (80012e0 <HAL_UART_RxCpltCallback+0x214>)
 80011c0:	f7ff faec 	bl	800079c <__aeabi_ddiv>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4610      	mov	r0, r2
 80011ca:	4619      	mov	r1, r3
 80011cc:	f7ff fc7e 	bl	8000acc <__aeabi_d2f>
 80011d0:	4603      	mov	r3, r0
 80011d2:	4a44      	ldr	r2, [pc, #272]	@ (80012e4 <HAL_UART_RxCpltCallback+0x218>)
 80011d4:	6013      	str	r3, [r2, #0]
			}

			if (raw_bno055_pitch > 8388607) {
 80011d6:	4b40      	ldr	r3, [pc, #256]	@ (80012d8 <HAL_UART_RxCpltCallback+0x20c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80011de:	db15      	blt.n	800120c <HAL_UART_RxCpltCallback+0x140>
				bno055_pitch = ((raw_bno055_pitch - 16777216) / 100.0);
 80011e0:	4b3d      	ldr	r3, [pc, #244]	@ (80012d8 <HAL_UART_RxCpltCallback+0x20c>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f103 437f 	add.w	r3, r3, #4278190080	@ 0xff000000
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff f943 	bl	8000474 <__aeabi_i2d>
 80011ee:	f04f 0200 	mov.w	r2, #0
 80011f2:	4b3b      	ldr	r3, [pc, #236]	@ (80012e0 <HAL_UART_RxCpltCallback+0x214>)
 80011f4:	f7ff fad2 	bl	800079c <__aeabi_ddiv>
 80011f8:	4602      	mov	r2, r0
 80011fa:	460b      	mov	r3, r1
 80011fc:	4610      	mov	r0, r2
 80011fe:	4619      	mov	r1, r3
 8001200:	f7ff fc64 	bl	8000acc <__aeabi_d2f>
 8001204:	4603      	mov	r3, r0
 8001206:	4a38      	ldr	r2, [pc, #224]	@ (80012e8 <HAL_UART_RxCpltCallback+0x21c>)
 8001208:	6013      	str	r3, [r2, #0]
 800120a:	e012      	b.n	8001232 <HAL_UART_RxCpltCallback+0x166>
			} else {
				bno055_pitch = (raw_bno055_pitch / 100.0);
 800120c:	4b32      	ldr	r3, [pc, #200]	@ (80012d8 <HAL_UART_RxCpltCallback+0x20c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff f92f 	bl	8000474 <__aeabi_i2d>
 8001216:	f04f 0200 	mov.w	r2, #0
 800121a:	4b31      	ldr	r3, [pc, #196]	@ (80012e0 <HAL_UART_RxCpltCallback+0x214>)
 800121c:	f7ff fabe 	bl	800079c <__aeabi_ddiv>
 8001220:	4602      	mov	r2, r0
 8001222:	460b      	mov	r3, r1
 8001224:	4610      	mov	r0, r2
 8001226:	4619      	mov	r1, r3
 8001228:	f7ff fc50 	bl	8000acc <__aeabi_d2f>
 800122c:	4603      	mov	r3, r0
 800122e:	4a2e      	ldr	r2, [pc, #184]	@ (80012e8 <HAL_UART_RxCpltCallback+0x21c>)
 8001230:	6013      	str	r3, [r2, #0]
			}

			if (raw_bno055_roll > 8388607) {
 8001232:	4b2a      	ldr	r3, [pc, #168]	@ (80012dc <HAL_UART_RxCpltCallback+0x210>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800123a:	db15      	blt.n	8001268 <HAL_UART_RxCpltCallback+0x19c>
				bno055_roll = ((raw_bno055_roll - 16777216) / 100.0);
 800123c:	4b27      	ldr	r3, [pc, #156]	@ (80012dc <HAL_UART_RxCpltCallback+0x210>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f103 437f 	add.w	r3, r3, #4278190080	@ 0xff000000
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff f915 	bl	8000474 <__aeabi_i2d>
 800124a:	f04f 0200 	mov.w	r2, #0
 800124e:	4b24      	ldr	r3, [pc, #144]	@ (80012e0 <HAL_UART_RxCpltCallback+0x214>)
 8001250:	f7ff faa4 	bl	800079c <__aeabi_ddiv>
 8001254:	4602      	mov	r2, r0
 8001256:	460b      	mov	r3, r1
 8001258:	4610      	mov	r0, r2
 800125a:	4619      	mov	r1, r3
 800125c:	f7ff fc36 	bl	8000acc <__aeabi_d2f>
 8001260:	4603      	mov	r3, r0
 8001262:	4a22      	ldr	r2, [pc, #136]	@ (80012ec <HAL_UART_RxCpltCallback+0x220>)
 8001264:	6013      	str	r3, [r2, #0]
 8001266:	e012      	b.n	800128e <HAL_UART_RxCpltCallback+0x1c2>
			} else {
				bno055_roll = (raw_bno055_roll / 100.0);
 8001268:	4b1c      	ldr	r3, [pc, #112]	@ (80012dc <HAL_UART_RxCpltCallback+0x210>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff f901 	bl	8000474 <__aeabi_i2d>
 8001272:	f04f 0200 	mov.w	r2, #0
 8001276:	4b1a      	ldr	r3, [pc, #104]	@ (80012e0 <HAL_UART_RxCpltCallback+0x214>)
 8001278:	f7ff fa90 	bl	800079c <__aeabi_ddiv>
 800127c:	4602      	mov	r2, r0
 800127e:	460b      	mov	r3, r1
 8001280:	4610      	mov	r0, r2
 8001282:	4619      	mov	r1, r3
 8001284:	f7ff fc22 	bl	8000acc <__aeabi_d2f>
 8001288:	4603      	mov	r3, r0
 800128a:	4a18      	ldr	r2, [pc, #96]	@ (80012ec <HAL_UART_RxCpltCallback+0x220>)
 800128c:	6013      	str	r3, [r2, #0]
			}

			status_rx_atmega = 0;
 800128e:	4b0d      	ldr	r3, [pc, #52]	@ (80012c4 <HAL_UART_RxCpltCallback+0x1f8>)
 8001290:	2200      	movs	r2, #0
 8001292:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart2, atmega_buffer, 1);
 8001294:	2201      	movs	r2, #1
 8001296:	490a      	ldr	r1, [pc, #40]	@ (80012c0 <HAL_UART_RxCpltCallback+0x1f4>)
 8001298:	480c      	ldr	r0, [pc, #48]	@ (80012cc <HAL_UART_RxCpltCallback+0x200>)
 800129a:	f008 f933 	bl	8009504 <HAL_UART_Receive_IT>
		} else {
			status_rx_atmega = 0;
			HAL_UART_Receive_IT(&huart2, atmega_buffer, 1);
		}
	}
}
 800129e:	e008      	b.n	80012b2 <HAL_UART_RxCpltCallback+0x1e6>
			status_rx_atmega = 0;
 80012a0:	4b08      	ldr	r3, [pc, #32]	@ (80012c4 <HAL_UART_RxCpltCallback+0x1f8>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart2, atmega_buffer, 1);
 80012a6:	2201      	movs	r2, #1
 80012a8:	4905      	ldr	r1, [pc, #20]	@ (80012c0 <HAL_UART_RxCpltCallback+0x1f4>)
 80012aa:	4808      	ldr	r0, [pc, #32]	@ (80012cc <HAL_UART_RxCpltCallback+0x200>)
 80012ac:	f008 f92a 	bl	8009504 <HAL_UART_Receive_IT>
}
 80012b0:	e7ff      	b.n	80012b2 <HAL_UART_RxCpltCallback+0x1e6>
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	40004400 	.word	0x40004400
 80012c0:	20000a10 	.word	0x20000a10
 80012c4:	20000a1d 	.word	0x20000a1d
 80012c8:	20000a11 	.word	0x20000a11
 80012cc:	200008dc 	.word	0x200008dc
 80012d0:	20000a12 	.word	0x20000a12
 80012d4:	20000a20 	.word	0x20000a20
 80012d8:	20000a24 	.word	0x20000a24
 80012dc:	20000a28 	.word	0x20000a28
 80012e0:	40590000 	.word	0x40590000
 80012e4:	20000a2c 	.word	0x20000a2c
 80012e8:	20000a30 	.word	0x20000a30
 80012ec:	20000a34 	.word	0x20000a34

080012f0 <convertADCtoVoltage>:

float convertADCtoVoltage(uint16_t adc_value, uint16_t min_adc, uint16_t max_adc, float min_voltage, float max_voltage) {
 80012f0:	b480      	push	{r7}
 80012f2:	b087      	sub	sp, #28
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	ed87 0a01 	vstr	s0, [r7, #4]
 80012fc:	edc7 0a00 	vstr	s1, [r7]
 8001300:	81fb      	strh	r3, [r7, #14]
 8001302:	460b      	mov	r3, r1
 8001304:	81bb      	strh	r3, [r7, #12]
 8001306:	4613      	mov	r3, r2
 8001308:	817b      	strh	r3, [r7, #10]
    float a = (max_voltage - min_voltage) / (float)(max_adc - min_adc);
 800130a:	ed97 7a00 	vldr	s14, [r7]
 800130e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001312:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001316:	897a      	ldrh	r2, [r7, #10]
 8001318:	89bb      	ldrh	r3, [r7, #12]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	ee07 3a90 	vmov	s15, r3
 8001320:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001324:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001328:	edc7 7a05 	vstr	s15, [r7, #20]
    float b = min_voltage - a * min_adc;
 800132c:	89bb      	ldrh	r3, [r7, #12]
 800132e:	ee07 3a90 	vmov	s15, r3
 8001332:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001336:	edd7 7a05 	vldr	s15, [r7, #20]
 800133a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800133e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001342:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001346:	edc7 7a04 	vstr	s15, [r7, #16]
    return a * adc_value + b;
 800134a:	89fb      	ldrh	r3, [r7, #14]
 800134c:	ee07 3a90 	vmov	s15, r3
 8001350:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001354:	edd7 7a05 	vldr	s15, [r7, #20]
 8001358:	ee27 7a27 	vmul.f32	s14, s14, s15
 800135c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001360:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8001364:	eeb0 0a67 	vmov.f32	s0, s15
 8001368:	371c      	adds	r7, #28
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
	...

08001374 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_2);
 800137c:	2104      	movs	r1, #4
 800137e:	4805      	ldr	r0, [pc, #20]	@ (8001394 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8001380:	f007 f9d6 	bl	8008730 <HAL_TIM_PWM_Stop_DMA>
	datasentflag=1;
 8001384:	4b04      	ldr	r3, [pc, #16]	@ (8001398 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8001386:	2201      	movs	r2, #1
 8001388:	601a      	str	r2, [r3, #0]
}
 800138a:	bf00      	nop
 800138c:	3708      	adds	r7, #8
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	2000075c 	.word	0x2000075c
 8001398:	20000b50 	.word	0x20000b50

0800139c <map>:

int map(int x, int in_min, int in_max, int out_min, int out_max) {
 800139c:	b480      	push	{r7}
 800139e:	b085      	sub	sp, #20
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	60f8      	str	r0, [r7, #12]
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
 80013a8:	603b      	str	r3, [r7, #0]
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	69b9      	ldr	r1, [r7, #24]
 80013b2:	683a      	ldr	r2, [r7, #0]
 80013b4:	1a8a      	subs	r2, r1, r2
 80013b6:	fb03 f202 	mul.w	r2, r3, r2
 80013ba:	6879      	ldr	r1, [r7, #4]
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	1acb      	subs	r3, r1, r3
 80013c0:	fb92 f2f3 	sdiv	r2, r2, r3
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	4413      	add	r3, r2
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3714      	adds	r7, #20
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013d4:	b5b0      	push	{r4, r5, r7, lr}
 80013d6:	b0a4      	sub	sp, #144	@ 0x90
 80013d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013da:	f002 fbc1 	bl	8003b60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013de:	f000 f8bb 	bl	8001558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013e2:	f000 fba7 	bl	8001b34 <MX_GPIO_Init>
  MX_DMA_Init();
 80013e6:	f000 fb6f 	bl	8001ac8 <MX_DMA_Init>
  MX_TIM4_Init();
 80013ea:	f000 fa03 	bl	80017f4 <MX_TIM4_Init>
  MX_TIM5_Init();
 80013ee:	f000 fa7b 	bl	80018e8 <MX_TIM5_Init>
  MX_TIM9_Init();
 80013f2:	f000 faf3 	bl	80019dc <MX_TIM9_Init>
  MX_USART2_UART_Init();
 80013f6:	f000 fb37 	bl	8001a68 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80013fa:	f000 f975 	bl	80016e8 <MX_I2C1_Init>
  MX_ADC1_Init();
 80013fe:	f000 f915 	bl	800162c <MX_ADC1_Init>
  MX_TIM3_Init();
 8001402:	f000 f99f 	bl	8001744 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  //ESC PWM Timer Init
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001406:	2100      	movs	r1, #0
 8001408:	4844      	ldr	r0, [pc, #272]	@ (800151c <main+0x148>)
 800140a:	f006 ff01 	bl	8008210 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800140e:	2104      	movs	r1, #4
 8001410:	4842      	ldr	r0, [pc, #264]	@ (800151c <main+0x148>)
 8001412:	f006 fefd 	bl	8008210 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001416:	2108      	movs	r1, #8
 8001418:	4840      	ldr	r0, [pc, #256]	@ (800151c <main+0x148>)
 800141a:	f006 fef9 	bl	8008210 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 800141e:	210c      	movs	r1, #12
 8001420:	483e      	ldr	r0, [pc, #248]	@ (800151c <main+0x148>)
 8001422:	f006 fef5 	bl	8008210 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001426:	2100      	movs	r1, #0
 8001428:	483d      	ldr	r0, [pc, #244]	@ (8001520 <main+0x14c>)
 800142a:	f006 fef1 	bl	8008210 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 800142e:	2104      	movs	r1, #4
 8001430:	483b      	ldr	r0, [pc, #236]	@ (8001520 <main+0x14c>)
 8001432:	f006 feed 	bl	8008210 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 8001436:	2108      	movs	r1, #8
 8001438:	4839      	ldr	r0, [pc, #228]	@ (8001520 <main+0x14c>)
 800143a:	f006 fee9 	bl	8008210 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 800143e:	210c      	movs	r1, #12
 8001440:	4837      	ldr	r0, [pc, #220]	@ (8001520 <main+0x14c>)
 8001442:	f006 fee5 	bl	8008210 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8001446:	2100      	movs	r1, #0
 8001448:	4836      	ldr	r0, [pc, #216]	@ (8001524 <main+0x150>)
 800144a:	f006 fee1 	bl	8008210 <HAL_TIM_PWM_Start>

  //ADC
  HAL_ADC_Start_DMA(&hadc1, adc1_value, 2);
 800144e:	2202      	movs	r2, #2
 8001450:	4935      	ldr	r1, [pc, #212]	@ (8001528 <main+0x154>)
 8001452:	4836      	ldr	r0, [pc, #216]	@ (800152c <main+0x158>)
 8001454:	f002 fc2e 	bl	8003cb4 <HAL_ADC_Start_DMA>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of cdcSerialTask */
  osThreadDef(cdcSerialTask, StartCdcSerialTask, osPriorityNormal, 0, 128);
 8001458:	4b35      	ldr	r3, [pc, #212]	@ (8001530 <main+0x15c>)
 800145a:	f107 0474 	add.w	r4, r7, #116	@ 0x74
 800145e:	461d      	mov	r5, r3
 8001460:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001462:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001464:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001468:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  cdcSerialTaskHandle = osThreadCreate(osThread(cdcSerialTask), NULL);
 800146c:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001470:	2100      	movs	r1, #0
 8001472:	4618      	mov	r0, r3
 8001474:	f00c fa91 	bl	800d99a <osThreadCreate>
 8001478:	4603      	mov	r3, r0
 800147a:	4a2e      	ldr	r2, [pc, #184]	@ (8001534 <main+0x160>)
 800147c:	6013      	str	r3, [r2, #0]

  /* definition and creation of movementTask */
  osThreadDef(movementTask, StartMovementTask, osPriorityNormal, 0, 128);
 800147e:	4b2e      	ldr	r3, [pc, #184]	@ (8001538 <main+0x164>)
 8001480:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 8001484:	461d      	mov	r5, r3
 8001486:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001488:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800148a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800148e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  movementTaskHandle = osThreadCreate(osThread(movementTask), NULL);
 8001492:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001496:	2100      	movs	r1, #0
 8001498:	4618      	mov	r0, r3
 800149a:	f00c fa7e 	bl	800d99a <osThreadCreate>
 800149e:	4603      	mov	r3, r0
 80014a0:	4a26      	ldr	r2, [pc, #152]	@ (800153c <main+0x168>)
 80014a2:	6013      	str	r3, [r2, #0]

  /* definition and creation of getPressureTask */
  osThreadDef(getPressureTask, StartGetPressureTask, osPriorityHigh, 0, 128);
 80014a4:	4b26      	ldr	r3, [pc, #152]	@ (8001540 <main+0x16c>)
 80014a6:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80014aa:	461d      	mov	r5, r3
 80014ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  getPressureTaskHandle = osThreadCreate(osThread(getPressureTask), NULL);
 80014b8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80014bc:	2100      	movs	r1, #0
 80014be:	4618      	mov	r0, r3
 80014c0:	f00c fa6b 	bl	800d99a <osThreadCreate>
 80014c4:	4603      	mov	r3, r0
 80014c6:	4a1f      	ldr	r2, [pc, #124]	@ (8001544 <main+0x170>)
 80014c8:	6013      	str	r3, [r2, #0]

  /* definition and creation of stroboTask */
  osThreadDef(stroboTask, StartStroboTask, osPriorityBelowNormal, 0, 128);
 80014ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001548 <main+0x174>)
 80014cc:	f107 0420 	add.w	r4, r7, #32
 80014d0:	461d      	mov	r5, r3
 80014d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  stroboTaskHandle = osThreadCreate(osThread(stroboTask), NULL);
 80014de:	f107 0320 	add.w	r3, r7, #32
 80014e2:	2100      	movs	r1, #0
 80014e4:	4618      	mov	r0, r3
 80014e6:	f00c fa58 	bl	800d99a <osThreadCreate>
 80014ea:	4603      	mov	r3, r0
 80014ec:	4a17      	ldr	r2, [pc, #92]	@ (800154c <main+0x178>)
 80014ee:	6013      	str	r3, [r2, #0]

  /* definition and creation of otherTask */
  osThreadDef(otherTask, StartOtherTask, osPriorityIdle, 0, 128);
 80014f0:	4b17      	ldr	r3, [pc, #92]	@ (8001550 <main+0x17c>)
 80014f2:	1d3c      	adds	r4, r7, #4
 80014f4:	461d      	mov	r5, r3
 80014f6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014fa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  otherTaskHandle = osThreadCreate(osThread(otherTask), NULL);
 8001502:	1d3b      	adds	r3, r7, #4
 8001504:	2100      	movs	r1, #0
 8001506:	4618      	mov	r0, r3
 8001508:	f00c fa47 	bl	800d99a <osThreadCreate>
 800150c:	4603      	mov	r3, r0
 800150e:	4a11      	ldr	r2, [pc, #68]	@ (8001554 <main+0x180>)
 8001510:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001512:	f00c fa3b 	bl	800d98c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001516:	bf00      	nop
 8001518:	e7fd      	b.n	8001516 <main+0x142>
 800151a:	bf00      	nop
 800151c:	200007a4 	.word	0x200007a4
 8001520:	200007ec 	.word	0x200007ec
 8001524:	20000834 	.word	0x20000834
 8001528:	20000b3c 	.word	0x20000b3c
 800152c:	20000660 	.word	0x20000660
 8001530:	0800f9c4 	.word	0x0800f9c4
 8001534:	20000924 	.word	0x20000924
 8001538:	0800f9f0 	.word	0x0800f9f0
 800153c:	20000928 	.word	0x20000928
 8001540:	0800fa1c 	.word	0x0800fa1c
 8001544:	2000092c 	.word	0x2000092c
 8001548:	0800fa44 	.word	0x0800fa44
 800154c:	20000930 	.word	0x20000930
 8001550:	0800fa6c 	.word	0x0800fa6c
 8001554:	20000934 	.word	0x20000934

08001558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b094      	sub	sp, #80	@ 0x50
 800155c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800155e:	f107 0320 	add.w	r3, r7, #32
 8001562:	2230      	movs	r2, #48	@ 0x30
 8001564:	2100      	movs	r1, #0
 8001566:	4618      	mov	r0, r3
 8001568:	f00e f984 	bl	800f874 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800156c:	f107 030c 	add.w	r3, r7, #12
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]
 8001576:	609a      	str	r2, [r3, #8]
 8001578:	60da      	str	r2, [r3, #12]
 800157a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800157c:	2300      	movs	r3, #0
 800157e:	60bb      	str	r3, [r7, #8]
 8001580:	4b28      	ldr	r3, [pc, #160]	@ (8001624 <SystemClock_Config+0xcc>)
 8001582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001584:	4a27      	ldr	r2, [pc, #156]	@ (8001624 <SystemClock_Config+0xcc>)
 8001586:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800158a:	6413      	str	r3, [r2, #64]	@ 0x40
 800158c:	4b25      	ldr	r3, [pc, #148]	@ (8001624 <SystemClock_Config+0xcc>)
 800158e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001590:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001594:	60bb      	str	r3, [r7, #8]
 8001596:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001598:	2300      	movs	r3, #0
 800159a:	607b      	str	r3, [r7, #4]
 800159c:	4b22      	ldr	r3, [pc, #136]	@ (8001628 <SystemClock_Config+0xd0>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a21      	ldr	r2, [pc, #132]	@ (8001628 <SystemClock_Config+0xd0>)
 80015a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015a6:	6013      	str	r3, [r2, #0]
 80015a8:	4b1f      	ldr	r3, [pc, #124]	@ (8001628 <SystemClock_Config+0xd0>)
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015b0:	607b      	str	r3, [r7, #4]
 80015b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015b4:	2301      	movs	r3, #1
 80015b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015b8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015bc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015be:	2302      	movs	r3, #2
 80015c0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015c2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80015c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80015c8:	2304      	movs	r3, #4
 80015ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80015cc:	23a8      	movs	r3, #168	@ 0xa8
 80015ce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015d0:	2302      	movs	r3, #2
 80015d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80015d4:	2307      	movs	r3, #7
 80015d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015d8:	f107 0320 	add.w	r3, r7, #32
 80015dc:	4618      	mov	r0, r3
 80015de:	f006 f833 	bl	8007648 <HAL_RCC_OscConfig>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015e8:	f001 fcf2 	bl	8002fd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ec:	230f      	movs	r3, #15
 80015ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015f0:	2302      	movs	r3, #2
 80015f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015f8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80015fc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80015fe:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001602:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001604:	f107 030c 	add.w	r3, r7, #12
 8001608:	2105      	movs	r1, #5
 800160a:	4618      	mov	r0, r3
 800160c:	f006 fa94 	bl	8007b38 <HAL_RCC_ClockConfig>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001616:	f001 fcdb 	bl	8002fd0 <Error_Handler>
  }
}
 800161a:	bf00      	nop
 800161c:	3750      	adds	r7, #80	@ 0x50
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40023800 	.word	0x40023800
 8001628:	40007000 	.word	0x40007000

0800162c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001632:	463b      	mov	r3, r7
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
 800163a:	609a      	str	r2, [r3, #8]
 800163c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800163e:	4b27      	ldr	r3, [pc, #156]	@ (80016dc <MX_ADC1_Init+0xb0>)
 8001640:	4a27      	ldr	r2, [pc, #156]	@ (80016e0 <MX_ADC1_Init+0xb4>)
 8001642:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001644:	4b25      	ldr	r3, [pc, #148]	@ (80016dc <MX_ADC1_Init+0xb0>)
 8001646:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800164a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800164c:	4b23      	ldr	r3, [pc, #140]	@ (80016dc <MX_ADC1_Init+0xb0>)
 800164e:	2200      	movs	r2, #0
 8001650:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001652:	4b22      	ldr	r3, [pc, #136]	@ (80016dc <MX_ADC1_Init+0xb0>)
 8001654:	2201      	movs	r2, #1
 8001656:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001658:	4b20      	ldr	r3, [pc, #128]	@ (80016dc <MX_ADC1_Init+0xb0>)
 800165a:	2201      	movs	r2, #1
 800165c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800165e:	4b1f      	ldr	r3, [pc, #124]	@ (80016dc <MX_ADC1_Init+0xb0>)
 8001660:	2200      	movs	r2, #0
 8001662:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001666:	4b1d      	ldr	r3, [pc, #116]	@ (80016dc <MX_ADC1_Init+0xb0>)
 8001668:	2200      	movs	r2, #0
 800166a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800166c:	4b1b      	ldr	r3, [pc, #108]	@ (80016dc <MX_ADC1_Init+0xb0>)
 800166e:	4a1d      	ldr	r2, [pc, #116]	@ (80016e4 <MX_ADC1_Init+0xb8>)
 8001670:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001672:	4b1a      	ldr	r3, [pc, #104]	@ (80016dc <MX_ADC1_Init+0xb0>)
 8001674:	2200      	movs	r2, #0
 8001676:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001678:	4b18      	ldr	r3, [pc, #96]	@ (80016dc <MX_ADC1_Init+0xb0>)
 800167a:	2202      	movs	r2, #2
 800167c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800167e:	4b17      	ldr	r3, [pc, #92]	@ (80016dc <MX_ADC1_Init+0xb0>)
 8001680:	2201      	movs	r2, #1
 8001682:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001686:	4b15      	ldr	r3, [pc, #84]	@ (80016dc <MX_ADC1_Init+0xb0>)
 8001688:	2201      	movs	r2, #1
 800168a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800168c:	4813      	ldr	r0, [pc, #76]	@ (80016dc <MX_ADC1_Init+0xb0>)
 800168e:	f002 facd 	bl	8003c2c <HAL_ADC_Init>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001698:	f001 fc9a 	bl	8002fd0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800169c:	2304      	movs	r3, #4
 800169e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80016a0:	2301      	movs	r3, #1
 80016a2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80016a4:	2300      	movs	r3, #0
 80016a6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016a8:	463b      	mov	r3, r7
 80016aa:	4619      	mov	r1, r3
 80016ac:	480b      	ldr	r0, [pc, #44]	@ (80016dc <MX_ADC1_Init+0xb0>)
 80016ae:	f002 fc2f 	bl	8003f10 <HAL_ADC_ConfigChannel>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80016b8:	f001 fc8a 	bl	8002fd0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 80016bc:	2302      	movs	r3, #2
 80016be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016c0:	463b      	mov	r3, r7
 80016c2:	4619      	mov	r1, r3
 80016c4:	4805      	ldr	r0, [pc, #20]	@ (80016dc <MX_ADC1_Init+0xb0>)
 80016c6:	f002 fc23 	bl	8003f10 <HAL_ADC_ConfigChannel>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 80016d0:	f001 fc7e 	bl	8002fd0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016d4:	bf00      	nop
 80016d6:	3710      	adds	r7, #16
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20000660 	.word	0x20000660
 80016e0:	40012000 	.word	0x40012000
 80016e4:	0f000001 	.word	0x0f000001

080016e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016ec:	4b12      	ldr	r3, [pc, #72]	@ (8001738 <MX_I2C1_Init+0x50>)
 80016ee:	4a13      	ldr	r2, [pc, #76]	@ (800173c <MX_I2C1_Init+0x54>)
 80016f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80016f2:	4b11      	ldr	r3, [pc, #68]	@ (8001738 <MX_I2C1_Init+0x50>)
 80016f4:	4a12      	ldr	r2, [pc, #72]	@ (8001740 <MX_I2C1_Init+0x58>)
 80016f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001738 <MX_I2C1_Init+0x50>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001738 <MX_I2C1_Init+0x50>)
 8001700:	2200      	movs	r2, #0
 8001702:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001704:	4b0c      	ldr	r3, [pc, #48]	@ (8001738 <MX_I2C1_Init+0x50>)
 8001706:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800170a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800170c:	4b0a      	ldr	r3, [pc, #40]	@ (8001738 <MX_I2C1_Init+0x50>)
 800170e:	2200      	movs	r2, #0
 8001710:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001712:	4b09      	ldr	r3, [pc, #36]	@ (8001738 <MX_I2C1_Init+0x50>)
 8001714:	2200      	movs	r2, #0
 8001716:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001718:	4b07      	ldr	r3, [pc, #28]	@ (8001738 <MX_I2C1_Init+0x50>)
 800171a:	2200      	movs	r2, #0
 800171c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800171e:	4b06      	ldr	r3, [pc, #24]	@ (8001738 <MX_I2C1_Init+0x50>)
 8001720:	2200      	movs	r2, #0
 8001722:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001724:	4804      	ldr	r0, [pc, #16]	@ (8001738 <MX_I2C1_Init+0x50>)
 8001726:	f003 fd45 	bl	80051b4 <HAL_I2C_Init>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001730:	f001 fc4e 	bl	8002fd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001734:	bf00      	nop
 8001736:	bd80      	pop	{r7, pc}
 8001738:	20000708 	.word	0x20000708
 800173c:	40005400 	.word	0x40005400
 8001740:	00061a80 	.word	0x00061a80

08001744 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b08a      	sub	sp, #40	@ 0x28
 8001748:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800174a:	f107 0320 	add.w	r3, r7, #32
 800174e:	2200      	movs	r2, #0
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001754:	1d3b      	adds	r3, r7, #4
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	605a      	str	r2, [r3, #4]
 800175c:	609a      	str	r2, [r3, #8]
 800175e:	60da      	str	r2, [r3, #12]
 8001760:	611a      	str	r2, [r3, #16]
 8001762:	615a      	str	r2, [r3, #20]
 8001764:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001766:	4b21      	ldr	r3, [pc, #132]	@ (80017ec <MX_TIM3_Init+0xa8>)
 8001768:	4a21      	ldr	r2, [pc, #132]	@ (80017f0 <MX_TIM3_Init+0xac>)
 800176a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800176c:	4b1f      	ldr	r3, [pc, #124]	@ (80017ec <MX_TIM3_Init+0xa8>)
 800176e:	2200      	movs	r2, #0
 8001770:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001772:	4b1e      	ldr	r3, [pc, #120]	@ (80017ec <MX_TIM3_Init+0xa8>)
 8001774:	2200      	movs	r2, #0
 8001776:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 105-1;
 8001778:	4b1c      	ldr	r3, [pc, #112]	@ (80017ec <MX_TIM3_Init+0xa8>)
 800177a:	2268      	movs	r2, #104	@ 0x68
 800177c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800177e:	4b1b      	ldr	r3, [pc, #108]	@ (80017ec <MX_TIM3_Init+0xa8>)
 8001780:	2200      	movs	r2, #0
 8001782:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001784:	4b19      	ldr	r3, [pc, #100]	@ (80017ec <MX_TIM3_Init+0xa8>)
 8001786:	2200      	movs	r2, #0
 8001788:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800178a:	4818      	ldr	r0, [pc, #96]	@ (80017ec <MX_TIM3_Init+0xa8>)
 800178c:	f006 fcf0 	bl	8008170 <HAL_TIM_PWM_Init>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001796:	f001 fc1b 	bl	8002fd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800179a:	2300      	movs	r3, #0
 800179c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800179e:	2300      	movs	r3, #0
 80017a0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017a2:	f107 0320 	add.w	r3, r7, #32
 80017a6:	4619      	mov	r1, r3
 80017a8:	4810      	ldr	r0, [pc, #64]	@ (80017ec <MX_TIM3_Init+0xa8>)
 80017aa:	f007 fdcb 	bl	8009344 <HAL_TIMEx_MasterConfigSynchronization>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 80017b4:	f001 fc0c 	bl	8002fd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017b8:	2360      	movs	r3, #96	@ 0x60
 80017ba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017bc:	2300      	movs	r3, #0
 80017be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017c0:	2300      	movs	r3, #0
 80017c2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017c8:	1d3b      	adds	r3, r7, #4
 80017ca:	2204      	movs	r2, #4
 80017cc:	4619      	mov	r1, r3
 80017ce:	4807      	ldr	r0, [pc, #28]	@ (80017ec <MX_TIM3_Init+0xa8>)
 80017d0:	f007 f970 	bl	8008ab4 <HAL_TIM_PWM_ConfigChannel>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d001      	beq.n	80017de <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80017da:	f001 fbf9 	bl	8002fd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80017de:	4803      	ldr	r0, [pc, #12]	@ (80017ec <MX_TIM3_Init+0xa8>)
 80017e0:	f001 ffb8 	bl	8003754 <HAL_TIM_MspPostInit>

}
 80017e4:	bf00      	nop
 80017e6:	3728      	adds	r7, #40	@ 0x28
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	2000075c 	.word	0x2000075c
 80017f0:	40000400 	.word	0x40000400

080017f4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b08a      	sub	sp, #40	@ 0x28
 80017f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017fa:	f107 0320 	add.w	r3, r7, #32
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001804:	1d3b      	adds	r3, r7, #4
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	605a      	str	r2, [r3, #4]
 800180c:	609a      	str	r2, [r3, #8]
 800180e:	60da      	str	r2, [r3, #12]
 8001810:	611a      	str	r2, [r3, #16]
 8001812:	615a      	str	r2, [r3, #20]
 8001814:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001816:	4b32      	ldr	r3, [pc, #200]	@ (80018e0 <MX_TIM4_Init+0xec>)
 8001818:	4a32      	ldr	r2, [pc, #200]	@ (80018e4 <MX_TIM4_Init+0xf0>)
 800181a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84;
 800181c:	4b30      	ldr	r3, [pc, #192]	@ (80018e0 <MX_TIM4_Init+0xec>)
 800181e:	2254      	movs	r2, #84	@ 0x54
 8001820:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001822:	4b2f      	ldr	r3, [pc, #188]	@ (80018e0 <MX_TIM4_Init+0xec>)
 8001824:	2200      	movs	r2, #0
 8001826:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000;
 8001828:	4b2d      	ldr	r3, [pc, #180]	@ (80018e0 <MX_TIM4_Init+0xec>)
 800182a:	f644 6220 	movw	r2, #20000	@ 0x4e20
 800182e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001830:	4b2b      	ldr	r3, [pc, #172]	@ (80018e0 <MX_TIM4_Init+0xec>)
 8001832:	2200      	movs	r2, #0
 8001834:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001836:	4b2a      	ldr	r3, [pc, #168]	@ (80018e0 <MX_TIM4_Init+0xec>)
 8001838:	2200      	movs	r2, #0
 800183a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800183c:	4828      	ldr	r0, [pc, #160]	@ (80018e0 <MX_TIM4_Init+0xec>)
 800183e:	f006 fc97 	bl	8008170 <HAL_TIM_PWM_Init>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 8001848:	f001 fbc2 	bl	8002fd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800184c:	2300      	movs	r3, #0
 800184e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001850:	2300      	movs	r3, #0
 8001852:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001854:	f107 0320 	add.w	r3, r7, #32
 8001858:	4619      	mov	r1, r3
 800185a:	4821      	ldr	r0, [pc, #132]	@ (80018e0 <MX_TIM4_Init+0xec>)
 800185c:	f007 fd72 	bl	8009344 <HAL_TIMEx_MasterConfigSynchronization>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 8001866:	f001 fbb3 	bl	8002fd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800186a:	2360      	movs	r3, #96	@ 0x60
 800186c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800186e:	2300      	movs	r3, #0
 8001870:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001872:	2300      	movs	r3, #0
 8001874:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001876:	2300      	movs	r3, #0
 8001878:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800187a:	1d3b      	adds	r3, r7, #4
 800187c:	2200      	movs	r2, #0
 800187e:	4619      	mov	r1, r3
 8001880:	4817      	ldr	r0, [pc, #92]	@ (80018e0 <MX_TIM4_Init+0xec>)
 8001882:	f007 f917 	bl	8008ab4 <HAL_TIM_PWM_ConfigChannel>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 800188c:	f001 fba0 	bl	8002fd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001890:	1d3b      	adds	r3, r7, #4
 8001892:	2204      	movs	r2, #4
 8001894:	4619      	mov	r1, r3
 8001896:	4812      	ldr	r0, [pc, #72]	@ (80018e0 <MX_TIM4_Init+0xec>)
 8001898:	f007 f90c 	bl	8008ab4 <HAL_TIM_PWM_ConfigChannel>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80018a2:	f001 fb95 	bl	8002fd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80018a6:	1d3b      	adds	r3, r7, #4
 80018a8:	2208      	movs	r2, #8
 80018aa:	4619      	mov	r1, r3
 80018ac:	480c      	ldr	r0, [pc, #48]	@ (80018e0 <MX_TIM4_Init+0xec>)
 80018ae:	f007 f901 	bl	8008ab4 <HAL_TIM_PWM_ConfigChannel>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 80018b8:	f001 fb8a 	bl	8002fd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80018bc:	1d3b      	adds	r3, r7, #4
 80018be:	220c      	movs	r2, #12
 80018c0:	4619      	mov	r1, r3
 80018c2:	4807      	ldr	r0, [pc, #28]	@ (80018e0 <MX_TIM4_Init+0xec>)
 80018c4:	f007 f8f6 	bl	8008ab4 <HAL_TIM_PWM_ConfigChannel>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 80018ce:	f001 fb7f 	bl	8002fd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80018d2:	4803      	ldr	r0, [pc, #12]	@ (80018e0 <MX_TIM4_Init+0xec>)
 80018d4:	f001 ff3e 	bl	8003754 <HAL_TIM_MspPostInit>

}
 80018d8:	bf00      	nop
 80018da:	3728      	adds	r7, #40	@ 0x28
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}
 80018e0:	200007a4 	.word	0x200007a4
 80018e4:	40000800 	.word	0x40000800

080018e8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08a      	sub	sp, #40	@ 0x28
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018ee:	f107 0320 	add.w	r3, r7, #32
 80018f2:	2200      	movs	r2, #0
 80018f4:	601a      	str	r2, [r3, #0]
 80018f6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018f8:	1d3b      	adds	r3, r7, #4
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	605a      	str	r2, [r3, #4]
 8001900:	609a      	str	r2, [r3, #8]
 8001902:	60da      	str	r2, [r3, #12]
 8001904:	611a      	str	r2, [r3, #16]
 8001906:	615a      	str	r2, [r3, #20]
 8001908:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800190a:	4b32      	ldr	r3, [pc, #200]	@ (80019d4 <MX_TIM5_Init+0xec>)
 800190c:	4a32      	ldr	r2, [pc, #200]	@ (80019d8 <MX_TIM5_Init+0xf0>)
 800190e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84;
 8001910:	4b30      	ldr	r3, [pc, #192]	@ (80019d4 <MX_TIM5_Init+0xec>)
 8001912:	2254      	movs	r2, #84	@ 0x54
 8001914:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001916:	4b2f      	ldr	r3, [pc, #188]	@ (80019d4 <MX_TIM5_Init+0xec>)
 8001918:	2200      	movs	r2, #0
 800191a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20000;
 800191c:	4b2d      	ldr	r3, [pc, #180]	@ (80019d4 <MX_TIM5_Init+0xec>)
 800191e:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001922:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001924:	4b2b      	ldr	r3, [pc, #172]	@ (80019d4 <MX_TIM5_Init+0xec>)
 8001926:	2200      	movs	r2, #0
 8001928:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800192a:	4b2a      	ldr	r3, [pc, #168]	@ (80019d4 <MX_TIM5_Init+0xec>)
 800192c:	2200      	movs	r2, #0
 800192e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001930:	4828      	ldr	r0, [pc, #160]	@ (80019d4 <MX_TIM5_Init+0xec>)
 8001932:	f006 fc1d 	bl	8008170 <HAL_TIM_PWM_Init>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 800193c:	f001 fb48 	bl	8002fd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001940:	2300      	movs	r3, #0
 8001942:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001944:	2300      	movs	r3, #0
 8001946:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001948:	f107 0320 	add.w	r3, r7, #32
 800194c:	4619      	mov	r1, r3
 800194e:	4821      	ldr	r0, [pc, #132]	@ (80019d4 <MX_TIM5_Init+0xec>)
 8001950:	f007 fcf8 	bl	8009344 <HAL_TIMEx_MasterConfigSynchronization>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 800195a:	f001 fb39 	bl	8002fd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800195e:	2360      	movs	r3, #96	@ 0x60
 8001960:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001962:	2300      	movs	r3, #0
 8001964:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001966:	2300      	movs	r3, #0
 8001968:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800196a:	2300      	movs	r3, #0
 800196c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800196e:	1d3b      	adds	r3, r7, #4
 8001970:	2200      	movs	r2, #0
 8001972:	4619      	mov	r1, r3
 8001974:	4817      	ldr	r0, [pc, #92]	@ (80019d4 <MX_TIM5_Init+0xec>)
 8001976:	f007 f89d 	bl	8008ab4 <HAL_TIM_PWM_ConfigChannel>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001980:	f001 fb26 	bl	8002fd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001984:	1d3b      	adds	r3, r7, #4
 8001986:	2204      	movs	r2, #4
 8001988:	4619      	mov	r1, r3
 800198a:	4812      	ldr	r0, [pc, #72]	@ (80019d4 <MX_TIM5_Init+0xec>)
 800198c:	f007 f892 	bl	8008ab4 <HAL_TIM_PWM_ConfigChannel>
 8001990:	4603      	mov	r3, r0
 8001992:	2b00      	cmp	r3, #0
 8001994:	d001      	beq.n	800199a <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001996:	f001 fb1b 	bl	8002fd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800199a:	1d3b      	adds	r3, r7, #4
 800199c:	2208      	movs	r2, #8
 800199e:	4619      	mov	r1, r3
 80019a0:	480c      	ldr	r0, [pc, #48]	@ (80019d4 <MX_TIM5_Init+0xec>)
 80019a2:	f007 f887 	bl	8008ab4 <HAL_TIM_PWM_ConfigChannel>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d001      	beq.n	80019b0 <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 80019ac:	f001 fb10 	bl	8002fd0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019b0:	1d3b      	adds	r3, r7, #4
 80019b2:	220c      	movs	r2, #12
 80019b4:	4619      	mov	r1, r3
 80019b6:	4807      	ldr	r0, [pc, #28]	@ (80019d4 <MX_TIM5_Init+0xec>)
 80019b8:	f007 f87c 	bl	8008ab4 <HAL_TIM_PWM_ConfigChannel>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_TIM5_Init+0xde>
  {
    Error_Handler();
 80019c2:	f001 fb05 	bl	8002fd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80019c6:	4803      	ldr	r0, [pc, #12]	@ (80019d4 <MX_TIM5_Init+0xec>)
 80019c8:	f001 fec4 	bl	8003754 <HAL_TIM_MspPostInit>

}
 80019cc:	bf00      	nop
 80019ce:	3728      	adds	r7, #40	@ 0x28
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	200007ec 	.word	0x200007ec
 80019d8:	40000c00 	.word	0x40000c00

080019dc <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b088      	sub	sp, #32
 80019e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80019e2:	1d3b      	adds	r3, r7, #4
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	605a      	str	r2, [r3, #4]
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	60da      	str	r2, [r3, #12]
 80019ee:	611a      	str	r2, [r3, #16]
 80019f0:	615a      	str	r2, [r3, #20]
 80019f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80019f4:	4b1a      	ldr	r3, [pc, #104]	@ (8001a60 <MX_TIM9_Init+0x84>)
 80019f6:	4a1b      	ldr	r2, [pc, #108]	@ (8001a64 <MX_TIM9_Init+0x88>)
 80019f8:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 84;
 80019fa:	4b19      	ldr	r3, [pc, #100]	@ (8001a60 <MX_TIM9_Init+0x84>)
 80019fc:	2254      	movs	r2, #84	@ 0x54
 80019fe:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a00:	4b17      	ldr	r3, [pc, #92]	@ (8001a60 <MX_TIM9_Init+0x84>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 20000;
 8001a06:	4b16      	ldr	r3, [pc, #88]	@ (8001a60 <MX_TIM9_Init+0x84>)
 8001a08:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8001a0c:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a0e:	4b14      	ldr	r3, [pc, #80]	@ (8001a60 <MX_TIM9_Init+0x84>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a14:	4b12      	ldr	r3, [pc, #72]	@ (8001a60 <MX_TIM9_Init+0x84>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001a1a:	4811      	ldr	r0, [pc, #68]	@ (8001a60 <MX_TIM9_Init+0x84>)
 8001a1c:	f006 fba8 	bl	8008170 <HAL_TIM_PWM_Init>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8001a26:	f001 fad3 	bl	8002fd0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a2a:	2360      	movs	r3, #96	@ 0x60
 8001a2c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a32:	2300      	movs	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a36:	2300      	movs	r3, #0
 8001a38:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a3a:	1d3b      	adds	r3, r7, #4
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4807      	ldr	r0, [pc, #28]	@ (8001a60 <MX_TIM9_Init+0x84>)
 8001a42:	f007 f837 	bl	8008ab4 <HAL_TIM_PWM_ConfigChannel>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8001a4c:	f001 fac0 	bl	8002fd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001a50:	4803      	ldr	r0, [pc, #12]	@ (8001a60 <MX_TIM9_Init+0x84>)
 8001a52:	f001 fe7f 	bl	8003754 <HAL_TIM_MspPostInit>

}
 8001a56:	bf00      	nop
 8001a58:	3720      	adds	r7, #32
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20000834 	.word	0x20000834
 8001a64:	40014000 	.word	0x40014000

08001a68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a6c:	4b13      	ldr	r3, [pc, #76]	@ (8001abc <MX_USART2_UART_Init+0x54>)
 8001a6e:	4a14      	ldr	r2, [pc, #80]	@ (8001ac0 <MX_USART2_UART_Init+0x58>)
 8001a70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a72:	4b12      	ldr	r3, [pc, #72]	@ (8001abc <MX_USART2_UART_Init+0x54>)
 8001a74:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a7a:	4b10      	ldr	r3, [pc, #64]	@ (8001abc <MX_USART2_UART_Init+0x54>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a80:	4b0e      	ldr	r3, [pc, #56]	@ (8001abc <MX_USART2_UART_Init+0x54>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a86:	4b0d      	ldr	r3, [pc, #52]	@ (8001abc <MX_USART2_UART_Init+0x54>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001abc <MX_USART2_UART_Init+0x54>)
 8001a8e:	220c      	movs	r2, #12
 8001a90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a92:	4b0a      	ldr	r3, [pc, #40]	@ (8001abc <MX_USART2_UART_Init+0x54>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a98:	4b08      	ldr	r3, [pc, #32]	@ (8001abc <MX_USART2_UART_Init+0x54>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a9e:	4807      	ldr	r0, [pc, #28]	@ (8001abc <MX_USART2_UART_Init+0x54>)
 8001aa0:	f007 fce0 	bl	8009464 <HAL_UART_Init>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001aaa:	f001 fa91 	bl	8002fd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  HAL_UART_Receive_IT(&huart2, atmega_buffer, 1);
 8001aae:	2201      	movs	r2, #1
 8001ab0:	4904      	ldr	r1, [pc, #16]	@ (8001ac4 <MX_USART2_UART_Init+0x5c>)
 8001ab2:	4802      	ldr	r0, [pc, #8]	@ (8001abc <MX_USART2_UART_Init+0x54>)
 8001ab4:	f007 fd26 	bl	8009504 <HAL_UART_Receive_IT>
  /* USER CODE END USART2_Init 2 */

}
 8001ab8:	bf00      	nop
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	200008dc 	.word	0x200008dc
 8001ac0:	40004400 	.word	0x40004400
 8001ac4:	20000a10 	.word	0x20000a10

08001ac8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b082      	sub	sp, #8
 8001acc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	607b      	str	r3, [r7, #4]
 8001ad2:	4b17      	ldr	r3, [pc, #92]	@ (8001b30 <MX_DMA_Init+0x68>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad6:	4a16      	ldr	r2, [pc, #88]	@ (8001b30 <MX_DMA_Init+0x68>)
 8001ad8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001adc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ade:	4b14      	ldr	r3, [pc, #80]	@ (8001b30 <MX_DMA_Init+0x68>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ae6:	607b      	str	r3, [r7, #4]
 8001ae8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001aea:	2300      	movs	r3, #0
 8001aec:	603b      	str	r3, [r7, #0]
 8001aee:	4b10      	ldr	r3, [pc, #64]	@ (8001b30 <MX_DMA_Init+0x68>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af2:	4a0f      	ldr	r2, [pc, #60]	@ (8001b30 <MX_DMA_Init+0x68>)
 8001af4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001af8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001afa:	4b0d      	ldr	r3, [pc, #52]	@ (8001b30 <MX_DMA_Init+0x68>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b02:	603b      	str	r3, [r7, #0]
 8001b04:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001b06:	2200      	movs	r2, #0
 8001b08:	2105      	movs	r1, #5
 8001b0a:	2010      	movs	r0, #16
 8001b0c:	f002 fd58 	bl	80045c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001b10:	2010      	movs	r0, #16
 8001b12:	f002 fd71 	bl	80045f8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001b16:	2200      	movs	r2, #0
 8001b18:	2105      	movs	r1, #5
 8001b1a:	2038      	movs	r0, #56	@ 0x38
 8001b1c:	f002 fd50 	bl	80045c0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001b20:	2038      	movs	r0, #56	@ 0x38
 8001b22:	f002 fd69 	bl	80045f8 <HAL_NVIC_EnableIRQ>

}
 8001b26:	bf00      	nop
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40023800 	.word	0x40023800

08001b34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b08c      	sub	sp, #48	@ 0x30
 8001b38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3a:	f107 031c 	add.w	r3, r7, #28
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	605a      	str	r2, [r3, #4]
 8001b44:	609a      	str	r2, [r3, #8]
 8001b46:	60da      	str	r2, [r3, #12]
 8001b48:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61bb      	str	r3, [r7, #24]
 8001b4e:	4b44      	ldr	r3, [pc, #272]	@ (8001c60 <MX_GPIO_Init+0x12c>)
 8001b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b52:	4a43      	ldr	r2, [pc, #268]	@ (8001c60 <MX_GPIO_Init+0x12c>)
 8001b54:	f043 0310 	orr.w	r3, r3, #16
 8001b58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b5a:	4b41      	ldr	r3, [pc, #260]	@ (8001c60 <MX_GPIO_Init+0x12c>)
 8001b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5e:	f003 0310 	and.w	r3, r3, #16
 8001b62:	61bb      	str	r3, [r7, #24]
 8001b64:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b66:	2300      	movs	r3, #0
 8001b68:	617b      	str	r3, [r7, #20]
 8001b6a:	4b3d      	ldr	r3, [pc, #244]	@ (8001c60 <MX_GPIO_Init+0x12c>)
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6e:	4a3c      	ldr	r2, [pc, #240]	@ (8001c60 <MX_GPIO_Init+0x12c>)
 8001b70:	f043 0304 	orr.w	r3, r3, #4
 8001b74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b76:	4b3a      	ldr	r3, [pc, #232]	@ (8001c60 <MX_GPIO_Init+0x12c>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b7a:	f003 0304 	and.w	r3, r3, #4
 8001b7e:	617b      	str	r3, [r7, #20]
 8001b80:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b82:	2300      	movs	r3, #0
 8001b84:	613b      	str	r3, [r7, #16]
 8001b86:	4b36      	ldr	r3, [pc, #216]	@ (8001c60 <MX_GPIO_Init+0x12c>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b8a:	4a35      	ldr	r2, [pc, #212]	@ (8001c60 <MX_GPIO_Init+0x12c>)
 8001b8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b92:	4b33      	ldr	r3, [pc, #204]	@ (8001c60 <MX_GPIO_Init+0x12c>)
 8001b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b9a:	613b      	str	r3, [r7, #16]
 8001b9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	60fb      	str	r3, [r7, #12]
 8001ba2:	4b2f      	ldr	r3, [pc, #188]	@ (8001c60 <MX_GPIO_Init+0x12c>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba6:	4a2e      	ldr	r2, [pc, #184]	@ (8001c60 <MX_GPIO_Init+0x12c>)
 8001ba8:	f043 0301 	orr.w	r3, r3, #1
 8001bac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bae:	4b2c      	ldr	r3, [pc, #176]	@ (8001c60 <MX_GPIO_Init+0x12c>)
 8001bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	60fb      	str	r3, [r7, #12]
 8001bb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	60bb      	str	r3, [r7, #8]
 8001bbe:	4b28      	ldr	r3, [pc, #160]	@ (8001c60 <MX_GPIO_Init+0x12c>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc2:	4a27      	ldr	r2, [pc, #156]	@ (8001c60 <MX_GPIO_Init+0x12c>)
 8001bc4:	f043 0308 	orr.w	r3, r3, #8
 8001bc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bca:	4b25      	ldr	r3, [pc, #148]	@ (8001c60 <MX_GPIO_Init+0x12c>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bce:	f003 0308 	and.w	r3, r3, #8
 8001bd2:	60bb      	str	r3, [r7, #8]
 8001bd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	607b      	str	r3, [r7, #4]
 8001bda:	4b21      	ldr	r3, [pc, #132]	@ (8001c60 <MX_GPIO_Init+0x12c>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bde:	4a20      	ldr	r2, [pc, #128]	@ (8001c60 <MX_GPIO_Init+0x12c>)
 8001be0:	f043 0302 	orr.w	r3, r3, #2
 8001be4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001be6:	4b1e      	ldr	r3, [pc, #120]	@ (8001c60 <MX_GPIO_Init+0x12c>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	607b      	str	r3, [r7, #4]
 8001bf0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	2104      	movs	r1, #4
 8001bf6:	481b      	ldr	r0, [pc, #108]	@ (8001c64 <MX_GPIO_Init+0x130>)
 8001bf8:	f003 fac2 	bl	8005180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	2140      	movs	r1, #64	@ 0x40
 8001c00:	4819      	ldr	r0, [pc, #100]	@ (8001c68 <MX_GPIO_Init+0x134>)
 8001c02:	f003 fabd 	bl	8005180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c06:	2304      	movs	r3, #4
 8001c08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c12:	2300      	movs	r3, #0
 8001c14:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c16:	f107 031c 	add.w	r3, r7, #28
 8001c1a:	4619      	mov	r1, r3
 8001c1c:	4811      	ldr	r0, [pc, #68]	@ (8001c64 <MX_GPIO_Init+0x130>)
 8001c1e:	f003 f8fb 	bl	8004e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c22:	2340      	movs	r3, #64	@ 0x40
 8001c24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c26:	2301      	movs	r3, #1
 8001c28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c32:	f107 031c 	add.w	r3, r7, #28
 8001c36:	4619      	mov	r1, r3
 8001c38:	480b      	ldr	r0, [pc, #44]	@ (8001c68 <MX_GPIO_Init+0x134>)
 8001c3a:	f003 f8ed 	bl	8004e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c3e:	2320      	movs	r3, #32
 8001c40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c42:	2300      	movs	r3, #0
 8001c44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c46:	2300      	movs	r3, #0
 8001c48:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c4a:	f107 031c 	add.w	r3, r7, #28
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4804      	ldr	r0, [pc, #16]	@ (8001c64 <MX_GPIO_Init+0x130>)
 8001c52:	f003 f8e1 	bl	8004e18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c56:	bf00      	nop
 8001c58:	3730      	adds	r7, #48	@ 0x30
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40023800 	.word	0x40023800
 8001c64:	40020800 	.word	0x40020800
 8001c68:	40020000 	.word	0x40020000

08001c6c <StartCdcSerialTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartCdcSerialTask */
void StartCdcSerialTask(void const * argument)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b088      	sub	sp, #32
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001c74:	f00d f8ce 	bl	800ee14 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  //Receive
		int i = 0;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61fb      	str	r3, [r7, #28]
		vel_linear[0] = bit16ToInt(i, serialBuffer); //linear x
 8001c7c:	49a8      	ldr	r1, [pc, #672]	@ (8001f20 <StartCdcSerialTask+0x2b4>)
 8001c7e:	69f8      	ldr	r0, [r7, #28]
 8001c80:	f7ff f8ec 	bl	8000e5c <bit16ToInt>
 8001c84:	4603      	mov	r3, r0
 8001c86:	4aa7      	ldr	r2, [pc, #668]	@ (8001f24 <StartCdcSerialTask+0x2b8>)
 8001c88:	6013      	str	r3, [r2, #0]
		vel_linear[1] = bit16ToInt(i + 2, serialBuffer); //linear y
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	3302      	adds	r3, #2
 8001c8e:	49a4      	ldr	r1, [pc, #656]	@ (8001f20 <StartCdcSerialTask+0x2b4>)
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff f8e3 	bl	8000e5c <bit16ToInt>
 8001c96:	4603      	mov	r3, r0
 8001c98:	4aa2      	ldr	r2, [pc, #648]	@ (8001f24 <StartCdcSerialTask+0x2b8>)
 8001c9a:	6053      	str	r3, [r2, #4]
		vel_linear[2] = bit16ToInt(i + 4, serialBuffer); //linear z
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	3304      	adds	r3, #4
 8001ca0:	499f      	ldr	r1, [pc, #636]	@ (8001f20 <StartCdcSerialTask+0x2b4>)
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff f8da 	bl	8000e5c <bit16ToInt>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	4a9e      	ldr	r2, [pc, #632]	@ (8001f24 <StartCdcSerialTask+0x2b8>)
 8001cac:	6093      	str	r3, [r2, #8]
		vel_angular[0] = bit16ToInt(i + 6, serialBuffer); //angular z
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	3306      	adds	r3, #6
 8001cb2:	499b      	ldr	r1, [pc, #620]	@ (8001f20 <StartCdcSerialTask+0x2b4>)
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff f8d1 	bl	8000e5c <bit16ToInt>
 8001cba:	4603      	mov	r3, r0
 8001cbc:	4a9a      	ldr	r2, [pc, #616]	@ (8001f28 <StartCdcSerialTask+0x2bc>)
 8001cbe:	6013      	str	r3, [r2, #0]
		vel_angular[1] = bit16ToInt(i + 8, serialBuffer); //angular y
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	3308      	adds	r3, #8
 8001cc4:	4996      	ldr	r1, [pc, #600]	@ (8001f20 <StartCdcSerialTask+0x2b4>)
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff f8c8 	bl	8000e5c <bit16ToInt>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	4a96      	ldr	r2, [pc, #600]	@ (8001f28 <StartCdcSerialTask+0x2bc>)
 8001cd0:	6053      	str	r3, [r2, #4]
		vel_angular[2] = bit16ToInt(i + 10, serialBuffer); //angular z
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	330a      	adds	r3, #10
 8001cd6:	4992      	ldr	r1, [pc, #584]	@ (8001f20 <StartCdcSerialTask+0x2b4>)
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff f8bf 	bl	8000e5c <bit16ToInt>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	4a91      	ldr	r2, [pc, #580]	@ (8001f28 <StartCdcSerialTask+0x2bc>)
 8001ce2:	6093      	str	r3, [r2, #8]

		i = 12;
 8001ce4:	230c      	movs	r3, #12
 8001ce6:	61fb      	str	r3, [r7, #28]
		throtle_scale = bit16ToInt(i, serialBuffer);
 8001ce8:	498d      	ldr	r1, [pc, #564]	@ (8001f20 <StartCdcSerialTask+0x2b4>)
 8001cea:	69f8      	ldr	r0, [r7, #28]
 8001cec:	f7ff f8b6 	bl	8000e5c <bit16ToInt>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	4a8e      	ldr	r2, [pc, #568]	@ (8001f2c <StartCdcSerialTask+0x2c0>)
 8001cf4:	6013      	str	r3, [r2, #0]

		i = 14;
 8001cf6:	230e      	movs	r3, #14
 8001cf8:	61fb      	str	r3, [r7, #28]
		set_point[0] = bit16ToInt(i, serialBuffer);
 8001cfa:	4989      	ldr	r1, [pc, #548]	@ (8001f20 <StartCdcSerialTask+0x2b4>)
 8001cfc:	69f8      	ldr	r0, [r7, #28]
 8001cfe:	f7ff f8ad 	bl	8000e5c <bit16ToInt>
 8001d02:	4603      	mov	r3, r0
 8001d04:	4a8a      	ldr	r2, [pc, #552]	@ (8001f30 <StartCdcSerialTask+0x2c4>)
 8001d06:	6013      	str	r3, [r2, #0]
		set_point[1] = bit16ToInt(i + 2, serialBuffer);
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	3302      	adds	r3, #2
 8001d0c:	4984      	ldr	r1, [pc, #528]	@ (8001f20 <StartCdcSerialTask+0x2b4>)
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f7ff f8a4 	bl	8000e5c <bit16ToInt>
 8001d14:	4603      	mov	r3, r0
 8001d16:	4a86      	ldr	r2, [pc, #536]	@ (8001f30 <StartCdcSerialTask+0x2c4>)
 8001d18:	6053      	str	r3, [r2, #4]
		set_point[2] = bit16ToInt(i + 4, serialBuffer);
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	3304      	adds	r3, #4
 8001d1e:	4980      	ldr	r1, [pc, #512]	@ (8001f20 <StartCdcSerialTask+0x2b4>)
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff f89b 	bl	8000e5c <bit16ToInt>
 8001d26:	4603      	mov	r3, r0
 8001d28:	4a81      	ldr	r2, [pc, #516]	@ (8001f30 <StartCdcSerialTask+0x2c4>)
 8001d2a:	6093      	str	r3, [r2, #8]
		set_point[3] = bit16ToInt(i + 6, serialBuffer);
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	3306      	adds	r3, #6
 8001d30:	497b      	ldr	r1, [pc, #492]	@ (8001f20 <StartCdcSerialTask+0x2b4>)
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff f892 	bl	8000e5c <bit16ToInt>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	4a7d      	ldr	r2, [pc, #500]	@ (8001f30 <StartCdcSerialTask+0x2c4>)
 8001d3c:	60d3      	str	r3, [r2, #12]

		i = 22;
 8001d3e:	2316      	movs	r3, #22
 8001d40:	61fb      	str	r3, [r7, #28]
		c_yaw[0] = bit16ToInt(i, serialBuffer)/100;
 8001d42:	4977      	ldr	r1, [pc, #476]	@ (8001f20 <StartCdcSerialTask+0x2b4>)
 8001d44:	69f8      	ldr	r0, [r7, #28]
 8001d46:	f7ff f889 	bl	8000e5c <bit16ToInt>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	4a79      	ldr	r2, [pc, #484]	@ (8001f34 <StartCdcSerialTask+0x2c8>)
 8001d4e:	fb82 1203 	smull	r1, r2, r2, r3
 8001d52:	1152      	asrs	r2, r2, #5
 8001d54:	17db      	asrs	r3, r3, #31
 8001d56:	1ad3      	subs	r3, r2, r3
 8001d58:	4a77      	ldr	r2, [pc, #476]	@ (8001f38 <StartCdcSerialTask+0x2cc>)
 8001d5a:	6013      	str	r3, [r2, #0]
		c_yaw[1] = bit16ToInt(i + 2, serialBuffer)/100;
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	3302      	adds	r3, #2
 8001d60:	496f      	ldr	r1, [pc, #444]	@ (8001f20 <StartCdcSerialTask+0x2b4>)
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff f87a 	bl	8000e5c <bit16ToInt>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	4a72      	ldr	r2, [pc, #456]	@ (8001f34 <StartCdcSerialTask+0x2c8>)
 8001d6c:	fb82 1203 	smull	r1, r2, r2, r3
 8001d70:	1152      	asrs	r2, r2, #5
 8001d72:	17db      	asrs	r3, r3, #31
 8001d74:	1ad3      	subs	r3, r2, r3
 8001d76:	4a70      	ldr	r2, [pc, #448]	@ (8001f38 <StartCdcSerialTask+0x2cc>)
 8001d78:	6053      	str	r3, [r2, #4]
		c_yaw[2] = bit16ToInt(i + 4, serialBuffer)/100;
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	3304      	adds	r3, #4
 8001d7e:	4968      	ldr	r1, [pc, #416]	@ (8001f20 <StartCdcSerialTask+0x2b4>)
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff f86b 	bl	8000e5c <bit16ToInt>
 8001d86:	4603      	mov	r3, r0
 8001d88:	4a6a      	ldr	r2, [pc, #424]	@ (8001f34 <StartCdcSerialTask+0x2c8>)
 8001d8a:	fb82 1203 	smull	r1, r2, r2, r3
 8001d8e:	1152      	asrs	r2, r2, #5
 8001d90:	17db      	asrs	r3, r3, #31
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	4a68      	ldr	r2, [pc, #416]	@ (8001f38 <StartCdcSerialTask+0x2cc>)
 8001d96:	6093      	str	r3, [r2, #8]
		c_pitch[0] = bit16ToInt(i + 6, serialBuffer)/100;
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	3306      	adds	r3, #6
 8001d9c:	4960      	ldr	r1, [pc, #384]	@ (8001f20 <StartCdcSerialTask+0x2b4>)
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff f85c 	bl	8000e5c <bit16ToInt>
 8001da4:	4603      	mov	r3, r0
 8001da6:	4a63      	ldr	r2, [pc, #396]	@ (8001f34 <StartCdcSerialTask+0x2c8>)
 8001da8:	fb82 1203 	smull	r1, r2, r2, r3
 8001dac:	1152      	asrs	r2, r2, #5
 8001dae:	17db      	asrs	r3, r3, #31
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	4a62      	ldr	r2, [pc, #392]	@ (8001f3c <StartCdcSerialTask+0x2d0>)
 8001db4:	6013      	str	r3, [r2, #0]
		c_pitch[1] = bit16ToInt(i + 8, serialBuffer)/100;
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	3308      	adds	r3, #8
 8001dba:	4959      	ldr	r1, [pc, #356]	@ (8001f20 <StartCdcSerialTask+0x2b4>)
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff f84d 	bl	8000e5c <bit16ToInt>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	4a5b      	ldr	r2, [pc, #364]	@ (8001f34 <StartCdcSerialTask+0x2c8>)
 8001dc6:	fb82 1203 	smull	r1, r2, r2, r3
 8001dca:	1152      	asrs	r2, r2, #5
 8001dcc:	17db      	asrs	r3, r3, #31
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	4a5a      	ldr	r2, [pc, #360]	@ (8001f3c <StartCdcSerialTask+0x2d0>)
 8001dd2:	6053      	str	r3, [r2, #4]
		c_pitch[2] = bit16ToInt(i + 10, serialBuffer)/100;
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	330a      	adds	r3, #10
 8001dd8:	4951      	ldr	r1, [pc, #324]	@ (8001f20 <StartCdcSerialTask+0x2b4>)
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7ff f83e 	bl	8000e5c <bit16ToInt>
 8001de0:	4603      	mov	r3, r0
 8001de2:	4a54      	ldr	r2, [pc, #336]	@ (8001f34 <StartCdcSerialTask+0x2c8>)
 8001de4:	fb82 1203 	smull	r1, r2, r2, r3
 8001de8:	1152      	asrs	r2, r2, #5
 8001dea:	17db      	asrs	r3, r3, #31
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	4a53      	ldr	r2, [pc, #332]	@ (8001f3c <StartCdcSerialTask+0x2d0>)
 8001df0:	6093      	str	r3, [r2, #8]
		c_roll[0] = bit16ToInt(i + 12, serialBuffer)/100;
 8001df2:	69fb      	ldr	r3, [r7, #28]
 8001df4:	330c      	adds	r3, #12
 8001df6:	494a      	ldr	r1, [pc, #296]	@ (8001f20 <StartCdcSerialTask+0x2b4>)
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f7ff f82f 	bl	8000e5c <bit16ToInt>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	4a4c      	ldr	r2, [pc, #304]	@ (8001f34 <StartCdcSerialTask+0x2c8>)
 8001e02:	fb82 1203 	smull	r1, r2, r2, r3
 8001e06:	1152      	asrs	r2, r2, #5
 8001e08:	17db      	asrs	r3, r3, #31
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	4a4c      	ldr	r2, [pc, #304]	@ (8001f40 <StartCdcSerialTask+0x2d4>)
 8001e0e:	6013      	str	r3, [r2, #0]
		c_roll[1] = bit16ToInt(i + 14, serialBuffer)/100;
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	330e      	adds	r3, #14
 8001e14:	4942      	ldr	r1, [pc, #264]	@ (8001f20 <StartCdcSerialTask+0x2b4>)
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff f820 	bl	8000e5c <bit16ToInt>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	4a45      	ldr	r2, [pc, #276]	@ (8001f34 <StartCdcSerialTask+0x2c8>)
 8001e20:	fb82 1203 	smull	r1, r2, r2, r3
 8001e24:	1152      	asrs	r2, r2, #5
 8001e26:	17db      	asrs	r3, r3, #31
 8001e28:	1ad3      	subs	r3, r2, r3
 8001e2a:	4a45      	ldr	r2, [pc, #276]	@ (8001f40 <StartCdcSerialTask+0x2d4>)
 8001e2c:	6053      	str	r3, [r2, #4]
		c_roll[2] = bit16ToInt(i + 16, serialBuffer)/100;
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	3310      	adds	r3, #16
 8001e32:	493b      	ldr	r1, [pc, #236]	@ (8001f20 <StartCdcSerialTask+0x2b4>)
 8001e34:	4618      	mov	r0, r3
 8001e36:	f7ff f811 	bl	8000e5c <bit16ToInt>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	4a3d      	ldr	r2, [pc, #244]	@ (8001f34 <StartCdcSerialTask+0x2c8>)
 8001e3e:	fb82 1203 	smull	r1, r2, r2, r3
 8001e42:	1152      	asrs	r2, r2, #5
 8001e44:	17db      	asrs	r3, r3, #31
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	4a3d      	ldr	r2, [pc, #244]	@ (8001f40 <StartCdcSerialTask+0x2d4>)
 8001e4a:	6093      	str	r3, [r2, #8]
		c_depth[0] = bit16ToInt(i + 18, serialBuffer)/100;
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	3312      	adds	r3, #18
 8001e50:	4933      	ldr	r1, [pc, #204]	@ (8001f20 <StartCdcSerialTask+0x2b4>)
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7ff f802 	bl	8000e5c <bit16ToInt>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	4a36      	ldr	r2, [pc, #216]	@ (8001f34 <StartCdcSerialTask+0x2c8>)
 8001e5c:	fb82 1203 	smull	r1, r2, r2, r3
 8001e60:	1152      	asrs	r2, r2, #5
 8001e62:	17db      	asrs	r3, r3, #31
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	4a37      	ldr	r2, [pc, #220]	@ (8001f44 <StartCdcSerialTask+0x2d8>)
 8001e68:	6013      	str	r3, [r2, #0]
		c_depth[1] = bit16ToInt(i + 20, serialBuffer)/100;
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	3314      	adds	r3, #20
 8001e6e:	492c      	ldr	r1, [pc, #176]	@ (8001f20 <StartCdcSerialTask+0x2b4>)
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7fe fff3 	bl	8000e5c <bit16ToInt>
 8001e76:	4603      	mov	r3, r0
 8001e78:	4a2e      	ldr	r2, [pc, #184]	@ (8001f34 <StartCdcSerialTask+0x2c8>)
 8001e7a:	fb82 1203 	smull	r1, r2, r2, r3
 8001e7e:	1152      	asrs	r2, r2, #5
 8001e80:	17db      	asrs	r3, r3, #31
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	4a2f      	ldr	r2, [pc, #188]	@ (8001f44 <StartCdcSerialTask+0x2d8>)
 8001e86:	6053      	str	r3, [r2, #4]
		c_depth[2] = bit16ToInt(i + 22, serialBuffer)/100;
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	3316      	adds	r3, #22
 8001e8c:	4924      	ldr	r1, [pc, #144]	@ (8001f20 <StartCdcSerialTask+0x2b4>)
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7fe ffe4 	bl	8000e5c <bit16ToInt>
 8001e94:	4603      	mov	r3, r0
 8001e96:	4a27      	ldr	r2, [pc, #156]	@ (8001f34 <StartCdcSerialTask+0x2c8>)
 8001e98:	fb82 1203 	smull	r1, r2, r2, r3
 8001e9c:	1152      	asrs	r2, r2, #5
 8001e9e:	17db      	asrs	r3, r3, #31
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	4a28      	ldr	r2, [pc, #160]	@ (8001f44 <StartCdcSerialTask+0x2d8>)
 8001ea4:	6093      	str	r3, [r2, #8]

		i = 46;
 8001ea6:	232e      	movs	r3, #46	@ 0x2e
 8001ea8:	61fb      	str	r3, [r7, #28]
		lumen_power = bit16ToInt(i, serialBuffer);
 8001eaa:	491d      	ldr	r1, [pc, #116]	@ (8001f20 <StartCdcSerialTask+0x2b4>)
 8001eac:	69f8      	ldr	r0, [r7, #28]
 8001eae:	f7fe ffd5 	bl	8000e5c <bit16ToInt>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	4a24      	ldr	r2, [pc, #144]	@ (8001f48 <StartCdcSerialTask+0x2dc>)
 8001eb6:	6013      	str	r3, [r2, #0]

		i = 48;
 8001eb8:	2330      	movs	r3, #48	@ 0x30
 8001eba:	61fb      	str	r3, [r7, #28]
		movement_mode = serialBuffer[i];
 8001ebc:	4a18      	ldr	r2, [pc, #96]	@ (8001f20 <StartCdcSerialTask+0x2b4>)
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	4b21      	ldr	r3, [pc, #132]	@ (8001f4c <StartCdcSerialTask+0x2e0>)
 8001ec8:	601a      	str	r2, [r3, #0]
		operation_mode = serialBuffer[i + 1];
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	4a14      	ldr	r2, [pc, #80]	@ (8001f20 <StartCdcSerialTask+0x2b4>)
 8001ed0:	5cd3      	ldrb	r3, [r2, r3]
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	4b1e      	ldr	r3, [pc, #120]	@ (8001f50 <StartCdcSerialTask+0x2e4>)
 8001ed6:	601a      	str	r2, [r3, #0]
		arm_hw = serialBuffer[i + 2];
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	3302      	adds	r3, #2
 8001edc:	4a10      	ldr	r2, [pc, #64]	@ (8001f20 <StartCdcSerialTask+0x2b4>)
 8001ede:	5cd3      	ldrb	r3, [r2, r3]
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	4b1c      	ldr	r3, [pc, #112]	@ (8001f54 <StartCdcSerialTask+0x2e8>)
 8001ee4:	601a      	str	r2, [r3, #0]
		arm_sw = serialBuffer[i + 3];
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	3303      	adds	r3, #3
 8001eea:	4a0d      	ldr	r2, [pc, #52]	@ (8001f20 <StartCdcSerialTask+0x2b4>)
 8001eec:	5cd3      	ldrb	r3, [r2, r3]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	4b19      	ldr	r3, [pc, #100]	@ (8001f58 <StartCdcSerialTask+0x2ec>)
 8001ef2:	601a      	str	r2, [r3, #0]
		imu_reset = serialBuffer[i + 4];
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	3304      	adds	r3, #4
 8001ef8:	4a09      	ldr	r2, [pc, #36]	@ (8001f20 <StartCdcSerialTask+0x2b4>)
 8001efa:	5cd3      	ldrb	r3, [r2, r3]
 8001efc:	461a      	mov	r2, r3
 8001efe:	4b17      	ldr	r3, [pc, #92]	@ (8001f5c <StartCdcSerialTask+0x2f0>)
 8001f00:	601a      	str	r2, [r3, #0]

		if (HAL_GetTick() - lastReceiveTime > cdcTimeOut) {
 8001f02:	f001 fe63 	bl	8003bcc <HAL_GetTick>
 8001f06:	4602      	mov	r2, r0
 8001f08:	4b15      	ldr	r3, [pc, #84]	@ (8001f60 <StartCdcSerialTask+0x2f4>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	4a15      	ldr	r2, [pc, #84]	@ (8001f64 <StartCdcSerialTask+0x2f8>)
 8001f10:	6812      	ldr	r2, [r2, #0]
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d92a      	bls.n	8001f6c <StartCdcSerialTask+0x300>
			cdcHeartBeat = 0;
 8001f16:	4b14      	ldr	r3, [pc, #80]	@ (8001f68 <StartCdcSerialTask+0x2fc>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	e029      	b.n	8001f72 <StartCdcSerialTask+0x306>
 8001f1e:	bf00      	nop
 8001f20:	20000938 	.word	0x20000938
 8001f24:	20000978 	.word	0x20000978
 8001f28:	20000984 	.word	0x20000984
 8001f2c:	20000990 	.word	0x20000990
 8001f30:	20000994 	.word	0x20000994
 8001f34:	51eb851f 	.word	0x51eb851f
 8001f38:	200009bc 	.word	0x200009bc
 8001f3c:	200009c8 	.word	0x200009c8
 8001f40:	200009d4 	.word	0x200009d4
 8001f44:	200009e0 	.word	0x200009e0
 8001f48:	200009a4 	.word	0x200009a4
 8001f4c:	200009a8 	.word	0x200009a8
 8001f50:	200009ac 	.word	0x200009ac
 8001f54:	200009b0 	.word	0x200009b0
 8001f58:	200009b4 	.word	0x200009b4
 8001f5c:	200009b8 	.word	0x200009b8
 8001f60:	20000a0c 	.word	0x20000a0c
 8001f64:	20000004 	.word	0x20000004
 8001f68:	20000000 	.word	0x20000000
		} else {
			cdcHeartBeat = 1;
 8001f6c:	4b5b      	ldr	r3, [pc, #364]	@ (80020dc <StartCdcSerialTask+0x470>)
 8001f6e:	2201      	movs	r2, #1
 8001f70:	601a      	str	r2, [r3, #0]
		}

		if (cdcHeartBeat == 0) {
 8001f72:	4b5a      	ldr	r3, [pc, #360]	@ (80020dc <StartCdcSerialTask+0x470>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d123      	bne.n	8001fc2 <StartCdcSerialTask+0x356>
			vel_linear[0] = 0; vel_linear[1] = 0; vel_linear[2] = 0;
 8001f7a:	4b59      	ldr	r3, [pc, #356]	@ (80020e0 <StartCdcSerialTask+0x474>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	4b57      	ldr	r3, [pc, #348]	@ (80020e0 <StartCdcSerialTask+0x474>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	4b56      	ldr	r3, [pc, #344]	@ (80020e0 <StartCdcSerialTask+0x474>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	609a      	str	r2, [r3, #8]
			vel_angular[0] = 0; vel_angular[1] = 0; vel_angular[2] = 0;
 8001f8c:	4b55      	ldr	r3, [pc, #340]	@ (80020e4 <StartCdcSerialTask+0x478>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	601a      	str	r2, [r3, #0]
 8001f92:	4b54      	ldr	r3, [pc, #336]	@ (80020e4 <StartCdcSerialTask+0x478>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	605a      	str	r2, [r3, #4]
 8001f98:	4b52      	ldr	r3, [pc, #328]	@ (80020e4 <StartCdcSerialTask+0x478>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	609a      	str	r2, [r3, #8]
			set_point[0] = 0; set_point[1] = 0; set_point[2] = 0; set_point[3] = 0;
 8001f9e:	4b52      	ldr	r3, [pc, #328]	@ (80020e8 <StartCdcSerialTask+0x47c>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	4b50      	ldr	r3, [pc, #320]	@ (80020e8 <StartCdcSerialTask+0x47c>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	605a      	str	r2, [r3, #4]
 8001faa:	4b4f      	ldr	r3, [pc, #316]	@ (80020e8 <StartCdcSerialTask+0x47c>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	4b4d      	ldr	r3, [pc, #308]	@ (80020e8 <StartCdcSerialTask+0x47c>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	60da      	str	r2, [r3, #12]
			movement_mode = 0;
 8001fb6:	4b4d      	ldr	r3, [pc, #308]	@ (80020ec <StartCdcSerialTask+0x480>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	601a      	str	r2, [r3, #0]
			operation_mode = 0;
 8001fbc:	4b4c      	ldr	r3, [pc, #304]	@ (80020f0 <StartCdcSerialTask+0x484>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	601a      	str	r2, [r3, #0]
		}

	//Transmit
		Message_IMU[0] = bno055_yaw * 10;
 8001fc2:	4b4c      	ldr	r3, [pc, #304]	@ (80020f4 <StartCdcSerialTask+0x488>)
 8001fc4:	edd3 7a00 	vldr	s15, [r3]
 8001fc8:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001fcc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fd4:	ee17 3a90 	vmov	r3, s15
 8001fd8:	b21a      	sxth	r2, r3
 8001fda:	4b47      	ldr	r3, [pc, #284]	@ (80020f8 <StartCdcSerialTask+0x48c>)
 8001fdc:	801a      	strh	r2, [r3, #0]
		Message_IMU[1] = bno055_pitch * 10;
 8001fde:	4b47      	ldr	r3, [pc, #284]	@ (80020fc <StartCdcSerialTask+0x490>)
 8001fe0:	edd3 7a00 	vldr	s15, [r3]
 8001fe4:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001fe8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ff0:	ee17 3a90 	vmov	r3, s15
 8001ff4:	b21a      	sxth	r2, r3
 8001ff6:	4b40      	ldr	r3, [pc, #256]	@ (80020f8 <StartCdcSerialTask+0x48c>)
 8001ff8:	805a      	strh	r2, [r3, #2]
		Message_IMU[2] = bno055_roll * 10;
 8001ffa:	4b41      	ldr	r3, [pc, #260]	@ (8002100 <StartCdcSerialTask+0x494>)
 8001ffc:	edd3 7a00 	vldr	s15, [r3]
 8002000:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002004:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002008:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800200c:	ee17 3a90 	vmov	r3, s15
 8002010:	b21a      	sxth	r2, r3
 8002012:	4b39      	ldr	r3, [pc, #228]	@ (80020f8 <StartCdcSerialTask+0x48c>)
 8002014:	809a      	strh	r2, [r3, #4]

		Message_depth = depthValue * 100;
 8002016:	4b3b      	ldr	r3, [pc, #236]	@ (8002104 <StartCdcSerialTask+0x498>)
 8002018:	edd3 7a00 	vldr	s15, [r3]
 800201c:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8002108 <StartCdcSerialTask+0x49c>
 8002020:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002024:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002028:	ee17 3a90 	vmov	r3, s15
 800202c:	b21a      	sxth	r2, r3
 800202e:	4b37      	ldr	r3, [pc, #220]	@ (800210c <StartCdcSerialTask+0x4a0>)
 8002030:	801a      	strh	r2, [r3, #0]
		Message_inPressure = pressureInside * 100;
 8002032:	4b37      	ldr	r3, [pc, #220]	@ (8002110 <StartCdcSerialTask+0x4a4>)
 8002034:	edd3 7a00 	vldr	s15, [r3]
 8002038:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8002108 <StartCdcSerialTask+0x49c>
 800203c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002040:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002044:	ee17 3a90 	vmov	r3, s15
 8002048:	b21a      	sxth	r2, r3
 800204a:	4b32      	ldr	r3, [pc, #200]	@ (8002114 <StartCdcSerialTask+0x4a8>)
 800204c:	801a      	strh	r2, [r3, #0]

		Message_batt1 = batt1_volt * 100;
 800204e:	4b32      	ldr	r3, [pc, #200]	@ (8002118 <StartCdcSerialTask+0x4ac>)
 8002050:	edd3 7a00 	vldr	s15, [r3]
 8002054:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8002108 <StartCdcSerialTask+0x49c>
 8002058:	ee67 7a87 	vmul.f32	s15, s15, s14
 800205c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002060:	ee17 3a90 	vmov	r3, s15
 8002064:	b21a      	sxth	r2, r3
 8002066:	4b2d      	ldr	r3, [pc, #180]	@ (800211c <StartCdcSerialTask+0x4b0>)
 8002068:	801a      	strh	r2, [r3, #0]
		Message_batt2 = batt2_volt * 100;
 800206a:	4b2d      	ldr	r3, [pc, #180]	@ (8002120 <StartCdcSerialTask+0x4b4>)
 800206c:	edd3 7a00 	vldr	s15, [r3]
 8002070:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 8002108 <StartCdcSerialTask+0x49c>
 8002074:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002078:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800207c:	ee17 3a90 	vmov	r3, s15
 8002080:	b21a      	sxth	r2, r3
 8002082:	4b28      	ldr	r3, [pc, #160]	@ (8002124 <StartCdcSerialTask+0x4b8>)
 8002084:	801a      	strh	r2, [r3, #0]

//		Message_ranges = scan_ranges;
//		Message_confidence = confidence;

		int16_t Message_Values[] = { Message_IMU[0],Message_IMU[1], Message_IMU[2], Message_depth, Message_inPressure,
 8002086:	4b1c      	ldr	r3, [pc, #112]	@ (80020f8 <StartCdcSerialTask+0x48c>)
 8002088:	f9b3 3000 	ldrsh.w	r3, [r3]
 800208c:	81bb      	strh	r3, [r7, #12]
 800208e:	4b1a      	ldr	r3, [pc, #104]	@ (80020f8 <StartCdcSerialTask+0x48c>)
 8002090:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002094:	81fb      	strh	r3, [r7, #14]
 8002096:	4b18      	ldr	r3, [pc, #96]	@ (80020f8 <StartCdcSerialTask+0x48c>)
 8002098:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800209c:	823b      	strh	r3, [r7, #16]
 800209e:	4b1b      	ldr	r3, [pc, #108]	@ (800210c <StartCdcSerialTask+0x4a0>)
 80020a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020a4:	827b      	strh	r3, [r7, #18]
 80020a6:	4b1b      	ldr	r3, [pc, #108]	@ (8002114 <StartCdcSerialTask+0x4a8>)
 80020a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020ac:	82bb      	strh	r3, [r7, #20]
 80020ae:	4b1b      	ldr	r3, [pc, #108]	@ (800211c <StartCdcSerialTask+0x4b0>)
 80020b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020b4:	82fb      	strh	r3, [r7, #22]
 80020b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002124 <StartCdcSerialTask+0x4b8>)
 80020b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020bc:	833b      	strh	r3, [r7, #24]
				Message_batt1, Message_batt2 };


		merge16(Message_Values, transmitBuffer,
 80020be:	f107 030c 	add.w	r3, r7, #12
 80020c2:	2207      	movs	r2, #7
 80020c4:	4918      	ldr	r1, [pc, #96]	@ (8002128 <StartCdcSerialTask+0x4bc>)
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7fe fee8 	bl	8000e9c <merge16>
				sizeof(Message_Values) / sizeof(Message_Values[0]));

		CDC_Transmit_FS(transmitBuffer, sizeof(transmitBuffer));
 80020cc:	210e      	movs	r1, #14
 80020ce:	4816      	ldr	r0, [pc, #88]	@ (8002128 <StartCdcSerialTask+0x4bc>)
 80020d0:	f00c ff74 	bl	800efbc <CDC_Transmit_FS>

    osDelay(1);
 80020d4:	2001      	movs	r0, #1
 80020d6:	f00b fcac 	bl	800da32 <osDelay>
  {
 80020da:	e5cd      	b.n	8001c78 <StartCdcSerialTask+0xc>
 80020dc:	20000000 	.word	0x20000000
 80020e0:	20000978 	.word	0x20000978
 80020e4:	20000984 	.word	0x20000984
 80020e8:	20000994 	.word	0x20000994
 80020ec:	200009a8 	.word	0x200009a8
 80020f0:	200009ac 	.word	0x200009ac
 80020f4:	20000a2c 	.word	0x20000a2c
 80020f8:	200009fc 	.word	0x200009fc
 80020fc:	20000a30 	.word	0x20000a30
 8002100:	20000a34 	.word	0x20000a34
 8002104:	20000a70 	.word	0x20000a70
 8002108:	42c80000 	.word	0x42c80000
 800210c:	20000a04 	.word	0x20000a04
 8002110:	20000a6c 	.word	0x20000a6c
 8002114:	20000a02 	.word	0x20000a02
 8002118:	20000b44 	.word	0x20000b44
 800211c:	20000a06 	.word	0x20000a06
 8002120:	20000b48 	.word	0x20000b48
 8002124:	20000a08 	.word	0x20000a08
 8002128:	200009ec 	.word	0x200009ec

0800212c <StartMovementTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMovementTask */
void StartMovementTask(void const * argument)
{
 800212c:	b5b0      	push	{r4, r5, r7, lr}
 800212e:	ed2d 8b02 	vpush	{d8}
 8002132:	b084      	sub	sp, #16
 8002134:	af02      	add	r7, sp, #8
 8002136:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMovementTask */
  /* Infinite loop */
  for(;;)
  {
//		Movement Calculation
		if (movement_mode == 0) { // Fully Manual
 8002138:	4b85      	ldr	r3, [pc, #532]	@ (8002350 <StartMovementTask+0x224>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d153      	bne.n	80021e8 <StartMovementTask+0xbc>
			//Horizontal Thruster  Forwaed  |||   Lateral   |||    Yaw
			H_FR = +vel_linear[0] - vel_linear[1] + vel_angular[2];
 8002140:	4b84      	ldr	r3, [pc, #528]	@ (8002354 <StartMovementTask+0x228>)
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	4b83      	ldr	r3, [pc, #524]	@ (8002354 <StartMovementTask+0x228>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	1ad2      	subs	r2, r2, r3
 800214a:	4b83      	ldr	r3, [pc, #524]	@ (8002358 <StartMovementTask+0x22c>)
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	4413      	add	r3, r2
 8002150:	4a82      	ldr	r2, [pc, #520]	@ (800235c <StartMovementTask+0x230>)
 8002152:	6013      	str	r3, [r2, #0]
			H_FL = -vel_linear[0] - vel_linear[1] - vel_angular[2];
 8002154:	4b7f      	ldr	r3, [pc, #508]	@ (8002354 <StartMovementTask+0x228>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	425a      	negs	r2, r3
 800215a:	4b7e      	ldr	r3, [pc, #504]	@ (8002354 <StartMovementTask+0x228>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	1ad2      	subs	r2, r2, r3
 8002160:	4b7d      	ldr	r3, [pc, #500]	@ (8002358 <StartMovementTask+0x22c>)
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	4a7e      	ldr	r2, [pc, #504]	@ (8002360 <StartMovementTask+0x234>)
 8002168:	6013      	str	r3, [r2, #0]
			H_BR = +vel_linear[0] + vel_linear[1] - vel_angular[2];
 800216a:	4b7a      	ldr	r3, [pc, #488]	@ (8002354 <StartMovementTask+0x228>)
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	4b79      	ldr	r3, [pc, #484]	@ (8002354 <StartMovementTask+0x228>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	441a      	add	r2, r3
 8002174:	4b78      	ldr	r3, [pc, #480]	@ (8002358 <StartMovementTask+0x22c>)
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	4a7a      	ldr	r2, [pc, #488]	@ (8002364 <StartMovementTask+0x238>)
 800217c:	6013      	str	r3, [r2, #0]
			H_BL = -vel_linear[0] + vel_linear[1] + vel_angular[2];
 800217e:	4b75      	ldr	r3, [pc, #468]	@ (8002354 <StartMovementTask+0x228>)
 8002180:	685a      	ldr	r2, [r3, #4]
 8002182:	4b74      	ldr	r3, [pc, #464]	@ (8002354 <StartMovementTask+0x228>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	1ad2      	subs	r2, r2, r3
 8002188:	4b73      	ldr	r3, [pc, #460]	@ (8002358 <StartMovementTask+0x22c>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	4413      	add	r3, r2
 800218e:	4a76      	ldr	r2, [pc, #472]	@ (8002368 <StartMovementTask+0x23c>)
 8002190:	6013      	str	r3, [r2, #0]

			//Vertical Thruster    Up/Down  |||   Pitch     |||   Roll
			V_FR = -vel_linear[2] - vel_angular[0] + vel_angular[1];
 8002192:	4b70      	ldr	r3, [pc, #448]	@ (8002354 <StartMovementTask+0x228>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	425a      	negs	r2, r3
 8002198:	4b6f      	ldr	r3, [pc, #444]	@ (8002358 <StartMovementTask+0x22c>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	1ad2      	subs	r2, r2, r3
 800219e:	4b6e      	ldr	r3, [pc, #440]	@ (8002358 <StartMovementTask+0x22c>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	4413      	add	r3, r2
 80021a4:	4a71      	ldr	r2, [pc, #452]	@ (800236c <StartMovementTask+0x240>)
 80021a6:	6013      	str	r3, [r2, #0]
			V_FL = -vel_linear[2] - vel_angular[0] - vel_angular[1];
 80021a8:	4b6a      	ldr	r3, [pc, #424]	@ (8002354 <StartMovementTask+0x228>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	425a      	negs	r2, r3
 80021ae:	4b6a      	ldr	r3, [pc, #424]	@ (8002358 <StartMovementTask+0x22c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	1ad2      	subs	r2, r2, r3
 80021b4:	4b68      	ldr	r3, [pc, #416]	@ (8002358 <StartMovementTask+0x22c>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	4a6d      	ldr	r2, [pc, #436]	@ (8002370 <StartMovementTask+0x244>)
 80021bc:	6013      	str	r3, [r2, #0]
			V_BR = -vel_linear[2] + vel_angular[0] + vel_angular[1];
 80021be:	4b66      	ldr	r3, [pc, #408]	@ (8002358 <StartMovementTask+0x22c>)
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	4b64      	ldr	r3, [pc, #400]	@ (8002354 <StartMovementTask+0x228>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	1ad2      	subs	r2, r2, r3
 80021c8:	4b63      	ldr	r3, [pc, #396]	@ (8002358 <StartMovementTask+0x22c>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	4413      	add	r3, r2
 80021ce:	4a69      	ldr	r2, [pc, #420]	@ (8002374 <StartMovementTask+0x248>)
 80021d0:	6013      	str	r3, [r2, #0]
			V_BL = -vel_linear[2] + vel_angular[0] - vel_angular[1];
 80021d2:	4b61      	ldr	r3, [pc, #388]	@ (8002358 <StartMovementTask+0x22c>)
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	4b5f      	ldr	r3, [pc, #380]	@ (8002354 <StartMovementTask+0x228>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	1ad2      	subs	r2, r2, r3
 80021dc:	4b5e      	ldr	r3, [pc, #376]	@ (8002358 <StartMovementTask+0x22c>)
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	4a65      	ldr	r2, [pc, #404]	@ (8002378 <StartMovementTask+0x24c>)
 80021e4:	6013      	str	r3, [r2, #0]
 80021e6:	e21d      	b.n	8002624 <StartMovementTask+0x4f8>
		}

		else if (movement_mode == 1) { // Stabilize
 80021e8:	4b59      	ldr	r3, [pc, #356]	@ (8002350 <StartMovementTask+0x224>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	f040 80cb 	bne.w	8002388 <StartMovementTask+0x25c>
			//Horizontal Thruster  Forwaed  |||   Lateral   |||    Yaw
			H_FR = +vel_linear[0] - vel_linear[1] + yaw.output;
 80021f2:	4b58      	ldr	r3, [pc, #352]	@ (8002354 <StartMovementTask+0x228>)
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	4b57      	ldr	r3, [pc, #348]	@ (8002354 <StartMovementTask+0x228>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	ee07 3a90 	vmov	s15, r3
 8002200:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002204:	4b5d      	ldr	r3, [pc, #372]	@ (800237c <StartMovementTask+0x250>)
 8002206:	edd3 7a04 	vldr	s15, [r3, #16]
 800220a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800220e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002212:	ee17 2a90 	vmov	r2, s15
 8002216:	4b51      	ldr	r3, [pc, #324]	@ (800235c <StartMovementTask+0x230>)
 8002218:	601a      	str	r2, [r3, #0]
			H_FL = -vel_linear[0] - vel_linear[1] - yaw.output;
 800221a:	4b4e      	ldr	r3, [pc, #312]	@ (8002354 <StartMovementTask+0x228>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	425a      	negs	r2, r3
 8002220:	4b4c      	ldr	r3, [pc, #304]	@ (8002354 <StartMovementTask+0x228>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	1ad3      	subs	r3, r2, r3
 8002226:	ee07 3a90 	vmov	s15, r3
 800222a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800222e:	4b53      	ldr	r3, [pc, #332]	@ (800237c <StartMovementTask+0x250>)
 8002230:	edd3 7a04 	vldr	s15, [r3, #16]
 8002234:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002238:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800223c:	ee17 2a90 	vmov	r2, s15
 8002240:	4b47      	ldr	r3, [pc, #284]	@ (8002360 <StartMovementTask+0x234>)
 8002242:	601a      	str	r2, [r3, #0]
			H_BR = +vel_linear[0] + vel_linear[1] - yaw.output;
 8002244:	4b43      	ldr	r3, [pc, #268]	@ (8002354 <StartMovementTask+0x228>)
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	4b42      	ldr	r3, [pc, #264]	@ (8002354 <StartMovementTask+0x228>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	4413      	add	r3, r2
 800224e:	ee07 3a90 	vmov	s15, r3
 8002252:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002256:	4b49      	ldr	r3, [pc, #292]	@ (800237c <StartMovementTask+0x250>)
 8002258:	edd3 7a04 	vldr	s15, [r3, #16]
 800225c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002260:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002264:	ee17 2a90 	vmov	r2, s15
 8002268:	4b3e      	ldr	r3, [pc, #248]	@ (8002364 <StartMovementTask+0x238>)
 800226a:	601a      	str	r2, [r3, #0]
			H_BL = -vel_linear[0] + vel_linear[1] + yaw.output;
 800226c:	4b39      	ldr	r3, [pc, #228]	@ (8002354 <StartMovementTask+0x228>)
 800226e:	685a      	ldr	r2, [r3, #4]
 8002270:	4b38      	ldr	r3, [pc, #224]	@ (8002354 <StartMovementTask+0x228>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	ee07 3a90 	vmov	s15, r3
 800227a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800227e:	4b3f      	ldr	r3, [pc, #252]	@ (800237c <StartMovementTask+0x250>)
 8002280:	edd3 7a04 	vldr	s15, [r3, #16]
 8002284:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002288:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800228c:	ee17 2a90 	vmov	r2, s15
 8002290:	4b35      	ldr	r3, [pc, #212]	@ (8002368 <StartMovementTask+0x23c>)
 8002292:	601a      	str	r2, [r3, #0]

			//Vertical Thruster    Up/Down  |||   Pitch     |||   Roll
			V_FR = -vel_linear[2] - pitch.output - roll.output;
 8002294:	4b2f      	ldr	r3, [pc, #188]	@ (8002354 <StartMovementTask+0x228>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	425b      	negs	r3, r3
 800229a:	ee07 3a90 	vmov	s15, r3
 800229e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022a2:	4b37      	ldr	r3, [pc, #220]	@ (8002380 <StartMovementTask+0x254>)
 80022a4:	edd3 7a04 	vldr	s15, [r3, #16]
 80022a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022ac:	4b35      	ldr	r3, [pc, #212]	@ (8002384 <StartMovementTask+0x258>)
 80022ae:	edd3 7a04 	vldr	s15, [r3, #16]
 80022b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022ba:	ee17 2a90 	vmov	r2, s15
 80022be:	4b2b      	ldr	r3, [pc, #172]	@ (800236c <StartMovementTask+0x240>)
 80022c0:	601a      	str	r2, [r3, #0]
			V_FL = -vel_linear[2] - pitch.output + roll.output;
 80022c2:	4b24      	ldr	r3, [pc, #144]	@ (8002354 <StartMovementTask+0x228>)
 80022c4:	689b      	ldr	r3, [r3, #8]
 80022c6:	425b      	negs	r3, r3
 80022c8:	ee07 3a90 	vmov	s15, r3
 80022cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022d0:	4b2b      	ldr	r3, [pc, #172]	@ (8002380 <StartMovementTask+0x254>)
 80022d2:	edd3 7a04 	vldr	s15, [r3, #16]
 80022d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022da:	4b2a      	ldr	r3, [pc, #168]	@ (8002384 <StartMovementTask+0x258>)
 80022dc:	edd3 7a04 	vldr	s15, [r3, #16]
 80022e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022e8:	ee17 2a90 	vmov	r2, s15
 80022ec:	4b20      	ldr	r3, [pc, #128]	@ (8002370 <StartMovementTask+0x244>)
 80022ee:	601a      	str	r2, [r3, #0]
			V_BR = -vel_linear[2] + pitch.output - roll.output;
 80022f0:	4b18      	ldr	r3, [pc, #96]	@ (8002354 <StartMovementTask+0x228>)
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	425b      	negs	r3, r3
 80022f6:	ee07 3a90 	vmov	s15, r3
 80022fa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022fe:	4b20      	ldr	r3, [pc, #128]	@ (8002380 <StartMovementTask+0x254>)
 8002300:	edd3 7a04 	vldr	s15, [r3, #16]
 8002304:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002308:	4b1e      	ldr	r3, [pc, #120]	@ (8002384 <StartMovementTask+0x258>)
 800230a:	edd3 7a04 	vldr	s15, [r3, #16]
 800230e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002312:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002316:	ee17 2a90 	vmov	r2, s15
 800231a:	4b16      	ldr	r3, [pc, #88]	@ (8002374 <StartMovementTask+0x248>)
 800231c:	601a      	str	r2, [r3, #0]
			V_BL = -vel_linear[2] + pitch.output + roll.output;
 800231e:	4b0d      	ldr	r3, [pc, #52]	@ (8002354 <StartMovementTask+0x228>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	425b      	negs	r3, r3
 8002324:	ee07 3a90 	vmov	s15, r3
 8002328:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800232c:	4b14      	ldr	r3, [pc, #80]	@ (8002380 <StartMovementTask+0x254>)
 800232e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002332:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002336:	4b13      	ldr	r3, [pc, #76]	@ (8002384 <StartMovementTask+0x258>)
 8002338:	edd3 7a04 	vldr	s15, [r3, #16]
 800233c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002340:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002344:	ee17 2a90 	vmov	r2, s15
 8002348:	4b0b      	ldr	r3, [pc, #44]	@ (8002378 <StartMovementTask+0x24c>)
 800234a:	601a      	str	r2, [r3, #0]
 800234c:	e16a      	b.n	8002624 <StartMovementTask+0x4f8>
 800234e:	bf00      	nop
 8002350:	200009a8 	.word	0x200009a8
 8002354:	20000978 	.word	0x20000978
 8002358:	20000984 	.word	0x20000984
 800235c:	20000b1c 	.word	0x20000b1c
 8002360:	20000b20 	.word	0x20000b20
 8002364:	20000b24 	.word	0x20000b24
 8002368:	20000b28 	.word	0x20000b28
 800236c:	20000b2c 	.word	0x20000b2c
 8002370:	20000b30 	.word	0x20000b30
 8002374:	20000b34 	.word	0x20000b34
 8002378:	20000b38 	.word	0x20000b38
 800237c:	20000a74 	.word	0x20000a74
 8002380:	20000a9c 	.word	0x20000a9c
 8002384:	20000ac4 	.word	0x20000ac4
		}

		else if (movement_mode == 2) { // Depthhold
 8002388:	4b49      	ldr	r3, [pc, #292]	@ (80024b0 <StartMovementTask+0x384>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2b02      	cmp	r3, #2
 800238e:	f040 80a7 	bne.w	80024e0 <StartMovementTask+0x3b4>
			//Horizontal Thruster  Forwaed  |||   Lateral   |||    Yaw
			H_FR = +vel_linear[0] - vel_linear[1] + vel_angular[2];
 8002392:	4b48      	ldr	r3, [pc, #288]	@ (80024b4 <StartMovementTask+0x388>)
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	4b47      	ldr	r3, [pc, #284]	@ (80024b4 <StartMovementTask+0x388>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	1ad2      	subs	r2, r2, r3
 800239c:	4b46      	ldr	r3, [pc, #280]	@ (80024b8 <StartMovementTask+0x38c>)
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	4413      	add	r3, r2
 80023a2:	4a46      	ldr	r2, [pc, #280]	@ (80024bc <StartMovementTask+0x390>)
 80023a4:	6013      	str	r3, [r2, #0]
			H_FL = -vel_linear[0] - vel_linear[1] - vel_angular[2];
 80023a6:	4b43      	ldr	r3, [pc, #268]	@ (80024b4 <StartMovementTask+0x388>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	425a      	negs	r2, r3
 80023ac:	4b41      	ldr	r3, [pc, #260]	@ (80024b4 <StartMovementTask+0x388>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	1ad2      	subs	r2, r2, r3
 80023b2:	4b41      	ldr	r3, [pc, #260]	@ (80024b8 <StartMovementTask+0x38c>)
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	4a41      	ldr	r2, [pc, #260]	@ (80024c0 <StartMovementTask+0x394>)
 80023ba:	6013      	str	r3, [r2, #0]
			H_BR = +vel_linear[0] + vel_linear[1] - vel_angular[2];
 80023bc:	4b3d      	ldr	r3, [pc, #244]	@ (80024b4 <StartMovementTask+0x388>)
 80023be:	681a      	ldr	r2, [r3, #0]
 80023c0:	4b3c      	ldr	r3, [pc, #240]	@ (80024b4 <StartMovementTask+0x388>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	441a      	add	r2, r3
 80023c6:	4b3c      	ldr	r3, [pc, #240]	@ (80024b8 <StartMovementTask+0x38c>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	1ad3      	subs	r3, r2, r3
 80023cc:	4a3d      	ldr	r2, [pc, #244]	@ (80024c4 <StartMovementTask+0x398>)
 80023ce:	6013      	str	r3, [r2, #0]
			H_BL = -vel_linear[0] + vel_linear[1] + vel_angular[2];
 80023d0:	4b38      	ldr	r3, [pc, #224]	@ (80024b4 <StartMovementTask+0x388>)
 80023d2:	685a      	ldr	r2, [r3, #4]
 80023d4:	4b37      	ldr	r3, [pc, #220]	@ (80024b4 <StartMovementTask+0x388>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	1ad2      	subs	r2, r2, r3
 80023da:	4b37      	ldr	r3, [pc, #220]	@ (80024b8 <StartMovementTask+0x38c>)
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	4413      	add	r3, r2
 80023e0:	4a39      	ldr	r2, [pc, #228]	@ (80024c8 <StartMovementTask+0x39c>)
 80023e2:	6013      	str	r3, [r2, #0]

			//Vertical Thruster    Up/Down  |||   Pitch     |||   Roll
			V_FR = +depth.output - vel_angular[0] + vel_angular[1];
 80023e4:	4b39      	ldr	r3, [pc, #228]	@ (80024cc <StartMovementTask+0x3a0>)
 80023e6:	ed93 7a04 	vldr	s14, [r3, #16]
 80023ea:	4b33      	ldr	r3, [pc, #204]	@ (80024b8 <StartMovementTask+0x38c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	ee07 3a90 	vmov	s15, r3
 80023f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023fa:	4b2f      	ldr	r3, [pc, #188]	@ (80024b8 <StartMovementTask+0x38c>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	ee07 3a90 	vmov	s15, r3
 8002402:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002406:	ee77 7a27 	vadd.f32	s15, s14, s15
 800240a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800240e:	ee17 2a90 	vmov	r2, s15
 8002412:	4b2f      	ldr	r3, [pc, #188]	@ (80024d0 <StartMovementTask+0x3a4>)
 8002414:	601a      	str	r2, [r3, #0]
			V_FL = +depth.output - vel_angular[0] - vel_angular[1];
 8002416:	4b2d      	ldr	r3, [pc, #180]	@ (80024cc <StartMovementTask+0x3a0>)
 8002418:	ed93 7a04 	vldr	s14, [r3, #16]
 800241c:	4b26      	ldr	r3, [pc, #152]	@ (80024b8 <StartMovementTask+0x38c>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	ee07 3a90 	vmov	s15, r3
 8002424:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002428:	ee37 7a67 	vsub.f32	s14, s14, s15
 800242c:	4b22      	ldr	r3, [pc, #136]	@ (80024b8 <StartMovementTask+0x38c>)
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	ee07 3a90 	vmov	s15, r3
 8002434:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002438:	ee77 7a67 	vsub.f32	s15, s14, s15
 800243c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002440:	ee17 2a90 	vmov	r2, s15
 8002444:	4b23      	ldr	r3, [pc, #140]	@ (80024d4 <StartMovementTask+0x3a8>)
 8002446:	601a      	str	r2, [r3, #0]
			V_BR = +depth.output + vel_angular[0] + vel_angular[1];
 8002448:	4b20      	ldr	r3, [pc, #128]	@ (80024cc <StartMovementTask+0x3a0>)
 800244a:	ed93 7a04 	vldr	s14, [r3, #16]
 800244e:	4b1a      	ldr	r3, [pc, #104]	@ (80024b8 <StartMovementTask+0x38c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	ee07 3a90 	vmov	s15, r3
 8002456:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800245a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800245e:	4b16      	ldr	r3, [pc, #88]	@ (80024b8 <StartMovementTask+0x38c>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	ee07 3a90 	vmov	s15, r3
 8002466:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800246a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800246e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002472:	ee17 2a90 	vmov	r2, s15
 8002476:	4b18      	ldr	r3, [pc, #96]	@ (80024d8 <StartMovementTask+0x3ac>)
 8002478:	601a      	str	r2, [r3, #0]
			V_BL = +depth.output + vel_angular[0] - vel_angular[1];
 800247a:	4b14      	ldr	r3, [pc, #80]	@ (80024cc <StartMovementTask+0x3a0>)
 800247c:	ed93 7a04 	vldr	s14, [r3, #16]
 8002480:	4b0d      	ldr	r3, [pc, #52]	@ (80024b8 <StartMovementTask+0x38c>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	ee07 3a90 	vmov	s15, r3
 8002488:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800248c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002490:	4b09      	ldr	r3, [pc, #36]	@ (80024b8 <StartMovementTask+0x38c>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	ee07 3a90 	vmov	s15, r3
 8002498:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800249c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024a4:	ee17 2a90 	vmov	r2, s15
 80024a8:	4b0c      	ldr	r3, [pc, #48]	@ (80024dc <StartMovementTask+0x3b0>)
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	e0ba      	b.n	8002624 <StartMovementTask+0x4f8>
 80024ae:	bf00      	nop
 80024b0:	200009a8 	.word	0x200009a8
 80024b4:	20000978 	.word	0x20000978
 80024b8:	20000984 	.word	0x20000984
 80024bc:	20000b1c 	.word	0x20000b1c
 80024c0:	20000b20 	.word	0x20000b20
 80024c4:	20000b24 	.word	0x20000b24
 80024c8:	20000b28 	.word	0x20000b28
 80024cc:	20000aec 	.word	0x20000aec
 80024d0:	20000b2c 	.word	0x20000b2c
 80024d4:	20000b30 	.word	0x20000b30
 80024d8:	20000b34 	.word	0x20000b34
 80024dc:	20000b38 	.word	0x20000b38
		}

		else if (movement_mode == 3) { // Fully Assisted
 80024e0:	4bbe      	ldr	r3, [pc, #760]	@ (80027dc <StartMovementTask+0x6b0>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2b03      	cmp	r3, #3
 80024e6:	f040 809d 	bne.w	8002624 <StartMovementTask+0x4f8>
			//Horizontal Thruster  Forwaed  |||   Lateral   |||    Yaw
			H_FR = +vel_linear[0] - vel_linear[1] + yaw.output;
 80024ea:	4bbd      	ldr	r3, [pc, #756]	@ (80027e0 <StartMovementTask+0x6b4>)
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	4bbc      	ldr	r3, [pc, #752]	@ (80027e0 <StartMovementTask+0x6b4>)
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	1ad3      	subs	r3, r2, r3
 80024f4:	ee07 3a90 	vmov	s15, r3
 80024f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024fc:	4bb9      	ldr	r3, [pc, #740]	@ (80027e4 <StartMovementTask+0x6b8>)
 80024fe:	edd3 7a04 	vldr	s15, [r3, #16]
 8002502:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002506:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800250a:	ee17 2a90 	vmov	r2, s15
 800250e:	4bb6      	ldr	r3, [pc, #728]	@ (80027e8 <StartMovementTask+0x6bc>)
 8002510:	601a      	str	r2, [r3, #0]
			H_FL = -vel_linear[0] - vel_linear[1] - yaw.output;
 8002512:	4bb3      	ldr	r3, [pc, #716]	@ (80027e0 <StartMovementTask+0x6b4>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	425a      	negs	r2, r3
 8002518:	4bb1      	ldr	r3, [pc, #708]	@ (80027e0 <StartMovementTask+0x6b4>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	ee07 3a90 	vmov	s15, r3
 8002522:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002526:	4baf      	ldr	r3, [pc, #700]	@ (80027e4 <StartMovementTask+0x6b8>)
 8002528:	edd3 7a04 	vldr	s15, [r3, #16]
 800252c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002530:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002534:	ee17 2a90 	vmov	r2, s15
 8002538:	4bac      	ldr	r3, [pc, #688]	@ (80027ec <StartMovementTask+0x6c0>)
 800253a:	601a      	str	r2, [r3, #0]
			H_BR = +vel_linear[0] + vel_linear[1] - yaw.output;
 800253c:	4ba8      	ldr	r3, [pc, #672]	@ (80027e0 <StartMovementTask+0x6b4>)
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	4ba7      	ldr	r3, [pc, #668]	@ (80027e0 <StartMovementTask+0x6b4>)
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	4413      	add	r3, r2
 8002546:	ee07 3a90 	vmov	s15, r3
 800254a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800254e:	4ba5      	ldr	r3, [pc, #660]	@ (80027e4 <StartMovementTask+0x6b8>)
 8002550:	edd3 7a04 	vldr	s15, [r3, #16]
 8002554:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002558:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800255c:	ee17 2a90 	vmov	r2, s15
 8002560:	4ba3      	ldr	r3, [pc, #652]	@ (80027f0 <StartMovementTask+0x6c4>)
 8002562:	601a      	str	r2, [r3, #0]
			H_BL = -vel_linear[0] + vel_linear[1] + yaw.output;
 8002564:	4b9e      	ldr	r3, [pc, #632]	@ (80027e0 <StartMovementTask+0x6b4>)
 8002566:	685a      	ldr	r2, [r3, #4]
 8002568:	4b9d      	ldr	r3, [pc, #628]	@ (80027e0 <StartMovementTask+0x6b4>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	ee07 3a90 	vmov	s15, r3
 8002572:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002576:	4b9b      	ldr	r3, [pc, #620]	@ (80027e4 <StartMovementTask+0x6b8>)
 8002578:	edd3 7a04 	vldr	s15, [r3, #16]
 800257c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002580:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002584:	ee17 2a90 	vmov	r2, s15
 8002588:	4b9a      	ldr	r3, [pc, #616]	@ (80027f4 <StartMovementTask+0x6c8>)
 800258a:	601a      	str	r2, [r3, #0]

			//Vertical Thruster    Up/Down  |||   Pitch     |||   Roll
			V_FR = +depth.output - pitch.output - roll.output;
 800258c:	4b9a      	ldr	r3, [pc, #616]	@ (80027f8 <StartMovementTask+0x6cc>)
 800258e:	ed93 7a04 	vldr	s14, [r3, #16]
 8002592:	4b9a      	ldr	r3, [pc, #616]	@ (80027fc <StartMovementTask+0x6d0>)
 8002594:	edd3 7a04 	vldr	s15, [r3, #16]
 8002598:	ee37 7a67 	vsub.f32	s14, s14, s15
 800259c:	4b98      	ldr	r3, [pc, #608]	@ (8002800 <StartMovementTask+0x6d4>)
 800259e:	edd3 7a04 	vldr	s15, [r3, #16]
 80025a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025aa:	ee17 2a90 	vmov	r2, s15
 80025ae:	4b95      	ldr	r3, [pc, #596]	@ (8002804 <StartMovementTask+0x6d8>)
 80025b0:	601a      	str	r2, [r3, #0]
			V_FL = +depth.output - pitch.output + roll.output;
 80025b2:	4b91      	ldr	r3, [pc, #580]	@ (80027f8 <StartMovementTask+0x6cc>)
 80025b4:	ed93 7a04 	vldr	s14, [r3, #16]
 80025b8:	4b90      	ldr	r3, [pc, #576]	@ (80027fc <StartMovementTask+0x6d0>)
 80025ba:	edd3 7a04 	vldr	s15, [r3, #16]
 80025be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025c2:	4b8f      	ldr	r3, [pc, #572]	@ (8002800 <StartMovementTask+0x6d4>)
 80025c4:	edd3 7a04 	vldr	s15, [r3, #16]
 80025c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025d0:	ee17 2a90 	vmov	r2, s15
 80025d4:	4b8c      	ldr	r3, [pc, #560]	@ (8002808 <StartMovementTask+0x6dc>)
 80025d6:	601a      	str	r2, [r3, #0]
			V_BR = +depth.output + pitch.output - roll.output;
 80025d8:	4b87      	ldr	r3, [pc, #540]	@ (80027f8 <StartMovementTask+0x6cc>)
 80025da:	ed93 7a04 	vldr	s14, [r3, #16]
 80025de:	4b87      	ldr	r3, [pc, #540]	@ (80027fc <StartMovementTask+0x6d0>)
 80025e0:	edd3 7a04 	vldr	s15, [r3, #16]
 80025e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025e8:	4b85      	ldr	r3, [pc, #532]	@ (8002800 <StartMovementTask+0x6d4>)
 80025ea:	edd3 7a04 	vldr	s15, [r3, #16]
 80025ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025f6:	ee17 2a90 	vmov	r2, s15
 80025fa:	4b84      	ldr	r3, [pc, #528]	@ (800280c <StartMovementTask+0x6e0>)
 80025fc:	601a      	str	r2, [r3, #0]
			V_BL = +depth.output + pitch.output + roll.output;
 80025fe:	4b7e      	ldr	r3, [pc, #504]	@ (80027f8 <StartMovementTask+0x6cc>)
 8002600:	ed93 7a04 	vldr	s14, [r3, #16]
 8002604:	4b7d      	ldr	r3, [pc, #500]	@ (80027fc <StartMovementTask+0x6d0>)
 8002606:	edd3 7a04 	vldr	s15, [r3, #16]
 800260a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800260e:	4b7c      	ldr	r3, [pc, #496]	@ (8002800 <StartMovementTask+0x6d4>)
 8002610:	edd3 7a04 	vldr	s15, [r3, #16]
 8002614:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002618:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800261c:	ee17 2a90 	vmov	r2, s15
 8002620:	4b7b      	ldr	r3, [pc, #492]	@ (8002810 <StartMovementTask+0x6e4>)
 8002622:	601a      	str	r2, [r3, #0]
		}

		HorizontalMax = fmax(fmax(abs(H_FR), abs(H_FL)),fmax(abs(H_BR), abs(H_BL)));
 8002624:	4b70      	ldr	r3, [pc, #448]	@ (80027e8 <StartMovementTask+0x6bc>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	bfb8      	it	lt
 800262c:	425b      	neglt	r3, r3
 800262e:	4618      	mov	r0, r3
 8002630:	f7fd ff20 	bl	8000474 <__aeabi_i2d>
 8002634:	4604      	mov	r4, r0
 8002636:	460d      	mov	r5, r1
 8002638:	4b6c      	ldr	r3, [pc, #432]	@ (80027ec <StartMovementTask+0x6c0>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	bfb8      	it	lt
 8002640:	425b      	neglt	r3, r3
 8002642:	4618      	mov	r0, r3
 8002644:	f7fd ff16 	bl	8000474 <__aeabi_i2d>
 8002648:	4602      	mov	r2, r0
 800264a:	460b      	mov	r3, r1
 800264c:	ec43 2b11 	vmov	d1, r2, r3
 8002650:	ec45 4b10 	vmov	d0, r4, r5
 8002654:	f00d f948 	bl	800f8e8 <fmax>
 8002658:	eeb0 8a40 	vmov.f32	s16, s0
 800265c:	eef0 8a60 	vmov.f32	s17, s1
 8002660:	4b63      	ldr	r3, [pc, #396]	@ (80027f0 <StartMovementTask+0x6c4>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2b00      	cmp	r3, #0
 8002666:	bfb8      	it	lt
 8002668:	425b      	neglt	r3, r3
 800266a:	4618      	mov	r0, r3
 800266c:	f7fd ff02 	bl	8000474 <__aeabi_i2d>
 8002670:	4604      	mov	r4, r0
 8002672:	460d      	mov	r5, r1
 8002674:	4b5f      	ldr	r3, [pc, #380]	@ (80027f4 <StartMovementTask+0x6c8>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	bfb8      	it	lt
 800267c:	425b      	neglt	r3, r3
 800267e:	4618      	mov	r0, r3
 8002680:	f7fd fef8 	bl	8000474 <__aeabi_i2d>
 8002684:	4602      	mov	r2, r0
 8002686:	460b      	mov	r3, r1
 8002688:	ec43 2b11 	vmov	d1, r2, r3
 800268c:	ec45 4b10 	vmov	d0, r4, r5
 8002690:	f00d f92a 	bl	800f8e8 <fmax>
 8002694:	eeb0 7a40 	vmov.f32	s14, s0
 8002698:	eef0 7a60 	vmov.f32	s15, s1
 800269c:	eeb0 1a47 	vmov.f32	s2, s14
 80026a0:	eef0 1a67 	vmov.f32	s3, s15
 80026a4:	eeb0 0a48 	vmov.f32	s0, s16
 80026a8:	eef0 0a68 	vmov.f32	s1, s17
 80026ac:	f00d f91c 	bl	800f8e8 <fmax>
 80026b0:	ec53 2b10 	vmov	r2, r3, d0
 80026b4:	4610      	mov	r0, r2
 80026b6:	4619      	mov	r1, r3
 80026b8:	f7fe f9e0 	bl	8000a7c <__aeabi_d2iz>
 80026bc:	4603      	mov	r3, r0
 80026be:	4a55      	ldr	r2, [pc, #340]	@ (8002814 <StartMovementTask+0x6e8>)
 80026c0:	6013      	str	r3, [r2, #0]
		VerticalMax = fmax(fmax(abs(V_FR), abs(V_FL)),fmax(abs(V_BR), abs(V_BL)));
 80026c2:	4b50      	ldr	r3, [pc, #320]	@ (8002804 <StartMovementTask+0x6d8>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	bfb8      	it	lt
 80026ca:	425b      	neglt	r3, r3
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7fd fed1 	bl	8000474 <__aeabi_i2d>
 80026d2:	4604      	mov	r4, r0
 80026d4:	460d      	mov	r5, r1
 80026d6:	4b4c      	ldr	r3, [pc, #304]	@ (8002808 <StartMovementTask+0x6dc>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	bfb8      	it	lt
 80026de:	425b      	neglt	r3, r3
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7fd fec7 	bl	8000474 <__aeabi_i2d>
 80026e6:	4602      	mov	r2, r0
 80026e8:	460b      	mov	r3, r1
 80026ea:	ec43 2b11 	vmov	d1, r2, r3
 80026ee:	ec45 4b10 	vmov	d0, r4, r5
 80026f2:	f00d f8f9 	bl	800f8e8 <fmax>
 80026f6:	eeb0 8a40 	vmov.f32	s16, s0
 80026fa:	eef0 8a60 	vmov.f32	s17, s1
 80026fe:	4b43      	ldr	r3, [pc, #268]	@ (800280c <StartMovementTask+0x6e0>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2b00      	cmp	r3, #0
 8002704:	bfb8      	it	lt
 8002706:	425b      	neglt	r3, r3
 8002708:	4618      	mov	r0, r3
 800270a:	f7fd feb3 	bl	8000474 <__aeabi_i2d>
 800270e:	4604      	mov	r4, r0
 8002710:	460d      	mov	r5, r1
 8002712:	4b3f      	ldr	r3, [pc, #252]	@ (8002810 <StartMovementTask+0x6e4>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2b00      	cmp	r3, #0
 8002718:	bfb8      	it	lt
 800271a:	425b      	neglt	r3, r3
 800271c:	4618      	mov	r0, r3
 800271e:	f7fd fea9 	bl	8000474 <__aeabi_i2d>
 8002722:	4602      	mov	r2, r0
 8002724:	460b      	mov	r3, r1
 8002726:	ec43 2b11 	vmov	d1, r2, r3
 800272a:	ec45 4b10 	vmov	d0, r4, r5
 800272e:	f00d f8db 	bl	800f8e8 <fmax>
 8002732:	eeb0 7a40 	vmov.f32	s14, s0
 8002736:	eef0 7a60 	vmov.f32	s15, s1
 800273a:	eeb0 1a47 	vmov.f32	s2, s14
 800273e:	eef0 1a67 	vmov.f32	s3, s15
 8002742:	eeb0 0a48 	vmov.f32	s0, s16
 8002746:	eef0 0a68 	vmov.f32	s1, s17
 800274a:	f00d f8cd 	bl	800f8e8 <fmax>
 800274e:	ec53 2b10 	vmov	r2, r3, d0
 8002752:	4610      	mov	r0, r2
 8002754:	4619      	mov	r1, r3
 8002756:	f7fe f991 	bl	8000a7c <__aeabi_d2iz>
 800275a:	4603      	mov	r3, r0
 800275c:	4a2e      	ldr	r2, [pc, #184]	@ (8002818 <StartMovementTask+0x6ec>)
 800275e:	6013      	str	r3, [r2, #0]

		if (HorizontalMax > 500) {
 8002760:	4b2c      	ldr	r3, [pc, #176]	@ (8002814 <StartMovementTask+0x6e8>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8002768:	dd1f      	ble.n	80027aa <StartMovementTask+0x67e>
			H_FR = H_FR / HorizontalMax;
 800276a:	4b1f      	ldr	r3, [pc, #124]	@ (80027e8 <StartMovementTask+0x6bc>)
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	4b29      	ldr	r3, [pc, #164]	@ (8002814 <StartMovementTask+0x6e8>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	fb92 f3f3 	sdiv	r3, r2, r3
 8002776:	4a1c      	ldr	r2, [pc, #112]	@ (80027e8 <StartMovementTask+0x6bc>)
 8002778:	6013      	str	r3, [r2, #0]
			H_FL = H_FL / HorizontalMax;
 800277a:	4b1c      	ldr	r3, [pc, #112]	@ (80027ec <StartMovementTask+0x6c0>)
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	4b25      	ldr	r3, [pc, #148]	@ (8002814 <StartMovementTask+0x6e8>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	fb92 f3f3 	sdiv	r3, r2, r3
 8002786:	4a19      	ldr	r2, [pc, #100]	@ (80027ec <StartMovementTask+0x6c0>)
 8002788:	6013      	str	r3, [r2, #0]
			H_BR = H_BR / HorizontalMax;
 800278a:	4b19      	ldr	r3, [pc, #100]	@ (80027f0 <StartMovementTask+0x6c4>)
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	4b21      	ldr	r3, [pc, #132]	@ (8002814 <StartMovementTask+0x6e8>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	fb92 f3f3 	sdiv	r3, r2, r3
 8002796:	4a16      	ldr	r2, [pc, #88]	@ (80027f0 <StartMovementTask+0x6c4>)
 8002798:	6013      	str	r3, [r2, #0]
			H_BL = H_BL / HorizontalMax;
 800279a:	4b16      	ldr	r3, [pc, #88]	@ (80027f4 <StartMovementTask+0x6c8>)
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	4b1d      	ldr	r3, [pc, #116]	@ (8002814 <StartMovementTask+0x6e8>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	fb92 f3f3 	sdiv	r3, r2, r3
 80027a6:	4a13      	ldr	r2, [pc, #76]	@ (80027f4 <StartMovementTask+0x6c8>)
 80027a8:	6013      	str	r3, [r2, #0]
		}

		if (VerticalMax > 500) {
 80027aa:	4b1b      	ldr	r3, [pc, #108]	@ (8002818 <StartMovementTask+0x6ec>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80027b2:	dd41      	ble.n	8002838 <StartMovementTask+0x70c>
			V_FR = V_FR / VerticalMax;
 80027b4:	4b13      	ldr	r3, [pc, #76]	@ (8002804 <StartMovementTask+0x6d8>)
 80027b6:	681a      	ldr	r2, [r3, #0]
 80027b8:	4b17      	ldr	r3, [pc, #92]	@ (8002818 <StartMovementTask+0x6ec>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80027c0:	4a10      	ldr	r2, [pc, #64]	@ (8002804 <StartMovementTask+0x6d8>)
 80027c2:	6013      	str	r3, [r2, #0]
			V_FL = V_FL / VerticalMax;
 80027c4:	4b10      	ldr	r3, [pc, #64]	@ (8002808 <StartMovementTask+0x6dc>)
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	4b13      	ldr	r3, [pc, #76]	@ (8002818 <StartMovementTask+0x6ec>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80027d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002808 <StartMovementTask+0x6dc>)
 80027d2:	6013      	str	r3, [r2, #0]
			V_BR = V_BR / VerticalMax;
 80027d4:	4b0d      	ldr	r3, [pc, #52]	@ (800280c <StartMovementTask+0x6e0>)
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	e020      	b.n	800281c <StartMovementTask+0x6f0>
 80027da:	bf00      	nop
 80027dc:	200009a8 	.word	0x200009a8
 80027e0:	20000978 	.word	0x20000978
 80027e4:	20000a74 	.word	0x20000a74
 80027e8:	20000b1c 	.word	0x20000b1c
 80027ec:	20000b20 	.word	0x20000b20
 80027f0:	20000b24 	.word	0x20000b24
 80027f4:	20000b28 	.word	0x20000b28
 80027f8:	20000aec 	.word	0x20000aec
 80027fc:	20000a9c 	.word	0x20000a9c
 8002800:	20000ac4 	.word	0x20000ac4
 8002804:	20000b2c 	.word	0x20000b2c
 8002808:	20000b30 	.word	0x20000b30
 800280c:	20000b34 	.word	0x20000b34
 8002810:	20000b38 	.word	0x20000b38
 8002814:	20000b14 	.word	0x20000b14
 8002818:	20000b18 	.word	0x20000b18
 800281c:	4b5d      	ldr	r3, [pc, #372]	@ (8002994 <StartMovementTask+0x868>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	fb92 f3f3 	sdiv	r3, r2, r3
 8002824:	4a5c      	ldr	r2, [pc, #368]	@ (8002998 <StartMovementTask+0x86c>)
 8002826:	6013      	str	r3, [r2, #0]
			V_BL = V_BL / VerticalMax;
 8002828:	4b5c      	ldr	r3, [pc, #368]	@ (800299c <StartMovementTask+0x870>)
 800282a:	681a      	ldr	r2, [r3, #0]
 800282c:	4b59      	ldr	r3, [pc, #356]	@ (8002994 <StartMovementTask+0x868>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	fb92 f3f3 	sdiv	r3, r2, r3
 8002834:	4a59      	ldr	r2, [pc, #356]	@ (800299c <StartMovementTask+0x870>)
 8002836:	6013      	str	r3, [r2, #0]
		}

		H_FR = H_FR + pwmCenter + H_FRoffset;
 8002838:	4b59      	ldr	r3, [pc, #356]	@ (80029a0 <StartMovementTask+0x874>)
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	4b59      	ldr	r3, [pc, #356]	@ (80029a4 <StartMovementTask+0x878>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	441a      	add	r2, r3
 8002842:	4b59      	ldr	r3, [pc, #356]	@ (80029a8 <StartMovementTask+0x87c>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4413      	add	r3, r2
 8002848:	4a55      	ldr	r2, [pc, #340]	@ (80029a0 <StartMovementTask+0x874>)
 800284a:	6013      	str	r3, [r2, #0]
		H_FL = H_FL + pwmCenter + H_FLoffset;
 800284c:	4b57      	ldr	r3, [pc, #348]	@ (80029ac <StartMovementTask+0x880>)
 800284e:	681a      	ldr	r2, [r3, #0]
 8002850:	4b54      	ldr	r3, [pc, #336]	@ (80029a4 <StartMovementTask+0x878>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	441a      	add	r2, r3
 8002856:	4b56      	ldr	r3, [pc, #344]	@ (80029b0 <StartMovementTask+0x884>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4413      	add	r3, r2
 800285c:	4a53      	ldr	r2, [pc, #332]	@ (80029ac <StartMovementTask+0x880>)
 800285e:	6013      	str	r3, [r2, #0]
		H_BR = H_BR + pwmCenter + H_FRoffset;
 8002860:	4b54      	ldr	r3, [pc, #336]	@ (80029b4 <StartMovementTask+0x888>)
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	4b4f      	ldr	r3, [pc, #316]	@ (80029a4 <StartMovementTask+0x878>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	441a      	add	r2, r3
 800286a:	4b4f      	ldr	r3, [pc, #316]	@ (80029a8 <StartMovementTask+0x87c>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4413      	add	r3, r2
 8002870:	4a50      	ldr	r2, [pc, #320]	@ (80029b4 <StartMovementTask+0x888>)
 8002872:	6013      	str	r3, [r2, #0]
		H_BL = H_BL + pwmCenter + H_BLoffset;
 8002874:	4b50      	ldr	r3, [pc, #320]	@ (80029b8 <StartMovementTask+0x88c>)
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	4b4a      	ldr	r3, [pc, #296]	@ (80029a4 <StartMovementTask+0x878>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	441a      	add	r2, r3
 800287e:	4b4f      	ldr	r3, [pc, #316]	@ (80029bc <StartMovementTask+0x890>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4413      	add	r3, r2
 8002884:	4a4c      	ldr	r2, [pc, #304]	@ (80029b8 <StartMovementTask+0x88c>)
 8002886:	6013      	str	r3, [r2, #0]
		V_FR = V_FR + pwmCenter + V_FRoffset;
 8002888:	4b4d      	ldr	r3, [pc, #308]	@ (80029c0 <StartMovementTask+0x894>)
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	4b45      	ldr	r3, [pc, #276]	@ (80029a4 <StartMovementTask+0x878>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	441a      	add	r2, r3
 8002892:	4b4c      	ldr	r3, [pc, #304]	@ (80029c4 <StartMovementTask+0x898>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4413      	add	r3, r2
 8002898:	4a49      	ldr	r2, [pc, #292]	@ (80029c0 <StartMovementTask+0x894>)
 800289a:	6013      	str	r3, [r2, #0]
		V_FL = V_FL + pwmCenter + V_FLoffset;
 800289c:	4b4a      	ldr	r3, [pc, #296]	@ (80029c8 <StartMovementTask+0x89c>)
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	4b40      	ldr	r3, [pc, #256]	@ (80029a4 <StartMovementTask+0x878>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	441a      	add	r2, r3
 80028a6:	4b49      	ldr	r3, [pc, #292]	@ (80029cc <StartMovementTask+0x8a0>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4413      	add	r3, r2
 80028ac:	4a46      	ldr	r2, [pc, #280]	@ (80029c8 <StartMovementTask+0x89c>)
 80028ae:	6013      	str	r3, [r2, #0]
		V_BR = V_BR + pwmCenter + V_BRoffset;
 80028b0:	4b39      	ldr	r3, [pc, #228]	@ (8002998 <StartMovementTask+0x86c>)
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	4b3b      	ldr	r3, [pc, #236]	@ (80029a4 <StartMovementTask+0x878>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	441a      	add	r2, r3
 80028ba:	4b45      	ldr	r3, [pc, #276]	@ (80029d0 <StartMovementTask+0x8a4>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4413      	add	r3, r2
 80028c0:	4a35      	ldr	r2, [pc, #212]	@ (8002998 <StartMovementTask+0x86c>)
 80028c2:	6013      	str	r3, [r2, #0]
		V_BL = V_BL + pwmCenter + V_BLoffset;
 80028c4:	4b35      	ldr	r3, [pc, #212]	@ (800299c <StartMovementTask+0x870>)
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	4b36      	ldr	r3, [pc, #216]	@ (80029a4 <StartMovementTask+0x878>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	441a      	add	r2, r3
 80028ce:	4b41      	ldr	r3, [pc, #260]	@ (80029d4 <StartMovementTask+0x8a8>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4413      	add	r3, r2
 80028d4:	4a31      	ldr	r2, [pc, #196]	@ (800299c <StartMovementTask+0x870>)
 80028d6:	6013      	str	r3, [r2, #0]

		//Send to ESC
		send_H_FR = H_FR;
 80028d8:	4b31      	ldr	r3, [pc, #196]	@ (80029a0 <StartMovementTask+0x874>)
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	4b3e      	ldr	r3, [pc, #248]	@ (80029d8 <StartMovementTask+0x8ac>)
 80028de:	639a      	str	r2, [r3, #56]	@ 0x38
		send_H_FL = H_FL;
 80028e0:	4b32      	ldr	r3, [pc, #200]	@ (80029ac <StartMovementTask+0x880>)
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	4b3c      	ldr	r3, [pc, #240]	@ (80029d8 <StartMovementTask+0x8ac>)
 80028e6:	641a      	str	r2, [r3, #64]	@ 0x40
		send_H_BR = H_BR;
 80028e8:	4b32      	ldr	r3, [pc, #200]	@ (80029b4 <StartMovementTask+0x888>)
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	4b3a      	ldr	r3, [pc, #232]	@ (80029d8 <StartMovementTask+0x8ac>)
 80028ee:	635a      	str	r2, [r3, #52]	@ 0x34
		send_H_BL = H_BL;
 80028f0:	4b31      	ldr	r3, [pc, #196]	@ (80029b8 <StartMovementTask+0x88c>)
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	4b38      	ldr	r3, [pc, #224]	@ (80029d8 <StartMovementTask+0x8ac>)
 80028f6:	63da      	str	r2, [r3, #60]	@ 0x3c
		send_V_FR = V_FR;
 80028f8:	4b31      	ldr	r3, [pc, #196]	@ (80029c0 <StartMovementTask+0x894>)
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	4b37      	ldr	r3, [pc, #220]	@ (80029dc <StartMovementTask+0x8b0>)
 80028fe:	635a      	str	r2, [r3, #52]	@ 0x34
		send_V_FL = V_FL;
 8002900:	4b31      	ldr	r3, [pc, #196]	@ (80029c8 <StartMovementTask+0x89c>)
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	4b35      	ldr	r3, [pc, #212]	@ (80029dc <StartMovementTask+0x8b0>)
 8002906:	641a      	str	r2, [r3, #64]	@ 0x40
		send_V_BR = V_BR;
 8002908:	4b23      	ldr	r3, [pc, #140]	@ (8002998 <StartMovementTask+0x86c>)
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	4b33      	ldr	r3, [pc, #204]	@ (80029dc <StartMovementTask+0x8b0>)
 800290e:	63da      	str	r2, [r3, #60]	@ 0x3c
		send_V_BL = V_BL;
 8002910:	4b22      	ldr	r3, [pc, #136]	@ (800299c <StartMovementTask+0x870>)
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	4b31      	ldr	r3, [pc, #196]	@ (80029dc <StartMovementTask+0x8b0>)
 8002916:	639a      	str	r2, [r3, #56]	@ 0x38

		//Lumen
		lumen_pwm = map(lumen_power, 0, 100, 1000, 2000);
 8002918:	4b31      	ldr	r3, [pc, #196]	@ (80029e0 <StartMovementTask+0x8b4>)
 800291a:	6818      	ldr	r0, [r3, #0]
 800291c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002920:	9300      	str	r3, [sp, #0]
 8002922:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002926:	2264      	movs	r2, #100	@ 0x64
 8002928:	2100      	movs	r1, #0
 800292a:	f7fe fd37 	bl	800139c <map>
 800292e:	4603      	mov	r3, r0
 8002930:	4a2c      	ldr	r2, [pc, #176]	@ (80029e4 <StartMovementTask+0x8b8>)
 8002932:	6013      	str	r3, [r2, #0]
		send_Lumen = lumen_pwm;
 8002934:	4b2b      	ldr	r3, [pc, #172]	@ (80029e4 <StartMovementTask+0x8b8>)
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	4b2b      	ldr	r3, [pc, #172]	@ (80029e8 <StartMovementTask+0x8bc>)
 800293a:	635a      	str	r2, [r3, #52]	@ 0x34

		//Reset IMU
		IMU_resetStatus_new = imu_reset;
 800293c:	4b2b      	ldr	r3, [pc, #172]	@ (80029ec <StartMovementTask+0x8c0>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a2b      	ldr	r2, [pc, #172]	@ (80029f0 <StartMovementTask+0x8c4>)
 8002942:	6013      	str	r3, [r2, #0]
		if (IMU_resetStatus_new == 1 && IMU_resetStatus_old == 0) {
 8002944:	4b2a      	ldr	r3, [pc, #168]	@ (80029f0 <StartMovementTask+0x8c4>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d119      	bne.n	8002980 <StartMovementTask+0x854>
 800294c:	4b29      	ldr	r3, [pc, #164]	@ (80029f4 <StartMovementTask+0x8c8>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d115      	bne.n	8002980 <StartMovementTask+0x854>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, RESET);
 8002954:	2200      	movs	r2, #0
 8002956:	2104      	movs	r1, #4
 8002958:	4827      	ldr	r0, [pc, #156]	@ (80029f8 <StartMovementTask+0x8cc>)
 800295a:	f002 fc11 	bl	8005180 <HAL_GPIO_WritePin>
			IMUStatus = "Resetting..";
 800295e:	4b27      	ldr	r3, [pc, #156]	@ (80029fc <StartMovementTask+0x8d0>)
 8002960:	4a27      	ldr	r2, [pc, #156]	@ (8002a00 <StartMovementTask+0x8d4>)
 8002962:	601a      	str	r2, [r3, #0]
			led_status = 1;
 8002964:	4b27      	ldr	r3, [pc, #156]	@ (8002a04 <StartMovementTask+0x8d8>)
 8002966:	2201      	movs	r2, #1
 8002968:	701a      	strb	r2, [r3, #0]
			osDelay(200);
 800296a:	20c8      	movs	r0, #200	@ 0xc8
 800296c:	f00b f861 	bl	800da32 <osDelay>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, SET);
 8002970:	2201      	movs	r2, #1
 8002972:	2104      	movs	r1, #4
 8002974:	4820      	ldr	r0, [pc, #128]	@ (80029f8 <StartMovementTask+0x8cc>)
 8002976:	f002 fc03 	bl	8005180 <HAL_GPIO_WritePin>
			IMUStatus = "Running..";
 800297a:	4b20      	ldr	r3, [pc, #128]	@ (80029fc <StartMovementTask+0x8d0>)
 800297c:	4a22      	ldr	r2, [pc, #136]	@ (8002a08 <StartMovementTask+0x8dc>)
 800297e:	601a      	str	r2, [r3, #0]
		}
		IMU_resetStatus_old = IMU_resetStatus_new;
 8002980:	4b1b      	ldr	r3, [pc, #108]	@ (80029f0 <StartMovementTask+0x8c4>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a1b      	ldr	r2, [pc, #108]	@ (80029f4 <StartMovementTask+0x8c8>)
 8002986:	6013      	str	r3, [r2, #0]

    osDelay(1);
 8002988:	2001      	movs	r0, #1
 800298a:	f00b f852 	bl	800da32 <osDelay>
		if (movement_mode == 0) { // Fully Manual
 800298e:	f7ff bbd3 	b.w	8002138 <StartMovementTask+0xc>
 8002992:	bf00      	nop
 8002994:	20000b18 	.word	0x20000b18
 8002998:	20000b34 	.word	0x20000b34
 800299c:	20000b38 	.word	0x20000b38
 80029a0:	20000b1c 	.word	0x20000b1c
 80029a4:	20000010 	.word	0x20000010
 80029a8:	20000014 	.word	0x20000014
 80029ac:	20000b20 	.word	0x20000b20
 80029b0:	20000018 	.word	0x20000018
 80029b4:	20000b24 	.word	0x20000b24
 80029b8:	20000b28 	.word	0x20000b28
 80029bc:	2000001c 	.word	0x2000001c
 80029c0:	20000b2c 	.word	0x20000b2c
 80029c4:	20000020 	.word	0x20000020
 80029c8:	20000b30 	.word	0x20000b30
 80029cc:	20000024 	.word	0x20000024
 80029d0:	20000028 	.word	0x20000028
 80029d4:	2000002c 	.word	0x2000002c
 80029d8:	40000800 	.word	0x40000800
 80029dc:	40000c00 	.word	0x40000c00
 80029e0:	200009a4 	.word	0x200009a4
 80029e4:	20000b4c 	.word	0x20000b4c
 80029e8:	40014000 	.word	0x40014000
 80029ec:	200009b8 	.word	0x200009b8
 80029f0:	20000a38 	.word	0x20000a38
 80029f4:	20000a3c 	.word	0x20000a3c
 80029f8:	40020800 	.word	0x40020800
 80029fc:	20000008 	.word	0x20000008
 8002a00:	0800fa88 	.word	0x0800fa88
 8002a04:	20000b54 	.word	0x20000b54
 8002a08:	0800f9a8 	.word	0x0800f9a8

08002a0c <StartGetPressureTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGetPressureTask */
void StartGetPressureTask(void const * argument)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b088      	sub	sp, #32
 8002a10:	af04      	add	r7, sp, #16
 8002a12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGetPressureTask */

	// check sensor status
	MS5803_status = MS58xx_reset(&hi2c1, MS5803_address);
 8002a14:	4b41      	ldr	r3, [pc, #260]	@ (8002b1c <StartGetPressureTask+0x110>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4841      	ldr	r0, [pc, #260]	@ (8002b20 <StartGetPressureTask+0x114>)
 8002a1c:	f000 fb14 	bl	8003048 <MS58xx_reset>
 8002a20:	4603      	mov	r3, r0
 8002a22:	461a      	mov	r2, r3
 8002a24:	4b3f      	ldr	r3, [pc, #252]	@ (8002b24 <StartGetPressureTask+0x118>)
 8002a26:	701a      	strb	r2, [r3, #0]
	MS5837_status = MS58xx_reset(&hi2c1, MS5837_address);
 8002a28:	4b3f      	ldr	r3, [pc, #252]	@ (8002b28 <StartGetPressureTask+0x11c>)
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	483c      	ldr	r0, [pc, #240]	@ (8002b20 <StartGetPressureTask+0x114>)
 8002a30:	f000 fb0a 	bl	8003048 <MS58xx_reset>
 8002a34:	4603      	mov	r3, r0
 8002a36:	461a      	mov	r2, r3
 8002a38:	4b3c      	ldr	r3, [pc, #240]	@ (8002b2c <StartGetPressureTask+0x120>)
 8002a3a:	701a      	strb	r2, [r3, #0]

	// Initialize MS5803 sensor if attached
	if (MS5803_status == HAL_OK) {
 8002a3c:	4b39      	ldr	r3, [pc, #228]	@ (8002b24 <StartGetPressureTask+0x118>)
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d115      	bne.n	8002a70 <StartGetPressureTask+0x64>
		for (int i = 0; i < 6; i++) {
 8002a44:	2300      	movs	r3, #0
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	e00f      	b.n	8002a6a <StartGetPressureTask+0x5e>
			MS58xx_coeff(&hi2c1, &MS5803_coefficient[i], MS5803_address, i + 1);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	4a38      	ldr	r2, [pc, #224]	@ (8002b30 <StartGetPressureTask+0x124>)
 8002a50:	1899      	adds	r1, r3, r2
 8002a52:	4b32      	ldr	r3, [pc, #200]	@ (8002b1c <StartGetPressureTask+0x110>)
 8002a54:	781a      	ldrb	r2, [r3, #0]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	b2db      	uxtb	r3, r3
 8002a5a:	3301      	adds	r3, #1
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	4830      	ldr	r0, [pc, #192]	@ (8002b20 <StartGetPressureTask+0x114>)
 8002a60:	f000 fb11 	bl	8003086 <MS58xx_coeff>
		for (int i = 0; i < 6; i++) {
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	3301      	adds	r3, #1
 8002a68:	60fb      	str	r3, [r7, #12]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2b05      	cmp	r3, #5
 8002a6e:	ddec      	ble.n	8002a4a <StartGetPressureTask+0x3e>
		}
	}

	// Initialize MS5837 sensor if attached
	if (MS5837_status == HAL_OK) {
 8002a70:	4b2e      	ldr	r3, [pc, #184]	@ (8002b2c <StartGetPressureTask+0x120>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d000      	beq.n	8002a7a <StartGetPressureTask+0x6e>
 8002a78:	e015      	b.n	8002aa6 <StartGetPressureTask+0x9a>
		for (int i = 0; i < 6; i++) {
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	60bb      	str	r3, [r7, #8]
 8002a7e:	e00f      	b.n	8002aa0 <StartGetPressureTask+0x94>
			MS58xx_coeff(&hi2c1, &MS5837_coefficient[i], MS5837_address, i + 1);
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	4a2b      	ldr	r2, [pc, #172]	@ (8002b34 <StartGetPressureTask+0x128>)
 8002a86:	1899      	adds	r1, r3, r2
 8002a88:	4b27      	ldr	r3, [pc, #156]	@ (8002b28 <StartGetPressureTask+0x11c>)
 8002a8a:	781a      	ldrb	r2, [r3, #0]
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	3301      	adds	r3, #1
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	4822      	ldr	r0, [pc, #136]	@ (8002b20 <StartGetPressureTask+0x114>)
 8002a96:	f000 faf6 	bl	8003086 <MS58xx_coeff>
		for (int i = 0; i < 6; i++) {
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	60bb      	str	r3, [r7, #8]
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	2b05      	cmp	r3, #5
 8002aa4:	ddec      	ble.n	8002a80 <StartGetPressureTask+0x74>
	}

  /* Infinite loop */
  for(;;)
  {
		if (MS5803_status  == HAL_OK ) {
 8002aa6:	4b1f      	ldr	r3, [pc, #124]	@ (8002b24 <StartGetPressureTask+0x118>)
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d10c      	bne.n	8002ac8 <StartGetPressureTask+0xbc>
			MS58xx_get_values(&hi2c1, ADC_4096, MS5803_coefficient,
 8002aae:	4b1b      	ldr	r3, [pc, #108]	@ (8002b1c <StartGetPressureTask+0x110>)
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	9202      	str	r2, [sp, #8]
 8002ab6:	9301      	str	r3, [sp, #4]
 8002ab8:	4b1f      	ldr	r3, [pc, #124]	@ (8002b38 <StartGetPressureTask+0x12c>)
 8002aba:	9300      	str	r3, [sp, #0]
 8002abc:	4b1f      	ldr	r3, [pc, #124]	@ (8002b3c <StartGetPressureTask+0x130>)
 8002abe:	4a1c      	ldr	r2, [pc, #112]	@ (8002b30 <StartGetPressureTask+0x124>)
 8002ac0:	2108      	movs	r1, #8
 8002ac2:	4817      	ldr	r0, [pc, #92]	@ (8002b20 <StartGetPressureTask+0x114>)
 8002ac4:	f000 fb80 	bl	80031c8 <MS58xx_get_values>
					&MS5803_temperature, &MS5803_pressure, MS5803_address, MS5803);
		}

		if (MS5837_status  == HAL_OK ) {
 8002ac8:	4b18      	ldr	r3, [pc, #96]	@ (8002b2c <StartGetPressureTask+0x120>)
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d10c      	bne.n	8002aea <StartGetPressureTask+0xde>
			MS58xx_get_values(&hi2c1, ADC_4096, MS5837_coefficient,
 8002ad0:	4b15      	ldr	r3, [pc, #84]	@ (8002b28 <StartGetPressureTask+0x11c>)
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	2202      	movs	r2, #2
 8002ad6:	9202      	str	r2, [sp, #8]
 8002ad8:	9301      	str	r3, [sp, #4]
 8002ada:	4b19      	ldr	r3, [pc, #100]	@ (8002b40 <StartGetPressureTask+0x134>)
 8002adc:	9300      	str	r3, [sp, #0]
 8002ade:	4b19      	ldr	r3, [pc, #100]	@ (8002b44 <StartGetPressureTask+0x138>)
 8002ae0:	4a14      	ldr	r2, [pc, #80]	@ (8002b34 <StartGetPressureTask+0x128>)
 8002ae2:	2108      	movs	r1, #8
 8002ae4:	480e      	ldr	r0, [pc, #56]	@ (8002b20 <StartGetPressureTask+0x114>)
 8002ae6:	f000 fb6f 	bl	80031c8 <MS58xx_get_values>
					&MS5837_temperature, &MS5837_pressure, MS5837_address,MS5837);
		}

		//pressure(Bar)
		pressureInside = MS5803_pressure / 1000;
 8002aea:	4b13      	ldr	r3, [pc, #76]	@ (8002b38 <StartGetPressureTask+0x12c>)
 8002aec:	ed93 7a00 	vldr	s14, [r3]
 8002af0:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8002b48 <StartGetPressureTask+0x13c>
 8002af4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002af8:	4b14      	ldr	r3, [pc, #80]	@ (8002b4c <StartGetPressureTask+0x140>)
 8002afa:	edc3 7a00 	vstr	s15, [r3]
		//depth(cm) = pressure(mbar) / (water density(kg/m3) * gravity(m/s2) * 10)
		depthValue = MS5837_pressure / (9.81 * 1000.0);
 8002afe:	4b10      	ldr	r3, [pc, #64]	@ (8002b40 <StartGetPressureTask+0x134>)
 8002b00:	ed93 7a00 	vldr	s14, [r3]
 8002b04:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8002b50 <StartGetPressureTask+0x144>
 8002b08:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b0c:	4b11      	ldr	r3, [pc, #68]	@ (8002b54 <StartGetPressureTask+0x148>)
 8002b0e:	edc3 7a00 	vstr	s15, [r3]

    osDelay(1);
 8002b12:	2001      	movs	r0, #1
 8002b14:	f00a ff8d 	bl	800da32 <osDelay>
		if (MS5803_status  == HAL_OK ) {
 8002b18:	e7c5      	b.n	8002aa6 <StartGetPressureTask+0x9a>
 8002b1a:	bf00      	nop
 8002b1c:	2000000c 	.word	0x2000000c
 8002b20:	20000708 	.word	0x20000708
 8002b24:	20000a40 	.word	0x20000a40
 8002b28:	2000000d 	.word	0x2000000d
 8002b2c:	20000a41 	.word	0x20000a41
 8002b30:	20000a44 	.word	0x20000a44
 8002b34:	20000a50 	.word	0x20000a50
 8002b38:	20000a5c 	.word	0x20000a5c
 8002b3c:	20000a60 	.word	0x20000a60
 8002b40:	20000a64 	.word	0x20000a64
 8002b44:	20000a68 	.word	0x20000a68
 8002b48:	447a0000 	.word	0x447a0000
 8002b4c:	20000a6c 	.word	0x20000a6c
 8002b50:	46194800 	.word	0x46194800
 8002b54:	20000a70 	.word	0x20000a70

08002b58 <StartStroboTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartStroboTask */
void StartStroboTask(void const * argument)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartStroboTask */
  /* Infinite loop */
  for(;;)
  {
		if (led_status == 0) {
 8002b60:	4bd8      	ldr	r3, [pc, #864]	@ (8002ec4 <StartStroboTask+0x36c>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f040 8175 	bne.w	8002e54 <StartStroboTask+0x2fc>
			if (movement_mode == 0) {
 8002b6a:	4bd7      	ldr	r3, [pc, #860]	@ (8002ec8 <StartStroboTask+0x370>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d158      	bne.n	8002c24 <StartStroboTask+0xcc>
				Set_LED(0, 0, 0, 45);
 8002b72:	232d      	movs	r3, #45	@ 0x2d
 8002b74:	2200      	movs	r2, #0
 8002b76:	2100      	movs	r1, #0
 8002b78:	2000      	movs	r0, #0
 8002b7a:	f7fe f9c1 	bl	8000f00 <Set_LED>
				Set_LED(1, 0, 0, 105);
 8002b7e:	2369      	movs	r3, #105	@ 0x69
 8002b80:	2200      	movs	r2, #0
 8002b82:	2100      	movs	r1, #0
 8002b84:	2001      	movs	r0, #1
 8002b86:	f7fe f9bb 	bl	8000f00 <Set_LED>
				Set_LED(2, 0, 0, 105);
 8002b8a:	2369      	movs	r3, #105	@ 0x69
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	2100      	movs	r1, #0
 8002b90:	2002      	movs	r0, #2
 8002b92:	f7fe f9b5 	bl	8000f00 <Set_LED>
				Set_LED(3, 0, 0, 105);
 8002b96:	2369      	movs	r3, #105	@ 0x69
 8002b98:	2200      	movs	r2, #0
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	2003      	movs	r0, #3
 8002b9e:	f7fe f9af 	bl	8000f00 <Set_LED>
				Set_LED(4, 0, 0, 105);
 8002ba2:	2369      	movs	r3, #105	@ 0x69
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	2100      	movs	r1, #0
 8002ba8:	2004      	movs	r0, #4
 8002baa:	f7fe f9a9 	bl	8000f00 <Set_LED>
				Set_LED(5, 0, 0, 105);
 8002bae:	2369      	movs	r3, #105	@ 0x69
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	2100      	movs	r1, #0
 8002bb4:	2005      	movs	r0, #5
 8002bb6:	f7fe f9a3 	bl	8000f00 <Set_LED>
				WS2812_Send(&htim3, TIM_CHANNEL_2, 105);
 8002bba:	2269      	movs	r2, #105	@ 0x69
 8002bbc:	2104      	movs	r1, #4
 8002bbe:	48c3      	ldr	r0, [pc, #780]	@ (8002ecc <StartStroboTask+0x374>)
 8002bc0:	f7fe f9ce 	bl	8000f60 <WS2812_Send>
				osDelay(150);
 8002bc4:	2096      	movs	r0, #150	@ 0x96
 8002bc6:	f00a ff34 	bl	800da32 <osDelay>
				Set_LED(0, 0, 0, 0);
 8002bca:	2300      	movs	r3, #0
 8002bcc:	2200      	movs	r2, #0
 8002bce:	2100      	movs	r1, #0
 8002bd0:	2000      	movs	r0, #0
 8002bd2:	f7fe f995 	bl	8000f00 <Set_LED>
				Set_LED(1, 0, 0, 0);
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	2200      	movs	r2, #0
 8002bda:	2100      	movs	r1, #0
 8002bdc:	2001      	movs	r0, #1
 8002bde:	f7fe f98f 	bl	8000f00 <Set_LED>
				Set_LED(2, 0, 0, 0);
 8002be2:	2300      	movs	r3, #0
 8002be4:	2200      	movs	r2, #0
 8002be6:	2100      	movs	r1, #0
 8002be8:	2002      	movs	r0, #2
 8002bea:	f7fe f989 	bl	8000f00 <Set_LED>
				Set_LED(3, 0, 0, 0);
 8002bee:	2300      	movs	r3, #0
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	2100      	movs	r1, #0
 8002bf4:	2003      	movs	r0, #3
 8002bf6:	f7fe f983 	bl	8000f00 <Set_LED>
				Set_LED(4, 0, 0, 0);
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	2100      	movs	r1, #0
 8002c00:	2004      	movs	r0, #4
 8002c02:	f7fe f97d 	bl	8000f00 <Set_LED>
				Set_LED(5, 0, 0, 0);
 8002c06:	2300      	movs	r3, #0
 8002c08:	2200      	movs	r2, #0
 8002c0a:	2100      	movs	r1, #0
 8002c0c:	2005      	movs	r0, #5
 8002c0e:	f7fe f977 	bl	8000f00 <Set_LED>
				WS2812_Send(&htim3, TIM_CHANNEL_2, 105);
 8002c12:	2269      	movs	r2, #105	@ 0x69
 8002c14:	2104      	movs	r1, #4
 8002c16:	48ad      	ldr	r0, [pc, #692]	@ (8002ecc <StartStroboTask+0x374>)
 8002c18:	f7fe f9a2 	bl	8000f60 <WS2812_Send>
				osDelay(150);
 8002c1c:	2096      	movs	r0, #150	@ 0x96
 8002c1e:	f00a ff08 	bl	800da32 <osDelay>
 8002c22:	e14b      	b.n	8002ebc <StartStroboTask+0x364>
			} else if (movement_mode == 1) {
 8002c24:	4ba8      	ldr	r3, [pc, #672]	@ (8002ec8 <StartStroboTask+0x370>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	2b01      	cmp	r3, #1
 8002c2a:	d158      	bne.n	8002cde <StartStroboTask+0x186>
				Set_LED(0, 30, 0, 30);
 8002c2c:	231e      	movs	r3, #30
 8002c2e:	2200      	movs	r2, #0
 8002c30:	211e      	movs	r1, #30
 8002c32:	2000      	movs	r0, #0
 8002c34:	f7fe f964 	bl	8000f00 <Set_LED>
				Set_LED(1, 255, 0, 255);
 8002c38:	23ff      	movs	r3, #255	@ 0xff
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	21ff      	movs	r1, #255	@ 0xff
 8002c3e:	2001      	movs	r0, #1
 8002c40:	f7fe f95e 	bl	8000f00 <Set_LED>
				Set_LED(2, 255, 0, 255);
 8002c44:	23ff      	movs	r3, #255	@ 0xff
 8002c46:	2200      	movs	r2, #0
 8002c48:	21ff      	movs	r1, #255	@ 0xff
 8002c4a:	2002      	movs	r0, #2
 8002c4c:	f7fe f958 	bl	8000f00 <Set_LED>
				Set_LED(3, 255, 0, 255);
 8002c50:	23ff      	movs	r3, #255	@ 0xff
 8002c52:	2200      	movs	r2, #0
 8002c54:	21ff      	movs	r1, #255	@ 0xff
 8002c56:	2003      	movs	r0, #3
 8002c58:	f7fe f952 	bl	8000f00 <Set_LED>
				Set_LED(4, 255, 0, 255);
 8002c5c:	23ff      	movs	r3, #255	@ 0xff
 8002c5e:	2200      	movs	r2, #0
 8002c60:	21ff      	movs	r1, #255	@ 0xff
 8002c62:	2004      	movs	r0, #4
 8002c64:	f7fe f94c 	bl	8000f00 <Set_LED>
				Set_LED(5, 255, 0, 255);
 8002c68:	23ff      	movs	r3, #255	@ 0xff
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	21ff      	movs	r1, #255	@ 0xff
 8002c6e:	2005      	movs	r0, #5
 8002c70:	f7fe f946 	bl	8000f00 <Set_LED>
				WS2812_Send(&htim3, TIM_CHANNEL_2, 105);
 8002c74:	2269      	movs	r2, #105	@ 0x69
 8002c76:	2104      	movs	r1, #4
 8002c78:	4894      	ldr	r0, [pc, #592]	@ (8002ecc <StartStroboTask+0x374>)
 8002c7a:	f7fe f971 	bl	8000f60 <WS2812_Send>
				osDelay(150);
 8002c7e:	2096      	movs	r0, #150	@ 0x96
 8002c80:	f00a fed7 	bl	800da32 <osDelay>
				Set_LED(0, 0, 0, 0);
 8002c84:	2300      	movs	r3, #0
 8002c86:	2200      	movs	r2, #0
 8002c88:	2100      	movs	r1, #0
 8002c8a:	2000      	movs	r0, #0
 8002c8c:	f7fe f938 	bl	8000f00 <Set_LED>
				Set_LED(1, 0, 0, 0);
 8002c90:	2300      	movs	r3, #0
 8002c92:	2200      	movs	r2, #0
 8002c94:	2100      	movs	r1, #0
 8002c96:	2001      	movs	r0, #1
 8002c98:	f7fe f932 	bl	8000f00 <Set_LED>
				Set_LED(2, 0, 0, 0);
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	2002      	movs	r0, #2
 8002ca4:	f7fe f92c 	bl	8000f00 <Set_LED>
				Set_LED(3, 0, 0, 0);
 8002ca8:	2300      	movs	r3, #0
 8002caa:	2200      	movs	r2, #0
 8002cac:	2100      	movs	r1, #0
 8002cae:	2003      	movs	r0, #3
 8002cb0:	f7fe f926 	bl	8000f00 <Set_LED>
				Set_LED(4, 0, 0, 0);
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	2100      	movs	r1, #0
 8002cba:	2004      	movs	r0, #4
 8002cbc:	f7fe f920 	bl	8000f00 <Set_LED>
				Set_LED(5, 0, 0, 0);
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	2005      	movs	r0, #5
 8002cc8:	f7fe f91a 	bl	8000f00 <Set_LED>
				WS2812_Send(&htim3, TIM_CHANNEL_2, 105);
 8002ccc:	2269      	movs	r2, #105	@ 0x69
 8002cce:	2104      	movs	r1, #4
 8002cd0:	487e      	ldr	r0, [pc, #504]	@ (8002ecc <StartStroboTask+0x374>)
 8002cd2:	f7fe f945 	bl	8000f60 <WS2812_Send>
				osDelay(150);
 8002cd6:	2096      	movs	r0, #150	@ 0x96
 8002cd8:	f00a feab 	bl	800da32 <osDelay>
 8002cdc:	e0ee      	b.n	8002ebc <StartStroboTask+0x364>
			} else if (movement_mode == 2) {
 8002cde:	4b7a      	ldr	r3, [pc, #488]	@ (8002ec8 <StartStroboTask+0x370>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d158      	bne.n	8002d98 <StartStroboTask+0x240>
				Set_LED(0, 30, 30, 0);
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	221e      	movs	r2, #30
 8002cea:	211e      	movs	r1, #30
 8002cec:	2000      	movs	r0, #0
 8002cee:	f7fe f907 	bl	8000f00 <Set_LED>
				Set_LED(1, 255, 255, 0);
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	22ff      	movs	r2, #255	@ 0xff
 8002cf6:	21ff      	movs	r1, #255	@ 0xff
 8002cf8:	2001      	movs	r0, #1
 8002cfa:	f7fe f901 	bl	8000f00 <Set_LED>
				Set_LED(2, 255, 255, 0);
 8002cfe:	2300      	movs	r3, #0
 8002d00:	22ff      	movs	r2, #255	@ 0xff
 8002d02:	21ff      	movs	r1, #255	@ 0xff
 8002d04:	2002      	movs	r0, #2
 8002d06:	f7fe f8fb 	bl	8000f00 <Set_LED>
				Set_LED(3, 255, 255, 0);
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	22ff      	movs	r2, #255	@ 0xff
 8002d0e:	21ff      	movs	r1, #255	@ 0xff
 8002d10:	2003      	movs	r0, #3
 8002d12:	f7fe f8f5 	bl	8000f00 <Set_LED>
				Set_LED(4, 255, 255, 0);
 8002d16:	2300      	movs	r3, #0
 8002d18:	22ff      	movs	r2, #255	@ 0xff
 8002d1a:	21ff      	movs	r1, #255	@ 0xff
 8002d1c:	2004      	movs	r0, #4
 8002d1e:	f7fe f8ef 	bl	8000f00 <Set_LED>
				Set_LED(5, 255, 255, 0);
 8002d22:	2300      	movs	r3, #0
 8002d24:	22ff      	movs	r2, #255	@ 0xff
 8002d26:	21ff      	movs	r1, #255	@ 0xff
 8002d28:	2005      	movs	r0, #5
 8002d2a:	f7fe f8e9 	bl	8000f00 <Set_LED>
				WS2812_Send(&htim3, TIM_CHANNEL_2, 105);
 8002d2e:	2269      	movs	r2, #105	@ 0x69
 8002d30:	2104      	movs	r1, #4
 8002d32:	4866      	ldr	r0, [pc, #408]	@ (8002ecc <StartStroboTask+0x374>)
 8002d34:	f7fe f914 	bl	8000f60 <WS2812_Send>
				osDelay(150);
 8002d38:	2096      	movs	r0, #150	@ 0x96
 8002d3a:	f00a fe7a 	bl	800da32 <osDelay>
				Set_LED(0, 0, 0, 0);
 8002d3e:	2300      	movs	r3, #0
 8002d40:	2200      	movs	r2, #0
 8002d42:	2100      	movs	r1, #0
 8002d44:	2000      	movs	r0, #0
 8002d46:	f7fe f8db 	bl	8000f00 <Set_LED>
				Set_LED(1, 0, 0, 0);
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	2100      	movs	r1, #0
 8002d50:	2001      	movs	r0, #1
 8002d52:	f7fe f8d5 	bl	8000f00 <Set_LED>
				Set_LED(2, 0, 0, 0);
 8002d56:	2300      	movs	r3, #0
 8002d58:	2200      	movs	r2, #0
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	2002      	movs	r0, #2
 8002d5e:	f7fe f8cf 	bl	8000f00 <Set_LED>
				Set_LED(3, 0, 0, 0);
 8002d62:	2300      	movs	r3, #0
 8002d64:	2200      	movs	r2, #0
 8002d66:	2100      	movs	r1, #0
 8002d68:	2003      	movs	r0, #3
 8002d6a:	f7fe f8c9 	bl	8000f00 <Set_LED>
				Set_LED(4, 0, 0, 0);
 8002d6e:	2300      	movs	r3, #0
 8002d70:	2200      	movs	r2, #0
 8002d72:	2100      	movs	r1, #0
 8002d74:	2004      	movs	r0, #4
 8002d76:	f7fe f8c3 	bl	8000f00 <Set_LED>
				Set_LED(5, 0, 0, 0);
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	2100      	movs	r1, #0
 8002d80:	2005      	movs	r0, #5
 8002d82:	f7fe f8bd 	bl	8000f00 <Set_LED>
				WS2812_Send(&htim3, TIM_CHANNEL_2, 105);
 8002d86:	2269      	movs	r2, #105	@ 0x69
 8002d88:	2104      	movs	r1, #4
 8002d8a:	4850      	ldr	r0, [pc, #320]	@ (8002ecc <StartStroboTask+0x374>)
 8002d8c:	f7fe f8e8 	bl	8000f60 <WS2812_Send>
				osDelay(150);
 8002d90:	2096      	movs	r0, #150	@ 0x96
 8002d92:	f00a fe4e 	bl	800da32 <osDelay>
 8002d96:	e091      	b.n	8002ebc <StartStroboTask+0x364>
			} else if (movement_mode == 3) {
 8002d98:	4b4b      	ldr	r3, [pc, #300]	@ (8002ec8 <StartStroboTask+0x370>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2b03      	cmp	r3, #3
 8002d9e:	f040 808d 	bne.w	8002ebc <StartStroboTask+0x364>
				Set_LED(0, 45, 0, 0);
 8002da2:	2300      	movs	r3, #0
 8002da4:	2200      	movs	r2, #0
 8002da6:	212d      	movs	r1, #45	@ 0x2d
 8002da8:	2000      	movs	r0, #0
 8002daa:	f7fe f8a9 	bl	8000f00 <Set_LED>
				Set_LED(1, 255, 0, 0);
 8002dae:	2300      	movs	r3, #0
 8002db0:	2200      	movs	r2, #0
 8002db2:	21ff      	movs	r1, #255	@ 0xff
 8002db4:	2001      	movs	r0, #1
 8002db6:	f7fe f8a3 	bl	8000f00 <Set_LED>
				Set_LED(2, 255, 0, 0);
 8002dba:	2300      	movs	r3, #0
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	21ff      	movs	r1, #255	@ 0xff
 8002dc0:	2002      	movs	r0, #2
 8002dc2:	f7fe f89d 	bl	8000f00 <Set_LED>
				Set_LED(3, 255, 0, 0);
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	2200      	movs	r2, #0
 8002dca:	21ff      	movs	r1, #255	@ 0xff
 8002dcc:	2003      	movs	r0, #3
 8002dce:	f7fe f897 	bl	8000f00 <Set_LED>
				Set_LED(4, 255, 0, 0);
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	21ff      	movs	r1, #255	@ 0xff
 8002dd8:	2004      	movs	r0, #4
 8002dda:	f7fe f891 	bl	8000f00 <Set_LED>
				Set_LED(5, 255, 0, 0);
 8002dde:	2300      	movs	r3, #0
 8002de0:	2200      	movs	r2, #0
 8002de2:	21ff      	movs	r1, #255	@ 0xff
 8002de4:	2005      	movs	r0, #5
 8002de6:	f7fe f88b 	bl	8000f00 <Set_LED>
				WS2812_Send(&htim3, TIM_CHANNEL_2, 105);
 8002dea:	2269      	movs	r2, #105	@ 0x69
 8002dec:	2104      	movs	r1, #4
 8002dee:	4837      	ldr	r0, [pc, #220]	@ (8002ecc <StartStroboTask+0x374>)
 8002df0:	f7fe f8b6 	bl	8000f60 <WS2812_Send>
				osDelay(150);
 8002df4:	2096      	movs	r0, #150	@ 0x96
 8002df6:	f00a fe1c 	bl	800da32 <osDelay>
				Set_LED(0, 0, 0, 0);
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	2100      	movs	r1, #0
 8002e00:	2000      	movs	r0, #0
 8002e02:	f7fe f87d 	bl	8000f00 <Set_LED>
				Set_LED(1, 0, 0, 0);
 8002e06:	2300      	movs	r3, #0
 8002e08:	2200      	movs	r2, #0
 8002e0a:	2100      	movs	r1, #0
 8002e0c:	2001      	movs	r0, #1
 8002e0e:	f7fe f877 	bl	8000f00 <Set_LED>
				Set_LED(2, 0, 0, 0);
 8002e12:	2300      	movs	r3, #0
 8002e14:	2200      	movs	r2, #0
 8002e16:	2100      	movs	r1, #0
 8002e18:	2002      	movs	r0, #2
 8002e1a:	f7fe f871 	bl	8000f00 <Set_LED>
				Set_LED(3, 0, 0, 0);
 8002e1e:	2300      	movs	r3, #0
 8002e20:	2200      	movs	r2, #0
 8002e22:	2100      	movs	r1, #0
 8002e24:	2003      	movs	r0, #3
 8002e26:	f7fe f86b 	bl	8000f00 <Set_LED>
				Set_LED(4, 0, 0, 0);
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	2100      	movs	r1, #0
 8002e30:	2004      	movs	r0, #4
 8002e32:	f7fe f865 	bl	8000f00 <Set_LED>
				Set_LED(5, 0, 0, 0);
 8002e36:	2300      	movs	r3, #0
 8002e38:	2200      	movs	r2, #0
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	2005      	movs	r0, #5
 8002e3e:	f7fe f85f 	bl	8000f00 <Set_LED>
				WS2812_Send(&htim3, TIM_CHANNEL_2, 105);
 8002e42:	2269      	movs	r2, #105	@ 0x69
 8002e44:	2104      	movs	r1, #4
 8002e46:	4821      	ldr	r0, [pc, #132]	@ (8002ecc <StartStroboTask+0x374>)
 8002e48:	f7fe f88a 	bl	8000f60 <WS2812_Send>
				osDelay(150);
 8002e4c:	2096      	movs	r0, #150	@ 0x96
 8002e4e:	f00a fdf0 	bl	800da32 <osDelay>
 8002e52:	e033      	b.n	8002ebc <StartStroboTask+0x364>
			}
		}

		else {
			// Loop through each LED and light it up progressively
			    for (int i = 0; i < 11; i++) {
 8002e54:	2300      	movs	r3, #0
 8002e56:	617b      	str	r3, [r7, #20]
 8002e58:	e02a      	b.n	8002eb0 <StartStroboTask+0x358>
			        // Clear all LEDs
			        for (int j = 0; j < 11; j++) {
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	613b      	str	r3, [r7, #16]
 8002e5e:	e008      	b.n	8002e72 <StartStroboTask+0x31a>
			            Set_LED(j, 0, 0, 0); // Turn off LED
 8002e60:	2300      	movs	r3, #0
 8002e62:	2200      	movs	r2, #0
 8002e64:	2100      	movs	r1, #0
 8002e66:	6938      	ldr	r0, [r7, #16]
 8002e68:	f7fe f84a 	bl	8000f00 <Set_LED>
			        for (int j = 0; j < 11; j++) {
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	3301      	adds	r3, #1
 8002e70:	613b      	str	r3, [r7, #16]
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	2b0a      	cmp	r3, #10
 8002e76:	ddf3      	ble.n	8002e60 <StartStroboTask+0x308>
			        }
			        // Light up LEDs from index 0 to i
			        for (int j = 0; j <= i; j++) {
 8002e78:	2300      	movs	r3, #0
 8002e7a:	60fb      	str	r3, [r7, #12]
 8002e7c:	e008      	b.n	8002e90 <StartStroboTask+0x338>
			            Set_LED(j, 255, 0, 0); // Set LED color to red
 8002e7e:	2300      	movs	r3, #0
 8002e80:	2200      	movs	r2, #0
 8002e82:	21ff      	movs	r1, #255	@ 0xff
 8002e84:	68f8      	ldr	r0, [r7, #12]
 8002e86:	f7fe f83b 	bl	8000f00 <Set_LED>
			        for (int j = 0; j <= i; j++) {
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	3301      	adds	r3, #1
 8002e8e:	60fb      	str	r3, [r7, #12]
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	ddf2      	ble.n	8002e7e <StartStroboTask+0x326>
			        }
			        // Send data to LEDs
			        WS2812_Send(&htim3, TIM_CHANNEL_2, 105); // Assuming you're sending 105 bits of data
 8002e98:	2269      	movs	r2, #105	@ 0x69
 8002e9a:	2104      	movs	r1, #4
 8002e9c:	480b      	ldr	r0, [pc, #44]	@ (8002ecc <StartStroboTask+0x374>)
 8002e9e:	f7fe f85f 	bl	8000f60 <WS2812_Send>
			        osDelay(350); // Delay for 500 ms (adjust as needed for desired speed)
 8002ea2:	f44f 70af 	mov.w	r0, #350	@ 0x15e
 8002ea6:	f00a fdc4 	bl	800da32 <osDelay>
			    for (int i = 0; i < 11; i++) {
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	3301      	adds	r3, #1
 8002eae:	617b      	str	r3, [r7, #20]
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	2b0a      	cmp	r3, #10
 8002eb4:	ddd1      	ble.n	8002e5a <StartStroboTask+0x302>
			    }
			led_status = 0;
 8002eb6:	4b03      	ldr	r3, [pc, #12]	@ (8002ec4 <StartStroboTask+0x36c>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	701a      	strb	r2, [r3, #0]
		}

    osDelay(1);
 8002ebc:	2001      	movs	r0, #1
 8002ebe:	f00a fdb8 	bl	800da32 <osDelay>
		if (led_status == 0) {
 8002ec2:	e64d      	b.n	8002b60 <StartStroboTask+0x8>
 8002ec4:	20000b54 	.word	0x20000b54
 8002ec8:	200009a8 	.word	0x200009a8
 8002ecc:	2000075c 	.word	0x2000075c

08002ed0 <StartOtherTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOtherTask */
void StartOtherTask(void const * argument)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b082      	sub	sp, #8
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOtherTask */
  /* Infinite loop */
  for(;;)
  {
		//Switch Actuator Power
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, arm_hw);
 8002ed8:	4b25      	ldr	r3, [pc, #148]	@ (8002f70 <StartOtherTask+0xa0>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	461a      	mov	r2, r3
 8002ee0:	2140      	movs	r1, #64	@ 0x40
 8002ee2:	4824      	ldr	r0, [pc, #144]	@ (8002f74 <StartOtherTask+0xa4>)
 8002ee4:	f002 f94c 	bl	8005180 <HAL_GPIO_WritePin>

		//Leaks Sensor
		leaks = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 8002ee8:	2120      	movs	r1, #32
 8002eea:	4823      	ldr	r0, [pc, #140]	@ (8002f78 <StartOtherTask+0xa8>)
 8002eec:	f002 f930 	bl	8005150 <HAL_GPIO_ReadPin>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	4b21      	ldr	r3, [pc, #132]	@ (8002f7c <StartOtherTask+0xac>)
 8002ef6:	601a      	str	r2, [r3, #0]

		//Volt Meter Battery
		batt1_volt = convertADCtoVoltage(adc1_value[0], batt1adc_min, batt1adc_max, batt1_min, batt1_max);
 8002ef8:	4b21      	ldr	r3, [pc, #132]	@ (8002f80 <StartOtherTask+0xb0>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	4a21      	ldr	r2, [pc, #132]	@ (8002f84 <StartOtherTask+0xb4>)
 8002f00:	6812      	ldr	r2, [r2, #0]
 8002f02:	b291      	uxth	r1, r2
 8002f04:	4a20      	ldr	r2, [pc, #128]	@ (8002f88 <StartOtherTask+0xb8>)
 8002f06:	6812      	ldr	r2, [r2, #0]
 8002f08:	b292      	uxth	r2, r2
 8002f0a:	4820      	ldr	r0, [pc, #128]	@ (8002f8c <StartOtherTask+0xbc>)
 8002f0c:	edd0 7a00 	vldr	s15, [r0]
 8002f10:	481f      	ldr	r0, [pc, #124]	@ (8002f90 <StartOtherTask+0xc0>)
 8002f12:	ed90 7a00 	vldr	s14, [r0]
 8002f16:	eef0 0a47 	vmov.f32	s1, s14
 8002f1a:	eeb0 0a67 	vmov.f32	s0, s15
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7fe f9e6 	bl	80012f0 <convertADCtoVoltage>
 8002f24:	eef0 7a40 	vmov.f32	s15, s0
 8002f28:	4b1a      	ldr	r3, [pc, #104]	@ (8002f94 <StartOtherTask+0xc4>)
 8002f2a:	edc3 7a00 	vstr	s15, [r3]
		batt2_volt = convertADCtoVoltage(adc1_value[1], batt2adc_min, batt2adc_max, batt2_min, batt2_max);
 8002f2e:	4b14      	ldr	r3, [pc, #80]	@ (8002f80 <StartOtherTask+0xb0>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	4a18      	ldr	r2, [pc, #96]	@ (8002f98 <StartOtherTask+0xc8>)
 8002f36:	6812      	ldr	r2, [r2, #0]
 8002f38:	b291      	uxth	r1, r2
 8002f3a:	4a18      	ldr	r2, [pc, #96]	@ (8002f9c <StartOtherTask+0xcc>)
 8002f3c:	6812      	ldr	r2, [r2, #0]
 8002f3e:	b292      	uxth	r2, r2
 8002f40:	4817      	ldr	r0, [pc, #92]	@ (8002fa0 <StartOtherTask+0xd0>)
 8002f42:	edd0 7a00 	vldr	s15, [r0]
 8002f46:	4817      	ldr	r0, [pc, #92]	@ (8002fa4 <StartOtherTask+0xd4>)
 8002f48:	ed90 7a00 	vldr	s14, [r0]
 8002f4c:	eef0 0a47 	vmov.f32	s1, s14
 8002f50:	eeb0 0a67 	vmov.f32	s0, s15
 8002f54:	4618      	mov	r0, r3
 8002f56:	f7fe f9cb 	bl	80012f0 <convertADCtoVoltage>
 8002f5a:	eef0 7a40 	vmov.f32	s15, s0
 8002f5e:	4b12      	ldr	r3, [pc, #72]	@ (8002fa8 <StartOtherTask+0xd8>)
 8002f60:	edc3 7a00 	vstr	s15, [r3]
		//IMU Calibration
//		if(IMUStatus == "Resetting.."){
//
//		}

    osDelay(1);
 8002f64:	2001      	movs	r0, #1
 8002f66:	f00a fd64 	bl	800da32 <osDelay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, arm_hw);
 8002f6a:	bf00      	nop
 8002f6c:	e7b4      	b.n	8002ed8 <StartOtherTask+0x8>
 8002f6e:	bf00      	nop
 8002f70:	200009b0 	.word	0x200009b0
 8002f74:	40020000 	.word	0x40020000
 8002f78:	40020800 	.word	0x40020800
 8002f7c:	20000b58 	.word	0x20000b58
 8002f80:	20000b3c 	.word	0x20000b3c
 8002f84:	20000030 	.word	0x20000030
 8002f88:	20000034 	.word	0x20000034
 8002f8c:	20000040 	.word	0x20000040
 8002f90:	20000044 	.word	0x20000044
 8002f94:	20000b44 	.word	0x20000b44
 8002f98:	20000038 	.word	0x20000038
 8002f9c:	2000003c 	.word	0x2000003c
 8002fa0:	20000048 	.word	0x20000048
 8002fa4:	2000004c 	.word	0x2000004c
 8002fa8:	20000b48 	.word	0x20000b48

08002fac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a04      	ldr	r2, [pc, #16]	@ (8002fcc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d101      	bne.n	8002fc2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002fbe:	f000 fdf1 	bl	8003ba4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002fc2:	bf00      	nop
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	40002000 	.word	0x40002000

08002fd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002fd4:	b672      	cpsid	i
}
 8002fd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002fd8:	bf00      	nop
 8002fda:	e7fd      	b.n	8002fd8 <Error_Handler+0x8>

08002fdc <MS58xx_read>:
 * @param handle The I2C handle being used
 * @param bufp The buffer to be read into
 * @param len The length of the buffer in 8-bit increments
 * @retval HAL Status
 */
HAL_StatusTypeDef MS58xx_read(void *handle, uint8_t *bufp, uint16_t len, uint8_t address) {
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af02      	add	r7, sp, #8
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	4611      	mov	r1, r2
 8002fe8:	461a      	mov	r2, r3
 8002fea:	460b      	mov	r3, r1
 8002fec:	80fb      	strh	r3, [r7, #6]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	717b      	strb	r3, [r7, #5]
    return HAL_I2C_Master_Receive(handle, MS58xx_I2C_ADDRESS(address), bufp, len, 100);
 8002ff2:	797b      	ldrb	r3, [r7, #5]
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	005b      	lsls	r3, r3, #1
 8002ff8:	b299      	uxth	r1, r3
 8002ffa:	88fb      	ldrh	r3, [r7, #6]
 8002ffc:	2264      	movs	r2, #100	@ 0x64
 8002ffe:	9200      	str	r2, [sp, #0]
 8003000:	68ba      	ldr	r2, [r7, #8]
 8003002:	68f8      	ldr	r0, [r7, #12]
 8003004:	f002 fb18 	bl	8005638 <HAL_I2C_Master_Receive>
 8003008:	4603      	mov	r3, r0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <MS58xx_write>:
 * @param handle The I2C handle being used
 * @param bufp The buffer to read from
 * @param len The length of the buffer in 8-bit increments
 * @retval HAL Status
 */
HAL_StatusTypeDef MS58xx_write(void *handle, uint8_t *bufp, uint16_t len, uint8_t address) {
 8003012:	b580      	push	{r7, lr}
 8003014:	b086      	sub	sp, #24
 8003016:	af02      	add	r7, sp, #8
 8003018:	60f8      	str	r0, [r7, #12]
 800301a:	60b9      	str	r1, [r7, #8]
 800301c:	4611      	mov	r1, r2
 800301e:	461a      	mov	r2, r3
 8003020:	460b      	mov	r3, r1
 8003022:	80fb      	strh	r3, [r7, #6]
 8003024:	4613      	mov	r3, r2
 8003026:	717b      	strb	r3, [r7, #5]
    return HAL_I2C_Master_Transmit(handle, MS58xx_I2C_ADDRESS(address), bufp, len, 100);
 8003028:	797b      	ldrb	r3, [r7, #5]
 800302a:	b29b      	uxth	r3, r3
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	b299      	uxth	r1, r3
 8003030:	88fb      	ldrh	r3, [r7, #6]
 8003032:	2264      	movs	r2, #100	@ 0x64
 8003034:	9200      	str	r2, [sp, #0]
 8003036:	68ba      	ldr	r2, [r7, #8]
 8003038:	68f8      	ldr	r0, [r7, #12]
 800303a:	f002 f9ff 	bl	800543c <HAL_I2C_Master_Transmit>
 800303e:	4603      	mov	r3, r0
}
 8003040:	4618      	mov	r0, r3
 8003042:	3710      	adds	r7, #16
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <MS58xx_reset>:
 * @brief Resets the MS58xx
 * @param handle The I2C Handle being used
 * @retval HAL Status
 */

HAL_StatusTypeDef MS58xx_reset(void *handle, uint8_t address) {
 8003048:	b580      	push	{r7, lr}
 800304a:	b088      	sub	sp, #32
 800304c:	af02      	add	r7, sp, #8
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	460b      	mov	r3, r1
 8003052:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[12];
    buf[0] = MS58xx_RESET;
 8003054:	231e      	movs	r3, #30
 8003056:	723b      	strb	r3, [r7, #8]
    HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(handle, MS58xx_I2C_ADDRESS(address), buf, 1, 1000);
 8003058:	78fb      	ldrb	r3, [r7, #3]
 800305a:	b29b      	uxth	r3, r3
 800305c:	005b      	lsls	r3, r3, #1
 800305e:	b299      	uxth	r1, r3
 8003060:	f107 0208 	add.w	r2, r7, #8
 8003064:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003068:	9300      	str	r3, [sp, #0]
 800306a:	2301      	movs	r3, #1
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f002 f9e5 	bl	800543c <HAL_I2C_Master_Transmit>
 8003072:	4603      	mov	r3, r0
 8003074:	75fb      	strb	r3, [r7, #23]
    osDelay(3);
 8003076:	2003      	movs	r0, #3
 8003078:	f00a fcdb 	bl	800da32 <osDelay>
    return ret;
 800307c:	7dfb      	ldrb	r3, [r7, #23]
}
 800307e:	4618      	mov	r0, r3
 8003080:	3718      	adds	r7, #24
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}

08003086 <MS58xx_coeff>:
 * @param coeff The pointer to the coefficient being read in to
 * @param value The coefficient number
 * @return HAL Status
 */

HAL_StatusTypeDef MS58xx_coeff(void *handle, uint16_t *coeff, uint8_t address, uint8_t value) {
 8003086:	b580      	push	{r7, lr}
 8003088:	b08a      	sub	sp, #40	@ 0x28
 800308a:	af00      	add	r7, sp, #0
 800308c:	60f8      	str	r0, [r7, #12]
 800308e:	60b9      	str	r1, [r7, #8]
 8003090:	4611      	mov	r1, r2
 8003092:	461a      	mov	r2, r3
 8003094:	460b      	mov	r3, r1
 8003096:	71fb      	strb	r3, [r7, #7]
 8003098:	4613      	mov	r3, r2
 800309a:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[12];
    buf[0] = MS58xx_PROM + (value << 1);
 800309c:	79bb      	ldrb	r3, [r7, #6]
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	3b60      	subs	r3, #96	@ 0x60
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	763b      	strb	r3, [r7, #24]
    HAL_StatusTypeDef x = MS58xx_write(handle, buf, 1, address);
 80030a8:	79fb      	ldrb	r3, [r7, #7]
 80030aa:	f107 0118 	add.w	r1, r7, #24
 80030ae:	2201      	movs	r2, #1
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f7ff ffae 	bl	8003012 <MS58xx_write>
 80030b6:	4603      	mov	r3, r0
 80030b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    osDelay(2);
 80030bc:	2002      	movs	r0, #2
 80030be:	f00a fcb8 	bl	800da32 <osDelay>
    uint8_t c[2];
    x = MS58xx_read(handle, c, 2, address);
 80030c2:	79fb      	ldrb	r3, [r7, #7]
 80030c4:	f107 0114 	add.w	r1, r7, #20
 80030c8:	2202      	movs	r2, #2
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f7ff ff86 	bl	8002fdc <MS58xx_read>
 80030d0:	4603      	mov	r3, r0
 80030d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    *coeff = (c[0] << 8) + c[1];
 80030d6:	7d3b      	ldrb	r3, [r7, #20]
 80030d8:	021b      	lsls	r3, r3, #8
 80030da:	b29b      	uxth	r3, r3
 80030dc:	7d7a      	ldrb	r2, [r7, #21]
 80030de:	4413      	add	r3, r2
 80030e0:	b29a      	uxth	r2, r3
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	801a      	strh	r2, [r3, #0]
    return x;
 80030e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3728      	adds	r7, #40	@ 0x28
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
	...

080030f4 <MS58xx_ADC>:
 * @param handle The I2C Handle being used
 * @param type The measurement type, chosen from measurement enum
 * @param prec The precision to use, chosen from precision enum
 * @retval Raw 24-bit data from the ADC
 */
uint32_t MS58xx_ADC(void *handle, measurement type, precision prec, uint8_t address) {
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b088      	sub	sp, #32
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	4608      	mov	r0, r1
 80030fe:	4611      	mov	r1, r2
 8003100:	461a      	mov	r2, r3
 8003102:	4603      	mov	r3, r0
 8003104:	70fb      	strb	r3, [r7, #3]
 8003106:	460b      	mov	r3, r1
 8003108:	70bb      	strb	r3, [r7, #2]
 800310a:	4613      	mov	r3, r2
 800310c:	707b      	strb	r3, [r7, #1]
    uint32_t result;
    uint8_t buf[12];
    buf[0] = MS58xx_ADC_CONV + type + prec; // Tell the ADC to convert along with the precision and type
 800310e:	78fa      	ldrb	r2, [r7, #3]
 8003110:	78bb      	ldrb	r3, [r7, #2]
 8003112:	4413      	add	r3, r2
 8003114:	b2db      	uxtb	r3, r3
 8003116:	3340      	adds	r3, #64	@ 0x40
 8003118:	b2db      	uxtb	r3, r3
 800311a:	743b      	strb	r3, [r7, #16]
    MS58xx_write(handle, buf, 1, address);
 800311c:	787b      	ldrb	r3, [r7, #1]
 800311e:	f107 0110 	add.w	r1, r7, #16
 8003122:	2201      	movs	r2, #1
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f7ff ff74 	bl	8003012 <MS58xx_write>
    osDelay(2);
 800312a:	2002      	movs	r0, #2
 800312c:	f00a fc81 	bl	800da32 <osDelay>

    switch (prec) {
 8003130:	78bb      	ldrb	r3, [r7, #2]
 8003132:	2b08      	cmp	r3, #8
 8003134:	d828      	bhi.n	8003188 <MS58xx_ADC+0x94>
 8003136:	a201      	add	r2, pc, #4	@ (adr r2, 800313c <MS58xx_ADC+0x48>)
 8003138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800313c:	08003161 	.word	0x08003161
 8003140:	08003189 	.word	0x08003189
 8003144:	08003169 	.word	0x08003169
 8003148:	08003189 	.word	0x08003189
 800314c:	08003171 	.word	0x08003171
 8003150:	08003189 	.word	0x08003189
 8003154:	08003179 	.word	0x08003179
 8003158:	08003189 	.word	0x08003189
 800315c:	08003181 	.word	0x08003181
        case ADC_256: osDelay(1); break;
 8003160:	2001      	movs	r0, #1
 8003162:	f00a fc66 	bl	800da32 <osDelay>
 8003166:	e00f      	b.n	8003188 <MS58xx_ADC+0x94>
        case ADC_512: osDelay(3); break;
 8003168:	2003      	movs	r0, #3
 800316a:	f00a fc62 	bl	800da32 <osDelay>
 800316e:	e00b      	b.n	8003188 <MS58xx_ADC+0x94>
        case ADC_1024: osDelay(4); break;
 8003170:	2004      	movs	r0, #4
 8003172:	f00a fc5e 	bl	800da32 <osDelay>
 8003176:	e007      	b.n	8003188 <MS58xx_ADC+0x94>
        case ADC_2048: osDelay(6); break;
 8003178:	2006      	movs	r0, #6
 800317a:	f00a fc5a 	bl	800da32 <osDelay>
 800317e:	e003      	b.n	8003188 <MS58xx_ADC+0x94>
        case ADC_4096: osDelay(10); break;  // Delay longer if higher precision, as conversion takes longer.
 8003180:	200a      	movs	r0, #10
 8003182:	f00a fc56 	bl	800da32 <osDelay>
 8003186:	bf00      	nop
    }

    buf[0] = MS58xx_ADC_READ; // Tell the MS58xx that we want to read the ADC
 8003188:	2300      	movs	r3, #0
 800318a:	743b      	strb	r3, [r7, #16]
    MS58xx_write(handle, buf, 1, address);
 800318c:	787b      	ldrb	r3, [r7, #1]
 800318e:	f107 0110 	add.w	r1, r7, #16
 8003192:	2201      	movs	r2, #1
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f7ff ff3c 	bl	8003012 <MS58xx_write>
    osDelay(2);
 800319a:	2002      	movs	r0, #2
 800319c:	f00a fc49 	bl	800da32 <osDelay>

    uint8_t c[3];
    MS58xx_read(handle, c, 3, address); // Read out the ADC
 80031a0:	787b      	ldrb	r3, [r7, #1]
 80031a2:	f107 010c 	add.w	r1, r7, #12
 80031a6:	2203      	movs	r2, #3
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f7ff ff17 	bl	8002fdc <MS58xx_read>
    result = (c[0] << 16) + (c[1] << 8) + c[2]; // Convert the three 8-bit values into one value.
 80031ae:	7b3b      	ldrb	r3, [r7, #12]
 80031b0:	041a      	lsls	r2, r3, #16
 80031b2:	7b7b      	ldrb	r3, [r7, #13]
 80031b4:	021b      	lsls	r3, r3, #8
 80031b6:	4413      	add	r3, r2
 80031b8:	7bba      	ldrb	r2, [r7, #14]
 80031ba:	4413      	add	r3, r2
 80031bc:	61fb      	str	r3, [r7, #28]
    return result;
 80031be:	69fb      	ldr	r3, [r7, #28]
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3720      	adds	r7, #32
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <MS58xx_get_values>:
 * @param handle The I2C Handle being used
 * @param prec The precision to be used
 * @param temperature The pointer to the temperature variable being read in to.
 * @param pressure The pointer to the pressure variable being read in to.
 */
void MS58xx_get_values(void *handle, precision prec, uint16_t coeff[6], float *temperature, float *pressure, uint8_t address, MS58xx_type sensor_type) {
 80031c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031cc:	b0a8      	sub	sp, #160	@ 0xa0
 80031ce:	af00      	add	r7, sp, #0
 80031d0:	6678      	str	r0, [r7, #100]	@ 0x64
 80031d2:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80031d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80031d6:	460b      	mov	r3, r1
 80031d8:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
    uint32_t temperature_raw = MS58xx_ADC(handle, TEMPERATURE, prec, address);
 80031dc:	f897 30c4 	ldrb.w	r3, [r7, #196]	@ 0xc4
 80031e0:	f897 2063 	ldrb.w	r2, [r7, #99]	@ 0x63
 80031e4:	2110      	movs	r1, #16
 80031e6:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80031e8:	f7ff ff84 	bl	80030f4 <MS58xx_ADC>
 80031ec:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
    uint32_t pressure_raw = MS58xx_ADC(handle, PRESSURE, prec, address); // get temperature and pressure raw values
 80031f0:	f897 30c4 	ldrb.w	r3, [r7, #196]	@ 0xc4
 80031f4:	f897 2063 	ldrb.w	r2, [r7, #99]	@ 0x63
 80031f8:	2100      	movs	r1, #0
 80031fa:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 80031fc:	f7ff ff7a 	bl	80030f4 <MS58xx_ADC>
 8003200:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94

    int32_t sub = coeff[4] * 256;
 8003204:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003206:	3308      	adds	r3, #8
 8003208:	881b      	ldrh	r3, [r3, #0]
 800320a:	021b      	lsls	r3, r3, #8
 800320c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    int32_t dT = temperature_raw - sub;
 8003210:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8003214:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003218:	1a9b      	subs	r3, r3, r2
 800321a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

    int64_t add = ((int64_t)coeff[4])*((int64_t)dT)/128;
 800321e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003220:	3308      	adds	r3, #8
 8003222:	881b      	ldrh	r3, [r3, #0]
 8003224:	b29b      	uxth	r3, r3
 8003226:	2200      	movs	r2, #0
 8003228:	4698      	mov	r8, r3
 800322a:	4691      	mov	r9, r2
 800322c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003230:	17da      	asrs	r2, r3, #31
 8003232:	461c      	mov	r4, r3
 8003234:	4615      	mov	r5, r2
 8003236:	fb04 f209 	mul.w	r2, r4, r9
 800323a:	fb08 f305 	mul.w	r3, r8, r5
 800323e:	4413      	add	r3, r2
 8003240:	fba8 ab04 	umull	sl, fp, r8, r4
 8003244:	445b      	add	r3, fp
 8003246:	469b      	mov	fp, r3
 8003248:	4652      	mov	r2, sl
 800324a:	465b      	mov	r3, fp
 800324c:	2b00      	cmp	r3, #0
 800324e:	da07      	bge.n	8003260 <MS58xx_get_values+0x98>
 8003250:	f112 017f 	adds.w	r1, r2, #127	@ 0x7f
 8003254:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003256:	f143 0300 	adc.w	r3, r3, #0
 800325a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800325c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003260:	f04f 0000 	mov.w	r0, #0
 8003264:	f04f 0100 	mov.w	r1, #0
 8003268:	09d0      	lsrs	r0, r2, #7
 800326a:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 800326e:	11d9      	asrs	r1, r3, #7
 8003270:	e9c7 0120 	strd	r0, r1, [r7, #128]	@ 0x80
    int64_t OFF = ((int64_t)coeff[2])*65536+add;
 8003274:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003276:	3304      	adds	r3, #4
 8003278:	881b      	ldrh	r3, [r3, #0]
 800327a:	b29b      	uxth	r3, r3
 800327c:	2200      	movs	r2, #0
 800327e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003280:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003282:	f04f 0000 	mov.w	r0, #0
 8003286:	f04f 0100 	mov.w	r1, #0
 800328a:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800328e:	462b      	mov	r3, r5
 8003290:	0419      	lsls	r1, r3, #16
 8003292:	4623      	mov	r3, r4
 8003294:	ea41 4113 	orr.w	r1, r1, r3, lsr #16
 8003298:	4623      	mov	r3, r4
 800329a:	0418      	lsls	r0, r3, #16
 800329c:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80032a0:	1814      	adds	r4, r2, r0
 80032a2:	623c      	str	r4, [r7, #32]
 80032a4:	414b      	adcs	r3, r1
 80032a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80032a8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80032ac:	e9c7 341e 	strd	r3, r4, [r7, #120]	@ 0x78
    int64_t SENS = coeff[1] * (32768) + (coeff[3]*dT)/(256);
 80032b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80032b2:	3302      	adds	r3, #2
 80032b4:	881b      	ldrh	r3, [r3, #0]
 80032b6:	03d9      	lsls	r1, r3, #15
 80032b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80032ba:	3306      	adds	r3, #6
 80032bc:	881b      	ldrh	r3, [r3, #0]
 80032be:	461a      	mov	r2, r3
 80032c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80032c4:	fb02 f303 	mul.w	r3, r2, r3
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	da00      	bge.n	80032ce <MS58xx_get_values+0x106>
 80032cc:	33ff      	adds	r3, #255	@ 0xff
 80032ce:	121b      	asrs	r3, r3, #8
 80032d0:	440b      	add	r3, r1
 80032d2:	17da      	asrs	r2, r3, #31
 80032d4:	61bb      	str	r3, [r7, #24]
 80032d6:	61fa      	str	r2, [r7, #28]
 80032d8:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80032dc:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
    int64_t mult = pressure_raw*SENS/2097152;
 80032e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80032e4:	2200      	movs	r2, #0
 80032e6:	643b      	str	r3, [r7, #64]	@ 0x40
 80032e8:	647a      	str	r2, [r7, #68]	@ 0x44
 80032ea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80032ec:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 80032f0:	462a      	mov	r2, r5
 80032f2:	fb02 f203 	mul.w	r2, r2, r3
 80032f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032f8:	4621      	mov	r1, r4
 80032fa:	fb01 f303 	mul.w	r3, r1, r3
 80032fe:	441a      	add	r2, r3
 8003300:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003302:	4621      	mov	r1, r4
 8003304:	fba3 1301 	umull	r1, r3, r3, r1
 8003308:	657b      	str	r3, [r7, #84]	@ 0x54
 800330a:	460b      	mov	r3, r1
 800330c:	653b      	str	r3, [r7, #80]	@ 0x50
 800330e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003310:	18d3      	adds	r3, r2, r3
 8003312:	657b      	str	r3, [r7, #84]	@ 0x54
 8003314:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003318:	2b00      	cmp	r3, #0
 800331a:	da07      	bge.n	800332c <MS58xx_get_values+0x164>
 800331c:	4949      	ldr	r1, [pc, #292]	@ (8003444 <MS58xx_get_values+0x27c>)
 800331e:	1851      	adds	r1, r2, r1
 8003320:	6139      	str	r1, [r7, #16]
 8003322:	f143 0300 	adc.w	r3, r3, #0
 8003326:	617b      	str	r3, [r7, #20]
 8003328:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800332c:	f04f 0000 	mov.w	r0, #0
 8003330:	f04f 0100 	mov.w	r1, #0
 8003334:	0d50      	lsrs	r0, r2, #21
 8003336:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 800333a:	1559      	asrs	r1, r3, #21
 800333c:	e9c7 011a 	strd	r0, r1, [r7, #104]	@ 0x68

    int32_t pres;
    if (sensor_type == MS5803) {
 8003340:	f897 30c8 	ldrb.w	r3, [r7, #200]	@ 0xc8
 8003344:	2b01      	cmp	r3, #1
 8003346:	d123      	bne.n	8003390 <MS58xx_get_values+0x1c8>
        pres = (mult-OFF)/32768;
 8003348:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800334c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8003350:	1a84      	subs	r4, r0, r2
 8003352:	63bc      	str	r4, [r7, #56]	@ 0x38
 8003354:	eb61 0303 	sbc.w	r3, r1, r3
 8003358:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800335a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800335e:	2b00      	cmp	r3, #0
 8003360:	da08      	bge.n	8003374 <MS58xx_get_values+0x1ac>
 8003362:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8003366:	1851      	adds	r1, r2, r1
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	f143 0300 	adc.w	r3, r3, #0
 800336e:	60fb      	str	r3, [r7, #12]
 8003370:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003374:	f04f 0000 	mov.w	r0, #0
 8003378:	f04f 0100 	mov.w	r1, #0
 800337c:	0bd0      	lsrs	r0, r2, #15
 800337e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 8003382:	13d9      	asrs	r1, r3, #15
 8003384:	4602      	mov	r2, r0
 8003386:	460b      	mov	r3, r1
 8003388:	4613      	mov	r3, r2
 800338a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800338e:	e02a      	b.n	80033e6 <MS58xx_get_values+0x21e>
    } else if (sensor_type == MS5837) {
 8003390:	f897 30c8 	ldrb.w	r3, [r7, #200]	@ 0xc8
 8003394:	2b02      	cmp	r3, #2
 8003396:	d123      	bne.n	80033e0 <MS58xx_get_values+0x218>
        pres = (mult-OFF)/8192;
 8003398:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800339c:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80033a0:	1a84      	subs	r4, r0, r2
 80033a2:	633c      	str	r4, [r7, #48]	@ 0x30
 80033a4:	eb61 0303 	sbc.w	r3, r1, r3
 80033a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80033aa:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	da08      	bge.n	80033c4 <MS58xx_get_values+0x1fc>
 80033b2:	f641 71ff 	movw	r1, #8191	@ 0x1fff
 80033b6:	1851      	adds	r1, r2, r1
 80033b8:	6039      	str	r1, [r7, #0]
 80033ba:	f143 0300 	adc.w	r3, r3, #0
 80033be:	607b      	str	r3, [r7, #4]
 80033c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80033c4:	f04f 0000 	mov.w	r0, #0
 80033c8:	f04f 0100 	mov.w	r1, #0
 80033cc:	0b50      	lsrs	r0, r2, #13
 80033ce:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80033d2:	1359      	asrs	r1, r3, #13
 80033d4:	4602      	mov	r2, r0
 80033d6:	460b      	mov	r3, r1
 80033d8:	4613      	mov	r3, r2
 80033da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80033de:	e002      	b.n	80033e6 <MS58xx_get_values+0x21e>
    } else {
        // Handle unknown sensor type
        pres = 0; // Set a default value or handle the case appropriately
 80033e0:	2300      	movs	r3, #0
 80033e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    }

    // determine pressure according to datasheet
    if (sensor_type == MS5803) {
 80033e6:	f897 30c8 	ldrb.w	r3, [r7, #200]	@ 0xc8
 80033ea:	2b01      	cmp	r3, #1
 80033ec:	d112      	bne.n	8003414 <MS58xx_get_values+0x24c>
        *pressure = (pres/100.f) + 819;
 80033ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80033f2:	ee07 3a90 	vmov	s15, r3
 80033f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033fa:	eddf 6a13 	vldr	s13, [pc, #76]	@ 8003448 <MS58xx_get_values+0x280>
 80033fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003402:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 800344c <MS58xx_get_values+0x284>
 8003406:	ee77 7a87 	vadd.f32	s15, s15, s14
 800340a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800340e:	edc3 7a00 	vstr	s15, [r3]
    } else if (sensor_type == MS5837) {
        *pressure = (pres/100.f);
    }
}
 8003412:	e011      	b.n	8003438 <MS58xx_get_values+0x270>
    } else if (sensor_type == MS5837) {
 8003414:	f897 30c8 	ldrb.w	r3, [r7, #200]	@ 0xc8
 8003418:	2b02      	cmp	r3, #2
 800341a:	d10d      	bne.n	8003438 <MS58xx_get_values+0x270>
        *pressure = (pres/100.f);
 800341c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003420:	ee07 3a90 	vmov	s15, r3
 8003424:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003428:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8003448 <MS58xx_get_values+0x280>
 800342c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003430:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003434:	edc3 7a00 	vstr	s15, [r3]
}
 8003438:	bf00      	nop
 800343a:	37a0      	adds	r7, #160	@ 0xa0
 800343c:	46bd      	mov	sp, r7
 800343e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003442:	bf00      	nop
 8003444:	001fffff 	.word	0x001fffff
 8003448:	42c80000 	.word	0x42c80000
 800344c:	444cc000 	.word	0x444cc000

08003450 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003456:	2300      	movs	r3, #0
 8003458:	607b      	str	r3, [r7, #4]
 800345a:	4b12      	ldr	r3, [pc, #72]	@ (80034a4 <HAL_MspInit+0x54>)
 800345c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800345e:	4a11      	ldr	r2, [pc, #68]	@ (80034a4 <HAL_MspInit+0x54>)
 8003460:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003464:	6453      	str	r3, [r2, #68]	@ 0x44
 8003466:	4b0f      	ldr	r3, [pc, #60]	@ (80034a4 <HAL_MspInit+0x54>)
 8003468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800346a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800346e:	607b      	str	r3, [r7, #4]
 8003470:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003472:	2300      	movs	r3, #0
 8003474:	603b      	str	r3, [r7, #0]
 8003476:	4b0b      	ldr	r3, [pc, #44]	@ (80034a4 <HAL_MspInit+0x54>)
 8003478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800347a:	4a0a      	ldr	r2, [pc, #40]	@ (80034a4 <HAL_MspInit+0x54>)
 800347c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003480:	6413      	str	r3, [r2, #64]	@ 0x40
 8003482:	4b08      	ldr	r3, [pc, #32]	@ (80034a4 <HAL_MspInit+0x54>)
 8003484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003486:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800348a:	603b      	str	r3, [r7, #0]
 800348c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800348e:	2200      	movs	r2, #0
 8003490:	210f      	movs	r1, #15
 8003492:	f06f 0001 	mvn.w	r0, #1
 8003496:	f001 f893 	bl	80045c0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800349a:	bf00      	nop
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	40023800 	.word	0x40023800

080034a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b08a      	sub	sp, #40	@ 0x28
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034b0:	f107 0314 	add.w	r3, r7, #20
 80034b4:	2200      	movs	r2, #0
 80034b6:	601a      	str	r2, [r3, #0]
 80034b8:	605a      	str	r2, [r3, #4]
 80034ba:	609a      	str	r2, [r3, #8]
 80034bc:	60da      	str	r2, [r3, #12]
 80034be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a2f      	ldr	r2, [pc, #188]	@ (8003584 <HAL_ADC_MspInit+0xdc>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d157      	bne.n	800357a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80034ca:	2300      	movs	r3, #0
 80034cc:	613b      	str	r3, [r7, #16]
 80034ce:	4b2e      	ldr	r3, [pc, #184]	@ (8003588 <HAL_ADC_MspInit+0xe0>)
 80034d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034d2:	4a2d      	ldr	r2, [pc, #180]	@ (8003588 <HAL_ADC_MspInit+0xe0>)
 80034d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80034da:	4b2b      	ldr	r3, [pc, #172]	@ (8003588 <HAL_ADC_MspInit+0xe0>)
 80034dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034e2:	613b      	str	r3, [r7, #16]
 80034e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034e6:	2300      	movs	r3, #0
 80034e8:	60fb      	str	r3, [r7, #12]
 80034ea:	4b27      	ldr	r3, [pc, #156]	@ (8003588 <HAL_ADC_MspInit+0xe0>)
 80034ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034ee:	4a26      	ldr	r2, [pc, #152]	@ (8003588 <HAL_ADC_MspInit+0xe0>)
 80034f0:	f043 0301 	orr.w	r3, r3, #1
 80034f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80034f6:	4b24      	ldr	r3, [pc, #144]	@ (8003588 <HAL_ADC_MspInit+0xe0>)
 80034f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034fa:	f003 0301 	and.w	r3, r3, #1
 80034fe:	60fb      	str	r3, [r7, #12]
 8003500:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003502:	2330      	movs	r3, #48	@ 0x30
 8003504:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003506:	2303      	movs	r3, #3
 8003508:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350a:	2300      	movs	r3, #0
 800350c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800350e:	f107 0314 	add.w	r3, r7, #20
 8003512:	4619      	mov	r1, r3
 8003514:	481d      	ldr	r0, [pc, #116]	@ (800358c <HAL_ADC_MspInit+0xe4>)
 8003516:	f001 fc7f 	bl	8004e18 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800351a:	4b1d      	ldr	r3, [pc, #116]	@ (8003590 <HAL_ADC_MspInit+0xe8>)
 800351c:	4a1d      	ldr	r2, [pc, #116]	@ (8003594 <HAL_ADC_MspInit+0xec>)
 800351e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003520:	4b1b      	ldr	r3, [pc, #108]	@ (8003590 <HAL_ADC_MspInit+0xe8>)
 8003522:	2200      	movs	r2, #0
 8003524:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003526:	4b1a      	ldr	r3, [pc, #104]	@ (8003590 <HAL_ADC_MspInit+0xe8>)
 8003528:	2200      	movs	r2, #0
 800352a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800352c:	4b18      	ldr	r3, [pc, #96]	@ (8003590 <HAL_ADC_MspInit+0xe8>)
 800352e:	2200      	movs	r2, #0
 8003530:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003532:	4b17      	ldr	r3, [pc, #92]	@ (8003590 <HAL_ADC_MspInit+0xe8>)
 8003534:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003538:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800353a:	4b15      	ldr	r3, [pc, #84]	@ (8003590 <HAL_ADC_MspInit+0xe8>)
 800353c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003540:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003542:	4b13      	ldr	r3, [pc, #76]	@ (8003590 <HAL_ADC_MspInit+0xe8>)
 8003544:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003548:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800354a:	4b11      	ldr	r3, [pc, #68]	@ (8003590 <HAL_ADC_MspInit+0xe8>)
 800354c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003550:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003552:	4b0f      	ldr	r3, [pc, #60]	@ (8003590 <HAL_ADC_MspInit+0xe8>)
 8003554:	2200      	movs	r2, #0
 8003556:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003558:	4b0d      	ldr	r3, [pc, #52]	@ (8003590 <HAL_ADC_MspInit+0xe8>)
 800355a:	2200      	movs	r2, #0
 800355c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800355e:	480c      	ldr	r0, [pc, #48]	@ (8003590 <HAL_ADC_MspInit+0xe8>)
 8003560:	f001 f858 	bl	8004614 <HAL_DMA_Init>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d001      	beq.n	800356e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800356a:	f7ff fd31 	bl	8002fd0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a07      	ldr	r2, [pc, #28]	@ (8003590 <HAL_ADC_MspInit+0xe8>)
 8003572:	639a      	str	r2, [r3, #56]	@ 0x38
 8003574:	4a06      	ldr	r2, [pc, #24]	@ (8003590 <HAL_ADC_MspInit+0xe8>)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800357a:	bf00      	nop
 800357c:	3728      	adds	r7, #40	@ 0x28
 800357e:	46bd      	mov	sp, r7
 8003580:	bd80      	pop	{r7, pc}
 8003582:	bf00      	nop
 8003584:	40012000 	.word	0x40012000
 8003588:	40023800 	.word	0x40023800
 800358c:	40020000 	.word	0x40020000
 8003590:	200006a8 	.word	0x200006a8
 8003594:	40026410 	.word	0x40026410

08003598 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b08a      	sub	sp, #40	@ 0x28
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035a0:	f107 0314 	add.w	r3, r7, #20
 80035a4:	2200      	movs	r2, #0
 80035a6:	601a      	str	r2, [r3, #0]
 80035a8:	605a      	str	r2, [r3, #4]
 80035aa:	609a      	str	r2, [r3, #8]
 80035ac:	60da      	str	r2, [r3, #12]
 80035ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a19      	ldr	r2, [pc, #100]	@ (800361c <HAL_I2C_MspInit+0x84>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d12b      	bne.n	8003612 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035ba:	2300      	movs	r3, #0
 80035bc:	613b      	str	r3, [r7, #16]
 80035be:	4b18      	ldr	r3, [pc, #96]	@ (8003620 <HAL_I2C_MspInit+0x88>)
 80035c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035c2:	4a17      	ldr	r2, [pc, #92]	@ (8003620 <HAL_I2C_MspInit+0x88>)
 80035c4:	f043 0302 	orr.w	r3, r3, #2
 80035c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80035ca:	4b15      	ldr	r3, [pc, #84]	@ (8003620 <HAL_I2C_MspInit+0x88>)
 80035cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	613b      	str	r3, [r7, #16]
 80035d4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80035d6:	23c0      	movs	r3, #192	@ 0xc0
 80035d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035da:	2312      	movs	r3, #18
 80035dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035de:	2300      	movs	r3, #0
 80035e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035e2:	2303      	movs	r3, #3
 80035e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80035e6:	2304      	movs	r3, #4
 80035e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035ea:	f107 0314 	add.w	r3, r7, #20
 80035ee:	4619      	mov	r1, r3
 80035f0:	480c      	ldr	r0, [pc, #48]	@ (8003624 <HAL_I2C_MspInit+0x8c>)
 80035f2:	f001 fc11 	bl	8004e18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80035f6:	2300      	movs	r3, #0
 80035f8:	60fb      	str	r3, [r7, #12]
 80035fa:	4b09      	ldr	r3, [pc, #36]	@ (8003620 <HAL_I2C_MspInit+0x88>)
 80035fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035fe:	4a08      	ldr	r2, [pc, #32]	@ (8003620 <HAL_I2C_MspInit+0x88>)
 8003600:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003604:	6413      	str	r3, [r2, #64]	@ 0x40
 8003606:	4b06      	ldr	r3, [pc, #24]	@ (8003620 <HAL_I2C_MspInit+0x88>)
 8003608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800360a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800360e:	60fb      	str	r3, [r7, #12]
 8003610:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003612:	bf00      	nop
 8003614:	3728      	adds	r7, #40	@ 0x28
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	40005400 	.word	0x40005400
 8003620:	40023800 	.word	0x40023800
 8003624:	40020400 	.word	0x40020400

08003628 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a40      	ldr	r2, [pc, #256]	@ (8003738 <HAL_TIM_PWM_MspInit+0x110>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d13e      	bne.n	80036b8 <HAL_TIM_PWM_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800363a:	2300      	movs	r3, #0
 800363c:	617b      	str	r3, [r7, #20]
 800363e:	4b3f      	ldr	r3, [pc, #252]	@ (800373c <HAL_TIM_PWM_MspInit+0x114>)
 8003640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003642:	4a3e      	ldr	r2, [pc, #248]	@ (800373c <HAL_TIM_PWM_MspInit+0x114>)
 8003644:	f043 0302 	orr.w	r3, r3, #2
 8003648:	6413      	str	r3, [r2, #64]	@ 0x40
 800364a:	4b3c      	ldr	r3, [pc, #240]	@ (800373c <HAL_TIM_PWM_MspInit+0x114>)
 800364c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	617b      	str	r3, [r7, #20]
 8003654:	697b      	ldr	r3, [r7, #20]

    /* TIM3 DMA Init */
    /* TIM3_CH2 Init */
    hdma_tim3_ch2.Instance = DMA1_Stream5;
 8003656:	4b3a      	ldr	r3, [pc, #232]	@ (8003740 <HAL_TIM_PWM_MspInit+0x118>)
 8003658:	4a3a      	ldr	r2, [pc, #232]	@ (8003744 <HAL_TIM_PWM_MspInit+0x11c>)
 800365a:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Channel = DMA_CHANNEL_5;
 800365c:	4b38      	ldr	r3, [pc, #224]	@ (8003740 <HAL_TIM_PWM_MspInit+0x118>)
 800365e:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8003662:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003664:	4b36      	ldr	r3, [pc, #216]	@ (8003740 <HAL_TIM_PWM_MspInit+0x118>)
 8003666:	2240      	movs	r2, #64	@ 0x40
 8003668:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 800366a:	4b35      	ldr	r3, [pc, #212]	@ (8003740 <HAL_TIM_PWM_MspInit+0x118>)
 800366c:	2200      	movs	r2, #0
 800366e:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8003670:	4b33      	ldr	r3, [pc, #204]	@ (8003740 <HAL_TIM_PWM_MspInit+0x118>)
 8003672:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003676:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003678:	4b31      	ldr	r3, [pc, #196]	@ (8003740 <HAL_TIM_PWM_MspInit+0x118>)
 800367a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800367e:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003680:	4b2f      	ldr	r3, [pc, #188]	@ (8003740 <HAL_TIM_PWM_MspInit+0x118>)
 8003682:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003686:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 8003688:	4b2d      	ldr	r3, [pc, #180]	@ (8003740 <HAL_TIM_PWM_MspInit+0x118>)
 800368a:	2200      	movs	r2, #0
 800368c:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 800368e:	4b2c      	ldr	r3, [pc, #176]	@ (8003740 <HAL_TIM_PWM_MspInit+0x118>)
 8003690:	2200      	movs	r2, #0
 8003692:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003694:	4b2a      	ldr	r3, [pc, #168]	@ (8003740 <HAL_TIM_PWM_MspInit+0x118>)
 8003696:	2200      	movs	r2, #0
 8003698:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 800369a:	4829      	ldr	r0, [pc, #164]	@ (8003740 <HAL_TIM_PWM_MspInit+0x118>)
 800369c:	f000 ffba 	bl	8004614 <HAL_DMA_Init>
 80036a0:	4603      	mov	r3, r0
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d001      	beq.n	80036aa <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 80036a6:	f7ff fc93 	bl	8002fd0 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	4a24      	ldr	r2, [pc, #144]	@ (8003740 <HAL_TIM_PWM_MspInit+0x118>)
 80036ae:	629a      	str	r2, [r3, #40]	@ 0x28
 80036b0:	4a23      	ldr	r2, [pc, #140]	@ (8003740 <HAL_TIM_PWM_MspInit+0x118>)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 80036b6:	e03a      	b.n	800372e <HAL_TIM_PWM_MspInit+0x106>
  else if(htim_pwm->Instance==TIM4)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a22      	ldr	r2, [pc, #136]	@ (8003748 <HAL_TIM_PWM_MspInit+0x120>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d10e      	bne.n	80036e0 <HAL_TIM_PWM_MspInit+0xb8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80036c2:	2300      	movs	r3, #0
 80036c4:	613b      	str	r3, [r7, #16]
 80036c6:	4b1d      	ldr	r3, [pc, #116]	@ (800373c <HAL_TIM_PWM_MspInit+0x114>)
 80036c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ca:	4a1c      	ldr	r2, [pc, #112]	@ (800373c <HAL_TIM_PWM_MspInit+0x114>)
 80036cc:	f043 0304 	orr.w	r3, r3, #4
 80036d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80036d2:	4b1a      	ldr	r3, [pc, #104]	@ (800373c <HAL_TIM_PWM_MspInit+0x114>)
 80036d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d6:	f003 0304 	and.w	r3, r3, #4
 80036da:	613b      	str	r3, [r7, #16]
 80036dc:	693b      	ldr	r3, [r7, #16]
}
 80036de:	e026      	b.n	800372e <HAL_TIM_PWM_MspInit+0x106>
  else if(htim_pwm->Instance==TIM5)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a19      	ldr	r2, [pc, #100]	@ (800374c <HAL_TIM_PWM_MspInit+0x124>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d10e      	bne.n	8003708 <HAL_TIM_PWM_MspInit+0xe0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80036ea:	2300      	movs	r3, #0
 80036ec:	60fb      	str	r3, [r7, #12]
 80036ee:	4b13      	ldr	r3, [pc, #76]	@ (800373c <HAL_TIM_PWM_MspInit+0x114>)
 80036f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036f2:	4a12      	ldr	r2, [pc, #72]	@ (800373c <HAL_TIM_PWM_MspInit+0x114>)
 80036f4:	f043 0308 	orr.w	r3, r3, #8
 80036f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80036fa:	4b10      	ldr	r3, [pc, #64]	@ (800373c <HAL_TIM_PWM_MspInit+0x114>)
 80036fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036fe:	f003 0308 	and.w	r3, r3, #8
 8003702:	60fb      	str	r3, [r7, #12]
 8003704:	68fb      	ldr	r3, [r7, #12]
}
 8003706:	e012      	b.n	800372e <HAL_TIM_PWM_MspInit+0x106>
  else if(htim_pwm->Instance==TIM9)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a10      	ldr	r2, [pc, #64]	@ (8003750 <HAL_TIM_PWM_MspInit+0x128>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d10d      	bne.n	800372e <HAL_TIM_PWM_MspInit+0x106>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003712:	2300      	movs	r3, #0
 8003714:	60bb      	str	r3, [r7, #8]
 8003716:	4b09      	ldr	r3, [pc, #36]	@ (800373c <HAL_TIM_PWM_MspInit+0x114>)
 8003718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800371a:	4a08      	ldr	r2, [pc, #32]	@ (800373c <HAL_TIM_PWM_MspInit+0x114>)
 800371c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003720:	6453      	str	r3, [r2, #68]	@ 0x44
 8003722:	4b06      	ldr	r3, [pc, #24]	@ (800373c <HAL_TIM_PWM_MspInit+0x114>)
 8003724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003726:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800372a:	60bb      	str	r3, [r7, #8]
 800372c:	68bb      	ldr	r3, [r7, #8]
}
 800372e:	bf00      	nop
 8003730:	3718      	adds	r7, #24
 8003732:	46bd      	mov	sp, r7
 8003734:	bd80      	pop	{r7, pc}
 8003736:	bf00      	nop
 8003738:	40000400 	.word	0x40000400
 800373c:	40023800 	.word	0x40023800
 8003740:	2000087c 	.word	0x2000087c
 8003744:	40026088 	.word	0x40026088
 8003748:	40000800 	.word	0x40000800
 800374c:	40000c00 	.word	0x40000c00
 8003750:	40014000 	.word	0x40014000

08003754 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b08c      	sub	sp, #48	@ 0x30
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800375c:	f107 031c 	add.w	r3, r7, #28
 8003760:	2200      	movs	r2, #0
 8003762:	601a      	str	r2, [r3, #0]
 8003764:	605a      	str	r2, [r3, #4]
 8003766:	609a      	str	r2, [r3, #8]
 8003768:	60da      	str	r2, [r3, #12]
 800376a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a48      	ldr	r2, [pc, #288]	@ (8003894 <HAL_TIM_MspPostInit+0x140>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d11e      	bne.n	80037b4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003776:	2300      	movs	r3, #0
 8003778:	61bb      	str	r3, [r7, #24]
 800377a:	4b47      	ldr	r3, [pc, #284]	@ (8003898 <HAL_TIM_MspPostInit+0x144>)
 800377c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800377e:	4a46      	ldr	r2, [pc, #280]	@ (8003898 <HAL_TIM_MspPostInit+0x144>)
 8003780:	f043 0301 	orr.w	r3, r3, #1
 8003784:	6313      	str	r3, [r2, #48]	@ 0x30
 8003786:	4b44      	ldr	r3, [pc, #272]	@ (8003898 <HAL_TIM_MspPostInit+0x144>)
 8003788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	61bb      	str	r3, [r7, #24]
 8003790:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003792:	2380      	movs	r3, #128	@ 0x80
 8003794:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003796:	2302      	movs	r3, #2
 8003798:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800379a:	2300      	movs	r3, #0
 800379c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800379e:	2300      	movs	r3, #0
 80037a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80037a2:	2302      	movs	r3, #2
 80037a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037a6:	f107 031c 	add.w	r3, r7, #28
 80037aa:	4619      	mov	r1, r3
 80037ac:	483b      	ldr	r0, [pc, #236]	@ (800389c <HAL_TIM_MspPostInit+0x148>)
 80037ae:	f001 fb33 	bl	8004e18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 80037b2:	e06b      	b.n	800388c <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM4)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a39      	ldr	r2, [pc, #228]	@ (80038a0 <HAL_TIM_MspPostInit+0x14c>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d11f      	bne.n	80037fe <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80037be:	2300      	movs	r3, #0
 80037c0:	617b      	str	r3, [r7, #20]
 80037c2:	4b35      	ldr	r3, [pc, #212]	@ (8003898 <HAL_TIM_MspPostInit+0x144>)
 80037c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037c6:	4a34      	ldr	r2, [pc, #208]	@ (8003898 <HAL_TIM_MspPostInit+0x144>)
 80037c8:	f043 0308 	orr.w	r3, r3, #8
 80037cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80037ce:	4b32      	ldr	r3, [pc, #200]	@ (8003898 <HAL_TIM_MspPostInit+0x144>)
 80037d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d2:	f003 0308 	and.w	r3, r3, #8
 80037d6:	617b      	str	r3, [r7, #20]
 80037d8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80037da:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80037de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037e0:	2302      	movs	r3, #2
 80037e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037e4:	2300      	movs	r3, #0
 80037e6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037e8:	2300      	movs	r3, #0
 80037ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80037ec:	2302      	movs	r3, #2
 80037ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80037f0:	f107 031c 	add.w	r3, r7, #28
 80037f4:	4619      	mov	r1, r3
 80037f6:	482b      	ldr	r0, [pc, #172]	@ (80038a4 <HAL_TIM_MspPostInit+0x150>)
 80037f8:	f001 fb0e 	bl	8004e18 <HAL_GPIO_Init>
}
 80037fc:	e046      	b.n	800388c <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM5)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a29      	ldr	r2, [pc, #164]	@ (80038a8 <HAL_TIM_MspPostInit+0x154>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d11e      	bne.n	8003846 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003808:	2300      	movs	r3, #0
 800380a:	613b      	str	r3, [r7, #16]
 800380c:	4b22      	ldr	r3, [pc, #136]	@ (8003898 <HAL_TIM_MspPostInit+0x144>)
 800380e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003810:	4a21      	ldr	r2, [pc, #132]	@ (8003898 <HAL_TIM_MspPostInit+0x144>)
 8003812:	f043 0301 	orr.w	r3, r3, #1
 8003816:	6313      	str	r3, [r2, #48]	@ 0x30
 8003818:	4b1f      	ldr	r3, [pc, #124]	@ (8003898 <HAL_TIM_MspPostInit+0x144>)
 800381a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800381c:	f003 0301 	and.w	r3, r3, #1
 8003820:	613b      	str	r3, [r7, #16]
 8003822:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003824:	230f      	movs	r3, #15
 8003826:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003828:	2302      	movs	r3, #2
 800382a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800382c:	2300      	movs	r3, #0
 800382e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003830:	2300      	movs	r3, #0
 8003832:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003834:	2302      	movs	r3, #2
 8003836:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003838:	f107 031c 	add.w	r3, r7, #28
 800383c:	4619      	mov	r1, r3
 800383e:	4817      	ldr	r0, [pc, #92]	@ (800389c <HAL_TIM_MspPostInit+0x148>)
 8003840:	f001 faea 	bl	8004e18 <HAL_GPIO_Init>
}
 8003844:	e022      	b.n	800388c <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM9)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a18      	ldr	r2, [pc, #96]	@ (80038ac <HAL_TIM_MspPostInit+0x158>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d11d      	bne.n	800388c <HAL_TIM_MspPostInit+0x138>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003850:	2300      	movs	r3, #0
 8003852:	60fb      	str	r3, [r7, #12]
 8003854:	4b10      	ldr	r3, [pc, #64]	@ (8003898 <HAL_TIM_MspPostInit+0x144>)
 8003856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003858:	4a0f      	ldr	r2, [pc, #60]	@ (8003898 <HAL_TIM_MspPostInit+0x144>)
 800385a:	f043 0310 	orr.w	r3, r3, #16
 800385e:	6313      	str	r3, [r2, #48]	@ 0x30
 8003860:	4b0d      	ldr	r3, [pc, #52]	@ (8003898 <HAL_TIM_MspPostInit+0x144>)
 8003862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003864:	f003 0310 	and.w	r3, r3, #16
 8003868:	60fb      	str	r3, [r7, #12]
 800386a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800386c:	2320      	movs	r3, #32
 800386e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003870:	2302      	movs	r3, #2
 8003872:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003874:	2300      	movs	r3, #0
 8003876:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003878:	2300      	movs	r3, #0
 800387a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800387c:	2303      	movs	r3, #3
 800387e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003880:	f107 031c 	add.w	r3, r7, #28
 8003884:	4619      	mov	r1, r3
 8003886:	480a      	ldr	r0, [pc, #40]	@ (80038b0 <HAL_TIM_MspPostInit+0x15c>)
 8003888:	f001 fac6 	bl	8004e18 <HAL_GPIO_Init>
}
 800388c:	bf00      	nop
 800388e:	3730      	adds	r7, #48	@ 0x30
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}
 8003894:	40000400 	.word	0x40000400
 8003898:	40023800 	.word	0x40023800
 800389c:	40020000 	.word	0x40020000
 80038a0:	40000800 	.word	0x40000800
 80038a4:	40020c00 	.word	0x40020c00
 80038a8:	40000c00 	.word	0x40000c00
 80038ac:	40014000 	.word	0x40014000
 80038b0:	40021000 	.word	0x40021000

080038b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b08a      	sub	sp, #40	@ 0x28
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038bc:	f107 0314 	add.w	r3, r7, #20
 80038c0:	2200      	movs	r2, #0
 80038c2:	601a      	str	r2, [r3, #0]
 80038c4:	605a      	str	r2, [r3, #4]
 80038c6:	609a      	str	r2, [r3, #8]
 80038c8:	60da      	str	r2, [r3, #12]
 80038ca:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a1d      	ldr	r2, [pc, #116]	@ (8003948 <HAL_UART_MspInit+0x94>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d133      	bne.n	800393e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80038d6:	2300      	movs	r3, #0
 80038d8:	613b      	str	r3, [r7, #16]
 80038da:	4b1c      	ldr	r3, [pc, #112]	@ (800394c <HAL_UART_MspInit+0x98>)
 80038dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038de:	4a1b      	ldr	r2, [pc, #108]	@ (800394c <HAL_UART_MspInit+0x98>)
 80038e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80038e6:	4b19      	ldr	r3, [pc, #100]	@ (800394c <HAL_UART_MspInit+0x98>)
 80038e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ee:	613b      	str	r3, [r7, #16]
 80038f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80038f2:	2300      	movs	r3, #0
 80038f4:	60fb      	str	r3, [r7, #12]
 80038f6:	4b15      	ldr	r3, [pc, #84]	@ (800394c <HAL_UART_MspInit+0x98>)
 80038f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038fa:	4a14      	ldr	r2, [pc, #80]	@ (800394c <HAL_UART_MspInit+0x98>)
 80038fc:	f043 0308 	orr.w	r3, r3, #8
 8003900:	6313      	str	r3, [r2, #48]	@ 0x30
 8003902:	4b12      	ldr	r3, [pc, #72]	@ (800394c <HAL_UART_MspInit+0x98>)
 8003904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003906:	f003 0308 	and.w	r3, r3, #8
 800390a:	60fb      	str	r3, [r7, #12]
 800390c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800390e:	2360      	movs	r3, #96	@ 0x60
 8003910:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003912:	2302      	movs	r3, #2
 8003914:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003916:	2300      	movs	r3, #0
 8003918:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800391a:	2303      	movs	r3, #3
 800391c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800391e:	2307      	movs	r3, #7
 8003920:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003922:	f107 0314 	add.w	r3, r7, #20
 8003926:	4619      	mov	r1, r3
 8003928:	4809      	ldr	r0, [pc, #36]	@ (8003950 <HAL_UART_MspInit+0x9c>)
 800392a:	f001 fa75 	bl	8004e18 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 800392e:	2200      	movs	r2, #0
 8003930:	2105      	movs	r1, #5
 8003932:	2026      	movs	r0, #38	@ 0x26
 8003934:	f000 fe44 	bl	80045c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003938:	2026      	movs	r0, #38	@ 0x26
 800393a:	f000 fe5d 	bl	80045f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800393e:	bf00      	nop
 8003940:	3728      	adds	r7, #40	@ 0x28
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	40004400 	.word	0x40004400
 800394c:	40023800 	.word	0x40023800
 8003950:	40020c00 	.word	0x40020c00

08003954 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b08e      	sub	sp, #56	@ 0x38
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800395c:	2300      	movs	r3, #0
 800395e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003960:	2300      	movs	r3, #0
 8003962:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8003964:	2300      	movs	r3, #0
 8003966:	60fb      	str	r3, [r7, #12]
 8003968:	4b33      	ldr	r3, [pc, #204]	@ (8003a38 <HAL_InitTick+0xe4>)
 800396a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800396c:	4a32      	ldr	r2, [pc, #200]	@ (8003a38 <HAL_InitTick+0xe4>)
 800396e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003972:	6413      	str	r3, [r2, #64]	@ 0x40
 8003974:	4b30      	ldr	r3, [pc, #192]	@ (8003a38 <HAL_InitTick+0xe4>)
 8003976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003978:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800397c:	60fb      	str	r3, [r7, #12]
 800397e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003980:	f107 0210 	add.w	r2, r7, #16
 8003984:	f107 0314 	add.w	r3, r7, #20
 8003988:	4611      	mov	r1, r2
 800398a:	4618      	mov	r0, r3
 800398c:	f004 faf4 	bl	8007f78 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003990:	6a3b      	ldr	r3, [r7, #32]
 8003992:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003996:	2b00      	cmp	r3, #0
 8003998:	d103      	bne.n	80039a2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800399a:	f004 fac5 	bl	8007f28 <HAL_RCC_GetPCLK1Freq>
 800399e:	6378      	str	r0, [r7, #52]	@ 0x34
 80039a0:	e004      	b.n	80039ac <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80039a2:	f004 fac1 	bl	8007f28 <HAL_RCC_GetPCLK1Freq>
 80039a6:	4603      	mov	r3, r0
 80039a8:	005b      	lsls	r3, r3, #1
 80039aa:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80039ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80039ae:	4a23      	ldr	r2, [pc, #140]	@ (8003a3c <HAL_InitTick+0xe8>)
 80039b0:	fba2 2303 	umull	r2, r3, r2, r3
 80039b4:	0c9b      	lsrs	r3, r3, #18
 80039b6:	3b01      	subs	r3, #1
 80039b8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 80039ba:	4b21      	ldr	r3, [pc, #132]	@ (8003a40 <HAL_InitTick+0xec>)
 80039bc:	4a21      	ldr	r2, [pc, #132]	@ (8003a44 <HAL_InitTick+0xf0>)
 80039be:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 80039c0:	4b1f      	ldr	r3, [pc, #124]	@ (8003a40 <HAL_InitTick+0xec>)
 80039c2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80039c6:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 80039c8:	4a1d      	ldr	r2, [pc, #116]	@ (8003a40 <HAL_InitTick+0xec>)
 80039ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039cc:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 80039ce:	4b1c      	ldr	r3, [pc, #112]	@ (8003a40 <HAL_InitTick+0xec>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039d4:	4b1a      	ldr	r3, [pc, #104]	@ (8003a40 <HAL_InitTick+0xec>)
 80039d6:	2200      	movs	r2, #0
 80039d8:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039da:	4b19      	ldr	r3, [pc, #100]	@ (8003a40 <HAL_InitTick+0xec>)
 80039dc:	2200      	movs	r2, #0
 80039de:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 80039e0:	4817      	ldr	r0, [pc, #92]	@ (8003a40 <HAL_InitTick+0xec>)
 80039e2:	f004 fafb 	bl	8007fdc <HAL_TIM_Base_Init>
 80039e6:	4603      	mov	r3, r0
 80039e8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80039ec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d11b      	bne.n	8003a2c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 80039f4:	4812      	ldr	r0, [pc, #72]	@ (8003a40 <HAL_InitTick+0xec>)
 80039f6:	f004 fb4b 	bl	8008090 <HAL_TIM_Base_Start_IT>
 80039fa:	4603      	mov	r3, r0
 80039fc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8003a00:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d111      	bne.n	8003a2c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003a08:	202d      	movs	r0, #45	@ 0x2d
 8003a0a:	f000 fdf5 	bl	80045f8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2b0f      	cmp	r3, #15
 8003a12:	d808      	bhi.n	8003a26 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8003a14:	2200      	movs	r2, #0
 8003a16:	6879      	ldr	r1, [r7, #4]
 8003a18:	202d      	movs	r0, #45	@ 0x2d
 8003a1a:	f000 fdd1 	bl	80045c0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003a1e:	4a0a      	ldr	r2, [pc, #40]	@ (8003a48 <HAL_InitTick+0xf4>)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6013      	str	r3, [r2, #0]
 8003a24:	e002      	b.n	8003a2c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003a2c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3738      	adds	r7, #56	@ 0x38
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	40023800 	.word	0x40023800
 8003a3c:	431bde83 	.word	0x431bde83
 8003a40:	20000b5c 	.word	0x20000b5c
 8003a44:	40002000 	.word	0x40002000
 8003a48:	20000054 	.word	0x20000054

08003a4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003a50:	bf00      	nop
 8003a52:	e7fd      	b.n	8003a50 <NMI_Handler+0x4>

08003a54 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a54:	b480      	push	{r7}
 8003a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a58:	bf00      	nop
 8003a5a:	e7fd      	b.n	8003a58 <HardFault_Handler+0x4>

08003a5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a60:	bf00      	nop
 8003a62:	e7fd      	b.n	8003a60 <MemManage_Handler+0x4>

08003a64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a64:	b480      	push	{r7}
 8003a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a68:	bf00      	nop
 8003a6a:	e7fd      	b.n	8003a68 <BusFault_Handler+0x4>

08003a6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a70:	bf00      	nop
 8003a72:	e7fd      	b.n	8003a70 <UsageFault_Handler+0x4>

08003a74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a78:	bf00      	nop
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a80:	4770      	bx	lr
	...

08003a84 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8003a88:	4802      	ldr	r0, [pc, #8]	@ (8003a94 <DMA1_Stream5_IRQHandler+0x10>)
 8003a8a:	f000 ff5b 	bl	8004944 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003a8e:	bf00      	nop
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	2000087c 	.word	0x2000087c

08003a98 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003a9c:	4802      	ldr	r0, [pc, #8]	@ (8003aa8 <USART2_IRQHandler+0x10>)
 8003a9e:	f005 fd57 	bl	8009550 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003aa2:	bf00      	nop
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	200008dc 	.word	0x200008dc

08003aac <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8003ab0:	4802      	ldr	r0, [pc, #8]	@ (8003abc <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8003ab2:	f004 ff0f 	bl	80088d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8003ab6:	bf00      	nop
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	20000b5c 	.word	0x20000b5c

08003ac0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003ac4:	4802      	ldr	r0, [pc, #8]	@ (8003ad0 <DMA2_Stream0_IRQHandler+0x10>)
 8003ac6:	f000 ff3d 	bl	8004944 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003aca:	bf00      	nop
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	200006a8 	.word	0x200006a8

08003ad4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003ad8:	4802      	ldr	r0, [pc, #8]	@ (8003ae4 <OTG_FS_IRQHandler+0x10>)
 8003ada:	f002 fca9 	bl	8006430 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003ade:	bf00      	nop
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	20005ddc 	.word	0x20005ddc

08003ae8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003aec:	4b06      	ldr	r3, [pc, #24]	@ (8003b08 <SystemInit+0x20>)
 8003aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003af2:	4a05      	ldr	r2, [pc, #20]	@ (8003b08 <SystemInit+0x20>)
 8003af4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003af8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003afc:	bf00      	nop
 8003afe:	46bd      	mov	sp, r7
 8003b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b04:	4770      	bx	lr
 8003b06:	bf00      	nop
 8003b08:	e000ed00 	.word	0xe000ed00

08003b0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003b0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003b44 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003b10:	f7ff ffea 	bl	8003ae8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003b14:	480c      	ldr	r0, [pc, #48]	@ (8003b48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003b16:	490d      	ldr	r1, [pc, #52]	@ (8003b4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003b18:	4a0d      	ldr	r2, [pc, #52]	@ (8003b50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003b1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b1c:	e002      	b.n	8003b24 <LoopCopyDataInit>

08003b1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b22:	3304      	adds	r3, #4

08003b24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b28:	d3f9      	bcc.n	8003b1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b2a:	4a0a      	ldr	r2, [pc, #40]	@ (8003b54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003b2c:	4c0a      	ldr	r4, [pc, #40]	@ (8003b58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003b2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b30:	e001      	b.n	8003b36 <LoopFillZerobss>

08003b32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b34:	3204      	adds	r2, #4

08003b36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b38:	d3fb      	bcc.n	8003b32 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003b3a:	f00b fea3 	bl	800f884 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b3e:	f7fd fc49 	bl	80013d4 <main>
  bx  lr    
 8003b42:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003b44:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003b48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b4c:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 8003b50:	0800fb14 	.word	0x0800fb14
  ldr r2, =_sbss
 8003b54:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8003b58:	200064e0 	.word	0x200064e0

08003b5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b5c:	e7fe      	b.n	8003b5c <ADC_IRQHandler>
	...

08003b60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b64:	4b0e      	ldr	r3, [pc, #56]	@ (8003ba0 <HAL_Init+0x40>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a0d      	ldr	r2, [pc, #52]	@ (8003ba0 <HAL_Init+0x40>)
 8003b6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b70:	4b0b      	ldr	r3, [pc, #44]	@ (8003ba0 <HAL_Init+0x40>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a0a      	ldr	r2, [pc, #40]	@ (8003ba0 <HAL_Init+0x40>)
 8003b76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003b7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b7c:	4b08      	ldr	r3, [pc, #32]	@ (8003ba0 <HAL_Init+0x40>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a07      	ldr	r2, [pc, #28]	@ (8003ba0 <HAL_Init+0x40>)
 8003b82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b88:	2003      	movs	r0, #3
 8003b8a:	f000 fd0e 	bl	80045aa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b8e:	200f      	movs	r0, #15
 8003b90:	f7ff fee0 	bl	8003954 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b94:	f7ff fc5c 	bl	8003450 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	bd80      	pop	{r7, pc}
 8003b9e:	bf00      	nop
 8003ba0:	40023c00 	.word	0x40023c00

08003ba4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ba8:	4b06      	ldr	r3, [pc, #24]	@ (8003bc4 <HAL_IncTick+0x20>)
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	461a      	mov	r2, r3
 8003bae:	4b06      	ldr	r3, [pc, #24]	@ (8003bc8 <HAL_IncTick+0x24>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	4a04      	ldr	r2, [pc, #16]	@ (8003bc8 <HAL_IncTick+0x24>)
 8003bb6:	6013      	str	r3, [r2, #0]
}
 8003bb8:	bf00      	nop
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	20000058 	.word	0x20000058
 8003bc8:	20000ba4 	.word	0x20000ba4

08003bcc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
  return uwTick;
 8003bd0:	4b03      	ldr	r3, [pc, #12]	@ (8003be0 <HAL_GetTick+0x14>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	20000ba4 	.word	0x20000ba4

08003be4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003bec:	f7ff ffee 	bl	8003bcc <HAL_GetTick>
 8003bf0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003bfc:	d005      	beq.n	8003c0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003bfe:	4b0a      	ldr	r3, [pc, #40]	@ (8003c28 <HAL_Delay+0x44>)
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	461a      	mov	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	4413      	add	r3, r2
 8003c08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c0a:	bf00      	nop
 8003c0c:	f7ff ffde 	bl	8003bcc <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d8f7      	bhi.n	8003c0c <HAL_Delay+0x28>
  {
  }
}
 8003c1c:	bf00      	nop
 8003c1e:	bf00      	nop
 8003c20:	3710      	adds	r7, #16
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
 8003c26:	bf00      	nop
 8003c28:	20000058 	.word	0x20000058

08003c2c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b084      	sub	sp, #16
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c34:	2300      	movs	r3, #0
 8003c36:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e033      	b.n	8003caa <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d109      	bne.n	8003c5e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f7ff fc2c 	bl	80034a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c62:	f003 0310 	and.w	r3, r3, #16
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d118      	bne.n	8003c9c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c6e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003c72:	f023 0302 	bic.w	r3, r3, #2
 8003c76:	f043 0202 	orr.w	r2, r3, #2
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 fa68 	bl	8004154 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c8e:	f023 0303 	bic.w	r3, r3, #3
 8003c92:	f043 0201 	orr.w	r2, r3, #1
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	641a      	str	r2, [r3, #64]	@ 0x40
 8003c9a:	e001      	b.n	8003ca0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3710      	adds	r7, #16
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
	...

08003cb4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b086      	sub	sp, #24
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d101      	bne.n	8003cd2 <HAL_ADC_Start_DMA+0x1e>
 8003cce:	2302      	movs	r3, #2
 8003cd0:	e0e9      	b.n	8003ea6 <HAL_ADC_Start_DMA+0x1f2>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f003 0301 	and.w	r3, r3, #1
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d018      	beq.n	8003d1a <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	689a      	ldr	r2, [r3, #8]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f042 0201 	orr.w	r2, r2, #1
 8003cf6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003cf8:	4b6d      	ldr	r3, [pc, #436]	@ (8003eb0 <HAL_ADC_Start_DMA+0x1fc>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a6d      	ldr	r2, [pc, #436]	@ (8003eb4 <HAL_ADC_Start_DMA+0x200>)
 8003cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8003d02:	0c9a      	lsrs	r2, r3, #18
 8003d04:	4613      	mov	r3, r2
 8003d06:	005b      	lsls	r3, r3, #1
 8003d08:	4413      	add	r3, r2
 8003d0a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003d0c:	e002      	b.n	8003d14 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	3b01      	subs	r3, #1
 8003d12:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1f9      	bne.n	8003d0e <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d28:	d107      	bne.n	8003d3a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	689a      	ldr	r2, [r3, #8]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003d38:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	f003 0301 	and.w	r3, r3, #1
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	f040 80a1 	bne.w	8003e8c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d4e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8003d52:	f023 0301 	bic.w	r3, r3, #1
 8003d56:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d007      	beq.n	8003d7c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d70:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003d74:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003d84:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003d88:	d106      	bne.n	8003d98 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d8e:	f023 0206 	bic.w	r2, r3, #6
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	645a      	str	r2, [r3, #68]	@ 0x44
 8003d96:	e002      	b.n	8003d9e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003da6:	4b44      	ldr	r3, [pc, #272]	@ (8003eb8 <HAL_ADC_Start_DMA+0x204>)
 8003da8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dae:	4a43      	ldr	r2, [pc, #268]	@ (8003ebc <HAL_ADC_Start_DMA+0x208>)
 8003db0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003db6:	4a42      	ldr	r2, [pc, #264]	@ (8003ec0 <HAL_ADC_Start_DMA+0x20c>)
 8003db8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dbe:	4a41      	ldr	r2, [pc, #260]	@ (8003ec4 <HAL_ADC_Start_DMA+0x210>)
 8003dc0:	64da      	str	r2, [r3, #76]	@ 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003dca:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	685a      	ldr	r2, [r3, #4]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8003dda:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	689a      	ldr	r2, [r3, #8]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003dea:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	334c      	adds	r3, #76	@ 0x4c
 8003df6:	4619      	mov	r1, r3
 8003df8:	68ba      	ldr	r2, [r7, #8]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f000 fcb8 	bl	8004770 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f003 031f 	and.w	r3, r3, #31
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d12a      	bne.n	8003e62 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	4a2d      	ldr	r2, [pc, #180]	@ (8003ec8 <HAL_ADC_Start_DMA+0x214>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d015      	beq.n	8003e42 <HAL_ADC_Start_DMA+0x18e>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	4a2c      	ldr	r2, [pc, #176]	@ (8003ecc <HAL_ADC_Start_DMA+0x218>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d105      	bne.n	8003e2c <HAL_ADC_Start_DMA+0x178>
 8003e20:	4b25      	ldr	r3, [pc, #148]	@ (8003eb8 <HAL_ADC_Start_DMA+0x204>)
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	f003 031f 	and.w	r3, r3, #31
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d00a      	beq.n	8003e42 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a27      	ldr	r2, [pc, #156]	@ (8003ed0 <HAL_ADC_Start_DMA+0x21c>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d136      	bne.n	8003ea4 <HAL_ADC_Start_DMA+0x1f0>
 8003e36:	4b20      	ldr	r3, [pc, #128]	@ (8003eb8 <HAL_ADC_Start_DMA+0x204>)
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f003 0310 	and.w	r3, r3, #16
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d130      	bne.n	8003ea4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d129      	bne.n	8003ea4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	689a      	ldr	r2, [r3, #8]
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003e5e:	609a      	str	r2, [r3, #8]
 8003e60:	e020      	b.n	8003ea4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a18      	ldr	r2, [pc, #96]	@ (8003ec8 <HAL_ADC_Start_DMA+0x214>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d11b      	bne.n	8003ea4 <HAL_ADC_Start_DMA+0x1f0>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d114      	bne.n	8003ea4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	689a      	ldr	r2, [r3, #8]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003e88:	609a      	str	r2, [r3, #8]
 8003e8a:	e00b      	b.n	8003ea4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e90:	f043 0210 	orr.w	r2, r3, #16
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e9c:	f043 0201 	orr.w	r2, r3, #1
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	3718      	adds	r7, #24
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	20000050 	.word	0x20000050
 8003eb4:	431bde83 	.word	0x431bde83
 8003eb8:	40012300 	.word	0x40012300
 8003ebc:	0800434d 	.word	0x0800434d
 8003ec0:	08004407 	.word	0x08004407
 8003ec4:	08004423 	.word	0x08004423
 8003ec8:	40012000 	.word	0x40012000
 8003ecc:	40012100 	.word	0x40012100
 8003ed0:	40012200 	.word	0x40012200

08003ed4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b083      	sub	sp, #12
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b083      	sub	sp, #12
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003f04:	bf00      	nop
 8003f06:	370c      	adds	r7, #12
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0e:	4770      	bx	lr

08003f10 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
 8003f18:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d101      	bne.n	8003f2c <HAL_ADC_ConfigChannel+0x1c>
 8003f28:	2302      	movs	r3, #2
 8003f2a:	e105      	b.n	8004138 <HAL_ADC_ConfigChannel+0x228>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2b09      	cmp	r3, #9
 8003f3a:	d925      	bls.n	8003f88 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68d9      	ldr	r1, [r3, #12]
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	461a      	mov	r2, r3
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	4413      	add	r3, r2
 8003f50:	3b1e      	subs	r3, #30
 8003f52:	2207      	movs	r2, #7
 8003f54:	fa02 f303 	lsl.w	r3, r2, r3
 8003f58:	43da      	mvns	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	400a      	ands	r2, r1
 8003f60:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68d9      	ldr	r1, [r3, #12]
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	689a      	ldr	r2, [r3, #8]
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	4618      	mov	r0, r3
 8003f74:	4603      	mov	r3, r0
 8003f76:	005b      	lsls	r3, r3, #1
 8003f78:	4403      	add	r3, r0
 8003f7a:	3b1e      	subs	r3, #30
 8003f7c:	409a      	lsls	r2, r3
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	430a      	orrs	r2, r1
 8003f84:	60da      	str	r2, [r3, #12]
 8003f86:	e022      	b.n	8003fce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	6919      	ldr	r1, [r3, #16]
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	461a      	mov	r2, r3
 8003f96:	4613      	mov	r3, r2
 8003f98:	005b      	lsls	r3, r3, #1
 8003f9a:	4413      	add	r3, r2
 8003f9c:	2207      	movs	r2, #7
 8003f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa2:	43da      	mvns	r2, r3
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	400a      	ands	r2, r1
 8003faa:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	6919      	ldr	r1, [r3, #16]
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	689a      	ldr	r2, [r3, #8]
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	005b      	lsls	r3, r3, #1
 8003fc2:	4403      	add	r3, r0
 8003fc4:	409a      	lsls	r2, r3
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	430a      	orrs	r2, r1
 8003fcc:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	685b      	ldr	r3, [r3, #4]
 8003fd2:	2b06      	cmp	r3, #6
 8003fd4:	d824      	bhi.n	8004020 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	685a      	ldr	r2, [r3, #4]
 8003fe0:	4613      	mov	r3, r2
 8003fe2:	009b      	lsls	r3, r3, #2
 8003fe4:	4413      	add	r3, r2
 8003fe6:	3b05      	subs	r3, #5
 8003fe8:	221f      	movs	r2, #31
 8003fea:	fa02 f303 	lsl.w	r3, r2, r3
 8003fee:	43da      	mvns	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	400a      	ands	r2, r1
 8003ff6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	b29b      	uxth	r3, r3
 8004004:	4618      	mov	r0, r3
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	685a      	ldr	r2, [r3, #4]
 800400a:	4613      	mov	r3, r2
 800400c:	009b      	lsls	r3, r3, #2
 800400e:	4413      	add	r3, r2
 8004010:	3b05      	subs	r3, #5
 8004012:	fa00 f203 	lsl.w	r2, r0, r3
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	430a      	orrs	r2, r1
 800401c:	635a      	str	r2, [r3, #52]	@ 0x34
 800401e:	e04c      	b.n	80040ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	2b0c      	cmp	r3, #12
 8004026:	d824      	bhi.n	8004072 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	685a      	ldr	r2, [r3, #4]
 8004032:	4613      	mov	r3, r2
 8004034:	009b      	lsls	r3, r3, #2
 8004036:	4413      	add	r3, r2
 8004038:	3b23      	subs	r3, #35	@ 0x23
 800403a:	221f      	movs	r2, #31
 800403c:	fa02 f303 	lsl.w	r3, r2, r3
 8004040:	43da      	mvns	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	400a      	ands	r2, r1
 8004048:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	b29b      	uxth	r3, r3
 8004056:	4618      	mov	r0, r3
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	685a      	ldr	r2, [r3, #4]
 800405c:	4613      	mov	r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	4413      	add	r3, r2
 8004062:	3b23      	subs	r3, #35	@ 0x23
 8004064:	fa00 f203 	lsl.w	r2, r0, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	430a      	orrs	r2, r1
 800406e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004070:	e023      	b.n	80040ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685a      	ldr	r2, [r3, #4]
 800407c:	4613      	mov	r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	4413      	add	r3, r2
 8004082:	3b41      	subs	r3, #65	@ 0x41
 8004084:	221f      	movs	r2, #31
 8004086:	fa02 f303 	lsl.w	r3, r2, r3
 800408a:	43da      	mvns	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	400a      	ands	r2, r1
 8004092:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	b29b      	uxth	r3, r3
 80040a0:	4618      	mov	r0, r3
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	685a      	ldr	r2, [r3, #4]
 80040a6:	4613      	mov	r3, r2
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	4413      	add	r3, r2
 80040ac:	3b41      	subs	r3, #65	@ 0x41
 80040ae:	fa00 f203 	lsl.w	r2, r0, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	430a      	orrs	r2, r1
 80040b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80040ba:	4b22      	ldr	r3, [pc, #136]	@ (8004144 <HAL_ADC_ConfigChannel+0x234>)
 80040bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a21      	ldr	r2, [pc, #132]	@ (8004148 <HAL_ADC_ConfigChannel+0x238>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d109      	bne.n	80040dc <HAL_ADC_ConfigChannel+0x1cc>
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	2b12      	cmp	r3, #18
 80040ce:	d105      	bne.n	80040dc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	4a19      	ldr	r2, [pc, #100]	@ (8004148 <HAL_ADC_ConfigChannel+0x238>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d123      	bne.n	800412e <HAL_ADC_ConfigChannel+0x21e>
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2b10      	cmp	r3, #16
 80040ec:	d003      	beq.n	80040f6 <HAL_ADC_ConfigChannel+0x1e6>
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2b11      	cmp	r3, #17
 80040f4:	d11b      	bne.n	800412e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2b10      	cmp	r3, #16
 8004108:	d111      	bne.n	800412e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800410a:	4b10      	ldr	r3, [pc, #64]	@ (800414c <HAL_ADC_ConfigChannel+0x23c>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a10      	ldr	r2, [pc, #64]	@ (8004150 <HAL_ADC_ConfigChannel+0x240>)
 8004110:	fba2 2303 	umull	r2, r3, r2, r3
 8004114:	0c9a      	lsrs	r2, r3, #18
 8004116:	4613      	mov	r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	4413      	add	r3, r2
 800411c:	005b      	lsls	r3, r3, #1
 800411e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004120:	e002      	b.n	8004128 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	3b01      	subs	r3, #1
 8004126:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d1f9      	bne.n	8004122 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	3714      	adds	r7, #20
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr
 8004144:	40012300 	.word	0x40012300
 8004148:	40012000 	.word	0x40012000
 800414c:	20000050 	.word	0x20000050
 8004150:	431bde83 	.word	0x431bde83

08004154 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004154:	b480      	push	{r7}
 8004156:	b085      	sub	sp, #20
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800415c:	4b79      	ldr	r3, [pc, #484]	@ (8004344 <ADC_Init+0x1f0>)
 800415e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	685a      	ldr	r2, [r3, #4]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	431a      	orrs	r2, r3
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004188:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	6859      	ldr	r1, [r3, #4]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	691b      	ldr	r3, [r3, #16]
 8004194:	021a      	lsls	r2, r3, #8
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	430a      	orrs	r2, r1
 800419c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	685a      	ldr	r2, [r3, #4]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80041ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	6859      	ldr	r1, [r3, #4]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	689a      	ldr	r2, [r3, #8]
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	430a      	orrs	r2, r1
 80041be:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	689a      	ldr	r2, [r3, #8]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80041ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	6899      	ldr	r1, [r3, #8]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	68da      	ldr	r2, [r3, #12]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	430a      	orrs	r2, r1
 80041e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041e6:	4a58      	ldr	r2, [pc, #352]	@ (8004348 <ADC_Init+0x1f4>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d022      	beq.n	8004232 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	689a      	ldr	r2, [r3, #8]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80041fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	6899      	ldr	r1, [r3, #8]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	430a      	orrs	r2, r1
 800420c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	689a      	ldr	r2, [r3, #8]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800421c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	6899      	ldr	r1, [r3, #8]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	430a      	orrs	r2, r1
 800422e:	609a      	str	r2, [r3, #8]
 8004230:	e00f      	b.n	8004252 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	689a      	ldr	r2, [r3, #8]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004240:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	689a      	ldr	r2, [r3, #8]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8004250:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	689a      	ldr	r2, [r3, #8]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f022 0202 	bic.w	r2, r2, #2
 8004260:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	6899      	ldr	r1, [r3, #8]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	7e1b      	ldrb	r3, [r3, #24]
 800426c:	005a      	lsls	r2, r3, #1
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	430a      	orrs	r2, r1
 8004274:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f893 3020 	ldrb.w	r3, [r3, #32]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d01b      	beq.n	80042b8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	685a      	ldr	r2, [r3, #4]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800428e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	685a      	ldr	r2, [r3, #4]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800429e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	6859      	ldr	r1, [r3, #4]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042aa:	3b01      	subs	r3, #1
 80042ac:	035a      	lsls	r2, r3, #13
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	430a      	orrs	r2, r1
 80042b4:	605a      	str	r2, [r3, #4]
 80042b6:	e007      	b.n	80042c8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	685a      	ldr	r2, [r3, #4]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80042c6:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80042d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	69db      	ldr	r3, [r3, #28]
 80042e2:	3b01      	subs	r3, #1
 80042e4:	051a      	lsls	r2, r3, #20
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	430a      	orrs	r2, r1
 80042ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	689a      	ldr	r2, [r3, #8]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80042fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	6899      	ldr	r1, [r3, #8]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800430a:	025a      	lsls	r2, r3, #9
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	430a      	orrs	r2, r1
 8004312:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	689a      	ldr	r2, [r3, #8]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004322:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	6899      	ldr	r1, [r3, #8]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	695b      	ldr	r3, [r3, #20]
 800432e:	029a      	lsls	r2, r3, #10
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	430a      	orrs	r2, r1
 8004336:	609a      	str	r2, [r3, #8]
}
 8004338:	bf00      	nop
 800433a:	3714      	adds	r7, #20
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr
 8004344:	40012300 	.word	0x40012300
 8004348:	0f000001 	.word	0x0f000001

0800434c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b084      	sub	sp, #16
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004358:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800435e:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004362:	2b00      	cmp	r3, #0
 8004364:	d13c      	bne.n	80043e0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800436a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800437c:	2b00      	cmp	r3, #0
 800437e:	d12b      	bne.n	80043d8 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004384:	2b00      	cmp	r3, #0
 8004386:	d127      	bne.n	80043d8 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800438e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004392:	2b00      	cmp	r3, #0
 8004394:	d006      	beq.n	80043a4 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d119      	bne.n	80043d8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	685a      	ldr	r2, [r3, #4]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f022 0220 	bic.w	r2, r2, #32
 80043b2:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d105      	bne.n	80043d8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d0:	f043 0201 	orr.w	r2, r3, #1
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80043d8:	68f8      	ldr	r0, [r7, #12]
 80043da:	f7ff fd7b 	bl	8003ed4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80043de:	e00e      	b.n	80043fe <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e4:	f003 0310 	and.w	r3, r3, #16
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d003      	beq.n	80043f4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80043ec:	68f8      	ldr	r0, [r7, #12]
 80043ee:	f7ff fd85 	bl	8003efc <HAL_ADC_ErrorCallback>
}
 80043f2:	e004      	b.n	80043fe <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	4798      	blx	r3
}
 80043fe:	bf00      	nop
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}

08004406 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004406:	b580      	push	{r7, lr}
 8004408:	b084      	sub	sp, #16
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004412:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004414:	68f8      	ldr	r0, [r7, #12]
 8004416:	f7ff fd67 	bl	8003ee8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800441a:	bf00      	nop
 800441c:	3710      	adds	r7, #16
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}

08004422 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004422:	b580      	push	{r7, lr}
 8004424:	b084      	sub	sp, #16
 8004426:	af00      	add	r7, sp, #0
 8004428:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800442e:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2240      	movs	r2, #64	@ 0x40
 8004434:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800443a:	f043 0204 	orr.w	r2, r3, #4
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004442:	68f8      	ldr	r0, [r7, #12]
 8004444:	f7ff fd5a 	bl	8003efc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004448:	bf00      	nop
 800444a:	3710      	adds	r7, #16
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}

08004450 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004450:	b480      	push	{r7}
 8004452:	b085      	sub	sp, #20
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f003 0307 	and.w	r3, r3, #7
 800445e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004460:	4b0c      	ldr	r3, [pc, #48]	@ (8004494 <__NVIC_SetPriorityGrouping+0x44>)
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004466:	68ba      	ldr	r2, [r7, #8]
 8004468:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800446c:	4013      	ands	r3, r2
 800446e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004478:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800447c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004480:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004482:	4a04      	ldr	r2, [pc, #16]	@ (8004494 <__NVIC_SetPriorityGrouping+0x44>)
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	60d3      	str	r3, [r2, #12]
}
 8004488:	bf00      	nop
 800448a:	3714      	adds	r7, #20
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr
 8004494:	e000ed00 	.word	0xe000ed00

08004498 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004498:	b480      	push	{r7}
 800449a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800449c:	4b04      	ldr	r3, [pc, #16]	@ (80044b0 <__NVIC_GetPriorityGrouping+0x18>)
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	0a1b      	lsrs	r3, r3, #8
 80044a2:	f003 0307 	and.w	r3, r3, #7
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr
 80044b0:	e000ed00 	.word	0xe000ed00

080044b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b083      	sub	sp, #12
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	4603      	mov	r3, r0
 80044bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	db0b      	blt.n	80044de <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044c6:	79fb      	ldrb	r3, [r7, #7]
 80044c8:	f003 021f 	and.w	r2, r3, #31
 80044cc:	4907      	ldr	r1, [pc, #28]	@ (80044ec <__NVIC_EnableIRQ+0x38>)
 80044ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044d2:	095b      	lsrs	r3, r3, #5
 80044d4:	2001      	movs	r0, #1
 80044d6:	fa00 f202 	lsl.w	r2, r0, r2
 80044da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80044de:	bf00      	nop
 80044e0:	370c      	adds	r7, #12
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	e000e100 	.word	0xe000e100

080044f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b083      	sub	sp, #12
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	4603      	mov	r3, r0
 80044f8:	6039      	str	r1, [r7, #0]
 80044fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004500:	2b00      	cmp	r3, #0
 8004502:	db0a      	blt.n	800451a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	b2da      	uxtb	r2, r3
 8004508:	490c      	ldr	r1, [pc, #48]	@ (800453c <__NVIC_SetPriority+0x4c>)
 800450a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800450e:	0112      	lsls	r2, r2, #4
 8004510:	b2d2      	uxtb	r2, r2
 8004512:	440b      	add	r3, r1
 8004514:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004518:	e00a      	b.n	8004530 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	b2da      	uxtb	r2, r3
 800451e:	4908      	ldr	r1, [pc, #32]	@ (8004540 <__NVIC_SetPriority+0x50>)
 8004520:	79fb      	ldrb	r3, [r7, #7]
 8004522:	f003 030f 	and.w	r3, r3, #15
 8004526:	3b04      	subs	r3, #4
 8004528:	0112      	lsls	r2, r2, #4
 800452a:	b2d2      	uxtb	r2, r2
 800452c:	440b      	add	r3, r1
 800452e:	761a      	strb	r2, [r3, #24]
}
 8004530:	bf00      	nop
 8004532:	370c      	adds	r7, #12
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr
 800453c:	e000e100 	.word	0xe000e100
 8004540:	e000ed00 	.word	0xe000ed00

08004544 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004544:	b480      	push	{r7}
 8004546:	b089      	sub	sp, #36	@ 0x24
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f003 0307 	and.w	r3, r3, #7
 8004556:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	f1c3 0307 	rsb	r3, r3, #7
 800455e:	2b04      	cmp	r3, #4
 8004560:	bf28      	it	cs
 8004562:	2304      	movcs	r3, #4
 8004564:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004566:	69fb      	ldr	r3, [r7, #28]
 8004568:	3304      	adds	r3, #4
 800456a:	2b06      	cmp	r3, #6
 800456c:	d902      	bls.n	8004574 <NVIC_EncodePriority+0x30>
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	3b03      	subs	r3, #3
 8004572:	e000      	b.n	8004576 <NVIC_EncodePriority+0x32>
 8004574:	2300      	movs	r3, #0
 8004576:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004578:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	fa02 f303 	lsl.w	r3, r2, r3
 8004582:	43da      	mvns	r2, r3
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	401a      	ands	r2, r3
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800458c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	fa01 f303 	lsl.w	r3, r1, r3
 8004596:	43d9      	mvns	r1, r3
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800459c:	4313      	orrs	r3, r2
         );
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3724      	adds	r7, #36	@ 0x24
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr

080045aa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045aa:	b580      	push	{r7, lr}
 80045ac:	b082      	sub	sp, #8
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f7ff ff4c 	bl	8004450 <__NVIC_SetPriorityGrouping>
}
 80045b8:	bf00      	nop
 80045ba:	3708      	adds	r7, #8
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b086      	sub	sp, #24
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	4603      	mov	r3, r0
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
 80045cc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80045ce:	2300      	movs	r3, #0
 80045d0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80045d2:	f7ff ff61 	bl	8004498 <__NVIC_GetPriorityGrouping>
 80045d6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	68b9      	ldr	r1, [r7, #8]
 80045dc:	6978      	ldr	r0, [r7, #20]
 80045de:	f7ff ffb1 	bl	8004544 <NVIC_EncodePriority>
 80045e2:	4602      	mov	r2, r0
 80045e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045e8:	4611      	mov	r1, r2
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7ff ff80 	bl	80044f0 <__NVIC_SetPriority>
}
 80045f0:	bf00      	nop
 80045f2:	3718      	adds	r7, #24
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	4603      	mov	r3, r0
 8004600:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004606:	4618      	mov	r0, r3
 8004608:	f7ff ff54 	bl	80044b4 <__NVIC_EnableIRQ>
}
 800460c:	bf00      	nop
 800460e:	3708      	adds	r7, #8
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b086      	sub	sp, #24
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800461c:	2300      	movs	r3, #0
 800461e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004620:	f7ff fad4 	bl	8003bcc <HAL_GetTick>
 8004624:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d101      	bne.n	8004630 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e099      	b.n	8004764 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2202      	movs	r2, #2
 8004634:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f022 0201 	bic.w	r2, r2, #1
 800464e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004650:	e00f      	b.n	8004672 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004652:	f7ff fabb 	bl	8003bcc <HAL_GetTick>
 8004656:	4602      	mov	r2, r0
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	1ad3      	subs	r3, r2, r3
 800465c:	2b05      	cmp	r3, #5
 800465e:	d908      	bls.n	8004672 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2220      	movs	r2, #32
 8004664:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2203      	movs	r2, #3
 800466a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800466e:	2303      	movs	r3, #3
 8004670:	e078      	b.n	8004764 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0301 	and.w	r3, r3, #1
 800467c:	2b00      	cmp	r3, #0
 800467e:	d1e8      	bne.n	8004652 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004688:	697a      	ldr	r2, [r7, #20]
 800468a:	4b38      	ldr	r3, [pc, #224]	@ (800476c <HAL_DMA_Init+0x158>)
 800468c:	4013      	ands	r3, r2
 800468e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	685a      	ldr	r2, [r3, #4]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800469e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	691b      	ldr	r3, [r3, #16]
 80046a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80046aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	699b      	ldr	r3, [r3, #24]
 80046b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a1b      	ldr	r3, [r3, #32]
 80046bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80046be:	697a      	ldr	r2, [r7, #20]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046c8:	2b04      	cmp	r3, #4
 80046ca:	d107      	bne.n	80046dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046d4:	4313      	orrs	r3, r2
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	4313      	orrs	r3, r2
 80046da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	697a      	ldr	r2, [r7, #20]
 80046e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	695b      	ldr	r3, [r3, #20]
 80046ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	f023 0307 	bic.w	r3, r3, #7
 80046f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f8:	697a      	ldr	r2, [r7, #20]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004702:	2b04      	cmp	r3, #4
 8004704:	d117      	bne.n	8004736 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800470a:	697a      	ldr	r2, [r7, #20]
 800470c:	4313      	orrs	r3, r2
 800470e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004714:	2b00      	cmp	r3, #0
 8004716:	d00e      	beq.n	8004736 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004718:	6878      	ldr	r0, [r7, #4]
 800471a:	f000 fb01 	bl	8004d20 <DMA_CheckFifoParam>
 800471e:	4603      	mov	r3, r0
 8004720:	2b00      	cmp	r3, #0
 8004722:	d008      	beq.n	8004736 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2240      	movs	r2, #64	@ 0x40
 8004728:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2201      	movs	r2, #1
 800472e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004732:	2301      	movs	r3, #1
 8004734:	e016      	b.n	8004764 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800473e:	6878      	ldr	r0, [r7, #4]
 8004740:	f000 fab8 	bl	8004cb4 <DMA_CalcBaseAndBitshift>
 8004744:	4603      	mov	r3, r0
 8004746:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800474c:	223f      	movs	r2, #63	@ 0x3f
 800474e:	409a      	lsls	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2201      	movs	r2, #1
 800475e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	3718      	adds	r7, #24
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	f010803f 	.word	0xf010803f

08004770 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b086      	sub	sp, #24
 8004774:	af00      	add	r7, sp, #0
 8004776:	60f8      	str	r0, [r7, #12]
 8004778:	60b9      	str	r1, [r7, #8]
 800477a:	607a      	str	r2, [r7, #4]
 800477c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800477e:	2300      	movs	r3, #0
 8004780:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004786:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800478e:	2b01      	cmp	r3, #1
 8004790:	d101      	bne.n	8004796 <HAL_DMA_Start_IT+0x26>
 8004792:	2302      	movs	r3, #2
 8004794:	e040      	b.n	8004818 <HAL_DMA_Start_IT+0xa8>
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d12f      	bne.n	800480a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2202      	movs	r2, #2
 80047ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	2200      	movs	r2, #0
 80047b6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	687a      	ldr	r2, [r7, #4]
 80047bc:	68b9      	ldr	r1, [r7, #8]
 80047be:	68f8      	ldr	r0, [r7, #12]
 80047c0:	f000 fa4a 	bl	8004c58 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047c8:	223f      	movs	r2, #63	@ 0x3f
 80047ca:	409a      	lsls	r2, r3
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f042 0216 	orr.w	r2, r2, #22
 80047de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d007      	beq.n	80047f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f042 0208 	orr.w	r2, r2, #8
 80047f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	681a      	ldr	r2, [r3, #0]
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f042 0201 	orr.w	r2, r2, #1
 8004806:	601a      	str	r2, [r3, #0]
 8004808:	e005      	b.n	8004816 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2200      	movs	r2, #0
 800480e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004812:	2302      	movs	r3, #2
 8004814:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004816:	7dfb      	ldrb	r3, [r7, #23]
}
 8004818:	4618      	mov	r0, r3
 800481a:	3718      	adds	r7, #24
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800482c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800482e:	f7ff f9cd 	bl	8003bcc <HAL_GetTick>
 8004832:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800483a:	b2db      	uxtb	r3, r3
 800483c:	2b02      	cmp	r3, #2
 800483e:	d008      	beq.n	8004852 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2280      	movs	r2, #128	@ 0x80
 8004844:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	e052      	b.n	80048f8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f022 0216 	bic.w	r2, r2, #22
 8004860:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	695a      	ldr	r2, [r3, #20]
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004870:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004876:	2b00      	cmp	r3, #0
 8004878:	d103      	bne.n	8004882 <HAL_DMA_Abort+0x62>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800487e:	2b00      	cmp	r3, #0
 8004880:	d007      	beq.n	8004892 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f022 0208 	bic.w	r2, r2, #8
 8004890:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f022 0201 	bic.w	r2, r2, #1
 80048a0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048a2:	e013      	b.n	80048cc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80048a4:	f7ff f992 	bl	8003bcc <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	2b05      	cmp	r3, #5
 80048b0:	d90c      	bls.n	80048cc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2220      	movs	r2, #32
 80048b6:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2203      	movs	r2, #3
 80048bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e015      	b.n	80048f8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0301 	and.w	r3, r3, #1
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d1e4      	bne.n	80048a4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048de:	223f      	movs	r2, #63	@ 0x3f
 80048e0:	409a      	lsls	r2, r3
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2201      	movs	r2, #1
 80048ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80048f6:	2300      	movs	r3, #0
}
 80048f8:	4618      	mov	r0, r3
 80048fa:	3710      	adds	r7, #16
 80048fc:	46bd      	mov	sp, r7
 80048fe:	bd80      	pop	{r7, pc}

08004900 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800490e:	b2db      	uxtb	r3, r3
 8004910:	2b02      	cmp	r3, #2
 8004912:	d004      	beq.n	800491e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2280      	movs	r2, #128	@ 0x80
 8004918:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800491a:	2301      	movs	r3, #1
 800491c:	e00c      	b.n	8004938 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2205      	movs	r2, #5
 8004922:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f022 0201 	bic.w	r2, r2, #1
 8004934:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004936:	2300      	movs	r3, #0
}
 8004938:	4618      	mov	r0, r3
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b086      	sub	sp, #24
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800494c:	2300      	movs	r3, #0
 800494e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004950:	4b8e      	ldr	r3, [pc, #568]	@ (8004b8c <HAL_DMA_IRQHandler+0x248>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a8e      	ldr	r2, [pc, #568]	@ (8004b90 <HAL_DMA_IRQHandler+0x24c>)
 8004956:	fba2 2303 	umull	r2, r3, r2, r3
 800495a:	0a9b      	lsrs	r3, r3, #10
 800495c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004962:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004964:	693b      	ldr	r3, [r7, #16]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800496e:	2208      	movs	r2, #8
 8004970:	409a      	lsls	r2, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	4013      	ands	r3, r2
 8004976:	2b00      	cmp	r3, #0
 8004978:	d01a      	beq.n	80049b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0304 	and.w	r3, r3, #4
 8004984:	2b00      	cmp	r3, #0
 8004986:	d013      	beq.n	80049b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f022 0204 	bic.w	r2, r2, #4
 8004996:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800499c:	2208      	movs	r2, #8
 800499e:	409a      	lsls	r2, r3
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049a8:	f043 0201 	orr.w	r2, r3, #1
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049b4:	2201      	movs	r2, #1
 80049b6:	409a      	lsls	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	4013      	ands	r3, r2
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d012      	beq.n	80049e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00b      	beq.n	80049e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049d2:	2201      	movs	r2, #1
 80049d4:	409a      	lsls	r2, r3
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049de:	f043 0202 	orr.w	r2, r3, #2
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049ea:	2204      	movs	r2, #4
 80049ec:	409a      	lsls	r2, r3
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	4013      	ands	r3, r2
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d012      	beq.n	8004a1c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 0302 	and.w	r3, r3, #2
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00b      	beq.n	8004a1c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a08:	2204      	movs	r2, #4
 8004a0a:	409a      	lsls	r2, r3
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a14:	f043 0204 	orr.w	r2, r3, #4
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a20:	2210      	movs	r2, #16
 8004a22:	409a      	lsls	r2, r3
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	4013      	ands	r3, r2
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d043      	beq.n	8004ab4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0308 	and.w	r3, r3, #8
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d03c      	beq.n	8004ab4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a3e:	2210      	movs	r2, #16
 8004a40:	409a      	lsls	r2, r3
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d018      	beq.n	8004a86 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d108      	bne.n	8004a74 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d024      	beq.n	8004ab4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	4798      	blx	r3
 8004a72:	e01f      	b.n	8004ab4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d01b      	beq.n	8004ab4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	4798      	blx	r3
 8004a84:	e016      	b.n	8004ab4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d107      	bne.n	8004aa4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f022 0208 	bic.w	r2, r2, #8
 8004aa2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d003      	beq.n	8004ab4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ab8:	2220      	movs	r2, #32
 8004aba:	409a      	lsls	r2, r3
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	4013      	ands	r3, r2
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	f000 808f 	beq.w	8004be4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 0310 	and.w	r3, r3, #16
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	f000 8087 	beq.w	8004be4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ada:	2220      	movs	r2, #32
 8004adc:	409a      	lsls	r2, r3
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004ae8:	b2db      	uxtb	r3, r3
 8004aea:	2b05      	cmp	r3, #5
 8004aec:	d136      	bne.n	8004b5c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f022 0216 	bic.w	r2, r2, #22
 8004afc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	695a      	ldr	r2, [r3, #20]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004b0c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d103      	bne.n	8004b1e <HAL_DMA_IRQHandler+0x1da>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d007      	beq.n	8004b2e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f022 0208 	bic.w	r2, r2, #8
 8004b2c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b32:	223f      	movs	r2, #63	@ 0x3f
 8004b34:	409a      	lsls	r2, r3
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d07e      	beq.n	8004c50 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	4798      	blx	r3
        }
        return;
 8004b5a:	e079      	b.n	8004c50 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d01d      	beq.n	8004ba6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d10d      	bne.n	8004b94 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d031      	beq.n	8004be4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	4798      	blx	r3
 8004b88:	e02c      	b.n	8004be4 <HAL_DMA_IRQHandler+0x2a0>
 8004b8a:	bf00      	nop
 8004b8c:	20000050 	.word	0x20000050
 8004b90:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d023      	beq.n	8004be4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	4798      	blx	r3
 8004ba4:	e01e      	b.n	8004be4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d10f      	bne.n	8004bd4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f022 0210 	bic.w	r2, r2, #16
 8004bc2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d003      	beq.n	8004be4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d032      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bf0:	f003 0301 	and.w	r3, r3, #1
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d022      	beq.n	8004c3e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2205      	movs	r2, #5
 8004bfc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f022 0201 	bic.w	r2, r2, #1
 8004c0e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	3301      	adds	r3, #1
 8004c14:	60bb      	str	r3, [r7, #8]
 8004c16:	697a      	ldr	r2, [r7, #20]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d307      	bcc.n	8004c2c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1f2      	bne.n	8004c10 <HAL_DMA_IRQHandler+0x2cc>
 8004c2a:	e000      	b.n	8004c2e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004c2c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2201      	movs	r2, #1
 8004c32:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d005      	beq.n	8004c52 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c4a:	6878      	ldr	r0, [r7, #4]
 8004c4c:	4798      	blx	r3
 8004c4e:	e000      	b.n	8004c52 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004c50:	bf00      	nop
    }
  }
}
 8004c52:	3718      	adds	r7, #24
 8004c54:	46bd      	mov	sp, r7
 8004c56:	bd80      	pop	{r7, pc}

08004c58 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	607a      	str	r2, [r7, #4]
 8004c64:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004c74:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	683a      	ldr	r2, [r7, #0]
 8004c7c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	2b40      	cmp	r3, #64	@ 0x40
 8004c84:	d108      	bne.n	8004c98 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004c96:	e007      	b.n	8004ca8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68ba      	ldr	r2, [r7, #8]
 8004c9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	60da      	str	r2, [r3, #12]
}
 8004ca8:	bf00      	nop
 8004caa:	3714      	adds	r7, #20
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b085      	sub	sp, #20
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	3b10      	subs	r3, #16
 8004cc4:	4a14      	ldr	r2, [pc, #80]	@ (8004d18 <DMA_CalcBaseAndBitshift+0x64>)
 8004cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cca:	091b      	lsrs	r3, r3, #4
 8004ccc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004cce:	4a13      	ldr	r2, [pc, #76]	@ (8004d1c <DMA_CalcBaseAndBitshift+0x68>)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	461a      	mov	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2b03      	cmp	r3, #3
 8004ce0:	d909      	bls.n	8004cf6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004cea:	f023 0303 	bic.w	r3, r3, #3
 8004cee:	1d1a      	adds	r2, r3, #4
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	659a      	str	r2, [r3, #88]	@ 0x58
 8004cf4:	e007      	b.n	8004d06 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004cfe:	f023 0303 	bic.w	r3, r3, #3
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3714      	adds	r7, #20
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	aaaaaaab 	.word	0xaaaaaaab
 8004d1c:	0800fafc 	.word	0x0800fafc

08004d20 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b085      	sub	sp, #20
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d30:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	699b      	ldr	r3, [r3, #24]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d11f      	bne.n	8004d7a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	2b03      	cmp	r3, #3
 8004d3e:	d856      	bhi.n	8004dee <DMA_CheckFifoParam+0xce>
 8004d40:	a201      	add	r2, pc, #4	@ (adr r2, 8004d48 <DMA_CheckFifoParam+0x28>)
 8004d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d46:	bf00      	nop
 8004d48:	08004d59 	.word	0x08004d59
 8004d4c:	08004d6b 	.word	0x08004d6b
 8004d50:	08004d59 	.word	0x08004d59
 8004d54:	08004def 	.word	0x08004def
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d5c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d046      	beq.n	8004df2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d68:	e043      	b.n	8004df2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d6e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004d72:	d140      	bne.n	8004df6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d78:	e03d      	b.n	8004df6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d82:	d121      	bne.n	8004dc8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	2b03      	cmp	r3, #3
 8004d88:	d837      	bhi.n	8004dfa <DMA_CheckFifoParam+0xda>
 8004d8a:	a201      	add	r2, pc, #4	@ (adr r2, 8004d90 <DMA_CheckFifoParam+0x70>)
 8004d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d90:	08004da1 	.word	0x08004da1
 8004d94:	08004da7 	.word	0x08004da7
 8004d98:	08004da1 	.word	0x08004da1
 8004d9c:	08004db9 	.word	0x08004db9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004da0:	2301      	movs	r3, #1
 8004da2:	73fb      	strb	r3, [r7, #15]
      break;
 8004da4:	e030      	b.n	8004e08 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004daa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d025      	beq.n	8004dfe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004db6:	e022      	b.n	8004dfe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dbc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004dc0:	d11f      	bne.n	8004e02 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004dc6:	e01c      	b.n	8004e02 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d903      	bls.n	8004dd6 <DMA_CheckFifoParam+0xb6>
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	2b03      	cmp	r3, #3
 8004dd2:	d003      	beq.n	8004ddc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004dd4:	e018      	b.n	8004e08 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	73fb      	strb	r3, [r7, #15]
      break;
 8004dda:	e015      	b.n	8004e08 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d00e      	beq.n	8004e06 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	73fb      	strb	r3, [r7, #15]
      break;
 8004dec:	e00b      	b.n	8004e06 <DMA_CheckFifoParam+0xe6>
      break;
 8004dee:	bf00      	nop
 8004df0:	e00a      	b.n	8004e08 <DMA_CheckFifoParam+0xe8>
      break;
 8004df2:	bf00      	nop
 8004df4:	e008      	b.n	8004e08 <DMA_CheckFifoParam+0xe8>
      break;
 8004df6:	bf00      	nop
 8004df8:	e006      	b.n	8004e08 <DMA_CheckFifoParam+0xe8>
      break;
 8004dfa:	bf00      	nop
 8004dfc:	e004      	b.n	8004e08 <DMA_CheckFifoParam+0xe8>
      break;
 8004dfe:	bf00      	nop
 8004e00:	e002      	b.n	8004e08 <DMA_CheckFifoParam+0xe8>
      break;   
 8004e02:	bf00      	nop
 8004e04:	e000      	b.n	8004e08 <DMA_CheckFifoParam+0xe8>
      break;
 8004e06:	bf00      	nop
    }
  } 
  
  return status; 
 8004e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	3714      	adds	r7, #20
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr
 8004e16:	bf00      	nop

08004e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b089      	sub	sp, #36	@ 0x24
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004e22:	2300      	movs	r3, #0
 8004e24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004e26:	2300      	movs	r3, #0
 8004e28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e2e:	2300      	movs	r3, #0
 8004e30:	61fb      	str	r3, [r7, #28]
 8004e32:	e16b      	b.n	800510c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004e34:	2201      	movs	r2, #1
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	4013      	ands	r3, r2
 8004e46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004e48:	693a      	ldr	r2, [r7, #16]
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	f040 815a 	bne.w	8005106 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	f003 0303 	and.w	r3, r3, #3
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d005      	beq.n	8004e6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e66:	2b02      	cmp	r3, #2
 8004e68:	d130      	bne.n	8004ecc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	005b      	lsls	r3, r3, #1
 8004e74:	2203      	movs	r2, #3
 8004e76:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7a:	43db      	mvns	r3, r3
 8004e7c:	69ba      	ldr	r2, [r7, #24]
 8004e7e:	4013      	ands	r3, r2
 8004e80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	68da      	ldr	r2, [r3, #12]
 8004e86:	69fb      	ldr	r3, [r7, #28]
 8004e88:	005b      	lsls	r3, r3, #1
 8004e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e8e:	69ba      	ldr	r2, [r7, #24]
 8004e90:	4313      	orrs	r3, r2
 8004e92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	69ba      	ldr	r2, [r7, #24]
 8004e98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea8:	43db      	mvns	r3, r3
 8004eaa:	69ba      	ldr	r2, [r7, #24]
 8004eac:	4013      	ands	r3, r2
 8004eae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	091b      	lsrs	r3, r3, #4
 8004eb6:	f003 0201 	and.w	r2, r3, #1
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec0:	69ba      	ldr	r2, [r7, #24]
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	69ba      	ldr	r2, [r7, #24]
 8004eca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	f003 0303 	and.w	r3, r3, #3
 8004ed4:	2b03      	cmp	r3, #3
 8004ed6:	d017      	beq.n	8004f08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	005b      	lsls	r3, r3, #1
 8004ee2:	2203      	movs	r2, #3
 8004ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee8:	43db      	mvns	r3, r3
 8004eea:	69ba      	ldr	r2, [r7, #24]
 8004eec:	4013      	ands	r3, r2
 8004eee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	689a      	ldr	r2, [r3, #8]
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	005b      	lsls	r3, r3, #1
 8004ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8004efc:	69ba      	ldr	r2, [r7, #24]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	69ba      	ldr	r2, [r7, #24]
 8004f06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	f003 0303 	and.w	r3, r3, #3
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d123      	bne.n	8004f5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	08da      	lsrs	r2, r3, #3
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	3208      	adds	r2, #8
 8004f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	f003 0307 	and.w	r3, r3, #7
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	220f      	movs	r2, #15
 8004f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f30:	43db      	mvns	r3, r3
 8004f32:	69ba      	ldr	r2, [r7, #24]
 8004f34:	4013      	ands	r3, r2
 8004f36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	691a      	ldr	r2, [r3, #16]
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	f003 0307 	and.w	r3, r3, #7
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	fa02 f303 	lsl.w	r3, r2, r3
 8004f48:	69ba      	ldr	r2, [r7, #24]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	08da      	lsrs	r2, r3, #3
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	3208      	adds	r2, #8
 8004f56:	69b9      	ldr	r1, [r7, #24]
 8004f58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	005b      	lsls	r3, r3, #1
 8004f66:	2203      	movs	r2, #3
 8004f68:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6c:	43db      	mvns	r3, r3
 8004f6e:	69ba      	ldr	r2, [r7, #24]
 8004f70:	4013      	ands	r3, r2
 8004f72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	f003 0203 	and.w	r2, r3, #3
 8004f7c:	69fb      	ldr	r3, [r7, #28]
 8004f7e:	005b      	lsls	r3, r3, #1
 8004f80:	fa02 f303 	lsl.w	r3, r2, r3
 8004f84:	69ba      	ldr	r2, [r7, #24]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	69ba      	ldr	r2, [r7, #24]
 8004f8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	f000 80b4 	beq.w	8005106 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	60fb      	str	r3, [r7, #12]
 8004fa2:	4b60      	ldr	r3, [pc, #384]	@ (8005124 <HAL_GPIO_Init+0x30c>)
 8004fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fa6:	4a5f      	ldr	r2, [pc, #380]	@ (8005124 <HAL_GPIO_Init+0x30c>)
 8004fa8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004fac:	6453      	str	r3, [r2, #68]	@ 0x44
 8004fae:	4b5d      	ldr	r3, [pc, #372]	@ (8005124 <HAL_GPIO_Init+0x30c>)
 8004fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004fb6:	60fb      	str	r3, [r7, #12]
 8004fb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004fba:	4a5b      	ldr	r2, [pc, #364]	@ (8005128 <HAL_GPIO_Init+0x310>)
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	089b      	lsrs	r3, r3, #2
 8004fc0:	3302      	adds	r3, #2
 8004fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	f003 0303 	and.w	r3, r3, #3
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	220f      	movs	r2, #15
 8004fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd6:	43db      	mvns	r3, r3
 8004fd8:	69ba      	ldr	r2, [r7, #24]
 8004fda:	4013      	ands	r3, r2
 8004fdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a52      	ldr	r2, [pc, #328]	@ (800512c <HAL_GPIO_Init+0x314>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d02b      	beq.n	800503e <HAL_GPIO_Init+0x226>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4a51      	ldr	r2, [pc, #324]	@ (8005130 <HAL_GPIO_Init+0x318>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d025      	beq.n	800503a <HAL_GPIO_Init+0x222>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a50      	ldr	r2, [pc, #320]	@ (8005134 <HAL_GPIO_Init+0x31c>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d01f      	beq.n	8005036 <HAL_GPIO_Init+0x21e>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a4f      	ldr	r2, [pc, #316]	@ (8005138 <HAL_GPIO_Init+0x320>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d019      	beq.n	8005032 <HAL_GPIO_Init+0x21a>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a4e      	ldr	r2, [pc, #312]	@ (800513c <HAL_GPIO_Init+0x324>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d013      	beq.n	800502e <HAL_GPIO_Init+0x216>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a4d      	ldr	r2, [pc, #308]	@ (8005140 <HAL_GPIO_Init+0x328>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d00d      	beq.n	800502a <HAL_GPIO_Init+0x212>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a4c      	ldr	r2, [pc, #304]	@ (8005144 <HAL_GPIO_Init+0x32c>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d007      	beq.n	8005026 <HAL_GPIO_Init+0x20e>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a4b      	ldr	r2, [pc, #300]	@ (8005148 <HAL_GPIO_Init+0x330>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d101      	bne.n	8005022 <HAL_GPIO_Init+0x20a>
 800501e:	2307      	movs	r3, #7
 8005020:	e00e      	b.n	8005040 <HAL_GPIO_Init+0x228>
 8005022:	2308      	movs	r3, #8
 8005024:	e00c      	b.n	8005040 <HAL_GPIO_Init+0x228>
 8005026:	2306      	movs	r3, #6
 8005028:	e00a      	b.n	8005040 <HAL_GPIO_Init+0x228>
 800502a:	2305      	movs	r3, #5
 800502c:	e008      	b.n	8005040 <HAL_GPIO_Init+0x228>
 800502e:	2304      	movs	r3, #4
 8005030:	e006      	b.n	8005040 <HAL_GPIO_Init+0x228>
 8005032:	2303      	movs	r3, #3
 8005034:	e004      	b.n	8005040 <HAL_GPIO_Init+0x228>
 8005036:	2302      	movs	r3, #2
 8005038:	e002      	b.n	8005040 <HAL_GPIO_Init+0x228>
 800503a:	2301      	movs	r3, #1
 800503c:	e000      	b.n	8005040 <HAL_GPIO_Init+0x228>
 800503e:	2300      	movs	r3, #0
 8005040:	69fa      	ldr	r2, [r7, #28]
 8005042:	f002 0203 	and.w	r2, r2, #3
 8005046:	0092      	lsls	r2, r2, #2
 8005048:	4093      	lsls	r3, r2
 800504a:	69ba      	ldr	r2, [r7, #24]
 800504c:	4313      	orrs	r3, r2
 800504e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005050:	4935      	ldr	r1, [pc, #212]	@ (8005128 <HAL_GPIO_Init+0x310>)
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	089b      	lsrs	r3, r3, #2
 8005056:	3302      	adds	r3, #2
 8005058:	69ba      	ldr	r2, [r7, #24]
 800505a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800505e:	4b3b      	ldr	r3, [pc, #236]	@ (800514c <HAL_GPIO_Init+0x334>)
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	43db      	mvns	r3, r3
 8005068:	69ba      	ldr	r2, [r7, #24]
 800506a:	4013      	ands	r3, r2
 800506c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d003      	beq.n	8005082 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800507a:	69ba      	ldr	r2, [r7, #24]
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	4313      	orrs	r3, r2
 8005080:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005082:	4a32      	ldr	r2, [pc, #200]	@ (800514c <HAL_GPIO_Init+0x334>)
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005088:	4b30      	ldr	r3, [pc, #192]	@ (800514c <HAL_GPIO_Init+0x334>)
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	43db      	mvns	r3, r3
 8005092:	69ba      	ldr	r2, [r7, #24]
 8005094:	4013      	ands	r3, r2
 8005096:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d003      	beq.n	80050ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80050a4:	69ba      	ldr	r2, [r7, #24]
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80050ac:	4a27      	ldr	r2, [pc, #156]	@ (800514c <HAL_GPIO_Init+0x334>)
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80050b2:	4b26      	ldr	r3, [pc, #152]	@ (800514c <HAL_GPIO_Init+0x334>)
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	43db      	mvns	r3, r3
 80050bc:	69ba      	ldr	r2, [r7, #24]
 80050be:	4013      	ands	r3, r2
 80050c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d003      	beq.n	80050d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80050ce:	69ba      	ldr	r2, [r7, #24]
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80050d6:	4a1d      	ldr	r2, [pc, #116]	@ (800514c <HAL_GPIO_Init+0x334>)
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80050dc:	4b1b      	ldr	r3, [pc, #108]	@ (800514c <HAL_GPIO_Init+0x334>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	43db      	mvns	r3, r3
 80050e6:	69ba      	ldr	r2, [r7, #24]
 80050e8:	4013      	ands	r3, r2
 80050ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d003      	beq.n	8005100 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80050f8:	69ba      	ldr	r2, [r7, #24]
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	4313      	orrs	r3, r2
 80050fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005100:	4a12      	ldr	r2, [pc, #72]	@ (800514c <HAL_GPIO_Init+0x334>)
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	3301      	adds	r3, #1
 800510a:	61fb      	str	r3, [r7, #28]
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	2b0f      	cmp	r3, #15
 8005110:	f67f ae90 	bls.w	8004e34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005114:	bf00      	nop
 8005116:	bf00      	nop
 8005118:	3724      	adds	r7, #36	@ 0x24
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	40023800 	.word	0x40023800
 8005128:	40013800 	.word	0x40013800
 800512c:	40020000 	.word	0x40020000
 8005130:	40020400 	.word	0x40020400
 8005134:	40020800 	.word	0x40020800
 8005138:	40020c00 	.word	0x40020c00
 800513c:	40021000 	.word	0x40021000
 8005140:	40021400 	.word	0x40021400
 8005144:	40021800 	.word	0x40021800
 8005148:	40021c00 	.word	0x40021c00
 800514c:	40013c00 	.word	0x40013c00

08005150 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005150:	b480      	push	{r7}
 8005152:	b085      	sub	sp, #20
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	460b      	mov	r3, r1
 800515a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	691a      	ldr	r2, [r3, #16]
 8005160:	887b      	ldrh	r3, [r7, #2]
 8005162:	4013      	ands	r3, r2
 8005164:	2b00      	cmp	r3, #0
 8005166:	d002      	beq.n	800516e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005168:	2301      	movs	r3, #1
 800516a:	73fb      	strb	r3, [r7, #15]
 800516c:	e001      	b.n	8005172 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800516e:	2300      	movs	r3, #0
 8005170:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005172:	7bfb      	ldrb	r3, [r7, #15]
}
 8005174:	4618      	mov	r0, r3
 8005176:	3714      	adds	r7, #20
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	460b      	mov	r3, r1
 800518a:	807b      	strh	r3, [r7, #2]
 800518c:	4613      	mov	r3, r2
 800518e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005190:	787b      	ldrb	r3, [r7, #1]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d003      	beq.n	800519e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005196:	887a      	ldrh	r2, [r7, #2]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800519c:	e003      	b.n	80051a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800519e:	887b      	ldrh	r3, [r7, #2]
 80051a0:	041a      	lsls	r2, r3, #16
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	619a      	str	r2, [r3, #24]
}
 80051a6:	bf00      	nop
 80051a8:	370c      	adds	r7, #12
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
	...

080051b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d101      	bne.n	80051c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e12b      	b.n	800541e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d106      	bne.n	80051e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f7fe f9dc 	bl	8003598 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	2224      	movs	r2, #36	@ 0x24
 80051e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	681a      	ldr	r2, [r3, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f022 0201 	bic.w	r2, r2, #1
 80051f6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005206:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005216:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005218:	f002 fe86 	bl	8007f28 <HAL_RCC_GetPCLK1Freq>
 800521c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	4a81      	ldr	r2, [pc, #516]	@ (8005428 <HAL_I2C_Init+0x274>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d807      	bhi.n	8005238 <HAL_I2C_Init+0x84>
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	4a80      	ldr	r2, [pc, #512]	@ (800542c <HAL_I2C_Init+0x278>)
 800522c:	4293      	cmp	r3, r2
 800522e:	bf94      	ite	ls
 8005230:	2301      	movls	r3, #1
 8005232:	2300      	movhi	r3, #0
 8005234:	b2db      	uxtb	r3, r3
 8005236:	e006      	b.n	8005246 <HAL_I2C_Init+0x92>
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	4a7d      	ldr	r2, [pc, #500]	@ (8005430 <HAL_I2C_Init+0x27c>)
 800523c:	4293      	cmp	r3, r2
 800523e:	bf94      	ite	ls
 8005240:	2301      	movls	r3, #1
 8005242:	2300      	movhi	r3, #0
 8005244:	b2db      	uxtb	r3, r3
 8005246:	2b00      	cmp	r3, #0
 8005248:	d001      	beq.n	800524e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e0e7      	b.n	800541e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	4a78      	ldr	r2, [pc, #480]	@ (8005434 <HAL_I2C_Init+0x280>)
 8005252:	fba2 2303 	umull	r2, r3, r2, r3
 8005256:	0c9b      	lsrs	r3, r3, #18
 8005258:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	68ba      	ldr	r2, [r7, #8]
 800526a:	430a      	orrs	r2, r1
 800526c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	6a1b      	ldr	r3, [r3, #32]
 8005274:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	4a6a      	ldr	r2, [pc, #424]	@ (8005428 <HAL_I2C_Init+0x274>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d802      	bhi.n	8005288 <HAL_I2C_Init+0xd4>
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	3301      	adds	r3, #1
 8005286:	e009      	b.n	800529c <HAL_I2C_Init+0xe8>
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800528e:	fb02 f303 	mul.w	r3, r2, r3
 8005292:	4a69      	ldr	r2, [pc, #420]	@ (8005438 <HAL_I2C_Init+0x284>)
 8005294:	fba2 2303 	umull	r2, r3, r2, r3
 8005298:	099b      	lsrs	r3, r3, #6
 800529a:	3301      	adds	r3, #1
 800529c:	687a      	ldr	r2, [r7, #4]
 800529e:	6812      	ldr	r2, [r2, #0]
 80052a0:	430b      	orrs	r3, r1
 80052a2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	69db      	ldr	r3, [r3, #28]
 80052aa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80052ae:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	495c      	ldr	r1, [pc, #368]	@ (8005428 <HAL_I2C_Init+0x274>)
 80052b8:	428b      	cmp	r3, r1
 80052ba:	d819      	bhi.n	80052f0 <HAL_I2C_Init+0x13c>
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	1e59      	subs	r1, r3, #1
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	005b      	lsls	r3, r3, #1
 80052c6:	fbb1 f3f3 	udiv	r3, r1, r3
 80052ca:	1c59      	adds	r1, r3, #1
 80052cc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80052d0:	400b      	ands	r3, r1
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00a      	beq.n	80052ec <HAL_I2C_Init+0x138>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	1e59      	subs	r1, r3, #1
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	005b      	lsls	r3, r3, #1
 80052e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80052e4:	3301      	adds	r3, #1
 80052e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052ea:	e051      	b.n	8005390 <HAL_I2C_Init+0x1dc>
 80052ec:	2304      	movs	r3, #4
 80052ee:	e04f      	b.n	8005390 <HAL_I2C_Init+0x1dc>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d111      	bne.n	800531c <HAL_I2C_Init+0x168>
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	1e58      	subs	r0, r3, #1
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6859      	ldr	r1, [r3, #4]
 8005300:	460b      	mov	r3, r1
 8005302:	005b      	lsls	r3, r3, #1
 8005304:	440b      	add	r3, r1
 8005306:	fbb0 f3f3 	udiv	r3, r0, r3
 800530a:	3301      	adds	r3, #1
 800530c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005310:	2b00      	cmp	r3, #0
 8005312:	bf0c      	ite	eq
 8005314:	2301      	moveq	r3, #1
 8005316:	2300      	movne	r3, #0
 8005318:	b2db      	uxtb	r3, r3
 800531a:	e012      	b.n	8005342 <HAL_I2C_Init+0x18e>
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	1e58      	subs	r0, r3, #1
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6859      	ldr	r1, [r3, #4]
 8005324:	460b      	mov	r3, r1
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	440b      	add	r3, r1
 800532a:	0099      	lsls	r1, r3, #2
 800532c:	440b      	add	r3, r1
 800532e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005332:	3301      	adds	r3, #1
 8005334:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005338:	2b00      	cmp	r3, #0
 800533a:	bf0c      	ite	eq
 800533c:	2301      	moveq	r3, #1
 800533e:	2300      	movne	r3, #0
 8005340:	b2db      	uxtb	r3, r3
 8005342:	2b00      	cmp	r3, #0
 8005344:	d001      	beq.n	800534a <HAL_I2C_Init+0x196>
 8005346:	2301      	movs	r3, #1
 8005348:	e022      	b.n	8005390 <HAL_I2C_Init+0x1dc>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	689b      	ldr	r3, [r3, #8]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d10e      	bne.n	8005370 <HAL_I2C_Init+0x1bc>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	1e58      	subs	r0, r3, #1
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	6859      	ldr	r1, [r3, #4]
 800535a:	460b      	mov	r3, r1
 800535c:	005b      	lsls	r3, r3, #1
 800535e:	440b      	add	r3, r1
 8005360:	fbb0 f3f3 	udiv	r3, r0, r3
 8005364:	3301      	adds	r3, #1
 8005366:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800536a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800536e:	e00f      	b.n	8005390 <HAL_I2C_Init+0x1dc>
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	1e58      	subs	r0, r3, #1
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6859      	ldr	r1, [r3, #4]
 8005378:	460b      	mov	r3, r1
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	440b      	add	r3, r1
 800537e:	0099      	lsls	r1, r3, #2
 8005380:	440b      	add	r3, r1
 8005382:	fbb0 f3f3 	udiv	r3, r0, r3
 8005386:	3301      	adds	r3, #1
 8005388:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800538c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005390:	6879      	ldr	r1, [r7, #4]
 8005392:	6809      	ldr	r1, [r1, #0]
 8005394:	4313      	orrs	r3, r2
 8005396:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	69da      	ldr	r2, [r3, #28]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a1b      	ldr	r3, [r3, #32]
 80053aa:	431a      	orrs	r2, r3
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	430a      	orrs	r2, r1
 80053b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80053be:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80053c2:	687a      	ldr	r2, [r7, #4]
 80053c4:	6911      	ldr	r1, [r2, #16]
 80053c6:	687a      	ldr	r2, [r7, #4]
 80053c8:	68d2      	ldr	r2, [r2, #12]
 80053ca:	4311      	orrs	r1, r2
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	6812      	ldr	r2, [r2, #0]
 80053d0:	430b      	orrs	r3, r1
 80053d2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	695a      	ldr	r2, [r3, #20]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	699b      	ldr	r3, [r3, #24]
 80053e6:	431a      	orrs	r2, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	430a      	orrs	r2, r1
 80053ee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f042 0201 	orr.w	r2, r2, #1
 80053fe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2220      	movs	r2, #32
 800540a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2200      	movs	r2, #0
 8005412:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	3710      	adds	r7, #16
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	000186a0 	.word	0x000186a0
 800542c:	001e847f 	.word	0x001e847f
 8005430:	003d08ff 	.word	0x003d08ff
 8005434:	431bde83 	.word	0x431bde83
 8005438:	10624dd3 	.word	0x10624dd3

0800543c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b088      	sub	sp, #32
 8005440:	af02      	add	r7, sp, #8
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	607a      	str	r2, [r7, #4]
 8005446:	461a      	mov	r2, r3
 8005448:	460b      	mov	r3, r1
 800544a:	817b      	strh	r3, [r7, #10]
 800544c:	4613      	mov	r3, r2
 800544e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005450:	f7fe fbbc 	bl	8003bcc <HAL_GetTick>
 8005454:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800545c:	b2db      	uxtb	r3, r3
 800545e:	2b20      	cmp	r3, #32
 8005460:	f040 80e0 	bne.w	8005624 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	9300      	str	r3, [sp, #0]
 8005468:	2319      	movs	r3, #25
 800546a:	2201      	movs	r2, #1
 800546c:	4970      	ldr	r1, [pc, #448]	@ (8005630 <HAL_I2C_Master_Transmit+0x1f4>)
 800546e:	68f8      	ldr	r0, [r7, #12]
 8005470:	f000 fc64 	bl	8005d3c <I2C_WaitOnFlagUntilTimeout>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d001      	beq.n	800547e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800547a:	2302      	movs	r3, #2
 800547c:	e0d3      	b.n	8005626 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005484:	2b01      	cmp	r3, #1
 8005486:	d101      	bne.n	800548c <HAL_I2C_Master_Transmit+0x50>
 8005488:	2302      	movs	r3, #2
 800548a:	e0cc      	b.n	8005626 <HAL_I2C_Master_Transmit+0x1ea>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0301 	and.w	r3, r3, #1
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d007      	beq.n	80054b2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	681a      	ldr	r2, [r3, #0]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f042 0201 	orr.w	r2, r2, #1
 80054b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80054c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	2221      	movs	r2, #33	@ 0x21
 80054c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	2210      	movs	r2, #16
 80054ce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2200      	movs	r2, #0
 80054d6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	893a      	ldrh	r2, [r7, #8]
 80054e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054e8:	b29a      	uxth	r2, r3
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	4a50      	ldr	r2, [pc, #320]	@ (8005634 <HAL_I2C_Master_Transmit+0x1f8>)
 80054f2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80054f4:	8979      	ldrh	r1, [r7, #10]
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	6a3a      	ldr	r2, [r7, #32]
 80054fa:	68f8      	ldr	r0, [r7, #12]
 80054fc:	f000 face 	bl	8005a9c <I2C_MasterRequestWrite>
 8005500:	4603      	mov	r3, r0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d001      	beq.n	800550a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e08d      	b.n	8005626 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800550a:	2300      	movs	r3, #0
 800550c:	613b      	str	r3, [r7, #16]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	695b      	ldr	r3, [r3, #20]
 8005514:	613b      	str	r3, [r7, #16]
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	699b      	ldr	r3, [r3, #24]
 800551c:	613b      	str	r3, [r7, #16]
 800551e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005520:	e066      	b.n	80055f0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005522:	697a      	ldr	r2, [r7, #20]
 8005524:	6a39      	ldr	r1, [r7, #32]
 8005526:	68f8      	ldr	r0, [r7, #12]
 8005528:	f000 fd22 	bl	8005f70 <I2C_WaitOnTXEFlagUntilTimeout>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d00d      	beq.n	800554e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005536:	2b04      	cmp	r3, #4
 8005538:	d107      	bne.n	800554a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005548:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e06b      	b.n	8005626 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005552:	781a      	ldrb	r2, [r3, #0]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800555e:	1c5a      	adds	r2, r3, #1
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005568:	b29b      	uxth	r3, r3
 800556a:	3b01      	subs	r3, #1
 800556c:	b29a      	uxth	r2, r3
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005576:	3b01      	subs	r3, #1
 8005578:	b29a      	uxth	r2, r3
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	695b      	ldr	r3, [r3, #20]
 8005584:	f003 0304 	and.w	r3, r3, #4
 8005588:	2b04      	cmp	r3, #4
 800558a:	d11b      	bne.n	80055c4 <HAL_I2C_Master_Transmit+0x188>
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005590:	2b00      	cmp	r3, #0
 8005592:	d017      	beq.n	80055c4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005598:	781a      	ldrb	r2, [r3, #0]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055a4:	1c5a      	adds	r2, r3, #1
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	3b01      	subs	r3, #1
 80055b2:	b29a      	uxth	r2, r3
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055bc:	3b01      	subs	r3, #1
 80055be:	b29a      	uxth	r2, r3
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055c4:	697a      	ldr	r2, [r7, #20]
 80055c6:	6a39      	ldr	r1, [r7, #32]
 80055c8:	68f8      	ldr	r0, [r7, #12]
 80055ca:	f000 fd19 	bl	8006000 <I2C_WaitOnBTFFlagUntilTimeout>
 80055ce:	4603      	mov	r3, r0
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00d      	beq.n	80055f0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055d8:	2b04      	cmp	r3, #4
 80055da:	d107      	bne.n	80055ec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055ea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e01a      	b.n	8005626 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d194      	bne.n	8005522 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	681a      	ldr	r2, [r3, #0]
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005606:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	2220      	movs	r2, #32
 800560c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	2200      	movs	r2, #0
 800561c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005620:	2300      	movs	r3, #0
 8005622:	e000      	b.n	8005626 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005624:	2302      	movs	r3, #2
  }
}
 8005626:	4618      	mov	r0, r3
 8005628:	3718      	adds	r7, #24
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop
 8005630:	00100002 	.word	0x00100002
 8005634:	ffff0000 	.word	0xffff0000

08005638 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b08c      	sub	sp, #48	@ 0x30
 800563c:	af02      	add	r7, sp, #8
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	607a      	str	r2, [r7, #4]
 8005642:	461a      	mov	r2, r3
 8005644:	460b      	mov	r3, r1
 8005646:	817b      	strh	r3, [r7, #10]
 8005648:	4613      	mov	r3, r2
 800564a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800564c:	f7fe fabe 	bl	8003bcc <HAL_GetTick>
 8005650:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005658:	b2db      	uxtb	r3, r3
 800565a:	2b20      	cmp	r3, #32
 800565c:	f040 8217 	bne.w	8005a8e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005660:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005662:	9300      	str	r3, [sp, #0]
 8005664:	2319      	movs	r3, #25
 8005666:	2201      	movs	r2, #1
 8005668:	497c      	ldr	r1, [pc, #496]	@ (800585c <HAL_I2C_Master_Receive+0x224>)
 800566a:	68f8      	ldr	r0, [r7, #12]
 800566c:	f000 fb66 	bl	8005d3c <I2C_WaitOnFlagUntilTimeout>
 8005670:	4603      	mov	r3, r0
 8005672:	2b00      	cmp	r3, #0
 8005674:	d001      	beq.n	800567a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005676:	2302      	movs	r3, #2
 8005678:	e20a      	b.n	8005a90 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005680:	2b01      	cmp	r3, #1
 8005682:	d101      	bne.n	8005688 <HAL_I2C_Master_Receive+0x50>
 8005684:	2302      	movs	r3, #2
 8005686:	e203      	b.n	8005a90 <HAL_I2C_Master_Receive+0x458>
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2201      	movs	r2, #1
 800568c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 0301 	and.w	r3, r3, #1
 800569a:	2b01      	cmp	r3, #1
 800569c:	d007      	beq.n	80056ae <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f042 0201 	orr.w	r2, r2, #1
 80056ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	681a      	ldr	r2, [r3, #0]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80056bc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	2222      	movs	r2, #34	@ 0x22
 80056c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2210      	movs	r2, #16
 80056ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2200      	movs	r2, #0
 80056d2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	893a      	ldrh	r2, [r7, #8]
 80056de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056e4:	b29a      	uxth	r2, r3
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	4a5c      	ldr	r2, [pc, #368]	@ (8005860 <HAL_I2C_Master_Receive+0x228>)
 80056ee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80056f0:	8979      	ldrh	r1, [r7, #10]
 80056f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056f6:	68f8      	ldr	r0, [r7, #12]
 80056f8:	f000 fa52 	bl	8005ba0 <I2C_MasterRequestRead>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d001      	beq.n	8005706 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	e1c4      	b.n	8005a90 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800570a:	2b00      	cmp	r3, #0
 800570c:	d113      	bne.n	8005736 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800570e:	2300      	movs	r3, #0
 8005710:	623b      	str	r3, [r7, #32]
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	695b      	ldr	r3, [r3, #20]
 8005718:	623b      	str	r3, [r7, #32]
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	699b      	ldr	r3, [r3, #24]
 8005720:	623b      	str	r3, [r7, #32]
 8005722:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005732:	601a      	str	r2, [r3, #0]
 8005734:	e198      	b.n	8005a68 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800573a:	2b01      	cmp	r3, #1
 800573c:	d11b      	bne.n	8005776 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800574c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800574e:	2300      	movs	r3, #0
 8005750:	61fb      	str	r3, [r7, #28]
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	695b      	ldr	r3, [r3, #20]
 8005758:	61fb      	str	r3, [r7, #28]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	699b      	ldr	r3, [r3, #24]
 8005760:	61fb      	str	r3, [r7, #28]
 8005762:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681a      	ldr	r2, [r3, #0]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005772:	601a      	str	r2, [r3, #0]
 8005774:	e178      	b.n	8005a68 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800577a:	2b02      	cmp	r3, #2
 800577c:	d11b      	bne.n	80057b6 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800578c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800579c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800579e:	2300      	movs	r3, #0
 80057a0:	61bb      	str	r3, [r7, #24]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	695b      	ldr	r3, [r3, #20]
 80057a8:	61bb      	str	r3, [r7, #24]
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	699b      	ldr	r3, [r3, #24]
 80057b0:	61bb      	str	r3, [r7, #24]
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	e158      	b.n	8005a68 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	681a      	ldr	r2, [r3, #0]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80057c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057c6:	2300      	movs	r3, #0
 80057c8:	617b      	str	r3, [r7, #20]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	695b      	ldr	r3, [r3, #20]
 80057d0:	617b      	str	r3, [r7, #20]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	699b      	ldr	r3, [r3, #24]
 80057d8:	617b      	str	r3, [r7, #20]
 80057da:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80057dc:	e144      	b.n	8005a68 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057e2:	2b03      	cmp	r3, #3
 80057e4:	f200 80f1 	bhi.w	80059ca <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d123      	bne.n	8005838 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057f2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80057f4:	68f8      	ldr	r0, [r7, #12]
 80057f6:	f000 fc4b 	bl	8006090 <I2C_WaitOnRXNEFlagUntilTimeout>
 80057fa:	4603      	mov	r3, r0
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d001      	beq.n	8005804 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	e145      	b.n	8005a90 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	691a      	ldr	r2, [r3, #16]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800580e:	b2d2      	uxtb	r2, r2
 8005810:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005816:	1c5a      	adds	r2, r3, #1
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005820:	3b01      	subs	r3, #1
 8005822:	b29a      	uxth	r2, r3
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800582c:	b29b      	uxth	r3, r3
 800582e:	3b01      	subs	r3, #1
 8005830:	b29a      	uxth	r2, r3
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005836:	e117      	b.n	8005a68 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800583c:	2b02      	cmp	r3, #2
 800583e:	d14e      	bne.n	80058de <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005842:	9300      	str	r3, [sp, #0]
 8005844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005846:	2200      	movs	r2, #0
 8005848:	4906      	ldr	r1, [pc, #24]	@ (8005864 <HAL_I2C_Master_Receive+0x22c>)
 800584a:	68f8      	ldr	r0, [r7, #12]
 800584c:	f000 fa76 	bl	8005d3c <I2C_WaitOnFlagUntilTimeout>
 8005850:	4603      	mov	r3, r0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d008      	beq.n	8005868 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e11a      	b.n	8005a90 <HAL_I2C_Master_Receive+0x458>
 800585a:	bf00      	nop
 800585c:	00100002 	.word	0x00100002
 8005860:	ffff0000 	.word	0xffff0000
 8005864:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681a      	ldr	r2, [r3, #0]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005876:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	691a      	ldr	r2, [r3, #16]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005882:	b2d2      	uxtb	r2, r2
 8005884:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800588a:	1c5a      	adds	r2, r3, #1
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005894:	3b01      	subs	r3, #1
 8005896:	b29a      	uxth	r2, r3
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	3b01      	subs	r3, #1
 80058a4:	b29a      	uxth	r2, r3
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	691a      	ldr	r2, [r3, #16]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b4:	b2d2      	uxtb	r2, r2
 80058b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058bc:	1c5a      	adds	r2, r3, #1
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058c6:	3b01      	subs	r3, #1
 80058c8:	b29a      	uxth	r2, r3
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	3b01      	subs	r3, #1
 80058d6:	b29a      	uxth	r2, r3
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80058dc:	e0c4      	b.n	8005a68 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80058de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e0:	9300      	str	r3, [sp, #0]
 80058e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e4:	2200      	movs	r2, #0
 80058e6:	496c      	ldr	r1, [pc, #432]	@ (8005a98 <HAL_I2C_Master_Receive+0x460>)
 80058e8:	68f8      	ldr	r0, [r7, #12]
 80058ea:	f000 fa27 	bl	8005d3c <I2C_WaitOnFlagUntilTimeout>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d001      	beq.n	80058f8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e0cb      	b.n	8005a90 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005906:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	691a      	ldr	r2, [r3, #16]
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005912:	b2d2      	uxtb	r2, r2
 8005914:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800591a:	1c5a      	adds	r2, r3, #1
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005924:	3b01      	subs	r3, #1
 8005926:	b29a      	uxth	r2, r3
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005930:	b29b      	uxth	r3, r3
 8005932:	3b01      	subs	r3, #1
 8005934:	b29a      	uxth	r2, r3
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800593a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800593c:	9300      	str	r3, [sp, #0]
 800593e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005940:	2200      	movs	r2, #0
 8005942:	4955      	ldr	r1, [pc, #340]	@ (8005a98 <HAL_I2C_Master_Receive+0x460>)
 8005944:	68f8      	ldr	r0, [r7, #12]
 8005946:	f000 f9f9 	bl	8005d3c <I2C_WaitOnFlagUntilTimeout>
 800594a:	4603      	mov	r3, r0
 800594c:	2b00      	cmp	r3, #0
 800594e:	d001      	beq.n	8005954 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e09d      	b.n	8005a90 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005962:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	691a      	ldr	r2, [r3, #16]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800596e:	b2d2      	uxtb	r2, r2
 8005970:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005976:	1c5a      	adds	r2, r3, #1
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005980:	3b01      	subs	r3, #1
 8005982:	b29a      	uxth	r2, r3
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800598c:	b29b      	uxth	r3, r3
 800598e:	3b01      	subs	r3, #1
 8005990:	b29a      	uxth	r2, r3
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	691a      	ldr	r2, [r3, #16]
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a0:	b2d2      	uxtb	r2, r2
 80059a2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059a8:	1c5a      	adds	r2, r3, #1
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059b2:	3b01      	subs	r3, #1
 80059b4:	b29a      	uxth	r2, r3
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059be:	b29b      	uxth	r3, r3
 80059c0:	3b01      	subs	r3, #1
 80059c2:	b29a      	uxth	r2, r3
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80059c8:	e04e      	b.n	8005a68 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80059ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059cc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80059ce:	68f8      	ldr	r0, [r7, #12]
 80059d0:	f000 fb5e 	bl	8006090 <I2C_WaitOnRXNEFlagUntilTimeout>
 80059d4:	4603      	mov	r3, r0
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d001      	beq.n	80059de <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e058      	b.n	8005a90 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	691a      	ldr	r2, [r3, #16]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059e8:	b2d2      	uxtb	r2, r2
 80059ea:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059f0:	1c5a      	adds	r2, r3, #1
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059fa:	3b01      	subs	r3, #1
 80059fc:	b29a      	uxth	r2, r3
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a06:	b29b      	uxth	r3, r3
 8005a08:	3b01      	subs	r3, #1
 8005a0a:	b29a      	uxth	r2, r3
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	695b      	ldr	r3, [r3, #20]
 8005a16:	f003 0304 	and.w	r3, r3, #4
 8005a1a:	2b04      	cmp	r3, #4
 8005a1c:	d124      	bne.n	8005a68 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a22:	2b03      	cmp	r3, #3
 8005a24:	d107      	bne.n	8005a36 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	681a      	ldr	r2, [r3, #0]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a34:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	691a      	ldr	r2, [r3, #16]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a40:	b2d2      	uxtb	r2, r2
 8005a42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a48:	1c5a      	adds	r2, r3, #1
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a52:	3b01      	subs	r3, #1
 8005a54:	b29a      	uxth	r2, r3
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a5e:	b29b      	uxth	r3, r3
 8005a60:	3b01      	subs	r3, #1
 8005a62:	b29a      	uxth	r2, r3
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	f47f aeb6 	bne.w	80057de <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	2220      	movs	r2, #32
 8005a76:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	e000      	b.n	8005a90 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005a8e:	2302      	movs	r3, #2
  }
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3728      	adds	r7, #40	@ 0x28
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	00010004 	.word	0x00010004

08005a9c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b088      	sub	sp, #32
 8005aa0:	af02      	add	r7, sp, #8
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	607a      	str	r2, [r7, #4]
 8005aa6:	603b      	str	r3, [r7, #0]
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	2b08      	cmp	r3, #8
 8005ab6:	d006      	beq.n	8005ac6 <I2C_MasterRequestWrite+0x2a>
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	2b01      	cmp	r3, #1
 8005abc:	d003      	beq.n	8005ac6 <I2C_MasterRequestWrite+0x2a>
 8005abe:	697b      	ldr	r3, [r7, #20]
 8005ac0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005ac4:	d108      	bne.n	8005ad8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	681a      	ldr	r2, [r3, #0]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005ad4:	601a      	str	r2, [r3, #0]
 8005ad6:	e00b      	b.n	8005af0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005adc:	2b12      	cmp	r3, #18
 8005ade:	d107      	bne.n	8005af0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005aee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	9300      	str	r3, [sp, #0]
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2200      	movs	r2, #0
 8005af8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005afc:	68f8      	ldr	r0, [r7, #12]
 8005afe:	f000 f91d 	bl	8005d3c <I2C_WaitOnFlagUntilTimeout>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d00d      	beq.n	8005b24 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b16:	d103      	bne.n	8005b20 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b1e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005b20:	2303      	movs	r3, #3
 8005b22:	e035      	b.n	8005b90 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	691b      	ldr	r3, [r3, #16]
 8005b28:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005b2c:	d108      	bne.n	8005b40 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005b2e:	897b      	ldrh	r3, [r7, #10]
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	461a      	mov	r2, r3
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005b3c:	611a      	str	r2, [r3, #16]
 8005b3e:	e01b      	b.n	8005b78 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005b40:	897b      	ldrh	r3, [r7, #10]
 8005b42:	11db      	asrs	r3, r3, #7
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	f003 0306 	and.w	r3, r3, #6
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	f063 030f 	orn	r3, r3, #15
 8005b50:	b2da      	uxtb	r2, r3
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	687a      	ldr	r2, [r7, #4]
 8005b5c:	490e      	ldr	r1, [pc, #56]	@ (8005b98 <I2C_MasterRequestWrite+0xfc>)
 8005b5e:	68f8      	ldr	r0, [r7, #12]
 8005b60:	f000 f966 	bl	8005e30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b64:	4603      	mov	r3, r0
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d001      	beq.n	8005b6e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e010      	b.n	8005b90 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005b6e:	897b      	ldrh	r3, [r7, #10]
 8005b70:	b2da      	uxtb	r2, r3
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	4907      	ldr	r1, [pc, #28]	@ (8005b9c <I2C_MasterRequestWrite+0x100>)
 8005b7e:	68f8      	ldr	r0, [r7, #12]
 8005b80:	f000 f956 	bl	8005e30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b84:	4603      	mov	r3, r0
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d001      	beq.n	8005b8e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e000      	b.n	8005b90 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3718      	adds	r7, #24
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	00010008 	.word	0x00010008
 8005b9c:	00010002 	.word	0x00010002

08005ba0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b088      	sub	sp, #32
 8005ba4:	af02      	add	r7, sp, #8
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	607a      	str	r2, [r7, #4]
 8005baa:	603b      	str	r3, [r7, #0]
 8005bac:	460b      	mov	r3, r1
 8005bae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bb4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005bc4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	2b08      	cmp	r3, #8
 8005bca:	d006      	beq.n	8005bda <I2C_MasterRequestRead+0x3a>
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d003      	beq.n	8005bda <I2C_MasterRequestRead+0x3a>
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005bd8:	d108      	bne.n	8005bec <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005be8:	601a      	str	r2, [r3, #0]
 8005bea:	e00b      	b.n	8005c04 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bf0:	2b11      	cmp	r3, #17
 8005bf2:	d107      	bne.n	8005c04 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005c02:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	9300      	str	r3, [sp, #0]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	f000 f893 	bl	8005d3c <I2C_WaitOnFlagUntilTimeout>
 8005c16:	4603      	mov	r3, r0
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d00d      	beq.n	8005c38 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c2a:	d103      	bne.n	8005c34 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c32:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005c34:	2303      	movs	r3, #3
 8005c36:	e079      	b.n	8005d2c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	691b      	ldr	r3, [r3, #16]
 8005c3c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005c40:	d108      	bne.n	8005c54 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005c42:	897b      	ldrh	r3, [r7, #10]
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	f043 0301 	orr.w	r3, r3, #1
 8005c4a:	b2da      	uxtb	r2, r3
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	611a      	str	r2, [r3, #16]
 8005c52:	e05f      	b.n	8005d14 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005c54:	897b      	ldrh	r3, [r7, #10]
 8005c56:	11db      	asrs	r3, r3, #7
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	f003 0306 	and.w	r3, r3, #6
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	f063 030f 	orn	r3, r3, #15
 8005c64:	b2da      	uxtb	r2, r3
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	4930      	ldr	r1, [pc, #192]	@ (8005d34 <I2C_MasterRequestRead+0x194>)
 8005c72:	68f8      	ldr	r0, [r7, #12]
 8005c74:	f000 f8dc 	bl	8005e30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d001      	beq.n	8005c82 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e054      	b.n	8005d2c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005c82:	897b      	ldrh	r3, [r7, #10]
 8005c84:	b2da      	uxtb	r2, r3
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	4929      	ldr	r1, [pc, #164]	@ (8005d38 <I2C_MasterRequestRead+0x198>)
 8005c92:	68f8      	ldr	r0, [r7, #12]
 8005c94:	f000 f8cc 	bl	8005e30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c98:	4603      	mov	r3, r0
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d001      	beq.n	8005ca2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e044      	b.n	8005d2c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	613b      	str	r3, [r7, #16]
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	695b      	ldr	r3, [r3, #20]
 8005cac:	613b      	str	r3, [r7, #16]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	699b      	ldr	r3, [r3, #24]
 8005cb4:	613b      	str	r3, [r7, #16]
 8005cb6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	681a      	ldr	r2, [r3, #0]
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005cc6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	9300      	str	r3, [sp, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005cd4:	68f8      	ldr	r0, [r7, #12]
 8005cd6:	f000 f831 	bl	8005d3c <I2C_WaitOnFlagUntilTimeout>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d00d      	beq.n	8005cfc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005cee:	d103      	bne.n	8005cf8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005cf6:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8005cf8:	2303      	movs	r3, #3
 8005cfa:	e017      	b.n	8005d2c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005cfc:	897b      	ldrh	r3, [r7, #10]
 8005cfe:	11db      	asrs	r3, r3, #7
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	f003 0306 	and.w	r3, r3, #6
 8005d06:	b2db      	uxtb	r3, r3
 8005d08:	f063 030e 	orn	r3, r3, #14
 8005d0c:	b2da      	uxtb	r2, r3
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	687a      	ldr	r2, [r7, #4]
 8005d18:	4907      	ldr	r1, [pc, #28]	@ (8005d38 <I2C_MasterRequestRead+0x198>)
 8005d1a:	68f8      	ldr	r0, [r7, #12]
 8005d1c:	f000 f888 	bl	8005e30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d001      	beq.n	8005d2a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	e000      	b.n	8005d2c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005d2a:	2300      	movs	r3, #0
}
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3718      	adds	r7, #24
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	00010008 	.word	0x00010008
 8005d38:	00010002 	.word	0x00010002

08005d3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005d3c:	b580      	push	{r7, lr}
 8005d3e:	b084      	sub	sp, #16
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	60b9      	str	r1, [r7, #8]
 8005d46:	603b      	str	r3, [r7, #0]
 8005d48:	4613      	mov	r3, r2
 8005d4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d4c:	e048      	b.n	8005de0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d54:	d044      	beq.n	8005de0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d56:	f7fd ff39 	bl	8003bcc <HAL_GetTick>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	1ad3      	subs	r3, r2, r3
 8005d60:	683a      	ldr	r2, [r7, #0]
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d302      	bcc.n	8005d6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d139      	bne.n	8005de0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	0c1b      	lsrs	r3, r3, #16
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d10d      	bne.n	8005d92 <I2C_WaitOnFlagUntilTimeout+0x56>
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	695b      	ldr	r3, [r3, #20]
 8005d7c:	43da      	mvns	r2, r3
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	4013      	ands	r3, r2
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	bf0c      	ite	eq
 8005d88:	2301      	moveq	r3, #1
 8005d8a:	2300      	movne	r3, #0
 8005d8c:	b2db      	uxtb	r3, r3
 8005d8e:	461a      	mov	r2, r3
 8005d90:	e00c      	b.n	8005dac <I2C_WaitOnFlagUntilTimeout+0x70>
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	699b      	ldr	r3, [r3, #24]
 8005d98:	43da      	mvns	r2, r3
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	bf0c      	ite	eq
 8005da4:	2301      	moveq	r3, #1
 8005da6:	2300      	movne	r3, #0
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	461a      	mov	r2, r3
 8005dac:	79fb      	ldrb	r3, [r7, #7]
 8005dae:	429a      	cmp	r2, r3
 8005db0:	d116      	bne.n	8005de0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2200      	movs	r2, #0
 8005db6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2220      	movs	r2, #32
 8005dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dcc:	f043 0220 	orr.w	r2, r3, #32
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e023      	b.n	8005e28 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005de0:	68bb      	ldr	r3, [r7, #8]
 8005de2:	0c1b      	lsrs	r3, r3, #16
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d10d      	bne.n	8005e06 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	695b      	ldr	r3, [r3, #20]
 8005df0:	43da      	mvns	r2, r3
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	4013      	ands	r3, r2
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	bf0c      	ite	eq
 8005dfc:	2301      	moveq	r3, #1
 8005dfe:	2300      	movne	r3, #0
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	461a      	mov	r2, r3
 8005e04:	e00c      	b.n	8005e20 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	699b      	ldr	r3, [r3, #24]
 8005e0c:	43da      	mvns	r2, r3
 8005e0e:	68bb      	ldr	r3, [r7, #8]
 8005e10:	4013      	ands	r3, r2
 8005e12:	b29b      	uxth	r3, r3
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	bf0c      	ite	eq
 8005e18:	2301      	moveq	r3, #1
 8005e1a:	2300      	movne	r3, #0
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	461a      	mov	r2, r3
 8005e20:	79fb      	ldrb	r3, [r7, #7]
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d093      	beq.n	8005d4e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005e26:	2300      	movs	r3, #0
}
 8005e28:	4618      	mov	r0, r3
 8005e2a:	3710      	adds	r7, #16
 8005e2c:	46bd      	mov	sp, r7
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	607a      	str	r2, [r7, #4]
 8005e3c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005e3e:	e071      	b.n	8005f24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	695b      	ldr	r3, [r3, #20]
 8005e46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e4e:	d123      	bne.n	8005e98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e5e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005e68:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2220      	movs	r2, #32
 8005e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e84:	f043 0204 	orr.w	r2, r3, #4
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e067      	b.n	8005f68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e9e:	d041      	beq.n	8005f24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ea0:	f7fd fe94 	bl	8003bcc <HAL_GetTick>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	1ad3      	subs	r3, r2, r3
 8005eaa:	687a      	ldr	r2, [r7, #4]
 8005eac:	429a      	cmp	r2, r3
 8005eae:	d302      	bcc.n	8005eb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d136      	bne.n	8005f24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	0c1b      	lsrs	r3, r3, #16
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d10c      	bne.n	8005eda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	695b      	ldr	r3, [r3, #20]
 8005ec6:	43da      	mvns	r2, r3
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	4013      	ands	r3, r2
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	bf14      	ite	ne
 8005ed2:	2301      	movne	r3, #1
 8005ed4:	2300      	moveq	r3, #0
 8005ed6:	b2db      	uxtb	r3, r3
 8005ed8:	e00b      	b.n	8005ef2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	699b      	ldr	r3, [r3, #24]
 8005ee0:	43da      	mvns	r2, r3
 8005ee2:	68bb      	ldr	r3, [r7, #8]
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	bf14      	ite	ne
 8005eec:	2301      	movne	r3, #1
 8005eee:	2300      	moveq	r3, #0
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d016      	beq.n	8005f24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2220      	movs	r2, #32
 8005f00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f10:	f043 0220 	orr.w	r2, r3, #32
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005f20:	2301      	movs	r3, #1
 8005f22:	e021      	b.n	8005f68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005f24:	68bb      	ldr	r3, [r7, #8]
 8005f26:	0c1b      	lsrs	r3, r3, #16
 8005f28:	b2db      	uxtb	r3, r3
 8005f2a:	2b01      	cmp	r3, #1
 8005f2c:	d10c      	bne.n	8005f48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	695b      	ldr	r3, [r3, #20]
 8005f34:	43da      	mvns	r2, r3
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	4013      	ands	r3, r2
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	bf14      	ite	ne
 8005f40:	2301      	movne	r3, #1
 8005f42:	2300      	moveq	r3, #0
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	e00b      	b.n	8005f60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	699b      	ldr	r3, [r3, #24]
 8005f4e:	43da      	mvns	r2, r3
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	4013      	ands	r3, r2
 8005f54:	b29b      	uxth	r3, r3
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	bf14      	ite	ne
 8005f5a:	2301      	movne	r3, #1
 8005f5c:	2300      	moveq	r3, #0
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	f47f af6d 	bne.w	8005e40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3710      	adds	r7, #16
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b084      	sub	sp, #16
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	60b9      	str	r1, [r7, #8]
 8005f7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f7c:	e034      	b.n	8005fe8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f7e:	68f8      	ldr	r0, [r7, #12]
 8005f80:	f000 f8e3 	bl	800614a <I2C_IsAcknowledgeFailed>
 8005f84:	4603      	mov	r3, r0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d001      	beq.n	8005f8e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	e034      	b.n	8005ff8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005f94:	d028      	beq.n	8005fe8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f96:	f7fd fe19 	bl	8003bcc <HAL_GetTick>
 8005f9a:	4602      	mov	r2, r0
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	1ad3      	subs	r3, r2, r3
 8005fa0:	68ba      	ldr	r2, [r7, #8]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d302      	bcc.n	8005fac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d11d      	bne.n	8005fe8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	695b      	ldr	r3, [r3, #20]
 8005fb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005fb6:	2b80      	cmp	r3, #128	@ 0x80
 8005fb8:	d016      	beq.n	8005fe8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2220      	movs	r2, #32
 8005fc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fd4:	f043 0220 	orr.w	r2, r3, #32
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e007      	b.n	8005ff8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	695b      	ldr	r3, [r3, #20]
 8005fee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ff2:	2b80      	cmp	r3, #128	@ 0x80
 8005ff4:	d1c3      	bne.n	8005f7e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005ff6:	2300      	movs	r3, #0
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3710      	adds	r7, #16
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b084      	sub	sp, #16
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800600c:	e034      	b.n	8006078 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800600e:	68f8      	ldr	r0, [r7, #12]
 8006010:	f000 f89b 	bl	800614a <I2C_IsAcknowledgeFailed>
 8006014:	4603      	mov	r3, r0
 8006016:	2b00      	cmp	r3, #0
 8006018:	d001      	beq.n	800601e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	e034      	b.n	8006088 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006024:	d028      	beq.n	8006078 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006026:	f7fd fdd1 	bl	8003bcc <HAL_GetTick>
 800602a:	4602      	mov	r2, r0
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	1ad3      	subs	r3, r2, r3
 8006030:	68ba      	ldr	r2, [r7, #8]
 8006032:	429a      	cmp	r2, r3
 8006034:	d302      	bcc.n	800603c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	2b00      	cmp	r3, #0
 800603a:	d11d      	bne.n	8006078 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	695b      	ldr	r3, [r3, #20]
 8006042:	f003 0304 	and.w	r3, r3, #4
 8006046:	2b04      	cmp	r3, #4
 8006048:	d016      	beq.n	8006078 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2200      	movs	r2, #0
 800604e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2220      	movs	r2, #32
 8006054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2200      	movs	r2, #0
 800605c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006064:	f043 0220 	orr.w	r2, r3, #32
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2200      	movs	r2, #0
 8006070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006074:	2301      	movs	r3, #1
 8006076:	e007      	b.n	8006088 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	695b      	ldr	r3, [r3, #20]
 800607e:	f003 0304 	and.w	r3, r3, #4
 8006082:	2b04      	cmp	r3, #4
 8006084:	d1c3      	bne.n	800600e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006086:	2300      	movs	r3, #0
}
 8006088:	4618      	mov	r0, r3
 800608a:	3710      	adds	r7, #16
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}

08006090 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b084      	sub	sp, #16
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800609c:	e049      	b.n	8006132 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	695b      	ldr	r3, [r3, #20]
 80060a4:	f003 0310 	and.w	r3, r3, #16
 80060a8:	2b10      	cmp	r3, #16
 80060aa:	d119      	bne.n	80060e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f06f 0210 	mvn.w	r2, #16
 80060b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2200      	movs	r2, #0
 80060ba:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2220      	movs	r2, #32
 80060c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	2200      	movs	r2, #0
 80060c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	e030      	b.n	8006142 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060e0:	f7fd fd74 	bl	8003bcc <HAL_GetTick>
 80060e4:	4602      	mov	r2, r0
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	1ad3      	subs	r3, r2, r3
 80060ea:	68ba      	ldr	r2, [r7, #8]
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d302      	bcc.n	80060f6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d11d      	bne.n	8006132 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	695b      	ldr	r3, [r3, #20]
 80060fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006100:	2b40      	cmp	r3, #64	@ 0x40
 8006102:	d016      	beq.n	8006132 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2200      	movs	r2, #0
 8006108:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2220      	movs	r2, #32
 800610e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2200      	movs	r2, #0
 8006116:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800611e:	f043 0220 	orr.w	r2, r3, #32
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2200      	movs	r2, #0
 800612a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	e007      	b.n	8006142 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	695b      	ldr	r3, [r3, #20]
 8006138:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800613c:	2b40      	cmp	r3, #64	@ 0x40
 800613e:	d1ae      	bne.n	800609e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3710      	adds	r7, #16
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}

0800614a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800614a:	b480      	push	{r7}
 800614c:	b083      	sub	sp, #12
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	695b      	ldr	r3, [r3, #20]
 8006158:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800615c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006160:	d11b      	bne.n	800619a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800616a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2220      	movs	r2, #32
 8006176:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006186:	f043 0204 	orr.w	r2, r3, #4
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e000      	b.n	800619c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800619a:	2300      	movs	r3, #0
}
 800619c:	4618      	mov	r0, r3
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b086      	sub	sp, #24
 80061ac:	af02      	add	r7, sp, #8
 80061ae:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d101      	bne.n	80061ba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e101      	b.n	80063be <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d106      	bne.n	80061da <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f009 f839 	bl	800f24c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2203      	movs	r2, #3
 80061de:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80061e8:	d102      	bne.n	80061f0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2200      	movs	r2, #0
 80061ee:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4618      	mov	r0, r3
 80061f6:	f004 f9c0 	bl	800a57a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6818      	ldr	r0, [r3, #0]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	7c1a      	ldrb	r2, [r3, #16]
 8006202:	f88d 2000 	strb.w	r2, [sp]
 8006206:	3304      	adds	r3, #4
 8006208:	cb0e      	ldmia	r3, {r1, r2, r3}
 800620a:	f004 f89f 	bl	800a34c <USB_CoreInit>
 800620e:	4603      	mov	r3, r0
 8006210:	2b00      	cmp	r3, #0
 8006212:	d005      	beq.n	8006220 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2202      	movs	r2, #2
 8006218:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800621c:	2301      	movs	r3, #1
 800621e:	e0ce      	b.n	80063be <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2100      	movs	r1, #0
 8006226:	4618      	mov	r0, r3
 8006228:	f004 f9b8 	bl	800a59c <USB_SetCurrentMode>
 800622c:	4603      	mov	r3, r0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d005      	beq.n	800623e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2202      	movs	r2, #2
 8006236:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800623a:	2301      	movs	r3, #1
 800623c:	e0bf      	b.n	80063be <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800623e:	2300      	movs	r3, #0
 8006240:	73fb      	strb	r3, [r7, #15]
 8006242:	e04a      	b.n	80062da <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006244:	7bfa      	ldrb	r2, [r7, #15]
 8006246:	6879      	ldr	r1, [r7, #4]
 8006248:	4613      	mov	r3, r2
 800624a:	00db      	lsls	r3, r3, #3
 800624c:	4413      	add	r3, r2
 800624e:	009b      	lsls	r3, r3, #2
 8006250:	440b      	add	r3, r1
 8006252:	3315      	adds	r3, #21
 8006254:	2201      	movs	r2, #1
 8006256:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006258:	7bfa      	ldrb	r2, [r7, #15]
 800625a:	6879      	ldr	r1, [r7, #4]
 800625c:	4613      	mov	r3, r2
 800625e:	00db      	lsls	r3, r3, #3
 8006260:	4413      	add	r3, r2
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	440b      	add	r3, r1
 8006266:	3314      	adds	r3, #20
 8006268:	7bfa      	ldrb	r2, [r7, #15]
 800626a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800626c:	7bfa      	ldrb	r2, [r7, #15]
 800626e:	7bfb      	ldrb	r3, [r7, #15]
 8006270:	b298      	uxth	r0, r3
 8006272:	6879      	ldr	r1, [r7, #4]
 8006274:	4613      	mov	r3, r2
 8006276:	00db      	lsls	r3, r3, #3
 8006278:	4413      	add	r3, r2
 800627a:	009b      	lsls	r3, r3, #2
 800627c:	440b      	add	r3, r1
 800627e:	332e      	adds	r3, #46	@ 0x2e
 8006280:	4602      	mov	r2, r0
 8006282:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006284:	7bfa      	ldrb	r2, [r7, #15]
 8006286:	6879      	ldr	r1, [r7, #4]
 8006288:	4613      	mov	r3, r2
 800628a:	00db      	lsls	r3, r3, #3
 800628c:	4413      	add	r3, r2
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	440b      	add	r3, r1
 8006292:	3318      	adds	r3, #24
 8006294:	2200      	movs	r2, #0
 8006296:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006298:	7bfa      	ldrb	r2, [r7, #15]
 800629a:	6879      	ldr	r1, [r7, #4]
 800629c:	4613      	mov	r3, r2
 800629e:	00db      	lsls	r3, r3, #3
 80062a0:	4413      	add	r3, r2
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	440b      	add	r3, r1
 80062a6:	331c      	adds	r3, #28
 80062a8:	2200      	movs	r2, #0
 80062aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80062ac:	7bfa      	ldrb	r2, [r7, #15]
 80062ae:	6879      	ldr	r1, [r7, #4]
 80062b0:	4613      	mov	r3, r2
 80062b2:	00db      	lsls	r3, r3, #3
 80062b4:	4413      	add	r3, r2
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	440b      	add	r3, r1
 80062ba:	3320      	adds	r3, #32
 80062bc:	2200      	movs	r2, #0
 80062be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80062c0:	7bfa      	ldrb	r2, [r7, #15]
 80062c2:	6879      	ldr	r1, [r7, #4]
 80062c4:	4613      	mov	r3, r2
 80062c6:	00db      	lsls	r3, r3, #3
 80062c8:	4413      	add	r3, r2
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	440b      	add	r3, r1
 80062ce:	3324      	adds	r3, #36	@ 0x24
 80062d0:	2200      	movs	r2, #0
 80062d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80062d4:	7bfb      	ldrb	r3, [r7, #15]
 80062d6:	3301      	adds	r3, #1
 80062d8:	73fb      	strb	r3, [r7, #15]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	791b      	ldrb	r3, [r3, #4]
 80062de:	7bfa      	ldrb	r2, [r7, #15]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d3af      	bcc.n	8006244 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80062e4:	2300      	movs	r3, #0
 80062e6:	73fb      	strb	r3, [r7, #15]
 80062e8:	e044      	b.n	8006374 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80062ea:	7bfa      	ldrb	r2, [r7, #15]
 80062ec:	6879      	ldr	r1, [r7, #4]
 80062ee:	4613      	mov	r3, r2
 80062f0:	00db      	lsls	r3, r3, #3
 80062f2:	4413      	add	r3, r2
 80062f4:	009b      	lsls	r3, r3, #2
 80062f6:	440b      	add	r3, r1
 80062f8:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80062fc:	2200      	movs	r2, #0
 80062fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8006300:	7bfa      	ldrb	r2, [r7, #15]
 8006302:	6879      	ldr	r1, [r7, #4]
 8006304:	4613      	mov	r3, r2
 8006306:	00db      	lsls	r3, r3, #3
 8006308:	4413      	add	r3, r2
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	440b      	add	r3, r1
 800630e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8006312:	7bfa      	ldrb	r2, [r7, #15]
 8006314:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8006316:	7bfa      	ldrb	r2, [r7, #15]
 8006318:	6879      	ldr	r1, [r7, #4]
 800631a:	4613      	mov	r3, r2
 800631c:	00db      	lsls	r3, r3, #3
 800631e:	4413      	add	r3, r2
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	440b      	add	r3, r1
 8006324:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006328:	2200      	movs	r2, #0
 800632a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800632c:	7bfa      	ldrb	r2, [r7, #15]
 800632e:	6879      	ldr	r1, [r7, #4]
 8006330:	4613      	mov	r3, r2
 8006332:	00db      	lsls	r3, r3, #3
 8006334:	4413      	add	r3, r2
 8006336:	009b      	lsls	r3, r3, #2
 8006338:	440b      	add	r3, r1
 800633a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800633e:	2200      	movs	r2, #0
 8006340:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006342:	7bfa      	ldrb	r2, [r7, #15]
 8006344:	6879      	ldr	r1, [r7, #4]
 8006346:	4613      	mov	r3, r2
 8006348:	00db      	lsls	r3, r3, #3
 800634a:	4413      	add	r3, r2
 800634c:	009b      	lsls	r3, r3, #2
 800634e:	440b      	add	r3, r1
 8006350:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8006354:	2200      	movs	r2, #0
 8006356:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006358:	7bfa      	ldrb	r2, [r7, #15]
 800635a:	6879      	ldr	r1, [r7, #4]
 800635c:	4613      	mov	r3, r2
 800635e:	00db      	lsls	r3, r3, #3
 8006360:	4413      	add	r3, r2
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	440b      	add	r3, r1
 8006366:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800636a:	2200      	movs	r2, #0
 800636c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800636e:	7bfb      	ldrb	r3, [r7, #15]
 8006370:	3301      	adds	r3, #1
 8006372:	73fb      	strb	r3, [r7, #15]
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	791b      	ldrb	r3, [r3, #4]
 8006378:	7bfa      	ldrb	r2, [r7, #15]
 800637a:	429a      	cmp	r2, r3
 800637c:	d3b5      	bcc.n	80062ea <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6818      	ldr	r0, [r3, #0]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	7c1a      	ldrb	r2, [r3, #16]
 8006386:	f88d 2000 	strb.w	r2, [sp]
 800638a:	3304      	adds	r3, #4
 800638c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800638e:	f004 f951 	bl	800a634 <USB_DevInit>
 8006392:	4603      	mov	r3, r0
 8006394:	2b00      	cmp	r3, #0
 8006396:	d005      	beq.n	80063a4 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2202      	movs	r2, #2
 800639c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	e00c      	b.n	80063be <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2201      	movs	r2, #1
 80063ae:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4618      	mov	r0, r3
 80063b8:	f005 f995 	bl	800b6e6 <USB_DevDisconnect>

  return HAL_OK;
 80063bc:	2300      	movs	r3, #0
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3710      	adds	r7, #16
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}

080063c6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80063c6:	b580      	push	{r7, lr}
 80063c8:	b084      	sub	sp, #16
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d101      	bne.n	80063e2 <HAL_PCD_Start+0x1c>
 80063de:	2302      	movs	r3, #2
 80063e0:	e022      	b.n	8006428 <HAL_PCD_Start+0x62>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2201      	movs	r2, #1
 80063e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d009      	beq.n	800640a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d105      	bne.n	800640a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006402:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	4618      	mov	r0, r3
 8006410:	f004 f8a2 	bl	800a558 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4618      	mov	r0, r3
 800641a:	f005 f943 	bl	800b6a4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006426:	2300      	movs	r3, #0
}
 8006428:	4618      	mov	r0, r3
 800642a:	3710      	adds	r7, #16
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}

08006430 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006430:	b590      	push	{r4, r7, lr}
 8006432:	b08d      	sub	sp, #52	@ 0x34
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800643e:	6a3b      	ldr	r3, [r7, #32]
 8006440:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	4618      	mov	r0, r3
 8006448:	f005 fa01 	bl	800b84e <USB_GetMode>
 800644c:	4603      	mov	r3, r0
 800644e:	2b00      	cmp	r3, #0
 8006450:	f040 848c 	bne.w	8006d6c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4618      	mov	r0, r3
 800645a:	f005 f965 	bl	800b728 <USB_ReadInterrupts>
 800645e:	4603      	mov	r3, r0
 8006460:	2b00      	cmp	r3, #0
 8006462:	f000 8482 	beq.w	8006d6a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006466:	69fb      	ldr	r3, [r7, #28]
 8006468:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	0a1b      	lsrs	r3, r3, #8
 8006470:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4618      	mov	r0, r3
 8006480:	f005 f952 	bl	800b728 <USB_ReadInterrupts>
 8006484:	4603      	mov	r3, r0
 8006486:	f003 0302 	and.w	r3, r3, #2
 800648a:	2b02      	cmp	r3, #2
 800648c:	d107      	bne.n	800649e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	695a      	ldr	r2, [r3, #20]
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f002 0202 	and.w	r2, r2, #2
 800649c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4618      	mov	r0, r3
 80064a4:	f005 f940 	bl	800b728 <USB_ReadInterrupts>
 80064a8:	4603      	mov	r3, r0
 80064aa:	f003 0310 	and.w	r3, r3, #16
 80064ae:	2b10      	cmp	r3, #16
 80064b0:	d161      	bne.n	8006576 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	699a      	ldr	r2, [r3, #24]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f022 0210 	bic.w	r2, r2, #16
 80064c0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80064c2:	6a3b      	ldr	r3, [r7, #32]
 80064c4:	6a1b      	ldr	r3, [r3, #32]
 80064c6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	f003 020f 	and.w	r2, r3, #15
 80064ce:	4613      	mov	r3, r2
 80064d0:	00db      	lsls	r3, r3, #3
 80064d2:	4413      	add	r3, r2
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	4413      	add	r3, r2
 80064de:	3304      	adds	r3, #4
 80064e0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80064e2:	69bb      	ldr	r3, [r7, #24]
 80064e4:	0c5b      	lsrs	r3, r3, #17
 80064e6:	f003 030f 	and.w	r3, r3, #15
 80064ea:	2b02      	cmp	r3, #2
 80064ec:	d124      	bne.n	8006538 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80064ee:	69ba      	ldr	r2, [r7, #24]
 80064f0:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80064f4:	4013      	ands	r3, r2
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d035      	beq.n	8006566 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	091b      	lsrs	r3, r3, #4
 8006502:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006504:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006508:	b29b      	uxth	r3, r3
 800650a:	461a      	mov	r2, r3
 800650c:	6a38      	ldr	r0, [r7, #32]
 800650e:	f004 ff77 	bl	800b400 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	68da      	ldr	r2, [r3, #12]
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	091b      	lsrs	r3, r3, #4
 800651a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800651e:	441a      	add	r2, r3
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	695a      	ldr	r2, [r3, #20]
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	091b      	lsrs	r3, r3, #4
 800652c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006530:	441a      	add	r2, r3
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	615a      	str	r2, [r3, #20]
 8006536:	e016      	b.n	8006566 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	0c5b      	lsrs	r3, r3, #17
 800653c:	f003 030f 	and.w	r3, r3, #15
 8006540:	2b06      	cmp	r3, #6
 8006542:	d110      	bne.n	8006566 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800654a:	2208      	movs	r2, #8
 800654c:	4619      	mov	r1, r3
 800654e:	6a38      	ldr	r0, [r7, #32]
 8006550:	f004 ff56 	bl	800b400 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	695a      	ldr	r2, [r3, #20]
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	091b      	lsrs	r3, r3, #4
 800655c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006560:	441a      	add	r2, r3
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	699a      	ldr	r2, [r3, #24]
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f042 0210 	orr.w	r2, r2, #16
 8006574:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4618      	mov	r0, r3
 800657c:	f005 f8d4 	bl	800b728 <USB_ReadInterrupts>
 8006580:	4603      	mov	r3, r0
 8006582:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006586:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800658a:	f040 80a7 	bne.w	80066dc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800658e:	2300      	movs	r3, #0
 8006590:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4618      	mov	r0, r3
 8006598:	f005 f8d9 	bl	800b74e <USB_ReadDevAllOutEpInterrupt>
 800659c:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 800659e:	e099      	b.n	80066d4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80065a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065a2:	f003 0301 	and.w	r3, r3, #1
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	f000 808e 	beq.w	80066c8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065b2:	b2d2      	uxtb	r2, r2
 80065b4:	4611      	mov	r1, r2
 80065b6:	4618      	mov	r0, r3
 80065b8:	f005 f8fd 	bl	800b7b6 <USB_ReadDevOutEPInterrupt>
 80065bc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	f003 0301 	and.w	r3, r3, #1
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d00c      	beq.n	80065e2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80065c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ca:	015a      	lsls	r2, r3, #5
 80065cc:	69fb      	ldr	r3, [r7, #28]
 80065ce:	4413      	add	r3, r2
 80065d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065d4:	461a      	mov	r2, r3
 80065d6:	2301      	movs	r3, #1
 80065d8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80065da:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 fea1 	bl	8007324 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	f003 0308 	and.w	r3, r3, #8
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d00c      	beq.n	8006606 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80065ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ee:	015a      	lsls	r2, r3, #5
 80065f0:	69fb      	ldr	r3, [r7, #28]
 80065f2:	4413      	add	r3, r2
 80065f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065f8:	461a      	mov	r2, r3
 80065fa:	2308      	movs	r3, #8
 80065fc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80065fe:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f000 ff77 	bl	80074f4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8006606:	693b      	ldr	r3, [r7, #16]
 8006608:	f003 0310 	and.w	r3, r3, #16
 800660c:	2b00      	cmp	r3, #0
 800660e:	d008      	beq.n	8006622 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8006610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006612:	015a      	lsls	r2, r3, #5
 8006614:	69fb      	ldr	r3, [r7, #28]
 8006616:	4413      	add	r3, r2
 8006618:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800661c:	461a      	mov	r2, r3
 800661e:	2310      	movs	r3, #16
 8006620:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	f003 0302 	and.w	r3, r3, #2
 8006628:	2b00      	cmp	r3, #0
 800662a:	d030      	beq.n	800668e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800662c:	6a3b      	ldr	r3, [r7, #32]
 800662e:	695b      	ldr	r3, [r3, #20]
 8006630:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006634:	2b80      	cmp	r3, #128	@ 0x80
 8006636:	d109      	bne.n	800664c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006638:	69fb      	ldr	r3, [r7, #28]
 800663a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	69fa      	ldr	r2, [r7, #28]
 8006642:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006646:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800664a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800664c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800664e:	4613      	mov	r3, r2
 8006650:	00db      	lsls	r3, r3, #3
 8006652:	4413      	add	r3, r2
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	4413      	add	r3, r2
 800665e:	3304      	adds	r3, #4
 8006660:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	78db      	ldrb	r3, [r3, #3]
 8006666:	2b01      	cmp	r3, #1
 8006668:	d108      	bne.n	800667c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	2200      	movs	r2, #0
 800666e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006672:	b2db      	uxtb	r3, r3
 8006674:	4619      	mov	r1, r3
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	f008 feee 	bl	800f458 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800667c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800667e:	015a      	lsls	r2, r3, #5
 8006680:	69fb      	ldr	r3, [r7, #28]
 8006682:	4413      	add	r3, r2
 8006684:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006688:	461a      	mov	r2, r3
 800668a:	2302      	movs	r3, #2
 800668c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	f003 0320 	and.w	r3, r3, #32
 8006694:	2b00      	cmp	r3, #0
 8006696:	d008      	beq.n	80066aa <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800669a:	015a      	lsls	r2, r3, #5
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	4413      	add	r3, r2
 80066a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066a4:	461a      	mov	r2, r3
 80066a6:	2320      	movs	r3, #32
 80066a8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d009      	beq.n	80066c8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80066b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066b6:	015a      	lsls	r2, r3, #5
 80066b8:	69fb      	ldr	r3, [r7, #28]
 80066ba:	4413      	add	r3, r2
 80066bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80066c0:	461a      	mov	r2, r3
 80066c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80066c6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80066c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ca:	3301      	adds	r3, #1
 80066cc:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80066ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066d0:	085b      	lsrs	r3, r3, #1
 80066d2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80066d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	f47f af62 	bne.w	80065a0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4618      	mov	r0, r3
 80066e2:	f005 f821 	bl	800b728 <USB_ReadInterrupts>
 80066e6:	4603      	mov	r3, r0
 80066e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80066ec:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80066f0:	f040 80db 	bne.w	80068aa <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4618      	mov	r0, r3
 80066fa:	f005 f842 	bl	800b782 <USB_ReadDevAllInEpInterrupt>
 80066fe:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8006700:	2300      	movs	r3, #0
 8006702:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8006704:	e0cd      	b.n	80068a2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006706:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006708:	f003 0301 	and.w	r3, r3, #1
 800670c:	2b00      	cmp	r3, #0
 800670e:	f000 80c2 	beq.w	8006896 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006718:	b2d2      	uxtb	r2, r2
 800671a:	4611      	mov	r1, r2
 800671c:	4618      	mov	r0, r3
 800671e:	f005 f868 	bl	800b7f2 <USB_ReadDevInEPInterrupt>
 8006722:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006724:	693b      	ldr	r3, [r7, #16]
 8006726:	f003 0301 	and.w	r3, r3, #1
 800672a:	2b00      	cmp	r3, #0
 800672c:	d057      	beq.n	80067de <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800672e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006730:	f003 030f 	and.w	r3, r3, #15
 8006734:	2201      	movs	r2, #1
 8006736:	fa02 f303 	lsl.w	r3, r2, r3
 800673a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800673c:	69fb      	ldr	r3, [r7, #28]
 800673e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006742:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	43db      	mvns	r3, r3
 8006748:	69f9      	ldr	r1, [r7, #28]
 800674a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800674e:	4013      	ands	r3, r2
 8006750:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006754:	015a      	lsls	r2, r3, #5
 8006756:	69fb      	ldr	r3, [r7, #28]
 8006758:	4413      	add	r3, r2
 800675a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800675e:	461a      	mov	r2, r3
 8006760:	2301      	movs	r3, #1
 8006762:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	799b      	ldrb	r3, [r3, #6]
 8006768:	2b01      	cmp	r3, #1
 800676a:	d132      	bne.n	80067d2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800676c:	6879      	ldr	r1, [r7, #4]
 800676e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006770:	4613      	mov	r3, r2
 8006772:	00db      	lsls	r3, r3, #3
 8006774:	4413      	add	r3, r2
 8006776:	009b      	lsls	r3, r3, #2
 8006778:	440b      	add	r3, r1
 800677a:	3320      	adds	r3, #32
 800677c:	6819      	ldr	r1, [r3, #0]
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006782:	4613      	mov	r3, r2
 8006784:	00db      	lsls	r3, r3, #3
 8006786:	4413      	add	r3, r2
 8006788:	009b      	lsls	r3, r3, #2
 800678a:	4403      	add	r3, r0
 800678c:	331c      	adds	r3, #28
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	4419      	add	r1, r3
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006796:	4613      	mov	r3, r2
 8006798:	00db      	lsls	r3, r3, #3
 800679a:	4413      	add	r3, r2
 800679c:	009b      	lsls	r3, r3, #2
 800679e:	4403      	add	r3, r0
 80067a0:	3320      	adds	r3, #32
 80067a2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80067a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d113      	bne.n	80067d2 <HAL_PCD_IRQHandler+0x3a2>
 80067aa:	6879      	ldr	r1, [r7, #4]
 80067ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067ae:	4613      	mov	r3, r2
 80067b0:	00db      	lsls	r3, r3, #3
 80067b2:	4413      	add	r3, r2
 80067b4:	009b      	lsls	r3, r3, #2
 80067b6:	440b      	add	r3, r1
 80067b8:	3324      	adds	r3, #36	@ 0x24
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d108      	bne.n	80067d2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6818      	ldr	r0, [r3, #0]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80067ca:	461a      	mov	r2, r3
 80067cc:	2101      	movs	r1, #1
 80067ce:	f005 f86f 	bl	800b8b0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80067d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	4619      	mov	r1, r3
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f008 fdb8 	bl	800f34e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	f003 0308 	and.w	r3, r3, #8
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d008      	beq.n	80067fa <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80067e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067ea:	015a      	lsls	r2, r3, #5
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	4413      	add	r3, r2
 80067f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80067f4:	461a      	mov	r2, r3
 80067f6:	2308      	movs	r3, #8
 80067f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	f003 0310 	and.w	r3, r3, #16
 8006800:	2b00      	cmp	r3, #0
 8006802:	d008      	beq.n	8006816 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006806:	015a      	lsls	r2, r3, #5
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	4413      	add	r3, r2
 800680c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006810:	461a      	mov	r2, r3
 8006812:	2310      	movs	r3, #16
 8006814:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800681c:	2b00      	cmp	r3, #0
 800681e:	d008      	beq.n	8006832 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006820:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006822:	015a      	lsls	r2, r3, #5
 8006824:	69fb      	ldr	r3, [r7, #28]
 8006826:	4413      	add	r3, r2
 8006828:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800682c:	461a      	mov	r2, r3
 800682e:	2340      	movs	r3, #64	@ 0x40
 8006830:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	f003 0302 	and.w	r3, r3, #2
 8006838:	2b00      	cmp	r3, #0
 800683a:	d023      	beq.n	8006884 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800683c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800683e:	6a38      	ldr	r0, [r7, #32]
 8006840:	f004 f85c 	bl	800a8fc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006844:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006846:	4613      	mov	r3, r2
 8006848:	00db      	lsls	r3, r3, #3
 800684a:	4413      	add	r3, r2
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	3310      	adds	r3, #16
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	4413      	add	r3, r2
 8006854:	3304      	adds	r3, #4
 8006856:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006858:	697b      	ldr	r3, [r7, #20]
 800685a:	78db      	ldrb	r3, [r3, #3]
 800685c:	2b01      	cmp	r3, #1
 800685e:	d108      	bne.n	8006872 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	2200      	movs	r2, #0
 8006864:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006868:	b2db      	uxtb	r3, r3
 800686a:	4619      	mov	r1, r3
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f008 fe05 	bl	800f47c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006874:	015a      	lsls	r2, r3, #5
 8006876:	69fb      	ldr	r3, [r7, #28]
 8006878:	4413      	add	r3, r2
 800687a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800687e:	461a      	mov	r2, r3
 8006880:	2302      	movs	r3, #2
 8006882:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006884:	693b      	ldr	r3, [r7, #16]
 8006886:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800688a:	2b00      	cmp	r3, #0
 800688c:	d003      	beq.n	8006896 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800688e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 fcbb 	bl	800720c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006896:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006898:	3301      	adds	r3, #1
 800689a:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800689c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800689e:	085b      	lsrs	r3, r3, #1
 80068a0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80068a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	f47f af2e 	bne.w	8006706 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4618      	mov	r0, r3
 80068b0:	f004 ff3a 	bl	800b728 <USB_ReadInterrupts>
 80068b4:	4603      	mov	r3, r0
 80068b6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80068ba:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80068be:	d122      	bne.n	8006906 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80068c0:	69fb      	ldr	r3, [r7, #28]
 80068c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	69fa      	ldr	r2, [r7, #28]
 80068ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80068ce:	f023 0301 	bic.w	r3, r3, #1
 80068d2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80068da:	2b01      	cmp	r3, #1
 80068dc:	d108      	bne.n	80068f0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80068e6:	2100      	movs	r1, #0
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 fea1 	bl	8007630 <HAL_PCDEx_LPM_Callback>
 80068ee:	e002      	b.n	80068f6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f008 fda3 	bl	800f43c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	695a      	ldr	r2, [r3, #20]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8006904:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4618      	mov	r0, r3
 800690c:	f004 ff0c 	bl	800b728 <USB_ReadInterrupts>
 8006910:	4603      	mov	r3, r0
 8006912:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006916:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800691a:	d112      	bne.n	8006942 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800691c:	69fb      	ldr	r3, [r7, #28]
 800691e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006922:	689b      	ldr	r3, [r3, #8]
 8006924:	f003 0301 	and.w	r3, r3, #1
 8006928:	2b01      	cmp	r3, #1
 800692a:	d102      	bne.n	8006932 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f008 fd5f 	bl	800f3f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	695a      	ldr	r2, [r3, #20]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8006940:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	4618      	mov	r0, r3
 8006948:	f004 feee 	bl	800b728 <USB_ReadInterrupts>
 800694c:	4603      	mov	r3, r0
 800694e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8006952:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006956:	f040 80b7 	bne.w	8006ac8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800695a:	69fb      	ldr	r3, [r7, #28]
 800695c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	69fa      	ldr	r2, [r7, #28]
 8006964:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006968:	f023 0301 	bic.w	r3, r3, #1
 800696c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	2110      	movs	r1, #16
 8006974:	4618      	mov	r0, r3
 8006976:	f003 ffc1 	bl	800a8fc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800697a:	2300      	movs	r3, #0
 800697c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800697e:	e046      	b.n	8006a0e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006982:	015a      	lsls	r2, r3, #5
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	4413      	add	r3, r2
 8006988:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800698c:	461a      	mov	r2, r3
 800698e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8006992:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006994:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006996:	015a      	lsls	r2, r3, #5
 8006998:	69fb      	ldr	r3, [r7, #28]
 800699a:	4413      	add	r3, r2
 800699c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069a4:	0151      	lsls	r1, r2, #5
 80069a6:	69fa      	ldr	r2, [r7, #28]
 80069a8:	440a      	add	r2, r1
 80069aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80069ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80069b2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80069b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069b6:	015a      	lsls	r2, r3, #5
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	4413      	add	r3, r2
 80069bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069c0:	461a      	mov	r2, r3
 80069c2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80069c6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80069c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069ca:	015a      	lsls	r2, r3, #5
 80069cc:	69fb      	ldr	r3, [r7, #28]
 80069ce:	4413      	add	r3, r2
 80069d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069d8:	0151      	lsls	r1, r2, #5
 80069da:	69fa      	ldr	r2, [r7, #28]
 80069dc:	440a      	add	r2, r1
 80069de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80069e2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80069e6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80069e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069ea:	015a      	lsls	r2, r3, #5
 80069ec:	69fb      	ldr	r3, [r7, #28]
 80069ee:	4413      	add	r3, r2
 80069f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80069f8:	0151      	lsls	r1, r2, #5
 80069fa:	69fa      	ldr	r2, [r7, #28]
 80069fc:	440a      	add	r2, r1
 80069fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006a02:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8006a06:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a0a:	3301      	adds	r3, #1
 8006a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	791b      	ldrb	r3, [r3, #4]
 8006a12:	461a      	mov	r2, r3
 8006a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a16:	4293      	cmp	r3, r2
 8006a18:	d3b2      	bcc.n	8006980 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006a1a:	69fb      	ldr	r3, [r7, #28]
 8006a1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a20:	69db      	ldr	r3, [r3, #28]
 8006a22:	69fa      	ldr	r2, [r7, #28]
 8006a24:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a28:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8006a2c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	7bdb      	ldrb	r3, [r3, #15]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d016      	beq.n	8006a64 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006a36:	69fb      	ldr	r3, [r7, #28]
 8006a38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a40:	69fa      	ldr	r2, [r7, #28]
 8006a42:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a46:	f043 030b 	orr.w	r3, r3, #11
 8006a4a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006a4e:	69fb      	ldr	r3, [r7, #28]
 8006a50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a56:	69fa      	ldr	r2, [r7, #28]
 8006a58:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a5c:	f043 030b 	orr.w	r3, r3, #11
 8006a60:	6453      	str	r3, [r2, #68]	@ 0x44
 8006a62:	e015      	b.n	8006a90 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006a64:	69fb      	ldr	r3, [r7, #28]
 8006a66:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a6a:	695b      	ldr	r3, [r3, #20]
 8006a6c:	69fa      	ldr	r2, [r7, #28]
 8006a6e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a72:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006a76:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8006a7a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006a7c:	69fb      	ldr	r3, [r7, #28]
 8006a7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a82:	691b      	ldr	r3, [r3, #16]
 8006a84:	69fa      	ldr	r2, [r7, #28]
 8006a86:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a8a:	f043 030b 	orr.w	r3, r3, #11
 8006a8e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006a90:	69fb      	ldr	r3, [r7, #28]
 8006a92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	69fa      	ldr	r2, [r7, #28]
 8006a9a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006a9e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006aa2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6818      	ldr	r0, [r3, #0]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006ab2:	461a      	mov	r2, r3
 8006ab4:	f004 fefc 	bl	800b8b0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	695a      	ldr	r2, [r3, #20]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8006ac6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4618      	mov	r0, r3
 8006ace:	f004 fe2b 	bl	800b728 <USB_ReadInterrupts>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006ad8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006adc:	d123      	bne.n	8006b26 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f004 fec1 	bl	800b86a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4618      	mov	r0, r3
 8006aee:	f003 ff7e 	bl	800a9ee <USB_GetDevSpeed>
 8006af2:	4603      	mov	r3, r0
 8006af4:	461a      	mov	r2, r3
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681c      	ldr	r4, [r3, #0]
 8006afe:	f001 fa07 	bl	8007f10 <HAL_RCC_GetHCLKFreq>
 8006b02:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006b08:	461a      	mov	r2, r3
 8006b0a:	4620      	mov	r0, r4
 8006b0c:	f003 fc82 	bl	800a414 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f008 fc44 	bl	800f39e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	695a      	ldr	r2, [r3, #20]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8006b24:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f004 fdfc 	bl	800b728 <USB_ReadInterrupts>
 8006b30:	4603      	mov	r3, r0
 8006b32:	f003 0308 	and.w	r3, r3, #8
 8006b36:	2b08      	cmp	r3, #8
 8006b38:	d10a      	bne.n	8006b50 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f008 fc21 	bl	800f382 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	695a      	ldr	r2, [r3, #20]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f002 0208 	and.w	r2, r2, #8
 8006b4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	4618      	mov	r0, r3
 8006b56:	f004 fde7 	bl	800b728 <USB_ReadInterrupts>
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b60:	2b80      	cmp	r3, #128	@ 0x80
 8006b62:	d123      	bne.n	8006bac <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006b64:	6a3b      	ldr	r3, [r7, #32]
 8006b66:	699b      	ldr	r3, [r3, #24]
 8006b68:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006b6c:	6a3b      	ldr	r3, [r7, #32]
 8006b6e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006b70:	2301      	movs	r3, #1
 8006b72:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b74:	e014      	b.n	8006ba0 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006b76:	6879      	ldr	r1, [r7, #4]
 8006b78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	00db      	lsls	r3, r3, #3
 8006b7e:	4413      	add	r3, r2
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	440b      	add	r3, r1
 8006b84:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d105      	bne.n	8006b9a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	4619      	mov	r1, r3
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 fb08 	bl	80071aa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	791b      	ldrb	r3, [r3, #4]
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d3e4      	bcc.n	8006b76 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	f004 fdb9 	bl	800b728 <USB_ReadInterrupts>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006bbc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006bc0:	d13c      	bne.n	8006c3c <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bc6:	e02b      	b.n	8006c20 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006bc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bca:	015a      	lsls	r2, r3, #5
 8006bcc:	69fb      	ldr	r3, [r7, #28]
 8006bce:	4413      	add	r3, r2
 8006bd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006bd8:	6879      	ldr	r1, [r7, #4]
 8006bda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bdc:	4613      	mov	r3, r2
 8006bde:	00db      	lsls	r3, r3, #3
 8006be0:	4413      	add	r3, r2
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	440b      	add	r3, r1
 8006be6:	3318      	adds	r3, #24
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d115      	bne.n	8006c1a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006bee:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	da12      	bge.n	8006c1a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006bf4:	6879      	ldr	r1, [r7, #4]
 8006bf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bf8:	4613      	mov	r3, r2
 8006bfa:	00db      	lsls	r3, r3, #3
 8006bfc:	4413      	add	r3, r2
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	440b      	add	r3, r1
 8006c02:	3317      	adds	r3, #23
 8006c04:	2201      	movs	r2, #1
 8006c06:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c0a:	b2db      	uxtb	r3, r3
 8006c0c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006c10:	b2db      	uxtb	r3, r3
 8006c12:	4619      	mov	r1, r3
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	f000 fac8 	bl	80071aa <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c1c:	3301      	adds	r3, #1
 8006c1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	791b      	ldrb	r3, [r3, #4]
 8006c24:	461a      	mov	r2, r3
 8006c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d3cd      	bcc.n	8006bc8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	695a      	ldr	r2, [r3, #20]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8006c3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	4618      	mov	r0, r3
 8006c42:	f004 fd71 	bl	800b728 <USB_ReadInterrupts>
 8006c46:	4603      	mov	r3, r0
 8006c48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006c4c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006c50:	d156      	bne.n	8006d00 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006c52:	2301      	movs	r3, #1
 8006c54:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c56:	e045      	b.n	8006ce4 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c5a:	015a      	lsls	r2, r3, #5
 8006c5c:	69fb      	ldr	r3, [r7, #28]
 8006c5e:	4413      	add	r3, r2
 8006c60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006c68:	6879      	ldr	r1, [r7, #4]
 8006c6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	00db      	lsls	r3, r3, #3
 8006c70:	4413      	add	r3, r2
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	440b      	add	r3, r1
 8006c76:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d12e      	bne.n	8006cde <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006c80:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	da2b      	bge.n	8006cde <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006c86:	69bb      	ldr	r3, [r7, #24]
 8006c88:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8006c92:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d121      	bne.n	8006cde <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006c9a:	6879      	ldr	r1, [r7, #4]
 8006c9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	00db      	lsls	r3, r3, #3
 8006ca2:	4413      	add	r3, r2
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	440b      	add	r3, r1
 8006ca8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006cac:	2201      	movs	r2, #1
 8006cae:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006cb0:	6a3b      	ldr	r3, [r7, #32]
 8006cb2:	699b      	ldr	r3, [r3, #24]
 8006cb4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006cb8:	6a3b      	ldr	r3, [r7, #32]
 8006cba:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006cbc:	6a3b      	ldr	r3, [r7, #32]
 8006cbe:	695b      	ldr	r3, [r3, #20]
 8006cc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d10a      	bne.n	8006cde <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	69fa      	ldr	r2, [r7, #28]
 8006cd2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006cd6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006cda:	6053      	str	r3, [r2, #4]
            break;
 8006cdc:	e008      	b.n	8006cf0 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ce0:	3301      	adds	r3, #1
 8006ce2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	791b      	ldrb	r3, [r3, #4]
 8006ce8:	461a      	mov	r2, r3
 8006cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d3b3      	bcc.n	8006c58 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	695a      	ldr	r2, [r3, #20]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8006cfe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4618      	mov	r0, r3
 8006d06:	f004 fd0f 	bl	800b728 <USB_ReadInterrupts>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006d10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d14:	d10a      	bne.n	8006d2c <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f008 fbc2 	bl	800f4a0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	695a      	ldr	r2, [r3, #20]
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8006d2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4618      	mov	r0, r3
 8006d32:	f004 fcf9 	bl	800b728 <USB_ReadInterrupts>
 8006d36:	4603      	mov	r3, r0
 8006d38:	f003 0304 	and.w	r3, r3, #4
 8006d3c:	2b04      	cmp	r3, #4
 8006d3e:	d115      	bne.n	8006d6c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006d48:	69bb      	ldr	r3, [r7, #24]
 8006d4a:	f003 0304 	and.w	r3, r3, #4
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d002      	beq.n	8006d58 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f008 fbb2 	bl	800f4bc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	6859      	ldr	r1, [r3, #4]
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	69ba      	ldr	r2, [r7, #24]
 8006d64:	430a      	orrs	r2, r1
 8006d66:	605a      	str	r2, [r3, #4]
 8006d68:	e000      	b.n	8006d6c <HAL_PCD_IRQHandler+0x93c>
      return;
 8006d6a:	bf00      	nop
    }
  }
}
 8006d6c:	3734      	adds	r7, #52	@ 0x34
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd90      	pop	{r4, r7, pc}

08006d72 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006d72:	b580      	push	{r7, lr}
 8006d74:	b082      	sub	sp, #8
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
 8006d7a:	460b      	mov	r3, r1
 8006d7c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d101      	bne.n	8006d8c <HAL_PCD_SetAddress+0x1a>
 8006d88:	2302      	movs	r3, #2
 8006d8a:	e012      	b.n	8006db2 <HAL_PCD_SetAddress+0x40>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	78fa      	ldrb	r2, [r7, #3]
 8006d98:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	78fa      	ldrb	r2, [r7, #3]
 8006da0:	4611      	mov	r1, r2
 8006da2:	4618      	mov	r0, r3
 8006da4:	f004 fc58 	bl	800b658 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006db0:	2300      	movs	r3, #0
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3708      	adds	r7, #8
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}

08006dba <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006dba:	b580      	push	{r7, lr}
 8006dbc:	b084      	sub	sp, #16
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	6078      	str	r0, [r7, #4]
 8006dc2:	4608      	mov	r0, r1
 8006dc4:	4611      	mov	r1, r2
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	4603      	mov	r3, r0
 8006dca:	70fb      	strb	r3, [r7, #3]
 8006dcc:	460b      	mov	r3, r1
 8006dce:	803b      	strh	r3, [r7, #0]
 8006dd0:	4613      	mov	r3, r2
 8006dd2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006dd8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	da0f      	bge.n	8006e00 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006de0:	78fb      	ldrb	r3, [r7, #3]
 8006de2:	f003 020f 	and.w	r2, r3, #15
 8006de6:	4613      	mov	r3, r2
 8006de8:	00db      	lsls	r3, r3, #3
 8006dea:	4413      	add	r3, r2
 8006dec:	009b      	lsls	r3, r3, #2
 8006dee:	3310      	adds	r3, #16
 8006df0:	687a      	ldr	r2, [r7, #4]
 8006df2:	4413      	add	r3, r2
 8006df4:	3304      	adds	r3, #4
 8006df6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	705a      	strb	r2, [r3, #1]
 8006dfe:	e00f      	b.n	8006e20 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006e00:	78fb      	ldrb	r3, [r7, #3]
 8006e02:	f003 020f 	and.w	r2, r3, #15
 8006e06:	4613      	mov	r3, r2
 8006e08:	00db      	lsls	r3, r3, #3
 8006e0a:	4413      	add	r3, r2
 8006e0c:	009b      	lsls	r3, r3, #2
 8006e0e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	4413      	add	r3, r2
 8006e16:	3304      	adds	r3, #4
 8006e18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006e20:	78fb      	ldrb	r3, [r7, #3]
 8006e22:	f003 030f 	and.w	r3, r3, #15
 8006e26:	b2da      	uxtb	r2, r3
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006e2c:	883a      	ldrh	r2, [r7, #0]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	78ba      	ldrb	r2, [r7, #2]
 8006e36:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	785b      	ldrb	r3, [r3, #1]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d004      	beq.n	8006e4a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	781b      	ldrb	r3, [r3, #0]
 8006e44:	461a      	mov	r2, r3
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006e4a:	78bb      	ldrb	r3, [r7, #2]
 8006e4c:	2b02      	cmp	r3, #2
 8006e4e:	d102      	bne.n	8006e56 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	2200      	movs	r2, #0
 8006e54:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006e5c:	2b01      	cmp	r3, #1
 8006e5e:	d101      	bne.n	8006e64 <HAL_PCD_EP_Open+0xaa>
 8006e60:	2302      	movs	r3, #2
 8006e62:	e00e      	b.n	8006e82 <HAL_PCD_EP_Open+0xc8>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	2201      	movs	r2, #1
 8006e68:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	68f9      	ldr	r1, [r7, #12]
 8006e72:	4618      	mov	r0, r3
 8006e74:	f003 fde0 	bl	800aa38 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8006e80:	7afb      	ldrb	r3, [r7, #11]
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3710      	adds	r7, #16
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}

08006e8a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006e8a:	b580      	push	{r7, lr}
 8006e8c:	b084      	sub	sp, #16
 8006e8e:	af00      	add	r7, sp, #0
 8006e90:	6078      	str	r0, [r7, #4]
 8006e92:	460b      	mov	r3, r1
 8006e94:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006e96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	da0f      	bge.n	8006ebe <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006e9e:	78fb      	ldrb	r3, [r7, #3]
 8006ea0:	f003 020f 	and.w	r2, r3, #15
 8006ea4:	4613      	mov	r3, r2
 8006ea6:	00db      	lsls	r3, r3, #3
 8006ea8:	4413      	add	r3, r2
 8006eaa:	009b      	lsls	r3, r3, #2
 8006eac:	3310      	adds	r3, #16
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	4413      	add	r3, r2
 8006eb2:	3304      	adds	r3, #4
 8006eb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2201      	movs	r2, #1
 8006eba:	705a      	strb	r2, [r3, #1]
 8006ebc:	e00f      	b.n	8006ede <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006ebe:	78fb      	ldrb	r3, [r7, #3]
 8006ec0:	f003 020f 	and.w	r2, r3, #15
 8006ec4:	4613      	mov	r3, r2
 8006ec6:	00db      	lsls	r3, r3, #3
 8006ec8:	4413      	add	r3, r2
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	4413      	add	r3, r2
 8006ed4:	3304      	adds	r3, #4
 8006ed6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2200      	movs	r2, #0
 8006edc:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006ede:	78fb      	ldrb	r3, [r7, #3]
 8006ee0:	f003 030f 	and.w	r3, r3, #15
 8006ee4:	b2da      	uxtb	r2, r3
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d101      	bne.n	8006ef8 <HAL_PCD_EP_Close+0x6e>
 8006ef4:	2302      	movs	r3, #2
 8006ef6:	e00e      	b.n	8006f16 <HAL_PCD_EP_Close+0x8c>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	68f9      	ldr	r1, [r7, #12]
 8006f06:	4618      	mov	r0, r3
 8006f08:	f003 fe1e 	bl	800ab48 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8006f14:	2300      	movs	r3, #0
}
 8006f16:	4618      	mov	r0, r3
 8006f18:	3710      	adds	r7, #16
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	bd80      	pop	{r7, pc}

08006f1e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006f1e:	b580      	push	{r7, lr}
 8006f20:	b086      	sub	sp, #24
 8006f22:	af00      	add	r7, sp, #0
 8006f24:	60f8      	str	r0, [r7, #12]
 8006f26:	607a      	str	r2, [r7, #4]
 8006f28:	603b      	str	r3, [r7, #0]
 8006f2a:	460b      	mov	r3, r1
 8006f2c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006f2e:	7afb      	ldrb	r3, [r7, #11]
 8006f30:	f003 020f 	and.w	r2, r3, #15
 8006f34:	4613      	mov	r3, r2
 8006f36:	00db      	lsls	r3, r3, #3
 8006f38:	4413      	add	r3, r2
 8006f3a:	009b      	lsls	r3, r3, #2
 8006f3c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006f40:	68fa      	ldr	r2, [r7, #12]
 8006f42:	4413      	add	r3, r2
 8006f44:	3304      	adds	r3, #4
 8006f46:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006f48:	697b      	ldr	r3, [r7, #20]
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006f4e:	697b      	ldr	r3, [r7, #20]
 8006f50:	683a      	ldr	r2, [r7, #0]
 8006f52:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	2200      	movs	r2, #0
 8006f58:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006f60:	7afb      	ldrb	r3, [r7, #11]
 8006f62:	f003 030f 	and.w	r3, r3, #15
 8006f66:	b2da      	uxtb	r2, r3
 8006f68:	697b      	ldr	r3, [r7, #20]
 8006f6a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	799b      	ldrb	r3, [r3, #6]
 8006f70:	2b01      	cmp	r3, #1
 8006f72:	d102      	bne.n	8006f7a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006f74:	687a      	ldr	r2, [r7, #4]
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	6818      	ldr	r0, [r3, #0]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	799b      	ldrb	r3, [r3, #6]
 8006f82:	461a      	mov	r2, r3
 8006f84:	6979      	ldr	r1, [r7, #20]
 8006f86:	f003 febb 	bl	800ad00 <USB_EPStartXfer>

  return HAL_OK;
 8006f8a:	2300      	movs	r3, #0
}
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3718      	adds	r7, #24
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b083      	sub	sp, #12
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	460b      	mov	r3, r1
 8006f9e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006fa0:	78fb      	ldrb	r3, [r7, #3]
 8006fa2:	f003 020f 	and.w	r2, r3, #15
 8006fa6:	6879      	ldr	r1, [r7, #4]
 8006fa8:	4613      	mov	r3, r2
 8006faa:	00db      	lsls	r3, r3, #3
 8006fac:	4413      	add	r3, r2
 8006fae:	009b      	lsls	r3, r3, #2
 8006fb0:	440b      	add	r3, r1
 8006fb2:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8006fb6:	681b      	ldr	r3, [r3, #0]
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	370c      	adds	r7, #12
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr

08006fc4 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b086      	sub	sp, #24
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	607a      	str	r2, [r7, #4]
 8006fce:	603b      	str	r3, [r7, #0]
 8006fd0:	460b      	mov	r3, r1
 8006fd2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006fd4:	7afb      	ldrb	r3, [r7, #11]
 8006fd6:	f003 020f 	and.w	r2, r3, #15
 8006fda:	4613      	mov	r3, r2
 8006fdc:	00db      	lsls	r3, r3, #3
 8006fde:	4413      	add	r3, r2
 8006fe0:	009b      	lsls	r3, r3, #2
 8006fe2:	3310      	adds	r3, #16
 8006fe4:	68fa      	ldr	r2, [r7, #12]
 8006fe6:	4413      	add	r3, r2
 8006fe8:	3304      	adds	r3, #4
 8006fea:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	683a      	ldr	r2, [r7, #0]
 8006ff6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8006ffe:	697b      	ldr	r3, [r7, #20]
 8007000:	2201      	movs	r2, #1
 8007002:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007004:	7afb      	ldrb	r3, [r7, #11]
 8007006:	f003 030f 	and.w	r3, r3, #15
 800700a:	b2da      	uxtb	r2, r3
 800700c:	697b      	ldr	r3, [r7, #20]
 800700e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	799b      	ldrb	r3, [r3, #6]
 8007014:	2b01      	cmp	r3, #1
 8007016:	d102      	bne.n	800701e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007018:	687a      	ldr	r2, [r7, #4]
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	6818      	ldr	r0, [r3, #0]
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	799b      	ldrb	r3, [r3, #6]
 8007026:	461a      	mov	r2, r3
 8007028:	6979      	ldr	r1, [r7, #20]
 800702a:	f003 fe69 	bl	800ad00 <USB_EPStartXfer>

  return HAL_OK;
 800702e:	2300      	movs	r3, #0
}
 8007030:	4618      	mov	r0, r3
 8007032:	3718      	adds	r7, #24
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}

08007038 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007038:	b580      	push	{r7, lr}
 800703a:	b084      	sub	sp, #16
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
 8007040:	460b      	mov	r3, r1
 8007042:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007044:	78fb      	ldrb	r3, [r7, #3]
 8007046:	f003 030f 	and.w	r3, r3, #15
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	7912      	ldrb	r2, [r2, #4]
 800704e:	4293      	cmp	r3, r2
 8007050:	d901      	bls.n	8007056 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007052:	2301      	movs	r3, #1
 8007054:	e04f      	b.n	80070f6 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007056:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800705a:	2b00      	cmp	r3, #0
 800705c:	da0f      	bge.n	800707e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800705e:	78fb      	ldrb	r3, [r7, #3]
 8007060:	f003 020f 	and.w	r2, r3, #15
 8007064:	4613      	mov	r3, r2
 8007066:	00db      	lsls	r3, r3, #3
 8007068:	4413      	add	r3, r2
 800706a:	009b      	lsls	r3, r3, #2
 800706c:	3310      	adds	r3, #16
 800706e:	687a      	ldr	r2, [r7, #4]
 8007070:	4413      	add	r3, r2
 8007072:	3304      	adds	r3, #4
 8007074:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2201      	movs	r2, #1
 800707a:	705a      	strb	r2, [r3, #1]
 800707c:	e00d      	b.n	800709a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800707e:	78fa      	ldrb	r2, [r7, #3]
 8007080:	4613      	mov	r3, r2
 8007082:	00db      	lsls	r3, r3, #3
 8007084:	4413      	add	r3, r2
 8007086:	009b      	lsls	r3, r3, #2
 8007088:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800708c:	687a      	ldr	r2, [r7, #4]
 800708e:	4413      	add	r3, r2
 8007090:	3304      	adds	r3, #4
 8007092:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2200      	movs	r2, #0
 8007098:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	2201      	movs	r2, #1
 800709e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80070a0:	78fb      	ldrb	r3, [r7, #3]
 80070a2:	f003 030f 	and.w	r3, r3, #15
 80070a6:	b2da      	uxtb	r2, r3
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d101      	bne.n	80070ba <HAL_PCD_EP_SetStall+0x82>
 80070b6:	2302      	movs	r3, #2
 80070b8:	e01d      	b.n	80070f6 <HAL_PCD_EP_SetStall+0xbe>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2201      	movs	r2, #1
 80070be:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	68f9      	ldr	r1, [r7, #12]
 80070c8:	4618      	mov	r0, r3
 80070ca:	f004 f9f1 	bl	800b4b0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80070ce:	78fb      	ldrb	r3, [r7, #3]
 80070d0:	f003 030f 	and.w	r3, r3, #15
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d109      	bne.n	80070ec <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6818      	ldr	r0, [r3, #0]
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	7999      	ldrb	r1, [r3, #6]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80070e6:	461a      	mov	r2, r3
 80070e8:	f004 fbe2 	bl	800b8b0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2200      	movs	r2, #0
 80070f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80070f4:	2300      	movs	r3, #0
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3710      	adds	r7, #16
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}

080070fe <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80070fe:	b580      	push	{r7, lr}
 8007100:	b084      	sub	sp, #16
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
 8007106:	460b      	mov	r3, r1
 8007108:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800710a:	78fb      	ldrb	r3, [r7, #3]
 800710c:	f003 030f 	and.w	r3, r3, #15
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	7912      	ldrb	r2, [r2, #4]
 8007114:	4293      	cmp	r3, r2
 8007116:	d901      	bls.n	800711c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	e042      	b.n	80071a2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800711c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007120:	2b00      	cmp	r3, #0
 8007122:	da0f      	bge.n	8007144 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007124:	78fb      	ldrb	r3, [r7, #3]
 8007126:	f003 020f 	and.w	r2, r3, #15
 800712a:	4613      	mov	r3, r2
 800712c:	00db      	lsls	r3, r3, #3
 800712e:	4413      	add	r3, r2
 8007130:	009b      	lsls	r3, r3, #2
 8007132:	3310      	adds	r3, #16
 8007134:	687a      	ldr	r2, [r7, #4]
 8007136:	4413      	add	r3, r2
 8007138:	3304      	adds	r3, #4
 800713a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	2201      	movs	r2, #1
 8007140:	705a      	strb	r2, [r3, #1]
 8007142:	e00f      	b.n	8007164 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007144:	78fb      	ldrb	r3, [r7, #3]
 8007146:	f003 020f 	and.w	r2, r3, #15
 800714a:	4613      	mov	r3, r2
 800714c:	00db      	lsls	r3, r3, #3
 800714e:	4413      	add	r3, r2
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	4413      	add	r3, r2
 800715a:	3304      	adds	r3, #4
 800715c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2200      	movs	r2, #0
 8007162:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2200      	movs	r2, #0
 8007168:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800716a:	78fb      	ldrb	r3, [r7, #3]
 800716c:	f003 030f 	and.w	r3, r3, #15
 8007170:	b2da      	uxtb	r2, r3
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800717c:	2b01      	cmp	r3, #1
 800717e:	d101      	bne.n	8007184 <HAL_PCD_EP_ClrStall+0x86>
 8007180:	2302      	movs	r3, #2
 8007182:	e00e      	b.n	80071a2 <HAL_PCD_EP_ClrStall+0xa4>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2201      	movs	r2, #1
 8007188:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	68f9      	ldr	r1, [r7, #12]
 8007192:	4618      	mov	r0, r3
 8007194:	f004 f9fa 	bl	800b58c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2200      	movs	r2, #0
 800719c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80071a0:	2300      	movs	r3, #0
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3710      	adds	r7, #16
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}

080071aa <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80071aa:	b580      	push	{r7, lr}
 80071ac:	b084      	sub	sp, #16
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	6078      	str	r0, [r7, #4]
 80071b2:	460b      	mov	r3, r1
 80071b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80071b6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	da0c      	bge.n	80071d8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80071be:	78fb      	ldrb	r3, [r7, #3]
 80071c0:	f003 020f 	and.w	r2, r3, #15
 80071c4:	4613      	mov	r3, r2
 80071c6:	00db      	lsls	r3, r3, #3
 80071c8:	4413      	add	r3, r2
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	3310      	adds	r3, #16
 80071ce:	687a      	ldr	r2, [r7, #4]
 80071d0:	4413      	add	r3, r2
 80071d2:	3304      	adds	r3, #4
 80071d4:	60fb      	str	r3, [r7, #12]
 80071d6:	e00c      	b.n	80071f2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80071d8:	78fb      	ldrb	r3, [r7, #3]
 80071da:	f003 020f 	and.w	r2, r3, #15
 80071de:	4613      	mov	r3, r2
 80071e0:	00db      	lsls	r3, r3, #3
 80071e2:	4413      	add	r3, r2
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	4413      	add	r3, r2
 80071ee:	3304      	adds	r3, #4
 80071f0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	68f9      	ldr	r1, [r7, #12]
 80071f8:	4618      	mov	r0, r3
 80071fa:	f004 f819 	bl	800b230 <USB_EPStopXfer>
 80071fe:	4603      	mov	r3, r0
 8007200:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007202:	7afb      	ldrb	r3, [r7, #11]
}
 8007204:	4618      	mov	r0, r3
 8007206:	3710      	adds	r7, #16
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}

0800720c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b08a      	sub	sp, #40	@ 0x28
 8007210:	af02      	add	r7, sp, #8
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8007220:	683a      	ldr	r2, [r7, #0]
 8007222:	4613      	mov	r3, r2
 8007224:	00db      	lsls	r3, r3, #3
 8007226:	4413      	add	r3, r2
 8007228:	009b      	lsls	r3, r3, #2
 800722a:	3310      	adds	r3, #16
 800722c:	687a      	ldr	r2, [r7, #4]
 800722e:	4413      	add	r3, r2
 8007230:	3304      	adds	r3, #4
 8007232:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	695a      	ldr	r2, [r3, #20]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	691b      	ldr	r3, [r3, #16]
 800723c:	429a      	cmp	r2, r3
 800723e:	d901      	bls.n	8007244 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007240:	2301      	movs	r3, #1
 8007242:	e06b      	b.n	800731c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	691a      	ldr	r2, [r3, #16]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	695b      	ldr	r3, [r3, #20]
 800724c:	1ad3      	subs	r3, r2, r3
 800724e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	69fa      	ldr	r2, [r7, #28]
 8007256:	429a      	cmp	r2, r3
 8007258:	d902      	bls.n	8007260 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007260:	69fb      	ldr	r3, [r7, #28]
 8007262:	3303      	adds	r3, #3
 8007264:	089b      	lsrs	r3, r3, #2
 8007266:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007268:	e02a      	b.n	80072c0 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	691a      	ldr	r2, [r3, #16]
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	695b      	ldr	r3, [r3, #20]
 8007272:	1ad3      	subs	r3, r2, r3
 8007274:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	69fa      	ldr	r2, [r7, #28]
 800727c:	429a      	cmp	r2, r3
 800727e:	d902      	bls.n	8007286 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	3303      	adds	r3, #3
 800728a:	089b      	lsrs	r3, r3, #2
 800728c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	68d9      	ldr	r1, [r3, #12]
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	b2da      	uxtb	r2, r3
 8007296:	69fb      	ldr	r3, [r7, #28]
 8007298:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800729e:	9300      	str	r3, [sp, #0]
 80072a0:	4603      	mov	r3, r0
 80072a2:	6978      	ldr	r0, [r7, #20]
 80072a4:	f004 f86e 	bl	800b384 <USB_WritePacket>

    ep->xfer_buff  += len;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	68da      	ldr	r2, [r3, #12]
 80072ac:	69fb      	ldr	r3, [r7, #28]
 80072ae:	441a      	add	r2, r3
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	695a      	ldr	r2, [r3, #20]
 80072b8:	69fb      	ldr	r3, [r7, #28]
 80072ba:	441a      	add	r2, r3
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	015a      	lsls	r2, r3, #5
 80072c4:	693b      	ldr	r3, [r7, #16]
 80072c6:	4413      	add	r3, r2
 80072c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80072cc:	699b      	ldr	r3, [r3, #24]
 80072ce:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80072d0:	69ba      	ldr	r2, [r7, #24]
 80072d2:	429a      	cmp	r2, r3
 80072d4:	d809      	bhi.n	80072ea <PCD_WriteEmptyTxFifo+0xde>
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	695a      	ldr	r2, [r3, #20]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80072de:	429a      	cmp	r2, r3
 80072e0:	d203      	bcs.n	80072ea <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	691b      	ldr	r3, [r3, #16]
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d1bf      	bne.n	800726a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	691a      	ldr	r2, [r3, #16]
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	695b      	ldr	r3, [r3, #20]
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d811      	bhi.n	800731a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	f003 030f 	and.w	r3, r3, #15
 80072fc:	2201      	movs	r2, #1
 80072fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007302:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800730a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	43db      	mvns	r3, r3
 8007310:	6939      	ldr	r1, [r7, #16]
 8007312:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007316:	4013      	ands	r3, r2
 8007318:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800731a:	2300      	movs	r3, #0
}
 800731c:	4618      	mov	r0, r3
 800731e:	3720      	adds	r7, #32
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007324:	b580      	push	{r7, lr}
 8007326:	b088      	sub	sp, #32
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007334:	69fb      	ldr	r3, [r7, #28]
 8007336:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007338:	69fb      	ldr	r3, [r7, #28]
 800733a:	333c      	adds	r3, #60	@ 0x3c
 800733c:	3304      	adds	r3, #4
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	015a      	lsls	r2, r3, #5
 8007346:	69bb      	ldr	r3, [r7, #24]
 8007348:	4413      	add	r3, r2
 800734a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	799b      	ldrb	r3, [r3, #6]
 8007356:	2b01      	cmp	r3, #1
 8007358:	d17b      	bne.n	8007452 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	f003 0308 	and.w	r3, r3, #8
 8007360:	2b00      	cmp	r3, #0
 8007362:	d015      	beq.n	8007390 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007364:	697b      	ldr	r3, [r7, #20]
 8007366:	4a61      	ldr	r2, [pc, #388]	@ (80074ec <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007368:	4293      	cmp	r3, r2
 800736a:	f240 80b9 	bls.w	80074e0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007374:	2b00      	cmp	r3, #0
 8007376:	f000 80b3 	beq.w	80074e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	015a      	lsls	r2, r3, #5
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	4413      	add	r3, r2
 8007382:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007386:	461a      	mov	r2, r3
 8007388:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800738c:	6093      	str	r3, [r2, #8]
 800738e:	e0a7      	b.n	80074e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	f003 0320 	and.w	r3, r3, #32
 8007396:	2b00      	cmp	r3, #0
 8007398:	d009      	beq.n	80073ae <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	015a      	lsls	r2, r3, #5
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	4413      	add	r3, r2
 80073a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073a6:	461a      	mov	r2, r3
 80073a8:	2320      	movs	r3, #32
 80073aa:	6093      	str	r3, [r2, #8]
 80073ac:	e098      	b.n	80074e0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	f040 8093 	bne.w	80074e0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	4a4b      	ldr	r2, [pc, #300]	@ (80074ec <PCD_EP_OutXfrComplete_int+0x1c8>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d90f      	bls.n	80073e2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d00a      	beq.n	80073e2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	015a      	lsls	r2, r3, #5
 80073d0:	69bb      	ldr	r3, [r7, #24]
 80073d2:	4413      	add	r3, r2
 80073d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80073d8:	461a      	mov	r2, r3
 80073da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80073de:	6093      	str	r3, [r2, #8]
 80073e0:	e07e      	b.n	80074e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80073e2:	683a      	ldr	r2, [r7, #0]
 80073e4:	4613      	mov	r3, r2
 80073e6:	00db      	lsls	r3, r3, #3
 80073e8:	4413      	add	r3, r2
 80073ea:	009b      	lsls	r3, r3, #2
 80073ec:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	4413      	add	r3, r2
 80073f4:	3304      	adds	r3, #4
 80073f6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6a1a      	ldr	r2, [r3, #32]
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	0159      	lsls	r1, r3, #5
 8007400:	69bb      	ldr	r3, [r7, #24]
 8007402:	440b      	add	r3, r1
 8007404:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007408:	691b      	ldr	r3, [r3, #16]
 800740a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800740e:	1ad2      	subs	r2, r2, r3
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d114      	bne.n	8007444 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	691b      	ldr	r3, [r3, #16]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d109      	bne.n	8007436 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6818      	ldr	r0, [r3, #0]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800742c:	461a      	mov	r2, r3
 800742e:	2101      	movs	r1, #1
 8007430:	f004 fa3e 	bl	800b8b0 <USB_EP0_OutStart>
 8007434:	e006      	b.n	8007444 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	68da      	ldr	r2, [r3, #12]
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	695b      	ldr	r3, [r3, #20]
 800743e:	441a      	add	r2, r3
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007444:	683b      	ldr	r3, [r7, #0]
 8007446:	b2db      	uxtb	r3, r3
 8007448:	4619      	mov	r1, r3
 800744a:	6878      	ldr	r0, [r7, #4]
 800744c:	f007 ff64 	bl	800f318 <HAL_PCD_DataOutStageCallback>
 8007450:	e046      	b.n	80074e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007452:	697b      	ldr	r3, [r7, #20]
 8007454:	4a26      	ldr	r2, [pc, #152]	@ (80074f0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007456:	4293      	cmp	r3, r2
 8007458:	d124      	bne.n	80074a4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007460:	2b00      	cmp	r3, #0
 8007462:	d00a      	beq.n	800747a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007464:	683b      	ldr	r3, [r7, #0]
 8007466:	015a      	lsls	r2, r3, #5
 8007468:	69bb      	ldr	r3, [r7, #24]
 800746a:	4413      	add	r3, r2
 800746c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007470:	461a      	mov	r2, r3
 8007472:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007476:	6093      	str	r3, [r2, #8]
 8007478:	e032      	b.n	80074e0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	f003 0320 	and.w	r3, r3, #32
 8007480:	2b00      	cmp	r3, #0
 8007482:	d008      	beq.n	8007496 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	015a      	lsls	r2, r3, #5
 8007488:	69bb      	ldr	r3, [r7, #24]
 800748a:	4413      	add	r3, r2
 800748c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007490:	461a      	mov	r2, r3
 8007492:	2320      	movs	r3, #32
 8007494:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	b2db      	uxtb	r3, r3
 800749a:	4619      	mov	r1, r3
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f007 ff3b 	bl	800f318 <HAL_PCD_DataOutStageCallback>
 80074a2:	e01d      	b.n	80074e0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80074a4:	683b      	ldr	r3, [r7, #0]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d114      	bne.n	80074d4 <PCD_EP_OutXfrComplete_int+0x1b0>
 80074aa:	6879      	ldr	r1, [r7, #4]
 80074ac:	683a      	ldr	r2, [r7, #0]
 80074ae:	4613      	mov	r3, r2
 80074b0:	00db      	lsls	r3, r3, #3
 80074b2:	4413      	add	r3, r2
 80074b4:	009b      	lsls	r3, r3, #2
 80074b6:	440b      	add	r3, r1
 80074b8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d108      	bne.n	80074d4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6818      	ldr	r0, [r3, #0]
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80074cc:	461a      	mov	r2, r3
 80074ce:	2100      	movs	r1, #0
 80074d0:	f004 f9ee 	bl	800b8b0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	b2db      	uxtb	r3, r3
 80074d8:	4619      	mov	r1, r3
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f007 ff1c 	bl	800f318 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80074e0:	2300      	movs	r3, #0
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3720      	adds	r7, #32
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}
 80074ea:	bf00      	nop
 80074ec:	4f54300a 	.word	0x4f54300a
 80074f0:	4f54310a 	.word	0x4f54310a

080074f4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b086      	sub	sp, #24
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
 80074fc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	333c      	adds	r3, #60	@ 0x3c
 800750c:	3304      	adds	r3, #4
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	015a      	lsls	r2, r3, #5
 8007516:	693b      	ldr	r3, [r7, #16]
 8007518:	4413      	add	r3, r2
 800751a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	4a15      	ldr	r2, [pc, #84]	@ (800757c <PCD_EP_OutSetupPacket_int+0x88>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d90e      	bls.n	8007548 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007530:	2b00      	cmp	r3, #0
 8007532:	d009      	beq.n	8007548 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	015a      	lsls	r2, r3, #5
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	4413      	add	r3, r2
 800753c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007540:	461a      	mov	r2, r3
 8007542:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007546:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f007 fed3 	bl	800f2f4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	4a0a      	ldr	r2, [pc, #40]	@ (800757c <PCD_EP_OutSetupPacket_int+0x88>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d90c      	bls.n	8007570 <PCD_EP_OutSetupPacket_int+0x7c>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	799b      	ldrb	r3, [r3, #6]
 800755a:	2b01      	cmp	r3, #1
 800755c:	d108      	bne.n	8007570 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6818      	ldr	r0, [r3, #0]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007568:	461a      	mov	r2, r3
 800756a:	2101      	movs	r1, #1
 800756c:	f004 f9a0 	bl	800b8b0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	3718      	adds	r7, #24
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
 800757a:	bf00      	nop
 800757c:	4f54300a 	.word	0x4f54300a

08007580 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007580:	b480      	push	{r7}
 8007582:	b085      	sub	sp, #20
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	460b      	mov	r3, r1
 800758a:	70fb      	strb	r3, [r7, #3]
 800758c:	4613      	mov	r3, r2
 800758e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007596:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007598:	78fb      	ldrb	r3, [r7, #3]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d107      	bne.n	80075ae <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800759e:	883b      	ldrh	r3, [r7, #0]
 80075a0:	0419      	lsls	r1, r3, #16
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	68ba      	ldr	r2, [r7, #8]
 80075a8:	430a      	orrs	r2, r1
 80075aa:	629a      	str	r2, [r3, #40]	@ 0x28
 80075ac:	e028      	b.n	8007600 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075b4:	0c1b      	lsrs	r3, r3, #16
 80075b6:	68ba      	ldr	r2, [r7, #8]
 80075b8:	4413      	add	r3, r2
 80075ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80075bc:	2300      	movs	r3, #0
 80075be:	73fb      	strb	r3, [r7, #15]
 80075c0:	e00d      	b.n	80075de <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	7bfb      	ldrb	r3, [r7, #15]
 80075c8:	3340      	adds	r3, #64	@ 0x40
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	4413      	add	r3, r2
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	0c1b      	lsrs	r3, r3, #16
 80075d2:	68ba      	ldr	r2, [r7, #8]
 80075d4:	4413      	add	r3, r2
 80075d6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80075d8:	7bfb      	ldrb	r3, [r7, #15]
 80075da:	3301      	adds	r3, #1
 80075dc:	73fb      	strb	r3, [r7, #15]
 80075de:	7bfa      	ldrb	r2, [r7, #15]
 80075e0:	78fb      	ldrb	r3, [r7, #3]
 80075e2:	3b01      	subs	r3, #1
 80075e4:	429a      	cmp	r2, r3
 80075e6:	d3ec      	bcc.n	80075c2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80075e8:	883b      	ldrh	r3, [r7, #0]
 80075ea:	0418      	lsls	r0, r3, #16
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6819      	ldr	r1, [r3, #0]
 80075f0:	78fb      	ldrb	r3, [r7, #3]
 80075f2:	3b01      	subs	r3, #1
 80075f4:	68ba      	ldr	r2, [r7, #8]
 80075f6:	4302      	orrs	r2, r0
 80075f8:	3340      	adds	r3, #64	@ 0x40
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	440b      	add	r3, r1
 80075fe:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007600:	2300      	movs	r3, #0
}
 8007602:	4618      	mov	r0, r3
 8007604:	3714      	adds	r7, #20
 8007606:	46bd      	mov	sp, r7
 8007608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760c:	4770      	bx	lr

0800760e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800760e:	b480      	push	{r7}
 8007610:	b083      	sub	sp, #12
 8007612:	af00      	add	r7, sp, #0
 8007614:	6078      	str	r0, [r7, #4]
 8007616:	460b      	mov	r3, r1
 8007618:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	887a      	ldrh	r2, [r7, #2]
 8007620:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8007622:	2300      	movs	r3, #0
}
 8007624:	4618      	mov	r0, r3
 8007626:	370c      	adds	r7, #12
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr

08007630 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007630:	b480      	push	{r7}
 8007632:	b083      	sub	sp, #12
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	460b      	mov	r3, r1
 800763a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800763c:	bf00      	nop
 800763e:	370c      	adds	r7, #12
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b086      	sub	sp, #24
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d101      	bne.n	800765a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007656:	2301      	movs	r3, #1
 8007658:	e267      	b.n	8007b2a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f003 0301 	and.w	r3, r3, #1
 8007662:	2b00      	cmp	r3, #0
 8007664:	d075      	beq.n	8007752 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007666:	4b88      	ldr	r3, [pc, #544]	@ (8007888 <HAL_RCC_OscConfig+0x240>)
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	f003 030c 	and.w	r3, r3, #12
 800766e:	2b04      	cmp	r3, #4
 8007670:	d00c      	beq.n	800768c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007672:	4b85      	ldr	r3, [pc, #532]	@ (8007888 <HAL_RCC_OscConfig+0x240>)
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800767a:	2b08      	cmp	r3, #8
 800767c:	d112      	bne.n	80076a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800767e:	4b82      	ldr	r3, [pc, #520]	@ (8007888 <HAL_RCC_OscConfig+0x240>)
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007686:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800768a:	d10b      	bne.n	80076a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800768c:	4b7e      	ldr	r3, [pc, #504]	@ (8007888 <HAL_RCC_OscConfig+0x240>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007694:	2b00      	cmp	r3, #0
 8007696:	d05b      	beq.n	8007750 <HAL_RCC_OscConfig+0x108>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d157      	bne.n	8007750 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80076a0:	2301      	movs	r3, #1
 80076a2:	e242      	b.n	8007b2a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076ac:	d106      	bne.n	80076bc <HAL_RCC_OscConfig+0x74>
 80076ae:	4b76      	ldr	r3, [pc, #472]	@ (8007888 <HAL_RCC_OscConfig+0x240>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	4a75      	ldr	r2, [pc, #468]	@ (8007888 <HAL_RCC_OscConfig+0x240>)
 80076b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80076b8:	6013      	str	r3, [r2, #0]
 80076ba:	e01d      	b.n	80076f8 <HAL_RCC_OscConfig+0xb0>
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80076c4:	d10c      	bne.n	80076e0 <HAL_RCC_OscConfig+0x98>
 80076c6:	4b70      	ldr	r3, [pc, #448]	@ (8007888 <HAL_RCC_OscConfig+0x240>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a6f      	ldr	r2, [pc, #444]	@ (8007888 <HAL_RCC_OscConfig+0x240>)
 80076cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80076d0:	6013      	str	r3, [r2, #0]
 80076d2:	4b6d      	ldr	r3, [pc, #436]	@ (8007888 <HAL_RCC_OscConfig+0x240>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a6c      	ldr	r2, [pc, #432]	@ (8007888 <HAL_RCC_OscConfig+0x240>)
 80076d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80076dc:	6013      	str	r3, [r2, #0]
 80076de:	e00b      	b.n	80076f8 <HAL_RCC_OscConfig+0xb0>
 80076e0:	4b69      	ldr	r3, [pc, #420]	@ (8007888 <HAL_RCC_OscConfig+0x240>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a68      	ldr	r2, [pc, #416]	@ (8007888 <HAL_RCC_OscConfig+0x240>)
 80076e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80076ea:	6013      	str	r3, [r2, #0]
 80076ec:	4b66      	ldr	r3, [pc, #408]	@ (8007888 <HAL_RCC_OscConfig+0x240>)
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4a65      	ldr	r2, [pc, #404]	@ (8007888 <HAL_RCC_OscConfig+0x240>)
 80076f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80076f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d013      	beq.n	8007728 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007700:	f7fc fa64 	bl	8003bcc <HAL_GetTick>
 8007704:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007706:	e008      	b.n	800771a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007708:	f7fc fa60 	bl	8003bcc <HAL_GetTick>
 800770c:	4602      	mov	r2, r0
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	1ad3      	subs	r3, r2, r3
 8007712:	2b64      	cmp	r3, #100	@ 0x64
 8007714:	d901      	bls.n	800771a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007716:	2303      	movs	r3, #3
 8007718:	e207      	b.n	8007b2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800771a:	4b5b      	ldr	r3, [pc, #364]	@ (8007888 <HAL_RCC_OscConfig+0x240>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007722:	2b00      	cmp	r3, #0
 8007724:	d0f0      	beq.n	8007708 <HAL_RCC_OscConfig+0xc0>
 8007726:	e014      	b.n	8007752 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007728:	f7fc fa50 	bl	8003bcc <HAL_GetTick>
 800772c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800772e:	e008      	b.n	8007742 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007730:	f7fc fa4c 	bl	8003bcc <HAL_GetTick>
 8007734:	4602      	mov	r2, r0
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	1ad3      	subs	r3, r2, r3
 800773a:	2b64      	cmp	r3, #100	@ 0x64
 800773c:	d901      	bls.n	8007742 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800773e:	2303      	movs	r3, #3
 8007740:	e1f3      	b.n	8007b2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007742:	4b51      	ldr	r3, [pc, #324]	@ (8007888 <HAL_RCC_OscConfig+0x240>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800774a:	2b00      	cmp	r3, #0
 800774c:	d1f0      	bne.n	8007730 <HAL_RCC_OscConfig+0xe8>
 800774e:	e000      	b.n	8007752 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007750:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f003 0302 	and.w	r3, r3, #2
 800775a:	2b00      	cmp	r3, #0
 800775c:	d063      	beq.n	8007826 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800775e:	4b4a      	ldr	r3, [pc, #296]	@ (8007888 <HAL_RCC_OscConfig+0x240>)
 8007760:	689b      	ldr	r3, [r3, #8]
 8007762:	f003 030c 	and.w	r3, r3, #12
 8007766:	2b00      	cmp	r3, #0
 8007768:	d00b      	beq.n	8007782 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800776a:	4b47      	ldr	r3, [pc, #284]	@ (8007888 <HAL_RCC_OscConfig+0x240>)
 800776c:	689b      	ldr	r3, [r3, #8]
 800776e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007772:	2b08      	cmp	r3, #8
 8007774:	d11c      	bne.n	80077b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007776:	4b44      	ldr	r3, [pc, #272]	@ (8007888 <HAL_RCC_OscConfig+0x240>)
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800777e:	2b00      	cmp	r3, #0
 8007780:	d116      	bne.n	80077b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007782:	4b41      	ldr	r3, [pc, #260]	@ (8007888 <HAL_RCC_OscConfig+0x240>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f003 0302 	and.w	r3, r3, #2
 800778a:	2b00      	cmp	r3, #0
 800778c:	d005      	beq.n	800779a <HAL_RCC_OscConfig+0x152>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	68db      	ldr	r3, [r3, #12]
 8007792:	2b01      	cmp	r3, #1
 8007794:	d001      	beq.n	800779a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007796:	2301      	movs	r3, #1
 8007798:	e1c7      	b.n	8007b2a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800779a:	4b3b      	ldr	r3, [pc, #236]	@ (8007888 <HAL_RCC_OscConfig+0x240>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	691b      	ldr	r3, [r3, #16]
 80077a6:	00db      	lsls	r3, r3, #3
 80077a8:	4937      	ldr	r1, [pc, #220]	@ (8007888 <HAL_RCC_OscConfig+0x240>)
 80077aa:	4313      	orrs	r3, r2
 80077ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80077ae:	e03a      	b.n	8007826 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	68db      	ldr	r3, [r3, #12]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d020      	beq.n	80077fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80077b8:	4b34      	ldr	r3, [pc, #208]	@ (800788c <HAL_RCC_OscConfig+0x244>)
 80077ba:	2201      	movs	r2, #1
 80077bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077be:	f7fc fa05 	bl	8003bcc <HAL_GetTick>
 80077c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077c4:	e008      	b.n	80077d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80077c6:	f7fc fa01 	bl	8003bcc <HAL_GetTick>
 80077ca:	4602      	mov	r2, r0
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	1ad3      	subs	r3, r2, r3
 80077d0:	2b02      	cmp	r3, #2
 80077d2:	d901      	bls.n	80077d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80077d4:	2303      	movs	r3, #3
 80077d6:	e1a8      	b.n	8007b2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077d8:	4b2b      	ldr	r3, [pc, #172]	@ (8007888 <HAL_RCC_OscConfig+0x240>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f003 0302 	and.w	r3, r3, #2
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d0f0      	beq.n	80077c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077e4:	4b28      	ldr	r3, [pc, #160]	@ (8007888 <HAL_RCC_OscConfig+0x240>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	691b      	ldr	r3, [r3, #16]
 80077f0:	00db      	lsls	r3, r3, #3
 80077f2:	4925      	ldr	r1, [pc, #148]	@ (8007888 <HAL_RCC_OscConfig+0x240>)
 80077f4:	4313      	orrs	r3, r2
 80077f6:	600b      	str	r3, [r1, #0]
 80077f8:	e015      	b.n	8007826 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80077fa:	4b24      	ldr	r3, [pc, #144]	@ (800788c <HAL_RCC_OscConfig+0x244>)
 80077fc:	2200      	movs	r2, #0
 80077fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007800:	f7fc f9e4 	bl	8003bcc <HAL_GetTick>
 8007804:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007806:	e008      	b.n	800781a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007808:	f7fc f9e0 	bl	8003bcc <HAL_GetTick>
 800780c:	4602      	mov	r2, r0
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	1ad3      	subs	r3, r2, r3
 8007812:	2b02      	cmp	r3, #2
 8007814:	d901      	bls.n	800781a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007816:	2303      	movs	r3, #3
 8007818:	e187      	b.n	8007b2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800781a:	4b1b      	ldr	r3, [pc, #108]	@ (8007888 <HAL_RCC_OscConfig+0x240>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f003 0302 	and.w	r3, r3, #2
 8007822:	2b00      	cmp	r3, #0
 8007824:	d1f0      	bne.n	8007808 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	f003 0308 	and.w	r3, r3, #8
 800782e:	2b00      	cmp	r3, #0
 8007830:	d036      	beq.n	80078a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	695b      	ldr	r3, [r3, #20]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d016      	beq.n	8007868 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800783a:	4b15      	ldr	r3, [pc, #84]	@ (8007890 <HAL_RCC_OscConfig+0x248>)
 800783c:	2201      	movs	r2, #1
 800783e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007840:	f7fc f9c4 	bl	8003bcc <HAL_GetTick>
 8007844:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007846:	e008      	b.n	800785a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007848:	f7fc f9c0 	bl	8003bcc <HAL_GetTick>
 800784c:	4602      	mov	r2, r0
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	1ad3      	subs	r3, r2, r3
 8007852:	2b02      	cmp	r3, #2
 8007854:	d901      	bls.n	800785a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007856:	2303      	movs	r3, #3
 8007858:	e167      	b.n	8007b2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800785a:	4b0b      	ldr	r3, [pc, #44]	@ (8007888 <HAL_RCC_OscConfig+0x240>)
 800785c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800785e:	f003 0302 	and.w	r3, r3, #2
 8007862:	2b00      	cmp	r3, #0
 8007864:	d0f0      	beq.n	8007848 <HAL_RCC_OscConfig+0x200>
 8007866:	e01b      	b.n	80078a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007868:	4b09      	ldr	r3, [pc, #36]	@ (8007890 <HAL_RCC_OscConfig+0x248>)
 800786a:	2200      	movs	r2, #0
 800786c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800786e:	f7fc f9ad 	bl	8003bcc <HAL_GetTick>
 8007872:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007874:	e00e      	b.n	8007894 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007876:	f7fc f9a9 	bl	8003bcc <HAL_GetTick>
 800787a:	4602      	mov	r2, r0
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	1ad3      	subs	r3, r2, r3
 8007880:	2b02      	cmp	r3, #2
 8007882:	d907      	bls.n	8007894 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007884:	2303      	movs	r3, #3
 8007886:	e150      	b.n	8007b2a <HAL_RCC_OscConfig+0x4e2>
 8007888:	40023800 	.word	0x40023800
 800788c:	42470000 	.word	0x42470000
 8007890:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007894:	4b88      	ldr	r3, [pc, #544]	@ (8007ab8 <HAL_RCC_OscConfig+0x470>)
 8007896:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007898:	f003 0302 	and.w	r3, r3, #2
 800789c:	2b00      	cmp	r3, #0
 800789e:	d1ea      	bne.n	8007876 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f003 0304 	and.w	r3, r3, #4
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	f000 8097 	beq.w	80079dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80078ae:	2300      	movs	r3, #0
 80078b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80078b2:	4b81      	ldr	r3, [pc, #516]	@ (8007ab8 <HAL_RCC_OscConfig+0x470>)
 80078b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d10f      	bne.n	80078de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80078be:	2300      	movs	r3, #0
 80078c0:	60bb      	str	r3, [r7, #8]
 80078c2:	4b7d      	ldr	r3, [pc, #500]	@ (8007ab8 <HAL_RCC_OscConfig+0x470>)
 80078c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078c6:	4a7c      	ldr	r2, [pc, #496]	@ (8007ab8 <HAL_RCC_OscConfig+0x470>)
 80078c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80078cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80078ce:	4b7a      	ldr	r3, [pc, #488]	@ (8007ab8 <HAL_RCC_OscConfig+0x470>)
 80078d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80078d6:	60bb      	str	r3, [r7, #8]
 80078d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80078da:	2301      	movs	r3, #1
 80078dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078de:	4b77      	ldr	r3, [pc, #476]	@ (8007abc <HAL_RCC_OscConfig+0x474>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d118      	bne.n	800791c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80078ea:	4b74      	ldr	r3, [pc, #464]	@ (8007abc <HAL_RCC_OscConfig+0x474>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a73      	ldr	r2, [pc, #460]	@ (8007abc <HAL_RCC_OscConfig+0x474>)
 80078f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80078f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80078f6:	f7fc f969 	bl	8003bcc <HAL_GetTick>
 80078fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078fc:	e008      	b.n	8007910 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078fe:	f7fc f965 	bl	8003bcc <HAL_GetTick>
 8007902:	4602      	mov	r2, r0
 8007904:	693b      	ldr	r3, [r7, #16]
 8007906:	1ad3      	subs	r3, r2, r3
 8007908:	2b02      	cmp	r3, #2
 800790a:	d901      	bls.n	8007910 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800790c:	2303      	movs	r3, #3
 800790e:	e10c      	b.n	8007b2a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007910:	4b6a      	ldr	r3, [pc, #424]	@ (8007abc <HAL_RCC_OscConfig+0x474>)
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007918:	2b00      	cmp	r3, #0
 800791a:	d0f0      	beq.n	80078fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	2b01      	cmp	r3, #1
 8007922:	d106      	bne.n	8007932 <HAL_RCC_OscConfig+0x2ea>
 8007924:	4b64      	ldr	r3, [pc, #400]	@ (8007ab8 <HAL_RCC_OscConfig+0x470>)
 8007926:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007928:	4a63      	ldr	r2, [pc, #396]	@ (8007ab8 <HAL_RCC_OscConfig+0x470>)
 800792a:	f043 0301 	orr.w	r3, r3, #1
 800792e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007930:	e01c      	b.n	800796c <HAL_RCC_OscConfig+0x324>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	2b05      	cmp	r3, #5
 8007938:	d10c      	bne.n	8007954 <HAL_RCC_OscConfig+0x30c>
 800793a:	4b5f      	ldr	r3, [pc, #380]	@ (8007ab8 <HAL_RCC_OscConfig+0x470>)
 800793c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800793e:	4a5e      	ldr	r2, [pc, #376]	@ (8007ab8 <HAL_RCC_OscConfig+0x470>)
 8007940:	f043 0304 	orr.w	r3, r3, #4
 8007944:	6713      	str	r3, [r2, #112]	@ 0x70
 8007946:	4b5c      	ldr	r3, [pc, #368]	@ (8007ab8 <HAL_RCC_OscConfig+0x470>)
 8007948:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800794a:	4a5b      	ldr	r2, [pc, #364]	@ (8007ab8 <HAL_RCC_OscConfig+0x470>)
 800794c:	f043 0301 	orr.w	r3, r3, #1
 8007950:	6713      	str	r3, [r2, #112]	@ 0x70
 8007952:	e00b      	b.n	800796c <HAL_RCC_OscConfig+0x324>
 8007954:	4b58      	ldr	r3, [pc, #352]	@ (8007ab8 <HAL_RCC_OscConfig+0x470>)
 8007956:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007958:	4a57      	ldr	r2, [pc, #348]	@ (8007ab8 <HAL_RCC_OscConfig+0x470>)
 800795a:	f023 0301 	bic.w	r3, r3, #1
 800795e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007960:	4b55      	ldr	r3, [pc, #340]	@ (8007ab8 <HAL_RCC_OscConfig+0x470>)
 8007962:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007964:	4a54      	ldr	r2, [pc, #336]	@ (8007ab8 <HAL_RCC_OscConfig+0x470>)
 8007966:	f023 0304 	bic.w	r3, r3, #4
 800796a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	689b      	ldr	r3, [r3, #8]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d015      	beq.n	80079a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007974:	f7fc f92a 	bl	8003bcc <HAL_GetTick>
 8007978:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800797a:	e00a      	b.n	8007992 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800797c:	f7fc f926 	bl	8003bcc <HAL_GetTick>
 8007980:	4602      	mov	r2, r0
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	1ad3      	subs	r3, r2, r3
 8007986:	f241 3288 	movw	r2, #5000	@ 0x1388
 800798a:	4293      	cmp	r3, r2
 800798c:	d901      	bls.n	8007992 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800798e:	2303      	movs	r3, #3
 8007990:	e0cb      	b.n	8007b2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007992:	4b49      	ldr	r3, [pc, #292]	@ (8007ab8 <HAL_RCC_OscConfig+0x470>)
 8007994:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007996:	f003 0302 	and.w	r3, r3, #2
 800799a:	2b00      	cmp	r3, #0
 800799c:	d0ee      	beq.n	800797c <HAL_RCC_OscConfig+0x334>
 800799e:	e014      	b.n	80079ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80079a0:	f7fc f914 	bl	8003bcc <HAL_GetTick>
 80079a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079a6:	e00a      	b.n	80079be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80079a8:	f7fc f910 	bl	8003bcc <HAL_GetTick>
 80079ac:	4602      	mov	r2, r0
 80079ae:	693b      	ldr	r3, [r7, #16]
 80079b0:	1ad3      	subs	r3, r2, r3
 80079b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d901      	bls.n	80079be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80079ba:	2303      	movs	r3, #3
 80079bc:	e0b5      	b.n	8007b2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079be:	4b3e      	ldr	r3, [pc, #248]	@ (8007ab8 <HAL_RCC_OscConfig+0x470>)
 80079c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079c2:	f003 0302 	and.w	r3, r3, #2
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d1ee      	bne.n	80079a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80079ca:	7dfb      	ldrb	r3, [r7, #23]
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d105      	bne.n	80079dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80079d0:	4b39      	ldr	r3, [pc, #228]	@ (8007ab8 <HAL_RCC_OscConfig+0x470>)
 80079d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079d4:	4a38      	ldr	r2, [pc, #224]	@ (8007ab8 <HAL_RCC_OscConfig+0x470>)
 80079d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80079da:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	699b      	ldr	r3, [r3, #24]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	f000 80a1 	beq.w	8007b28 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80079e6:	4b34      	ldr	r3, [pc, #208]	@ (8007ab8 <HAL_RCC_OscConfig+0x470>)
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	f003 030c 	and.w	r3, r3, #12
 80079ee:	2b08      	cmp	r3, #8
 80079f0:	d05c      	beq.n	8007aac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	699b      	ldr	r3, [r3, #24]
 80079f6:	2b02      	cmp	r3, #2
 80079f8:	d141      	bne.n	8007a7e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079fa:	4b31      	ldr	r3, [pc, #196]	@ (8007ac0 <HAL_RCC_OscConfig+0x478>)
 80079fc:	2200      	movs	r2, #0
 80079fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a00:	f7fc f8e4 	bl	8003bcc <HAL_GetTick>
 8007a04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a06:	e008      	b.n	8007a1a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a08:	f7fc f8e0 	bl	8003bcc <HAL_GetTick>
 8007a0c:	4602      	mov	r2, r0
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	1ad3      	subs	r3, r2, r3
 8007a12:	2b02      	cmp	r3, #2
 8007a14:	d901      	bls.n	8007a1a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007a16:	2303      	movs	r3, #3
 8007a18:	e087      	b.n	8007b2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a1a:	4b27      	ldr	r3, [pc, #156]	@ (8007ab8 <HAL_RCC_OscConfig+0x470>)
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d1f0      	bne.n	8007a08 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	69da      	ldr	r2, [r3, #28]
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	6a1b      	ldr	r3, [r3, #32]
 8007a2e:	431a      	orrs	r2, r3
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a34:	019b      	lsls	r3, r3, #6
 8007a36:	431a      	orrs	r2, r3
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a3c:	085b      	lsrs	r3, r3, #1
 8007a3e:	3b01      	subs	r3, #1
 8007a40:	041b      	lsls	r3, r3, #16
 8007a42:	431a      	orrs	r2, r3
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a48:	061b      	lsls	r3, r3, #24
 8007a4a:	491b      	ldr	r1, [pc, #108]	@ (8007ab8 <HAL_RCC_OscConfig+0x470>)
 8007a4c:	4313      	orrs	r3, r2
 8007a4e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a50:	4b1b      	ldr	r3, [pc, #108]	@ (8007ac0 <HAL_RCC_OscConfig+0x478>)
 8007a52:	2201      	movs	r2, #1
 8007a54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a56:	f7fc f8b9 	bl	8003bcc <HAL_GetTick>
 8007a5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a5c:	e008      	b.n	8007a70 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a5e:	f7fc f8b5 	bl	8003bcc <HAL_GetTick>
 8007a62:	4602      	mov	r2, r0
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	1ad3      	subs	r3, r2, r3
 8007a68:	2b02      	cmp	r3, #2
 8007a6a:	d901      	bls.n	8007a70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007a6c:	2303      	movs	r3, #3
 8007a6e:	e05c      	b.n	8007b2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a70:	4b11      	ldr	r3, [pc, #68]	@ (8007ab8 <HAL_RCC_OscConfig+0x470>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d0f0      	beq.n	8007a5e <HAL_RCC_OscConfig+0x416>
 8007a7c:	e054      	b.n	8007b28 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a7e:	4b10      	ldr	r3, [pc, #64]	@ (8007ac0 <HAL_RCC_OscConfig+0x478>)
 8007a80:	2200      	movs	r2, #0
 8007a82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a84:	f7fc f8a2 	bl	8003bcc <HAL_GetTick>
 8007a88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a8a:	e008      	b.n	8007a9e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a8c:	f7fc f89e 	bl	8003bcc <HAL_GetTick>
 8007a90:	4602      	mov	r2, r0
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	1ad3      	subs	r3, r2, r3
 8007a96:	2b02      	cmp	r3, #2
 8007a98:	d901      	bls.n	8007a9e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007a9a:	2303      	movs	r3, #3
 8007a9c:	e045      	b.n	8007b2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a9e:	4b06      	ldr	r3, [pc, #24]	@ (8007ab8 <HAL_RCC_OscConfig+0x470>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d1f0      	bne.n	8007a8c <HAL_RCC_OscConfig+0x444>
 8007aaa:	e03d      	b.n	8007b28 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	699b      	ldr	r3, [r3, #24]
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d107      	bne.n	8007ac4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	e038      	b.n	8007b2a <HAL_RCC_OscConfig+0x4e2>
 8007ab8:	40023800 	.word	0x40023800
 8007abc:	40007000 	.word	0x40007000
 8007ac0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007ac4:	4b1b      	ldr	r3, [pc, #108]	@ (8007b34 <HAL_RCC_OscConfig+0x4ec>)
 8007ac6:	685b      	ldr	r3, [r3, #4]
 8007ac8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	699b      	ldr	r3, [r3, #24]
 8007ace:	2b01      	cmp	r3, #1
 8007ad0:	d028      	beq.n	8007b24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007adc:	429a      	cmp	r2, r3
 8007ade:	d121      	bne.n	8007b24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007aea:	429a      	cmp	r2, r3
 8007aec:	d11a      	bne.n	8007b24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007aee:	68fa      	ldr	r2, [r7, #12]
 8007af0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007af4:	4013      	ands	r3, r2
 8007af6:	687a      	ldr	r2, [r7, #4]
 8007af8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007afa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d111      	bne.n	8007b24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b0a:	085b      	lsrs	r3, r3, #1
 8007b0c:	3b01      	subs	r3, #1
 8007b0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007b10:	429a      	cmp	r2, r3
 8007b12:	d107      	bne.n	8007b24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d001      	beq.n	8007b28 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007b24:	2301      	movs	r3, #1
 8007b26:	e000      	b.n	8007b2a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007b28:	2300      	movs	r3, #0
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3718      	adds	r7, #24
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}
 8007b32:	bf00      	nop
 8007b34:	40023800 	.word	0x40023800

08007b38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b084      	sub	sp, #16
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d101      	bne.n	8007b4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	e0cc      	b.n	8007ce6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007b4c:	4b68      	ldr	r3, [pc, #416]	@ (8007cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f003 0307 	and.w	r3, r3, #7
 8007b54:	683a      	ldr	r2, [r7, #0]
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d90c      	bls.n	8007b74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007b5a:	4b65      	ldr	r3, [pc, #404]	@ (8007cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8007b5c:	683a      	ldr	r2, [r7, #0]
 8007b5e:	b2d2      	uxtb	r2, r2
 8007b60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b62:	4b63      	ldr	r3, [pc, #396]	@ (8007cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f003 0307 	and.w	r3, r3, #7
 8007b6a:	683a      	ldr	r2, [r7, #0]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d001      	beq.n	8007b74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007b70:	2301      	movs	r3, #1
 8007b72:	e0b8      	b.n	8007ce6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f003 0302 	and.w	r3, r3, #2
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d020      	beq.n	8007bc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f003 0304 	and.w	r3, r3, #4
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d005      	beq.n	8007b98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007b8c:	4b59      	ldr	r3, [pc, #356]	@ (8007cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8007b8e:	689b      	ldr	r3, [r3, #8]
 8007b90:	4a58      	ldr	r2, [pc, #352]	@ (8007cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8007b92:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007b96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f003 0308 	and.w	r3, r3, #8
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d005      	beq.n	8007bb0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007ba4:	4b53      	ldr	r3, [pc, #332]	@ (8007cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	4a52      	ldr	r2, [pc, #328]	@ (8007cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8007baa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007bae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007bb0:	4b50      	ldr	r3, [pc, #320]	@ (8007cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	494d      	ldr	r1, [pc, #308]	@ (8007cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f003 0301 	and.w	r3, r3, #1
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d044      	beq.n	8007c58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	685b      	ldr	r3, [r3, #4]
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	d107      	bne.n	8007be6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007bd6:	4b47      	ldr	r3, [pc, #284]	@ (8007cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d119      	bne.n	8007c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007be2:	2301      	movs	r3, #1
 8007be4:	e07f      	b.n	8007ce6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	685b      	ldr	r3, [r3, #4]
 8007bea:	2b02      	cmp	r3, #2
 8007bec:	d003      	beq.n	8007bf6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007bf2:	2b03      	cmp	r3, #3
 8007bf4:	d107      	bne.n	8007c06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bf6:	4b3f      	ldr	r3, [pc, #252]	@ (8007cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d109      	bne.n	8007c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c02:	2301      	movs	r3, #1
 8007c04:	e06f      	b.n	8007ce6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c06:	4b3b      	ldr	r3, [pc, #236]	@ (8007cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f003 0302 	and.w	r3, r3, #2
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d101      	bne.n	8007c16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c12:	2301      	movs	r3, #1
 8007c14:	e067      	b.n	8007ce6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007c16:	4b37      	ldr	r3, [pc, #220]	@ (8007cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8007c18:	689b      	ldr	r3, [r3, #8]
 8007c1a:	f023 0203 	bic.w	r2, r3, #3
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	4934      	ldr	r1, [pc, #208]	@ (8007cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8007c24:	4313      	orrs	r3, r2
 8007c26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007c28:	f7fb ffd0 	bl	8003bcc <HAL_GetTick>
 8007c2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c2e:	e00a      	b.n	8007c46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c30:	f7fb ffcc 	bl	8003bcc <HAL_GetTick>
 8007c34:	4602      	mov	r2, r0
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	1ad3      	subs	r3, r2, r3
 8007c3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	d901      	bls.n	8007c46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007c42:	2303      	movs	r3, #3
 8007c44:	e04f      	b.n	8007ce6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c46:	4b2b      	ldr	r3, [pc, #172]	@ (8007cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	f003 020c 	and.w	r2, r3, #12
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	009b      	lsls	r3, r3, #2
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d1eb      	bne.n	8007c30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007c58:	4b25      	ldr	r3, [pc, #148]	@ (8007cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f003 0307 	and.w	r3, r3, #7
 8007c60:	683a      	ldr	r2, [r7, #0]
 8007c62:	429a      	cmp	r2, r3
 8007c64:	d20c      	bcs.n	8007c80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c66:	4b22      	ldr	r3, [pc, #136]	@ (8007cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8007c68:	683a      	ldr	r2, [r7, #0]
 8007c6a:	b2d2      	uxtb	r2, r2
 8007c6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c6e:	4b20      	ldr	r3, [pc, #128]	@ (8007cf0 <HAL_RCC_ClockConfig+0x1b8>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f003 0307 	and.w	r3, r3, #7
 8007c76:	683a      	ldr	r2, [r7, #0]
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d001      	beq.n	8007c80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007c7c:	2301      	movs	r3, #1
 8007c7e:	e032      	b.n	8007ce6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f003 0304 	and.w	r3, r3, #4
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d008      	beq.n	8007c9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007c8c:	4b19      	ldr	r3, [pc, #100]	@ (8007cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	68db      	ldr	r3, [r3, #12]
 8007c98:	4916      	ldr	r1, [pc, #88]	@ (8007cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f003 0308 	and.w	r3, r3, #8
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d009      	beq.n	8007cbe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007caa:	4b12      	ldr	r3, [pc, #72]	@ (8007cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	691b      	ldr	r3, [r3, #16]
 8007cb6:	00db      	lsls	r3, r3, #3
 8007cb8:	490e      	ldr	r1, [pc, #56]	@ (8007cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8007cba:	4313      	orrs	r3, r2
 8007cbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007cbe:	f000 f821 	bl	8007d04 <HAL_RCC_GetSysClockFreq>
 8007cc2:	4602      	mov	r2, r0
 8007cc4:	4b0b      	ldr	r3, [pc, #44]	@ (8007cf4 <HAL_RCC_ClockConfig+0x1bc>)
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	091b      	lsrs	r3, r3, #4
 8007cca:	f003 030f 	and.w	r3, r3, #15
 8007cce:	490a      	ldr	r1, [pc, #40]	@ (8007cf8 <HAL_RCC_ClockConfig+0x1c0>)
 8007cd0:	5ccb      	ldrb	r3, [r1, r3]
 8007cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8007cd6:	4a09      	ldr	r2, [pc, #36]	@ (8007cfc <HAL_RCC_ClockConfig+0x1c4>)
 8007cd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007cda:	4b09      	ldr	r3, [pc, #36]	@ (8007d00 <HAL_RCC_ClockConfig+0x1c8>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f7fb fe38 	bl	8003954 <HAL_InitTick>

  return HAL_OK;
 8007ce4:	2300      	movs	r3, #0
}
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	3710      	adds	r7, #16
 8007cea:	46bd      	mov	sp, r7
 8007cec:	bd80      	pop	{r7, pc}
 8007cee:	bf00      	nop
 8007cf0:	40023c00 	.word	0x40023c00
 8007cf4:	40023800 	.word	0x40023800
 8007cf8:	0800fae4 	.word	0x0800fae4
 8007cfc:	20000050 	.word	0x20000050
 8007d00:	20000054 	.word	0x20000054

08007d04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d08:	b094      	sub	sp, #80	@ 0x50
 8007d0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007d10:	2300      	movs	r3, #0
 8007d12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d14:	2300      	movs	r3, #0
 8007d16:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007d1c:	4b79      	ldr	r3, [pc, #484]	@ (8007f04 <HAL_RCC_GetSysClockFreq+0x200>)
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	f003 030c 	and.w	r3, r3, #12
 8007d24:	2b08      	cmp	r3, #8
 8007d26:	d00d      	beq.n	8007d44 <HAL_RCC_GetSysClockFreq+0x40>
 8007d28:	2b08      	cmp	r3, #8
 8007d2a:	f200 80e1 	bhi.w	8007ef0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d002      	beq.n	8007d38 <HAL_RCC_GetSysClockFreq+0x34>
 8007d32:	2b04      	cmp	r3, #4
 8007d34:	d003      	beq.n	8007d3e <HAL_RCC_GetSysClockFreq+0x3a>
 8007d36:	e0db      	b.n	8007ef0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007d38:	4b73      	ldr	r3, [pc, #460]	@ (8007f08 <HAL_RCC_GetSysClockFreq+0x204>)
 8007d3a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8007d3c:	e0db      	b.n	8007ef6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007d3e:	4b73      	ldr	r3, [pc, #460]	@ (8007f0c <HAL_RCC_GetSysClockFreq+0x208>)
 8007d40:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007d42:	e0d8      	b.n	8007ef6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007d44:	4b6f      	ldr	r3, [pc, #444]	@ (8007f04 <HAL_RCC_GetSysClockFreq+0x200>)
 8007d46:	685b      	ldr	r3, [r3, #4]
 8007d48:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007d4c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007d4e:	4b6d      	ldr	r3, [pc, #436]	@ (8007f04 <HAL_RCC_GetSysClockFreq+0x200>)
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d063      	beq.n	8007e22 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007d5a:	4b6a      	ldr	r3, [pc, #424]	@ (8007f04 <HAL_RCC_GetSysClockFreq+0x200>)
 8007d5c:	685b      	ldr	r3, [r3, #4]
 8007d5e:	099b      	lsrs	r3, r3, #6
 8007d60:	2200      	movs	r2, #0
 8007d62:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007d64:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8007d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d6c:	633b      	str	r3, [r7, #48]	@ 0x30
 8007d6e:	2300      	movs	r3, #0
 8007d70:	637b      	str	r3, [r7, #52]	@ 0x34
 8007d72:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8007d76:	4622      	mov	r2, r4
 8007d78:	462b      	mov	r3, r5
 8007d7a:	f04f 0000 	mov.w	r0, #0
 8007d7e:	f04f 0100 	mov.w	r1, #0
 8007d82:	0159      	lsls	r1, r3, #5
 8007d84:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007d88:	0150      	lsls	r0, r2, #5
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	460b      	mov	r3, r1
 8007d8e:	4621      	mov	r1, r4
 8007d90:	1a51      	subs	r1, r2, r1
 8007d92:	6139      	str	r1, [r7, #16]
 8007d94:	4629      	mov	r1, r5
 8007d96:	eb63 0301 	sbc.w	r3, r3, r1
 8007d9a:	617b      	str	r3, [r7, #20]
 8007d9c:	f04f 0200 	mov.w	r2, #0
 8007da0:	f04f 0300 	mov.w	r3, #0
 8007da4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007da8:	4659      	mov	r1, fp
 8007daa:	018b      	lsls	r3, r1, #6
 8007dac:	4651      	mov	r1, sl
 8007dae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007db2:	4651      	mov	r1, sl
 8007db4:	018a      	lsls	r2, r1, #6
 8007db6:	4651      	mov	r1, sl
 8007db8:	ebb2 0801 	subs.w	r8, r2, r1
 8007dbc:	4659      	mov	r1, fp
 8007dbe:	eb63 0901 	sbc.w	r9, r3, r1
 8007dc2:	f04f 0200 	mov.w	r2, #0
 8007dc6:	f04f 0300 	mov.w	r3, #0
 8007dca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007dce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007dd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007dd6:	4690      	mov	r8, r2
 8007dd8:	4699      	mov	r9, r3
 8007dda:	4623      	mov	r3, r4
 8007ddc:	eb18 0303 	adds.w	r3, r8, r3
 8007de0:	60bb      	str	r3, [r7, #8]
 8007de2:	462b      	mov	r3, r5
 8007de4:	eb49 0303 	adc.w	r3, r9, r3
 8007de8:	60fb      	str	r3, [r7, #12]
 8007dea:	f04f 0200 	mov.w	r2, #0
 8007dee:	f04f 0300 	mov.w	r3, #0
 8007df2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007df6:	4629      	mov	r1, r5
 8007df8:	024b      	lsls	r3, r1, #9
 8007dfa:	4621      	mov	r1, r4
 8007dfc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007e00:	4621      	mov	r1, r4
 8007e02:	024a      	lsls	r2, r1, #9
 8007e04:	4610      	mov	r0, r2
 8007e06:	4619      	mov	r1, r3
 8007e08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007e0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007e10:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007e14:	f7f8 feaa 	bl	8000b6c <__aeabi_uldivmod>
 8007e18:	4602      	mov	r2, r0
 8007e1a:	460b      	mov	r3, r1
 8007e1c:	4613      	mov	r3, r2
 8007e1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007e20:	e058      	b.n	8007ed4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e22:	4b38      	ldr	r3, [pc, #224]	@ (8007f04 <HAL_RCC_GetSysClockFreq+0x200>)
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	099b      	lsrs	r3, r3, #6
 8007e28:	2200      	movs	r2, #0
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	4611      	mov	r1, r2
 8007e2e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007e32:	623b      	str	r3, [r7, #32]
 8007e34:	2300      	movs	r3, #0
 8007e36:	627b      	str	r3, [r7, #36]	@ 0x24
 8007e38:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007e3c:	4642      	mov	r2, r8
 8007e3e:	464b      	mov	r3, r9
 8007e40:	f04f 0000 	mov.w	r0, #0
 8007e44:	f04f 0100 	mov.w	r1, #0
 8007e48:	0159      	lsls	r1, r3, #5
 8007e4a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007e4e:	0150      	lsls	r0, r2, #5
 8007e50:	4602      	mov	r2, r0
 8007e52:	460b      	mov	r3, r1
 8007e54:	4641      	mov	r1, r8
 8007e56:	ebb2 0a01 	subs.w	sl, r2, r1
 8007e5a:	4649      	mov	r1, r9
 8007e5c:	eb63 0b01 	sbc.w	fp, r3, r1
 8007e60:	f04f 0200 	mov.w	r2, #0
 8007e64:	f04f 0300 	mov.w	r3, #0
 8007e68:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007e6c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007e70:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007e74:	ebb2 040a 	subs.w	r4, r2, sl
 8007e78:	eb63 050b 	sbc.w	r5, r3, fp
 8007e7c:	f04f 0200 	mov.w	r2, #0
 8007e80:	f04f 0300 	mov.w	r3, #0
 8007e84:	00eb      	lsls	r3, r5, #3
 8007e86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007e8a:	00e2      	lsls	r2, r4, #3
 8007e8c:	4614      	mov	r4, r2
 8007e8e:	461d      	mov	r5, r3
 8007e90:	4643      	mov	r3, r8
 8007e92:	18e3      	adds	r3, r4, r3
 8007e94:	603b      	str	r3, [r7, #0]
 8007e96:	464b      	mov	r3, r9
 8007e98:	eb45 0303 	adc.w	r3, r5, r3
 8007e9c:	607b      	str	r3, [r7, #4]
 8007e9e:	f04f 0200 	mov.w	r2, #0
 8007ea2:	f04f 0300 	mov.w	r3, #0
 8007ea6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007eaa:	4629      	mov	r1, r5
 8007eac:	028b      	lsls	r3, r1, #10
 8007eae:	4621      	mov	r1, r4
 8007eb0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007eb4:	4621      	mov	r1, r4
 8007eb6:	028a      	lsls	r2, r1, #10
 8007eb8:	4610      	mov	r0, r2
 8007eba:	4619      	mov	r1, r3
 8007ebc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	61bb      	str	r3, [r7, #24]
 8007ec2:	61fa      	str	r2, [r7, #28]
 8007ec4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ec8:	f7f8 fe50 	bl	8000b6c <__aeabi_uldivmod>
 8007ecc:	4602      	mov	r2, r0
 8007ece:	460b      	mov	r3, r1
 8007ed0:	4613      	mov	r3, r2
 8007ed2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8007f04 <HAL_RCC_GetSysClockFreq+0x200>)
 8007ed6:	685b      	ldr	r3, [r3, #4]
 8007ed8:	0c1b      	lsrs	r3, r3, #16
 8007eda:	f003 0303 	and.w	r3, r3, #3
 8007ede:	3301      	adds	r3, #1
 8007ee0:	005b      	lsls	r3, r3, #1
 8007ee2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8007ee4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007ee6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007eec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007eee:	e002      	b.n	8007ef6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007ef0:	4b05      	ldr	r3, [pc, #20]	@ (8007f08 <HAL_RCC_GetSysClockFreq+0x204>)
 8007ef2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007ef4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007ef6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007ef8:	4618      	mov	r0, r3
 8007efa:	3750      	adds	r7, #80	@ 0x50
 8007efc:	46bd      	mov	sp, r7
 8007efe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f02:	bf00      	nop
 8007f04:	40023800 	.word	0x40023800
 8007f08:	00f42400 	.word	0x00f42400
 8007f0c:	007a1200 	.word	0x007a1200

08007f10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007f10:	b480      	push	{r7}
 8007f12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007f14:	4b03      	ldr	r3, [pc, #12]	@ (8007f24 <HAL_RCC_GetHCLKFreq+0x14>)
 8007f16:	681b      	ldr	r3, [r3, #0]
}
 8007f18:	4618      	mov	r0, r3
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr
 8007f22:	bf00      	nop
 8007f24:	20000050 	.word	0x20000050

08007f28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007f2c:	f7ff fff0 	bl	8007f10 <HAL_RCC_GetHCLKFreq>
 8007f30:	4602      	mov	r2, r0
 8007f32:	4b05      	ldr	r3, [pc, #20]	@ (8007f48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007f34:	689b      	ldr	r3, [r3, #8]
 8007f36:	0a9b      	lsrs	r3, r3, #10
 8007f38:	f003 0307 	and.w	r3, r3, #7
 8007f3c:	4903      	ldr	r1, [pc, #12]	@ (8007f4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f3e:	5ccb      	ldrb	r3, [r1, r3]
 8007f40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	bd80      	pop	{r7, pc}
 8007f48:	40023800 	.word	0x40023800
 8007f4c:	0800faf4 	.word	0x0800faf4

08007f50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007f54:	f7ff ffdc 	bl	8007f10 <HAL_RCC_GetHCLKFreq>
 8007f58:	4602      	mov	r2, r0
 8007f5a:	4b05      	ldr	r3, [pc, #20]	@ (8007f70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007f5c:	689b      	ldr	r3, [r3, #8]
 8007f5e:	0b5b      	lsrs	r3, r3, #13
 8007f60:	f003 0307 	and.w	r3, r3, #7
 8007f64:	4903      	ldr	r1, [pc, #12]	@ (8007f74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007f66:	5ccb      	ldrb	r3, [r1, r3]
 8007f68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	bd80      	pop	{r7, pc}
 8007f70:	40023800 	.word	0x40023800
 8007f74:	0800faf4 	.word	0x0800faf4

08007f78 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b083      	sub	sp, #12
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	220f      	movs	r2, #15
 8007f86:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007f88:	4b12      	ldr	r3, [pc, #72]	@ (8007fd4 <HAL_RCC_GetClockConfig+0x5c>)
 8007f8a:	689b      	ldr	r3, [r3, #8]
 8007f8c:	f003 0203 	and.w	r2, r3, #3
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007f94:	4b0f      	ldr	r3, [pc, #60]	@ (8007fd4 <HAL_RCC_GetClockConfig+0x5c>)
 8007f96:	689b      	ldr	r3, [r3, #8]
 8007f98:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007fa0:	4b0c      	ldr	r3, [pc, #48]	@ (8007fd4 <HAL_RCC_GetClockConfig+0x5c>)
 8007fa2:	689b      	ldr	r3, [r3, #8]
 8007fa4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007fac:	4b09      	ldr	r3, [pc, #36]	@ (8007fd4 <HAL_RCC_GetClockConfig+0x5c>)
 8007fae:	689b      	ldr	r3, [r3, #8]
 8007fb0:	08db      	lsrs	r3, r3, #3
 8007fb2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007fba:	4b07      	ldr	r3, [pc, #28]	@ (8007fd8 <HAL_RCC_GetClockConfig+0x60>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	f003 0207 	and.w	r2, r3, #7
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	601a      	str	r2, [r3, #0]
}
 8007fc6:	bf00      	nop
 8007fc8:	370c      	adds	r7, #12
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd0:	4770      	bx	lr
 8007fd2:	bf00      	nop
 8007fd4:	40023800 	.word	0x40023800
 8007fd8:	40023c00 	.word	0x40023c00

08007fdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d101      	bne.n	8007fee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007fea:	2301      	movs	r3, #1
 8007fec:	e041      	b.n	8008072 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007ff4:	b2db      	uxtb	r3, r3
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d106      	bne.n	8008008 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f000 f839 	bl	800807a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2202      	movs	r2, #2
 800800c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	3304      	adds	r3, #4
 8008018:	4619      	mov	r1, r3
 800801a:	4610      	mov	r0, r2
 800801c:	f000 ff10 	bl	8008e40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2201      	movs	r2, #1
 8008024:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2201      	movs	r2, #1
 800802c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2201      	movs	r2, #1
 8008034:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2201      	movs	r2, #1
 800803c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2201      	movs	r2, #1
 8008044:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2201      	movs	r2, #1
 800804c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2201      	movs	r2, #1
 8008054:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2201      	movs	r2, #1
 800805c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	2201      	movs	r2, #1
 8008064:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	2201      	movs	r2, #1
 800806c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008070:	2300      	movs	r3, #0
}
 8008072:	4618      	mov	r0, r3
 8008074:	3708      	adds	r7, #8
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}

0800807a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800807a:	b480      	push	{r7}
 800807c:	b083      	sub	sp, #12
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008082:	bf00      	nop
 8008084:	370c      	adds	r7, #12
 8008086:	46bd      	mov	sp, r7
 8008088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808c:	4770      	bx	lr
	...

08008090 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008090:	b480      	push	{r7}
 8008092:	b085      	sub	sp, #20
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800809e:	b2db      	uxtb	r3, r3
 80080a0:	2b01      	cmp	r3, #1
 80080a2:	d001      	beq.n	80080a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80080a4:	2301      	movs	r3, #1
 80080a6:	e04e      	b.n	8008146 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2202      	movs	r2, #2
 80080ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	68da      	ldr	r2, [r3, #12]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f042 0201 	orr.w	r2, r2, #1
 80080be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	4a23      	ldr	r2, [pc, #140]	@ (8008154 <HAL_TIM_Base_Start_IT+0xc4>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d022      	beq.n	8008110 <HAL_TIM_Base_Start_IT+0x80>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080d2:	d01d      	beq.n	8008110 <HAL_TIM_Base_Start_IT+0x80>
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	4a1f      	ldr	r2, [pc, #124]	@ (8008158 <HAL_TIM_Base_Start_IT+0xc8>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d018      	beq.n	8008110 <HAL_TIM_Base_Start_IT+0x80>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	4a1e      	ldr	r2, [pc, #120]	@ (800815c <HAL_TIM_Base_Start_IT+0xcc>)
 80080e4:	4293      	cmp	r3, r2
 80080e6:	d013      	beq.n	8008110 <HAL_TIM_Base_Start_IT+0x80>
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a1c      	ldr	r2, [pc, #112]	@ (8008160 <HAL_TIM_Base_Start_IT+0xd0>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d00e      	beq.n	8008110 <HAL_TIM_Base_Start_IT+0x80>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	4a1b      	ldr	r2, [pc, #108]	@ (8008164 <HAL_TIM_Base_Start_IT+0xd4>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d009      	beq.n	8008110 <HAL_TIM_Base_Start_IT+0x80>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a19      	ldr	r2, [pc, #100]	@ (8008168 <HAL_TIM_Base_Start_IT+0xd8>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d004      	beq.n	8008110 <HAL_TIM_Base_Start_IT+0x80>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	4a18      	ldr	r2, [pc, #96]	@ (800816c <HAL_TIM_Base_Start_IT+0xdc>)
 800810c:	4293      	cmp	r3, r2
 800810e:	d111      	bne.n	8008134 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	689b      	ldr	r3, [r3, #8]
 8008116:	f003 0307 	and.w	r3, r3, #7
 800811a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2b06      	cmp	r3, #6
 8008120:	d010      	beq.n	8008144 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	681a      	ldr	r2, [r3, #0]
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f042 0201 	orr.w	r2, r2, #1
 8008130:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008132:	e007      	b.n	8008144 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f042 0201 	orr.w	r2, r2, #1
 8008142:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008144:	2300      	movs	r3, #0
}
 8008146:	4618      	mov	r0, r3
 8008148:	3714      	adds	r7, #20
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr
 8008152:	bf00      	nop
 8008154:	40010000 	.word	0x40010000
 8008158:	40000400 	.word	0x40000400
 800815c:	40000800 	.word	0x40000800
 8008160:	40000c00 	.word	0x40000c00
 8008164:	40010400 	.word	0x40010400
 8008168:	40014000 	.word	0x40014000
 800816c:	40001800 	.word	0x40001800

08008170 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d101      	bne.n	8008182 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800817e:	2301      	movs	r3, #1
 8008180:	e041      	b.n	8008206 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008188:	b2db      	uxtb	r3, r3
 800818a:	2b00      	cmp	r3, #0
 800818c:	d106      	bne.n	800819c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2200      	movs	r2, #0
 8008192:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f7fb fa46 	bl	8003628 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2202      	movs	r2, #2
 80081a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681a      	ldr	r2, [r3, #0]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	3304      	adds	r3, #4
 80081ac:	4619      	mov	r1, r3
 80081ae:	4610      	mov	r0, r2
 80081b0:	f000 fe46 	bl	8008e40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2201      	movs	r2, #1
 80081b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2201      	movs	r2, #1
 80081c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	2201      	movs	r2, #1
 80081c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2201      	movs	r2, #1
 80081d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	2201      	movs	r2, #1
 80081d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2201      	movs	r2, #1
 80081e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2201      	movs	r2, #1
 80081e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2201      	movs	r2, #1
 80081f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2201      	movs	r2, #1
 80081f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2201      	movs	r2, #1
 8008200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008204:	2300      	movs	r3, #0
}
 8008206:	4618      	mov	r0, r3
 8008208:	3708      	adds	r7, #8
 800820a:	46bd      	mov	sp, r7
 800820c:	bd80      	pop	{r7, pc}
	...

08008210 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008210:	b580      	push	{r7, lr}
 8008212:	b084      	sub	sp, #16
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d109      	bne.n	8008234 <HAL_TIM_PWM_Start+0x24>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008226:	b2db      	uxtb	r3, r3
 8008228:	2b01      	cmp	r3, #1
 800822a:	bf14      	ite	ne
 800822c:	2301      	movne	r3, #1
 800822e:	2300      	moveq	r3, #0
 8008230:	b2db      	uxtb	r3, r3
 8008232:	e022      	b.n	800827a <HAL_TIM_PWM_Start+0x6a>
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	2b04      	cmp	r3, #4
 8008238:	d109      	bne.n	800824e <HAL_TIM_PWM_Start+0x3e>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008240:	b2db      	uxtb	r3, r3
 8008242:	2b01      	cmp	r3, #1
 8008244:	bf14      	ite	ne
 8008246:	2301      	movne	r3, #1
 8008248:	2300      	moveq	r3, #0
 800824a:	b2db      	uxtb	r3, r3
 800824c:	e015      	b.n	800827a <HAL_TIM_PWM_Start+0x6a>
 800824e:	683b      	ldr	r3, [r7, #0]
 8008250:	2b08      	cmp	r3, #8
 8008252:	d109      	bne.n	8008268 <HAL_TIM_PWM_Start+0x58>
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800825a:	b2db      	uxtb	r3, r3
 800825c:	2b01      	cmp	r3, #1
 800825e:	bf14      	ite	ne
 8008260:	2301      	movne	r3, #1
 8008262:	2300      	moveq	r3, #0
 8008264:	b2db      	uxtb	r3, r3
 8008266:	e008      	b.n	800827a <HAL_TIM_PWM_Start+0x6a>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800826e:	b2db      	uxtb	r3, r3
 8008270:	2b01      	cmp	r3, #1
 8008272:	bf14      	ite	ne
 8008274:	2301      	movne	r3, #1
 8008276:	2300      	moveq	r3, #0
 8008278:	b2db      	uxtb	r3, r3
 800827a:	2b00      	cmp	r3, #0
 800827c:	d001      	beq.n	8008282 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800827e:	2301      	movs	r3, #1
 8008280:	e07c      	b.n	800837c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	2b00      	cmp	r3, #0
 8008286:	d104      	bne.n	8008292 <HAL_TIM_PWM_Start+0x82>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2202      	movs	r2, #2
 800828c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008290:	e013      	b.n	80082ba <HAL_TIM_PWM_Start+0xaa>
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	2b04      	cmp	r3, #4
 8008296:	d104      	bne.n	80082a2 <HAL_TIM_PWM_Start+0x92>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2202      	movs	r2, #2
 800829c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80082a0:	e00b      	b.n	80082ba <HAL_TIM_PWM_Start+0xaa>
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	2b08      	cmp	r3, #8
 80082a6:	d104      	bne.n	80082b2 <HAL_TIM_PWM_Start+0xa2>
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2202      	movs	r2, #2
 80082ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80082b0:	e003      	b.n	80082ba <HAL_TIM_PWM_Start+0xaa>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2202      	movs	r2, #2
 80082b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	2201      	movs	r2, #1
 80082c0:	6839      	ldr	r1, [r7, #0]
 80082c2:	4618      	mov	r0, r3
 80082c4:	f001 f818 	bl	80092f8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a2d      	ldr	r2, [pc, #180]	@ (8008384 <HAL_TIM_PWM_Start+0x174>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d004      	beq.n	80082dc <HAL_TIM_PWM_Start+0xcc>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a2c      	ldr	r2, [pc, #176]	@ (8008388 <HAL_TIM_PWM_Start+0x178>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d101      	bne.n	80082e0 <HAL_TIM_PWM_Start+0xd0>
 80082dc:	2301      	movs	r3, #1
 80082de:	e000      	b.n	80082e2 <HAL_TIM_PWM_Start+0xd2>
 80082e0:	2300      	movs	r3, #0
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d007      	beq.n	80082f6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80082f4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a22      	ldr	r2, [pc, #136]	@ (8008384 <HAL_TIM_PWM_Start+0x174>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d022      	beq.n	8008346 <HAL_TIM_PWM_Start+0x136>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008308:	d01d      	beq.n	8008346 <HAL_TIM_PWM_Start+0x136>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a1f      	ldr	r2, [pc, #124]	@ (800838c <HAL_TIM_PWM_Start+0x17c>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d018      	beq.n	8008346 <HAL_TIM_PWM_Start+0x136>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a1d      	ldr	r2, [pc, #116]	@ (8008390 <HAL_TIM_PWM_Start+0x180>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d013      	beq.n	8008346 <HAL_TIM_PWM_Start+0x136>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a1c      	ldr	r2, [pc, #112]	@ (8008394 <HAL_TIM_PWM_Start+0x184>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d00e      	beq.n	8008346 <HAL_TIM_PWM_Start+0x136>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a16      	ldr	r2, [pc, #88]	@ (8008388 <HAL_TIM_PWM_Start+0x178>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d009      	beq.n	8008346 <HAL_TIM_PWM_Start+0x136>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a18      	ldr	r2, [pc, #96]	@ (8008398 <HAL_TIM_PWM_Start+0x188>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d004      	beq.n	8008346 <HAL_TIM_PWM_Start+0x136>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a16      	ldr	r2, [pc, #88]	@ (800839c <HAL_TIM_PWM_Start+0x18c>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d111      	bne.n	800836a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	f003 0307 	and.w	r3, r3, #7
 8008350:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2b06      	cmp	r3, #6
 8008356:	d010      	beq.n	800837a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	681a      	ldr	r2, [r3, #0]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f042 0201 	orr.w	r2, r2, #1
 8008366:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008368:	e007      	b.n	800837a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	681a      	ldr	r2, [r3, #0]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f042 0201 	orr.w	r2, r2, #1
 8008378:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800837a:	2300      	movs	r3, #0
}
 800837c:	4618      	mov	r0, r3
 800837e:	3710      	adds	r7, #16
 8008380:	46bd      	mov	sp, r7
 8008382:	bd80      	pop	{r7, pc}
 8008384:	40010000 	.word	0x40010000
 8008388:	40010400 	.word	0x40010400
 800838c:	40000400 	.word	0x40000400
 8008390:	40000800 	.word	0x40000800
 8008394:	40000c00 	.word	0x40000c00
 8008398:	40014000 	.word	0x40014000
 800839c:	40001800 	.word	0x40001800

080083a0 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80083a0:	b580      	push	{r7, lr}
 80083a2:	b086      	sub	sp, #24
 80083a4:	af00      	add	r7, sp, #0
 80083a6:	60f8      	str	r0, [r7, #12]
 80083a8:	60b9      	str	r1, [r7, #8]
 80083aa:	607a      	str	r2, [r7, #4]
 80083ac:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80083ae:	2300      	movs	r3, #0
 80083b0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80083b2:	68bb      	ldr	r3, [r7, #8]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d109      	bne.n	80083cc <HAL_TIM_PWM_Start_DMA+0x2c>
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80083be:	b2db      	uxtb	r3, r3
 80083c0:	2b02      	cmp	r3, #2
 80083c2:	bf0c      	ite	eq
 80083c4:	2301      	moveq	r3, #1
 80083c6:	2300      	movne	r3, #0
 80083c8:	b2db      	uxtb	r3, r3
 80083ca:	e022      	b.n	8008412 <HAL_TIM_PWM_Start_DMA+0x72>
 80083cc:	68bb      	ldr	r3, [r7, #8]
 80083ce:	2b04      	cmp	r3, #4
 80083d0:	d109      	bne.n	80083e6 <HAL_TIM_PWM_Start_DMA+0x46>
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80083d8:	b2db      	uxtb	r3, r3
 80083da:	2b02      	cmp	r3, #2
 80083dc:	bf0c      	ite	eq
 80083de:	2301      	moveq	r3, #1
 80083e0:	2300      	movne	r3, #0
 80083e2:	b2db      	uxtb	r3, r3
 80083e4:	e015      	b.n	8008412 <HAL_TIM_PWM_Start_DMA+0x72>
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	2b08      	cmp	r3, #8
 80083ea:	d109      	bne.n	8008400 <HAL_TIM_PWM_Start_DMA+0x60>
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	2b02      	cmp	r3, #2
 80083f6:	bf0c      	ite	eq
 80083f8:	2301      	moveq	r3, #1
 80083fa:	2300      	movne	r3, #0
 80083fc:	b2db      	uxtb	r3, r3
 80083fe:	e008      	b.n	8008412 <HAL_TIM_PWM_Start_DMA+0x72>
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008406:	b2db      	uxtb	r3, r3
 8008408:	2b02      	cmp	r3, #2
 800840a:	bf0c      	ite	eq
 800840c:	2301      	moveq	r3, #1
 800840e:	2300      	movne	r3, #0
 8008410:	b2db      	uxtb	r3, r3
 8008412:	2b00      	cmp	r3, #0
 8008414:	d001      	beq.n	800841a <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8008416:	2302      	movs	r3, #2
 8008418:	e171      	b.n	80086fe <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d109      	bne.n	8008434 <HAL_TIM_PWM_Start_DMA+0x94>
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008426:	b2db      	uxtb	r3, r3
 8008428:	2b01      	cmp	r3, #1
 800842a:	bf0c      	ite	eq
 800842c:	2301      	moveq	r3, #1
 800842e:	2300      	movne	r3, #0
 8008430:	b2db      	uxtb	r3, r3
 8008432:	e022      	b.n	800847a <HAL_TIM_PWM_Start_DMA+0xda>
 8008434:	68bb      	ldr	r3, [r7, #8]
 8008436:	2b04      	cmp	r3, #4
 8008438:	d109      	bne.n	800844e <HAL_TIM_PWM_Start_DMA+0xae>
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008440:	b2db      	uxtb	r3, r3
 8008442:	2b01      	cmp	r3, #1
 8008444:	bf0c      	ite	eq
 8008446:	2301      	moveq	r3, #1
 8008448:	2300      	movne	r3, #0
 800844a:	b2db      	uxtb	r3, r3
 800844c:	e015      	b.n	800847a <HAL_TIM_PWM_Start_DMA+0xda>
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	2b08      	cmp	r3, #8
 8008452:	d109      	bne.n	8008468 <HAL_TIM_PWM_Start_DMA+0xc8>
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800845a:	b2db      	uxtb	r3, r3
 800845c:	2b01      	cmp	r3, #1
 800845e:	bf0c      	ite	eq
 8008460:	2301      	moveq	r3, #1
 8008462:	2300      	movne	r3, #0
 8008464:	b2db      	uxtb	r3, r3
 8008466:	e008      	b.n	800847a <HAL_TIM_PWM_Start_DMA+0xda>
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800846e:	b2db      	uxtb	r3, r3
 8008470:	2b01      	cmp	r3, #1
 8008472:	bf0c      	ite	eq
 8008474:	2301      	moveq	r3, #1
 8008476:	2300      	movne	r3, #0
 8008478:	b2db      	uxtb	r3, r3
 800847a:	2b00      	cmp	r3, #0
 800847c:	d024      	beq.n	80084c8 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2b00      	cmp	r3, #0
 8008482:	d002      	beq.n	800848a <HAL_TIM_PWM_Start_DMA+0xea>
 8008484:	887b      	ldrh	r3, [r7, #2]
 8008486:	2b00      	cmp	r3, #0
 8008488:	d101      	bne.n	800848e <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800848a:	2301      	movs	r3, #1
 800848c:	e137      	b.n	80086fe <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d104      	bne.n	800849e <HAL_TIM_PWM_Start_DMA+0xfe>
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2202      	movs	r2, #2
 8008498:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800849c:	e016      	b.n	80084cc <HAL_TIM_PWM_Start_DMA+0x12c>
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	2b04      	cmp	r3, #4
 80084a2:	d104      	bne.n	80084ae <HAL_TIM_PWM_Start_DMA+0x10e>
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	2202      	movs	r2, #2
 80084a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80084ac:	e00e      	b.n	80084cc <HAL_TIM_PWM_Start_DMA+0x12c>
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	2b08      	cmp	r3, #8
 80084b2:	d104      	bne.n	80084be <HAL_TIM_PWM_Start_DMA+0x11e>
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2202      	movs	r2, #2
 80084b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80084bc:	e006      	b.n	80084cc <HAL_TIM_PWM_Start_DMA+0x12c>
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2202      	movs	r2, #2
 80084c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80084c6:	e001      	b.n	80084cc <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80084c8:	2301      	movs	r3, #1
 80084ca:	e118      	b.n	80086fe <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	2b0c      	cmp	r3, #12
 80084d0:	f200 80ae 	bhi.w	8008630 <HAL_TIM_PWM_Start_DMA+0x290>
 80084d4:	a201      	add	r2, pc, #4	@ (adr r2, 80084dc <HAL_TIM_PWM_Start_DMA+0x13c>)
 80084d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084da:	bf00      	nop
 80084dc:	08008511 	.word	0x08008511
 80084e0:	08008631 	.word	0x08008631
 80084e4:	08008631 	.word	0x08008631
 80084e8:	08008631 	.word	0x08008631
 80084ec:	08008559 	.word	0x08008559
 80084f0:	08008631 	.word	0x08008631
 80084f4:	08008631 	.word	0x08008631
 80084f8:	08008631 	.word	0x08008631
 80084fc:	080085a1 	.word	0x080085a1
 8008500:	08008631 	.word	0x08008631
 8008504:	08008631 	.word	0x08008631
 8008508:	08008631 	.word	0x08008631
 800850c:	080085e9 	.word	0x080085e9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008514:	4a7c      	ldr	r2, [pc, #496]	@ (8008708 <HAL_TIM_PWM_Start_DMA+0x368>)
 8008516:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800851c:	4a7b      	ldr	r2, [pc, #492]	@ (800870c <HAL_TIM_PWM_Start_DMA+0x36c>)
 800851e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008524:	4a7a      	ldr	r2, [pc, #488]	@ (8008710 <HAL_TIM_PWM_Start_DMA+0x370>)
 8008526:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800852c:	6879      	ldr	r1, [r7, #4]
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	3334      	adds	r3, #52	@ 0x34
 8008534:	461a      	mov	r2, r3
 8008536:	887b      	ldrh	r3, [r7, #2]
 8008538:	f7fc f91a 	bl	8004770 <HAL_DMA_Start_IT>
 800853c:	4603      	mov	r3, r0
 800853e:	2b00      	cmp	r3, #0
 8008540:	d001      	beq.n	8008546 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008542:	2301      	movs	r3, #1
 8008544:	e0db      	b.n	80086fe <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	68da      	ldr	r2, [r3, #12]
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008554:	60da      	str	r2, [r3, #12]
      break;
 8008556:	e06e      	b.n	8008636 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800855c:	4a6a      	ldr	r2, [pc, #424]	@ (8008708 <HAL_TIM_PWM_Start_DMA+0x368>)
 800855e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008564:	4a69      	ldr	r2, [pc, #420]	@ (800870c <HAL_TIM_PWM_Start_DMA+0x36c>)
 8008566:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800856c:	4a68      	ldr	r2, [pc, #416]	@ (8008710 <HAL_TIM_PWM_Start_DMA+0x370>)
 800856e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008574:	6879      	ldr	r1, [r7, #4]
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	3338      	adds	r3, #56	@ 0x38
 800857c:	461a      	mov	r2, r3
 800857e:	887b      	ldrh	r3, [r7, #2]
 8008580:	f7fc f8f6 	bl	8004770 <HAL_DMA_Start_IT>
 8008584:	4603      	mov	r3, r0
 8008586:	2b00      	cmp	r3, #0
 8008588:	d001      	beq.n	800858e <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800858a:	2301      	movs	r3, #1
 800858c:	e0b7      	b.n	80086fe <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	68da      	ldr	r2, [r3, #12]
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800859c:	60da      	str	r2, [r3, #12]
      break;
 800859e:	e04a      	b.n	8008636 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085a4:	4a58      	ldr	r2, [pc, #352]	@ (8008708 <HAL_TIM_PWM_Start_DMA+0x368>)
 80085a6:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085ac:	4a57      	ldr	r2, [pc, #348]	@ (800870c <HAL_TIM_PWM_Start_DMA+0x36c>)
 80085ae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085b4:	4a56      	ldr	r2, [pc, #344]	@ (8008710 <HAL_TIM_PWM_Start_DMA+0x370>)
 80085b6:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80085bc:	6879      	ldr	r1, [r7, #4]
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	333c      	adds	r3, #60	@ 0x3c
 80085c4:	461a      	mov	r2, r3
 80085c6:	887b      	ldrh	r3, [r7, #2]
 80085c8:	f7fc f8d2 	bl	8004770 <HAL_DMA_Start_IT>
 80085cc:	4603      	mov	r3, r0
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d001      	beq.n	80085d6 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80085d2:	2301      	movs	r3, #1
 80085d4:	e093      	b.n	80086fe <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	68da      	ldr	r2, [r3, #12]
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80085e4:	60da      	str	r2, [r3, #12]
      break;
 80085e6:	e026      	b.n	8008636 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085ec:	4a46      	ldr	r2, [pc, #280]	@ (8008708 <HAL_TIM_PWM_Start_DMA+0x368>)
 80085ee:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085f4:	4a45      	ldr	r2, [pc, #276]	@ (800870c <HAL_TIM_PWM_Start_DMA+0x36c>)
 80085f6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085fc:	4a44      	ldr	r2, [pc, #272]	@ (8008710 <HAL_TIM_PWM_Start_DMA+0x370>)
 80085fe:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008604:	6879      	ldr	r1, [r7, #4]
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	3340      	adds	r3, #64	@ 0x40
 800860c:	461a      	mov	r2, r3
 800860e:	887b      	ldrh	r3, [r7, #2]
 8008610:	f7fc f8ae 	bl	8004770 <HAL_DMA_Start_IT>
 8008614:	4603      	mov	r3, r0
 8008616:	2b00      	cmp	r3, #0
 8008618:	d001      	beq.n	800861e <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800861a:	2301      	movs	r3, #1
 800861c:	e06f      	b.n	80086fe <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	68da      	ldr	r2, [r3, #12]
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800862c:	60da      	str	r2, [r3, #12]
      break;
 800862e:	e002      	b.n	8008636 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8008630:	2301      	movs	r3, #1
 8008632:	75fb      	strb	r3, [r7, #23]
      break;
 8008634:	bf00      	nop
  }

  if (status == HAL_OK)
 8008636:	7dfb      	ldrb	r3, [r7, #23]
 8008638:	2b00      	cmp	r3, #0
 800863a:	d15f      	bne.n	80086fc <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	2201      	movs	r2, #1
 8008642:	68b9      	ldr	r1, [r7, #8]
 8008644:	4618      	mov	r0, r3
 8008646:	f000 fe57 	bl	80092f8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a31      	ldr	r2, [pc, #196]	@ (8008714 <HAL_TIM_PWM_Start_DMA+0x374>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d004      	beq.n	800865e <HAL_TIM_PWM_Start_DMA+0x2be>
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a2f      	ldr	r2, [pc, #188]	@ (8008718 <HAL_TIM_PWM_Start_DMA+0x378>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d101      	bne.n	8008662 <HAL_TIM_PWM_Start_DMA+0x2c2>
 800865e:	2301      	movs	r3, #1
 8008660:	e000      	b.n	8008664 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8008662:	2300      	movs	r3, #0
 8008664:	2b00      	cmp	r3, #0
 8008666:	d007      	beq.n	8008678 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008676:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a25      	ldr	r2, [pc, #148]	@ (8008714 <HAL_TIM_PWM_Start_DMA+0x374>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d022      	beq.n	80086c8 <HAL_TIM_PWM_Start_DMA+0x328>
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800868a:	d01d      	beq.n	80086c8 <HAL_TIM_PWM_Start_DMA+0x328>
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	4a22      	ldr	r2, [pc, #136]	@ (800871c <HAL_TIM_PWM_Start_DMA+0x37c>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d018      	beq.n	80086c8 <HAL_TIM_PWM_Start_DMA+0x328>
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4a21      	ldr	r2, [pc, #132]	@ (8008720 <HAL_TIM_PWM_Start_DMA+0x380>)
 800869c:	4293      	cmp	r3, r2
 800869e:	d013      	beq.n	80086c8 <HAL_TIM_PWM_Start_DMA+0x328>
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a1f      	ldr	r2, [pc, #124]	@ (8008724 <HAL_TIM_PWM_Start_DMA+0x384>)
 80086a6:	4293      	cmp	r3, r2
 80086a8:	d00e      	beq.n	80086c8 <HAL_TIM_PWM_Start_DMA+0x328>
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	4a1a      	ldr	r2, [pc, #104]	@ (8008718 <HAL_TIM_PWM_Start_DMA+0x378>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d009      	beq.n	80086c8 <HAL_TIM_PWM_Start_DMA+0x328>
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	4a1b      	ldr	r2, [pc, #108]	@ (8008728 <HAL_TIM_PWM_Start_DMA+0x388>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d004      	beq.n	80086c8 <HAL_TIM_PWM_Start_DMA+0x328>
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	4a1a      	ldr	r2, [pc, #104]	@ (800872c <HAL_TIM_PWM_Start_DMA+0x38c>)
 80086c4:	4293      	cmp	r3, r2
 80086c6:	d111      	bne.n	80086ec <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	689b      	ldr	r3, [r3, #8]
 80086ce:	f003 0307 	and.w	r3, r3, #7
 80086d2:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	2b06      	cmp	r3, #6
 80086d8:	d010      	beq.n	80086fc <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	681a      	ldr	r2, [r3, #0]
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f042 0201 	orr.w	r2, r2, #1
 80086e8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086ea:	e007      	b.n	80086fc <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	681a      	ldr	r2, [r3, #0]
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f042 0201 	orr.w	r2, r2, #1
 80086fa:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80086fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3718      	adds	r7, #24
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
 8008706:	bf00      	nop
 8008708:	08008d2f 	.word	0x08008d2f
 800870c:	08008dd7 	.word	0x08008dd7
 8008710:	08008c9d 	.word	0x08008c9d
 8008714:	40010000 	.word	0x40010000
 8008718:	40010400 	.word	0x40010400
 800871c:	40000400 	.word	0x40000400
 8008720:	40000800 	.word	0x40000800
 8008724:	40000c00 	.word	0x40000c00
 8008728:	40014000 	.word	0x40014000
 800872c:	40001800 	.word	0x40001800

08008730 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	b084      	sub	sp, #16
 8008734:	af00      	add	r7, sp, #0
 8008736:	6078      	str	r0, [r7, #4]
 8008738:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800873a:	2300      	movs	r3, #0
 800873c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800873e:	683b      	ldr	r3, [r7, #0]
 8008740:	2b0c      	cmp	r3, #12
 8008742:	d855      	bhi.n	80087f0 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8008744:	a201      	add	r2, pc, #4	@ (adr r2, 800874c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8008746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800874a:	bf00      	nop
 800874c:	08008781 	.word	0x08008781
 8008750:	080087f1 	.word	0x080087f1
 8008754:	080087f1 	.word	0x080087f1
 8008758:	080087f1 	.word	0x080087f1
 800875c:	0800879d 	.word	0x0800879d
 8008760:	080087f1 	.word	0x080087f1
 8008764:	080087f1 	.word	0x080087f1
 8008768:	080087f1 	.word	0x080087f1
 800876c:	080087b9 	.word	0x080087b9
 8008770:	080087f1 	.word	0x080087f1
 8008774:	080087f1 	.word	0x080087f1
 8008778:	080087f1 	.word	0x080087f1
 800877c:	080087d5 	.word	0x080087d5
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	68da      	ldr	r2, [r3, #12]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800878e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008794:	4618      	mov	r0, r3
 8008796:	f7fc f8b3 	bl	8004900 <HAL_DMA_Abort_IT>
      break;
 800879a:	e02c      	b.n	80087f6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	68da      	ldr	r2, [r3, #12]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80087aa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087b0:	4618      	mov	r0, r3
 80087b2:	f7fc f8a5 	bl	8004900 <HAL_DMA_Abort_IT>
      break;
 80087b6:	e01e      	b.n	80087f6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	68da      	ldr	r2, [r3, #12]
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80087c6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087cc:	4618      	mov	r0, r3
 80087ce:	f7fc f897 	bl	8004900 <HAL_DMA_Abort_IT>
      break;
 80087d2:	e010      	b.n	80087f6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	68da      	ldr	r2, [r3, #12]
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80087e2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087e8:	4618      	mov	r0, r3
 80087ea:	f7fc f889 	bl	8004900 <HAL_DMA_Abort_IT>
      break;
 80087ee:	e002      	b.n	80087f6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80087f0:	2301      	movs	r3, #1
 80087f2:	73fb      	strb	r3, [r7, #15]
      break;
 80087f4:	bf00      	nop
  }

  if (status == HAL_OK)
 80087f6:	7bfb      	ldrb	r3, [r7, #15]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d161      	bne.n	80088c0 <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	2200      	movs	r2, #0
 8008802:	6839      	ldr	r1, [r7, #0]
 8008804:	4618      	mov	r0, r3
 8008806:	f000 fd77 	bl	80092f8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4a2f      	ldr	r2, [pc, #188]	@ (80088cc <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8008810:	4293      	cmp	r3, r2
 8008812:	d004      	beq.n	800881e <HAL_TIM_PWM_Stop_DMA+0xee>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	4a2d      	ldr	r2, [pc, #180]	@ (80088d0 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d101      	bne.n	8008822 <HAL_TIM_PWM_Stop_DMA+0xf2>
 800881e:	2301      	movs	r3, #1
 8008820:	e000      	b.n	8008824 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8008822:	2300      	movs	r3, #0
 8008824:	2b00      	cmp	r3, #0
 8008826:	d017      	beq.n	8008858 <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	6a1a      	ldr	r2, [r3, #32]
 800882e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008832:	4013      	ands	r3, r2
 8008834:	2b00      	cmp	r3, #0
 8008836:	d10f      	bne.n	8008858 <HAL_TIM_PWM_Stop_DMA+0x128>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	6a1a      	ldr	r2, [r3, #32]
 800883e:	f240 4344 	movw	r3, #1092	@ 0x444
 8008842:	4013      	ands	r3, r2
 8008844:	2b00      	cmp	r3, #0
 8008846:	d107      	bne.n	8008858 <HAL_TIM_PWM_Stop_DMA+0x128>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008856:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	6a1a      	ldr	r2, [r3, #32]
 800885e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008862:	4013      	ands	r3, r2
 8008864:	2b00      	cmp	r3, #0
 8008866:	d10f      	bne.n	8008888 <HAL_TIM_PWM_Stop_DMA+0x158>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	6a1a      	ldr	r2, [r3, #32]
 800886e:	f240 4344 	movw	r3, #1092	@ 0x444
 8008872:	4013      	ands	r3, r2
 8008874:	2b00      	cmp	r3, #0
 8008876:	d107      	bne.n	8008888 <HAL_TIM_PWM_Stop_DMA+0x158>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	681a      	ldr	r2, [r3, #0]
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	f022 0201 	bic.w	r2, r2, #1
 8008886:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d104      	bne.n	8008898 <HAL_TIM_PWM_Stop_DMA+0x168>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2201      	movs	r2, #1
 8008892:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008896:	e013      	b.n	80088c0 <HAL_TIM_PWM_Stop_DMA+0x190>
 8008898:	683b      	ldr	r3, [r7, #0]
 800889a:	2b04      	cmp	r3, #4
 800889c:	d104      	bne.n	80088a8 <HAL_TIM_PWM_Stop_DMA+0x178>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2201      	movs	r2, #1
 80088a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80088a6:	e00b      	b.n	80088c0 <HAL_TIM_PWM_Stop_DMA+0x190>
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	2b08      	cmp	r3, #8
 80088ac:	d104      	bne.n	80088b8 <HAL_TIM_PWM_Stop_DMA+0x188>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2201      	movs	r2, #1
 80088b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80088b6:	e003      	b.n	80088c0 <HAL_TIM_PWM_Stop_DMA+0x190>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2201      	movs	r2, #1
 80088bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 80088c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3710      	adds	r7, #16
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}
 80088ca:	bf00      	nop
 80088cc:	40010000 	.word	0x40010000
 80088d0:	40010400 	.word	0x40010400

080088d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b084      	sub	sp, #16
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	68db      	ldr	r3, [r3, #12]
 80088e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	691b      	ldr	r3, [r3, #16]
 80088ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	f003 0302 	and.w	r3, r3, #2
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d020      	beq.n	8008938 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	f003 0302 	and.w	r3, r3, #2
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d01b      	beq.n	8008938 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f06f 0202 	mvn.w	r2, #2
 8008908:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	2201      	movs	r2, #1
 800890e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	699b      	ldr	r3, [r3, #24]
 8008916:	f003 0303 	and.w	r3, r3, #3
 800891a:	2b00      	cmp	r3, #0
 800891c:	d003      	beq.n	8008926 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f000 f994 	bl	8008c4c <HAL_TIM_IC_CaptureCallback>
 8008924:	e005      	b.n	8008932 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008926:	6878      	ldr	r0, [r7, #4]
 8008928:	f000 f986 	bl	8008c38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800892c:	6878      	ldr	r0, [r7, #4]
 800892e:	f7f8 fd21 	bl	8001374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2200      	movs	r2, #0
 8008936:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008938:	68bb      	ldr	r3, [r7, #8]
 800893a:	f003 0304 	and.w	r3, r3, #4
 800893e:	2b00      	cmp	r3, #0
 8008940:	d020      	beq.n	8008984 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	f003 0304 	and.w	r3, r3, #4
 8008948:	2b00      	cmp	r3, #0
 800894a:	d01b      	beq.n	8008984 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	f06f 0204 	mvn.w	r2, #4
 8008954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2202      	movs	r2, #2
 800895a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	699b      	ldr	r3, [r3, #24]
 8008962:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008966:	2b00      	cmp	r3, #0
 8008968:	d003      	beq.n	8008972 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f000 f96e 	bl	8008c4c <HAL_TIM_IC_CaptureCallback>
 8008970:	e005      	b.n	800897e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 f960 	bl	8008c38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f7f8 fcfb 	bl	8001374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2200      	movs	r2, #0
 8008982:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	f003 0308 	and.w	r3, r3, #8
 800898a:	2b00      	cmp	r3, #0
 800898c:	d020      	beq.n	80089d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	f003 0308 	and.w	r3, r3, #8
 8008994:	2b00      	cmp	r3, #0
 8008996:	d01b      	beq.n	80089d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f06f 0208 	mvn.w	r2, #8
 80089a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2204      	movs	r2, #4
 80089a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	69db      	ldr	r3, [r3, #28]
 80089ae:	f003 0303 	and.w	r3, r3, #3
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d003      	beq.n	80089be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f000 f948 	bl	8008c4c <HAL_TIM_IC_CaptureCallback>
 80089bc:	e005      	b.n	80089ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f000 f93a 	bl	8008c38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089c4:	6878      	ldr	r0, [r7, #4]
 80089c6:	f7f8 fcd5 	bl	8001374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2200      	movs	r2, #0
 80089ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	f003 0310 	and.w	r3, r3, #16
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d020      	beq.n	8008a1c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80089da:	68fb      	ldr	r3, [r7, #12]
 80089dc:	f003 0310 	and.w	r3, r3, #16
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d01b      	beq.n	8008a1c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f06f 0210 	mvn.w	r2, #16
 80089ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2208      	movs	r2, #8
 80089f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	69db      	ldr	r3, [r3, #28]
 80089fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d003      	beq.n	8008a0a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f000 f922 	bl	8008c4c <HAL_TIM_IC_CaptureCallback>
 8008a08:	e005      	b.n	8008a16 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f000 f914 	bl	8008c38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f7f8 fcaf 	bl	8001374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008a1c:	68bb      	ldr	r3, [r7, #8]
 8008a1e:	f003 0301 	and.w	r3, r3, #1
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d00c      	beq.n	8008a40 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	f003 0301 	and.w	r3, r3, #1
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d007      	beq.n	8008a40 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f06f 0201 	mvn.w	r2, #1
 8008a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f7fa fab6 	bl	8002fac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d00c      	beq.n	8008a64 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d007      	beq.n	8008a64 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f000 fcf6 	bl	8009450 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d00c      	beq.n	8008a88 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d007      	beq.n	8008a88 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008a82:	6878      	ldr	r0, [r7, #4]
 8008a84:	f000 f8f6 	bl	8008c74 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008a88:	68bb      	ldr	r3, [r7, #8]
 8008a8a:	f003 0320 	and.w	r3, r3, #32
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d00c      	beq.n	8008aac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	f003 0320 	and.w	r3, r3, #32
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d007      	beq.n	8008aac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f06f 0220 	mvn.w	r2, #32
 8008aa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 fcc8 	bl	800943c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008aac:	bf00      	nop
 8008aae:	3710      	adds	r7, #16
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	bd80      	pop	{r7, pc}

08008ab4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b086      	sub	sp, #24
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	60f8      	str	r0, [r7, #12]
 8008abc:	60b9      	str	r1, [r7, #8]
 8008abe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d101      	bne.n	8008ad2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008ace:	2302      	movs	r3, #2
 8008ad0:	e0ae      	b.n	8008c30 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2201      	movs	r2, #1
 8008ad6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2b0c      	cmp	r3, #12
 8008ade:	f200 809f 	bhi.w	8008c20 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008ae2:	a201      	add	r2, pc, #4	@ (adr r2, 8008ae8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ae8:	08008b1d 	.word	0x08008b1d
 8008aec:	08008c21 	.word	0x08008c21
 8008af0:	08008c21 	.word	0x08008c21
 8008af4:	08008c21 	.word	0x08008c21
 8008af8:	08008b5d 	.word	0x08008b5d
 8008afc:	08008c21 	.word	0x08008c21
 8008b00:	08008c21 	.word	0x08008c21
 8008b04:	08008c21 	.word	0x08008c21
 8008b08:	08008b9f 	.word	0x08008b9f
 8008b0c:	08008c21 	.word	0x08008c21
 8008b10:	08008c21 	.word	0x08008c21
 8008b14:	08008c21 	.word	0x08008c21
 8008b18:	08008bdf 	.word	0x08008bdf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	68b9      	ldr	r1, [r7, #8]
 8008b22:	4618      	mov	r0, r3
 8008b24:	f000 fa38 	bl	8008f98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	699a      	ldr	r2, [r3, #24]
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	f042 0208 	orr.w	r2, r2, #8
 8008b36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	699a      	ldr	r2, [r3, #24]
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f022 0204 	bic.w	r2, r2, #4
 8008b46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	6999      	ldr	r1, [r3, #24]
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	691a      	ldr	r2, [r3, #16]
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	430a      	orrs	r2, r1
 8008b58:	619a      	str	r2, [r3, #24]
      break;
 8008b5a:	e064      	b.n	8008c26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	68b9      	ldr	r1, [r7, #8]
 8008b62:	4618      	mov	r0, r3
 8008b64:	f000 fa88 	bl	8009078 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	699a      	ldr	r2, [r3, #24]
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008b76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	699a      	ldr	r2, [r3, #24]
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008b86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	6999      	ldr	r1, [r3, #24]
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	691b      	ldr	r3, [r3, #16]
 8008b92:	021a      	lsls	r2, r3, #8
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	430a      	orrs	r2, r1
 8008b9a:	619a      	str	r2, [r3, #24]
      break;
 8008b9c:	e043      	b.n	8008c26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	68b9      	ldr	r1, [r7, #8]
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f000 fadd 	bl	8009164 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	69da      	ldr	r2, [r3, #28]
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f042 0208 	orr.w	r2, r2, #8
 8008bb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	69da      	ldr	r2, [r3, #28]
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f022 0204 	bic.w	r2, r2, #4
 8008bc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	69d9      	ldr	r1, [r3, #28]
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	691a      	ldr	r2, [r3, #16]
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	430a      	orrs	r2, r1
 8008bda:	61da      	str	r2, [r3, #28]
      break;
 8008bdc:	e023      	b.n	8008c26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	68b9      	ldr	r1, [r7, #8]
 8008be4:	4618      	mov	r0, r3
 8008be6:	f000 fb31 	bl	800924c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	69da      	ldr	r2, [r3, #28]
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008bf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008bfa:	68fb      	ldr	r3, [r7, #12]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	69da      	ldr	r2, [r3, #28]
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008c08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	69d9      	ldr	r1, [r3, #28]
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	691b      	ldr	r3, [r3, #16]
 8008c14:	021a      	lsls	r2, r3, #8
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	430a      	orrs	r2, r1
 8008c1c:	61da      	str	r2, [r3, #28]
      break;
 8008c1e:	e002      	b.n	8008c26 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008c20:	2301      	movs	r3, #1
 8008c22:	75fb      	strb	r3, [r7, #23]
      break;
 8008c24:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008c2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3718      	adds	r7, #24
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}

08008c38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b083      	sub	sp, #12
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008c40:	bf00      	nop
 8008c42:	370c      	adds	r7, #12
 8008c44:	46bd      	mov	sp, r7
 8008c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4a:	4770      	bx	lr

08008c4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	b083      	sub	sp, #12
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008c54:	bf00      	nop
 8008c56:	370c      	adds	r7, #12
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5e:	4770      	bx	lr

08008c60 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b083      	sub	sp, #12
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008c68:	bf00      	nop
 8008c6a:	370c      	adds	r7, #12
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr

08008c74 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008c74:	b480      	push	{r7}
 8008c76:	b083      	sub	sp, #12
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008c7c:	bf00      	nop
 8008c7e:	370c      	adds	r7, #12
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr

08008c88 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b083      	sub	sp, #12
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008c90:	bf00      	nop
 8008c92:	370c      	adds	r7, #12
 8008c94:	46bd      	mov	sp, r7
 8008c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9a:	4770      	bx	lr

08008c9c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008c9c:	b580      	push	{r7, lr}
 8008c9e:	b084      	sub	sp, #16
 8008ca0:	af00      	add	r7, sp, #0
 8008ca2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ca8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cae:	687a      	ldr	r2, [r7, #4]
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d107      	bne.n	8008cc4 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	2201      	movs	r2, #1
 8008cb8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2201      	movs	r2, #1
 8008cbe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008cc2:	e02a      	b.n	8008d1a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cc8:	687a      	ldr	r2, [r7, #4]
 8008cca:	429a      	cmp	r2, r3
 8008ccc:	d107      	bne.n	8008cde <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	2202      	movs	r2, #2
 8008cd2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008cdc:	e01d      	b.n	8008d1a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ce2:	687a      	ldr	r2, [r7, #4]
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	d107      	bne.n	8008cf8 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2204      	movs	r2, #4
 8008cec:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2201      	movs	r2, #1
 8008cf2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008cf6:	e010      	b.n	8008d1a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cfc:	687a      	ldr	r2, [r7, #4]
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d107      	bne.n	8008d12 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	2208      	movs	r2, #8
 8008d06:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	2201      	movs	r2, #1
 8008d0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008d10:	e003      	b.n	8008d1a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	2201      	movs	r2, #1
 8008d16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8008d1a:	68f8      	ldr	r0, [r7, #12]
 8008d1c:	f7ff ffb4 	bl	8008c88 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2200      	movs	r2, #0
 8008d24:	771a      	strb	r2, [r3, #28]
}
 8008d26:	bf00      	nop
 8008d28:	3710      	adds	r7, #16
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}

08008d2e <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8008d2e:	b580      	push	{r7, lr}
 8008d30:	b084      	sub	sp, #16
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d3a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d40:	687a      	ldr	r2, [r7, #4]
 8008d42:	429a      	cmp	r2, r3
 8008d44:	d10b      	bne.n	8008d5e <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	2201      	movs	r2, #1
 8008d4a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	69db      	ldr	r3, [r3, #28]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d136      	bne.n	8008dc2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	2201      	movs	r2, #1
 8008d58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008d5c:	e031      	b.n	8008dc2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d62:	687a      	ldr	r2, [r7, #4]
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d10b      	bne.n	8008d80 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2202      	movs	r2, #2
 8008d6c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	69db      	ldr	r3, [r3, #28]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d125      	bne.n	8008dc2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2201      	movs	r2, #1
 8008d7a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008d7e:	e020      	b.n	8008dc2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d84:	687a      	ldr	r2, [r7, #4]
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d10b      	bne.n	8008da2 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2204      	movs	r2, #4
 8008d8e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	69db      	ldr	r3, [r3, #28]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d114      	bne.n	8008dc2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008da0:	e00f      	b.n	8008dc2 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008da6:	687a      	ldr	r2, [r7, #4]
 8008da8:	429a      	cmp	r2, r3
 8008daa:	d10a      	bne.n	8008dc2 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	2208      	movs	r2, #8
 8008db0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	69db      	ldr	r3, [r3, #28]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d103      	bne.n	8008dc2 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	2201      	movs	r2, #1
 8008dbe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dc2:	68f8      	ldr	r0, [r7, #12]
 8008dc4:	f7f8 fad6 	bl	8001374 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	771a      	strb	r2, [r3, #28]
}
 8008dce:	bf00      	nop
 8008dd0:	3710      	adds	r7, #16
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}

08008dd6 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008dd6:	b580      	push	{r7, lr}
 8008dd8:	b084      	sub	sp, #16
 8008dda:	af00      	add	r7, sp, #0
 8008ddc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008de2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008de8:	687a      	ldr	r2, [r7, #4]
 8008dea:	429a      	cmp	r2, r3
 8008dec:	d103      	bne.n	8008df6 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2201      	movs	r2, #1
 8008df2:	771a      	strb	r2, [r3, #28]
 8008df4:	e019      	b.n	8008e2a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dfa:	687a      	ldr	r2, [r7, #4]
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d103      	bne.n	8008e08 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	2202      	movs	r2, #2
 8008e04:	771a      	strb	r2, [r3, #28]
 8008e06:	e010      	b.n	8008e2a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e0c:	687a      	ldr	r2, [r7, #4]
 8008e0e:	429a      	cmp	r2, r3
 8008e10:	d103      	bne.n	8008e1a <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2204      	movs	r2, #4
 8008e16:	771a      	strb	r2, [r3, #28]
 8008e18:	e007      	b.n	8008e2a <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e1e:	687a      	ldr	r2, [r7, #4]
 8008e20:	429a      	cmp	r2, r3
 8008e22:	d102      	bne.n	8008e2a <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	2208      	movs	r2, #8
 8008e28:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8008e2a:	68f8      	ldr	r0, [r7, #12]
 8008e2c:	f7ff ff18 	bl	8008c60 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	2200      	movs	r2, #0
 8008e34:	771a      	strb	r2, [r3, #28]
}
 8008e36:	bf00      	nop
 8008e38:	3710      	adds	r7, #16
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}
	...

08008e40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008e40:	b480      	push	{r7}
 8008e42:	b085      	sub	sp, #20
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	6078      	str	r0, [r7, #4]
 8008e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	4a46      	ldr	r2, [pc, #280]	@ (8008f6c <TIM_Base_SetConfig+0x12c>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d013      	beq.n	8008e80 <TIM_Base_SetConfig+0x40>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e5e:	d00f      	beq.n	8008e80 <TIM_Base_SetConfig+0x40>
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	4a43      	ldr	r2, [pc, #268]	@ (8008f70 <TIM_Base_SetConfig+0x130>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d00b      	beq.n	8008e80 <TIM_Base_SetConfig+0x40>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	4a42      	ldr	r2, [pc, #264]	@ (8008f74 <TIM_Base_SetConfig+0x134>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d007      	beq.n	8008e80 <TIM_Base_SetConfig+0x40>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	4a41      	ldr	r2, [pc, #260]	@ (8008f78 <TIM_Base_SetConfig+0x138>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d003      	beq.n	8008e80 <TIM_Base_SetConfig+0x40>
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	4a40      	ldr	r2, [pc, #256]	@ (8008f7c <TIM_Base_SetConfig+0x13c>)
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d108      	bne.n	8008e92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008e88:	683b      	ldr	r3, [r7, #0]
 8008e8a:	685b      	ldr	r3, [r3, #4]
 8008e8c:	68fa      	ldr	r2, [r7, #12]
 8008e8e:	4313      	orrs	r3, r2
 8008e90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	4a35      	ldr	r2, [pc, #212]	@ (8008f6c <TIM_Base_SetConfig+0x12c>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d02b      	beq.n	8008ef2 <TIM_Base_SetConfig+0xb2>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ea0:	d027      	beq.n	8008ef2 <TIM_Base_SetConfig+0xb2>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	4a32      	ldr	r2, [pc, #200]	@ (8008f70 <TIM_Base_SetConfig+0x130>)
 8008ea6:	4293      	cmp	r3, r2
 8008ea8:	d023      	beq.n	8008ef2 <TIM_Base_SetConfig+0xb2>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	4a31      	ldr	r2, [pc, #196]	@ (8008f74 <TIM_Base_SetConfig+0x134>)
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	d01f      	beq.n	8008ef2 <TIM_Base_SetConfig+0xb2>
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	4a30      	ldr	r2, [pc, #192]	@ (8008f78 <TIM_Base_SetConfig+0x138>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d01b      	beq.n	8008ef2 <TIM_Base_SetConfig+0xb2>
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	4a2f      	ldr	r2, [pc, #188]	@ (8008f7c <TIM_Base_SetConfig+0x13c>)
 8008ebe:	4293      	cmp	r3, r2
 8008ec0:	d017      	beq.n	8008ef2 <TIM_Base_SetConfig+0xb2>
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	4a2e      	ldr	r2, [pc, #184]	@ (8008f80 <TIM_Base_SetConfig+0x140>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d013      	beq.n	8008ef2 <TIM_Base_SetConfig+0xb2>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	4a2d      	ldr	r2, [pc, #180]	@ (8008f84 <TIM_Base_SetConfig+0x144>)
 8008ece:	4293      	cmp	r3, r2
 8008ed0:	d00f      	beq.n	8008ef2 <TIM_Base_SetConfig+0xb2>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	4a2c      	ldr	r2, [pc, #176]	@ (8008f88 <TIM_Base_SetConfig+0x148>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d00b      	beq.n	8008ef2 <TIM_Base_SetConfig+0xb2>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	4a2b      	ldr	r2, [pc, #172]	@ (8008f8c <TIM_Base_SetConfig+0x14c>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d007      	beq.n	8008ef2 <TIM_Base_SetConfig+0xb2>
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	4a2a      	ldr	r2, [pc, #168]	@ (8008f90 <TIM_Base_SetConfig+0x150>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d003      	beq.n	8008ef2 <TIM_Base_SetConfig+0xb2>
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	4a29      	ldr	r2, [pc, #164]	@ (8008f94 <TIM_Base_SetConfig+0x154>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d108      	bne.n	8008f04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008ef8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	68db      	ldr	r3, [r3, #12]
 8008efe:	68fa      	ldr	r2, [r7, #12]
 8008f00:	4313      	orrs	r3, r2
 8008f02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	695b      	ldr	r3, [r3, #20]
 8008f0e:	4313      	orrs	r3, r2
 8008f10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	68fa      	ldr	r2, [r7, #12]
 8008f16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	689a      	ldr	r2, [r3, #8]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	681a      	ldr	r2, [r3, #0]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	4a10      	ldr	r2, [pc, #64]	@ (8008f6c <TIM_Base_SetConfig+0x12c>)
 8008f2c:	4293      	cmp	r3, r2
 8008f2e:	d003      	beq.n	8008f38 <TIM_Base_SetConfig+0xf8>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	4a12      	ldr	r2, [pc, #72]	@ (8008f7c <TIM_Base_SetConfig+0x13c>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d103      	bne.n	8008f40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008f38:	683b      	ldr	r3, [r7, #0]
 8008f3a:	691a      	ldr	r2, [r3, #16]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2201      	movs	r2, #1
 8008f44:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	691b      	ldr	r3, [r3, #16]
 8008f4a:	f003 0301 	and.w	r3, r3, #1
 8008f4e:	2b01      	cmp	r3, #1
 8008f50:	d105      	bne.n	8008f5e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	691b      	ldr	r3, [r3, #16]
 8008f56:	f023 0201 	bic.w	r2, r3, #1
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	611a      	str	r2, [r3, #16]
  }
}
 8008f5e:	bf00      	nop
 8008f60:	3714      	adds	r7, #20
 8008f62:	46bd      	mov	sp, r7
 8008f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f68:	4770      	bx	lr
 8008f6a:	bf00      	nop
 8008f6c:	40010000 	.word	0x40010000
 8008f70:	40000400 	.word	0x40000400
 8008f74:	40000800 	.word	0x40000800
 8008f78:	40000c00 	.word	0x40000c00
 8008f7c:	40010400 	.word	0x40010400
 8008f80:	40014000 	.word	0x40014000
 8008f84:	40014400 	.word	0x40014400
 8008f88:	40014800 	.word	0x40014800
 8008f8c:	40001800 	.word	0x40001800
 8008f90:	40001c00 	.word	0x40001c00
 8008f94:	40002000 	.word	0x40002000

08008f98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b087      	sub	sp, #28
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
 8008fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6a1b      	ldr	r3, [r3, #32]
 8008fa6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6a1b      	ldr	r3, [r3, #32]
 8008fac:	f023 0201 	bic.w	r2, r3, #1
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	685b      	ldr	r3, [r3, #4]
 8008fb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	699b      	ldr	r3, [r3, #24]
 8008fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	f023 0303 	bic.w	r3, r3, #3
 8008fce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	68fa      	ldr	r2, [r7, #12]
 8008fd6:	4313      	orrs	r3, r2
 8008fd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008fda:	697b      	ldr	r3, [r7, #20]
 8008fdc:	f023 0302 	bic.w	r3, r3, #2
 8008fe0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008fe2:	683b      	ldr	r3, [r7, #0]
 8008fe4:	689b      	ldr	r3, [r3, #8]
 8008fe6:	697a      	ldr	r2, [r7, #20]
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	4a20      	ldr	r2, [pc, #128]	@ (8009070 <TIM_OC1_SetConfig+0xd8>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d003      	beq.n	8008ffc <TIM_OC1_SetConfig+0x64>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	4a1f      	ldr	r2, [pc, #124]	@ (8009074 <TIM_OC1_SetConfig+0xdc>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d10c      	bne.n	8009016 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008ffc:	697b      	ldr	r3, [r7, #20]
 8008ffe:	f023 0308 	bic.w	r3, r3, #8
 8009002:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	68db      	ldr	r3, [r3, #12]
 8009008:	697a      	ldr	r2, [r7, #20]
 800900a:	4313      	orrs	r3, r2
 800900c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800900e:	697b      	ldr	r3, [r7, #20]
 8009010:	f023 0304 	bic.w	r3, r3, #4
 8009014:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	4a15      	ldr	r2, [pc, #84]	@ (8009070 <TIM_OC1_SetConfig+0xd8>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d003      	beq.n	8009026 <TIM_OC1_SetConfig+0x8e>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	4a14      	ldr	r2, [pc, #80]	@ (8009074 <TIM_OC1_SetConfig+0xdc>)
 8009022:	4293      	cmp	r3, r2
 8009024:	d111      	bne.n	800904a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800902c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009034:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	695b      	ldr	r3, [r3, #20]
 800903a:	693a      	ldr	r2, [r7, #16]
 800903c:	4313      	orrs	r3, r2
 800903e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	699b      	ldr	r3, [r3, #24]
 8009044:	693a      	ldr	r2, [r7, #16]
 8009046:	4313      	orrs	r3, r2
 8009048:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	693a      	ldr	r2, [r7, #16]
 800904e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	68fa      	ldr	r2, [r7, #12]
 8009054:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	685a      	ldr	r2, [r3, #4]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	697a      	ldr	r2, [r7, #20]
 8009062:	621a      	str	r2, [r3, #32]
}
 8009064:	bf00      	nop
 8009066:	371c      	adds	r7, #28
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr
 8009070:	40010000 	.word	0x40010000
 8009074:	40010400 	.word	0x40010400

08009078 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009078:	b480      	push	{r7}
 800907a:	b087      	sub	sp, #28
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	6a1b      	ldr	r3, [r3, #32]
 8009086:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	6a1b      	ldr	r3, [r3, #32]
 800908c:	f023 0210 	bic.w	r2, r3, #16
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	699b      	ldr	r3, [r3, #24]
 800909e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80090a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80090ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80090b0:	683b      	ldr	r3, [r7, #0]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	021b      	lsls	r3, r3, #8
 80090b6:	68fa      	ldr	r2, [r7, #12]
 80090b8:	4313      	orrs	r3, r2
 80090ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	f023 0320 	bic.w	r3, r3, #32
 80090c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	689b      	ldr	r3, [r3, #8]
 80090c8:	011b      	lsls	r3, r3, #4
 80090ca:	697a      	ldr	r2, [r7, #20]
 80090cc:	4313      	orrs	r3, r2
 80090ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	4a22      	ldr	r2, [pc, #136]	@ (800915c <TIM_OC2_SetConfig+0xe4>)
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d003      	beq.n	80090e0 <TIM_OC2_SetConfig+0x68>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	4a21      	ldr	r2, [pc, #132]	@ (8009160 <TIM_OC2_SetConfig+0xe8>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d10d      	bne.n	80090fc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80090e0:	697b      	ldr	r3, [r7, #20]
 80090e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80090e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80090e8:	683b      	ldr	r3, [r7, #0]
 80090ea:	68db      	ldr	r3, [r3, #12]
 80090ec:	011b      	lsls	r3, r3, #4
 80090ee:	697a      	ldr	r2, [r7, #20]
 80090f0:	4313      	orrs	r3, r2
 80090f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80090fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	4a17      	ldr	r2, [pc, #92]	@ (800915c <TIM_OC2_SetConfig+0xe4>)
 8009100:	4293      	cmp	r3, r2
 8009102:	d003      	beq.n	800910c <TIM_OC2_SetConfig+0x94>
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	4a16      	ldr	r2, [pc, #88]	@ (8009160 <TIM_OC2_SetConfig+0xe8>)
 8009108:	4293      	cmp	r3, r2
 800910a:	d113      	bne.n	8009134 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009112:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800911a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	695b      	ldr	r3, [r3, #20]
 8009120:	009b      	lsls	r3, r3, #2
 8009122:	693a      	ldr	r2, [r7, #16]
 8009124:	4313      	orrs	r3, r2
 8009126:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	699b      	ldr	r3, [r3, #24]
 800912c:	009b      	lsls	r3, r3, #2
 800912e:	693a      	ldr	r2, [r7, #16]
 8009130:	4313      	orrs	r3, r2
 8009132:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	693a      	ldr	r2, [r7, #16]
 8009138:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	68fa      	ldr	r2, [r7, #12]
 800913e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009140:	683b      	ldr	r3, [r7, #0]
 8009142:	685a      	ldr	r2, [r3, #4]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	697a      	ldr	r2, [r7, #20]
 800914c:	621a      	str	r2, [r3, #32]
}
 800914e:	bf00      	nop
 8009150:	371c      	adds	r7, #28
 8009152:	46bd      	mov	sp, r7
 8009154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009158:	4770      	bx	lr
 800915a:	bf00      	nop
 800915c:	40010000 	.word	0x40010000
 8009160:	40010400 	.word	0x40010400

08009164 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009164:	b480      	push	{r7}
 8009166:	b087      	sub	sp, #28
 8009168:	af00      	add	r7, sp, #0
 800916a:	6078      	str	r0, [r7, #4]
 800916c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	6a1b      	ldr	r3, [r3, #32]
 8009172:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	6a1b      	ldr	r3, [r3, #32]
 8009178:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	69db      	ldr	r3, [r3, #28]
 800918a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009192:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	f023 0303 	bic.w	r3, r3, #3
 800919a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	68fa      	ldr	r2, [r7, #12]
 80091a2:	4313      	orrs	r3, r2
 80091a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80091ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	689b      	ldr	r3, [r3, #8]
 80091b2:	021b      	lsls	r3, r3, #8
 80091b4:	697a      	ldr	r2, [r7, #20]
 80091b6:	4313      	orrs	r3, r2
 80091b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	4a21      	ldr	r2, [pc, #132]	@ (8009244 <TIM_OC3_SetConfig+0xe0>)
 80091be:	4293      	cmp	r3, r2
 80091c0:	d003      	beq.n	80091ca <TIM_OC3_SetConfig+0x66>
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	4a20      	ldr	r2, [pc, #128]	@ (8009248 <TIM_OC3_SetConfig+0xe4>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d10d      	bne.n	80091e6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80091ca:	697b      	ldr	r3, [r7, #20]
 80091cc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80091d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80091d2:	683b      	ldr	r3, [r7, #0]
 80091d4:	68db      	ldr	r3, [r3, #12]
 80091d6:	021b      	lsls	r3, r3, #8
 80091d8:	697a      	ldr	r2, [r7, #20]
 80091da:	4313      	orrs	r3, r2
 80091dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80091e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	4a16      	ldr	r2, [pc, #88]	@ (8009244 <TIM_OC3_SetConfig+0xe0>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d003      	beq.n	80091f6 <TIM_OC3_SetConfig+0x92>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	4a15      	ldr	r2, [pc, #84]	@ (8009248 <TIM_OC3_SetConfig+0xe4>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d113      	bne.n	800921e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80091f6:	693b      	ldr	r3, [r7, #16]
 80091f8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80091fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009204:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009206:	683b      	ldr	r3, [r7, #0]
 8009208:	695b      	ldr	r3, [r3, #20]
 800920a:	011b      	lsls	r3, r3, #4
 800920c:	693a      	ldr	r2, [r7, #16]
 800920e:	4313      	orrs	r3, r2
 8009210:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	699b      	ldr	r3, [r3, #24]
 8009216:	011b      	lsls	r3, r3, #4
 8009218:	693a      	ldr	r2, [r7, #16]
 800921a:	4313      	orrs	r3, r2
 800921c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	693a      	ldr	r2, [r7, #16]
 8009222:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	68fa      	ldr	r2, [r7, #12]
 8009228:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	685a      	ldr	r2, [r3, #4]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	697a      	ldr	r2, [r7, #20]
 8009236:	621a      	str	r2, [r3, #32]
}
 8009238:	bf00      	nop
 800923a:	371c      	adds	r7, #28
 800923c:	46bd      	mov	sp, r7
 800923e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009242:	4770      	bx	lr
 8009244:	40010000 	.word	0x40010000
 8009248:	40010400 	.word	0x40010400

0800924c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800924c:	b480      	push	{r7}
 800924e:	b087      	sub	sp, #28
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6a1b      	ldr	r3, [r3, #32]
 800925a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6a1b      	ldr	r3, [r3, #32]
 8009260:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	685b      	ldr	r3, [r3, #4]
 800926c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	69db      	ldr	r3, [r3, #28]
 8009272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800927a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009282:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009284:	683b      	ldr	r3, [r7, #0]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	021b      	lsls	r3, r3, #8
 800928a:	68fa      	ldr	r2, [r7, #12]
 800928c:	4313      	orrs	r3, r2
 800928e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009296:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009298:	683b      	ldr	r3, [r7, #0]
 800929a:	689b      	ldr	r3, [r3, #8]
 800929c:	031b      	lsls	r3, r3, #12
 800929e:	693a      	ldr	r2, [r7, #16]
 80092a0:	4313      	orrs	r3, r2
 80092a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	4a12      	ldr	r2, [pc, #72]	@ (80092f0 <TIM_OC4_SetConfig+0xa4>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	d003      	beq.n	80092b4 <TIM_OC4_SetConfig+0x68>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	4a11      	ldr	r2, [pc, #68]	@ (80092f4 <TIM_OC4_SetConfig+0xa8>)
 80092b0:	4293      	cmp	r3, r2
 80092b2:	d109      	bne.n	80092c8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80092b4:	697b      	ldr	r3, [r7, #20]
 80092b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80092ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80092bc:	683b      	ldr	r3, [r7, #0]
 80092be:	695b      	ldr	r3, [r3, #20]
 80092c0:	019b      	lsls	r3, r3, #6
 80092c2:	697a      	ldr	r2, [r7, #20]
 80092c4:	4313      	orrs	r3, r2
 80092c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	697a      	ldr	r2, [r7, #20]
 80092cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	68fa      	ldr	r2, [r7, #12]
 80092d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	685a      	ldr	r2, [r3, #4]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	693a      	ldr	r2, [r7, #16]
 80092e0:	621a      	str	r2, [r3, #32]
}
 80092e2:	bf00      	nop
 80092e4:	371c      	adds	r7, #28
 80092e6:	46bd      	mov	sp, r7
 80092e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ec:	4770      	bx	lr
 80092ee:	bf00      	nop
 80092f0:	40010000 	.word	0x40010000
 80092f4:	40010400 	.word	0x40010400

080092f8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b087      	sub	sp, #28
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	60f8      	str	r0, [r7, #12]
 8009300:	60b9      	str	r1, [r7, #8]
 8009302:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	f003 031f 	and.w	r3, r3, #31
 800930a:	2201      	movs	r2, #1
 800930c:	fa02 f303 	lsl.w	r3, r2, r3
 8009310:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	6a1a      	ldr	r2, [r3, #32]
 8009316:	697b      	ldr	r3, [r7, #20]
 8009318:	43db      	mvns	r3, r3
 800931a:	401a      	ands	r2, r3
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	6a1a      	ldr	r2, [r3, #32]
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	f003 031f 	and.w	r3, r3, #31
 800932a:	6879      	ldr	r1, [r7, #4]
 800932c:	fa01 f303 	lsl.w	r3, r1, r3
 8009330:	431a      	orrs	r2, r3
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	621a      	str	r2, [r3, #32]
}
 8009336:	bf00      	nop
 8009338:	371c      	adds	r7, #28
 800933a:	46bd      	mov	sp, r7
 800933c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009340:	4770      	bx	lr
	...

08009344 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009344:	b480      	push	{r7}
 8009346:	b085      	sub	sp, #20
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
 800934c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009354:	2b01      	cmp	r3, #1
 8009356:	d101      	bne.n	800935c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009358:	2302      	movs	r3, #2
 800935a:	e05a      	b.n	8009412 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2201      	movs	r2, #1
 8009360:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2202      	movs	r2, #2
 8009368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	689b      	ldr	r3, [r3, #8]
 800937a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009382:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	68fa      	ldr	r2, [r7, #12]
 800938a:	4313      	orrs	r3, r2
 800938c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	68fa      	ldr	r2, [r7, #12]
 8009394:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4a21      	ldr	r2, [pc, #132]	@ (8009420 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d022      	beq.n	80093e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093a8:	d01d      	beq.n	80093e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	4a1d      	ldr	r2, [pc, #116]	@ (8009424 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d018      	beq.n	80093e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	4a1b      	ldr	r2, [pc, #108]	@ (8009428 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d013      	beq.n	80093e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	4a1a      	ldr	r2, [pc, #104]	@ (800942c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d00e      	beq.n	80093e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	4a18      	ldr	r2, [pc, #96]	@ (8009430 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d009      	beq.n	80093e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	4a17      	ldr	r2, [pc, #92]	@ (8009434 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80093d8:	4293      	cmp	r3, r2
 80093da:	d004      	beq.n	80093e6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	4a15      	ldr	r2, [pc, #84]	@ (8009438 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d10c      	bne.n	8009400 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80093ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	685b      	ldr	r3, [r3, #4]
 80093f2:	68ba      	ldr	r2, [r7, #8]
 80093f4:	4313      	orrs	r3, r2
 80093f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	68ba      	ldr	r2, [r7, #8]
 80093fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2201      	movs	r2, #1
 8009404:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2200      	movs	r2, #0
 800940c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009410:	2300      	movs	r3, #0
}
 8009412:	4618      	mov	r0, r3
 8009414:	3714      	adds	r7, #20
 8009416:	46bd      	mov	sp, r7
 8009418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941c:	4770      	bx	lr
 800941e:	bf00      	nop
 8009420:	40010000 	.word	0x40010000
 8009424:	40000400 	.word	0x40000400
 8009428:	40000800 	.word	0x40000800
 800942c:	40000c00 	.word	0x40000c00
 8009430:	40010400 	.word	0x40010400
 8009434:	40014000 	.word	0x40014000
 8009438:	40001800 	.word	0x40001800

0800943c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800943c:	b480      	push	{r7}
 800943e:	b083      	sub	sp, #12
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009444:	bf00      	nop
 8009446:	370c      	adds	r7, #12
 8009448:	46bd      	mov	sp, r7
 800944a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944e:	4770      	bx	lr

08009450 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009450:	b480      	push	{r7}
 8009452:	b083      	sub	sp, #12
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009458:	bf00      	nop
 800945a:	370c      	adds	r7, #12
 800945c:	46bd      	mov	sp, r7
 800945e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009462:	4770      	bx	lr

08009464 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b082      	sub	sp, #8
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d101      	bne.n	8009476 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009472:	2301      	movs	r3, #1
 8009474:	e042      	b.n	80094fc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800947c:	b2db      	uxtb	r3, r3
 800947e:	2b00      	cmp	r3, #0
 8009480:	d106      	bne.n	8009490 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2200      	movs	r2, #0
 8009486:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800948a:	6878      	ldr	r0, [r7, #4]
 800948c:	f7fa fa12 	bl	80038b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2224      	movs	r2, #36	@ 0x24
 8009494:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	68da      	ldr	r2, [r3, #12]
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80094a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f000 fcdb 	bl	8009e64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	691a      	ldr	r2, [r3, #16]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80094bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	695a      	ldr	r2, [r3, #20]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80094cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	68da      	ldr	r2, [r3, #12]
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80094dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	2200      	movs	r2, #0
 80094e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2220      	movs	r2, #32
 80094e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2220      	movs	r2, #32
 80094f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2200      	movs	r2, #0
 80094f8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80094fa:	2300      	movs	r3, #0
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3708      	adds	r7, #8
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}

08009504 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b084      	sub	sp, #16
 8009508:	af00      	add	r7, sp, #0
 800950a:	60f8      	str	r0, [r7, #12]
 800950c:	60b9      	str	r1, [r7, #8]
 800950e:	4613      	mov	r3, r2
 8009510:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009518:	b2db      	uxtb	r3, r3
 800951a:	2b20      	cmp	r3, #32
 800951c:	d112      	bne.n	8009544 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d002      	beq.n	800952a <HAL_UART_Receive_IT+0x26>
 8009524:	88fb      	ldrh	r3, [r7, #6]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d101      	bne.n	800952e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800952a:	2301      	movs	r3, #1
 800952c:	e00b      	b.n	8009546 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	2200      	movs	r2, #0
 8009532:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009534:	88fb      	ldrh	r3, [r7, #6]
 8009536:	461a      	mov	r2, r3
 8009538:	68b9      	ldr	r1, [r7, #8]
 800953a:	68f8      	ldr	r0, [r7, #12]
 800953c:	f000 faba 	bl	8009ab4 <UART_Start_Receive_IT>
 8009540:	4603      	mov	r3, r0
 8009542:	e000      	b.n	8009546 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8009544:	2302      	movs	r3, #2
  }
}
 8009546:	4618      	mov	r0, r3
 8009548:	3710      	adds	r7, #16
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}
	...

08009550 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b0ba      	sub	sp, #232	@ 0xe8
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	68db      	ldr	r3, [r3, #12]
 8009568:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	695b      	ldr	r3, [r3, #20]
 8009572:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8009576:	2300      	movs	r3, #0
 8009578:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800957c:	2300      	movs	r3, #0
 800957e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009586:	f003 030f 	and.w	r3, r3, #15
 800958a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800958e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009592:	2b00      	cmp	r3, #0
 8009594:	d10f      	bne.n	80095b6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800959a:	f003 0320 	and.w	r3, r3, #32
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d009      	beq.n	80095b6 <HAL_UART_IRQHandler+0x66>
 80095a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095a6:	f003 0320 	and.w	r3, r3, #32
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d003      	beq.n	80095b6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f000 fb99 	bl	8009ce6 <UART_Receive_IT>
      return;
 80095b4:	e25b      	b.n	8009a6e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80095b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	f000 80de 	beq.w	800977c <HAL_UART_IRQHandler+0x22c>
 80095c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80095c4:	f003 0301 	and.w	r3, r3, #1
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d106      	bne.n	80095da <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80095cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095d0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	f000 80d1 	beq.w	800977c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80095da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095de:	f003 0301 	and.w	r3, r3, #1
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d00b      	beq.n	80095fe <HAL_UART_IRQHandler+0xae>
 80095e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d005      	beq.n	80095fe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095f6:	f043 0201 	orr.w	r2, r3, #1
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80095fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009602:	f003 0304 	and.w	r3, r3, #4
 8009606:	2b00      	cmp	r3, #0
 8009608:	d00b      	beq.n	8009622 <HAL_UART_IRQHandler+0xd2>
 800960a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800960e:	f003 0301 	and.w	r3, r3, #1
 8009612:	2b00      	cmp	r3, #0
 8009614:	d005      	beq.n	8009622 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800961a:	f043 0202 	orr.w	r2, r3, #2
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009626:	f003 0302 	and.w	r3, r3, #2
 800962a:	2b00      	cmp	r3, #0
 800962c:	d00b      	beq.n	8009646 <HAL_UART_IRQHandler+0xf6>
 800962e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009632:	f003 0301 	and.w	r3, r3, #1
 8009636:	2b00      	cmp	r3, #0
 8009638:	d005      	beq.n	8009646 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800963e:	f043 0204 	orr.w	r2, r3, #4
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009646:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800964a:	f003 0308 	and.w	r3, r3, #8
 800964e:	2b00      	cmp	r3, #0
 8009650:	d011      	beq.n	8009676 <HAL_UART_IRQHandler+0x126>
 8009652:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009656:	f003 0320 	and.w	r3, r3, #32
 800965a:	2b00      	cmp	r3, #0
 800965c:	d105      	bne.n	800966a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800965e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009662:	f003 0301 	and.w	r3, r3, #1
 8009666:	2b00      	cmp	r3, #0
 8009668:	d005      	beq.n	8009676 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800966e:	f043 0208 	orr.w	r2, r3, #8
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800967a:	2b00      	cmp	r3, #0
 800967c:	f000 81f2 	beq.w	8009a64 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009684:	f003 0320 	and.w	r3, r3, #32
 8009688:	2b00      	cmp	r3, #0
 800968a:	d008      	beq.n	800969e <HAL_UART_IRQHandler+0x14e>
 800968c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009690:	f003 0320 	and.w	r3, r3, #32
 8009694:	2b00      	cmp	r3, #0
 8009696:	d002      	beq.n	800969e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f000 fb24 	bl	8009ce6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	695b      	ldr	r3, [r3, #20]
 80096a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096a8:	2b40      	cmp	r3, #64	@ 0x40
 80096aa:	bf0c      	ite	eq
 80096ac:	2301      	moveq	r3, #1
 80096ae:	2300      	movne	r3, #0
 80096b0:	b2db      	uxtb	r3, r3
 80096b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096ba:	f003 0308 	and.w	r3, r3, #8
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d103      	bne.n	80096ca <HAL_UART_IRQHandler+0x17a>
 80096c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	d04f      	beq.n	800976a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80096ca:	6878      	ldr	r0, [r7, #4]
 80096cc:	f000 fa2c 	bl	8009b28 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	695b      	ldr	r3, [r3, #20]
 80096d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096da:	2b40      	cmp	r3, #64	@ 0x40
 80096dc:	d141      	bne.n	8009762 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	3314      	adds	r3, #20
 80096e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80096ec:	e853 3f00 	ldrex	r3, [r3]
 80096f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80096f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80096f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80096fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	3314      	adds	r3, #20
 8009706:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800970a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800970e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009712:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8009716:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800971a:	e841 2300 	strex	r3, r2, [r1]
 800971e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8009722:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8009726:	2b00      	cmp	r3, #0
 8009728:	d1d9      	bne.n	80096de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800972e:	2b00      	cmp	r3, #0
 8009730:	d013      	beq.n	800975a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009736:	4a7e      	ldr	r2, [pc, #504]	@ (8009930 <HAL_UART_IRQHandler+0x3e0>)
 8009738:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800973e:	4618      	mov	r0, r3
 8009740:	f7fb f8de 	bl	8004900 <HAL_DMA_Abort_IT>
 8009744:	4603      	mov	r3, r0
 8009746:	2b00      	cmp	r3, #0
 8009748:	d016      	beq.n	8009778 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800974e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009750:	687a      	ldr	r2, [r7, #4]
 8009752:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8009754:	4610      	mov	r0, r2
 8009756:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009758:	e00e      	b.n	8009778 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f000 f994 	bl	8009a88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009760:	e00a      	b.n	8009778 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f000 f990 	bl	8009a88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009768:	e006      	b.n	8009778 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f000 f98c 	bl	8009a88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2200      	movs	r2, #0
 8009774:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8009776:	e175      	b.n	8009a64 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009778:	bf00      	nop
    return;
 800977a:	e173      	b.n	8009a64 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009780:	2b01      	cmp	r3, #1
 8009782:	f040 814f 	bne.w	8009a24 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800978a:	f003 0310 	and.w	r3, r3, #16
 800978e:	2b00      	cmp	r3, #0
 8009790:	f000 8148 	beq.w	8009a24 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009798:	f003 0310 	and.w	r3, r3, #16
 800979c:	2b00      	cmp	r3, #0
 800979e:	f000 8141 	beq.w	8009a24 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80097a2:	2300      	movs	r3, #0
 80097a4:	60bb      	str	r3, [r7, #8]
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	60bb      	str	r3, [r7, #8]
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	60bb      	str	r3, [r7, #8]
 80097b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	695b      	ldr	r3, [r3, #20]
 80097be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80097c2:	2b40      	cmp	r3, #64	@ 0x40
 80097c4:	f040 80b6 	bne.w	8009934 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	685b      	ldr	r3, [r3, #4]
 80097d0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80097d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80097d8:	2b00      	cmp	r3, #0
 80097da:	f000 8145 	beq.w	8009a68 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80097e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80097e6:	429a      	cmp	r2, r3
 80097e8:	f080 813e 	bcs.w	8009a68 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80097f2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80097f8:	69db      	ldr	r3, [r3, #28]
 80097fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80097fe:	f000 8088 	beq.w	8009912 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	330c      	adds	r3, #12
 8009808:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800980c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009810:	e853 3f00 	ldrex	r3, [r3]
 8009814:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009818:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800981c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009820:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	330c      	adds	r3, #12
 800982a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800982e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009832:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009836:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800983a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800983e:	e841 2300 	strex	r3, r2, [r1]
 8009842:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8009846:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800984a:	2b00      	cmp	r3, #0
 800984c:	d1d9      	bne.n	8009802 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	3314      	adds	r3, #20
 8009854:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009856:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009858:	e853 3f00 	ldrex	r3, [r3]
 800985c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800985e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009860:	f023 0301 	bic.w	r3, r3, #1
 8009864:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	3314      	adds	r3, #20
 800986e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009872:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8009876:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009878:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800987a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800987e:	e841 2300 	strex	r3, r2, [r1]
 8009882:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009884:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009886:	2b00      	cmp	r3, #0
 8009888:	d1e1      	bne.n	800984e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	3314      	adds	r3, #20
 8009890:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009892:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009894:	e853 3f00 	ldrex	r3, [r3]
 8009898:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800989a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800989c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80098a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	3314      	adds	r3, #20
 80098aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80098ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80098b0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098b2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80098b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80098b6:	e841 2300 	strex	r3, r2, [r1]
 80098ba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80098bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d1e3      	bne.n	800988a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	2220      	movs	r2, #32
 80098c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2200      	movs	r2, #0
 80098ce:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	330c      	adds	r3, #12
 80098d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80098da:	e853 3f00 	ldrex	r3, [r3]
 80098de:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80098e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80098e2:	f023 0310 	bic.w	r3, r3, #16
 80098e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	330c      	adds	r3, #12
 80098f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80098f4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80098f6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098f8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80098fa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80098fc:	e841 2300 	strex	r3, r2, [r1]
 8009900:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009902:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009904:	2b00      	cmp	r3, #0
 8009906:	d1e3      	bne.n	80098d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800990c:	4618      	mov	r0, r3
 800990e:	f7fa ff87 	bl	8004820 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2202      	movs	r2, #2
 8009916:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009920:	b29b      	uxth	r3, r3
 8009922:	1ad3      	subs	r3, r2, r3
 8009924:	b29b      	uxth	r3, r3
 8009926:	4619      	mov	r1, r3
 8009928:	6878      	ldr	r0, [r7, #4]
 800992a:	f000 f8b7 	bl	8009a9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800992e:	e09b      	b.n	8009a68 <HAL_UART_IRQHandler+0x518>
 8009930:	08009bef 	.word	0x08009bef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800993c:	b29b      	uxth	r3, r3
 800993e:	1ad3      	subs	r3, r2, r3
 8009940:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009948:	b29b      	uxth	r3, r3
 800994a:	2b00      	cmp	r3, #0
 800994c:	f000 808e 	beq.w	8009a6c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009950:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009954:	2b00      	cmp	r3, #0
 8009956:	f000 8089 	beq.w	8009a6c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	330c      	adds	r3, #12
 8009960:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009964:	e853 3f00 	ldrex	r3, [r3]
 8009968:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800996a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800996c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009970:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	330c      	adds	r3, #12
 800997a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800997e:	647a      	str	r2, [r7, #68]	@ 0x44
 8009980:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009982:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009984:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009986:	e841 2300 	strex	r3, r2, [r1]
 800998a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800998c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800998e:	2b00      	cmp	r3, #0
 8009990:	d1e3      	bne.n	800995a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	3314      	adds	r3, #20
 8009998:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800999a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800999c:	e853 3f00 	ldrex	r3, [r3]
 80099a0:	623b      	str	r3, [r7, #32]
   return(result);
 80099a2:	6a3b      	ldr	r3, [r7, #32]
 80099a4:	f023 0301 	bic.w	r3, r3, #1
 80099a8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	3314      	adds	r3, #20
 80099b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80099b6:	633a      	str	r2, [r7, #48]	@ 0x30
 80099b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80099bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80099be:	e841 2300 	strex	r3, r2, [r1]
 80099c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80099c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d1e3      	bne.n	8009992 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2220      	movs	r2, #32
 80099ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	2200      	movs	r2, #0
 80099d6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	330c      	adds	r3, #12
 80099de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e0:	693b      	ldr	r3, [r7, #16]
 80099e2:	e853 3f00 	ldrex	r3, [r3]
 80099e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	f023 0310 	bic.w	r3, r3, #16
 80099ee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	330c      	adds	r3, #12
 80099f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80099fc:	61fa      	str	r2, [r7, #28]
 80099fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a00:	69b9      	ldr	r1, [r7, #24]
 8009a02:	69fa      	ldr	r2, [r7, #28]
 8009a04:	e841 2300 	strex	r3, r2, [r1]
 8009a08:	617b      	str	r3, [r7, #20]
   return(result);
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d1e3      	bne.n	80099d8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2202      	movs	r2, #2
 8009a14:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009a16:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009a1a:	4619      	mov	r1, r3
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f000 f83d 	bl	8009a9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009a22:	e023      	b.n	8009a6c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009a24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d009      	beq.n	8009a44 <HAL_UART_IRQHandler+0x4f4>
 8009a30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d003      	beq.n	8009a44 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009a3c:	6878      	ldr	r0, [r7, #4]
 8009a3e:	f000 f8ea 	bl	8009c16 <UART_Transmit_IT>
    return;
 8009a42:	e014      	b.n	8009a6e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009a44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009a48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d00e      	beq.n	8009a6e <HAL_UART_IRQHandler+0x51e>
 8009a50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009a54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d008      	beq.n	8009a6e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009a5c:	6878      	ldr	r0, [r7, #4]
 8009a5e:	f000 f92a 	bl	8009cb6 <UART_EndTransmit_IT>
    return;
 8009a62:	e004      	b.n	8009a6e <HAL_UART_IRQHandler+0x51e>
    return;
 8009a64:	bf00      	nop
 8009a66:	e002      	b.n	8009a6e <HAL_UART_IRQHandler+0x51e>
      return;
 8009a68:	bf00      	nop
 8009a6a:	e000      	b.n	8009a6e <HAL_UART_IRQHandler+0x51e>
      return;
 8009a6c:	bf00      	nop
  }
}
 8009a6e:	37e8      	adds	r7, #232	@ 0xe8
 8009a70:	46bd      	mov	sp, r7
 8009a72:	bd80      	pop	{r7, pc}

08009a74 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009a74:	b480      	push	{r7}
 8009a76:	b083      	sub	sp, #12
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009a7c:	bf00      	nop
 8009a7e:	370c      	adds	r7, #12
 8009a80:	46bd      	mov	sp, r7
 8009a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a86:	4770      	bx	lr

08009a88 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b083      	sub	sp, #12
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009a90:	bf00      	nop
 8009a92:	370c      	adds	r7, #12
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr

08009a9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009a9c:	b480      	push	{r7}
 8009a9e:	b083      	sub	sp, #12
 8009aa0:	af00      	add	r7, sp, #0
 8009aa2:	6078      	str	r0, [r7, #4]
 8009aa4:	460b      	mov	r3, r1
 8009aa6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009aa8:	bf00      	nop
 8009aaa:	370c      	adds	r7, #12
 8009aac:	46bd      	mov	sp, r7
 8009aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab2:	4770      	bx	lr

08009ab4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b085      	sub	sp, #20
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	60f8      	str	r0, [r7, #12]
 8009abc:	60b9      	str	r1, [r7, #8]
 8009abe:	4613      	mov	r3, r2
 8009ac0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	68ba      	ldr	r2, [r7, #8]
 8009ac6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	88fa      	ldrh	r2, [r7, #6]
 8009acc:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	88fa      	ldrh	r2, [r7, #6]
 8009ad2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	2200      	movs	r2, #0
 8009ad8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	2222      	movs	r2, #34	@ 0x22
 8009ade:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	691b      	ldr	r3, [r3, #16]
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	d007      	beq.n	8009afa <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	68da      	ldr	r2, [r3, #12]
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009af8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	695a      	ldr	r2, [r3, #20]
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	f042 0201 	orr.w	r2, r2, #1
 8009b08:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	68da      	ldr	r2, [r3, #12]
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f042 0220 	orr.w	r2, r2, #32
 8009b18:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009b1a:	2300      	movs	r3, #0
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3714      	adds	r7, #20
 8009b20:	46bd      	mov	sp, r7
 8009b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b26:	4770      	bx	lr

08009b28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b095      	sub	sp, #84	@ 0x54
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	330c      	adds	r3, #12
 8009b36:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009b3a:	e853 3f00 	ldrex	r3, [r3]
 8009b3e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009b40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009b46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	330c      	adds	r3, #12
 8009b4e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009b50:	643a      	str	r2, [r7, #64]	@ 0x40
 8009b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b54:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009b56:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009b58:	e841 2300 	strex	r3, r2, [r1]
 8009b5c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d1e5      	bne.n	8009b30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	3314      	adds	r3, #20
 8009b6a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b6c:	6a3b      	ldr	r3, [r7, #32]
 8009b6e:	e853 3f00 	ldrex	r3, [r3]
 8009b72:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b74:	69fb      	ldr	r3, [r7, #28]
 8009b76:	f023 0301 	bic.w	r3, r3, #1
 8009b7a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	3314      	adds	r3, #20
 8009b82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009b84:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009b86:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009b8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b8c:	e841 2300 	strex	r3, r2, [r1]
 8009b90:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009b92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d1e5      	bne.n	8009b64 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b9c:	2b01      	cmp	r3, #1
 8009b9e:	d119      	bne.n	8009bd4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	330c      	adds	r3, #12
 8009ba6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	e853 3f00 	ldrex	r3, [r3]
 8009bae:	60bb      	str	r3, [r7, #8]
   return(result);
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	f023 0310 	bic.w	r3, r3, #16
 8009bb6:	647b      	str	r3, [r7, #68]	@ 0x44
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	330c      	adds	r3, #12
 8009bbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009bc0:	61ba      	str	r2, [r7, #24]
 8009bc2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bc4:	6979      	ldr	r1, [r7, #20]
 8009bc6:	69ba      	ldr	r2, [r7, #24]
 8009bc8:	e841 2300 	strex	r3, r2, [r1]
 8009bcc:	613b      	str	r3, [r7, #16]
   return(result);
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d1e5      	bne.n	8009ba0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2220      	movs	r2, #32
 8009bd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	2200      	movs	r2, #0
 8009be0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009be2:	bf00      	nop
 8009be4:	3754      	adds	r7, #84	@ 0x54
 8009be6:	46bd      	mov	sp, r7
 8009be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bec:	4770      	bx	lr

08009bee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009bee:	b580      	push	{r7, lr}
 8009bf0:	b084      	sub	sp, #16
 8009bf2:	af00      	add	r7, sp, #0
 8009bf4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bfa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	2200      	movs	r2, #0
 8009c06:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009c08:	68f8      	ldr	r0, [r7, #12]
 8009c0a:	f7ff ff3d 	bl	8009a88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c0e:	bf00      	nop
 8009c10:	3710      	adds	r7, #16
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}

08009c16 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009c16:	b480      	push	{r7}
 8009c18:	b085      	sub	sp, #20
 8009c1a:	af00      	add	r7, sp, #0
 8009c1c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009c24:	b2db      	uxtb	r3, r3
 8009c26:	2b21      	cmp	r3, #33	@ 0x21
 8009c28:	d13e      	bne.n	8009ca8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	689b      	ldr	r3, [r3, #8]
 8009c2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009c32:	d114      	bne.n	8009c5e <UART_Transmit_IT+0x48>
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	691b      	ldr	r3, [r3, #16]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d110      	bne.n	8009c5e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6a1b      	ldr	r3, [r3, #32]
 8009c40:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	881b      	ldrh	r3, [r3, #0]
 8009c46:	461a      	mov	r2, r3
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009c50:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	6a1b      	ldr	r3, [r3, #32]
 8009c56:	1c9a      	adds	r2, r3, #2
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	621a      	str	r2, [r3, #32]
 8009c5c:	e008      	b.n	8009c70 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	6a1b      	ldr	r3, [r3, #32]
 8009c62:	1c59      	adds	r1, r3, #1
 8009c64:	687a      	ldr	r2, [r7, #4]
 8009c66:	6211      	str	r1, [r2, #32]
 8009c68:	781a      	ldrb	r2, [r3, #0]
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009c74:	b29b      	uxth	r3, r3
 8009c76:	3b01      	subs	r3, #1
 8009c78:	b29b      	uxth	r3, r3
 8009c7a:	687a      	ldr	r2, [r7, #4]
 8009c7c:	4619      	mov	r1, r3
 8009c7e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d10f      	bne.n	8009ca4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	68da      	ldr	r2, [r3, #12]
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009c92:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	68da      	ldr	r2, [r3, #12]
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009ca2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	e000      	b.n	8009caa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009ca8:	2302      	movs	r3, #2
  }
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3714      	adds	r7, #20
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb4:	4770      	bx	lr

08009cb6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009cb6:	b580      	push	{r7, lr}
 8009cb8:	b082      	sub	sp, #8
 8009cba:	af00      	add	r7, sp, #0
 8009cbc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	68da      	ldr	r2, [r3, #12]
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009ccc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2220      	movs	r2, #32
 8009cd2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009cd6:	6878      	ldr	r0, [r7, #4]
 8009cd8:	f7ff fecc 	bl	8009a74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009cdc:	2300      	movs	r3, #0
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3708      	adds	r7, #8
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}

08009ce6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009ce6:	b580      	push	{r7, lr}
 8009ce8:	b08c      	sub	sp, #48	@ 0x30
 8009cea:	af00      	add	r7, sp, #0
 8009cec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009cf4:	b2db      	uxtb	r3, r3
 8009cf6:	2b22      	cmp	r3, #34	@ 0x22
 8009cf8:	f040 80ae 	bne.w	8009e58 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	689b      	ldr	r3, [r3, #8]
 8009d00:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d04:	d117      	bne.n	8009d36 <UART_Receive_IT+0x50>
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	691b      	ldr	r3, [r3, #16]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d113      	bne.n	8009d36 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d16:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	685b      	ldr	r3, [r3, #4]
 8009d1e:	b29b      	uxth	r3, r3
 8009d20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009d24:	b29a      	uxth	r2, r3
 8009d26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d28:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d2e:	1c9a      	adds	r2, r3, #2
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	629a      	str	r2, [r3, #40]	@ 0x28
 8009d34:	e026      	b.n	8009d84 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	689b      	ldr	r3, [r3, #8]
 8009d44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009d48:	d007      	beq.n	8009d5a <UART_Receive_IT+0x74>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	689b      	ldr	r3, [r3, #8]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d10a      	bne.n	8009d68 <UART_Receive_IT+0x82>
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	691b      	ldr	r3, [r3, #16]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d106      	bne.n	8009d68 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	685b      	ldr	r3, [r3, #4]
 8009d60:	b2da      	uxtb	r2, r3
 8009d62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d64:	701a      	strb	r2, [r3, #0]
 8009d66:	e008      	b.n	8009d7a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	b2db      	uxtb	r3, r3
 8009d70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009d74:	b2da      	uxtb	r2, r3
 8009d76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d78:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d7e:	1c5a      	adds	r2, r3, #1
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009d88:	b29b      	uxth	r3, r3
 8009d8a:	3b01      	subs	r3, #1
 8009d8c:	b29b      	uxth	r3, r3
 8009d8e:	687a      	ldr	r2, [r7, #4]
 8009d90:	4619      	mov	r1, r3
 8009d92:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d15d      	bne.n	8009e54 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	68da      	ldr	r2, [r3, #12]
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	f022 0220 	bic.w	r2, r2, #32
 8009da6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	68da      	ldr	r2, [r3, #12]
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009db6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	695a      	ldr	r2, [r3, #20]
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f022 0201 	bic.w	r2, r2, #1
 8009dc6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	2220      	movs	r2, #32
 8009dcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009dda:	2b01      	cmp	r3, #1
 8009ddc:	d135      	bne.n	8009e4a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2200      	movs	r2, #0
 8009de2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	330c      	adds	r3, #12
 8009dea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dec:	697b      	ldr	r3, [r7, #20]
 8009dee:	e853 3f00 	ldrex	r3, [r3]
 8009df2:	613b      	str	r3, [r7, #16]
   return(result);
 8009df4:	693b      	ldr	r3, [r7, #16]
 8009df6:	f023 0310 	bic.w	r3, r3, #16
 8009dfa:	627b      	str	r3, [r7, #36]	@ 0x24
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	330c      	adds	r3, #12
 8009e02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e04:	623a      	str	r2, [r7, #32]
 8009e06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e08:	69f9      	ldr	r1, [r7, #28]
 8009e0a:	6a3a      	ldr	r2, [r7, #32]
 8009e0c:	e841 2300 	strex	r3, r2, [r1]
 8009e10:	61bb      	str	r3, [r7, #24]
   return(result);
 8009e12:	69bb      	ldr	r3, [r7, #24]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d1e5      	bne.n	8009de4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f003 0310 	and.w	r3, r3, #16
 8009e22:	2b10      	cmp	r3, #16
 8009e24:	d10a      	bne.n	8009e3c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009e26:	2300      	movs	r3, #0
 8009e28:	60fb      	str	r3, [r7, #12]
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	60fb      	str	r3, [r7, #12]
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	685b      	ldr	r3, [r3, #4]
 8009e38:	60fb      	str	r3, [r7, #12]
 8009e3a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009e40:	4619      	mov	r1, r3
 8009e42:	6878      	ldr	r0, [r7, #4]
 8009e44:	f7ff fe2a 	bl	8009a9c <HAL_UARTEx_RxEventCallback>
 8009e48:	e002      	b.n	8009e50 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f7f7 f93e 	bl	80010cc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009e50:	2300      	movs	r3, #0
 8009e52:	e002      	b.n	8009e5a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009e54:	2300      	movs	r3, #0
 8009e56:	e000      	b.n	8009e5a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009e58:	2302      	movs	r3, #2
  }
}
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	3730      	adds	r7, #48	@ 0x30
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}
	...

08009e64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009e64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009e68:	b0c0      	sub	sp, #256	@ 0x100
 8009e6a:	af00      	add	r7, sp, #0
 8009e6c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	691b      	ldr	r3, [r3, #16]
 8009e78:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e80:	68d9      	ldr	r1, [r3, #12]
 8009e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e86:	681a      	ldr	r2, [r3, #0]
 8009e88:	ea40 0301 	orr.w	r3, r0, r1
 8009e8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e92:	689a      	ldr	r2, [r3, #8]
 8009e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009e98:	691b      	ldr	r3, [r3, #16]
 8009e9a:	431a      	orrs	r2, r3
 8009e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ea0:	695b      	ldr	r3, [r3, #20]
 8009ea2:	431a      	orrs	r2, r3
 8009ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ea8:	69db      	ldr	r3, [r3, #28]
 8009eaa:	4313      	orrs	r3, r2
 8009eac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	68db      	ldr	r3, [r3, #12]
 8009eb8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009ebc:	f021 010c 	bic.w	r1, r1, #12
 8009ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ec4:	681a      	ldr	r2, [r3, #0]
 8009ec6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009eca:	430b      	orrs	r3, r1
 8009ecc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	695b      	ldr	r3, [r3, #20]
 8009ed6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ede:	6999      	ldr	r1, [r3, #24]
 8009ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ee4:	681a      	ldr	r2, [r3, #0]
 8009ee6:	ea40 0301 	orr.w	r3, r0, r1
 8009eea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ef0:	681a      	ldr	r2, [r3, #0]
 8009ef2:	4b8f      	ldr	r3, [pc, #572]	@ (800a130 <UART_SetConfig+0x2cc>)
 8009ef4:	429a      	cmp	r2, r3
 8009ef6:	d005      	beq.n	8009f04 <UART_SetConfig+0xa0>
 8009ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009efc:	681a      	ldr	r2, [r3, #0]
 8009efe:	4b8d      	ldr	r3, [pc, #564]	@ (800a134 <UART_SetConfig+0x2d0>)
 8009f00:	429a      	cmp	r2, r3
 8009f02:	d104      	bne.n	8009f0e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009f04:	f7fe f824 	bl	8007f50 <HAL_RCC_GetPCLK2Freq>
 8009f08:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009f0c:	e003      	b.n	8009f16 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009f0e:	f7fe f80b 	bl	8007f28 <HAL_RCC_GetPCLK1Freq>
 8009f12:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f1a:	69db      	ldr	r3, [r3, #28]
 8009f1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009f20:	f040 810c 	bne.w	800a13c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009f24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009f28:	2200      	movs	r2, #0
 8009f2a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009f2e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009f32:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009f36:	4622      	mov	r2, r4
 8009f38:	462b      	mov	r3, r5
 8009f3a:	1891      	adds	r1, r2, r2
 8009f3c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009f3e:	415b      	adcs	r3, r3
 8009f40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009f42:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009f46:	4621      	mov	r1, r4
 8009f48:	eb12 0801 	adds.w	r8, r2, r1
 8009f4c:	4629      	mov	r1, r5
 8009f4e:	eb43 0901 	adc.w	r9, r3, r1
 8009f52:	f04f 0200 	mov.w	r2, #0
 8009f56:	f04f 0300 	mov.w	r3, #0
 8009f5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009f5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009f62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009f66:	4690      	mov	r8, r2
 8009f68:	4699      	mov	r9, r3
 8009f6a:	4623      	mov	r3, r4
 8009f6c:	eb18 0303 	adds.w	r3, r8, r3
 8009f70:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009f74:	462b      	mov	r3, r5
 8009f76:	eb49 0303 	adc.w	r3, r9, r3
 8009f7a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8009f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f82:	685b      	ldr	r3, [r3, #4]
 8009f84:	2200      	movs	r2, #0
 8009f86:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009f8a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009f8e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009f92:	460b      	mov	r3, r1
 8009f94:	18db      	adds	r3, r3, r3
 8009f96:	653b      	str	r3, [r7, #80]	@ 0x50
 8009f98:	4613      	mov	r3, r2
 8009f9a:	eb42 0303 	adc.w	r3, r2, r3
 8009f9e:	657b      	str	r3, [r7, #84]	@ 0x54
 8009fa0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009fa4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009fa8:	f7f6 fde0 	bl	8000b6c <__aeabi_uldivmod>
 8009fac:	4602      	mov	r2, r0
 8009fae:	460b      	mov	r3, r1
 8009fb0:	4b61      	ldr	r3, [pc, #388]	@ (800a138 <UART_SetConfig+0x2d4>)
 8009fb2:	fba3 2302 	umull	r2, r3, r3, r2
 8009fb6:	095b      	lsrs	r3, r3, #5
 8009fb8:	011c      	lsls	r4, r3, #4
 8009fba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009fbe:	2200      	movs	r2, #0
 8009fc0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009fc4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009fc8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009fcc:	4642      	mov	r2, r8
 8009fce:	464b      	mov	r3, r9
 8009fd0:	1891      	adds	r1, r2, r2
 8009fd2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009fd4:	415b      	adcs	r3, r3
 8009fd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009fd8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009fdc:	4641      	mov	r1, r8
 8009fde:	eb12 0a01 	adds.w	sl, r2, r1
 8009fe2:	4649      	mov	r1, r9
 8009fe4:	eb43 0b01 	adc.w	fp, r3, r1
 8009fe8:	f04f 0200 	mov.w	r2, #0
 8009fec:	f04f 0300 	mov.w	r3, #0
 8009ff0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009ff4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009ff8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009ffc:	4692      	mov	sl, r2
 8009ffe:	469b      	mov	fp, r3
 800a000:	4643      	mov	r3, r8
 800a002:	eb1a 0303 	adds.w	r3, sl, r3
 800a006:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a00a:	464b      	mov	r3, r9
 800a00c:	eb4b 0303 	adc.w	r3, fp, r3
 800a010:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a018:	685b      	ldr	r3, [r3, #4]
 800a01a:	2200      	movs	r2, #0
 800a01c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a020:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a024:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a028:	460b      	mov	r3, r1
 800a02a:	18db      	adds	r3, r3, r3
 800a02c:	643b      	str	r3, [r7, #64]	@ 0x40
 800a02e:	4613      	mov	r3, r2
 800a030:	eb42 0303 	adc.w	r3, r2, r3
 800a034:	647b      	str	r3, [r7, #68]	@ 0x44
 800a036:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a03a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a03e:	f7f6 fd95 	bl	8000b6c <__aeabi_uldivmod>
 800a042:	4602      	mov	r2, r0
 800a044:	460b      	mov	r3, r1
 800a046:	4611      	mov	r1, r2
 800a048:	4b3b      	ldr	r3, [pc, #236]	@ (800a138 <UART_SetConfig+0x2d4>)
 800a04a:	fba3 2301 	umull	r2, r3, r3, r1
 800a04e:	095b      	lsrs	r3, r3, #5
 800a050:	2264      	movs	r2, #100	@ 0x64
 800a052:	fb02 f303 	mul.w	r3, r2, r3
 800a056:	1acb      	subs	r3, r1, r3
 800a058:	00db      	lsls	r3, r3, #3
 800a05a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a05e:	4b36      	ldr	r3, [pc, #216]	@ (800a138 <UART_SetConfig+0x2d4>)
 800a060:	fba3 2302 	umull	r2, r3, r3, r2
 800a064:	095b      	lsrs	r3, r3, #5
 800a066:	005b      	lsls	r3, r3, #1
 800a068:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a06c:	441c      	add	r4, r3
 800a06e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a072:	2200      	movs	r2, #0
 800a074:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a078:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a07c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a080:	4642      	mov	r2, r8
 800a082:	464b      	mov	r3, r9
 800a084:	1891      	adds	r1, r2, r2
 800a086:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a088:	415b      	adcs	r3, r3
 800a08a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a08c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a090:	4641      	mov	r1, r8
 800a092:	1851      	adds	r1, r2, r1
 800a094:	6339      	str	r1, [r7, #48]	@ 0x30
 800a096:	4649      	mov	r1, r9
 800a098:	414b      	adcs	r3, r1
 800a09a:	637b      	str	r3, [r7, #52]	@ 0x34
 800a09c:	f04f 0200 	mov.w	r2, #0
 800a0a0:	f04f 0300 	mov.w	r3, #0
 800a0a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a0a8:	4659      	mov	r1, fp
 800a0aa:	00cb      	lsls	r3, r1, #3
 800a0ac:	4651      	mov	r1, sl
 800a0ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a0b2:	4651      	mov	r1, sl
 800a0b4:	00ca      	lsls	r2, r1, #3
 800a0b6:	4610      	mov	r0, r2
 800a0b8:	4619      	mov	r1, r3
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	4642      	mov	r2, r8
 800a0be:	189b      	adds	r3, r3, r2
 800a0c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a0c4:	464b      	mov	r3, r9
 800a0c6:	460a      	mov	r2, r1
 800a0c8:	eb42 0303 	adc.w	r3, r2, r3
 800a0cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a0d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0d4:	685b      	ldr	r3, [r3, #4]
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a0dc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a0e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a0e4:	460b      	mov	r3, r1
 800a0e6:	18db      	adds	r3, r3, r3
 800a0e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a0ea:	4613      	mov	r3, r2
 800a0ec:	eb42 0303 	adc.w	r3, r2, r3
 800a0f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a0f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a0f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a0fa:	f7f6 fd37 	bl	8000b6c <__aeabi_uldivmod>
 800a0fe:	4602      	mov	r2, r0
 800a100:	460b      	mov	r3, r1
 800a102:	4b0d      	ldr	r3, [pc, #52]	@ (800a138 <UART_SetConfig+0x2d4>)
 800a104:	fba3 1302 	umull	r1, r3, r3, r2
 800a108:	095b      	lsrs	r3, r3, #5
 800a10a:	2164      	movs	r1, #100	@ 0x64
 800a10c:	fb01 f303 	mul.w	r3, r1, r3
 800a110:	1ad3      	subs	r3, r2, r3
 800a112:	00db      	lsls	r3, r3, #3
 800a114:	3332      	adds	r3, #50	@ 0x32
 800a116:	4a08      	ldr	r2, [pc, #32]	@ (800a138 <UART_SetConfig+0x2d4>)
 800a118:	fba2 2303 	umull	r2, r3, r2, r3
 800a11c:	095b      	lsrs	r3, r3, #5
 800a11e:	f003 0207 	and.w	r2, r3, #7
 800a122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	4422      	add	r2, r4
 800a12a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a12c:	e106      	b.n	800a33c <UART_SetConfig+0x4d8>
 800a12e:	bf00      	nop
 800a130:	40011000 	.word	0x40011000
 800a134:	40011400 	.word	0x40011400
 800a138:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a13c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a140:	2200      	movs	r2, #0
 800a142:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a146:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a14a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a14e:	4642      	mov	r2, r8
 800a150:	464b      	mov	r3, r9
 800a152:	1891      	adds	r1, r2, r2
 800a154:	6239      	str	r1, [r7, #32]
 800a156:	415b      	adcs	r3, r3
 800a158:	627b      	str	r3, [r7, #36]	@ 0x24
 800a15a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a15e:	4641      	mov	r1, r8
 800a160:	1854      	adds	r4, r2, r1
 800a162:	4649      	mov	r1, r9
 800a164:	eb43 0501 	adc.w	r5, r3, r1
 800a168:	f04f 0200 	mov.w	r2, #0
 800a16c:	f04f 0300 	mov.w	r3, #0
 800a170:	00eb      	lsls	r3, r5, #3
 800a172:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a176:	00e2      	lsls	r2, r4, #3
 800a178:	4614      	mov	r4, r2
 800a17a:	461d      	mov	r5, r3
 800a17c:	4643      	mov	r3, r8
 800a17e:	18e3      	adds	r3, r4, r3
 800a180:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a184:	464b      	mov	r3, r9
 800a186:	eb45 0303 	adc.w	r3, r5, r3
 800a18a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a18e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a192:	685b      	ldr	r3, [r3, #4]
 800a194:	2200      	movs	r2, #0
 800a196:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a19a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a19e:	f04f 0200 	mov.w	r2, #0
 800a1a2:	f04f 0300 	mov.w	r3, #0
 800a1a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a1aa:	4629      	mov	r1, r5
 800a1ac:	008b      	lsls	r3, r1, #2
 800a1ae:	4621      	mov	r1, r4
 800a1b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a1b4:	4621      	mov	r1, r4
 800a1b6:	008a      	lsls	r2, r1, #2
 800a1b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a1bc:	f7f6 fcd6 	bl	8000b6c <__aeabi_uldivmod>
 800a1c0:	4602      	mov	r2, r0
 800a1c2:	460b      	mov	r3, r1
 800a1c4:	4b60      	ldr	r3, [pc, #384]	@ (800a348 <UART_SetConfig+0x4e4>)
 800a1c6:	fba3 2302 	umull	r2, r3, r3, r2
 800a1ca:	095b      	lsrs	r3, r3, #5
 800a1cc:	011c      	lsls	r4, r3, #4
 800a1ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a1d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a1dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a1e0:	4642      	mov	r2, r8
 800a1e2:	464b      	mov	r3, r9
 800a1e4:	1891      	adds	r1, r2, r2
 800a1e6:	61b9      	str	r1, [r7, #24]
 800a1e8:	415b      	adcs	r3, r3
 800a1ea:	61fb      	str	r3, [r7, #28]
 800a1ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a1f0:	4641      	mov	r1, r8
 800a1f2:	1851      	adds	r1, r2, r1
 800a1f4:	6139      	str	r1, [r7, #16]
 800a1f6:	4649      	mov	r1, r9
 800a1f8:	414b      	adcs	r3, r1
 800a1fa:	617b      	str	r3, [r7, #20]
 800a1fc:	f04f 0200 	mov.w	r2, #0
 800a200:	f04f 0300 	mov.w	r3, #0
 800a204:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a208:	4659      	mov	r1, fp
 800a20a:	00cb      	lsls	r3, r1, #3
 800a20c:	4651      	mov	r1, sl
 800a20e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a212:	4651      	mov	r1, sl
 800a214:	00ca      	lsls	r2, r1, #3
 800a216:	4610      	mov	r0, r2
 800a218:	4619      	mov	r1, r3
 800a21a:	4603      	mov	r3, r0
 800a21c:	4642      	mov	r2, r8
 800a21e:	189b      	adds	r3, r3, r2
 800a220:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a224:	464b      	mov	r3, r9
 800a226:	460a      	mov	r2, r1
 800a228:	eb42 0303 	adc.w	r3, r2, r3
 800a22c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a234:	685b      	ldr	r3, [r3, #4]
 800a236:	2200      	movs	r2, #0
 800a238:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a23a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a23c:	f04f 0200 	mov.w	r2, #0
 800a240:	f04f 0300 	mov.w	r3, #0
 800a244:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a248:	4649      	mov	r1, r9
 800a24a:	008b      	lsls	r3, r1, #2
 800a24c:	4641      	mov	r1, r8
 800a24e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a252:	4641      	mov	r1, r8
 800a254:	008a      	lsls	r2, r1, #2
 800a256:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a25a:	f7f6 fc87 	bl	8000b6c <__aeabi_uldivmod>
 800a25e:	4602      	mov	r2, r0
 800a260:	460b      	mov	r3, r1
 800a262:	4611      	mov	r1, r2
 800a264:	4b38      	ldr	r3, [pc, #224]	@ (800a348 <UART_SetConfig+0x4e4>)
 800a266:	fba3 2301 	umull	r2, r3, r3, r1
 800a26a:	095b      	lsrs	r3, r3, #5
 800a26c:	2264      	movs	r2, #100	@ 0x64
 800a26e:	fb02 f303 	mul.w	r3, r2, r3
 800a272:	1acb      	subs	r3, r1, r3
 800a274:	011b      	lsls	r3, r3, #4
 800a276:	3332      	adds	r3, #50	@ 0x32
 800a278:	4a33      	ldr	r2, [pc, #204]	@ (800a348 <UART_SetConfig+0x4e4>)
 800a27a:	fba2 2303 	umull	r2, r3, r2, r3
 800a27e:	095b      	lsrs	r3, r3, #5
 800a280:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a284:	441c      	add	r4, r3
 800a286:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a28a:	2200      	movs	r2, #0
 800a28c:	673b      	str	r3, [r7, #112]	@ 0x70
 800a28e:	677a      	str	r2, [r7, #116]	@ 0x74
 800a290:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a294:	4642      	mov	r2, r8
 800a296:	464b      	mov	r3, r9
 800a298:	1891      	adds	r1, r2, r2
 800a29a:	60b9      	str	r1, [r7, #8]
 800a29c:	415b      	adcs	r3, r3
 800a29e:	60fb      	str	r3, [r7, #12]
 800a2a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a2a4:	4641      	mov	r1, r8
 800a2a6:	1851      	adds	r1, r2, r1
 800a2a8:	6039      	str	r1, [r7, #0]
 800a2aa:	4649      	mov	r1, r9
 800a2ac:	414b      	adcs	r3, r1
 800a2ae:	607b      	str	r3, [r7, #4]
 800a2b0:	f04f 0200 	mov.w	r2, #0
 800a2b4:	f04f 0300 	mov.w	r3, #0
 800a2b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a2bc:	4659      	mov	r1, fp
 800a2be:	00cb      	lsls	r3, r1, #3
 800a2c0:	4651      	mov	r1, sl
 800a2c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a2c6:	4651      	mov	r1, sl
 800a2c8:	00ca      	lsls	r2, r1, #3
 800a2ca:	4610      	mov	r0, r2
 800a2cc:	4619      	mov	r1, r3
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	4642      	mov	r2, r8
 800a2d2:	189b      	adds	r3, r3, r2
 800a2d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a2d6:	464b      	mov	r3, r9
 800a2d8:	460a      	mov	r2, r1
 800a2da:	eb42 0303 	adc.w	r3, r2, r3
 800a2de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a2e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a2e4:	685b      	ldr	r3, [r3, #4]
 800a2e6:	2200      	movs	r2, #0
 800a2e8:	663b      	str	r3, [r7, #96]	@ 0x60
 800a2ea:	667a      	str	r2, [r7, #100]	@ 0x64
 800a2ec:	f04f 0200 	mov.w	r2, #0
 800a2f0:	f04f 0300 	mov.w	r3, #0
 800a2f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a2f8:	4649      	mov	r1, r9
 800a2fa:	008b      	lsls	r3, r1, #2
 800a2fc:	4641      	mov	r1, r8
 800a2fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a302:	4641      	mov	r1, r8
 800a304:	008a      	lsls	r2, r1, #2
 800a306:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a30a:	f7f6 fc2f 	bl	8000b6c <__aeabi_uldivmod>
 800a30e:	4602      	mov	r2, r0
 800a310:	460b      	mov	r3, r1
 800a312:	4b0d      	ldr	r3, [pc, #52]	@ (800a348 <UART_SetConfig+0x4e4>)
 800a314:	fba3 1302 	umull	r1, r3, r3, r2
 800a318:	095b      	lsrs	r3, r3, #5
 800a31a:	2164      	movs	r1, #100	@ 0x64
 800a31c:	fb01 f303 	mul.w	r3, r1, r3
 800a320:	1ad3      	subs	r3, r2, r3
 800a322:	011b      	lsls	r3, r3, #4
 800a324:	3332      	adds	r3, #50	@ 0x32
 800a326:	4a08      	ldr	r2, [pc, #32]	@ (800a348 <UART_SetConfig+0x4e4>)
 800a328:	fba2 2303 	umull	r2, r3, r2, r3
 800a32c:	095b      	lsrs	r3, r3, #5
 800a32e:	f003 020f 	and.w	r2, r3, #15
 800a332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	4422      	add	r2, r4
 800a33a:	609a      	str	r2, [r3, #8]
}
 800a33c:	bf00      	nop
 800a33e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a342:	46bd      	mov	sp, r7
 800a344:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a348:	51eb851f 	.word	0x51eb851f

0800a34c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a34c:	b084      	sub	sp, #16
 800a34e:	b580      	push	{r7, lr}
 800a350:	b084      	sub	sp, #16
 800a352:	af00      	add	r7, sp, #0
 800a354:	6078      	str	r0, [r7, #4]
 800a356:	f107 001c 	add.w	r0, r7, #28
 800a35a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a35e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800a362:	2b01      	cmp	r3, #1
 800a364:	d123      	bne.n	800a3ae <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a36a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	68db      	ldr	r3, [r3, #12]
 800a376:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800a37a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a37e:	687a      	ldr	r2, [r7, #4]
 800a380:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	68db      	ldr	r3, [r3, #12]
 800a386:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a38e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a392:	2b01      	cmp	r3, #1
 800a394:	d105      	bne.n	800a3a2 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	68db      	ldr	r3, [r3, #12]
 800a39a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f001 fae2 	bl	800b96c <USB_CoreReset>
 800a3a8:	4603      	mov	r3, r0
 800a3aa:	73fb      	strb	r3, [r7, #15]
 800a3ac:	e01b      	b.n	800a3e6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	68db      	ldr	r3, [r3, #12]
 800a3b2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f001 fad6 	bl	800b96c <USB_CoreReset>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a3c4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d106      	bne.n	800a3da <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3d0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	639a      	str	r2, [r3, #56]	@ 0x38
 800a3d8:	e005      	b.n	800a3e6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3de:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a3e6:	7fbb      	ldrb	r3, [r7, #30]
 800a3e8:	2b01      	cmp	r3, #1
 800a3ea:	d10b      	bne.n	800a404 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	689b      	ldr	r3, [r3, #8]
 800a3f0:	f043 0206 	orr.w	r2, r3, #6
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	689b      	ldr	r3, [r3, #8]
 800a3fc:	f043 0220 	orr.w	r2, r3, #32
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a404:	7bfb      	ldrb	r3, [r7, #15]
}
 800a406:	4618      	mov	r0, r3
 800a408:	3710      	adds	r7, #16
 800a40a:	46bd      	mov	sp, r7
 800a40c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a410:	b004      	add	sp, #16
 800a412:	4770      	bx	lr

0800a414 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a414:	b480      	push	{r7}
 800a416:	b087      	sub	sp, #28
 800a418:	af00      	add	r7, sp, #0
 800a41a:	60f8      	str	r0, [r7, #12]
 800a41c:	60b9      	str	r1, [r7, #8]
 800a41e:	4613      	mov	r3, r2
 800a420:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a422:	79fb      	ldrb	r3, [r7, #7]
 800a424:	2b02      	cmp	r3, #2
 800a426:	d165      	bne.n	800a4f4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	4a41      	ldr	r2, [pc, #260]	@ (800a530 <USB_SetTurnaroundTime+0x11c>)
 800a42c:	4293      	cmp	r3, r2
 800a42e:	d906      	bls.n	800a43e <USB_SetTurnaroundTime+0x2a>
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	4a40      	ldr	r2, [pc, #256]	@ (800a534 <USB_SetTurnaroundTime+0x120>)
 800a434:	4293      	cmp	r3, r2
 800a436:	d202      	bcs.n	800a43e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a438:	230f      	movs	r3, #15
 800a43a:	617b      	str	r3, [r7, #20]
 800a43c:	e062      	b.n	800a504 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	4a3c      	ldr	r2, [pc, #240]	@ (800a534 <USB_SetTurnaroundTime+0x120>)
 800a442:	4293      	cmp	r3, r2
 800a444:	d306      	bcc.n	800a454 <USB_SetTurnaroundTime+0x40>
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	4a3b      	ldr	r2, [pc, #236]	@ (800a538 <USB_SetTurnaroundTime+0x124>)
 800a44a:	4293      	cmp	r3, r2
 800a44c:	d202      	bcs.n	800a454 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a44e:	230e      	movs	r3, #14
 800a450:	617b      	str	r3, [r7, #20]
 800a452:	e057      	b.n	800a504 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	4a38      	ldr	r2, [pc, #224]	@ (800a538 <USB_SetTurnaroundTime+0x124>)
 800a458:	4293      	cmp	r3, r2
 800a45a:	d306      	bcc.n	800a46a <USB_SetTurnaroundTime+0x56>
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	4a37      	ldr	r2, [pc, #220]	@ (800a53c <USB_SetTurnaroundTime+0x128>)
 800a460:	4293      	cmp	r3, r2
 800a462:	d202      	bcs.n	800a46a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a464:	230d      	movs	r3, #13
 800a466:	617b      	str	r3, [r7, #20]
 800a468:	e04c      	b.n	800a504 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a46a:	68bb      	ldr	r3, [r7, #8]
 800a46c:	4a33      	ldr	r2, [pc, #204]	@ (800a53c <USB_SetTurnaroundTime+0x128>)
 800a46e:	4293      	cmp	r3, r2
 800a470:	d306      	bcc.n	800a480 <USB_SetTurnaroundTime+0x6c>
 800a472:	68bb      	ldr	r3, [r7, #8]
 800a474:	4a32      	ldr	r2, [pc, #200]	@ (800a540 <USB_SetTurnaroundTime+0x12c>)
 800a476:	4293      	cmp	r3, r2
 800a478:	d802      	bhi.n	800a480 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a47a:	230c      	movs	r3, #12
 800a47c:	617b      	str	r3, [r7, #20]
 800a47e:	e041      	b.n	800a504 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	4a2f      	ldr	r2, [pc, #188]	@ (800a540 <USB_SetTurnaroundTime+0x12c>)
 800a484:	4293      	cmp	r3, r2
 800a486:	d906      	bls.n	800a496 <USB_SetTurnaroundTime+0x82>
 800a488:	68bb      	ldr	r3, [r7, #8]
 800a48a:	4a2e      	ldr	r2, [pc, #184]	@ (800a544 <USB_SetTurnaroundTime+0x130>)
 800a48c:	4293      	cmp	r3, r2
 800a48e:	d802      	bhi.n	800a496 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a490:	230b      	movs	r3, #11
 800a492:	617b      	str	r3, [r7, #20]
 800a494:	e036      	b.n	800a504 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	4a2a      	ldr	r2, [pc, #168]	@ (800a544 <USB_SetTurnaroundTime+0x130>)
 800a49a:	4293      	cmp	r3, r2
 800a49c:	d906      	bls.n	800a4ac <USB_SetTurnaroundTime+0x98>
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	4a29      	ldr	r2, [pc, #164]	@ (800a548 <USB_SetTurnaroundTime+0x134>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d802      	bhi.n	800a4ac <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a4a6:	230a      	movs	r3, #10
 800a4a8:	617b      	str	r3, [r7, #20]
 800a4aa:	e02b      	b.n	800a504 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	4a26      	ldr	r2, [pc, #152]	@ (800a548 <USB_SetTurnaroundTime+0x134>)
 800a4b0:	4293      	cmp	r3, r2
 800a4b2:	d906      	bls.n	800a4c2 <USB_SetTurnaroundTime+0xae>
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	4a25      	ldr	r2, [pc, #148]	@ (800a54c <USB_SetTurnaroundTime+0x138>)
 800a4b8:	4293      	cmp	r3, r2
 800a4ba:	d202      	bcs.n	800a4c2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a4bc:	2309      	movs	r3, #9
 800a4be:	617b      	str	r3, [r7, #20]
 800a4c0:	e020      	b.n	800a504 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a4c2:	68bb      	ldr	r3, [r7, #8]
 800a4c4:	4a21      	ldr	r2, [pc, #132]	@ (800a54c <USB_SetTurnaroundTime+0x138>)
 800a4c6:	4293      	cmp	r3, r2
 800a4c8:	d306      	bcc.n	800a4d8 <USB_SetTurnaroundTime+0xc4>
 800a4ca:	68bb      	ldr	r3, [r7, #8]
 800a4cc:	4a20      	ldr	r2, [pc, #128]	@ (800a550 <USB_SetTurnaroundTime+0x13c>)
 800a4ce:	4293      	cmp	r3, r2
 800a4d0:	d802      	bhi.n	800a4d8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a4d2:	2308      	movs	r3, #8
 800a4d4:	617b      	str	r3, [r7, #20]
 800a4d6:	e015      	b.n	800a504 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	4a1d      	ldr	r2, [pc, #116]	@ (800a550 <USB_SetTurnaroundTime+0x13c>)
 800a4dc:	4293      	cmp	r3, r2
 800a4de:	d906      	bls.n	800a4ee <USB_SetTurnaroundTime+0xda>
 800a4e0:	68bb      	ldr	r3, [r7, #8]
 800a4e2:	4a1c      	ldr	r2, [pc, #112]	@ (800a554 <USB_SetTurnaroundTime+0x140>)
 800a4e4:	4293      	cmp	r3, r2
 800a4e6:	d202      	bcs.n	800a4ee <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a4e8:	2307      	movs	r3, #7
 800a4ea:	617b      	str	r3, [r7, #20]
 800a4ec:	e00a      	b.n	800a504 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a4ee:	2306      	movs	r3, #6
 800a4f0:	617b      	str	r3, [r7, #20]
 800a4f2:	e007      	b.n	800a504 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a4f4:	79fb      	ldrb	r3, [r7, #7]
 800a4f6:	2b00      	cmp	r3, #0
 800a4f8:	d102      	bne.n	800a500 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a4fa:	2309      	movs	r3, #9
 800a4fc:	617b      	str	r3, [r7, #20]
 800a4fe:	e001      	b.n	800a504 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a500:	2309      	movs	r3, #9
 800a502:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	68db      	ldr	r3, [r3, #12]
 800a508:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	68da      	ldr	r2, [r3, #12]
 800a514:	697b      	ldr	r3, [r7, #20]
 800a516:	029b      	lsls	r3, r3, #10
 800a518:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 800a51c:	431a      	orrs	r2, r3
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a522:	2300      	movs	r3, #0
}
 800a524:	4618      	mov	r0, r3
 800a526:	371c      	adds	r7, #28
 800a528:	46bd      	mov	sp, r7
 800a52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52e:	4770      	bx	lr
 800a530:	00d8acbf 	.word	0x00d8acbf
 800a534:	00e4e1c0 	.word	0x00e4e1c0
 800a538:	00f42400 	.word	0x00f42400
 800a53c:	01067380 	.word	0x01067380
 800a540:	011a499f 	.word	0x011a499f
 800a544:	01312cff 	.word	0x01312cff
 800a548:	014ca43f 	.word	0x014ca43f
 800a54c:	016e3600 	.word	0x016e3600
 800a550:	01a6ab1f 	.word	0x01a6ab1f
 800a554:	01e84800 	.word	0x01e84800

0800a558 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a558:	b480      	push	{r7}
 800a55a:	b083      	sub	sp, #12
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	689b      	ldr	r3, [r3, #8]
 800a564:	f043 0201 	orr.w	r2, r3, #1
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a56c:	2300      	movs	r3, #0
}
 800a56e:	4618      	mov	r0, r3
 800a570:	370c      	adds	r7, #12
 800a572:	46bd      	mov	sp, r7
 800a574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a578:	4770      	bx	lr

0800a57a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a57a:	b480      	push	{r7}
 800a57c:	b083      	sub	sp, #12
 800a57e:	af00      	add	r7, sp, #0
 800a580:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	689b      	ldr	r3, [r3, #8]
 800a586:	f023 0201 	bic.w	r2, r3, #1
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a58e:	2300      	movs	r3, #0
}
 800a590:	4618      	mov	r0, r3
 800a592:	370c      	adds	r7, #12
 800a594:	46bd      	mov	sp, r7
 800a596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59a:	4770      	bx	lr

0800a59c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b084      	sub	sp, #16
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
 800a5a4:	460b      	mov	r3, r1
 800a5a6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a5a8:	2300      	movs	r3, #0
 800a5aa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	68db      	ldr	r3, [r3, #12]
 800a5b0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a5b8:	78fb      	ldrb	r3, [r7, #3]
 800a5ba:	2b01      	cmp	r3, #1
 800a5bc:	d115      	bne.n	800a5ea <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	68db      	ldr	r3, [r3, #12]
 800a5c2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a5ca:	200a      	movs	r0, #10
 800a5cc:	f7f9 fb0a 	bl	8003be4 <HAL_Delay>
      ms += 10U;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	330a      	adds	r3, #10
 800a5d4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a5d6:	6878      	ldr	r0, [r7, #4]
 800a5d8:	f001 f939 	bl	800b84e <USB_GetMode>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	2b01      	cmp	r3, #1
 800a5e0:	d01e      	beq.n	800a620 <USB_SetCurrentMode+0x84>
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	2bc7      	cmp	r3, #199	@ 0xc7
 800a5e6:	d9f0      	bls.n	800a5ca <USB_SetCurrentMode+0x2e>
 800a5e8:	e01a      	b.n	800a620 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a5ea:	78fb      	ldrb	r3, [r7, #3]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d115      	bne.n	800a61c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	68db      	ldr	r3, [r3, #12]
 800a5f4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a5fc:	200a      	movs	r0, #10
 800a5fe:	f7f9 faf1 	bl	8003be4 <HAL_Delay>
      ms += 10U;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	330a      	adds	r3, #10
 800a606:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a608:	6878      	ldr	r0, [r7, #4]
 800a60a:	f001 f920 	bl	800b84e <USB_GetMode>
 800a60e:	4603      	mov	r3, r0
 800a610:	2b00      	cmp	r3, #0
 800a612:	d005      	beq.n	800a620 <USB_SetCurrentMode+0x84>
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	2bc7      	cmp	r3, #199	@ 0xc7
 800a618:	d9f0      	bls.n	800a5fc <USB_SetCurrentMode+0x60>
 800a61a:	e001      	b.n	800a620 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a61c:	2301      	movs	r3, #1
 800a61e:	e005      	b.n	800a62c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	2bc8      	cmp	r3, #200	@ 0xc8
 800a624:	d101      	bne.n	800a62a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a626:	2301      	movs	r3, #1
 800a628:	e000      	b.n	800a62c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a62a:	2300      	movs	r3, #0
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3710      	adds	r7, #16
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}

0800a634 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a634:	b084      	sub	sp, #16
 800a636:	b580      	push	{r7, lr}
 800a638:	b086      	sub	sp, #24
 800a63a:	af00      	add	r7, sp, #0
 800a63c:	6078      	str	r0, [r7, #4]
 800a63e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800a642:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a646:	2300      	movs	r3, #0
 800a648:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a64e:	2300      	movs	r3, #0
 800a650:	613b      	str	r3, [r7, #16]
 800a652:	e009      	b.n	800a668 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a654:	687a      	ldr	r2, [r7, #4]
 800a656:	693b      	ldr	r3, [r7, #16]
 800a658:	3340      	adds	r3, #64	@ 0x40
 800a65a:	009b      	lsls	r3, r3, #2
 800a65c:	4413      	add	r3, r2
 800a65e:	2200      	movs	r2, #0
 800a660:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a662:	693b      	ldr	r3, [r7, #16]
 800a664:	3301      	adds	r3, #1
 800a666:	613b      	str	r3, [r7, #16]
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	2b0e      	cmp	r3, #14
 800a66c:	d9f2      	bls.n	800a654 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a66e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a672:	2b00      	cmp	r3, #0
 800a674:	d11c      	bne.n	800a6b0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a67c:	685b      	ldr	r3, [r3, #4]
 800a67e:	68fa      	ldr	r2, [r7, #12]
 800a680:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a684:	f043 0302 	orr.w	r3, r3, #2
 800a688:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a68e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a69a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6a6:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	639a      	str	r2, [r3, #56]	@ 0x38
 800a6ae:	e00b      	b.n	800a6c8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6b4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6c0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a6ce:	461a      	mov	r2, r3
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a6d4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a6d8:	2b01      	cmp	r3, #1
 800a6da:	d10d      	bne.n	800a6f8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a6dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d104      	bne.n	800a6ee <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a6e4:	2100      	movs	r1, #0
 800a6e6:	6878      	ldr	r0, [r7, #4]
 800a6e8:	f000 f968 	bl	800a9bc <USB_SetDevSpeed>
 800a6ec:	e008      	b.n	800a700 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a6ee:	2101      	movs	r1, #1
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	f000 f963 	bl	800a9bc <USB_SetDevSpeed>
 800a6f6:	e003      	b.n	800a700 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a6f8:	2103      	movs	r1, #3
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f000 f95e 	bl	800a9bc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a700:	2110      	movs	r1, #16
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f000 f8fa 	bl	800a8fc <USB_FlushTxFifo>
 800a708:	4603      	mov	r3, r0
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d001      	beq.n	800a712 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800a70e:	2301      	movs	r3, #1
 800a710:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f000 f924 	bl	800a960 <USB_FlushRxFifo>
 800a718:	4603      	mov	r3, r0
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d001      	beq.n	800a722 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800a71e:	2301      	movs	r3, #1
 800a720:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a728:	461a      	mov	r2, r3
 800a72a:	2300      	movs	r3, #0
 800a72c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a734:	461a      	mov	r2, r3
 800a736:	2300      	movs	r3, #0
 800a738:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a740:	461a      	mov	r2, r3
 800a742:	2300      	movs	r3, #0
 800a744:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a746:	2300      	movs	r3, #0
 800a748:	613b      	str	r3, [r7, #16]
 800a74a:	e043      	b.n	800a7d4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a74c:	693b      	ldr	r3, [r7, #16]
 800a74e:	015a      	lsls	r2, r3, #5
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	4413      	add	r3, r2
 800a754:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a75e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a762:	d118      	bne.n	800a796 <USB_DevInit+0x162>
    {
      if (i == 0U)
 800a764:	693b      	ldr	r3, [r7, #16]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d10a      	bne.n	800a780 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a76a:	693b      	ldr	r3, [r7, #16]
 800a76c:	015a      	lsls	r2, r3, #5
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	4413      	add	r3, r2
 800a772:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a776:	461a      	mov	r2, r3
 800a778:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a77c:	6013      	str	r3, [r2, #0]
 800a77e:	e013      	b.n	800a7a8 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a780:	693b      	ldr	r3, [r7, #16]
 800a782:	015a      	lsls	r2, r3, #5
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	4413      	add	r3, r2
 800a788:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a78c:	461a      	mov	r2, r3
 800a78e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a792:	6013      	str	r3, [r2, #0]
 800a794:	e008      	b.n	800a7a8 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a796:	693b      	ldr	r3, [r7, #16]
 800a798:	015a      	lsls	r2, r3, #5
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	4413      	add	r3, r2
 800a79e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7a2:	461a      	mov	r2, r3
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a7a8:	693b      	ldr	r3, [r7, #16]
 800a7aa:	015a      	lsls	r2, r3, #5
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	4413      	add	r3, r2
 800a7b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7b4:	461a      	mov	r2, r3
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	015a      	lsls	r2, r3, #5
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	4413      	add	r3, r2
 800a7c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7c6:	461a      	mov	r2, r3
 800a7c8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a7cc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a7ce:	693b      	ldr	r3, [r7, #16]
 800a7d0:	3301      	adds	r3, #1
 800a7d2:	613b      	str	r3, [r7, #16]
 800a7d4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a7d8:	461a      	mov	r2, r3
 800a7da:	693b      	ldr	r3, [r7, #16]
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	d3b5      	bcc.n	800a74c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a7e0:	2300      	movs	r3, #0
 800a7e2:	613b      	str	r3, [r7, #16]
 800a7e4:	e043      	b.n	800a86e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	015a      	lsls	r2, r3, #5
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	4413      	add	r3, r2
 800a7ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a7f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a7fc:	d118      	bne.n	800a830 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d10a      	bne.n	800a81a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	015a      	lsls	r2, r3, #5
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	4413      	add	r3, r2
 800a80c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a810:	461a      	mov	r2, r3
 800a812:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800a816:	6013      	str	r3, [r2, #0]
 800a818:	e013      	b.n	800a842 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a81a:	693b      	ldr	r3, [r7, #16]
 800a81c:	015a      	lsls	r2, r3, #5
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	4413      	add	r3, r2
 800a822:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a826:	461a      	mov	r2, r3
 800a828:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800a82c:	6013      	str	r3, [r2, #0]
 800a82e:	e008      	b.n	800a842 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	015a      	lsls	r2, r3, #5
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	4413      	add	r3, r2
 800a838:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a83c:	461a      	mov	r2, r3
 800a83e:	2300      	movs	r3, #0
 800a840:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	015a      	lsls	r2, r3, #5
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	4413      	add	r3, r2
 800a84a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a84e:	461a      	mov	r2, r3
 800a850:	2300      	movs	r3, #0
 800a852:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a854:	693b      	ldr	r3, [r7, #16]
 800a856:	015a      	lsls	r2, r3, #5
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	4413      	add	r3, r2
 800a85c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a860:	461a      	mov	r2, r3
 800a862:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800a866:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a868:	693b      	ldr	r3, [r7, #16]
 800a86a:	3301      	adds	r3, #1
 800a86c:	613b      	str	r3, [r7, #16]
 800a86e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a872:	461a      	mov	r2, r3
 800a874:	693b      	ldr	r3, [r7, #16]
 800a876:	4293      	cmp	r3, r2
 800a878:	d3b5      	bcc.n	800a7e6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a880:	691b      	ldr	r3, [r3, #16]
 800a882:	68fa      	ldr	r2, [r7, #12]
 800a884:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a888:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a88c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2200      	movs	r2, #0
 800a892:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800a89a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a89c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d105      	bne.n	800a8b0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	699b      	ldr	r3, [r3, #24]
 800a8a8:	f043 0210 	orr.w	r2, r3, #16
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	699a      	ldr	r2, [r3, #24]
 800a8b4:	4b10      	ldr	r3, [pc, #64]	@ (800a8f8 <USB_DevInit+0x2c4>)
 800a8b6:	4313      	orrs	r3, r2
 800a8b8:	687a      	ldr	r2, [r7, #4]
 800a8ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a8bc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d005      	beq.n	800a8d0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	699b      	ldr	r3, [r3, #24]
 800a8c8:	f043 0208 	orr.w	r2, r3, #8
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a8d0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a8d4:	2b01      	cmp	r3, #1
 800a8d6:	d107      	bne.n	800a8e8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	699b      	ldr	r3, [r3, #24]
 800a8dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a8e0:	f043 0304 	orr.w	r3, r3, #4
 800a8e4:	687a      	ldr	r2, [r7, #4]
 800a8e6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a8e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3718      	adds	r7, #24
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a8f4:	b004      	add	sp, #16
 800a8f6:	4770      	bx	lr
 800a8f8:	803c3800 	.word	0x803c3800

0800a8fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	b085      	sub	sp, #20
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
 800a904:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a906:	2300      	movs	r3, #0
 800a908:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a90a:	68fb      	ldr	r3, [r7, #12]
 800a90c:	3301      	adds	r3, #1
 800a90e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a916:	d901      	bls.n	800a91c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a918:	2303      	movs	r3, #3
 800a91a:	e01b      	b.n	800a954 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	691b      	ldr	r3, [r3, #16]
 800a920:	2b00      	cmp	r3, #0
 800a922:	daf2      	bge.n	800a90a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a924:	2300      	movs	r3, #0
 800a926:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	019b      	lsls	r3, r3, #6
 800a92c:	f043 0220 	orr.w	r2, r3, #32
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	3301      	adds	r3, #1
 800a938:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a940:	d901      	bls.n	800a946 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a942:	2303      	movs	r3, #3
 800a944:	e006      	b.n	800a954 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	691b      	ldr	r3, [r3, #16]
 800a94a:	f003 0320 	and.w	r3, r3, #32
 800a94e:	2b20      	cmp	r3, #32
 800a950:	d0f0      	beq.n	800a934 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a952:	2300      	movs	r3, #0
}
 800a954:	4618      	mov	r0, r3
 800a956:	3714      	adds	r7, #20
 800a958:	46bd      	mov	sp, r7
 800a95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95e:	4770      	bx	lr

0800a960 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a960:	b480      	push	{r7}
 800a962:	b085      	sub	sp, #20
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a968:	2300      	movs	r3, #0
 800a96a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	3301      	adds	r3, #1
 800a970:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a978:	d901      	bls.n	800a97e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a97a:	2303      	movs	r3, #3
 800a97c:	e018      	b.n	800a9b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	691b      	ldr	r3, [r3, #16]
 800a982:	2b00      	cmp	r3, #0
 800a984:	daf2      	bge.n	800a96c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a986:	2300      	movs	r3, #0
 800a988:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	2210      	movs	r2, #16
 800a98e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	3301      	adds	r3, #1
 800a994:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a99c:	d901      	bls.n	800a9a2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a99e:	2303      	movs	r3, #3
 800a9a0:	e006      	b.n	800a9b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	691b      	ldr	r3, [r3, #16]
 800a9a6:	f003 0310 	and.w	r3, r3, #16
 800a9aa:	2b10      	cmp	r3, #16
 800a9ac:	d0f0      	beq.n	800a990 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a9ae:	2300      	movs	r3, #0
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	3714      	adds	r7, #20
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ba:	4770      	bx	lr

0800a9bc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a9bc:	b480      	push	{r7}
 800a9be:	b085      	sub	sp, #20
 800a9c0:	af00      	add	r7, sp, #0
 800a9c2:	6078      	str	r0, [r7, #4]
 800a9c4:	460b      	mov	r3, r1
 800a9c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a9d2:	681a      	ldr	r2, [r3, #0]
 800a9d4:	78fb      	ldrb	r3, [r7, #3]
 800a9d6:	68f9      	ldr	r1, [r7, #12]
 800a9d8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a9dc:	4313      	orrs	r3, r2
 800a9de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a9e0:	2300      	movs	r3, #0
}
 800a9e2:	4618      	mov	r0, r3
 800a9e4:	3714      	adds	r7, #20
 800a9e6:	46bd      	mov	sp, r7
 800a9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ec:	4770      	bx	lr

0800a9ee <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800a9ee:	b480      	push	{r7}
 800a9f0:	b087      	sub	sp, #28
 800a9f2:	af00      	add	r7, sp, #0
 800a9f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a9fa:	693b      	ldr	r3, [r7, #16]
 800a9fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa00:	689b      	ldr	r3, [r3, #8]
 800aa02:	f003 0306 	and.w	r3, r3, #6
 800aa06:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	d102      	bne.n	800aa14 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800aa0e:	2300      	movs	r3, #0
 800aa10:	75fb      	strb	r3, [r7, #23]
 800aa12:	e00a      	b.n	800aa2a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	2b02      	cmp	r3, #2
 800aa18:	d002      	beq.n	800aa20 <USB_GetDevSpeed+0x32>
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	2b06      	cmp	r3, #6
 800aa1e:	d102      	bne.n	800aa26 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800aa20:	2302      	movs	r3, #2
 800aa22:	75fb      	strb	r3, [r7, #23]
 800aa24:	e001      	b.n	800aa2a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800aa26:	230f      	movs	r3, #15
 800aa28:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800aa2a:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	371c      	adds	r7, #28
 800aa30:	46bd      	mov	sp, r7
 800aa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa36:	4770      	bx	lr

0800aa38 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b085      	sub	sp, #20
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
 800aa40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aa46:	683b      	ldr	r3, [r7, #0]
 800aa48:	781b      	ldrb	r3, [r3, #0]
 800aa4a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	785b      	ldrb	r3, [r3, #1]
 800aa50:	2b01      	cmp	r3, #1
 800aa52:	d13a      	bne.n	800aaca <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aa5a:	69da      	ldr	r2, [r3, #28]
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	781b      	ldrb	r3, [r3, #0]
 800aa60:	f003 030f 	and.w	r3, r3, #15
 800aa64:	2101      	movs	r1, #1
 800aa66:	fa01 f303 	lsl.w	r3, r1, r3
 800aa6a:	b29b      	uxth	r3, r3
 800aa6c:	68f9      	ldr	r1, [r7, #12]
 800aa6e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800aa72:	4313      	orrs	r3, r2
 800aa74:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	015a      	lsls	r2, r3, #5
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	4413      	add	r3, r2
 800aa7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800aa88:	2b00      	cmp	r3, #0
 800aa8a:	d155      	bne.n	800ab38 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	015a      	lsls	r2, r3, #5
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	4413      	add	r3, r2
 800aa94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aa98:	681a      	ldr	r2, [r3, #0]
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	689b      	ldr	r3, [r3, #8]
 800aa9e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800aaa2:	683b      	ldr	r3, [r7, #0]
 800aaa4:	791b      	ldrb	r3, [r3, #4]
 800aaa6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800aaa8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	059b      	lsls	r3, r3, #22
 800aaae:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800aab0:	4313      	orrs	r3, r2
 800aab2:	68ba      	ldr	r2, [r7, #8]
 800aab4:	0151      	lsls	r1, r2, #5
 800aab6:	68fa      	ldr	r2, [r7, #12]
 800aab8:	440a      	add	r2, r1
 800aaba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aabe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aac2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800aac6:	6013      	str	r3, [r2, #0]
 800aac8:	e036      	b.n	800ab38 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aad0:	69da      	ldr	r2, [r3, #28]
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	781b      	ldrb	r3, [r3, #0]
 800aad6:	f003 030f 	and.w	r3, r3, #15
 800aada:	2101      	movs	r1, #1
 800aadc:	fa01 f303 	lsl.w	r3, r1, r3
 800aae0:	041b      	lsls	r3, r3, #16
 800aae2:	68f9      	ldr	r1, [r7, #12]
 800aae4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800aae8:	4313      	orrs	r3, r2
 800aaea:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	015a      	lsls	r2, r3, #5
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	4413      	add	r3, r2
 800aaf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d11a      	bne.n	800ab38 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ab02:	68bb      	ldr	r3, [r7, #8]
 800ab04:	015a      	lsls	r2, r3, #5
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	4413      	add	r3, r2
 800ab0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ab0e:	681a      	ldr	r2, [r3, #0]
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	689b      	ldr	r3, [r3, #8]
 800ab14:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	791b      	ldrb	r3, [r3, #4]
 800ab1c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ab1e:	430b      	orrs	r3, r1
 800ab20:	4313      	orrs	r3, r2
 800ab22:	68ba      	ldr	r2, [r7, #8]
 800ab24:	0151      	lsls	r1, r2, #5
 800ab26:	68fa      	ldr	r2, [r7, #12]
 800ab28:	440a      	add	r2, r1
 800ab2a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ab2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ab32:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800ab36:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800ab38:	2300      	movs	r3, #0
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	3714      	adds	r7, #20
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab44:	4770      	bx	lr
	...

0800ab48 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b085      	sub	sp, #20
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	781b      	ldrb	r3, [r3, #0]
 800ab5a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ab5c:	683b      	ldr	r3, [r7, #0]
 800ab5e:	785b      	ldrb	r3, [r3, #1]
 800ab60:	2b01      	cmp	r3, #1
 800ab62:	d161      	bne.n	800ac28 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	015a      	lsls	r2, r3, #5
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	4413      	add	r3, r2
 800ab6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ab76:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ab7a:	d11f      	bne.n	800abbc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	015a      	lsls	r2, r3, #5
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	4413      	add	r3, r2
 800ab84:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	68ba      	ldr	r2, [r7, #8]
 800ab8c:	0151      	lsls	r1, r2, #5
 800ab8e:	68fa      	ldr	r2, [r7, #12]
 800ab90:	440a      	add	r2, r1
 800ab92:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ab96:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ab9a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ab9c:	68bb      	ldr	r3, [r7, #8]
 800ab9e:	015a      	lsls	r2, r3, #5
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	4413      	add	r3, r2
 800aba4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	68ba      	ldr	r2, [r7, #8]
 800abac:	0151      	lsls	r1, r2, #5
 800abae:	68fa      	ldr	r2, [r7, #12]
 800abb0:	440a      	add	r2, r1
 800abb2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800abb6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800abba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800abc2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	781b      	ldrb	r3, [r3, #0]
 800abc8:	f003 030f 	and.w	r3, r3, #15
 800abcc:	2101      	movs	r1, #1
 800abce:	fa01 f303 	lsl.w	r3, r1, r3
 800abd2:	b29b      	uxth	r3, r3
 800abd4:	43db      	mvns	r3, r3
 800abd6:	68f9      	ldr	r1, [r7, #12]
 800abd8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800abdc:	4013      	ands	r3, r2
 800abde:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800abe6:	69da      	ldr	r2, [r3, #28]
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	781b      	ldrb	r3, [r3, #0]
 800abec:	f003 030f 	and.w	r3, r3, #15
 800abf0:	2101      	movs	r1, #1
 800abf2:	fa01 f303 	lsl.w	r3, r1, r3
 800abf6:	b29b      	uxth	r3, r3
 800abf8:	43db      	mvns	r3, r3
 800abfa:	68f9      	ldr	r1, [r7, #12]
 800abfc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800ac00:	4013      	ands	r3, r2
 800ac02:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	015a      	lsls	r2, r3, #5
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	4413      	add	r3, r2
 800ac0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac10:	681a      	ldr	r2, [r3, #0]
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	0159      	lsls	r1, r3, #5
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	440b      	add	r3, r1
 800ac1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ac1e:	4619      	mov	r1, r3
 800ac20:	4b35      	ldr	r3, [pc, #212]	@ (800acf8 <USB_DeactivateEndpoint+0x1b0>)
 800ac22:	4013      	ands	r3, r2
 800ac24:	600b      	str	r3, [r1, #0]
 800ac26:	e060      	b.n	800acea <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	015a      	lsls	r2, r3, #5
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	4413      	add	r3, r2
 800ac30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ac3a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ac3e:	d11f      	bne.n	800ac80 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	015a      	lsls	r2, r3, #5
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	4413      	add	r3, r2
 800ac48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	68ba      	ldr	r2, [r7, #8]
 800ac50:	0151      	lsls	r1, r2, #5
 800ac52:	68fa      	ldr	r2, [r7, #12]
 800ac54:	440a      	add	r2, r1
 800ac56:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ac5a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800ac5e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	015a      	lsls	r2, r3, #5
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	4413      	add	r3, r2
 800ac68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	68ba      	ldr	r2, [r7, #8]
 800ac70:	0151      	lsls	r1, r2, #5
 800ac72:	68fa      	ldr	r2, [r7, #12]
 800ac74:	440a      	add	r2, r1
 800ac76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800ac7a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ac7e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800ac86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	781b      	ldrb	r3, [r3, #0]
 800ac8c:	f003 030f 	and.w	r3, r3, #15
 800ac90:	2101      	movs	r1, #1
 800ac92:	fa01 f303 	lsl.w	r3, r1, r3
 800ac96:	041b      	lsls	r3, r3, #16
 800ac98:	43db      	mvns	r3, r3
 800ac9a:	68f9      	ldr	r1, [r7, #12]
 800ac9c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800aca0:	4013      	ands	r3, r2
 800aca2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800acaa:	69da      	ldr	r2, [r3, #28]
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	781b      	ldrb	r3, [r3, #0]
 800acb0:	f003 030f 	and.w	r3, r3, #15
 800acb4:	2101      	movs	r1, #1
 800acb6:	fa01 f303 	lsl.w	r3, r1, r3
 800acba:	041b      	lsls	r3, r3, #16
 800acbc:	43db      	mvns	r3, r3
 800acbe:	68f9      	ldr	r1, [r7, #12]
 800acc0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800acc4:	4013      	ands	r3, r2
 800acc6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800acc8:	68bb      	ldr	r3, [r7, #8]
 800acca:	015a      	lsls	r2, r3, #5
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	4413      	add	r3, r2
 800acd0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800acd4:	681a      	ldr	r2, [r3, #0]
 800acd6:	68bb      	ldr	r3, [r7, #8]
 800acd8:	0159      	lsls	r1, r3, #5
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	440b      	add	r3, r1
 800acde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800ace2:	4619      	mov	r1, r3
 800ace4:	4b05      	ldr	r3, [pc, #20]	@ (800acfc <USB_DeactivateEndpoint+0x1b4>)
 800ace6:	4013      	ands	r3, r2
 800ace8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800acea:	2300      	movs	r3, #0
}
 800acec:	4618      	mov	r0, r3
 800acee:	3714      	adds	r7, #20
 800acf0:	46bd      	mov	sp, r7
 800acf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf6:	4770      	bx	lr
 800acf8:	ec337800 	.word	0xec337800
 800acfc:	eff37800 	.word	0xeff37800

0800ad00 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b08a      	sub	sp, #40	@ 0x28
 800ad04:	af02      	add	r7, sp, #8
 800ad06:	60f8      	str	r0, [r7, #12]
 800ad08:	60b9      	str	r1, [r7, #8]
 800ad0a:	4613      	mov	r3, r2
 800ad0c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	781b      	ldrb	r3, [r3, #0]
 800ad16:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	785b      	ldrb	r3, [r3, #1]
 800ad1c:	2b01      	cmp	r3, #1
 800ad1e:	f040 817a 	bne.w	800b016 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	691b      	ldr	r3, [r3, #16]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d132      	bne.n	800ad90 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ad2a:	69bb      	ldr	r3, [r7, #24]
 800ad2c:	015a      	lsls	r2, r3, #5
 800ad2e:	69fb      	ldr	r3, [r7, #28]
 800ad30:	4413      	add	r3, r2
 800ad32:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad36:	691b      	ldr	r3, [r3, #16]
 800ad38:	69ba      	ldr	r2, [r7, #24]
 800ad3a:	0151      	lsls	r1, r2, #5
 800ad3c:	69fa      	ldr	r2, [r7, #28]
 800ad3e:	440a      	add	r2, r1
 800ad40:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad44:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800ad48:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800ad4c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ad4e:	69bb      	ldr	r3, [r7, #24]
 800ad50:	015a      	lsls	r2, r3, #5
 800ad52:	69fb      	ldr	r3, [r7, #28]
 800ad54:	4413      	add	r3, r2
 800ad56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad5a:	691b      	ldr	r3, [r3, #16]
 800ad5c:	69ba      	ldr	r2, [r7, #24]
 800ad5e:	0151      	lsls	r1, r2, #5
 800ad60:	69fa      	ldr	r2, [r7, #28]
 800ad62:	440a      	add	r2, r1
 800ad64:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad68:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ad6c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ad6e:	69bb      	ldr	r3, [r7, #24]
 800ad70:	015a      	lsls	r2, r3, #5
 800ad72:	69fb      	ldr	r3, [r7, #28]
 800ad74:	4413      	add	r3, r2
 800ad76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad7a:	691b      	ldr	r3, [r3, #16]
 800ad7c:	69ba      	ldr	r2, [r7, #24]
 800ad7e:	0151      	lsls	r1, r2, #5
 800ad80:	69fa      	ldr	r2, [r7, #28]
 800ad82:	440a      	add	r2, r1
 800ad84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ad88:	0cdb      	lsrs	r3, r3, #19
 800ad8a:	04db      	lsls	r3, r3, #19
 800ad8c:	6113      	str	r3, [r2, #16]
 800ad8e:	e092      	b.n	800aeb6 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ad90:	69bb      	ldr	r3, [r7, #24]
 800ad92:	015a      	lsls	r2, r3, #5
 800ad94:	69fb      	ldr	r3, [r7, #28]
 800ad96:	4413      	add	r3, r2
 800ad98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ad9c:	691b      	ldr	r3, [r3, #16]
 800ad9e:	69ba      	ldr	r2, [r7, #24]
 800ada0:	0151      	lsls	r1, r2, #5
 800ada2:	69fa      	ldr	r2, [r7, #28]
 800ada4:	440a      	add	r2, r1
 800ada6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800adaa:	0cdb      	lsrs	r3, r3, #19
 800adac:	04db      	lsls	r3, r3, #19
 800adae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800adb0:	69bb      	ldr	r3, [r7, #24]
 800adb2:	015a      	lsls	r2, r3, #5
 800adb4:	69fb      	ldr	r3, [r7, #28]
 800adb6:	4413      	add	r3, r2
 800adb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800adbc:	691b      	ldr	r3, [r3, #16]
 800adbe:	69ba      	ldr	r2, [r7, #24]
 800adc0:	0151      	lsls	r1, r2, #5
 800adc2:	69fa      	ldr	r2, [r7, #28]
 800adc4:	440a      	add	r2, r1
 800adc6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800adca:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800adce:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800add2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800add4:	69bb      	ldr	r3, [r7, #24]
 800add6:	2b00      	cmp	r3, #0
 800add8:	d11a      	bne.n	800ae10 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800adda:	68bb      	ldr	r3, [r7, #8]
 800addc:	691a      	ldr	r2, [r3, #16]
 800adde:	68bb      	ldr	r3, [r7, #8]
 800ade0:	689b      	ldr	r3, [r3, #8]
 800ade2:	429a      	cmp	r2, r3
 800ade4:	d903      	bls.n	800adee <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800ade6:	68bb      	ldr	r3, [r7, #8]
 800ade8:	689a      	ldr	r2, [r3, #8]
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800adee:	69bb      	ldr	r3, [r7, #24]
 800adf0:	015a      	lsls	r2, r3, #5
 800adf2:	69fb      	ldr	r3, [r7, #28]
 800adf4:	4413      	add	r3, r2
 800adf6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800adfa:	691b      	ldr	r3, [r3, #16]
 800adfc:	69ba      	ldr	r2, [r7, #24]
 800adfe:	0151      	lsls	r1, r2, #5
 800ae00:	69fa      	ldr	r2, [r7, #28]
 800ae02:	440a      	add	r2, r1
 800ae04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ae08:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800ae0c:	6113      	str	r3, [r2, #16]
 800ae0e:	e01b      	b.n	800ae48 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ae10:	69bb      	ldr	r3, [r7, #24]
 800ae12:	015a      	lsls	r2, r3, #5
 800ae14:	69fb      	ldr	r3, [r7, #28]
 800ae16:	4413      	add	r3, r2
 800ae18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae1c:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800ae1e:	68bb      	ldr	r3, [r7, #8]
 800ae20:	6919      	ldr	r1, [r3, #16]
 800ae22:	68bb      	ldr	r3, [r7, #8]
 800ae24:	689b      	ldr	r3, [r3, #8]
 800ae26:	440b      	add	r3, r1
 800ae28:	1e59      	subs	r1, r3, #1
 800ae2a:	68bb      	ldr	r3, [r7, #8]
 800ae2c:	689b      	ldr	r3, [r3, #8]
 800ae2e:	fbb1 f3f3 	udiv	r3, r1, r3
 800ae32:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800ae34:	4ba2      	ldr	r3, [pc, #648]	@ (800b0c0 <USB_EPStartXfer+0x3c0>)
 800ae36:	400b      	ands	r3, r1
 800ae38:	69b9      	ldr	r1, [r7, #24]
 800ae3a:	0148      	lsls	r0, r1, #5
 800ae3c:	69f9      	ldr	r1, [r7, #28]
 800ae3e:	4401      	add	r1, r0
 800ae40:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800ae44:	4313      	orrs	r3, r2
 800ae46:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ae48:	69bb      	ldr	r3, [r7, #24]
 800ae4a:	015a      	lsls	r2, r3, #5
 800ae4c:	69fb      	ldr	r3, [r7, #28]
 800ae4e:	4413      	add	r3, r2
 800ae50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae54:	691a      	ldr	r2, [r3, #16]
 800ae56:	68bb      	ldr	r3, [r7, #8]
 800ae58:	691b      	ldr	r3, [r3, #16]
 800ae5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ae5e:	69b9      	ldr	r1, [r7, #24]
 800ae60:	0148      	lsls	r0, r1, #5
 800ae62:	69f9      	ldr	r1, [r7, #28]
 800ae64:	4401      	add	r1, r0
 800ae66:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800ae6a:	4313      	orrs	r3, r2
 800ae6c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	791b      	ldrb	r3, [r3, #4]
 800ae72:	2b01      	cmp	r3, #1
 800ae74:	d11f      	bne.n	800aeb6 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ae76:	69bb      	ldr	r3, [r7, #24]
 800ae78:	015a      	lsls	r2, r3, #5
 800ae7a:	69fb      	ldr	r3, [r7, #28]
 800ae7c:	4413      	add	r3, r2
 800ae7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800ae82:	691b      	ldr	r3, [r3, #16]
 800ae84:	69ba      	ldr	r2, [r7, #24]
 800ae86:	0151      	lsls	r1, r2, #5
 800ae88:	69fa      	ldr	r2, [r7, #28]
 800ae8a:	440a      	add	r2, r1
 800ae8c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800ae90:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800ae94:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800ae96:	69bb      	ldr	r3, [r7, #24]
 800ae98:	015a      	lsls	r2, r3, #5
 800ae9a:	69fb      	ldr	r3, [r7, #28]
 800ae9c:	4413      	add	r3, r2
 800ae9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aea2:	691b      	ldr	r3, [r3, #16]
 800aea4:	69ba      	ldr	r2, [r7, #24]
 800aea6:	0151      	lsls	r1, r2, #5
 800aea8:	69fa      	ldr	r2, [r7, #28]
 800aeaa:	440a      	add	r2, r1
 800aeac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aeb0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800aeb4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800aeb6:	79fb      	ldrb	r3, [r7, #7]
 800aeb8:	2b01      	cmp	r3, #1
 800aeba:	d14b      	bne.n	800af54 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	69db      	ldr	r3, [r3, #28]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d009      	beq.n	800aed8 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800aec4:	69bb      	ldr	r3, [r7, #24]
 800aec6:	015a      	lsls	r2, r3, #5
 800aec8:	69fb      	ldr	r3, [r7, #28]
 800aeca:	4413      	add	r3, r2
 800aecc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aed0:	461a      	mov	r2, r3
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	69db      	ldr	r3, [r3, #28]
 800aed6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800aed8:	68bb      	ldr	r3, [r7, #8]
 800aeda:	791b      	ldrb	r3, [r3, #4]
 800aedc:	2b01      	cmp	r3, #1
 800aede:	d128      	bne.n	800af32 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800aee0:	69fb      	ldr	r3, [r7, #28]
 800aee2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800aee6:	689b      	ldr	r3, [r3, #8]
 800aee8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d110      	bne.n	800af12 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800aef0:	69bb      	ldr	r3, [r7, #24]
 800aef2:	015a      	lsls	r2, r3, #5
 800aef4:	69fb      	ldr	r3, [r7, #28]
 800aef6:	4413      	add	r3, r2
 800aef8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	69ba      	ldr	r2, [r7, #24]
 800af00:	0151      	lsls	r1, r2, #5
 800af02:	69fa      	ldr	r2, [r7, #28]
 800af04:	440a      	add	r2, r1
 800af06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800af0a:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800af0e:	6013      	str	r3, [r2, #0]
 800af10:	e00f      	b.n	800af32 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800af12:	69bb      	ldr	r3, [r7, #24]
 800af14:	015a      	lsls	r2, r3, #5
 800af16:	69fb      	ldr	r3, [r7, #28]
 800af18:	4413      	add	r3, r2
 800af1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	69ba      	ldr	r2, [r7, #24]
 800af22:	0151      	lsls	r1, r2, #5
 800af24:	69fa      	ldr	r2, [r7, #28]
 800af26:	440a      	add	r2, r1
 800af28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800af2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800af30:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800af32:	69bb      	ldr	r3, [r7, #24]
 800af34:	015a      	lsls	r2, r3, #5
 800af36:	69fb      	ldr	r3, [r7, #28]
 800af38:	4413      	add	r3, r2
 800af3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	69ba      	ldr	r2, [r7, #24]
 800af42:	0151      	lsls	r1, r2, #5
 800af44:	69fa      	ldr	r2, [r7, #28]
 800af46:	440a      	add	r2, r1
 800af48:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800af4c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800af50:	6013      	str	r3, [r2, #0]
 800af52:	e165      	b.n	800b220 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800af54:	69bb      	ldr	r3, [r7, #24]
 800af56:	015a      	lsls	r2, r3, #5
 800af58:	69fb      	ldr	r3, [r7, #28]
 800af5a:	4413      	add	r3, r2
 800af5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	69ba      	ldr	r2, [r7, #24]
 800af64:	0151      	lsls	r1, r2, #5
 800af66:	69fa      	ldr	r2, [r7, #28]
 800af68:	440a      	add	r2, r1
 800af6a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800af6e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800af72:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	791b      	ldrb	r3, [r3, #4]
 800af78:	2b01      	cmp	r3, #1
 800af7a:	d015      	beq.n	800afa8 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800af7c:	68bb      	ldr	r3, [r7, #8]
 800af7e:	691b      	ldr	r3, [r3, #16]
 800af80:	2b00      	cmp	r3, #0
 800af82:	f000 814d 	beq.w	800b220 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800af86:	69fb      	ldr	r3, [r7, #28]
 800af88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800af8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	781b      	ldrb	r3, [r3, #0]
 800af92:	f003 030f 	and.w	r3, r3, #15
 800af96:	2101      	movs	r1, #1
 800af98:	fa01 f303 	lsl.w	r3, r1, r3
 800af9c:	69f9      	ldr	r1, [r7, #28]
 800af9e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800afa2:	4313      	orrs	r3, r2
 800afa4:	634b      	str	r3, [r1, #52]	@ 0x34
 800afa6:	e13b      	b.n	800b220 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800afa8:	69fb      	ldr	r3, [r7, #28]
 800afaa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800afae:	689b      	ldr	r3, [r3, #8]
 800afb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d110      	bne.n	800afda <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800afb8:	69bb      	ldr	r3, [r7, #24]
 800afba:	015a      	lsls	r2, r3, #5
 800afbc:	69fb      	ldr	r3, [r7, #28]
 800afbe:	4413      	add	r3, r2
 800afc0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afc4:	681b      	ldr	r3, [r3, #0]
 800afc6:	69ba      	ldr	r2, [r7, #24]
 800afc8:	0151      	lsls	r1, r2, #5
 800afca:	69fa      	ldr	r2, [r7, #28]
 800afcc:	440a      	add	r2, r1
 800afce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800afd2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800afd6:	6013      	str	r3, [r2, #0]
 800afd8:	e00f      	b.n	800affa <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800afda:	69bb      	ldr	r3, [r7, #24]
 800afdc:	015a      	lsls	r2, r3, #5
 800afde:	69fb      	ldr	r3, [r7, #28]
 800afe0:	4413      	add	r3, r2
 800afe2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	69ba      	ldr	r2, [r7, #24]
 800afea:	0151      	lsls	r1, r2, #5
 800afec:	69fa      	ldr	r2, [r7, #28]
 800afee:	440a      	add	r2, r1
 800aff0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800aff4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aff8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800affa:	68bb      	ldr	r3, [r7, #8]
 800affc:	68d9      	ldr	r1, [r3, #12]
 800affe:	68bb      	ldr	r3, [r7, #8]
 800b000:	781a      	ldrb	r2, [r3, #0]
 800b002:	68bb      	ldr	r3, [r7, #8]
 800b004:	691b      	ldr	r3, [r3, #16]
 800b006:	b298      	uxth	r0, r3
 800b008:	79fb      	ldrb	r3, [r7, #7]
 800b00a:	9300      	str	r3, [sp, #0]
 800b00c:	4603      	mov	r3, r0
 800b00e:	68f8      	ldr	r0, [r7, #12]
 800b010:	f000 f9b8 	bl	800b384 <USB_WritePacket>
 800b014:	e104      	b.n	800b220 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b016:	69bb      	ldr	r3, [r7, #24]
 800b018:	015a      	lsls	r2, r3, #5
 800b01a:	69fb      	ldr	r3, [r7, #28]
 800b01c:	4413      	add	r3, r2
 800b01e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b022:	691b      	ldr	r3, [r3, #16]
 800b024:	69ba      	ldr	r2, [r7, #24]
 800b026:	0151      	lsls	r1, r2, #5
 800b028:	69fa      	ldr	r2, [r7, #28]
 800b02a:	440a      	add	r2, r1
 800b02c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b030:	0cdb      	lsrs	r3, r3, #19
 800b032:	04db      	lsls	r3, r3, #19
 800b034:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b036:	69bb      	ldr	r3, [r7, #24]
 800b038:	015a      	lsls	r2, r3, #5
 800b03a:	69fb      	ldr	r3, [r7, #28]
 800b03c:	4413      	add	r3, r2
 800b03e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b042:	691b      	ldr	r3, [r3, #16]
 800b044:	69ba      	ldr	r2, [r7, #24]
 800b046:	0151      	lsls	r1, r2, #5
 800b048:	69fa      	ldr	r2, [r7, #28]
 800b04a:	440a      	add	r2, r1
 800b04c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b050:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800b054:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800b058:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800b05a:	69bb      	ldr	r3, [r7, #24]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d131      	bne.n	800b0c4 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 800b060:	68bb      	ldr	r3, [r7, #8]
 800b062:	691b      	ldr	r3, [r3, #16]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d003      	beq.n	800b070 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 800b068:	68bb      	ldr	r3, [r7, #8]
 800b06a:	689a      	ldr	r2, [r3, #8]
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800b070:	68bb      	ldr	r3, [r7, #8]
 800b072:	689a      	ldr	r2, [r3, #8]
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b078:	69bb      	ldr	r3, [r7, #24]
 800b07a:	015a      	lsls	r2, r3, #5
 800b07c:	69fb      	ldr	r3, [r7, #28]
 800b07e:	4413      	add	r3, r2
 800b080:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b084:	691a      	ldr	r2, [r3, #16]
 800b086:	68bb      	ldr	r3, [r7, #8]
 800b088:	6a1b      	ldr	r3, [r3, #32]
 800b08a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b08e:	69b9      	ldr	r1, [r7, #24]
 800b090:	0148      	lsls	r0, r1, #5
 800b092:	69f9      	ldr	r1, [r7, #28]
 800b094:	4401      	add	r1, r0
 800b096:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b09a:	4313      	orrs	r3, r2
 800b09c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b09e:	69bb      	ldr	r3, [r7, #24]
 800b0a0:	015a      	lsls	r2, r3, #5
 800b0a2:	69fb      	ldr	r3, [r7, #28]
 800b0a4:	4413      	add	r3, r2
 800b0a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0aa:	691b      	ldr	r3, [r3, #16]
 800b0ac:	69ba      	ldr	r2, [r7, #24]
 800b0ae:	0151      	lsls	r1, r2, #5
 800b0b0:	69fa      	ldr	r2, [r7, #28]
 800b0b2:	440a      	add	r2, r1
 800b0b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b0b8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b0bc:	6113      	str	r3, [r2, #16]
 800b0be:	e061      	b.n	800b184 <USB_EPStartXfer+0x484>
 800b0c0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	691b      	ldr	r3, [r3, #16]
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d123      	bne.n	800b114 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b0cc:	69bb      	ldr	r3, [r7, #24]
 800b0ce:	015a      	lsls	r2, r3, #5
 800b0d0:	69fb      	ldr	r3, [r7, #28]
 800b0d2:	4413      	add	r3, r2
 800b0d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0d8:	691a      	ldr	r2, [r3, #16]
 800b0da:	68bb      	ldr	r3, [r7, #8]
 800b0dc:	689b      	ldr	r3, [r3, #8]
 800b0de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b0e2:	69b9      	ldr	r1, [r7, #24]
 800b0e4:	0148      	lsls	r0, r1, #5
 800b0e6:	69f9      	ldr	r1, [r7, #28]
 800b0e8:	4401      	add	r1, r0
 800b0ea:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b0ee:	4313      	orrs	r3, r2
 800b0f0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b0f2:	69bb      	ldr	r3, [r7, #24]
 800b0f4:	015a      	lsls	r2, r3, #5
 800b0f6:	69fb      	ldr	r3, [r7, #28]
 800b0f8:	4413      	add	r3, r2
 800b0fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b0fe:	691b      	ldr	r3, [r3, #16]
 800b100:	69ba      	ldr	r2, [r7, #24]
 800b102:	0151      	lsls	r1, r2, #5
 800b104:	69fa      	ldr	r2, [r7, #28]
 800b106:	440a      	add	r2, r1
 800b108:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b10c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b110:	6113      	str	r3, [r2, #16]
 800b112:	e037      	b.n	800b184 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	691a      	ldr	r2, [r3, #16]
 800b118:	68bb      	ldr	r3, [r7, #8]
 800b11a:	689b      	ldr	r3, [r3, #8]
 800b11c:	4413      	add	r3, r2
 800b11e:	1e5a      	subs	r2, r3, #1
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	689b      	ldr	r3, [r3, #8]
 800b124:	fbb2 f3f3 	udiv	r3, r2, r3
 800b128:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	689b      	ldr	r3, [r3, #8]
 800b12e:	8afa      	ldrh	r2, [r7, #22]
 800b130:	fb03 f202 	mul.w	r2, r3, r2
 800b134:	68bb      	ldr	r3, [r7, #8]
 800b136:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b138:	69bb      	ldr	r3, [r7, #24]
 800b13a:	015a      	lsls	r2, r3, #5
 800b13c:	69fb      	ldr	r3, [r7, #28]
 800b13e:	4413      	add	r3, r2
 800b140:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b144:	691a      	ldr	r2, [r3, #16]
 800b146:	8afb      	ldrh	r3, [r7, #22]
 800b148:	04d9      	lsls	r1, r3, #19
 800b14a:	4b38      	ldr	r3, [pc, #224]	@ (800b22c <USB_EPStartXfer+0x52c>)
 800b14c:	400b      	ands	r3, r1
 800b14e:	69b9      	ldr	r1, [r7, #24]
 800b150:	0148      	lsls	r0, r1, #5
 800b152:	69f9      	ldr	r1, [r7, #28]
 800b154:	4401      	add	r1, r0
 800b156:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b15a:	4313      	orrs	r3, r2
 800b15c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b15e:	69bb      	ldr	r3, [r7, #24]
 800b160:	015a      	lsls	r2, r3, #5
 800b162:	69fb      	ldr	r3, [r7, #28]
 800b164:	4413      	add	r3, r2
 800b166:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b16a:	691a      	ldr	r2, [r3, #16]
 800b16c:	68bb      	ldr	r3, [r7, #8]
 800b16e:	6a1b      	ldr	r3, [r3, #32]
 800b170:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b174:	69b9      	ldr	r1, [r7, #24]
 800b176:	0148      	lsls	r0, r1, #5
 800b178:	69f9      	ldr	r1, [r7, #28]
 800b17a:	4401      	add	r1, r0
 800b17c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800b180:	4313      	orrs	r3, r2
 800b182:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800b184:	79fb      	ldrb	r3, [r7, #7]
 800b186:	2b01      	cmp	r3, #1
 800b188:	d10d      	bne.n	800b1a6 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b18a:	68bb      	ldr	r3, [r7, #8]
 800b18c:	68db      	ldr	r3, [r3, #12]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d009      	beq.n	800b1a6 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b192:	68bb      	ldr	r3, [r7, #8]
 800b194:	68d9      	ldr	r1, [r3, #12]
 800b196:	69bb      	ldr	r3, [r7, #24]
 800b198:	015a      	lsls	r2, r3, #5
 800b19a:	69fb      	ldr	r3, [r7, #28]
 800b19c:	4413      	add	r3, r2
 800b19e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1a2:	460a      	mov	r2, r1
 800b1a4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b1a6:	68bb      	ldr	r3, [r7, #8]
 800b1a8:	791b      	ldrb	r3, [r3, #4]
 800b1aa:	2b01      	cmp	r3, #1
 800b1ac:	d128      	bne.n	800b200 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b1ae:	69fb      	ldr	r3, [r7, #28]
 800b1b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b1b4:	689b      	ldr	r3, [r3, #8]
 800b1b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d110      	bne.n	800b1e0 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b1be:	69bb      	ldr	r3, [r7, #24]
 800b1c0:	015a      	lsls	r2, r3, #5
 800b1c2:	69fb      	ldr	r3, [r7, #28]
 800b1c4:	4413      	add	r3, r2
 800b1c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	69ba      	ldr	r2, [r7, #24]
 800b1ce:	0151      	lsls	r1, r2, #5
 800b1d0:	69fa      	ldr	r2, [r7, #28]
 800b1d2:	440a      	add	r2, r1
 800b1d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b1d8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b1dc:	6013      	str	r3, [r2, #0]
 800b1de:	e00f      	b.n	800b200 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b1e0:	69bb      	ldr	r3, [r7, #24]
 800b1e2:	015a      	lsls	r2, r3, #5
 800b1e4:	69fb      	ldr	r3, [r7, #28]
 800b1e6:	4413      	add	r3, r2
 800b1e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	69ba      	ldr	r2, [r7, #24]
 800b1f0:	0151      	lsls	r1, r2, #5
 800b1f2:	69fa      	ldr	r2, [r7, #28]
 800b1f4:	440a      	add	r2, r1
 800b1f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b1fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b1fe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b200:	69bb      	ldr	r3, [r7, #24]
 800b202:	015a      	lsls	r2, r3, #5
 800b204:	69fb      	ldr	r3, [r7, #28]
 800b206:	4413      	add	r3, r2
 800b208:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	69ba      	ldr	r2, [r7, #24]
 800b210:	0151      	lsls	r1, r2, #5
 800b212:	69fa      	ldr	r2, [r7, #28]
 800b214:	440a      	add	r2, r1
 800b216:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b21a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800b21e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b220:	2300      	movs	r3, #0
}
 800b222:	4618      	mov	r0, r3
 800b224:	3720      	adds	r7, #32
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}
 800b22a:	bf00      	nop
 800b22c:	1ff80000 	.word	0x1ff80000

0800b230 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b230:	b480      	push	{r7}
 800b232:	b087      	sub	sp, #28
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
 800b238:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b23a:	2300      	movs	r3, #0
 800b23c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b23e:	2300      	movs	r3, #0
 800b240:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b246:	683b      	ldr	r3, [r7, #0]
 800b248:	785b      	ldrb	r3, [r3, #1]
 800b24a:	2b01      	cmp	r3, #1
 800b24c:	d14a      	bne.n	800b2e4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	781b      	ldrb	r3, [r3, #0]
 800b252:	015a      	lsls	r2, r3, #5
 800b254:	693b      	ldr	r3, [r7, #16]
 800b256:	4413      	add	r3, r2
 800b258:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b262:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b266:	f040 8086 	bne.w	800b376 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b26a:	683b      	ldr	r3, [r7, #0]
 800b26c:	781b      	ldrb	r3, [r3, #0]
 800b26e:	015a      	lsls	r2, r3, #5
 800b270:	693b      	ldr	r3, [r7, #16]
 800b272:	4413      	add	r3, r2
 800b274:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	683a      	ldr	r2, [r7, #0]
 800b27c:	7812      	ldrb	r2, [r2, #0]
 800b27e:	0151      	lsls	r1, r2, #5
 800b280:	693a      	ldr	r2, [r7, #16]
 800b282:	440a      	add	r2, r1
 800b284:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b288:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b28c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	781b      	ldrb	r3, [r3, #0]
 800b292:	015a      	lsls	r2, r3, #5
 800b294:	693b      	ldr	r3, [r7, #16]
 800b296:	4413      	add	r3, r2
 800b298:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	683a      	ldr	r2, [r7, #0]
 800b2a0:	7812      	ldrb	r2, [r2, #0]
 800b2a2:	0151      	lsls	r1, r2, #5
 800b2a4:	693a      	ldr	r2, [r7, #16]
 800b2a6:	440a      	add	r2, r1
 800b2a8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b2ac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b2b0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	3301      	adds	r3, #1
 800b2b6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b2be:	4293      	cmp	r3, r2
 800b2c0:	d902      	bls.n	800b2c8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	75fb      	strb	r3, [r7, #23]
          break;
 800b2c6:	e056      	b.n	800b376 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b2c8:	683b      	ldr	r3, [r7, #0]
 800b2ca:	781b      	ldrb	r3, [r3, #0]
 800b2cc:	015a      	lsls	r2, r3, #5
 800b2ce:	693b      	ldr	r3, [r7, #16]
 800b2d0:	4413      	add	r3, r2
 800b2d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b2dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b2e0:	d0e7      	beq.n	800b2b2 <USB_EPStopXfer+0x82>
 800b2e2:	e048      	b.n	800b376 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	781b      	ldrb	r3, [r3, #0]
 800b2e8:	015a      	lsls	r2, r3, #5
 800b2ea:	693b      	ldr	r3, [r7, #16]
 800b2ec:	4413      	add	r3, r2
 800b2ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b2f8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b2fc:	d13b      	bne.n	800b376 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b2fe:	683b      	ldr	r3, [r7, #0]
 800b300:	781b      	ldrb	r3, [r3, #0]
 800b302:	015a      	lsls	r2, r3, #5
 800b304:	693b      	ldr	r3, [r7, #16]
 800b306:	4413      	add	r3, r2
 800b308:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	683a      	ldr	r2, [r7, #0]
 800b310:	7812      	ldrb	r2, [r2, #0]
 800b312:	0151      	lsls	r1, r2, #5
 800b314:	693a      	ldr	r2, [r7, #16]
 800b316:	440a      	add	r2, r1
 800b318:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b31c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800b320:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b322:	683b      	ldr	r3, [r7, #0]
 800b324:	781b      	ldrb	r3, [r3, #0]
 800b326:	015a      	lsls	r2, r3, #5
 800b328:	693b      	ldr	r3, [r7, #16]
 800b32a:	4413      	add	r3, r2
 800b32c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	683a      	ldr	r2, [r7, #0]
 800b334:	7812      	ldrb	r2, [r2, #0]
 800b336:	0151      	lsls	r1, r2, #5
 800b338:	693a      	ldr	r2, [r7, #16]
 800b33a:	440a      	add	r2, r1
 800b33c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b340:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800b344:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	3301      	adds	r3, #1
 800b34a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	f242 7210 	movw	r2, #10000	@ 0x2710
 800b352:	4293      	cmp	r3, r2
 800b354:	d902      	bls.n	800b35c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b356:	2301      	movs	r3, #1
 800b358:	75fb      	strb	r3, [r7, #23]
          break;
 800b35a:	e00c      	b.n	800b376 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	781b      	ldrb	r3, [r3, #0]
 800b360:	015a      	lsls	r2, r3, #5
 800b362:	693b      	ldr	r3, [r7, #16]
 800b364:	4413      	add	r3, r2
 800b366:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b370:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b374:	d0e7      	beq.n	800b346 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b376:	7dfb      	ldrb	r3, [r7, #23]
}
 800b378:	4618      	mov	r0, r3
 800b37a:	371c      	adds	r7, #28
 800b37c:	46bd      	mov	sp, r7
 800b37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b382:	4770      	bx	lr

0800b384 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b384:	b480      	push	{r7}
 800b386:	b089      	sub	sp, #36	@ 0x24
 800b388:	af00      	add	r7, sp, #0
 800b38a:	60f8      	str	r0, [r7, #12]
 800b38c:	60b9      	str	r1, [r7, #8]
 800b38e:	4611      	mov	r1, r2
 800b390:	461a      	mov	r2, r3
 800b392:	460b      	mov	r3, r1
 800b394:	71fb      	strb	r3, [r7, #7]
 800b396:	4613      	mov	r3, r2
 800b398:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b39a:	68fb      	ldr	r3, [r7, #12]
 800b39c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b39e:	68bb      	ldr	r3, [r7, #8]
 800b3a0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b3a2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d123      	bne.n	800b3f2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b3aa:	88bb      	ldrh	r3, [r7, #4]
 800b3ac:	3303      	adds	r3, #3
 800b3ae:	089b      	lsrs	r3, r3, #2
 800b3b0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	61bb      	str	r3, [r7, #24]
 800b3b6:	e018      	b.n	800b3ea <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b3b8:	79fb      	ldrb	r3, [r7, #7]
 800b3ba:	031a      	lsls	r2, r3, #12
 800b3bc:	697b      	ldr	r3, [r7, #20]
 800b3be:	4413      	add	r3, r2
 800b3c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b3c4:	461a      	mov	r2, r3
 800b3c6:	69fb      	ldr	r3, [r7, #28]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b3cc:	69fb      	ldr	r3, [r7, #28]
 800b3ce:	3301      	adds	r3, #1
 800b3d0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b3d2:	69fb      	ldr	r3, [r7, #28]
 800b3d4:	3301      	adds	r3, #1
 800b3d6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b3d8:	69fb      	ldr	r3, [r7, #28]
 800b3da:	3301      	adds	r3, #1
 800b3dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b3de:	69fb      	ldr	r3, [r7, #28]
 800b3e0:	3301      	adds	r3, #1
 800b3e2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b3e4:	69bb      	ldr	r3, [r7, #24]
 800b3e6:	3301      	adds	r3, #1
 800b3e8:	61bb      	str	r3, [r7, #24]
 800b3ea:	69ba      	ldr	r2, [r7, #24]
 800b3ec:	693b      	ldr	r3, [r7, #16]
 800b3ee:	429a      	cmp	r2, r3
 800b3f0:	d3e2      	bcc.n	800b3b8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b3f2:	2300      	movs	r3, #0
}
 800b3f4:	4618      	mov	r0, r3
 800b3f6:	3724      	adds	r7, #36	@ 0x24
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fe:	4770      	bx	lr

0800b400 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b400:	b480      	push	{r7}
 800b402:	b08b      	sub	sp, #44	@ 0x2c
 800b404:	af00      	add	r7, sp, #0
 800b406:	60f8      	str	r0, [r7, #12]
 800b408:	60b9      	str	r1, [r7, #8]
 800b40a:	4613      	mov	r3, r2
 800b40c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b412:	68bb      	ldr	r3, [r7, #8]
 800b414:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b416:	88fb      	ldrh	r3, [r7, #6]
 800b418:	089b      	lsrs	r3, r3, #2
 800b41a:	b29b      	uxth	r3, r3
 800b41c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b41e:	88fb      	ldrh	r3, [r7, #6]
 800b420:	f003 0303 	and.w	r3, r3, #3
 800b424:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b426:	2300      	movs	r3, #0
 800b428:	623b      	str	r3, [r7, #32]
 800b42a:	e014      	b.n	800b456 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b42c:	69bb      	ldr	r3, [r7, #24]
 800b42e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b432:	681a      	ldr	r2, [r3, #0]
 800b434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b436:	601a      	str	r2, [r3, #0]
    pDest++;
 800b438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b43a:	3301      	adds	r3, #1
 800b43c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b43e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b440:	3301      	adds	r3, #1
 800b442:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b446:	3301      	adds	r3, #1
 800b448:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800b44a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b44c:	3301      	adds	r3, #1
 800b44e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800b450:	6a3b      	ldr	r3, [r7, #32]
 800b452:	3301      	adds	r3, #1
 800b454:	623b      	str	r3, [r7, #32]
 800b456:	6a3a      	ldr	r2, [r7, #32]
 800b458:	697b      	ldr	r3, [r7, #20]
 800b45a:	429a      	cmp	r2, r3
 800b45c:	d3e6      	bcc.n	800b42c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b45e:	8bfb      	ldrh	r3, [r7, #30]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d01e      	beq.n	800b4a2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b464:	2300      	movs	r3, #0
 800b466:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b468:	69bb      	ldr	r3, [r7, #24]
 800b46a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b46e:	461a      	mov	r2, r3
 800b470:	f107 0310 	add.w	r3, r7, #16
 800b474:	6812      	ldr	r2, [r2, #0]
 800b476:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b478:	693a      	ldr	r2, [r7, #16]
 800b47a:	6a3b      	ldr	r3, [r7, #32]
 800b47c:	b2db      	uxtb	r3, r3
 800b47e:	00db      	lsls	r3, r3, #3
 800b480:	fa22 f303 	lsr.w	r3, r2, r3
 800b484:	b2da      	uxtb	r2, r3
 800b486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b488:	701a      	strb	r2, [r3, #0]
      i++;
 800b48a:	6a3b      	ldr	r3, [r7, #32]
 800b48c:	3301      	adds	r3, #1
 800b48e:	623b      	str	r3, [r7, #32]
      pDest++;
 800b490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b492:	3301      	adds	r3, #1
 800b494:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800b496:	8bfb      	ldrh	r3, [r7, #30]
 800b498:	3b01      	subs	r3, #1
 800b49a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b49c:	8bfb      	ldrh	r3, [r7, #30]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d1ea      	bne.n	800b478 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b4a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	372c      	adds	r7, #44	@ 0x2c
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ae:	4770      	bx	lr

0800b4b0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b4b0:	b480      	push	{r7}
 800b4b2:	b085      	sub	sp, #20
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
 800b4b8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b4be:	683b      	ldr	r3, [r7, #0]
 800b4c0:	781b      	ldrb	r3, [r3, #0]
 800b4c2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	785b      	ldrb	r3, [r3, #1]
 800b4c8:	2b01      	cmp	r3, #1
 800b4ca:	d12c      	bne.n	800b526 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	015a      	lsls	r2, r3, #5
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	4413      	add	r3, r2
 800b4d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	db12      	blt.n	800b504 <USB_EPSetStall+0x54>
 800b4de:	68bb      	ldr	r3, [r7, #8]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d00f      	beq.n	800b504 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	015a      	lsls	r2, r3, #5
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	4413      	add	r3, r2
 800b4ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	68ba      	ldr	r2, [r7, #8]
 800b4f4:	0151      	lsls	r1, r2, #5
 800b4f6:	68fa      	ldr	r2, [r7, #12]
 800b4f8:	440a      	add	r2, r1
 800b4fa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b4fe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b502:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	015a      	lsls	r2, r3, #5
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	4413      	add	r3, r2
 800b50c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	68ba      	ldr	r2, [r7, #8]
 800b514:	0151      	lsls	r1, r2, #5
 800b516:	68fa      	ldr	r2, [r7, #12]
 800b518:	440a      	add	r2, r1
 800b51a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b51e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b522:	6013      	str	r3, [r2, #0]
 800b524:	e02b      	b.n	800b57e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b526:	68bb      	ldr	r3, [r7, #8]
 800b528:	015a      	lsls	r2, r3, #5
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	4413      	add	r3, r2
 800b52e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	2b00      	cmp	r3, #0
 800b536:	db12      	blt.n	800b55e <USB_EPSetStall+0xae>
 800b538:	68bb      	ldr	r3, [r7, #8]
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d00f      	beq.n	800b55e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b53e:	68bb      	ldr	r3, [r7, #8]
 800b540:	015a      	lsls	r2, r3, #5
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	4413      	add	r3, r2
 800b546:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	68ba      	ldr	r2, [r7, #8]
 800b54e:	0151      	lsls	r1, r2, #5
 800b550:	68fa      	ldr	r2, [r7, #12]
 800b552:	440a      	add	r2, r1
 800b554:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b558:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800b55c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	015a      	lsls	r2, r3, #5
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	4413      	add	r3, r2
 800b566:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	68ba      	ldr	r2, [r7, #8]
 800b56e:	0151      	lsls	r1, r2, #5
 800b570:	68fa      	ldr	r2, [r7, #12]
 800b572:	440a      	add	r2, r1
 800b574:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b578:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b57c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b57e:	2300      	movs	r3, #0
}
 800b580:	4618      	mov	r0, r3
 800b582:	3714      	adds	r7, #20
 800b584:	46bd      	mov	sp, r7
 800b586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b58a:	4770      	bx	lr

0800b58c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b58c:	b480      	push	{r7}
 800b58e:	b085      	sub	sp, #20
 800b590:	af00      	add	r7, sp, #0
 800b592:	6078      	str	r0, [r7, #4]
 800b594:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	781b      	ldrb	r3, [r3, #0]
 800b59e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	785b      	ldrb	r3, [r3, #1]
 800b5a4:	2b01      	cmp	r3, #1
 800b5a6:	d128      	bne.n	800b5fa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b5a8:	68bb      	ldr	r3, [r7, #8]
 800b5aa:	015a      	lsls	r2, r3, #5
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	4413      	add	r3, r2
 800b5b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	68ba      	ldr	r2, [r7, #8]
 800b5b8:	0151      	lsls	r1, r2, #5
 800b5ba:	68fa      	ldr	r2, [r7, #12]
 800b5bc:	440a      	add	r2, r1
 800b5be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b5c2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b5c6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b5c8:	683b      	ldr	r3, [r7, #0]
 800b5ca:	791b      	ldrb	r3, [r3, #4]
 800b5cc:	2b03      	cmp	r3, #3
 800b5ce:	d003      	beq.n	800b5d8 <USB_EPClearStall+0x4c>
 800b5d0:	683b      	ldr	r3, [r7, #0]
 800b5d2:	791b      	ldrb	r3, [r3, #4]
 800b5d4:	2b02      	cmp	r3, #2
 800b5d6:	d138      	bne.n	800b64a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b5d8:	68bb      	ldr	r3, [r7, #8]
 800b5da:	015a      	lsls	r2, r3, #5
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	4413      	add	r3, r2
 800b5e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	68ba      	ldr	r2, [r7, #8]
 800b5e8:	0151      	lsls	r1, r2, #5
 800b5ea:	68fa      	ldr	r2, [r7, #12]
 800b5ec:	440a      	add	r2, r1
 800b5ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b5f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b5f6:	6013      	str	r3, [r2, #0]
 800b5f8:	e027      	b.n	800b64a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	015a      	lsls	r2, r3, #5
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	4413      	add	r3, r2
 800b602:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	68ba      	ldr	r2, [r7, #8]
 800b60a:	0151      	lsls	r1, r2, #5
 800b60c:	68fa      	ldr	r2, [r7, #12]
 800b60e:	440a      	add	r2, r1
 800b610:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b614:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800b618:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b61a:	683b      	ldr	r3, [r7, #0]
 800b61c:	791b      	ldrb	r3, [r3, #4]
 800b61e:	2b03      	cmp	r3, #3
 800b620:	d003      	beq.n	800b62a <USB_EPClearStall+0x9e>
 800b622:	683b      	ldr	r3, [r7, #0]
 800b624:	791b      	ldrb	r3, [r3, #4]
 800b626:	2b02      	cmp	r3, #2
 800b628:	d10f      	bne.n	800b64a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b62a:	68bb      	ldr	r3, [r7, #8]
 800b62c:	015a      	lsls	r2, r3, #5
 800b62e:	68fb      	ldr	r3, [r7, #12]
 800b630:	4413      	add	r3, r2
 800b632:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	68ba      	ldr	r2, [r7, #8]
 800b63a:	0151      	lsls	r1, r2, #5
 800b63c:	68fa      	ldr	r2, [r7, #12]
 800b63e:	440a      	add	r2, r1
 800b640:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b644:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b648:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b64a:	2300      	movs	r3, #0
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	3714      	adds	r7, #20
 800b650:	46bd      	mov	sp, r7
 800b652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b656:	4770      	bx	lr

0800b658 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b658:	b480      	push	{r7}
 800b65a:	b085      	sub	sp, #20
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
 800b660:	460b      	mov	r3, r1
 800b662:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	68fa      	ldr	r2, [r7, #12]
 800b672:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b676:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800b67a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b682:	681a      	ldr	r2, [r3, #0]
 800b684:	78fb      	ldrb	r3, [r7, #3]
 800b686:	011b      	lsls	r3, r3, #4
 800b688:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800b68c:	68f9      	ldr	r1, [r7, #12]
 800b68e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800b692:	4313      	orrs	r3, r2
 800b694:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b696:	2300      	movs	r3, #0
}
 800b698:	4618      	mov	r0, r3
 800b69a:	3714      	adds	r7, #20
 800b69c:	46bd      	mov	sp, r7
 800b69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a2:	4770      	bx	lr

0800b6a4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b6a4:	b480      	push	{r7}
 800b6a6:	b085      	sub	sp, #20
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	68fa      	ldr	r2, [r7, #12]
 800b6ba:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b6be:	f023 0303 	bic.w	r3, r3, #3
 800b6c2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b6c4:	68fb      	ldr	r3, [r7, #12]
 800b6c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b6ca:	685b      	ldr	r3, [r3, #4]
 800b6cc:	68fa      	ldr	r2, [r7, #12]
 800b6ce:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b6d2:	f023 0302 	bic.w	r3, r3, #2
 800b6d6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b6d8:	2300      	movs	r3, #0
}
 800b6da:	4618      	mov	r0, r3
 800b6dc:	3714      	adds	r7, #20
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e4:	4770      	bx	lr

0800b6e6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b6e6:	b480      	push	{r7}
 800b6e8:	b085      	sub	sp, #20
 800b6ea:	af00      	add	r7, sp, #0
 800b6ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	68fa      	ldr	r2, [r7, #12]
 800b6fc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b700:	f023 0303 	bic.w	r3, r3, #3
 800b704:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b70c:	685b      	ldr	r3, [r3, #4]
 800b70e:	68fa      	ldr	r2, [r7, #12]
 800b710:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b714:	f043 0302 	orr.w	r3, r3, #2
 800b718:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b71a:	2300      	movs	r3, #0
}
 800b71c:	4618      	mov	r0, r3
 800b71e:	3714      	adds	r7, #20
 800b720:	46bd      	mov	sp, r7
 800b722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b726:	4770      	bx	lr

0800b728 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800b728:	b480      	push	{r7}
 800b72a:	b085      	sub	sp, #20
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	695b      	ldr	r3, [r3, #20]
 800b734:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	699b      	ldr	r3, [r3, #24]
 800b73a:	68fa      	ldr	r2, [r7, #12]
 800b73c:	4013      	ands	r3, r2
 800b73e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b740:	68fb      	ldr	r3, [r7, #12]
}
 800b742:	4618      	mov	r0, r3
 800b744:	3714      	adds	r7, #20
 800b746:	46bd      	mov	sp, r7
 800b748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74c:	4770      	bx	lr

0800b74e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b74e:	b480      	push	{r7}
 800b750:	b085      	sub	sp, #20
 800b752:	af00      	add	r7, sp, #0
 800b754:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b760:	699b      	ldr	r3, [r3, #24]
 800b762:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b76a:	69db      	ldr	r3, [r3, #28]
 800b76c:	68ba      	ldr	r2, [r7, #8]
 800b76e:	4013      	ands	r3, r2
 800b770:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b772:	68bb      	ldr	r3, [r7, #8]
 800b774:	0c1b      	lsrs	r3, r3, #16
}
 800b776:	4618      	mov	r0, r3
 800b778:	3714      	adds	r7, #20
 800b77a:	46bd      	mov	sp, r7
 800b77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b780:	4770      	bx	lr

0800b782 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b782:	b480      	push	{r7}
 800b784:	b085      	sub	sp, #20
 800b786:	af00      	add	r7, sp, #0
 800b788:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b78e:	68fb      	ldr	r3, [r7, #12]
 800b790:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b794:	699b      	ldr	r3, [r3, #24]
 800b796:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b798:	68fb      	ldr	r3, [r7, #12]
 800b79a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b79e:	69db      	ldr	r3, [r3, #28]
 800b7a0:	68ba      	ldr	r2, [r7, #8]
 800b7a2:	4013      	ands	r3, r2
 800b7a4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	b29b      	uxth	r3, r3
}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	3714      	adds	r7, #20
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b4:	4770      	bx	lr

0800b7b6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b7b6:	b480      	push	{r7}
 800b7b8:	b085      	sub	sp, #20
 800b7ba:	af00      	add	r7, sp, #0
 800b7bc:	6078      	str	r0, [r7, #4]
 800b7be:	460b      	mov	r3, r1
 800b7c0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b7c6:	78fb      	ldrb	r3, [r7, #3]
 800b7c8:	015a      	lsls	r2, r3, #5
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	4413      	add	r3, r2
 800b7ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b7d2:	689b      	ldr	r3, [r3, #8]
 800b7d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b7dc:	695b      	ldr	r3, [r3, #20]
 800b7de:	68ba      	ldr	r2, [r7, #8]
 800b7e0:	4013      	ands	r3, r2
 800b7e2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b7e4:	68bb      	ldr	r3, [r7, #8]
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	3714      	adds	r7, #20
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f0:	4770      	bx	lr

0800b7f2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b7f2:	b480      	push	{r7}
 800b7f4:	b087      	sub	sp, #28
 800b7f6:	af00      	add	r7, sp, #0
 800b7f8:	6078      	str	r0, [r7, #4]
 800b7fa:	460b      	mov	r3, r1
 800b7fc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b802:	697b      	ldr	r3, [r7, #20]
 800b804:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b808:	691b      	ldr	r3, [r3, #16]
 800b80a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b80c:	697b      	ldr	r3, [r7, #20]
 800b80e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b812:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b814:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b816:	78fb      	ldrb	r3, [r7, #3]
 800b818:	f003 030f 	and.w	r3, r3, #15
 800b81c:	68fa      	ldr	r2, [r7, #12]
 800b81e:	fa22 f303 	lsr.w	r3, r2, r3
 800b822:	01db      	lsls	r3, r3, #7
 800b824:	b2db      	uxtb	r3, r3
 800b826:	693a      	ldr	r2, [r7, #16]
 800b828:	4313      	orrs	r3, r2
 800b82a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b82c:	78fb      	ldrb	r3, [r7, #3]
 800b82e:	015a      	lsls	r2, r3, #5
 800b830:	697b      	ldr	r3, [r7, #20]
 800b832:	4413      	add	r3, r2
 800b834:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b838:	689b      	ldr	r3, [r3, #8]
 800b83a:	693a      	ldr	r2, [r7, #16]
 800b83c:	4013      	ands	r3, r2
 800b83e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b840:	68bb      	ldr	r3, [r7, #8]
}
 800b842:	4618      	mov	r0, r3
 800b844:	371c      	adds	r7, #28
 800b846:	46bd      	mov	sp, r7
 800b848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84c:	4770      	bx	lr

0800b84e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800b84e:	b480      	push	{r7}
 800b850:	b083      	sub	sp, #12
 800b852:	af00      	add	r7, sp, #0
 800b854:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	695b      	ldr	r3, [r3, #20]
 800b85a:	f003 0301 	and.w	r3, r3, #1
}
 800b85e:	4618      	mov	r0, r3
 800b860:	370c      	adds	r7, #12
 800b862:	46bd      	mov	sp, r7
 800b864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b868:	4770      	bx	lr

0800b86a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800b86a:	b480      	push	{r7}
 800b86c:	b085      	sub	sp, #20
 800b86e:	af00      	add	r7, sp, #0
 800b870:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b876:	68fb      	ldr	r3, [r7, #12]
 800b878:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	68fa      	ldr	r2, [r7, #12]
 800b880:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800b884:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800b888:	f023 0307 	bic.w	r3, r3, #7
 800b88c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b88e:	68fb      	ldr	r3, [r7, #12]
 800b890:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800b894:	685b      	ldr	r3, [r3, #4]
 800b896:	68fa      	ldr	r2, [r7, #12]
 800b898:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800b89c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b8a0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b8a2:	2300      	movs	r3, #0
}
 800b8a4:	4618      	mov	r0, r3
 800b8a6:	3714      	adds	r7, #20
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ae:	4770      	bx	lr

0800b8b0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800b8b0:	b480      	push	{r7}
 800b8b2:	b087      	sub	sp, #28
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	60f8      	str	r0, [r7, #12]
 800b8b8:	460b      	mov	r3, r1
 800b8ba:	607a      	str	r2, [r7, #4]
 800b8bc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	333c      	adds	r3, #60	@ 0x3c
 800b8c6:	3304      	adds	r3, #4
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b8cc:	693b      	ldr	r3, [r7, #16]
 800b8ce:	4a26      	ldr	r2, [pc, #152]	@ (800b968 <USB_EP0_OutStart+0xb8>)
 800b8d0:	4293      	cmp	r3, r2
 800b8d2:	d90a      	bls.n	800b8ea <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b8d4:	697b      	ldr	r3, [r7, #20]
 800b8d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800b8e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800b8e4:	d101      	bne.n	800b8ea <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	e037      	b.n	800b95a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b8ea:	697b      	ldr	r3, [r7, #20]
 800b8ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8f0:	461a      	mov	r2, r3
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b8f6:	697b      	ldr	r3, [r7, #20]
 800b8f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b8fc:	691b      	ldr	r3, [r3, #16]
 800b8fe:	697a      	ldr	r2, [r7, #20]
 800b900:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b904:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b908:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b90a:	697b      	ldr	r3, [r7, #20]
 800b90c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b910:	691b      	ldr	r3, [r3, #16]
 800b912:	697a      	ldr	r2, [r7, #20]
 800b914:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b918:	f043 0318 	orr.w	r3, r3, #24
 800b91c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b91e:	697b      	ldr	r3, [r7, #20]
 800b920:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b924:	691b      	ldr	r3, [r3, #16]
 800b926:	697a      	ldr	r2, [r7, #20]
 800b928:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b92c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800b930:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b932:	7afb      	ldrb	r3, [r7, #11]
 800b934:	2b01      	cmp	r3, #1
 800b936:	d10f      	bne.n	800b958 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b938:	697b      	ldr	r3, [r7, #20]
 800b93a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b93e:	461a      	mov	r2, r3
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b944:	697b      	ldr	r3, [r7, #20]
 800b946:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	697a      	ldr	r2, [r7, #20]
 800b94e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800b952:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800b956:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b958:	2300      	movs	r3, #0
}
 800b95a:	4618      	mov	r0, r3
 800b95c:	371c      	adds	r7, #28
 800b95e:	46bd      	mov	sp, r7
 800b960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b964:	4770      	bx	lr
 800b966:	bf00      	nop
 800b968:	4f54300a 	.word	0x4f54300a

0800b96c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b96c:	b480      	push	{r7}
 800b96e:	b085      	sub	sp, #20
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b974:	2300      	movs	r3, #0
 800b976:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	3301      	adds	r3, #1
 800b97c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b984:	d901      	bls.n	800b98a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b986:	2303      	movs	r3, #3
 800b988:	e01b      	b.n	800b9c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	691b      	ldr	r3, [r3, #16]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	daf2      	bge.n	800b978 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b992:	2300      	movs	r3, #0
 800b994:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	691b      	ldr	r3, [r3, #16]
 800b99a:	f043 0201 	orr.w	r2, r3, #1
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	3301      	adds	r3, #1
 800b9a6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b9a8:	68fb      	ldr	r3, [r7, #12]
 800b9aa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800b9ae:	d901      	bls.n	800b9b4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b9b0:	2303      	movs	r3, #3
 800b9b2:	e006      	b.n	800b9c2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	691b      	ldr	r3, [r3, #16]
 800b9b8:	f003 0301 	and.w	r3, r3, #1
 800b9bc:	2b01      	cmp	r3, #1
 800b9be:	d0f0      	beq.n	800b9a2 <USB_CoreReset+0x36>

  return HAL_OK;
 800b9c0:	2300      	movs	r3, #0
}
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	3714      	adds	r7, #20
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9cc:	4770      	bx	lr
	...

0800b9d0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b084      	sub	sp, #16
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
 800b9d8:	460b      	mov	r3, r1
 800b9da:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b9dc:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800b9e0:	f003 ff04 	bl	800f7ec <USBD_static_malloc>
 800b9e4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b9e6:	68fb      	ldr	r3, [r7, #12]
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d109      	bne.n	800ba00 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	32b0      	adds	r2, #176	@ 0xb0
 800b9f6:	2100      	movs	r1, #0
 800b9f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b9fc:	2302      	movs	r3, #2
 800b9fe:	e0d4      	b.n	800bbaa <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ba00:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800ba04:	2100      	movs	r1, #0
 800ba06:	68f8      	ldr	r0, [r7, #12]
 800ba08:	f003 ff34 	bl	800f874 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	32b0      	adds	r2, #176	@ 0xb0
 800ba16:	68f9      	ldr	r1, [r7, #12]
 800ba18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	32b0      	adds	r2, #176	@ 0xb0
 800ba26:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	7c1b      	ldrb	r3, [r3, #16]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d138      	bne.n	800baaa <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ba38:	4b5e      	ldr	r3, [pc, #376]	@ (800bbb4 <USBD_CDC_Init+0x1e4>)
 800ba3a:	7819      	ldrb	r1, [r3, #0]
 800ba3c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ba40:	2202      	movs	r2, #2
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f003 fdaf 	bl	800f5a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ba48:	4b5a      	ldr	r3, [pc, #360]	@ (800bbb4 <USBD_CDC_Init+0x1e4>)
 800ba4a:	781b      	ldrb	r3, [r3, #0]
 800ba4c:	f003 020f 	and.w	r2, r3, #15
 800ba50:	6879      	ldr	r1, [r7, #4]
 800ba52:	4613      	mov	r3, r2
 800ba54:	009b      	lsls	r3, r3, #2
 800ba56:	4413      	add	r3, r2
 800ba58:	009b      	lsls	r3, r3, #2
 800ba5a:	440b      	add	r3, r1
 800ba5c:	3324      	adds	r3, #36	@ 0x24
 800ba5e:	2201      	movs	r2, #1
 800ba60:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ba62:	4b55      	ldr	r3, [pc, #340]	@ (800bbb8 <USBD_CDC_Init+0x1e8>)
 800ba64:	7819      	ldrb	r1, [r3, #0]
 800ba66:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ba6a:	2202      	movs	r2, #2
 800ba6c:	6878      	ldr	r0, [r7, #4]
 800ba6e:	f003 fd9a 	bl	800f5a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ba72:	4b51      	ldr	r3, [pc, #324]	@ (800bbb8 <USBD_CDC_Init+0x1e8>)
 800ba74:	781b      	ldrb	r3, [r3, #0]
 800ba76:	f003 020f 	and.w	r2, r3, #15
 800ba7a:	6879      	ldr	r1, [r7, #4]
 800ba7c:	4613      	mov	r3, r2
 800ba7e:	009b      	lsls	r3, r3, #2
 800ba80:	4413      	add	r3, r2
 800ba82:	009b      	lsls	r3, r3, #2
 800ba84:	440b      	add	r3, r1
 800ba86:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ba8a:	2201      	movs	r2, #1
 800ba8c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ba8e:	4b4b      	ldr	r3, [pc, #300]	@ (800bbbc <USBD_CDC_Init+0x1ec>)
 800ba90:	781b      	ldrb	r3, [r3, #0]
 800ba92:	f003 020f 	and.w	r2, r3, #15
 800ba96:	6879      	ldr	r1, [r7, #4]
 800ba98:	4613      	mov	r3, r2
 800ba9a:	009b      	lsls	r3, r3, #2
 800ba9c:	4413      	add	r3, r2
 800ba9e:	009b      	lsls	r3, r3, #2
 800baa0:	440b      	add	r3, r1
 800baa2:	3326      	adds	r3, #38	@ 0x26
 800baa4:	2210      	movs	r2, #16
 800baa6:	801a      	strh	r2, [r3, #0]
 800baa8:	e035      	b.n	800bb16 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800baaa:	4b42      	ldr	r3, [pc, #264]	@ (800bbb4 <USBD_CDC_Init+0x1e4>)
 800baac:	7819      	ldrb	r1, [r3, #0]
 800baae:	2340      	movs	r3, #64	@ 0x40
 800bab0:	2202      	movs	r2, #2
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f003 fd77 	bl	800f5a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800bab8:	4b3e      	ldr	r3, [pc, #248]	@ (800bbb4 <USBD_CDC_Init+0x1e4>)
 800baba:	781b      	ldrb	r3, [r3, #0]
 800babc:	f003 020f 	and.w	r2, r3, #15
 800bac0:	6879      	ldr	r1, [r7, #4]
 800bac2:	4613      	mov	r3, r2
 800bac4:	009b      	lsls	r3, r3, #2
 800bac6:	4413      	add	r3, r2
 800bac8:	009b      	lsls	r3, r3, #2
 800baca:	440b      	add	r3, r1
 800bacc:	3324      	adds	r3, #36	@ 0x24
 800bace:	2201      	movs	r2, #1
 800bad0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bad2:	4b39      	ldr	r3, [pc, #228]	@ (800bbb8 <USBD_CDC_Init+0x1e8>)
 800bad4:	7819      	ldrb	r1, [r3, #0]
 800bad6:	2340      	movs	r3, #64	@ 0x40
 800bad8:	2202      	movs	r2, #2
 800bada:	6878      	ldr	r0, [r7, #4]
 800badc:	f003 fd63 	bl	800f5a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800bae0:	4b35      	ldr	r3, [pc, #212]	@ (800bbb8 <USBD_CDC_Init+0x1e8>)
 800bae2:	781b      	ldrb	r3, [r3, #0]
 800bae4:	f003 020f 	and.w	r2, r3, #15
 800bae8:	6879      	ldr	r1, [r7, #4]
 800baea:	4613      	mov	r3, r2
 800baec:	009b      	lsls	r3, r3, #2
 800baee:	4413      	add	r3, r2
 800baf0:	009b      	lsls	r3, r3, #2
 800baf2:	440b      	add	r3, r1
 800baf4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800baf8:	2201      	movs	r2, #1
 800bafa:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800bafc:	4b2f      	ldr	r3, [pc, #188]	@ (800bbbc <USBD_CDC_Init+0x1ec>)
 800bafe:	781b      	ldrb	r3, [r3, #0]
 800bb00:	f003 020f 	and.w	r2, r3, #15
 800bb04:	6879      	ldr	r1, [r7, #4]
 800bb06:	4613      	mov	r3, r2
 800bb08:	009b      	lsls	r3, r3, #2
 800bb0a:	4413      	add	r3, r2
 800bb0c:	009b      	lsls	r3, r3, #2
 800bb0e:	440b      	add	r3, r1
 800bb10:	3326      	adds	r3, #38	@ 0x26
 800bb12:	2210      	movs	r2, #16
 800bb14:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bb16:	4b29      	ldr	r3, [pc, #164]	@ (800bbbc <USBD_CDC_Init+0x1ec>)
 800bb18:	7819      	ldrb	r1, [r3, #0]
 800bb1a:	2308      	movs	r3, #8
 800bb1c:	2203      	movs	r2, #3
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	f003 fd41 	bl	800f5a6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800bb24:	4b25      	ldr	r3, [pc, #148]	@ (800bbbc <USBD_CDC_Init+0x1ec>)
 800bb26:	781b      	ldrb	r3, [r3, #0]
 800bb28:	f003 020f 	and.w	r2, r3, #15
 800bb2c:	6879      	ldr	r1, [r7, #4]
 800bb2e:	4613      	mov	r3, r2
 800bb30:	009b      	lsls	r3, r3, #2
 800bb32:	4413      	add	r3, r2
 800bb34:	009b      	lsls	r3, r3, #2
 800bb36:	440b      	add	r3, r1
 800bb38:	3324      	adds	r3, #36	@ 0x24
 800bb3a:	2201      	movs	r2, #1
 800bb3c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	2200      	movs	r2, #0
 800bb42:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bb4c:	687a      	ldr	r2, [r7, #4]
 800bb4e:	33b0      	adds	r3, #176	@ 0xb0
 800bb50:	009b      	lsls	r3, r3, #2
 800bb52:	4413      	add	r3, r2
 800bb54:	685b      	ldr	r3, [r3, #4]
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	2200      	movs	r2, #0
 800bb66:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d101      	bne.n	800bb78 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800bb74:	2302      	movs	r3, #2
 800bb76:	e018      	b.n	800bbaa <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	7c1b      	ldrb	r3, [r3, #16]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d10a      	bne.n	800bb96 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bb80:	4b0d      	ldr	r3, [pc, #52]	@ (800bbb8 <USBD_CDC_Init+0x1e8>)
 800bb82:	7819      	ldrb	r1, [r3, #0]
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bb8a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	f003 fdf8 	bl	800f784 <USBD_LL_PrepareReceive>
 800bb94:	e008      	b.n	800bba8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bb96:	4b08      	ldr	r3, [pc, #32]	@ (800bbb8 <USBD_CDC_Init+0x1e8>)
 800bb98:	7819      	ldrb	r1, [r3, #0]
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800bba0:	2340      	movs	r3, #64	@ 0x40
 800bba2:	6878      	ldr	r0, [r7, #4]
 800bba4:	f003 fdee 	bl	800f784 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bba8:	2300      	movs	r3, #0
}
 800bbaa:	4618      	mov	r0, r3
 800bbac:	3710      	adds	r7, #16
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	bd80      	pop	{r7, pc}
 800bbb2:	bf00      	nop
 800bbb4:	200000e3 	.word	0x200000e3
 800bbb8:	200000e4 	.word	0x200000e4
 800bbbc:	200000e5 	.word	0x200000e5

0800bbc0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b082      	sub	sp, #8
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
 800bbc8:	460b      	mov	r3, r1
 800bbca:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800bbcc:	4b3a      	ldr	r3, [pc, #232]	@ (800bcb8 <USBD_CDC_DeInit+0xf8>)
 800bbce:	781b      	ldrb	r3, [r3, #0]
 800bbd0:	4619      	mov	r1, r3
 800bbd2:	6878      	ldr	r0, [r7, #4]
 800bbd4:	f003 fd0d 	bl	800f5f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800bbd8:	4b37      	ldr	r3, [pc, #220]	@ (800bcb8 <USBD_CDC_DeInit+0xf8>)
 800bbda:	781b      	ldrb	r3, [r3, #0]
 800bbdc:	f003 020f 	and.w	r2, r3, #15
 800bbe0:	6879      	ldr	r1, [r7, #4]
 800bbe2:	4613      	mov	r3, r2
 800bbe4:	009b      	lsls	r3, r3, #2
 800bbe6:	4413      	add	r3, r2
 800bbe8:	009b      	lsls	r3, r3, #2
 800bbea:	440b      	add	r3, r1
 800bbec:	3324      	adds	r3, #36	@ 0x24
 800bbee:	2200      	movs	r2, #0
 800bbf0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800bbf2:	4b32      	ldr	r3, [pc, #200]	@ (800bcbc <USBD_CDC_DeInit+0xfc>)
 800bbf4:	781b      	ldrb	r3, [r3, #0]
 800bbf6:	4619      	mov	r1, r3
 800bbf8:	6878      	ldr	r0, [r7, #4]
 800bbfa:	f003 fcfa 	bl	800f5f2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800bbfe:	4b2f      	ldr	r3, [pc, #188]	@ (800bcbc <USBD_CDC_DeInit+0xfc>)
 800bc00:	781b      	ldrb	r3, [r3, #0]
 800bc02:	f003 020f 	and.w	r2, r3, #15
 800bc06:	6879      	ldr	r1, [r7, #4]
 800bc08:	4613      	mov	r3, r2
 800bc0a:	009b      	lsls	r3, r3, #2
 800bc0c:	4413      	add	r3, r2
 800bc0e:	009b      	lsls	r3, r3, #2
 800bc10:	440b      	add	r3, r1
 800bc12:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bc16:	2200      	movs	r2, #0
 800bc18:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800bc1a:	4b29      	ldr	r3, [pc, #164]	@ (800bcc0 <USBD_CDC_DeInit+0x100>)
 800bc1c:	781b      	ldrb	r3, [r3, #0]
 800bc1e:	4619      	mov	r1, r3
 800bc20:	6878      	ldr	r0, [r7, #4]
 800bc22:	f003 fce6 	bl	800f5f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800bc26:	4b26      	ldr	r3, [pc, #152]	@ (800bcc0 <USBD_CDC_DeInit+0x100>)
 800bc28:	781b      	ldrb	r3, [r3, #0]
 800bc2a:	f003 020f 	and.w	r2, r3, #15
 800bc2e:	6879      	ldr	r1, [r7, #4]
 800bc30:	4613      	mov	r3, r2
 800bc32:	009b      	lsls	r3, r3, #2
 800bc34:	4413      	add	r3, r2
 800bc36:	009b      	lsls	r3, r3, #2
 800bc38:	440b      	add	r3, r1
 800bc3a:	3324      	adds	r3, #36	@ 0x24
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800bc40:	4b1f      	ldr	r3, [pc, #124]	@ (800bcc0 <USBD_CDC_DeInit+0x100>)
 800bc42:	781b      	ldrb	r3, [r3, #0]
 800bc44:	f003 020f 	and.w	r2, r3, #15
 800bc48:	6879      	ldr	r1, [r7, #4]
 800bc4a:	4613      	mov	r3, r2
 800bc4c:	009b      	lsls	r3, r3, #2
 800bc4e:	4413      	add	r3, r2
 800bc50:	009b      	lsls	r3, r3, #2
 800bc52:	440b      	add	r3, r1
 800bc54:	3326      	adds	r3, #38	@ 0x26
 800bc56:	2200      	movs	r2, #0
 800bc58:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	32b0      	adds	r2, #176	@ 0xb0
 800bc64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d01f      	beq.n	800bcac <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bc72:	687a      	ldr	r2, [r7, #4]
 800bc74:	33b0      	adds	r3, #176	@ 0xb0
 800bc76:	009b      	lsls	r3, r3, #2
 800bc78:	4413      	add	r3, r2
 800bc7a:	685b      	ldr	r3, [r3, #4]
 800bc7c:	685b      	ldr	r3, [r3, #4]
 800bc7e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	32b0      	adds	r2, #176	@ 0xb0
 800bc8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc8e:	4618      	mov	r0, r3
 800bc90:	f003 fdba 	bl	800f808 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	32b0      	adds	r2, #176	@ 0xb0
 800bc9e:	2100      	movs	r1, #0
 800bca0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2200      	movs	r2, #0
 800bca8:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800bcac:	2300      	movs	r3, #0
}
 800bcae:	4618      	mov	r0, r3
 800bcb0:	3708      	adds	r7, #8
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bd80      	pop	{r7, pc}
 800bcb6:	bf00      	nop
 800bcb8:	200000e3 	.word	0x200000e3
 800bcbc:	200000e4 	.word	0x200000e4
 800bcc0:	200000e5 	.word	0x200000e5

0800bcc4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b086      	sub	sp, #24
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
 800bccc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	32b0      	adds	r2, #176	@ 0xb0
 800bcd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcdc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800bcde:	2300      	movs	r3, #0
 800bce0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800bce2:	2300      	movs	r3, #0
 800bce4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800bce6:	2300      	movs	r3, #0
 800bce8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800bcea:	693b      	ldr	r3, [r7, #16]
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d101      	bne.n	800bcf4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800bcf0:	2303      	movs	r3, #3
 800bcf2:	e0bf      	b.n	800be74 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	781b      	ldrb	r3, [r3, #0]
 800bcf8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d050      	beq.n	800bda2 <USBD_CDC_Setup+0xde>
 800bd00:	2b20      	cmp	r3, #32
 800bd02:	f040 80af 	bne.w	800be64 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800bd06:	683b      	ldr	r3, [r7, #0]
 800bd08:	88db      	ldrh	r3, [r3, #6]
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d03a      	beq.n	800bd84 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800bd0e:	683b      	ldr	r3, [r7, #0]
 800bd10:	781b      	ldrb	r3, [r3, #0]
 800bd12:	b25b      	sxtb	r3, r3
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	da1b      	bge.n	800bd50 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bd1e:	687a      	ldr	r2, [r7, #4]
 800bd20:	33b0      	adds	r3, #176	@ 0xb0
 800bd22:	009b      	lsls	r3, r3, #2
 800bd24:	4413      	add	r3, r2
 800bd26:	685b      	ldr	r3, [r3, #4]
 800bd28:	689b      	ldr	r3, [r3, #8]
 800bd2a:	683a      	ldr	r2, [r7, #0]
 800bd2c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800bd2e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bd30:	683a      	ldr	r2, [r7, #0]
 800bd32:	88d2      	ldrh	r2, [r2, #6]
 800bd34:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800bd36:	683b      	ldr	r3, [r7, #0]
 800bd38:	88db      	ldrh	r3, [r3, #6]
 800bd3a:	2b07      	cmp	r3, #7
 800bd3c:	bf28      	it	cs
 800bd3e:	2307      	movcs	r3, #7
 800bd40:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800bd42:	693b      	ldr	r3, [r7, #16]
 800bd44:	89fa      	ldrh	r2, [r7, #14]
 800bd46:	4619      	mov	r1, r3
 800bd48:	6878      	ldr	r0, [r7, #4]
 800bd4a:	f001 fd87 	bl	800d85c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800bd4e:	e090      	b.n	800be72 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800bd50:	683b      	ldr	r3, [r7, #0]
 800bd52:	785a      	ldrb	r2, [r3, #1]
 800bd54:	693b      	ldr	r3, [r7, #16]
 800bd56:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	88db      	ldrh	r3, [r3, #6]
 800bd5e:	2b3f      	cmp	r3, #63	@ 0x3f
 800bd60:	d803      	bhi.n	800bd6a <USBD_CDC_Setup+0xa6>
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	88db      	ldrh	r3, [r3, #6]
 800bd66:	b2da      	uxtb	r2, r3
 800bd68:	e000      	b.n	800bd6c <USBD_CDC_Setup+0xa8>
 800bd6a:	2240      	movs	r2, #64	@ 0x40
 800bd6c:	693b      	ldr	r3, [r7, #16]
 800bd6e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800bd72:	6939      	ldr	r1, [r7, #16]
 800bd74:	693b      	ldr	r3, [r7, #16]
 800bd76:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800bd7a:	461a      	mov	r2, r3
 800bd7c:	6878      	ldr	r0, [r7, #4]
 800bd7e:	f001 fd99 	bl	800d8b4 <USBD_CtlPrepareRx>
      break;
 800bd82:	e076      	b.n	800be72 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bd8a:	687a      	ldr	r2, [r7, #4]
 800bd8c:	33b0      	adds	r3, #176	@ 0xb0
 800bd8e:	009b      	lsls	r3, r3, #2
 800bd90:	4413      	add	r3, r2
 800bd92:	685b      	ldr	r3, [r3, #4]
 800bd94:	689b      	ldr	r3, [r3, #8]
 800bd96:	683a      	ldr	r2, [r7, #0]
 800bd98:	7850      	ldrb	r0, [r2, #1]
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	6839      	ldr	r1, [r7, #0]
 800bd9e:	4798      	blx	r3
      break;
 800bda0:	e067      	b.n	800be72 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	785b      	ldrb	r3, [r3, #1]
 800bda6:	2b0b      	cmp	r3, #11
 800bda8:	d851      	bhi.n	800be4e <USBD_CDC_Setup+0x18a>
 800bdaa:	a201      	add	r2, pc, #4	@ (adr r2, 800bdb0 <USBD_CDC_Setup+0xec>)
 800bdac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdb0:	0800bde1 	.word	0x0800bde1
 800bdb4:	0800be5d 	.word	0x0800be5d
 800bdb8:	0800be4f 	.word	0x0800be4f
 800bdbc:	0800be4f 	.word	0x0800be4f
 800bdc0:	0800be4f 	.word	0x0800be4f
 800bdc4:	0800be4f 	.word	0x0800be4f
 800bdc8:	0800be4f 	.word	0x0800be4f
 800bdcc:	0800be4f 	.word	0x0800be4f
 800bdd0:	0800be4f 	.word	0x0800be4f
 800bdd4:	0800be4f 	.word	0x0800be4f
 800bdd8:	0800be0b 	.word	0x0800be0b
 800bddc:	0800be35 	.word	0x0800be35
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bde6:	b2db      	uxtb	r3, r3
 800bde8:	2b03      	cmp	r3, #3
 800bdea:	d107      	bne.n	800bdfc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bdec:	f107 030a 	add.w	r3, r7, #10
 800bdf0:	2202      	movs	r2, #2
 800bdf2:	4619      	mov	r1, r3
 800bdf4:	6878      	ldr	r0, [r7, #4]
 800bdf6:	f001 fd31 	bl	800d85c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bdfa:	e032      	b.n	800be62 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bdfc:	6839      	ldr	r1, [r7, #0]
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	f001 fcbb 	bl	800d77a <USBD_CtlError>
            ret = USBD_FAIL;
 800be04:	2303      	movs	r3, #3
 800be06:	75fb      	strb	r3, [r7, #23]
          break;
 800be08:	e02b      	b.n	800be62 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be10:	b2db      	uxtb	r3, r3
 800be12:	2b03      	cmp	r3, #3
 800be14:	d107      	bne.n	800be26 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800be16:	f107 030d 	add.w	r3, r7, #13
 800be1a:	2201      	movs	r2, #1
 800be1c:	4619      	mov	r1, r3
 800be1e:	6878      	ldr	r0, [r7, #4]
 800be20:	f001 fd1c 	bl	800d85c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800be24:	e01d      	b.n	800be62 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800be26:	6839      	ldr	r1, [r7, #0]
 800be28:	6878      	ldr	r0, [r7, #4]
 800be2a:	f001 fca6 	bl	800d77a <USBD_CtlError>
            ret = USBD_FAIL;
 800be2e:	2303      	movs	r3, #3
 800be30:	75fb      	strb	r3, [r7, #23]
          break;
 800be32:	e016      	b.n	800be62 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be3a:	b2db      	uxtb	r3, r3
 800be3c:	2b03      	cmp	r3, #3
 800be3e:	d00f      	beq.n	800be60 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800be40:	6839      	ldr	r1, [r7, #0]
 800be42:	6878      	ldr	r0, [r7, #4]
 800be44:	f001 fc99 	bl	800d77a <USBD_CtlError>
            ret = USBD_FAIL;
 800be48:	2303      	movs	r3, #3
 800be4a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800be4c:	e008      	b.n	800be60 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800be4e:	6839      	ldr	r1, [r7, #0]
 800be50:	6878      	ldr	r0, [r7, #4]
 800be52:	f001 fc92 	bl	800d77a <USBD_CtlError>
          ret = USBD_FAIL;
 800be56:	2303      	movs	r3, #3
 800be58:	75fb      	strb	r3, [r7, #23]
          break;
 800be5a:	e002      	b.n	800be62 <USBD_CDC_Setup+0x19e>
          break;
 800be5c:	bf00      	nop
 800be5e:	e008      	b.n	800be72 <USBD_CDC_Setup+0x1ae>
          break;
 800be60:	bf00      	nop
      }
      break;
 800be62:	e006      	b.n	800be72 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800be64:	6839      	ldr	r1, [r7, #0]
 800be66:	6878      	ldr	r0, [r7, #4]
 800be68:	f001 fc87 	bl	800d77a <USBD_CtlError>
      ret = USBD_FAIL;
 800be6c:	2303      	movs	r3, #3
 800be6e:	75fb      	strb	r3, [r7, #23]
      break;
 800be70:	bf00      	nop
  }

  return (uint8_t)ret;
 800be72:	7dfb      	ldrb	r3, [r7, #23]
}
 800be74:	4618      	mov	r0, r3
 800be76:	3718      	adds	r7, #24
 800be78:	46bd      	mov	sp, r7
 800be7a:	bd80      	pop	{r7, pc}

0800be7c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b084      	sub	sp, #16
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
 800be84:	460b      	mov	r3, r1
 800be86:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800be8e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	32b0      	adds	r2, #176	@ 0xb0
 800be9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d101      	bne.n	800bea6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800bea2:	2303      	movs	r3, #3
 800bea4:	e065      	b.n	800bf72 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	32b0      	adds	r2, #176	@ 0xb0
 800beb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800beb4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800beb6:	78fb      	ldrb	r3, [r7, #3]
 800beb8:	f003 020f 	and.w	r2, r3, #15
 800bebc:	6879      	ldr	r1, [r7, #4]
 800bebe:	4613      	mov	r3, r2
 800bec0:	009b      	lsls	r3, r3, #2
 800bec2:	4413      	add	r3, r2
 800bec4:	009b      	lsls	r3, r3, #2
 800bec6:	440b      	add	r3, r1
 800bec8:	3318      	adds	r3, #24
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d02f      	beq.n	800bf30 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800bed0:	78fb      	ldrb	r3, [r7, #3]
 800bed2:	f003 020f 	and.w	r2, r3, #15
 800bed6:	6879      	ldr	r1, [r7, #4]
 800bed8:	4613      	mov	r3, r2
 800beda:	009b      	lsls	r3, r3, #2
 800bedc:	4413      	add	r3, r2
 800bede:	009b      	lsls	r3, r3, #2
 800bee0:	440b      	add	r3, r1
 800bee2:	3318      	adds	r3, #24
 800bee4:	681a      	ldr	r2, [r3, #0]
 800bee6:	78fb      	ldrb	r3, [r7, #3]
 800bee8:	f003 010f 	and.w	r1, r3, #15
 800beec:	68f8      	ldr	r0, [r7, #12]
 800beee:	460b      	mov	r3, r1
 800bef0:	00db      	lsls	r3, r3, #3
 800bef2:	440b      	add	r3, r1
 800bef4:	009b      	lsls	r3, r3, #2
 800bef6:	4403      	add	r3, r0
 800bef8:	331c      	adds	r3, #28
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	fbb2 f1f3 	udiv	r1, r2, r3
 800bf00:	fb01 f303 	mul.w	r3, r1, r3
 800bf04:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d112      	bne.n	800bf30 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800bf0a:	78fb      	ldrb	r3, [r7, #3]
 800bf0c:	f003 020f 	and.w	r2, r3, #15
 800bf10:	6879      	ldr	r1, [r7, #4]
 800bf12:	4613      	mov	r3, r2
 800bf14:	009b      	lsls	r3, r3, #2
 800bf16:	4413      	add	r3, r2
 800bf18:	009b      	lsls	r3, r3, #2
 800bf1a:	440b      	add	r3, r1
 800bf1c:	3318      	adds	r3, #24
 800bf1e:	2200      	movs	r2, #0
 800bf20:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bf22:	78f9      	ldrb	r1, [r7, #3]
 800bf24:	2300      	movs	r3, #0
 800bf26:	2200      	movs	r2, #0
 800bf28:	6878      	ldr	r0, [r7, #4]
 800bf2a:	f003 fc0a 	bl	800f742 <USBD_LL_Transmit>
 800bf2e:	e01f      	b.n	800bf70 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800bf30:	68bb      	ldr	r3, [r7, #8]
 800bf32:	2200      	movs	r2, #0
 800bf34:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bf3e:	687a      	ldr	r2, [r7, #4]
 800bf40:	33b0      	adds	r3, #176	@ 0xb0
 800bf42:	009b      	lsls	r3, r3, #2
 800bf44:	4413      	add	r3, r2
 800bf46:	685b      	ldr	r3, [r3, #4]
 800bf48:	691b      	ldr	r3, [r3, #16]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d010      	beq.n	800bf70 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bf54:	687a      	ldr	r2, [r7, #4]
 800bf56:	33b0      	adds	r3, #176	@ 0xb0
 800bf58:	009b      	lsls	r3, r3, #2
 800bf5a:	4413      	add	r3, r2
 800bf5c:	685b      	ldr	r3, [r3, #4]
 800bf5e:	691b      	ldr	r3, [r3, #16]
 800bf60:	68ba      	ldr	r2, [r7, #8]
 800bf62:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800bf66:	68ba      	ldr	r2, [r7, #8]
 800bf68:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800bf6c:	78fa      	ldrb	r2, [r7, #3]
 800bf6e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800bf70:	2300      	movs	r3, #0
}
 800bf72:	4618      	mov	r0, r3
 800bf74:	3710      	adds	r7, #16
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}

0800bf7a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bf7a:	b580      	push	{r7, lr}
 800bf7c:	b084      	sub	sp, #16
 800bf7e:	af00      	add	r7, sp, #0
 800bf80:	6078      	str	r0, [r7, #4]
 800bf82:	460b      	mov	r3, r1
 800bf84:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	32b0      	adds	r2, #176	@ 0xb0
 800bf90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf94:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	32b0      	adds	r2, #176	@ 0xb0
 800bfa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d101      	bne.n	800bfac <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800bfa8:	2303      	movs	r3, #3
 800bfaa:	e01a      	b.n	800bfe2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bfac:	78fb      	ldrb	r3, [r7, #3]
 800bfae:	4619      	mov	r1, r3
 800bfb0:	6878      	ldr	r0, [r7, #4]
 800bfb2:	f003 fc08 	bl	800f7c6 <USBD_LL_GetRxDataSize>
 800bfb6:	4602      	mov	r2, r0
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800bfc4:	687a      	ldr	r2, [r7, #4]
 800bfc6:	33b0      	adds	r3, #176	@ 0xb0
 800bfc8:	009b      	lsls	r3, r3, #2
 800bfca:	4413      	add	r3, r2
 800bfcc:	685b      	ldr	r3, [r3, #4]
 800bfce:	68db      	ldr	r3, [r3, #12]
 800bfd0:	68fa      	ldr	r2, [r7, #12]
 800bfd2:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800bfd6:	68fa      	ldr	r2, [r7, #12]
 800bfd8:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800bfdc:	4611      	mov	r1, r2
 800bfde:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800bfe0:	2300      	movs	r3, #0
}
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	3710      	adds	r7, #16
 800bfe6:	46bd      	mov	sp, r7
 800bfe8:	bd80      	pop	{r7, pc}

0800bfea <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bfea:	b580      	push	{r7, lr}
 800bfec:	b084      	sub	sp, #16
 800bfee:	af00      	add	r7, sp, #0
 800bff0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	32b0      	adds	r2, #176	@ 0xb0
 800bffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c000:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c002:	68fb      	ldr	r3, [r7, #12]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d101      	bne.n	800c00c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c008:	2303      	movs	r3, #3
 800c00a:	e024      	b.n	800c056 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c012:	687a      	ldr	r2, [r7, #4]
 800c014:	33b0      	adds	r3, #176	@ 0xb0
 800c016:	009b      	lsls	r3, r3, #2
 800c018:	4413      	add	r3, r2
 800c01a:	685b      	ldr	r3, [r3, #4]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d019      	beq.n	800c054 <USBD_CDC_EP0_RxReady+0x6a>
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800c026:	2bff      	cmp	r3, #255	@ 0xff
 800c028:	d014      	beq.n	800c054 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c030:	687a      	ldr	r2, [r7, #4]
 800c032:	33b0      	adds	r3, #176	@ 0xb0
 800c034:	009b      	lsls	r3, r3, #2
 800c036:	4413      	add	r3, r2
 800c038:	685b      	ldr	r3, [r3, #4]
 800c03a:	689b      	ldr	r3, [r3, #8]
 800c03c:	68fa      	ldr	r2, [r7, #12]
 800c03e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800c042:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c044:	68fa      	ldr	r2, [r7, #12]
 800c046:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c04a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	22ff      	movs	r2, #255	@ 0xff
 800c050:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800c054:	2300      	movs	r3, #0
}
 800c056:	4618      	mov	r0, r3
 800c058:	3710      	adds	r7, #16
 800c05a:	46bd      	mov	sp, r7
 800c05c:	bd80      	pop	{r7, pc}
	...

0800c060 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b086      	sub	sp, #24
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c068:	2182      	movs	r1, #130	@ 0x82
 800c06a:	4818      	ldr	r0, [pc, #96]	@ (800c0cc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c06c:	f000 fd4f 	bl	800cb0e <USBD_GetEpDesc>
 800c070:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c072:	2101      	movs	r1, #1
 800c074:	4815      	ldr	r0, [pc, #84]	@ (800c0cc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c076:	f000 fd4a 	bl	800cb0e <USBD_GetEpDesc>
 800c07a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c07c:	2181      	movs	r1, #129	@ 0x81
 800c07e:	4813      	ldr	r0, [pc, #76]	@ (800c0cc <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c080:	f000 fd45 	bl	800cb0e <USBD_GetEpDesc>
 800c084:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c086:	697b      	ldr	r3, [r7, #20]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d002      	beq.n	800c092 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c08c:	697b      	ldr	r3, [r7, #20]
 800c08e:	2210      	movs	r2, #16
 800c090:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c092:	693b      	ldr	r3, [r7, #16]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d006      	beq.n	800c0a6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c098:	693b      	ldr	r3, [r7, #16]
 800c09a:	2200      	movs	r2, #0
 800c09c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c0a0:	711a      	strb	r2, [r3, #4]
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c0a6:	68fb      	ldr	r3, [r7, #12]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d006      	beq.n	800c0ba <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	2200      	movs	r2, #0
 800c0b0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c0b4:	711a      	strb	r2, [r3, #4]
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	2243      	movs	r2, #67	@ 0x43
 800c0be:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c0c0:	4b02      	ldr	r3, [pc, #8]	@ (800c0cc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	3718      	adds	r7, #24
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	bd80      	pop	{r7, pc}
 800c0ca:	bf00      	nop
 800c0cc:	200000a0 	.word	0x200000a0

0800c0d0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b086      	sub	sp, #24
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c0d8:	2182      	movs	r1, #130	@ 0x82
 800c0da:	4818      	ldr	r0, [pc, #96]	@ (800c13c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c0dc:	f000 fd17 	bl	800cb0e <USBD_GetEpDesc>
 800c0e0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c0e2:	2101      	movs	r1, #1
 800c0e4:	4815      	ldr	r0, [pc, #84]	@ (800c13c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c0e6:	f000 fd12 	bl	800cb0e <USBD_GetEpDesc>
 800c0ea:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c0ec:	2181      	movs	r1, #129	@ 0x81
 800c0ee:	4813      	ldr	r0, [pc, #76]	@ (800c13c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c0f0:	f000 fd0d 	bl	800cb0e <USBD_GetEpDesc>
 800c0f4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c0f6:	697b      	ldr	r3, [r7, #20]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	d002      	beq.n	800c102 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c0fc:	697b      	ldr	r3, [r7, #20]
 800c0fe:	2210      	movs	r2, #16
 800c100:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c102:	693b      	ldr	r3, [r7, #16]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d006      	beq.n	800c116 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c108:	693b      	ldr	r3, [r7, #16]
 800c10a:	2200      	movs	r2, #0
 800c10c:	711a      	strb	r2, [r3, #4]
 800c10e:	2200      	movs	r2, #0
 800c110:	f042 0202 	orr.w	r2, r2, #2
 800c114:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	d006      	beq.n	800c12a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	2200      	movs	r2, #0
 800c120:	711a      	strb	r2, [r3, #4]
 800c122:	2200      	movs	r2, #0
 800c124:	f042 0202 	orr.w	r2, r2, #2
 800c128:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	2243      	movs	r2, #67	@ 0x43
 800c12e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c130:	4b02      	ldr	r3, [pc, #8]	@ (800c13c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c132:	4618      	mov	r0, r3
 800c134:	3718      	adds	r7, #24
 800c136:	46bd      	mov	sp, r7
 800c138:	bd80      	pop	{r7, pc}
 800c13a:	bf00      	nop
 800c13c:	200000a0 	.word	0x200000a0

0800c140 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b086      	sub	sp, #24
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c148:	2182      	movs	r1, #130	@ 0x82
 800c14a:	4818      	ldr	r0, [pc, #96]	@ (800c1ac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c14c:	f000 fcdf 	bl	800cb0e <USBD_GetEpDesc>
 800c150:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c152:	2101      	movs	r1, #1
 800c154:	4815      	ldr	r0, [pc, #84]	@ (800c1ac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c156:	f000 fcda 	bl	800cb0e <USBD_GetEpDesc>
 800c15a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c15c:	2181      	movs	r1, #129	@ 0x81
 800c15e:	4813      	ldr	r0, [pc, #76]	@ (800c1ac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c160:	f000 fcd5 	bl	800cb0e <USBD_GetEpDesc>
 800c164:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c166:	697b      	ldr	r3, [r7, #20]
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d002      	beq.n	800c172 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c16c:	697b      	ldr	r3, [r7, #20]
 800c16e:	2210      	movs	r2, #16
 800c170:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c172:	693b      	ldr	r3, [r7, #16]
 800c174:	2b00      	cmp	r3, #0
 800c176:	d006      	beq.n	800c186 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c178:	693b      	ldr	r3, [r7, #16]
 800c17a:	2200      	movs	r2, #0
 800c17c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c180:	711a      	strb	r2, [r3, #4]
 800c182:	2200      	movs	r2, #0
 800c184:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c186:	68fb      	ldr	r3, [r7, #12]
 800c188:	2b00      	cmp	r3, #0
 800c18a:	d006      	beq.n	800c19a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	2200      	movs	r2, #0
 800c190:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800c194:	711a      	strb	r2, [r3, #4]
 800c196:	2200      	movs	r2, #0
 800c198:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	2243      	movs	r2, #67	@ 0x43
 800c19e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c1a0:	4b02      	ldr	r3, [pc, #8]	@ (800c1ac <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c1a2:	4618      	mov	r0, r3
 800c1a4:	3718      	adds	r7, #24
 800c1a6:	46bd      	mov	sp, r7
 800c1a8:	bd80      	pop	{r7, pc}
 800c1aa:	bf00      	nop
 800c1ac:	200000a0 	.word	0x200000a0

0800c1b0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c1b0:	b480      	push	{r7}
 800c1b2:	b083      	sub	sp, #12
 800c1b4:	af00      	add	r7, sp, #0
 800c1b6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	220a      	movs	r2, #10
 800c1bc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c1be:	4b03      	ldr	r3, [pc, #12]	@ (800c1cc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	370c      	adds	r7, #12
 800c1c4:	46bd      	mov	sp, r7
 800c1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ca:	4770      	bx	lr
 800c1cc:	2000005c 	.word	0x2000005c

0800c1d0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c1d0:	b480      	push	{r7}
 800c1d2:	b083      	sub	sp, #12
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
 800c1d8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c1da:	683b      	ldr	r3, [r7, #0]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d101      	bne.n	800c1e4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c1e0:	2303      	movs	r3, #3
 800c1e2:	e009      	b.n	800c1f8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800c1ea:	687a      	ldr	r2, [r7, #4]
 800c1ec:	33b0      	adds	r3, #176	@ 0xb0
 800c1ee:	009b      	lsls	r3, r3, #2
 800c1f0:	4413      	add	r3, r2
 800c1f2:	683a      	ldr	r2, [r7, #0]
 800c1f4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c1f6:	2300      	movs	r3, #0
}
 800c1f8:	4618      	mov	r0, r3
 800c1fa:	370c      	adds	r7, #12
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c202:	4770      	bx	lr

0800c204 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c204:	b480      	push	{r7}
 800c206:	b087      	sub	sp, #28
 800c208:	af00      	add	r7, sp, #0
 800c20a:	60f8      	str	r0, [r7, #12]
 800c20c:	60b9      	str	r1, [r7, #8]
 800c20e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	32b0      	adds	r2, #176	@ 0xb0
 800c21a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c21e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c220:	697b      	ldr	r3, [r7, #20]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d101      	bne.n	800c22a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c226:	2303      	movs	r3, #3
 800c228:	e008      	b.n	800c23c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c22a:	697b      	ldr	r3, [r7, #20]
 800c22c:	68ba      	ldr	r2, [r7, #8]
 800c22e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800c232:	697b      	ldr	r3, [r7, #20]
 800c234:	687a      	ldr	r2, [r7, #4]
 800c236:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800c23a:	2300      	movs	r3, #0
}
 800c23c:	4618      	mov	r0, r3
 800c23e:	371c      	adds	r7, #28
 800c240:	46bd      	mov	sp, r7
 800c242:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c246:	4770      	bx	lr

0800c248 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c248:	b480      	push	{r7}
 800c24a:	b085      	sub	sp, #20
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
 800c250:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	32b0      	adds	r2, #176	@ 0xb0
 800c25c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c260:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d101      	bne.n	800c26c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c268:	2303      	movs	r3, #3
 800c26a:	e004      	b.n	800c276 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	683a      	ldr	r2, [r7, #0]
 800c270:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800c274:	2300      	movs	r3, #0
}
 800c276:	4618      	mov	r0, r3
 800c278:	3714      	adds	r7, #20
 800c27a:	46bd      	mov	sp, r7
 800c27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c280:	4770      	bx	lr
	...

0800c284 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b084      	sub	sp, #16
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	32b0      	adds	r2, #176	@ 0xb0
 800c296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c29a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800c29c:	2301      	movs	r3, #1
 800c29e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c2a0:	68bb      	ldr	r3, [r7, #8]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d101      	bne.n	800c2aa <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c2a6:	2303      	movs	r3, #3
 800c2a8:	e025      	b.n	800c2f6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800c2aa:	68bb      	ldr	r3, [r7, #8]
 800c2ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d11f      	bne.n	800c2f4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c2b4:	68bb      	ldr	r3, [r7, #8]
 800c2b6:	2201      	movs	r2, #1
 800c2b8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800c2bc:	4b10      	ldr	r3, [pc, #64]	@ (800c300 <USBD_CDC_TransmitPacket+0x7c>)
 800c2be:	781b      	ldrb	r3, [r3, #0]
 800c2c0:	f003 020f 	and.w	r2, r3, #15
 800c2c4:	68bb      	ldr	r3, [r7, #8]
 800c2c6:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800c2ca:	6878      	ldr	r0, [r7, #4]
 800c2cc:	4613      	mov	r3, r2
 800c2ce:	009b      	lsls	r3, r3, #2
 800c2d0:	4413      	add	r3, r2
 800c2d2:	009b      	lsls	r3, r3, #2
 800c2d4:	4403      	add	r3, r0
 800c2d6:	3318      	adds	r3, #24
 800c2d8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c2da:	4b09      	ldr	r3, [pc, #36]	@ (800c300 <USBD_CDC_TransmitPacket+0x7c>)
 800c2dc:	7819      	ldrb	r1, [r3, #0]
 800c2de:	68bb      	ldr	r3, [r7, #8]
 800c2e0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800c2e4:	68bb      	ldr	r3, [r7, #8]
 800c2e6:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800c2ea:	6878      	ldr	r0, [r7, #4]
 800c2ec:	f003 fa29 	bl	800f742 <USBD_LL_Transmit>

    ret = USBD_OK;
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c2f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	3710      	adds	r7, #16
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	bd80      	pop	{r7, pc}
 800c2fe:	bf00      	nop
 800c300:	200000e3 	.word	0x200000e3

0800c304 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c304:	b580      	push	{r7, lr}
 800c306:	b084      	sub	sp, #16
 800c308:	af00      	add	r7, sp, #0
 800c30a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	32b0      	adds	r2, #176	@ 0xb0
 800c316:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c31a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	32b0      	adds	r2, #176	@ 0xb0
 800c326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d101      	bne.n	800c332 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c32e:	2303      	movs	r3, #3
 800c330:	e018      	b.n	800c364 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	7c1b      	ldrb	r3, [r3, #16]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d10a      	bne.n	800c350 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c33a:	4b0c      	ldr	r3, [pc, #48]	@ (800c36c <USBD_CDC_ReceivePacket+0x68>)
 800c33c:	7819      	ldrb	r1, [r3, #0]
 800c33e:	68fb      	ldr	r3, [r7, #12]
 800c340:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c344:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c348:	6878      	ldr	r0, [r7, #4]
 800c34a:	f003 fa1b 	bl	800f784 <USBD_LL_PrepareReceive>
 800c34e:	e008      	b.n	800c362 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c350:	4b06      	ldr	r3, [pc, #24]	@ (800c36c <USBD_CDC_ReceivePacket+0x68>)
 800c352:	7819      	ldrb	r1, [r3, #0]
 800c354:	68fb      	ldr	r3, [r7, #12]
 800c356:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800c35a:	2340      	movs	r3, #64	@ 0x40
 800c35c:	6878      	ldr	r0, [r7, #4]
 800c35e:	f003 fa11 	bl	800f784 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c362:	2300      	movs	r3, #0
}
 800c364:	4618      	mov	r0, r3
 800c366:	3710      	adds	r7, #16
 800c368:	46bd      	mov	sp, r7
 800c36a:	bd80      	pop	{r7, pc}
 800c36c:	200000e4 	.word	0x200000e4

0800c370 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c370:	b580      	push	{r7, lr}
 800c372:	b086      	sub	sp, #24
 800c374:	af00      	add	r7, sp, #0
 800c376:	60f8      	str	r0, [r7, #12]
 800c378:	60b9      	str	r1, [r7, #8]
 800c37a:	4613      	mov	r3, r2
 800c37c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c37e:	68fb      	ldr	r3, [r7, #12]
 800c380:	2b00      	cmp	r3, #0
 800c382:	d101      	bne.n	800c388 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c384:	2303      	movs	r3, #3
 800c386:	e01f      	b.n	800c3c8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	2200      	movs	r2, #0
 800c38c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	2200      	movs	r2, #0
 800c394:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	2200      	movs	r2, #0
 800c39c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c3a0:	68bb      	ldr	r3, [r7, #8]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d003      	beq.n	800c3ae <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	68ba      	ldr	r2, [r7, #8]
 800c3aa:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c3ae:	68fb      	ldr	r3, [r7, #12]
 800c3b0:	2201      	movs	r2, #1
 800c3b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	79fa      	ldrb	r2, [r7, #7]
 800c3ba:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c3bc:	68f8      	ldr	r0, [r7, #12]
 800c3be:	f003 f88b 	bl	800f4d8 <USBD_LL_Init>
 800c3c2:	4603      	mov	r3, r0
 800c3c4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c3c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3c8:	4618      	mov	r0, r3
 800c3ca:	3718      	adds	r7, #24
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bd80      	pop	{r7, pc}

0800c3d0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c3d0:	b580      	push	{r7, lr}
 800c3d2:	b084      	sub	sp, #16
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
 800c3d8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c3da:	2300      	movs	r3, #0
 800c3dc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	d101      	bne.n	800c3e8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c3e4:	2303      	movs	r3, #3
 800c3e6:	e025      	b.n	800c434 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c3e8:	687b      	ldr	r3, [r7, #4]
 800c3ea:	683a      	ldr	r2, [r7, #0]
 800c3ec:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	32ae      	adds	r2, #174	@ 0xae
 800c3fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c400:	2b00      	cmp	r3, #0
 800c402:	d00f      	beq.n	800c424 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	32ae      	adds	r2, #174	@ 0xae
 800c40e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c414:	f107 020e 	add.w	r2, r7, #14
 800c418:	4610      	mov	r0, r2
 800c41a:	4798      	blx	r3
 800c41c:	4602      	mov	r2, r0
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800c42a:	1c5a      	adds	r2, r3, #1
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800c432:	2300      	movs	r3, #0
}
 800c434:	4618      	mov	r0, r3
 800c436:	3710      	adds	r7, #16
 800c438:	46bd      	mov	sp, r7
 800c43a:	bd80      	pop	{r7, pc}

0800c43c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b082      	sub	sp, #8
 800c440:	af00      	add	r7, sp, #0
 800c442:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c444:	6878      	ldr	r0, [r7, #4]
 800c446:	f003 f893 	bl	800f570 <USBD_LL_Start>
 800c44a:	4603      	mov	r3, r0
}
 800c44c:	4618      	mov	r0, r3
 800c44e:	3708      	adds	r7, #8
 800c450:	46bd      	mov	sp, r7
 800c452:	bd80      	pop	{r7, pc}

0800c454 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c454:	b480      	push	{r7}
 800c456:	b083      	sub	sp, #12
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c45c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c45e:	4618      	mov	r0, r3
 800c460:	370c      	adds	r7, #12
 800c462:	46bd      	mov	sp, r7
 800c464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c468:	4770      	bx	lr

0800c46a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c46a:	b580      	push	{r7, lr}
 800c46c:	b084      	sub	sp, #16
 800c46e:	af00      	add	r7, sp, #0
 800c470:	6078      	str	r0, [r7, #4]
 800c472:	460b      	mov	r3, r1
 800c474:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c476:	2300      	movs	r3, #0
 800c478:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c480:	2b00      	cmp	r3, #0
 800c482:	d009      	beq.n	800c498 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	78fa      	ldrb	r2, [r7, #3]
 800c48e:	4611      	mov	r1, r2
 800c490:	6878      	ldr	r0, [r7, #4]
 800c492:	4798      	blx	r3
 800c494:	4603      	mov	r3, r0
 800c496:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c498:	7bfb      	ldrb	r3, [r7, #15]
}
 800c49a:	4618      	mov	r0, r3
 800c49c:	3710      	adds	r7, #16
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bd80      	pop	{r7, pc}

0800c4a2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c4a2:	b580      	push	{r7, lr}
 800c4a4:	b084      	sub	sp, #16
 800c4a6:	af00      	add	r7, sp, #0
 800c4a8:	6078      	str	r0, [r7, #4]
 800c4aa:	460b      	mov	r3, r1
 800c4ac:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c4b8:	685b      	ldr	r3, [r3, #4]
 800c4ba:	78fa      	ldrb	r2, [r7, #3]
 800c4bc:	4611      	mov	r1, r2
 800c4be:	6878      	ldr	r0, [r7, #4]
 800c4c0:	4798      	blx	r3
 800c4c2:	4603      	mov	r3, r0
 800c4c4:	2b00      	cmp	r3, #0
 800c4c6:	d001      	beq.n	800c4cc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c4c8:	2303      	movs	r3, #3
 800c4ca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c4cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	3710      	adds	r7, #16
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd80      	pop	{r7, pc}

0800c4d6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c4d6:	b580      	push	{r7, lr}
 800c4d8:	b084      	sub	sp, #16
 800c4da:	af00      	add	r7, sp, #0
 800c4dc:	6078      	str	r0, [r7, #4]
 800c4de:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c4e6:	6839      	ldr	r1, [r7, #0]
 800c4e8:	4618      	mov	r0, r3
 800c4ea:	f001 f90c 	bl	800d706 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	2201      	movs	r2, #1
 800c4f2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800c4fc:	461a      	mov	r2, r3
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c50a:	f003 031f 	and.w	r3, r3, #31
 800c50e:	2b02      	cmp	r3, #2
 800c510:	d01a      	beq.n	800c548 <USBD_LL_SetupStage+0x72>
 800c512:	2b02      	cmp	r3, #2
 800c514:	d822      	bhi.n	800c55c <USBD_LL_SetupStage+0x86>
 800c516:	2b00      	cmp	r3, #0
 800c518:	d002      	beq.n	800c520 <USBD_LL_SetupStage+0x4a>
 800c51a:	2b01      	cmp	r3, #1
 800c51c:	d00a      	beq.n	800c534 <USBD_LL_SetupStage+0x5e>
 800c51e:	e01d      	b.n	800c55c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c526:	4619      	mov	r1, r3
 800c528:	6878      	ldr	r0, [r7, #4]
 800c52a:	f000 fb63 	bl	800cbf4 <USBD_StdDevReq>
 800c52e:	4603      	mov	r3, r0
 800c530:	73fb      	strb	r3, [r7, #15]
      break;
 800c532:	e020      	b.n	800c576 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c53a:	4619      	mov	r1, r3
 800c53c:	6878      	ldr	r0, [r7, #4]
 800c53e:	f000 fbcb 	bl	800ccd8 <USBD_StdItfReq>
 800c542:	4603      	mov	r3, r0
 800c544:	73fb      	strb	r3, [r7, #15]
      break;
 800c546:	e016      	b.n	800c576 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800c54e:	4619      	mov	r1, r3
 800c550:	6878      	ldr	r0, [r7, #4]
 800c552:	f000 fc2d 	bl	800cdb0 <USBD_StdEPReq>
 800c556:	4603      	mov	r3, r0
 800c558:	73fb      	strb	r3, [r7, #15]
      break;
 800c55a:	e00c      	b.n	800c576 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c562:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c566:	b2db      	uxtb	r3, r3
 800c568:	4619      	mov	r1, r3
 800c56a:	6878      	ldr	r0, [r7, #4]
 800c56c:	f003 f860 	bl	800f630 <USBD_LL_StallEP>
 800c570:	4603      	mov	r3, r0
 800c572:	73fb      	strb	r3, [r7, #15]
      break;
 800c574:	bf00      	nop
  }

  return ret;
 800c576:	7bfb      	ldrb	r3, [r7, #15]
}
 800c578:	4618      	mov	r0, r3
 800c57a:	3710      	adds	r7, #16
 800c57c:	46bd      	mov	sp, r7
 800c57e:	bd80      	pop	{r7, pc}

0800c580 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b086      	sub	sp, #24
 800c584:	af00      	add	r7, sp, #0
 800c586:	60f8      	str	r0, [r7, #12]
 800c588:	460b      	mov	r3, r1
 800c58a:	607a      	str	r2, [r7, #4]
 800c58c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c58e:	2300      	movs	r3, #0
 800c590:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c592:	7afb      	ldrb	r3, [r7, #11]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d16e      	bne.n	800c676 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800c59e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c5a6:	2b03      	cmp	r3, #3
 800c5a8:	f040 8098 	bne.w	800c6dc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c5ac:	693b      	ldr	r3, [r7, #16]
 800c5ae:	689a      	ldr	r2, [r3, #8]
 800c5b0:	693b      	ldr	r3, [r7, #16]
 800c5b2:	68db      	ldr	r3, [r3, #12]
 800c5b4:	429a      	cmp	r2, r3
 800c5b6:	d913      	bls.n	800c5e0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c5b8:	693b      	ldr	r3, [r7, #16]
 800c5ba:	689a      	ldr	r2, [r3, #8]
 800c5bc:	693b      	ldr	r3, [r7, #16]
 800c5be:	68db      	ldr	r3, [r3, #12]
 800c5c0:	1ad2      	subs	r2, r2, r3
 800c5c2:	693b      	ldr	r3, [r7, #16]
 800c5c4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c5c6:	693b      	ldr	r3, [r7, #16]
 800c5c8:	68da      	ldr	r2, [r3, #12]
 800c5ca:	693b      	ldr	r3, [r7, #16]
 800c5cc:	689b      	ldr	r3, [r3, #8]
 800c5ce:	4293      	cmp	r3, r2
 800c5d0:	bf28      	it	cs
 800c5d2:	4613      	movcs	r3, r2
 800c5d4:	461a      	mov	r2, r3
 800c5d6:	6879      	ldr	r1, [r7, #4]
 800c5d8:	68f8      	ldr	r0, [r7, #12]
 800c5da:	f001 f988 	bl	800d8ee <USBD_CtlContinueRx>
 800c5de:	e07d      	b.n	800c6dc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800c5e6:	f003 031f 	and.w	r3, r3, #31
 800c5ea:	2b02      	cmp	r3, #2
 800c5ec:	d014      	beq.n	800c618 <USBD_LL_DataOutStage+0x98>
 800c5ee:	2b02      	cmp	r3, #2
 800c5f0:	d81d      	bhi.n	800c62e <USBD_LL_DataOutStage+0xae>
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d002      	beq.n	800c5fc <USBD_LL_DataOutStage+0x7c>
 800c5f6:	2b01      	cmp	r3, #1
 800c5f8:	d003      	beq.n	800c602 <USBD_LL_DataOutStage+0x82>
 800c5fa:	e018      	b.n	800c62e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	75bb      	strb	r3, [r7, #22]
            break;
 800c600:	e018      	b.n	800c634 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c608:	b2db      	uxtb	r3, r3
 800c60a:	4619      	mov	r1, r3
 800c60c:	68f8      	ldr	r0, [r7, #12]
 800c60e:	f000 fa64 	bl	800cada <USBD_CoreFindIF>
 800c612:	4603      	mov	r3, r0
 800c614:	75bb      	strb	r3, [r7, #22]
            break;
 800c616:	e00d      	b.n	800c634 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800c61e:	b2db      	uxtb	r3, r3
 800c620:	4619      	mov	r1, r3
 800c622:	68f8      	ldr	r0, [r7, #12]
 800c624:	f000 fa66 	bl	800caf4 <USBD_CoreFindEP>
 800c628:	4603      	mov	r3, r0
 800c62a:	75bb      	strb	r3, [r7, #22]
            break;
 800c62c:	e002      	b.n	800c634 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c62e:	2300      	movs	r3, #0
 800c630:	75bb      	strb	r3, [r7, #22]
            break;
 800c632:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c634:	7dbb      	ldrb	r3, [r7, #22]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d119      	bne.n	800c66e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c640:	b2db      	uxtb	r3, r3
 800c642:	2b03      	cmp	r3, #3
 800c644:	d113      	bne.n	800c66e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c646:	7dba      	ldrb	r2, [r7, #22]
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	32ae      	adds	r2, #174	@ 0xae
 800c64c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c650:	691b      	ldr	r3, [r3, #16]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d00b      	beq.n	800c66e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c656:	7dba      	ldrb	r2, [r7, #22]
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c65e:	7dba      	ldrb	r2, [r7, #22]
 800c660:	68fb      	ldr	r3, [r7, #12]
 800c662:	32ae      	adds	r2, #174	@ 0xae
 800c664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c668:	691b      	ldr	r3, [r3, #16]
 800c66a:	68f8      	ldr	r0, [r7, #12]
 800c66c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c66e:	68f8      	ldr	r0, [r7, #12]
 800c670:	f001 f94e 	bl	800d910 <USBD_CtlSendStatus>
 800c674:	e032      	b.n	800c6dc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c676:	7afb      	ldrb	r3, [r7, #11]
 800c678:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c67c:	b2db      	uxtb	r3, r3
 800c67e:	4619      	mov	r1, r3
 800c680:	68f8      	ldr	r0, [r7, #12]
 800c682:	f000 fa37 	bl	800caf4 <USBD_CoreFindEP>
 800c686:	4603      	mov	r3, r0
 800c688:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c68a:	7dbb      	ldrb	r3, [r7, #22]
 800c68c:	2bff      	cmp	r3, #255	@ 0xff
 800c68e:	d025      	beq.n	800c6dc <USBD_LL_DataOutStage+0x15c>
 800c690:	7dbb      	ldrb	r3, [r7, #22]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d122      	bne.n	800c6dc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c69c:	b2db      	uxtb	r3, r3
 800c69e:	2b03      	cmp	r3, #3
 800c6a0:	d117      	bne.n	800c6d2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c6a2:	7dba      	ldrb	r2, [r7, #22]
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	32ae      	adds	r2, #174	@ 0xae
 800c6a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6ac:	699b      	ldr	r3, [r3, #24]
 800c6ae:	2b00      	cmp	r3, #0
 800c6b0:	d00f      	beq.n	800c6d2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800c6b2:	7dba      	ldrb	r2, [r7, #22]
 800c6b4:	68fb      	ldr	r3, [r7, #12]
 800c6b6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c6ba:	7dba      	ldrb	r2, [r7, #22]
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	32ae      	adds	r2, #174	@ 0xae
 800c6c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6c4:	699b      	ldr	r3, [r3, #24]
 800c6c6:	7afa      	ldrb	r2, [r7, #11]
 800c6c8:	4611      	mov	r1, r2
 800c6ca:	68f8      	ldr	r0, [r7, #12]
 800c6cc:	4798      	blx	r3
 800c6ce:	4603      	mov	r3, r0
 800c6d0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c6d2:	7dfb      	ldrb	r3, [r7, #23]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d001      	beq.n	800c6dc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c6d8:	7dfb      	ldrb	r3, [r7, #23]
 800c6da:	e000      	b.n	800c6de <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c6dc:	2300      	movs	r3, #0
}
 800c6de:	4618      	mov	r0, r3
 800c6e0:	3718      	adds	r7, #24
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd80      	pop	{r7, pc}

0800c6e6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c6e6:	b580      	push	{r7, lr}
 800c6e8:	b086      	sub	sp, #24
 800c6ea:	af00      	add	r7, sp, #0
 800c6ec:	60f8      	str	r0, [r7, #12]
 800c6ee:	460b      	mov	r3, r1
 800c6f0:	607a      	str	r2, [r7, #4]
 800c6f2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c6f4:	7afb      	ldrb	r3, [r7, #11]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d16f      	bne.n	800c7da <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	3314      	adds	r3, #20
 800c6fe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c700:	68fb      	ldr	r3, [r7, #12]
 800c702:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800c706:	2b02      	cmp	r3, #2
 800c708:	d15a      	bne.n	800c7c0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800c70a:	693b      	ldr	r3, [r7, #16]
 800c70c:	689a      	ldr	r2, [r3, #8]
 800c70e:	693b      	ldr	r3, [r7, #16]
 800c710:	68db      	ldr	r3, [r3, #12]
 800c712:	429a      	cmp	r2, r3
 800c714:	d914      	bls.n	800c740 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c716:	693b      	ldr	r3, [r7, #16]
 800c718:	689a      	ldr	r2, [r3, #8]
 800c71a:	693b      	ldr	r3, [r7, #16]
 800c71c:	68db      	ldr	r3, [r3, #12]
 800c71e:	1ad2      	subs	r2, r2, r3
 800c720:	693b      	ldr	r3, [r7, #16]
 800c722:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c724:	693b      	ldr	r3, [r7, #16]
 800c726:	689b      	ldr	r3, [r3, #8]
 800c728:	461a      	mov	r2, r3
 800c72a:	6879      	ldr	r1, [r7, #4]
 800c72c:	68f8      	ldr	r0, [r7, #12]
 800c72e:	f001 f8b0 	bl	800d892 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c732:	2300      	movs	r3, #0
 800c734:	2200      	movs	r2, #0
 800c736:	2100      	movs	r1, #0
 800c738:	68f8      	ldr	r0, [r7, #12]
 800c73a:	f003 f823 	bl	800f784 <USBD_LL_PrepareReceive>
 800c73e:	e03f      	b.n	800c7c0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c740:	693b      	ldr	r3, [r7, #16]
 800c742:	68da      	ldr	r2, [r3, #12]
 800c744:	693b      	ldr	r3, [r7, #16]
 800c746:	689b      	ldr	r3, [r3, #8]
 800c748:	429a      	cmp	r2, r3
 800c74a:	d11c      	bne.n	800c786 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c74c:	693b      	ldr	r3, [r7, #16]
 800c74e:	685a      	ldr	r2, [r3, #4]
 800c750:	693b      	ldr	r3, [r7, #16]
 800c752:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c754:	429a      	cmp	r2, r3
 800c756:	d316      	bcc.n	800c786 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c758:	693b      	ldr	r3, [r7, #16]
 800c75a:	685a      	ldr	r2, [r3, #4]
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c762:	429a      	cmp	r2, r3
 800c764:	d20f      	bcs.n	800c786 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c766:	2200      	movs	r2, #0
 800c768:	2100      	movs	r1, #0
 800c76a:	68f8      	ldr	r0, [r7, #12]
 800c76c:	f001 f891 	bl	800d892 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c770:	68fb      	ldr	r3, [r7, #12]
 800c772:	2200      	movs	r2, #0
 800c774:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c778:	2300      	movs	r3, #0
 800c77a:	2200      	movs	r2, #0
 800c77c:	2100      	movs	r1, #0
 800c77e:	68f8      	ldr	r0, [r7, #12]
 800c780:	f003 f800 	bl	800f784 <USBD_LL_PrepareReceive>
 800c784:	e01c      	b.n	800c7c0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c78c:	b2db      	uxtb	r3, r3
 800c78e:	2b03      	cmp	r3, #3
 800c790:	d10f      	bne.n	800c7b2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c798:	68db      	ldr	r3, [r3, #12]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d009      	beq.n	800c7b2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	2200      	movs	r2, #0
 800c7a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c7ac:	68db      	ldr	r3, [r3, #12]
 800c7ae:	68f8      	ldr	r0, [r7, #12]
 800c7b0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c7b2:	2180      	movs	r1, #128	@ 0x80
 800c7b4:	68f8      	ldr	r0, [r7, #12]
 800c7b6:	f002 ff3b 	bl	800f630 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c7ba:	68f8      	ldr	r0, [r7, #12]
 800c7bc:	f001 f8bb 	bl	800d936 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d03a      	beq.n	800c840 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800c7ca:	68f8      	ldr	r0, [r7, #12]
 800c7cc:	f7ff fe42 	bl	800c454 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800c7d8:	e032      	b.n	800c840 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c7da:	7afb      	ldrb	r3, [r7, #11]
 800c7dc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c7e0:	b2db      	uxtb	r3, r3
 800c7e2:	4619      	mov	r1, r3
 800c7e4:	68f8      	ldr	r0, [r7, #12]
 800c7e6:	f000 f985 	bl	800caf4 <USBD_CoreFindEP>
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c7ee:	7dfb      	ldrb	r3, [r7, #23]
 800c7f0:	2bff      	cmp	r3, #255	@ 0xff
 800c7f2:	d025      	beq.n	800c840 <USBD_LL_DataInStage+0x15a>
 800c7f4:	7dfb      	ldrb	r3, [r7, #23]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d122      	bne.n	800c840 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c800:	b2db      	uxtb	r3, r3
 800c802:	2b03      	cmp	r3, #3
 800c804:	d11c      	bne.n	800c840 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c806:	7dfa      	ldrb	r2, [r7, #23]
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	32ae      	adds	r2, #174	@ 0xae
 800c80c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c810:	695b      	ldr	r3, [r3, #20]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d014      	beq.n	800c840 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800c816:	7dfa      	ldrb	r2, [r7, #23]
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c81e:	7dfa      	ldrb	r2, [r7, #23]
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	32ae      	adds	r2, #174	@ 0xae
 800c824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c828:	695b      	ldr	r3, [r3, #20]
 800c82a:	7afa      	ldrb	r2, [r7, #11]
 800c82c:	4611      	mov	r1, r2
 800c82e:	68f8      	ldr	r0, [r7, #12]
 800c830:	4798      	blx	r3
 800c832:	4603      	mov	r3, r0
 800c834:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c836:	7dbb      	ldrb	r3, [r7, #22]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d001      	beq.n	800c840 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800c83c:	7dbb      	ldrb	r3, [r7, #22]
 800c83e:	e000      	b.n	800c842 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800c840:	2300      	movs	r3, #0
}
 800c842:	4618      	mov	r0, r3
 800c844:	3718      	adds	r7, #24
 800c846:	46bd      	mov	sp, r7
 800c848:	bd80      	pop	{r7, pc}

0800c84a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c84a:	b580      	push	{r7, lr}
 800c84c:	b084      	sub	sp, #16
 800c84e:	af00      	add	r7, sp, #0
 800c850:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c852:	2300      	movs	r3, #0
 800c854:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	2201      	movs	r2, #1
 800c85a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	2200      	movs	r2, #0
 800c862:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2200      	movs	r2, #0
 800c86a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2200      	movs	r2, #0
 800c870:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	2200      	movs	r2, #0
 800c878:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c882:	2b00      	cmp	r3, #0
 800c884:	d014      	beq.n	800c8b0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c88c:	685b      	ldr	r3, [r3, #4]
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d00e      	beq.n	800c8b0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c898:	685b      	ldr	r3, [r3, #4]
 800c89a:	687a      	ldr	r2, [r7, #4]
 800c89c:	6852      	ldr	r2, [r2, #4]
 800c89e:	b2d2      	uxtb	r2, r2
 800c8a0:	4611      	mov	r1, r2
 800c8a2:	6878      	ldr	r0, [r7, #4]
 800c8a4:	4798      	blx	r3
 800c8a6:	4603      	mov	r3, r0
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d001      	beq.n	800c8b0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c8ac:	2303      	movs	r3, #3
 800c8ae:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c8b0:	2340      	movs	r3, #64	@ 0x40
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	2100      	movs	r1, #0
 800c8b6:	6878      	ldr	r0, [r7, #4]
 800c8b8:	f002 fe75 	bl	800f5a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	2201      	movs	r2, #1
 800c8c0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	2240      	movs	r2, #64	@ 0x40
 800c8c8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c8cc:	2340      	movs	r3, #64	@ 0x40
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	2180      	movs	r1, #128	@ 0x80
 800c8d2:	6878      	ldr	r0, [r7, #4]
 800c8d4:	f002 fe67 	bl	800f5a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	2201      	movs	r2, #1
 800c8dc:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2240      	movs	r2, #64	@ 0x40
 800c8e2:	621a      	str	r2, [r3, #32]

  return ret;
 800c8e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	3710      	adds	r7, #16
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	bd80      	pop	{r7, pc}

0800c8ee <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c8ee:	b480      	push	{r7}
 800c8f0:	b083      	sub	sp, #12
 800c8f2:	af00      	add	r7, sp, #0
 800c8f4:	6078      	str	r0, [r7, #4]
 800c8f6:	460b      	mov	r3, r1
 800c8f8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	78fa      	ldrb	r2, [r7, #3]
 800c8fe:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c900:	2300      	movs	r3, #0
}
 800c902:	4618      	mov	r0, r3
 800c904:	370c      	adds	r7, #12
 800c906:	46bd      	mov	sp, r7
 800c908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90c:	4770      	bx	lr

0800c90e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c90e:	b480      	push	{r7}
 800c910:	b083      	sub	sp, #12
 800c912:	af00      	add	r7, sp, #0
 800c914:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c91c:	b2db      	uxtb	r3, r3
 800c91e:	2b04      	cmp	r3, #4
 800c920:	d006      	beq.n	800c930 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c928:	b2da      	uxtb	r2, r3
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	2204      	movs	r2, #4
 800c934:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800c938:	2300      	movs	r3, #0
}
 800c93a:	4618      	mov	r0, r3
 800c93c:	370c      	adds	r7, #12
 800c93e:	46bd      	mov	sp, r7
 800c940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c944:	4770      	bx	lr

0800c946 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c946:	b480      	push	{r7}
 800c948:	b083      	sub	sp, #12
 800c94a:	af00      	add	r7, sp, #0
 800c94c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c954:	b2db      	uxtb	r3, r3
 800c956:	2b04      	cmp	r3, #4
 800c958:	d106      	bne.n	800c968 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800c960:	b2da      	uxtb	r2, r3
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800c968:	2300      	movs	r3, #0
}
 800c96a:	4618      	mov	r0, r3
 800c96c:	370c      	adds	r7, #12
 800c96e:	46bd      	mov	sp, r7
 800c970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c974:	4770      	bx	lr

0800c976 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c976:	b580      	push	{r7, lr}
 800c978:	b082      	sub	sp, #8
 800c97a:	af00      	add	r7, sp, #0
 800c97c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c984:	b2db      	uxtb	r3, r3
 800c986:	2b03      	cmp	r3, #3
 800c988:	d110      	bne.n	800c9ac <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c990:	2b00      	cmp	r3, #0
 800c992:	d00b      	beq.n	800c9ac <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c99a:	69db      	ldr	r3, [r3, #28]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d005      	beq.n	800c9ac <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c9a6:	69db      	ldr	r3, [r3, #28]
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c9ac:	2300      	movs	r3, #0
}
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	3708      	adds	r7, #8
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	bd80      	pop	{r7, pc}

0800c9b6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c9b6:	b580      	push	{r7, lr}
 800c9b8:	b082      	sub	sp, #8
 800c9ba:	af00      	add	r7, sp, #0
 800c9bc:	6078      	str	r0, [r7, #4]
 800c9be:	460b      	mov	r3, r1
 800c9c0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	32ae      	adds	r2, #174	@ 0xae
 800c9cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d101      	bne.n	800c9d8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c9d4:	2303      	movs	r3, #3
 800c9d6:	e01c      	b.n	800ca12 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c9de:	b2db      	uxtb	r3, r3
 800c9e0:	2b03      	cmp	r3, #3
 800c9e2:	d115      	bne.n	800ca10 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	32ae      	adds	r2, #174	@ 0xae
 800c9ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9f2:	6a1b      	ldr	r3, [r3, #32]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d00b      	beq.n	800ca10 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	32ae      	adds	r2, #174	@ 0xae
 800ca02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca06:	6a1b      	ldr	r3, [r3, #32]
 800ca08:	78fa      	ldrb	r2, [r7, #3]
 800ca0a:	4611      	mov	r1, r2
 800ca0c:	6878      	ldr	r0, [r7, #4]
 800ca0e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ca10:	2300      	movs	r3, #0
}
 800ca12:	4618      	mov	r0, r3
 800ca14:	3708      	adds	r7, #8
 800ca16:	46bd      	mov	sp, r7
 800ca18:	bd80      	pop	{r7, pc}

0800ca1a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ca1a:	b580      	push	{r7, lr}
 800ca1c:	b082      	sub	sp, #8
 800ca1e:	af00      	add	r7, sp, #0
 800ca20:	6078      	str	r0, [r7, #4]
 800ca22:	460b      	mov	r3, r1
 800ca24:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	32ae      	adds	r2, #174	@ 0xae
 800ca30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d101      	bne.n	800ca3c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ca38:	2303      	movs	r3, #3
 800ca3a:	e01c      	b.n	800ca76 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ca42:	b2db      	uxtb	r3, r3
 800ca44:	2b03      	cmp	r3, #3
 800ca46:	d115      	bne.n	800ca74 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	32ae      	adds	r2, #174	@ 0xae
 800ca52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d00b      	beq.n	800ca74 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	32ae      	adds	r2, #174	@ 0xae
 800ca66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ca6c:	78fa      	ldrb	r2, [r7, #3]
 800ca6e:	4611      	mov	r1, r2
 800ca70:	6878      	ldr	r0, [r7, #4]
 800ca72:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ca74:	2300      	movs	r3, #0
}
 800ca76:	4618      	mov	r0, r3
 800ca78:	3708      	adds	r7, #8
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	bd80      	pop	{r7, pc}

0800ca7e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ca7e:	b480      	push	{r7}
 800ca80:	b083      	sub	sp, #12
 800ca82:	af00      	add	r7, sp, #0
 800ca84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ca86:	2300      	movs	r3, #0
}
 800ca88:	4618      	mov	r0, r3
 800ca8a:	370c      	adds	r7, #12
 800ca8c:	46bd      	mov	sp, r7
 800ca8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca92:	4770      	bx	lr

0800ca94 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ca94:	b580      	push	{r7, lr}
 800ca96:	b084      	sub	sp, #16
 800ca98:	af00      	add	r7, sp, #0
 800ca9a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	2201      	movs	r2, #1
 800caa4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d00e      	beq.n	800cad0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800cab8:	685b      	ldr	r3, [r3, #4]
 800caba:	687a      	ldr	r2, [r7, #4]
 800cabc:	6852      	ldr	r2, [r2, #4]
 800cabe:	b2d2      	uxtb	r2, r2
 800cac0:	4611      	mov	r1, r2
 800cac2:	6878      	ldr	r0, [r7, #4]
 800cac4:	4798      	blx	r3
 800cac6:	4603      	mov	r3, r0
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d001      	beq.n	800cad0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800cacc:	2303      	movs	r3, #3
 800cace:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cad0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cad2:	4618      	mov	r0, r3
 800cad4:	3710      	adds	r7, #16
 800cad6:	46bd      	mov	sp, r7
 800cad8:	bd80      	pop	{r7, pc}

0800cada <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cada:	b480      	push	{r7}
 800cadc:	b083      	sub	sp, #12
 800cade:	af00      	add	r7, sp, #0
 800cae0:	6078      	str	r0, [r7, #4]
 800cae2:	460b      	mov	r3, r1
 800cae4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cae6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cae8:	4618      	mov	r0, r3
 800caea:	370c      	adds	r7, #12
 800caec:	46bd      	mov	sp, r7
 800caee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caf2:	4770      	bx	lr

0800caf4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800caf4:	b480      	push	{r7}
 800caf6:	b083      	sub	sp, #12
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
 800cafc:	460b      	mov	r3, r1
 800cafe:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800cb00:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800cb02:	4618      	mov	r0, r3
 800cb04:	370c      	adds	r7, #12
 800cb06:	46bd      	mov	sp, r7
 800cb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0c:	4770      	bx	lr

0800cb0e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800cb0e:	b580      	push	{r7, lr}
 800cb10:	b086      	sub	sp, #24
 800cb12:	af00      	add	r7, sp, #0
 800cb14:	6078      	str	r0, [r7, #4]
 800cb16:	460b      	mov	r3, r1
 800cb18:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800cb22:	2300      	movs	r3, #0
 800cb24:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	885b      	ldrh	r3, [r3, #2]
 800cb2a:	b29b      	uxth	r3, r3
 800cb2c:	68fa      	ldr	r2, [r7, #12]
 800cb2e:	7812      	ldrb	r2, [r2, #0]
 800cb30:	4293      	cmp	r3, r2
 800cb32:	d91f      	bls.n	800cb74 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	781b      	ldrb	r3, [r3, #0]
 800cb38:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800cb3a:	e013      	b.n	800cb64 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800cb3c:	f107 030a 	add.w	r3, r7, #10
 800cb40:	4619      	mov	r1, r3
 800cb42:	6978      	ldr	r0, [r7, #20]
 800cb44:	f000 f81b 	bl	800cb7e <USBD_GetNextDesc>
 800cb48:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800cb4a:	697b      	ldr	r3, [r7, #20]
 800cb4c:	785b      	ldrb	r3, [r3, #1]
 800cb4e:	2b05      	cmp	r3, #5
 800cb50:	d108      	bne.n	800cb64 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800cb52:	697b      	ldr	r3, [r7, #20]
 800cb54:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800cb56:	693b      	ldr	r3, [r7, #16]
 800cb58:	789b      	ldrb	r3, [r3, #2]
 800cb5a:	78fa      	ldrb	r2, [r7, #3]
 800cb5c:	429a      	cmp	r2, r3
 800cb5e:	d008      	beq.n	800cb72 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800cb60:	2300      	movs	r3, #0
 800cb62:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	885b      	ldrh	r3, [r3, #2]
 800cb68:	b29a      	uxth	r2, r3
 800cb6a:	897b      	ldrh	r3, [r7, #10]
 800cb6c:	429a      	cmp	r2, r3
 800cb6e:	d8e5      	bhi.n	800cb3c <USBD_GetEpDesc+0x2e>
 800cb70:	e000      	b.n	800cb74 <USBD_GetEpDesc+0x66>
          break;
 800cb72:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800cb74:	693b      	ldr	r3, [r7, #16]
}
 800cb76:	4618      	mov	r0, r3
 800cb78:	3718      	adds	r7, #24
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd80      	pop	{r7, pc}

0800cb7e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800cb7e:	b480      	push	{r7}
 800cb80:	b085      	sub	sp, #20
 800cb82:	af00      	add	r7, sp, #0
 800cb84:	6078      	str	r0, [r7, #4]
 800cb86:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800cb8c:	683b      	ldr	r3, [r7, #0]
 800cb8e:	881b      	ldrh	r3, [r3, #0]
 800cb90:	68fa      	ldr	r2, [r7, #12]
 800cb92:	7812      	ldrb	r2, [r2, #0]
 800cb94:	4413      	add	r3, r2
 800cb96:	b29a      	uxth	r2, r3
 800cb98:	683b      	ldr	r3, [r7, #0]
 800cb9a:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	781b      	ldrb	r3, [r3, #0]
 800cba0:	461a      	mov	r2, r3
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	4413      	add	r3, r2
 800cba6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800cba8:	68fb      	ldr	r3, [r7, #12]
}
 800cbaa:	4618      	mov	r0, r3
 800cbac:	3714      	adds	r7, #20
 800cbae:	46bd      	mov	sp, r7
 800cbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb4:	4770      	bx	lr

0800cbb6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800cbb6:	b480      	push	{r7}
 800cbb8:	b087      	sub	sp, #28
 800cbba:	af00      	add	r7, sp, #0
 800cbbc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800cbc2:	697b      	ldr	r3, [r7, #20]
 800cbc4:	781b      	ldrb	r3, [r3, #0]
 800cbc6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800cbc8:	697b      	ldr	r3, [r7, #20]
 800cbca:	3301      	adds	r3, #1
 800cbcc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800cbce:	697b      	ldr	r3, [r7, #20]
 800cbd0:	781b      	ldrb	r3, [r3, #0]
 800cbd2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800cbd4:	8a3b      	ldrh	r3, [r7, #16]
 800cbd6:	021b      	lsls	r3, r3, #8
 800cbd8:	b21a      	sxth	r2, r3
 800cbda:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cbde:	4313      	orrs	r3, r2
 800cbe0:	b21b      	sxth	r3, r3
 800cbe2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800cbe4:	89fb      	ldrh	r3, [r7, #14]
}
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	371c      	adds	r7, #28
 800cbea:	46bd      	mov	sp, r7
 800cbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf0:	4770      	bx	lr
	...

0800cbf4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b084      	sub	sp, #16
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
 800cbfc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cbfe:	2300      	movs	r3, #0
 800cc00:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cc02:	683b      	ldr	r3, [r7, #0]
 800cc04:	781b      	ldrb	r3, [r3, #0]
 800cc06:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cc0a:	2b40      	cmp	r3, #64	@ 0x40
 800cc0c:	d005      	beq.n	800cc1a <USBD_StdDevReq+0x26>
 800cc0e:	2b40      	cmp	r3, #64	@ 0x40
 800cc10:	d857      	bhi.n	800ccc2 <USBD_StdDevReq+0xce>
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d00f      	beq.n	800cc36 <USBD_StdDevReq+0x42>
 800cc16:	2b20      	cmp	r3, #32
 800cc18:	d153      	bne.n	800ccc2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	32ae      	adds	r2, #174	@ 0xae
 800cc24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc28:	689b      	ldr	r3, [r3, #8]
 800cc2a:	6839      	ldr	r1, [r7, #0]
 800cc2c:	6878      	ldr	r0, [r7, #4]
 800cc2e:	4798      	blx	r3
 800cc30:	4603      	mov	r3, r0
 800cc32:	73fb      	strb	r3, [r7, #15]
      break;
 800cc34:	e04a      	b.n	800cccc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cc36:	683b      	ldr	r3, [r7, #0]
 800cc38:	785b      	ldrb	r3, [r3, #1]
 800cc3a:	2b09      	cmp	r3, #9
 800cc3c:	d83b      	bhi.n	800ccb6 <USBD_StdDevReq+0xc2>
 800cc3e:	a201      	add	r2, pc, #4	@ (adr r2, 800cc44 <USBD_StdDevReq+0x50>)
 800cc40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc44:	0800cc99 	.word	0x0800cc99
 800cc48:	0800ccad 	.word	0x0800ccad
 800cc4c:	0800ccb7 	.word	0x0800ccb7
 800cc50:	0800cca3 	.word	0x0800cca3
 800cc54:	0800ccb7 	.word	0x0800ccb7
 800cc58:	0800cc77 	.word	0x0800cc77
 800cc5c:	0800cc6d 	.word	0x0800cc6d
 800cc60:	0800ccb7 	.word	0x0800ccb7
 800cc64:	0800cc8f 	.word	0x0800cc8f
 800cc68:	0800cc81 	.word	0x0800cc81
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800cc6c:	6839      	ldr	r1, [r7, #0]
 800cc6e:	6878      	ldr	r0, [r7, #4]
 800cc70:	f000 fa3c 	bl	800d0ec <USBD_GetDescriptor>
          break;
 800cc74:	e024      	b.n	800ccc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800cc76:	6839      	ldr	r1, [r7, #0]
 800cc78:	6878      	ldr	r0, [r7, #4]
 800cc7a:	f000 fba1 	bl	800d3c0 <USBD_SetAddress>
          break;
 800cc7e:	e01f      	b.n	800ccc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800cc80:	6839      	ldr	r1, [r7, #0]
 800cc82:	6878      	ldr	r0, [r7, #4]
 800cc84:	f000 fbe0 	bl	800d448 <USBD_SetConfig>
 800cc88:	4603      	mov	r3, r0
 800cc8a:	73fb      	strb	r3, [r7, #15]
          break;
 800cc8c:	e018      	b.n	800ccc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800cc8e:	6839      	ldr	r1, [r7, #0]
 800cc90:	6878      	ldr	r0, [r7, #4]
 800cc92:	f000 fc83 	bl	800d59c <USBD_GetConfig>
          break;
 800cc96:	e013      	b.n	800ccc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800cc98:	6839      	ldr	r1, [r7, #0]
 800cc9a:	6878      	ldr	r0, [r7, #4]
 800cc9c:	f000 fcb4 	bl	800d608 <USBD_GetStatus>
          break;
 800cca0:	e00e      	b.n	800ccc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800cca2:	6839      	ldr	r1, [r7, #0]
 800cca4:	6878      	ldr	r0, [r7, #4]
 800cca6:	f000 fce3 	bl	800d670 <USBD_SetFeature>
          break;
 800ccaa:	e009      	b.n	800ccc0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ccac:	6839      	ldr	r1, [r7, #0]
 800ccae:	6878      	ldr	r0, [r7, #4]
 800ccb0:	f000 fd07 	bl	800d6c2 <USBD_ClrFeature>
          break;
 800ccb4:	e004      	b.n	800ccc0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ccb6:	6839      	ldr	r1, [r7, #0]
 800ccb8:	6878      	ldr	r0, [r7, #4]
 800ccba:	f000 fd5e 	bl	800d77a <USBD_CtlError>
          break;
 800ccbe:	bf00      	nop
      }
      break;
 800ccc0:	e004      	b.n	800cccc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ccc2:	6839      	ldr	r1, [r7, #0]
 800ccc4:	6878      	ldr	r0, [r7, #4]
 800ccc6:	f000 fd58 	bl	800d77a <USBD_CtlError>
      break;
 800ccca:	bf00      	nop
  }

  return ret;
 800cccc:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccce:	4618      	mov	r0, r3
 800ccd0:	3710      	adds	r7, #16
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	bd80      	pop	{r7, pc}
 800ccd6:	bf00      	nop

0800ccd8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b084      	sub	sp, #16
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
 800cce0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cce2:	2300      	movs	r3, #0
 800cce4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cce6:	683b      	ldr	r3, [r7, #0]
 800cce8:	781b      	ldrb	r3, [r3, #0]
 800ccea:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ccee:	2b40      	cmp	r3, #64	@ 0x40
 800ccf0:	d005      	beq.n	800ccfe <USBD_StdItfReq+0x26>
 800ccf2:	2b40      	cmp	r3, #64	@ 0x40
 800ccf4:	d852      	bhi.n	800cd9c <USBD_StdItfReq+0xc4>
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d001      	beq.n	800ccfe <USBD_StdItfReq+0x26>
 800ccfa:	2b20      	cmp	r3, #32
 800ccfc:	d14e      	bne.n	800cd9c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cd04:	b2db      	uxtb	r3, r3
 800cd06:	3b01      	subs	r3, #1
 800cd08:	2b02      	cmp	r3, #2
 800cd0a:	d840      	bhi.n	800cd8e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	889b      	ldrh	r3, [r3, #4]
 800cd10:	b2db      	uxtb	r3, r3
 800cd12:	2b01      	cmp	r3, #1
 800cd14:	d836      	bhi.n	800cd84 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800cd16:	683b      	ldr	r3, [r7, #0]
 800cd18:	889b      	ldrh	r3, [r3, #4]
 800cd1a:	b2db      	uxtb	r3, r3
 800cd1c:	4619      	mov	r1, r3
 800cd1e:	6878      	ldr	r0, [r7, #4]
 800cd20:	f7ff fedb 	bl	800cada <USBD_CoreFindIF>
 800cd24:	4603      	mov	r3, r0
 800cd26:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cd28:	7bbb      	ldrb	r3, [r7, #14]
 800cd2a:	2bff      	cmp	r3, #255	@ 0xff
 800cd2c:	d01d      	beq.n	800cd6a <USBD_StdItfReq+0x92>
 800cd2e:	7bbb      	ldrb	r3, [r7, #14]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d11a      	bne.n	800cd6a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800cd34:	7bba      	ldrb	r2, [r7, #14]
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	32ae      	adds	r2, #174	@ 0xae
 800cd3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd3e:	689b      	ldr	r3, [r3, #8]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d00f      	beq.n	800cd64 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800cd44:	7bba      	ldrb	r2, [r7, #14]
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cd4c:	7bba      	ldrb	r2, [r7, #14]
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	32ae      	adds	r2, #174	@ 0xae
 800cd52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd56:	689b      	ldr	r3, [r3, #8]
 800cd58:	6839      	ldr	r1, [r7, #0]
 800cd5a:	6878      	ldr	r0, [r7, #4]
 800cd5c:	4798      	blx	r3
 800cd5e:	4603      	mov	r3, r0
 800cd60:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800cd62:	e004      	b.n	800cd6e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800cd64:	2303      	movs	r3, #3
 800cd66:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800cd68:	e001      	b.n	800cd6e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800cd6a:	2303      	movs	r3, #3
 800cd6c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	88db      	ldrh	r3, [r3, #6]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d110      	bne.n	800cd98 <USBD_StdItfReq+0xc0>
 800cd76:	7bfb      	ldrb	r3, [r7, #15]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d10d      	bne.n	800cd98 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800cd7c:	6878      	ldr	r0, [r7, #4]
 800cd7e:	f000 fdc7 	bl	800d910 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800cd82:	e009      	b.n	800cd98 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800cd84:	6839      	ldr	r1, [r7, #0]
 800cd86:	6878      	ldr	r0, [r7, #4]
 800cd88:	f000 fcf7 	bl	800d77a <USBD_CtlError>
          break;
 800cd8c:	e004      	b.n	800cd98 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800cd8e:	6839      	ldr	r1, [r7, #0]
 800cd90:	6878      	ldr	r0, [r7, #4]
 800cd92:	f000 fcf2 	bl	800d77a <USBD_CtlError>
          break;
 800cd96:	e000      	b.n	800cd9a <USBD_StdItfReq+0xc2>
          break;
 800cd98:	bf00      	nop
      }
      break;
 800cd9a:	e004      	b.n	800cda6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800cd9c:	6839      	ldr	r1, [r7, #0]
 800cd9e:	6878      	ldr	r0, [r7, #4]
 800cda0:	f000 fceb 	bl	800d77a <USBD_CtlError>
      break;
 800cda4:	bf00      	nop
  }

  return ret;
 800cda6:	7bfb      	ldrb	r3, [r7, #15]
}
 800cda8:	4618      	mov	r0, r3
 800cdaa:	3710      	adds	r7, #16
 800cdac:	46bd      	mov	sp, r7
 800cdae:	bd80      	pop	{r7, pc}

0800cdb0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b084      	sub	sp, #16
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
 800cdb8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800cdba:	2300      	movs	r3, #0
 800cdbc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800cdbe:	683b      	ldr	r3, [r7, #0]
 800cdc0:	889b      	ldrh	r3, [r3, #4]
 800cdc2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cdc4:	683b      	ldr	r3, [r7, #0]
 800cdc6:	781b      	ldrb	r3, [r3, #0]
 800cdc8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800cdcc:	2b40      	cmp	r3, #64	@ 0x40
 800cdce:	d007      	beq.n	800cde0 <USBD_StdEPReq+0x30>
 800cdd0:	2b40      	cmp	r3, #64	@ 0x40
 800cdd2:	f200 817f 	bhi.w	800d0d4 <USBD_StdEPReq+0x324>
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d02a      	beq.n	800ce30 <USBD_StdEPReq+0x80>
 800cdda:	2b20      	cmp	r3, #32
 800cddc:	f040 817a 	bne.w	800d0d4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800cde0:	7bbb      	ldrb	r3, [r7, #14]
 800cde2:	4619      	mov	r1, r3
 800cde4:	6878      	ldr	r0, [r7, #4]
 800cde6:	f7ff fe85 	bl	800caf4 <USBD_CoreFindEP>
 800cdea:	4603      	mov	r3, r0
 800cdec:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cdee:	7b7b      	ldrb	r3, [r7, #13]
 800cdf0:	2bff      	cmp	r3, #255	@ 0xff
 800cdf2:	f000 8174 	beq.w	800d0de <USBD_StdEPReq+0x32e>
 800cdf6:	7b7b      	ldrb	r3, [r7, #13]
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	f040 8170 	bne.w	800d0de <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800cdfe:	7b7a      	ldrb	r2, [r7, #13]
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ce06:	7b7a      	ldrb	r2, [r7, #13]
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	32ae      	adds	r2, #174	@ 0xae
 800ce0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce10:	689b      	ldr	r3, [r3, #8]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	f000 8163 	beq.w	800d0de <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ce18:	7b7a      	ldrb	r2, [r7, #13]
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	32ae      	adds	r2, #174	@ 0xae
 800ce1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce22:	689b      	ldr	r3, [r3, #8]
 800ce24:	6839      	ldr	r1, [r7, #0]
 800ce26:	6878      	ldr	r0, [r7, #4]
 800ce28:	4798      	blx	r3
 800ce2a:	4603      	mov	r3, r0
 800ce2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ce2e:	e156      	b.n	800d0de <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	785b      	ldrb	r3, [r3, #1]
 800ce34:	2b03      	cmp	r3, #3
 800ce36:	d008      	beq.n	800ce4a <USBD_StdEPReq+0x9a>
 800ce38:	2b03      	cmp	r3, #3
 800ce3a:	f300 8145 	bgt.w	800d0c8 <USBD_StdEPReq+0x318>
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	f000 809b 	beq.w	800cf7a <USBD_StdEPReq+0x1ca>
 800ce44:	2b01      	cmp	r3, #1
 800ce46:	d03c      	beq.n	800cec2 <USBD_StdEPReq+0x112>
 800ce48:	e13e      	b.n	800d0c8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ce50:	b2db      	uxtb	r3, r3
 800ce52:	2b02      	cmp	r3, #2
 800ce54:	d002      	beq.n	800ce5c <USBD_StdEPReq+0xac>
 800ce56:	2b03      	cmp	r3, #3
 800ce58:	d016      	beq.n	800ce88 <USBD_StdEPReq+0xd8>
 800ce5a:	e02c      	b.n	800ceb6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ce5c:	7bbb      	ldrb	r3, [r7, #14]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d00d      	beq.n	800ce7e <USBD_StdEPReq+0xce>
 800ce62:	7bbb      	ldrb	r3, [r7, #14]
 800ce64:	2b80      	cmp	r3, #128	@ 0x80
 800ce66:	d00a      	beq.n	800ce7e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ce68:	7bbb      	ldrb	r3, [r7, #14]
 800ce6a:	4619      	mov	r1, r3
 800ce6c:	6878      	ldr	r0, [r7, #4]
 800ce6e:	f002 fbdf 	bl	800f630 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ce72:	2180      	movs	r1, #128	@ 0x80
 800ce74:	6878      	ldr	r0, [r7, #4]
 800ce76:	f002 fbdb 	bl	800f630 <USBD_LL_StallEP>
 800ce7a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ce7c:	e020      	b.n	800cec0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ce7e:	6839      	ldr	r1, [r7, #0]
 800ce80:	6878      	ldr	r0, [r7, #4]
 800ce82:	f000 fc7a 	bl	800d77a <USBD_CtlError>
              break;
 800ce86:	e01b      	b.n	800cec0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ce88:	683b      	ldr	r3, [r7, #0]
 800ce8a:	885b      	ldrh	r3, [r3, #2]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d10e      	bne.n	800ceae <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ce90:	7bbb      	ldrb	r3, [r7, #14]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d00b      	beq.n	800ceae <USBD_StdEPReq+0xfe>
 800ce96:	7bbb      	ldrb	r3, [r7, #14]
 800ce98:	2b80      	cmp	r3, #128	@ 0x80
 800ce9a:	d008      	beq.n	800ceae <USBD_StdEPReq+0xfe>
 800ce9c:	683b      	ldr	r3, [r7, #0]
 800ce9e:	88db      	ldrh	r3, [r3, #6]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d104      	bne.n	800ceae <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800cea4:	7bbb      	ldrb	r3, [r7, #14]
 800cea6:	4619      	mov	r1, r3
 800cea8:	6878      	ldr	r0, [r7, #4]
 800ceaa:	f002 fbc1 	bl	800f630 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ceae:	6878      	ldr	r0, [r7, #4]
 800ceb0:	f000 fd2e 	bl	800d910 <USBD_CtlSendStatus>

              break;
 800ceb4:	e004      	b.n	800cec0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ceb6:	6839      	ldr	r1, [r7, #0]
 800ceb8:	6878      	ldr	r0, [r7, #4]
 800ceba:	f000 fc5e 	bl	800d77a <USBD_CtlError>
              break;
 800cebe:	bf00      	nop
          }
          break;
 800cec0:	e107      	b.n	800d0d2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cec8:	b2db      	uxtb	r3, r3
 800ceca:	2b02      	cmp	r3, #2
 800cecc:	d002      	beq.n	800ced4 <USBD_StdEPReq+0x124>
 800cece:	2b03      	cmp	r3, #3
 800ced0:	d016      	beq.n	800cf00 <USBD_StdEPReq+0x150>
 800ced2:	e04b      	b.n	800cf6c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ced4:	7bbb      	ldrb	r3, [r7, #14]
 800ced6:	2b00      	cmp	r3, #0
 800ced8:	d00d      	beq.n	800cef6 <USBD_StdEPReq+0x146>
 800ceda:	7bbb      	ldrb	r3, [r7, #14]
 800cedc:	2b80      	cmp	r3, #128	@ 0x80
 800cede:	d00a      	beq.n	800cef6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cee0:	7bbb      	ldrb	r3, [r7, #14]
 800cee2:	4619      	mov	r1, r3
 800cee4:	6878      	ldr	r0, [r7, #4]
 800cee6:	f002 fba3 	bl	800f630 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ceea:	2180      	movs	r1, #128	@ 0x80
 800ceec:	6878      	ldr	r0, [r7, #4]
 800ceee:	f002 fb9f 	bl	800f630 <USBD_LL_StallEP>
 800cef2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cef4:	e040      	b.n	800cf78 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800cef6:	6839      	ldr	r1, [r7, #0]
 800cef8:	6878      	ldr	r0, [r7, #4]
 800cefa:	f000 fc3e 	bl	800d77a <USBD_CtlError>
              break;
 800cefe:	e03b      	b.n	800cf78 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cf00:	683b      	ldr	r3, [r7, #0]
 800cf02:	885b      	ldrh	r3, [r3, #2]
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d136      	bne.n	800cf76 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800cf08:	7bbb      	ldrb	r3, [r7, #14]
 800cf0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d004      	beq.n	800cf1c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800cf12:	7bbb      	ldrb	r3, [r7, #14]
 800cf14:	4619      	mov	r1, r3
 800cf16:	6878      	ldr	r0, [r7, #4]
 800cf18:	f002 fba9 	bl	800f66e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800cf1c:	6878      	ldr	r0, [r7, #4]
 800cf1e:	f000 fcf7 	bl	800d910 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800cf22:	7bbb      	ldrb	r3, [r7, #14]
 800cf24:	4619      	mov	r1, r3
 800cf26:	6878      	ldr	r0, [r7, #4]
 800cf28:	f7ff fde4 	bl	800caf4 <USBD_CoreFindEP>
 800cf2c:	4603      	mov	r3, r0
 800cf2e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cf30:	7b7b      	ldrb	r3, [r7, #13]
 800cf32:	2bff      	cmp	r3, #255	@ 0xff
 800cf34:	d01f      	beq.n	800cf76 <USBD_StdEPReq+0x1c6>
 800cf36:	7b7b      	ldrb	r3, [r7, #13]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d11c      	bne.n	800cf76 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800cf3c:	7b7a      	ldrb	r2, [r7, #13]
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800cf44:	7b7a      	ldrb	r2, [r7, #13]
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	32ae      	adds	r2, #174	@ 0xae
 800cf4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf4e:	689b      	ldr	r3, [r3, #8]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d010      	beq.n	800cf76 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cf54:	7b7a      	ldrb	r2, [r7, #13]
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	32ae      	adds	r2, #174	@ 0xae
 800cf5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf5e:	689b      	ldr	r3, [r3, #8]
 800cf60:	6839      	ldr	r1, [r7, #0]
 800cf62:	6878      	ldr	r0, [r7, #4]
 800cf64:	4798      	blx	r3
 800cf66:	4603      	mov	r3, r0
 800cf68:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800cf6a:	e004      	b.n	800cf76 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800cf6c:	6839      	ldr	r1, [r7, #0]
 800cf6e:	6878      	ldr	r0, [r7, #4]
 800cf70:	f000 fc03 	bl	800d77a <USBD_CtlError>
              break;
 800cf74:	e000      	b.n	800cf78 <USBD_StdEPReq+0x1c8>
              break;
 800cf76:	bf00      	nop
          }
          break;
 800cf78:	e0ab      	b.n	800d0d2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800cf80:	b2db      	uxtb	r3, r3
 800cf82:	2b02      	cmp	r3, #2
 800cf84:	d002      	beq.n	800cf8c <USBD_StdEPReq+0x1dc>
 800cf86:	2b03      	cmp	r3, #3
 800cf88:	d032      	beq.n	800cff0 <USBD_StdEPReq+0x240>
 800cf8a:	e097      	b.n	800d0bc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cf8c:	7bbb      	ldrb	r3, [r7, #14]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d007      	beq.n	800cfa2 <USBD_StdEPReq+0x1f2>
 800cf92:	7bbb      	ldrb	r3, [r7, #14]
 800cf94:	2b80      	cmp	r3, #128	@ 0x80
 800cf96:	d004      	beq.n	800cfa2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800cf98:	6839      	ldr	r1, [r7, #0]
 800cf9a:	6878      	ldr	r0, [r7, #4]
 800cf9c:	f000 fbed 	bl	800d77a <USBD_CtlError>
                break;
 800cfa0:	e091      	b.n	800d0c6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cfa2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	da0b      	bge.n	800cfc2 <USBD_StdEPReq+0x212>
 800cfaa:	7bbb      	ldrb	r3, [r7, #14]
 800cfac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800cfb0:	4613      	mov	r3, r2
 800cfb2:	009b      	lsls	r3, r3, #2
 800cfb4:	4413      	add	r3, r2
 800cfb6:	009b      	lsls	r3, r3, #2
 800cfb8:	3310      	adds	r3, #16
 800cfba:	687a      	ldr	r2, [r7, #4]
 800cfbc:	4413      	add	r3, r2
 800cfbe:	3304      	adds	r3, #4
 800cfc0:	e00b      	b.n	800cfda <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cfc2:	7bbb      	ldrb	r3, [r7, #14]
 800cfc4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cfc8:	4613      	mov	r3, r2
 800cfca:	009b      	lsls	r3, r3, #2
 800cfcc:	4413      	add	r3, r2
 800cfce:	009b      	lsls	r3, r3, #2
 800cfd0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800cfd4:	687a      	ldr	r2, [r7, #4]
 800cfd6:	4413      	add	r3, r2
 800cfd8:	3304      	adds	r3, #4
 800cfda:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800cfdc:	68bb      	ldr	r3, [r7, #8]
 800cfde:	2200      	movs	r2, #0
 800cfe0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cfe2:	68bb      	ldr	r3, [r7, #8]
 800cfe4:	2202      	movs	r2, #2
 800cfe6:	4619      	mov	r1, r3
 800cfe8:	6878      	ldr	r0, [r7, #4]
 800cfea:	f000 fc37 	bl	800d85c <USBD_CtlSendData>
              break;
 800cfee:	e06a      	b.n	800d0c6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800cff0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	da11      	bge.n	800d01c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cff8:	7bbb      	ldrb	r3, [r7, #14]
 800cffa:	f003 020f 	and.w	r2, r3, #15
 800cffe:	6879      	ldr	r1, [r7, #4]
 800d000:	4613      	mov	r3, r2
 800d002:	009b      	lsls	r3, r3, #2
 800d004:	4413      	add	r3, r2
 800d006:	009b      	lsls	r3, r3, #2
 800d008:	440b      	add	r3, r1
 800d00a:	3324      	adds	r3, #36	@ 0x24
 800d00c:	881b      	ldrh	r3, [r3, #0]
 800d00e:	2b00      	cmp	r3, #0
 800d010:	d117      	bne.n	800d042 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d012:	6839      	ldr	r1, [r7, #0]
 800d014:	6878      	ldr	r0, [r7, #4]
 800d016:	f000 fbb0 	bl	800d77a <USBD_CtlError>
                  break;
 800d01a:	e054      	b.n	800d0c6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d01c:	7bbb      	ldrb	r3, [r7, #14]
 800d01e:	f003 020f 	and.w	r2, r3, #15
 800d022:	6879      	ldr	r1, [r7, #4]
 800d024:	4613      	mov	r3, r2
 800d026:	009b      	lsls	r3, r3, #2
 800d028:	4413      	add	r3, r2
 800d02a:	009b      	lsls	r3, r3, #2
 800d02c:	440b      	add	r3, r1
 800d02e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800d032:	881b      	ldrh	r3, [r3, #0]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d104      	bne.n	800d042 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d038:	6839      	ldr	r1, [r7, #0]
 800d03a:	6878      	ldr	r0, [r7, #4]
 800d03c:	f000 fb9d 	bl	800d77a <USBD_CtlError>
                  break;
 800d040:	e041      	b.n	800d0c6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d042:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d046:	2b00      	cmp	r3, #0
 800d048:	da0b      	bge.n	800d062 <USBD_StdEPReq+0x2b2>
 800d04a:	7bbb      	ldrb	r3, [r7, #14]
 800d04c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800d050:	4613      	mov	r3, r2
 800d052:	009b      	lsls	r3, r3, #2
 800d054:	4413      	add	r3, r2
 800d056:	009b      	lsls	r3, r3, #2
 800d058:	3310      	adds	r3, #16
 800d05a:	687a      	ldr	r2, [r7, #4]
 800d05c:	4413      	add	r3, r2
 800d05e:	3304      	adds	r3, #4
 800d060:	e00b      	b.n	800d07a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d062:	7bbb      	ldrb	r3, [r7, #14]
 800d064:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d068:	4613      	mov	r3, r2
 800d06a:	009b      	lsls	r3, r3, #2
 800d06c:	4413      	add	r3, r2
 800d06e:	009b      	lsls	r3, r3, #2
 800d070:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800d074:	687a      	ldr	r2, [r7, #4]
 800d076:	4413      	add	r3, r2
 800d078:	3304      	adds	r3, #4
 800d07a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d07c:	7bbb      	ldrb	r3, [r7, #14]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d002      	beq.n	800d088 <USBD_StdEPReq+0x2d8>
 800d082:	7bbb      	ldrb	r3, [r7, #14]
 800d084:	2b80      	cmp	r3, #128	@ 0x80
 800d086:	d103      	bne.n	800d090 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d088:	68bb      	ldr	r3, [r7, #8]
 800d08a:	2200      	movs	r2, #0
 800d08c:	601a      	str	r2, [r3, #0]
 800d08e:	e00e      	b.n	800d0ae <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d090:	7bbb      	ldrb	r3, [r7, #14]
 800d092:	4619      	mov	r1, r3
 800d094:	6878      	ldr	r0, [r7, #4]
 800d096:	f002 fb09 	bl	800f6ac <USBD_LL_IsStallEP>
 800d09a:	4603      	mov	r3, r0
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d003      	beq.n	800d0a8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d0a0:	68bb      	ldr	r3, [r7, #8]
 800d0a2:	2201      	movs	r2, #1
 800d0a4:	601a      	str	r2, [r3, #0]
 800d0a6:	e002      	b.n	800d0ae <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d0a8:	68bb      	ldr	r3, [r7, #8]
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d0ae:	68bb      	ldr	r3, [r7, #8]
 800d0b0:	2202      	movs	r2, #2
 800d0b2:	4619      	mov	r1, r3
 800d0b4:	6878      	ldr	r0, [r7, #4]
 800d0b6:	f000 fbd1 	bl	800d85c <USBD_CtlSendData>
              break;
 800d0ba:	e004      	b.n	800d0c6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d0bc:	6839      	ldr	r1, [r7, #0]
 800d0be:	6878      	ldr	r0, [r7, #4]
 800d0c0:	f000 fb5b 	bl	800d77a <USBD_CtlError>
              break;
 800d0c4:	bf00      	nop
          }
          break;
 800d0c6:	e004      	b.n	800d0d2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800d0c8:	6839      	ldr	r1, [r7, #0]
 800d0ca:	6878      	ldr	r0, [r7, #4]
 800d0cc:	f000 fb55 	bl	800d77a <USBD_CtlError>
          break;
 800d0d0:	bf00      	nop
      }
      break;
 800d0d2:	e005      	b.n	800d0e0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800d0d4:	6839      	ldr	r1, [r7, #0]
 800d0d6:	6878      	ldr	r0, [r7, #4]
 800d0d8:	f000 fb4f 	bl	800d77a <USBD_CtlError>
      break;
 800d0dc:	e000      	b.n	800d0e0 <USBD_StdEPReq+0x330>
      break;
 800d0de:	bf00      	nop
  }

  return ret;
 800d0e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0e2:	4618      	mov	r0, r3
 800d0e4:	3710      	adds	r7, #16
 800d0e6:	46bd      	mov	sp, r7
 800d0e8:	bd80      	pop	{r7, pc}
	...

0800d0ec <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b084      	sub	sp, #16
 800d0f0:	af00      	add	r7, sp, #0
 800d0f2:	6078      	str	r0, [r7, #4]
 800d0f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d0fe:	2300      	movs	r3, #0
 800d100:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d102:	683b      	ldr	r3, [r7, #0]
 800d104:	885b      	ldrh	r3, [r3, #2]
 800d106:	0a1b      	lsrs	r3, r3, #8
 800d108:	b29b      	uxth	r3, r3
 800d10a:	3b01      	subs	r3, #1
 800d10c:	2b06      	cmp	r3, #6
 800d10e:	f200 8128 	bhi.w	800d362 <USBD_GetDescriptor+0x276>
 800d112:	a201      	add	r2, pc, #4	@ (adr r2, 800d118 <USBD_GetDescriptor+0x2c>)
 800d114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d118:	0800d135 	.word	0x0800d135
 800d11c:	0800d14d 	.word	0x0800d14d
 800d120:	0800d18d 	.word	0x0800d18d
 800d124:	0800d363 	.word	0x0800d363
 800d128:	0800d363 	.word	0x0800d363
 800d12c:	0800d303 	.word	0x0800d303
 800d130:	0800d32f 	.word	0x0800d32f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	687a      	ldr	r2, [r7, #4]
 800d13e:	7c12      	ldrb	r2, [r2, #16]
 800d140:	f107 0108 	add.w	r1, r7, #8
 800d144:	4610      	mov	r0, r2
 800d146:	4798      	blx	r3
 800d148:	60f8      	str	r0, [r7, #12]
      break;
 800d14a:	e112      	b.n	800d372 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	7c1b      	ldrb	r3, [r3, #16]
 800d150:	2b00      	cmp	r3, #0
 800d152:	d10d      	bne.n	800d170 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d15a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d15c:	f107 0208 	add.w	r2, r7, #8
 800d160:	4610      	mov	r0, r2
 800d162:	4798      	blx	r3
 800d164:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d166:	68fb      	ldr	r3, [r7, #12]
 800d168:	3301      	adds	r3, #1
 800d16a:	2202      	movs	r2, #2
 800d16c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d16e:	e100      	b.n	800d372 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d178:	f107 0208 	add.w	r2, r7, #8
 800d17c:	4610      	mov	r0, r2
 800d17e:	4798      	blx	r3
 800d180:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d182:	68fb      	ldr	r3, [r7, #12]
 800d184:	3301      	adds	r3, #1
 800d186:	2202      	movs	r2, #2
 800d188:	701a      	strb	r2, [r3, #0]
      break;
 800d18a:	e0f2      	b.n	800d372 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d18c:	683b      	ldr	r3, [r7, #0]
 800d18e:	885b      	ldrh	r3, [r3, #2]
 800d190:	b2db      	uxtb	r3, r3
 800d192:	2b05      	cmp	r3, #5
 800d194:	f200 80ac 	bhi.w	800d2f0 <USBD_GetDescriptor+0x204>
 800d198:	a201      	add	r2, pc, #4	@ (adr r2, 800d1a0 <USBD_GetDescriptor+0xb4>)
 800d19a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d19e:	bf00      	nop
 800d1a0:	0800d1b9 	.word	0x0800d1b9
 800d1a4:	0800d1ed 	.word	0x0800d1ed
 800d1a8:	0800d221 	.word	0x0800d221
 800d1ac:	0800d255 	.word	0x0800d255
 800d1b0:	0800d289 	.word	0x0800d289
 800d1b4:	0800d2bd 	.word	0x0800d2bd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d1be:	685b      	ldr	r3, [r3, #4]
 800d1c0:	2b00      	cmp	r3, #0
 800d1c2:	d00b      	beq.n	800d1dc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d1ca:	685b      	ldr	r3, [r3, #4]
 800d1cc:	687a      	ldr	r2, [r7, #4]
 800d1ce:	7c12      	ldrb	r2, [r2, #16]
 800d1d0:	f107 0108 	add.w	r1, r7, #8
 800d1d4:	4610      	mov	r0, r2
 800d1d6:	4798      	blx	r3
 800d1d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d1da:	e091      	b.n	800d300 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d1dc:	6839      	ldr	r1, [r7, #0]
 800d1de:	6878      	ldr	r0, [r7, #4]
 800d1e0:	f000 facb 	bl	800d77a <USBD_CtlError>
            err++;
 800d1e4:	7afb      	ldrb	r3, [r7, #11]
 800d1e6:	3301      	adds	r3, #1
 800d1e8:	72fb      	strb	r3, [r7, #11]
          break;
 800d1ea:	e089      	b.n	800d300 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d1f2:	689b      	ldr	r3, [r3, #8]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d00b      	beq.n	800d210 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d1fe:	689b      	ldr	r3, [r3, #8]
 800d200:	687a      	ldr	r2, [r7, #4]
 800d202:	7c12      	ldrb	r2, [r2, #16]
 800d204:	f107 0108 	add.w	r1, r7, #8
 800d208:	4610      	mov	r0, r2
 800d20a:	4798      	blx	r3
 800d20c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d20e:	e077      	b.n	800d300 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d210:	6839      	ldr	r1, [r7, #0]
 800d212:	6878      	ldr	r0, [r7, #4]
 800d214:	f000 fab1 	bl	800d77a <USBD_CtlError>
            err++;
 800d218:	7afb      	ldrb	r3, [r7, #11]
 800d21a:	3301      	adds	r3, #1
 800d21c:	72fb      	strb	r3, [r7, #11]
          break;
 800d21e:	e06f      	b.n	800d300 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d226:	68db      	ldr	r3, [r3, #12]
 800d228:	2b00      	cmp	r3, #0
 800d22a:	d00b      	beq.n	800d244 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d232:	68db      	ldr	r3, [r3, #12]
 800d234:	687a      	ldr	r2, [r7, #4]
 800d236:	7c12      	ldrb	r2, [r2, #16]
 800d238:	f107 0108 	add.w	r1, r7, #8
 800d23c:	4610      	mov	r0, r2
 800d23e:	4798      	blx	r3
 800d240:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d242:	e05d      	b.n	800d300 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d244:	6839      	ldr	r1, [r7, #0]
 800d246:	6878      	ldr	r0, [r7, #4]
 800d248:	f000 fa97 	bl	800d77a <USBD_CtlError>
            err++;
 800d24c:	7afb      	ldrb	r3, [r7, #11]
 800d24e:	3301      	adds	r3, #1
 800d250:	72fb      	strb	r3, [r7, #11]
          break;
 800d252:	e055      	b.n	800d300 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d25a:	691b      	ldr	r3, [r3, #16]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d00b      	beq.n	800d278 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d266:	691b      	ldr	r3, [r3, #16]
 800d268:	687a      	ldr	r2, [r7, #4]
 800d26a:	7c12      	ldrb	r2, [r2, #16]
 800d26c:	f107 0108 	add.w	r1, r7, #8
 800d270:	4610      	mov	r0, r2
 800d272:	4798      	blx	r3
 800d274:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d276:	e043      	b.n	800d300 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d278:	6839      	ldr	r1, [r7, #0]
 800d27a:	6878      	ldr	r0, [r7, #4]
 800d27c:	f000 fa7d 	bl	800d77a <USBD_CtlError>
            err++;
 800d280:	7afb      	ldrb	r3, [r7, #11]
 800d282:	3301      	adds	r3, #1
 800d284:	72fb      	strb	r3, [r7, #11]
          break;
 800d286:	e03b      	b.n	800d300 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d28e:	695b      	ldr	r3, [r3, #20]
 800d290:	2b00      	cmp	r3, #0
 800d292:	d00b      	beq.n	800d2ac <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d29a:	695b      	ldr	r3, [r3, #20]
 800d29c:	687a      	ldr	r2, [r7, #4]
 800d29e:	7c12      	ldrb	r2, [r2, #16]
 800d2a0:	f107 0108 	add.w	r1, r7, #8
 800d2a4:	4610      	mov	r0, r2
 800d2a6:	4798      	blx	r3
 800d2a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d2aa:	e029      	b.n	800d300 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d2ac:	6839      	ldr	r1, [r7, #0]
 800d2ae:	6878      	ldr	r0, [r7, #4]
 800d2b0:	f000 fa63 	bl	800d77a <USBD_CtlError>
            err++;
 800d2b4:	7afb      	ldrb	r3, [r7, #11]
 800d2b6:	3301      	adds	r3, #1
 800d2b8:	72fb      	strb	r3, [r7, #11]
          break;
 800d2ba:	e021      	b.n	800d300 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d2c2:	699b      	ldr	r3, [r3, #24]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d00b      	beq.n	800d2e0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800d2ce:	699b      	ldr	r3, [r3, #24]
 800d2d0:	687a      	ldr	r2, [r7, #4]
 800d2d2:	7c12      	ldrb	r2, [r2, #16]
 800d2d4:	f107 0108 	add.w	r1, r7, #8
 800d2d8:	4610      	mov	r0, r2
 800d2da:	4798      	blx	r3
 800d2dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d2de:	e00f      	b.n	800d300 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d2e0:	6839      	ldr	r1, [r7, #0]
 800d2e2:	6878      	ldr	r0, [r7, #4]
 800d2e4:	f000 fa49 	bl	800d77a <USBD_CtlError>
            err++;
 800d2e8:	7afb      	ldrb	r3, [r7, #11]
 800d2ea:	3301      	adds	r3, #1
 800d2ec:	72fb      	strb	r3, [r7, #11]
          break;
 800d2ee:	e007      	b.n	800d300 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d2f0:	6839      	ldr	r1, [r7, #0]
 800d2f2:	6878      	ldr	r0, [r7, #4]
 800d2f4:	f000 fa41 	bl	800d77a <USBD_CtlError>
          err++;
 800d2f8:	7afb      	ldrb	r3, [r7, #11]
 800d2fa:	3301      	adds	r3, #1
 800d2fc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d2fe:	bf00      	nop
      }
      break;
 800d300:	e037      	b.n	800d372 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	7c1b      	ldrb	r3, [r3, #16]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d109      	bne.n	800d31e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d310:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d312:	f107 0208 	add.w	r2, r7, #8
 800d316:	4610      	mov	r0, r2
 800d318:	4798      	blx	r3
 800d31a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d31c:	e029      	b.n	800d372 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d31e:	6839      	ldr	r1, [r7, #0]
 800d320:	6878      	ldr	r0, [r7, #4]
 800d322:	f000 fa2a 	bl	800d77a <USBD_CtlError>
        err++;
 800d326:	7afb      	ldrb	r3, [r7, #11]
 800d328:	3301      	adds	r3, #1
 800d32a:	72fb      	strb	r3, [r7, #11]
      break;
 800d32c:	e021      	b.n	800d372 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	7c1b      	ldrb	r3, [r3, #16]
 800d332:	2b00      	cmp	r3, #0
 800d334:	d10d      	bne.n	800d352 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800d33c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d33e:	f107 0208 	add.w	r2, r7, #8
 800d342:	4610      	mov	r0, r2
 800d344:	4798      	blx	r3
 800d346:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d348:	68fb      	ldr	r3, [r7, #12]
 800d34a:	3301      	adds	r3, #1
 800d34c:	2207      	movs	r2, #7
 800d34e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d350:	e00f      	b.n	800d372 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d352:	6839      	ldr	r1, [r7, #0]
 800d354:	6878      	ldr	r0, [r7, #4]
 800d356:	f000 fa10 	bl	800d77a <USBD_CtlError>
        err++;
 800d35a:	7afb      	ldrb	r3, [r7, #11]
 800d35c:	3301      	adds	r3, #1
 800d35e:	72fb      	strb	r3, [r7, #11]
      break;
 800d360:	e007      	b.n	800d372 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d362:	6839      	ldr	r1, [r7, #0]
 800d364:	6878      	ldr	r0, [r7, #4]
 800d366:	f000 fa08 	bl	800d77a <USBD_CtlError>
      err++;
 800d36a:	7afb      	ldrb	r3, [r7, #11]
 800d36c:	3301      	adds	r3, #1
 800d36e:	72fb      	strb	r3, [r7, #11]
      break;
 800d370:	bf00      	nop
  }

  if (err != 0U)
 800d372:	7afb      	ldrb	r3, [r7, #11]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d11e      	bne.n	800d3b6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	88db      	ldrh	r3, [r3, #6]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d016      	beq.n	800d3ae <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d380:	893b      	ldrh	r3, [r7, #8]
 800d382:	2b00      	cmp	r3, #0
 800d384:	d00e      	beq.n	800d3a4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d386:	683b      	ldr	r3, [r7, #0]
 800d388:	88da      	ldrh	r2, [r3, #6]
 800d38a:	893b      	ldrh	r3, [r7, #8]
 800d38c:	4293      	cmp	r3, r2
 800d38e:	bf28      	it	cs
 800d390:	4613      	movcs	r3, r2
 800d392:	b29b      	uxth	r3, r3
 800d394:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d396:	893b      	ldrh	r3, [r7, #8]
 800d398:	461a      	mov	r2, r3
 800d39a:	68f9      	ldr	r1, [r7, #12]
 800d39c:	6878      	ldr	r0, [r7, #4]
 800d39e:	f000 fa5d 	bl	800d85c <USBD_CtlSendData>
 800d3a2:	e009      	b.n	800d3b8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d3a4:	6839      	ldr	r1, [r7, #0]
 800d3a6:	6878      	ldr	r0, [r7, #4]
 800d3a8:	f000 f9e7 	bl	800d77a <USBD_CtlError>
 800d3ac:	e004      	b.n	800d3b8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d3ae:	6878      	ldr	r0, [r7, #4]
 800d3b0:	f000 faae 	bl	800d910 <USBD_CtlSendStatus>
 800d3b4:	e000      	b.n	800d3b8 <USBD_GetDescriptor+0x2cc>
    return;
 800d3b6:	bf00      	nop
  }
}
 800d3b8:	3710      	adds	r7, #16
 800d3ba:	46bd      	mov	sp, r7
 800d3bc:	bd80      	pop	{r7, pc}
 800d3be:	bf00      	nop

0800d3c0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b084      	sub	sp, #16
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	6078      	str	r0, [r7, #4]
 800d3c8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d3ca:	683b      	ldr	r3, [r7, #0]
 800d3cc:	889b      	ldrh	r3, [r3, #4]
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d131      	bne.n	800d436 <USBD_SetAddress+0x76>
 800d3d2:	683b      	ldr	r3, [r7, #0]
 800d3d4:	88db      	ldrh	r3, [r3, #6]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d12d      	bne.n	800d436 <USBD_SetAddress+0x76>
 800d3da:	683b      	ldr	r3, [r7, #0]
 800d3dc:	885b      	ldrh	r3, [r3, #2]
 800d3de:	2b7f      	cmp	r3, #127	@ 0x7f
 800d3e0:	d829      	bhi.n	800d436 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d3e2:	683b      	ldr	r3, [r7, #0]
 800d3e4:	885b      	ldrh	r3, [r3, #2]
 800d3e6:	b2db      	uxtb	r3, r3
 800d3e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800d3ec:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d3f4:	b2db      	uxtb	r3, r3
 800d3f6:	2b03      	cmp	r3, #3
 800d3f8:	d104      	bne.n	800d404 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d3fa:	6839      	ldr	r1, [r7, #0]
 800d3fc:	6878      	ldr	r0, [r7, #4]
 800d3fe:	f000 f9bc 	bl	800d77a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d402:	e01d      	b.n	800d440 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	7bfa      	ldrb	r2, [r7, #15]
 800d408:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d40c:	7bfb      	ldrb	r3, [r7, #15]
 800d40e:	4619      	mov	r1, r3
 800d410:	6878      	ldr	r0, [r7, #4]
 800d412:	f002 f977 	bl	800f704 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d416:	6878      	ldr	r0, [r7, #4]
 800d418:	f000 fa7a 	bl	800d910 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d41c:	7bfb      	ldrb	r3, [r7, #15]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d004      	beq.n	800d42c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	2202      	movs	r2, #2
 800d426:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d42a:	e009      	b.n	800d440 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	2201      	movs	r2, #1
 800d430:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d434:	e004      	b.n	800d440 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d436:	6839      	ldr	r1, [r7, #0]
 800d438:	6878      	ldr	r0, [r7, #4]
 800d43a:	f000 f99e 	bl	800d77a <USBD_CtlError>
  }
}
 800d43e:	bf00      	nop
 800d440:	bf00      	nop
 800d442:	3710      	adds	r7, #16
 800d444:	46bd      	mov	sp, r7
 800d446:	bd80      	pop	{r7, pc}

0800d448 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b084      	sub	sp, #16
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
 800d450:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d452:	2300      	movs	r3, #0
 800d454:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d456:	683b      	ldr	r3, [r7, #0]
 800d458:	885b      	ldrh	r3, [r3, #2]
 800d45a:	b2da      	uxtb	r2, r3
 800d45c:	4b4e      	ldr	r3, [pc, #312]	@ (800d598 <USBD_SetConfig+0x150>)
 800d45e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d460:	4b4d      	ldr	r3, [pc, #308]	@ (800d598 <USBD_SetConfig+0x150>)
 800d462:	781b      	ldrb	r3, [r3, #0]
 800d464:	2b01      	cmp	r3, #1
 800d466:	d905      	bls.n	800d474 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d468:	6839      	ldr	r1, [r7, #0]
 800d46a:	6878      	ldr	r0, [r7, #4]
 800d46c:	f000 f985 	bl	800d77a <USBD_CtlError>
    return USBD_FAIL;
 800d470:	2303      	movs	r3, #3
 800d472:	e08c      	b.n	800d58e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d474:	687b      	ldr	r3, [r7, #4]
 800d476:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d47a:	b2db      	uxtb	r3, r3
 800d47c:	2b02      	cmp	r3, #2
 800d47e:	d002      	beq.n	800d486 <USBD_SetConfig+0x3e>
 800d480:	2b03      	cmp	r3, #3
 800d482:	d029      	beq.n	800d4d8 <USBD_SetConfig+0x90>
 800d484:	e075      	b.n	800d572 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d486:	4b44      	ldr	r3, [pc, #272]	@ (800d598 <USBD_SetConfig+0x150>)
 800d488:	781b      	ldrb	r3, [r3, #0]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d020      	beq.n	800d4d0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d48e:	4b42      	ldr	r3, [pc, #264]	@ (800d598 <USBD_SetConfig+0x150>)
 800d490:	781b      	ldrb	r3, [r3, #0]
 800d492:	461a      	mov	r2, r3
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d498:	4b3f      	ldr	r3, [pc, #252]	@ (800d598 <USBD_SetConfig+0x150>)
 800d49a:	781b      	ldrb	r3, [r3, #0]
 800d49c:	4619      	mov	r1, r3
 800d49e:	6878      	ldr	r0, [r7, #4]
 800d4a0:	f7fe ffe3 	bl	800c46a <USBD_SetClassConfig>
 800d4a4:	4603      	mov	r3, r0
 800d4a6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d4a8:	7bfb      	ldrb	r3, [r7, #15]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d008      	beq.n	800d4c0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d4ae:	6839      	ldr	r1, [r7, #0]
 800d4b0:	6878      	ldr	r0, [r7, #4]
 800d4b2:	f000 f962 	bl	800d77a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	2202      	movs	r2, #2
 800d4ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d4be:	e065      	b.n	800d58c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d4c0:	6878      	ldr	r0, [r7, #4]
 800d4c2:	f000 fa25 	bl	800d910 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	2203      	movs	r2, #3
 800d4ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d4ce:	e05d      	b.n	800d58c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d4d0:	6878      	ldr	r0, [r7, #4]
 800d4d2:	f000 fa1d 	bl	800d910 <USBD_CtlSendStatus>
      break;
 800d4d6:	e059      	b.n	800d58c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d4d8:	4b2f      	ldr	r3, [pc, #188]	@ (800d598 <USBD_SetConfig+0x150>)
 800d4da:	781b      	ldrb	r3, [r3, #0]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d112      	bne.n	800d506 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	2202      	movs	r2, #2
 800d4e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800d4e8:	4b2b      	ldr	r3, [pc, #172]	@ (800d598 <USBD_SetConfig+0x150>)
 800d4ea:	781b      	ldrb	r3, [r3, #0]
 800d4ec:	461a      	mov	r2, r3
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d4f2:	4b29      	ldr	r3, [pc, #164]	@ (800d598 <USBD_SetConfig+0x150>)
 800d4f4:	781b      	ldrb	r3, [r3, #0]
 800d4f6:	4619      	mov	r1, r3
 800d4f8:	6878      	ldr	r0, [r7, #4]
 800d4fa:	f7fe ffd2 	bl	800c4a2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d4fe:	6878      	ldr	r0, [r7, #4]
 800d500:	f000 fa06 	bl	800d910 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d504:	e042      	b.n	800d58c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d506:	4b24      	ldr	r3, [pc, #144]	@ (800d598 <USBD_SetConfig+0x150>)
 800d508:	781b      	ldrb	r3, [r3, #0]
 800d50a:	461a      	mov	r2, r3
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	685b      	ldr	r3, [r3, #4]
 800d510:	429a      	cmp	r2, r3
 800d512:	d02a      	beq.n	800d56a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d514:	687b      	ldr	r3, [r7, #4]
 800d516:	685b      	ldr	r3, [r3, #4]
 800d518:	b2db      	uxtb	r3, r3
 800d51a:	4619      	mov	r1, r3
 800d51c:	6878      	ldr	r0, [r7, #4]
 800d51e:	f7fe ffc0 	bl	800c4a2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d522:	4b1d      	ldr	r3, [pc, #116]	@ (800d598 <USBD_SetConfig+0x150>)
 800d524:	781b      	ldrb	r3, [r3, #0]
 800d526:	461a      	mov	r2, r3
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d52c:	4b1a      	ldr	r3, [pc, #104]	@ (800d598 <USBD_SetConfig+0x150>)
 800d52e:	781b      	ldrb	r3, [r3, #0]
 800d530:	4619      	mov	r1, r3
 800d532:	6878      	ldr	r0, [r7, #4]
 800d534:	f7fe ff99 	bl	800c46a <USBD_SetClassConfig>
 800d538:	4603      	mov	r3, r0
 800d53a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d53c:	7bfb      	ldrb	r3, [r7, #15]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d00f      	beq.n	800d562 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d542:	6839      	ldr	r1, [r7, #0]
 800d544:	6878      	ldr	r0, [r7, #4]
 800d546:	f000 f918 	bl	800d77a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	685b      	ldr	r3, [r3, #4]
 800d54e:	b2db      	uxtb	r3, r3
 800d550:	4619      	mov	r1, r3
 800d552:	6878      	ldr	r0, [r7, #4]
 800d554:	f7fe ffa5 	bl	800c4a2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	2202      	movs	r2, #2
 800d55c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800d560:	e014      	b.n	800d58c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d562:	6878      	ldr	r0, [r7, #4]
 800d564:	f000 f9d4 	bl	800d910 <USBD_CtlSendStatus>
      break;
 800d568:	e010      	b.n	800d58c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d56a:	6878      	ldr	r0, [r7, #4]
 800d56c:	f000 f9d0 	bl	800d910 <USBD_CtlSendStatus>
      break;
 800d570:	e00c      	b.n	800d58c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d572:	6839      	ldr	r1, [r7, #0]
 800d574:	6878      	ldr	r0, [r7, #4]
 800d576:	f000 f900 	bl	800d77a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d57a:	4b07      	ldr	r3, [pc, #28]	@ (800d598 <USBD_SetConfig+0x150>)
 800d57c:	781b      	ldrb	r3, [r3, #0]
 800d57e:	4619      	mov	r1, r3
 800d580:	6878      	ldr	r0, [r7, #4]
 800d582:	f7fe ff8e 	bl	800c4a2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d586:	2303      	movs	r3, #3
 800d588:	73fb      	strb	r3, [r7, #15]
      break;
 800d58a:	bf00      	nop
  }

  return ret;
 800d58c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d58e:	4618      	mov	r0, r3
 800d590:	3710      	adds	r7, #16
 800d592:	46bd      	mov	sp, r7
 800d594:	bd80      	pop	{r7, pc}
 800d596:	bf00      	nop
 800d598:	20000ba8 	.word	0x20000ba8

0800d59c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d59c:	b580      	push	{r7, lr}
 800d59e:	b082      	sub	sp, #8
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
 800d5a4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d5a6:	683b      	ldr	r3, [r7, #0]
 800d5a8:	88db      	ldrh	r3, [r3, #6]
 800d5aa:	2b01      	cmp	r3, #1
 800d5ac:	d004      	beq.n	800d5b8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d5ae:	6839      	ldr	r1, [r7, #0]
 800d5b0:	6878      	ldr	r0, [r7, #4]
 800d5b2:	f000 f8e2 	bl	800d77a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d5b6:	e023      	b.n	800d600 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d5be:	b2db      	uxtb	r3, r3
 800d5c0:	2b02      	cmp	r3, #2
 800d5c2:	dc02      	bgt.n	800d5ca <USBD_GetConfig+0x2e>
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	dc03      	bgt.n	800d5d0 <USBD_GetConfig+0x34>
 800d5c8:	e015      	b.n	800d5f6 <USBD_GetConfig+0x5a>
 800d5ca:	2b03      	cmp	r3, #3
 800d5cc:	d00b      	beq.n	800d5e6 <USBD_GetConfig+0x4a>
 800d5ce:	e012      	b.n	800d5f6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	3308      	adds	r3, #8
 800d5da:	2201      	movs	r2, #1
 800d5dc:	4619      	mov	r1, r3
 800d5de:	6878      	ldr	r0, [r7, #4]
 800d5e0:	f000 f93c 	bl	800d85c <USBD_CtlSendData>
        break;
 800d5e4:	e00c      	b.n	800d600 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	3304      	adds	r3, #4
 800d5ea:	2201      	movs	r2, #1
 800d5ec:	4619      	mov	r1, r3
 800d5ee:	6878      	ldr	r0, [r7, #4]
 800d5f0:	f000 f934 	bl	800d85c <USBD_CtlSendData>
        break;
 800d5f4:	e004      	b.n	800d600 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d5f6:	6839      	ldr	r1, [r7, #0]
 800d5f8:	6878      	ldr	r0, [r7, #4]
 800d5fa:	f000 f8be 	bl	800d77a <USBD_CtlError>
        break;
 800d5fe:	bf00      	nop
}
 800d600:	bf00      	nop
 800d602:	3708      	adds	r7, #8
 800d604:	46bd      	mov	sp, r7
 800d606:	bd80      	pop	{r7, pc}

0800d608 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b082      	sub	sp, #8
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	6078      	str	r0, [r7, #4]
 800d610:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d618:	b2db      	uxtb	r3, r3
 800d61a:	3b01      	subs	r3, #1
 800d61c:	2b02      	cmp	r3, #2
 800d61e:	d81e      	bhi.n	800d65e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d620:	683b      	ldr	r3, [r7, #0]
 800d622:	88db      	ldrh	r3, [r3, #6]
 800d624:	2b02      	cmp	r3, #2
 800d626:	d004      	beq.n	800d632 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d628:	6839      	ldr	r1, [r7, #0]
 800d62a:	6878      	ldr	r0, [r7, #4]
 800d62c:	f000 f8a5 	bl	800d77a <USBD_CtlError>
        break;
 800d630:	e01a      	b.n	800d668 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	2201      	movs	r2, #1
 800d636:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d005      	beq.n	800d64e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	68db      	ldr	r3, [r3, #12]
 800d646:	f043 0202 	orr.w	r2, r3, #2
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d64e:	687b      	ldr	r3, [r7, #4]
 800d650:	330c      	adds	r3, #12
 800d652:	2202      	movs	r2, #2
 800d654:	4619      	mov	r1, r3
 800d656:	6878      	ldr	r0, [r7, #4]
 800d658:	f000 f900 	bl	800d85c <USBD_CtlSendData>
      break;
 800d65c:	e004      	b.n	800d668 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d65e:	6839      	ldr	r1, [r7, #0]
 800d660:	6878      	ldr	r0, [r7, #4]
 800d662:	f000 f88a 	bl	800d77a <USBD_CtlError>
      break;
 800d666:	bf00      	nop
  }
}
 800d668:	bf00      	nop
 800d66a:	3708      	adds	r7, #8
 800d66c:	46bd      	mov	sp, r7
 800d66e:	bd80      	pop	{r7, pc}

0800d670 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b082      	sub	sp, #8
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
 800d678:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d67a:	683b      	ldr	r3, [r7, #0]
 800d67c:	885b      	ldrh	r3, [r3, #2]
 800d67e:	2b01      	cmp	r3, #1
 800d680:	d107      	bne.n	800d692 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2201      	movs	r2, #1
 800d686:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d68a:	6878      	ldr	r0, [r7, #4]
 800d68c:	f000 f940 	bl	800d910 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d690:	e013      	b.n	800d6ba <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d692:	683b      	ldr	r3, [r7, #0]
 800d694:	885b      	ldrh	r3, [r3, #2]
 800d696:	2b02      	cmp	r3, #2
 800d698:	d10b      	bne.n	800d6b2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800d69a:	683b      	ldr	r3, [r7, #0]
 800d69c:	889b      	ldrh	r3, [r3, #4]
 800d69e:	0a1b      	lsrs	r3, r3, #8
 800d6a0:	b29b      	uxth	r3, r3
 800d6a2:	b2da      	uxtb	r2, r3
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d6aa:	6878      	ldr	r0, [r7, #4]
 800d6ac:	f000 f930 	bl	800d910 <USBD_CtlSendStatus>
}
 800d6b0:	e003      	b.n	800d6ba <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d6b2:	6839      	ldr	r1, [r7, #0]
 800d6b4:	6878      	ldr	r0, [r7, #4]
 800d6b6:	f000 f860 	bl	800d77a <USBD_CtlError>
}
 800d6ba:	bf00      	nop
 800d6bc:	3708      	adds	r7, #8
 800d6be:	46bd      	mov	sp, r7
 800d6c0:	bd80      	pop	{r7, pc}

0800d6c2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d6c2:	b580      	push	{r7, lr}
 800d6c4:	b082      	sub	sp, #8
 800d6c6:	af00      	add	r7, sp, #0
 800d6c8:	6078      	str	r0, [r7, #4]
 800d6ca:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d6cc:	687b      	ldr	r3, [r7, #4]
 800d6ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800d6d2:	b2db      	uxtb	r3, r3
 800d6d4:	3b01      	subs	r3, #1
 800d6d6:	2b02      	cmp	r3, #2
 800d6d8:	d80b      	bhi.n	800d6f2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d6da:	683b      	ldr	r3, [r7, #0]
 800d6dc:	885b      	ldrh	r3, [r3, #2]
 800d6de:	2b01      	cmp	r3, #1
 800d6e0:	d10c      	bne.n	800d6fc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d6ea:	6878      	ldr	r0, [r7, #4]
 800d6ec:	f000 f910 	bl	800d910 <USBD_CtlSendStatus>
      }
      break;
 800d6f0:	e004      	b.n	800d6fc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d6f2:	6839      	ldr	r1, [r7, #0]
 800d6f4:	6878      	ldr	r0, [r7, #4]
 800d6f6:	f000 f840 	bl	800d77a <USBD_CtlError>
      break;
 800d6fa:	e000      	b.n	800d6fe <USBD_ClrFeature+0x3c>
      break;
 800d6fc:	bf00      	nop
  }
}
 800d6fe:	bf00      	nop
 800d700:	3708      	adds	r7, #8
 800d702:	46bd      	mov	sp, r7
 800d704:	bd80      	pop	{r7, pc}

0800d706 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d706:	b580      	push	{r7, lr}
 800d708:	b084      	sub	sp, #16
 800d70a:	af00      	add	r7, sp, #0
 800d70c:	6078      	str	r0, [r7, #4]
 800d70e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d710:	683b      	ldr	r3, [r7, #0]
 800d712:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	781a      	ldrb	r2, [r3, #0]
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	3301      	adds	r3, #1
 800d720:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	781a      	ldrb	r2, [r3, #0]
 800d726:	687b      	ldr	r3, [r7, #4]
 800d728:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	3301      	adds	r3, #1
 800d72e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d730:	68f8      	ldr	r0, [r7, #12]
 800d732:	f7ff fa40 	bl	800cbb6 <SWAPBYTE>
 800d736:	4603      	mov	r3, r0
 800d738:	461a      	mov	r2, r3
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	3301      	adds	r3, #1
 800d742:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	3301      	adds	r3, #1
 800d748:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d74a:	68f8      	ldr	r0, [r7, #12]
 800d74c:	f7ff fa33 	bl	800cbb6 <SWAPBYTE>
 800d750:	4603      	mov	r3, r0
 800d752:	461a      	mov	r2, r3
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	3301      	adds	r3, #1
 800d75c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	3301      	adds	r3, #1
 800d762:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d764:	68f8      	ldr	r0, [r7, #12]
 800d766:	f7ff fa26 	bl	800cbb6 <SWAPBYTE>
 800d76a:	4603      	mov	r3, r0
 800d76c:	461a      	mov	r2, r3
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	80da      	strh	r2, [r3, #6]
}
 800d772:	bf00      	nop
 800d774:	3710      	adds	r7, #16
 800d776:	46bd      	mov	sp, r7
 800d778:	bd80      	pop	{r7, pc}

0800d77a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d77a:	b580      	push	{r7, lr}
 800d77c:	b082      	sub	sp, #8
 800d77e:	af00      	add	r7, sp, #0
 800d780:	6078      	str	r0, [r7, #4]
 800d782:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d784:	2180      	movs	r1, #128	@ 0x80
 800d786:	6878      	ldr	r0, [r7, #4]
 800d788:	f001 ff52 	bl	800f630 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d78c:	2100      	movs	r1, #0
 800d78e:	6878      	ldr	r0, [r7, #4]
 800d790:	f001 ff4e 	bl	800f630 <USBD_LL_StallEP>
}
 800d794:	bf00      	nop
 800d796:	3708      	adds	r7, #8
 800d798:	46bd      	mov	sp, r7
 800d79a:	bd80      	pop	{r7, pc}

0800d79c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b086      	sub	sp, #24
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	60f8      	str	r0, [r7, #12]
 800d7a4:	60b9      	str	r1, [r7, #8]
 800d7a6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d7a8:	2300      	movs	r3, #0
 800d7aa:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d036      	beq.n	800d820 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d7b6:	6938      	ldr	r0, [r7, #16]
 800d7b8:	f000 f836 	bl	800d828 <USBD_GetLen>
 800d7bc:	4603      	mov	r3, r0
 800d7be:	3301      	adds	r3, #1
 800d7c0:	b29b      	uxth	r3, r3
 800d7c2:	005b      	lsls	r3, r3, #1
 800d7c4:	b29a      	uxth	r2, r3
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d7ca:	7dfb      	ldrb	r3, [r7, #23]
 800d7cc:	68ba      	ldr	r2, [r7, #8]
 800d7ce:	4413      	add	r3, r2
 800d7d0:	687a      	ldr	r2, [r7, #4]
 800d7d2:	7812      	ldrb	r2, [r2, #0]
 800d7d4:	701a      	strb	r2, [r3, #0]
  idx++;
 800d7d6:	7dfb      	ldrb	r3, [r7, #23]
 800d7d8:	3301      	adds	r3, #1
 800d7da:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d7dc:	7dfb      	ldrb	r3, [r7, #23]
 800d7de:	68ba      	ldr	r2, [r7, #8]
 800d7e0:	4413      	add	r3, r2
 800d7e2:	2203      	movs	r2, #3
 800d7e4:	701a      	strb	r2, [r3, #0]
  idx++;
 800d7e6:	7dfb      	ldrb	r3, [r7, #23]
 800d7e8:	3301      	adds	r3, #1
 800d7ea:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d7ec:	e013      	b.n	800d816 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d7ee:	7dfb      	ldrb	r3, [r7, #23]
 800d7f0:	68ba      	ldr	r2, [r7, #8]
 800d7f2:	4413      	add	r3, r2
 800d7f4:	693a      	ldr	r2, [r7, #16]
 800d7f6:	7812      	ldrb	r2, [r2, #0]
 800d7f8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d7fa:	693b      	ldr	r3, [r7, #16]
 800d7fc:	3301      	adds	r3, #1
 800d7fe:	613b      	str	r3, [r7, #16]
    idx++;
 800d800:	7dfb      	ldrb	r3, [r7, #23]
 800d802:	3301      	adds	r3, #1
 800d804:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d806:	7dfb      	ldrb	r3, [r7, #23]
 800d808:	68ba      	ldr	r2, [r7, #8]
 800d80a:	4413      	add	r3, r2
 800d80c:	2200      	movs	r2, #0
 800d80e:	701a      	strb	r2, [r3, #0]
    idx++;
 800d810:	7dfb      	ldrb	r3, [r7, #23]
 800d812:	3301      	adds	r3, #1
 800d814:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d816:	693b      	ldr	r3, [r7, #16]
 800d818:	781b      	ldrb	r3, [r3, #0]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d1e7      	bne.n	800d7ee <USBD_GetString+0x52>
 800d81e:	e000      	b.n	800d822 <USBD_GetString+0x86>
    return;
 800d820:	bf00      	nop
  }
}
 800d822:	3718      	adds	r7, #24
 800d824:	46bd      	mov	sp, r7
 800d826:	bd80      	pop	{r7, pc}

0800d828 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d828:	b480      	push	{r7}
 800d82a:	b085      	sub	sp, #20
 800d82c:	af00      	add	r7, sp, #0
 800d82e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d830:	2300      	movs	r3, #0
 800d832:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d838:	e005      	b.n	800d846 <USBD_GetLen+0x1e>
  {
    len++;
 800d83a:	7bfb      	ldrb	r3, [r7, #15]
 800d83c:	3301      	adds	r3, #1
 800d83e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d840:	68bb      	ldr	r3, [r7, #8]
 800d842:	3301      	adds	r3, #1
 800d844:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d846:	68bb      	ldr	r3, [r7, #8]
 800d848:	781b      	ldrb	r3, [r3, #0]
 800d84a:	2b00      	cmp	r3, #0
 800d84c:	d1f5      	bne.n	800d83a <USBD_GetLen+0x12>
  }

  return len;
 800d84e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d850:	4618      	mov	r0, r3
 800d852:	3714      	adds	r7, #20
 800d854:	46bd      	mov	sp, r7
 800d856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d85a:	4770      	bx	lr

0800d85c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b084      	sub	sp, #16
 800d860:	af00      	add	r7, sp, #0
 800d862:	60f8      	str	r0, [r7, #12]
 800d864:	60b9      	str	r1, [r7, #8]
 800d866:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	2202      	movs	r2, #2
 800d86c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	687a      	ldr	r2, [r7, #4]
 800d874:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	687a      	ldr	r2, [r7, #4]
 800d87a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	68ba      	ldr	r2, [r7, #8]
 800d880:	2100      	movs	r1, #0
 800d882:	68f8      	ldr	r0, [r7, #12]
 800d884:	f001 ff5d 	bl	800f742 <USBD_LL_Transmit>

  return USBD_OK;
 800d888:	2300      	movs	r3, #0
}
 800d88a:	4618      	mov	r0, r3
 800d88c:	3710      	adds	r7, #16
 800d88e:	46bd      	mov	sp, r7
 800d890:	bd80      	pop	{r7, pc}

0800d892 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d892:	b580      	push	{r7, lr}
 800d894:	b084      	sub	sp, #16
 800d896:	af00      	add	r7, sp, #0
 800d898:	60f8      	str	r0, [r7, #12]
 800d89a:	60b9      	str	r1, [r7, #8]
 800d89c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	68ba      	ldr	r2, [r7, #8]
 800d8a2:	2100      	movs	r1, #0
 800d8a4:	68f8      	ldr	r0, [r7, #12]
 800d8a6:	f001 ff4c 	bl	800f742 <USBD_LL_Transmit>

  return USBD_OK;
 800d8aa:	2300      	movs	r3, #0
}
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	3710      	adds	r7, #16
 800d8b0:	46bd      	mov	sp, r7
 800d8b2:	bd80      	pop	{r7, pc}

0800d8b4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b084      	sub	sp, #16
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	60f8      	str	r0, [r7, #12]
 800d8bc:	60b9      	str	r1, [r7, #8]
 800d8be:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	2203      	movs	r2, #3
 800d8c4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	687a      	ldr	r2, [r7, #4]
 800d8cc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d8d0:	68fb      	ldr	r3, [r7, #12]
 800d8d2:	687a      	ldr	r2, [r7, #4]
 800d8d4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	68ba      	ldr	r2, [r7, #8]
 800d8dc:	2100      	movs	r1, #0
 800d8de:	68f8      	ldr	r0, [r7, #12]
 800d8e0:	f001 ff50 	bl	800f784 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d8e4:	2300      	movs	r3, #0
}
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	3710      	adds	r7, #16
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	bd80      	pop	{r7, pc}

0800d8ee <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d8ee:	b580      	push	{r7, lr}
 800d8f0:	b084      	sub	sp, #16
 800d8f2:	af00      	add	r7, sp, #0
 800d8f4:	60f8      	str	r0, [r7, #12]
 800d8f6:	60b9      	str	r1, [r7, #8]
 800d8f8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	68ba      	ldr	r2, [r7, #8]
 800d8fe:	2100      	movs	r1, #0
 800d900:	68f8      	ldr	r0, [r7, #12]
 800d902:	f001 ff3f 	bl	800f784 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d906:	2300      	movs	r3, #0
}
 800d908:	4618      	mov	r0, r3
 800d90a:	3710      	adds	r7, #16
 800d90c:	46bd      	mov	sp, r7
 800d90e:	bd80      	pop	{r7, pc}

0800d910 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d910:	b580      	push	{r7, lr}
 800d912:	b082      	sub	sp, #8
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	2204      	movs	r2, #4
 800d91c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d920:	2300      	movs	r3, #0
 800d922:	2200      	movs	r2, #0
 800d924:	2100      	movs	r1, #0
 800d926:	6878      	ldr	r0, [r7, #4]
 800d928:	f001 ff0b 	bl	800f742 <USBD_LL_Transmit>

  return USBD_OK;
 800d92c:	2300      	movs	r3, #0
}
 800d92e:	4618      	mov	r0, r3
 800d930:	3708      	adds	r7, #8
 800d932:	46bd      	mov	sp, r7
 800d934:	bd80      	pop	{r7, pc}

0800d936 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d936:	b580      	push	{r7, lr}
 800d938:	b082      	sub	sp, #8
 800d93a:	af00      	add	r7, sp, #0
 800d93c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	2205      	movs	r2, #5
 800d942:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d946:	2300      	movs	r3, #0
 800d948:	2200      	movs	r2, #0
 800d94a:	2100      	movs	r1, #0
 800d94c:	6878      	ldr	r0, [r7, #4]
 800d94e:	f001 ff19 	bl	800f784 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d952:	2300      	movs	r3, #0
}
 800d954:	4618      	mov	r0, r3
 800d956:	3708      	adds	r7, #8
 800d958:	46bd      	mov	sp, r7
 800d95a:	bd80      	pop	{r7, pc}

0800d95c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800d95c:	b480      	push	{r7}
 800d95e:	b085      	sub	sp, #20
 800d960:	af00      	add	r7, sp, #0
 800d962:	4603      	mov	r3, r0
 800d964:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800d966:	2300      	movs	r3, #0
 800d968:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800d96a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d96e:	2b84      	cmp	r3, #132	@ 0x84
 800d970:	d005      	beq.n	800d97e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800d972:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	4413      	add	r3, r2
 800d97a:	3303      	adds	r3, #3
 800d97c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800d97e:	68fb      	ldr	r3, [r7, #12]
}
 800d980:	4618      	mov	r0, r3
 800d982:	3714      	adds	r7, #20
 800d984:	46bd      	mov	sp, r7
 800d986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d98a:	4770      	bx	lr

0800d98c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800d990:	f000 fae4 	bl	800df5c <vTaskStartScheduler>
  
  return osOK;
 800d994:	2300      	movs	r3, #0
}
 800d996:	4618      	mov	r0, r3
 800d998:	bd80      	pop	{r7, pc}

0800d99a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800d99a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d99c:	b089      	sub	sp, #36	@ 0x24
 800d99e:	af04      	add	r7, sp, #16
 800d9a0:	6078      	str	r0, [r7, #4]
 800d9a2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	695b      	ldr	r3, [r3, #20]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d020      	beq.n	800d9ee <osThreadCreate+0x54>
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	699b      	ldr	r3, [r3, #24]
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d01c      	beq.n	800d9ee <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	685c      	ldr	r4, [r3, #4]
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	691e      	ldr	r6, [r3, #16]
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d9c6:	4618      	mov	r0, r3
 800d9c8:	f7ff ffc8 	bl	800d95c <makeFreeRtosPriority>
 800d9cc:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	695b      	ldr	r3, [r3, #20]
 800d9d2:	687a      	ldr	r2, [r7, #4]
 800d9d4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d9d6:	9202      	str	r2, [sp, #8]
 800d9d8:	9301      	str	r3, [sp, #4]
 800d9da:	9100      	str	r1, [sp, #0]
 800d9dc:	683b      	ldr	r3, [r7, #0]
 800d9de:	4632      	mov	r2, r6
 800d9e0:	4629      	mov	r1, r5
 800d9e2:	4620      	mov	r0, r4
 800d9e4:	f000 f8ed 	bl	800dbc2 <xTaskCreateStatic>
 800d9e8:	4603      	mov	r3, r0
 800d9ea:	60fb      	str	r3, [r7, #12]
 800d9ec:	e01c      	b.n	800da28 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	685c      	ldr	r4, [r3, #4]
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d9fa:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800da02:	4618      	mov	r0, r3
 800da04:	f7ff ffaa 	bl	800d95c <makeFreeRtosPriority>
 800da08:	4602      	mov	r2, r0
 800da0a:	f107 030c 	add.w	r3, r7, #12
 800da0e:	9301      	str	r3, [sp, #4]
 800da10:	9200      	str	r2, [sp, #0]
 800da12:	683b      	ldr	r3, [r7, #0]
 800da14:	4632      	mov	r2, r6
 800da16:	4629      	mov	r1, r5
 800da18:	4620      	mov	r0, r4
 800da1a:	f000 f932 	bl	800dc82 <xTaskCreate>
 800da1e:	4603      	mov	r3, r0
 800da20:	2b01      	cmp	r3, #1
 800da22:	d001      	beq.n	800da28 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800da24:	2300      	movs	r3, #0
 800da26:	e000      	b.n	800da2a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800da28:	68fb      	ldr	r3, [r7, #12]
}
 800da2a:	4618      	mov	r0, r3
 800da2c:	3714      	adds	r7, #20
 800da2e:	46bd      	mov	sp, r7
 800da30:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800da32 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800da32:	b580      	push	{r7, lr}
 800da34:	b084      	sub	sp, #16
 800da36:	af00      	add	r7, sp, #0
 800da38:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d001      	beq.n	800da48 <osDelay+0x16>
 800da44:	68fb      	ldr	r3, [r7, #12]
 800da46:	e000      	b.n	800da4a <osDelay+0x18>
 800da48:	2301      	movs	r3, #1
 800da4a:	4618      	mov	r0, r3
 800da4c:	f000 fa50 	bl	800def0 <vTaskDelay>
  
  return osOK;
 800da50:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800da52:	4618      	mov	r0, r3
 800da54:	3710      	adds	r7, #16
 800da56:	46bd      	mov	sp, r7
 800da58:	bd80      	pop	{r7, pc}

0800da5a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800da5a:	b480      	push	{r7}
 800da5c:	b083      	sub	sp, #12
 800da5e:	af00      	add	r7, sp, #0
 800da60:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	f103 0208 	add.w	r2, r3, #8
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800da72:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	f103 0208 	add.w	r2, r3, #8
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	f103 0208 	add.w	r2, r3, #8
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	2200      	movs	r2, #0
 800da8c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800da8e:	bf00      	nop
 800da90:	370c      	adds	r7, #12
 800da92:	46bd      	mov	sp, r7
 800da94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da98:	4770      	bx	lr

0800da9a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800da9a:	b480      	push	{r7}
 800da9c:	b083      	sub	sp, #12
 800da9e:	af00      	add	r7, sp, #0
 800daa0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	2200      	movs	r2, #0
 800daa6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800daa8:	bf00      	nop
 800daaa:	370c      	adds	r7, #12
 800daac:	46bd      	mov	sp, r7
 800daae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab2:	4770      	bx	lr

0800dab4 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dab4:	b480      	push	{r7}
 800dab6:	b085      	sub	sp, #20
 800dab8:	af00      	add	r7, sp, #0
 800daba:	6078      	str	r0, [r7, #4]
 800dabc:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	685b      	ldr	r3, [r3, #4]
 800dac2:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800dac4:	683b      	ldr	r3, [r7, #0]
 800dac6:	68fa      	ldr	r2, [r7, #12]
 800dac8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	689a      	ldr	r2, [r3, #8]
 800dace:	683b      	ldr	r3, [r7, #0]
 800dad0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	689b      	ldr	r3, [r3, #8]
 800dad6:	683a      	ldr	r2, [r7, #0]
 800dad8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	683a      	ldr	r2, [r7, #0]
 800dade:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800dae0:	683b      	ldr	r3, [r7, #0]
 800dae2:	687a      	ldr	r2, [r7, #4]
 800dae4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	1c5a      	adds	r2, r3, #1
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	601a      	str	r2, [r3, #0]
}
 800daf0:	bf00      	nop
 800daf2:	3714      	adds	r7, #20
 800daf4:	46bd      	mov	sp, r7
 800daf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dafa:	4770      	bx	lr

0800dafc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dafc:	b480      	push	{r7}
 800dafe:	b085      	sub	sp, #20
 800db00:	af00      	add	r7, sp, #0
 800db02:	6078      	str	r0, [r7, #4]
 800db04:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800db06:	683b      	ldr	r3, [r7, #0]
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800db0c:	68bb      	ldr	r3, [r7, #8]
 800db0e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800db12:	d103      	bne.n	800db1c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	691b      	ldr	r3, [r3, #16]
 800db18:	60fb      	str	r3, [r7, #12]
 800db1a:	e00c      	b.n	800db36 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	3308      	adds	r3, #8
 800db20:	60fb      	str	r3, [r7, #12]
 800db22:	e002      	b.n	800db2a <vListInsert+0x2e>
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	685b      	ldr	r3, [r3, #4]
 800db28:	60fb      	str	r3, [r7, #12]
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	685b      	ldr	r3, [r3, #4]
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	68ba      	ldr	r2, [r7, #8]
 800db32:	429a      	cmp	r2, r3
 800db34:	d2f6      	bcs.n	800db24 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	685a      	ldr	r2, [r3, #4]
 800db3a:	683b      	ldr	r3, [r7, #0]
 800db3c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800db3e:	683b      	ldr	r3, [r7, #0]
 800db40:	685b      	ldr	r3, [r3, #4]
 800db42:	683a      	ldr	r2, [r7, #0]
 800db44:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800db46:	683b      	ldr	r3, [r7, #0]
 800db48:	68fa      	ldr	r2, [r7, #12]
 800db4a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	683a      	ldr	r2, [r7, #0]
 800db50:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800db52:	683b      	ldr	r3, [r7, #0]
 800db54:	687a      	ldr	r2, [r7, #4]
 800db56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	681b      	ldr	r3, [r3, #0]
 800db5c:	1c5a      	adds	r2, r3, #1
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	601a      	str	r2, [r3, #0]
}
 800db62:	bf00      	nop
 800db64:	3714      	adds	r7, #20
 800db66:	46bd      	mov	sp, r7
 800db68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6c:	4770      	bx	lr

0800db6e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800db6e:	b480      	push	{r7}
 800db70:	b085      	sub	sp, #20
 800db72:	af00      	add	r7, sp, #0
 800db74:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	691b      	ldr	r3, [r3, #16]
 800db7a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	685b      	ldr	r3, [r3, #4]
 800db80:	687a      	ldr	r2, [r7, #4]
 800db82:	6892      	ldr	r2, [r2, #8]
 800db84:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	689b      	ldr	r3, [r3, #8]
 800db8a:	687a      	ldr	r2, [r7, #4]
 800db8c:	6852      	ldr	r2, [r2, #4]
 800db8e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	685b      	ldr	r3, [r3, #4]
 800db94:	687a      	ldr	r2, [r7, #4]
 800db96:	429a      	cmp	r2, r3
 800db98:	d103      	bne.n	800dba2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	689a      	ldr	r2, [r3, #8]
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	2200      	movs	r2, #0
 800dba6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	1e5a      	subs	r2, r3, #1
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	681b      	ldr	r3, [r3, #0]
}
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	3714      	adds	r7, #20
 800dbba:	46bd      	mov	sp, r7
 800dbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc0:	4770      	bx	lr

0800dbc2 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800dbc2:	b580      	push	{r7, lr}
 800dbc4:	b08e      	sub	sp, #56	@ 0x38
 800dbc6:	af04      	add	r7, sp, #16
 800dbc8:	60f8      	str	r0, [r7, #12]
 800dbca:	60b9      	str	r1, [r7, #8]
 800dbcc:	607a      	str	r2, [r7, #4]
 800dbce:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800dbd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d10b      	bne.n	800dbee <xTaskCreateStatic+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800dbd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbda:	f383 8811 	msr	BASEPRI, r3
 800dbde:	f3bf 8f6f 	isb	sy
 800dbe2:	f3bf 8f4f 	dsb	sy
 800dbe6:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800dbe8:	bf00      	nop
 800dbea:	bf00      	nop
 800dbec:	e7fd      	b.n	800dbea <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800dbee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbf0:	2b00      	cmp	r3, #0
 800dbf2:	d10b      	bne.n	800dc0c <xTaskCreateStatic+0x4a>
	__asm volatile
 800dbf4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbf8:	f383 8811 	msr	BASEPRI, r3
 800dbfc:	f3bf 8f6f 	isb	sy
 800dc00:	f3bf 8f4f 	dsb	sy
 800dc04:	61fb      	str	r3, [r7, #28]
}
 800dc06:	bf00      	nop
 800dc08:	bf00      	nop
 800dc0a:	e7fd      	b.n	800dc08 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800dc0c:	2354      	movs	r3, #84	@ 0x54
 800dc0e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800dc10:	693b      	ldr	r3, [r7, #16]
 800dc12:	2b54      	cmp	r3, #84	@ 0x54
 800dc14:	d00b      	beq.n	800dc2e <xTaskCreateStatic+0x6c>
	__asm volatile
 800dc16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc1a:	f383 8811 	msr	BASEPRI, r3
 800dc1e:	f3bf 8f6f 	isb	sy
 800dc22:	f3bf 8f4f 	dsb	sy
 800dc26:	61bb      	str	r3, [r7, #24]
}
 800dc28:	bf00      	nop
 800dc2a:	bf00      	nop
 800dc2c:	e7fd      	b.n	800dc2a <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800dc2e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800dc30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d01e      	beq.n	800dc74 <xTaskCreateStatic+0xb2>
 800dc36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d01b      	beq.n	800dc74 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dc3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc3e:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800dc40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc42:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dc44:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800dc46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc48:	2202      	movs	r2, #2
 800dc4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800dc4e:	2300      	movs	r3, #0
 800dc50:	9303      	str	r3, [sp, #12]
 800dc52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc54:	9302      	str	r3, [sp, #8]
 800dc56:	f107 0314 	add.w	r3, r7, #20
 800dc5a:	9301      	str	r3, [sp, #4]
 800dc5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc5e:	9300      	str	r3, [sp, #0]
 800dc60:	683b      	ldr	r3, [r7, #0]
 800dc62:	687a      	ldr	r2, [r7, #4]
 800dc64:	68b9      	ldr	r1, [r7, #8]
 800dc66:	68f8      	ldr	r0, [r7, #12]
 800dc68:	f000 f850 	bl	800dd0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dc6c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800dc6e:	f000 f8d5 	bl	800de1c <prvAddNewTaskToReadyList>
 800dc72:	e001      	b.n	800dc78 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800dc74:	2300      	movs	r3, #0
 800dc76:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800dc78:	697b      	ldr	r3, [r7, #20]
	}
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	3728      	adds	r7, #40	@ 0x28
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	bd80      	pop	{r7, pc}

0800dc82 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800dc82:	b580      	push	{r7, lr}
 800dc84:	b08c      	sub	sp, #48	@ 0x30
 800dc86:	af04      	add	r7, sp, #16
 800dc88:	60f8      	str	r0, [r7, #12]
 800dc8a:	60b9      	str	r1, [r7, #8]
 800dc8c:	603b      	str	r3, [r7, #0]
 800dc8e:	4613      	mov	r3, r2
 800dc90:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800dc92:	88fb      	ldrh	r3, [r7, #6]
 800dc94:	009b      	lsls	r3, r3, #2
 800dc96:	4618      	mov	r0, r3
 800dc98:	f000 fece 	bl	800ea38 <pvPortMalloc>
 800dc9c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800dc9e:	697b      	ldr	r3, [r7, #20]
 800dca0:	2b00      	cmp	r3, #0
 800dca2:	d00e      	beq.n	800dcc2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800dca4:	2054      	movs	r0, #84	@ 0x54
 800dca6:	f000 fec7 	bl	800ea38 <pvPortMalloc>
 800dcaa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800dcac:	69fb      	ldr	r3, [r7, #28]
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d003      	beq.n	800dcba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800dcb2:	69fb      	ldr	r3, [r7, #28]
 800dcb4:	697a      	ldr	r2, [r7, #20]
 800dcb6:	631a      	str	r2, [r3, #48]	@ 0x30
 800dcb8:	e005      	b.n	800dcc6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800dcba:	6978      	ldr	r0, [r7, #20]
 800dcbc:	f000 ff8a 	bl	800ebd4 <vPortFree>
 800dcc0:	e001      	b.n	800dcc6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800dcc6:	69fb      	ldr	r3, [r7, #28]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d017      	beq.n	800dcfc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800dccc:	69fb      	ldr	r3, [r7, #28]
 800dcce:	2200      	movs	r2, #0
 800dcd0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800dcd4:	88fa      	ldrh	r2, [r7, #6]
 800dcd6:	2300      	movs	r3, #0
 800dcd8:	9303      	str	r3, [sp, #12]
 800dcda:	69fb      	ldr	r3, [r7, #28]
 800dcdc:	9302      	str	r3, [sp, #8]
 800dcde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dce0:	9301      	str	r3, [sp, #4]
 800dce2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dce4:	9300      	str	r3, [sp, #0]
 800dce6:	683b      	ldr	r3, [r7, #0]
 800dce8:	68b9      	ldr	r1, [r7, #8]
 800dcea:	68f8      	ldr	r0, [r7, #12]
 800dcec:	f000 f80e 	bl	800dd0c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dcf0:	69f8      	ldr	r0, [r7, #28]
 800dcf2:	f000 f893 	bl	800de1c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800dcf6:	2301      	movs	r3, #1
 800dcf8:	61bb      	str	r3, [r7, #24]
 800dcfa:	e002      	b.n	800dd02 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dcfc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dd00:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800dd02:	69bb      	ldr	r3, [r7, #24]
	}
 800dd04:	4618      	mov	r0, r3
 800dd06:	3720      	adds	r7, #32
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	bd80      	pop	{r7, pc}

0800dd0c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800dd0c:	b580      	push	{r7, lr}
 800dd0e:	b088      	sub	sp, #32
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	60f8      	str	r0, [r7, #12]
 800dd14:	60b9      	str	r1, [r7, #8]
 800dd16:	607a      	str	r2, [r7, #4]
 800dd18:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800dd1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dd24:	3b01      	subs	r3, #1
 800dd26:	009b      	lsls	r3, r3, #2
 800dd28:	4413      	add	r3, r2
 800dd2a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800dd2c:	69bb      	ldr	r3, [r7, #24]
 800dd2e:	f023 0307 	bic.w	r3, r3, #7
 800dd32:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800dd34:	69bb      	ldr	r3, [r7, #24]
 800dd36:	f003 0307 	and.w	r3, r3, #7
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d00b      	beq.n	800dd56 <prvInitialiseNewTask+0x4a>
	__asm volatile
 800dd3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd42:	f383 8811 	msr	BASEPRI, r3
 800dd46:	f3bf 8f6f 	isb	sy
 800dd4a:	f3bf 8f4f 	dsb	sy
 800dd4e:	617b      	str	r3, [r7, #20]
}
 800dd50:	bf00      	nop
 800dd52:	bf00      	nop
 800dd54:	e7fd      	b.n	800dd52 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800dd56:	68bb      	ldr	r3, [r7, #8]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d01f      	beq.n	800dd9c <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	61fb      	str	r3, [r7, #28]
 800dd60:	e012      	b.n	800dd88 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800dd62:	68ba      	ldr	r2, [r7, #8]
 800dd64:	69fb      	ldr	r3, [r7, #28]
 800dd66:	4413      	add	r3, r2
 800dd68:	7819      	ldrb	r1, [r3, #0]
 800dd6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dd6c:	69fb      	ldr	r3, [r7, #28]
 800dd6e:	4413      	add	r3, r2
 800dd70:	3334      	adds	r3, #52	@ 0x34
 800dd72:	460a      	mov	r2, r1
 800dd74:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800dd76:	68ba      	ldr	r2, [r7, #8]
 800dd78:	69fb      	ldr	r3, [r7, #28]
 800dd7a:	4413      	add	r3, r2
 800dd7c:	781b      	ldrb	r3, [r3, #0]
 800dd7e:	2b00      	cmp	r3, #0
 800dd80:	d006      	beq.n	800dd90 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dd82:	69fb      	ldr	r3, [r7, #28]
 800dd84:	3301      	adds	r3, #1
 800dd86:	61fb      	str	r3, [r7, #28]
 800dd88:	69fb      	ldr	r3, [r7, #28]
 800dd8a:	2b0f      	cmp	r3, #15
 800dd8c:	d9e9      	bls.n	800dd62 <prvInitialiseNewTask+0x56>
 800dd8e:	e000      	b.n	800dd92 <prvInitialiseNewTask+0x86>
			{
				break;
 800dd90:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800dd92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd94:	2200      	movs	r2, #0
 800dd96:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800dd9a:	e003      	b.n	800dda4 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800dd9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dd9e:	2200      	movs	r2, #0
 800dda0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dda4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dda6:	2b06      	cmp	r3, #6
 800dda8:	d901      	bls.n	800ddae <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ddaa:	2306      	movs	r3, #6
 800ddac:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ddae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddb0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ddb2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ddb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddb6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ddb8:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800ddba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ddc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddc2:	3304      	adds	r3, #4
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	f7ff fe68 	bl	800da9a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ddca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddcc:	3318      	adds	r3, #24
 800ddce:	4618      	mov	r0, r3
 800ddd0:	f7ff fe63 	bl	800da9a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ddd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ddd8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ddda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dddc:	f1c3 0207 	rsb	r2, r3, #7
 800dde0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dde2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dde4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dde6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dde8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ddea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddec:	2200      	movs	r2, #0
 800ddee:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ddf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ddf8:	683a      	ldr	r2, [r7, #0]
 800ddfa:	68f9      	ldr	r1, [r7, #12]
 800ddfc:	69b8      	ldr	r0, [r7, #24]
 800ddfe:	f000 fc0d 	bl	800e61c <pxPortInitialiseStack>
 800de02:	4602      	mov	r2, r0
 800de04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800de06:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800de08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de0a:	2b00      	cmp	r3, #0
 800de0c:	d002      	beq.n	800de14 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800de0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800de12:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800de14:	bf00      	nop
 800de16:	3720      	adds	r7, #32
 800de18:	46bd      	mov	sp, r7
 800de1a:	bd80      	pop	{r7, pc}

0800de1c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800de1c:	b580      	push	{r7, lr}
 800de1e:	b082      	sub	sp, #8
 800de20:	af00      	add	r7, sp, #0
 800de22:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800de24:	f000 fd28 	bl	800e878 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800de28:	4b2a      	ldr	r3, [pc, #168]	@ (800ded4 <prvAddNewTaskToReadyList+0xb8>)
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	3301      	adds	r3, #1
 800de2e:	4a29      	ldr	r2, [pc, #164]	@ (800ded4 <prvAddNewTaskToReadyList+0xb8>)
 800de30:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800de32:	4b29      	ldr	r3, [pc, #164]	@ (800ded8 <prvAddNewTaskToReadyList+0xbc>)
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d109      	bne.n	800de4e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800de3a:	4a27      	ldr	r2, [pc, #156]	@ (800ded8 <prvAddNewTaskToReadyList+0xbc>)
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800de40:	4b24      	ldr	r3, [pc, #144]	@ (800ded4 <prvAddNewTaskToReadyList+0xb8>)
 800de42:	681b      	ldr	r3, [r3, #0]
 800de44:	2b01      	cmp	r3, #1
 800de46:	d110      	bne.n	800de6a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800de48:	f000 fac4 	bl	800e3d4 <prvInitialiseTaskLists>
 800de4c:	e00d      	b.n	800de6a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800de4e:	4b23      	ldr	r3, [pc, #140]	@ (800dedc <prvAddNewTaskToReadyList+0xc0>)
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d109      	bne.n	800de6a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800de56:	4b20      	ldr	r3, [pc, #128]	@ (800ded8 <prvAddNewTaskToReadyList+0xbc>)
 800de58:	681b      	ldr	r3, [r3, #0]
 800de5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de60:	429a      	cmp	r2, r3
 800de62:	d802      	bhi.n	800de6a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800de64:	4a1c      	ldr	r2, [pc, #112]	@ (800ded8 <prvAddNewTaskToReadyList+0xbc>)
 800de66:	687b      	ldr	r3, [r7, #4]
 800de68:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800de6a:	4b1d      	ldr	r3, [pc, #116]	@ (800dee0 <prvAddNewTaskToReadyList+0xc4>)
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	3301      	adds	r3, #1
 800de70:	4a1b      	ldr	r2, [pc, #108]	@ (800dee0 <prvAddNewTaskToReadyList+0xc4>)
 800de72:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800de78:	2201      	movs	r2, #1
 800de7a:	409a      	lsls	r2, r3
 800de7c:	4b19      	ldr	r3, [pc, #100]	@ (800dee4 <prvAddNewTaskToReadyList+0xc8>)
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	4313      	orrs	r3, r2
 800de82:	4a18      	ldr	r2, [pc, #96]	@ (800dee4 <prvAddNewTaskToReadyList+0xc8>)
 800de84:	6013      	str	r3, [r2, #0]
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800de8a:	4613      	mov	r3, r2
 800de8c:	009b      	lsls	r3, r3, #2
 800de8e:	4413      	add	r3, r2
 800de90:	009b      	lsls	r3, r3, #2
 800de92:	4a15      	ldr	r2, [pc, #84]	@ (800dee8 <prvAddNewTaskToReadyList+0xcc>)
 800de94:	441a      	add	r2, r3
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	3304      	adds	r3, #4
 800de9a:	4619      	mov	r1, r3
 800de9c:	4610      	mov	r0, r2
 800de9e:	f7ff fe09 	bl	800dab4 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800dea2:	f000 fd1b 	bl	800e8dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800dea6:	4b0d      	ldr	r3, [pc, #52]	@ (800dedc <prvAddNewTaskToReadyList+0xc0>)
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d00e      	beq.n	800decc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800deae:	4b0a      	ldr	r3, [pc, #40]	@ (800ded8 <prvAddNewTaskToReadyList+0xbc>)
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800deb8:	429a      	cmp	r2, r3
 800deba:	d207      	bcs.n	800decc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800debc:	4b0b      	ldr	r3, [pc, #44]	@ (800deec <prvAddNewTaskToReadyList+0xd0>)
 800debe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dec2:	601a      	str	r2, [r3, #0]
 800dec4:	f3bf 8f4f 	dsb	sy
 800dec8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800decc:	bf00      	nop
 800dece:	3708      	adds	r7, #8
 800ded0:	46bd      	mov	sp, r7
 800ded2:	bd80      	pop	{r7, pc}
 800ded4:	20000cac 	.word	0x20000cac
 800ded8:	20000bac 	.word	0x20000bac
 800dedc:	20000cb8 	.word	0x20000cb8
 800dee0:	20000cc8 	.word	0x20000cc8
 800dee4:	20000cb4 	.word	0x20000cb4
 800dee8:	20000bb0 	.word	0x20000bb0
 800deec:	e000ed04 	.word	0xe000ed04

0800def0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800def0:	b580      	push	{r7, lr}
 800def2:	b084      	sub	sp, #16
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800def8:	2300      	movs	r3, #0
 800defa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d018      	beq.n	800df34 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800df02:	4b14      	ldr	r3, [pc, #80]	@ (800df54 <vTaskDelay+0x64>)
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	2b00      	cmp	r3, #0
 800df08:	d00b      	beq.n	800df22 <vTaskDelay+0x32>
	__asm volatile
 800df0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df0e:	f383 8811 	msr	BASEPRI, r3
 800df12:	f3bf 8f6f 	isb	sy
 800df16:	f3bf 8f4f 	dsb	sy
 800df1a:	60bb      	str	r3, [r7, #8]
}
 800df1c:	bf00      	nop
 800df1e:	bf00      	nop
 800df20:	e7fd      	b.n	800df1e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800df22:	f000 f87d 	bl	800e020 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800df26:	2100      	movs	r1, #0
 800df28:	6878      	ldr	r0, [r7, #4]
 800df2a:	f000 fb11 	bl	800e550 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800df2e:	f000 f885 	bl	800e03c <xTaskResumeAll>
 800df32:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	2b00      	cmp	r3, #0
 800df38:	d107      	bne.n	800df4a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800df3a:	4b07      	ldr	r3, [pc, #28]	@ (800df58 <vTaskDelay+0x68>)
 800df3c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800df40:	601a      	str	r2, [r3, #0]
 800df42:	f3bf 8f4f 	dsb	sy
 800df46:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800df4a:	bf00      	nop
 800df4c:	3710      	adds	r7, #16
 800df4e:	46bd      	mov	sp, r7
 800df50:	bd80      	pop	{r7, pc}
 800df52:	bf00      	nop
 800df54:	20000cd4 	.word	0x20000cd4
 800df58:	e000ed04 	.word	0xe000ed04

0800df5c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800df5c:	b580      	push	{r7, lr}
 800df5e:	b08a      	sub	sp, #40	@ 0x28
 800df60:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800df62:	2300      	movs	r3, #0
 800df64:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800df66:	2300      	movs	r3, #0
 800df68:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800df6a:	463a      	mov	r2, r7
 800df6c:	1d39      	adds	r1, r7, #4
 800df6e:	f107 0308 	add.w	r3, r7, #8
 800df72:	4618      	mov	r0, r3
 800df74:	f7f3 f890 	bl	8001098 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800df78:	6839      	ldr	r1, [r7, #0]
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	68ba      	ldr	r2, [r7, #8]
 800df7e:	9202      	str	r2, [sp, #8]
 800df80:	9301      	str	r3, [sp, #4]
 800df82:	2300      	movs	r3, #0
 800df84:	9300      	str	r3, [sp, #0]
 800df86:	2300      	movs	r3, #0
 800df88:	460a      	mov	r2, r1
 800df8a:	491f      	ldr	r1, [pc, #124]	@ (800e008 <vTaskStartScheduler+0xac>)
 800df8c:	481f      	ldr	r0, [pc, #124]	@ (800e00c <vTaskStartScheduler+0xb0>)
 800df8e:	f7ff fe18 	bl	800dbc2 <xTaskCreateStatic>
 800df92:	4603      	mov	r3, r0
 800df94:	4a1e      	ldr	r2, [pc, #120]	@ (800e010 <vTaskStartScheduler+0xb4>)
 800df96:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800df98:	4b1d      	ldr	r3, [pc, #116]	@ (800e010 <vTaskStartScheduler+0xb4>)
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d002      	beq.n	800dfa6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dfa0:	2301      	movs	r3, #1
 800dfa2:	617b      	str	r3, [r7, #20]
 800dfa4:	e001      	b.n	800dfaa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800dfaa:	697b      	ldr	r3, [r7, #20]
 800dfac:	2b01      	cmp	r3, #1
 800dfae:	d116      	bne.n	800dfde <vTaskStartScheduler+0x82>
	__asm volatile
 800dfb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfb4:	f383 8811 	msr	BASEPRI, r3
 800dfb8:	f3bf 8f6f 	isb	sy
 800dfbc:	f3bf 8f4f 	dsb	sy
 800dfc0:	613b      	str	r3, [r7, #16]
}
 800dfc2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800dfc4:	4b13      	ldr	r3, [pc, #76]	@ (800e014 <vTaskStartScheduler+0xb8>)
 800dfc6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dfca:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dfcc:	4b12      	ldr	r3, [pc, #72]	@ (800e018 <vTaskStartScheduler+0xbc>)
 800dfce:	2201      	movs	r2, #1
 800dfd0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dfd2:	4b12      	ldr	r3, [pc, #72]	@ (800e01c <vTaskStartScheduler+0xc0>)
 800dfd4:	2200      	movs	r2, #0
 800dfd6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dfd8:	f000 fbaa 	bl	800e730 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dfdc:	e00f      	b.n	800dffe <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dfde:	697b      	ldr	r3, [r7, #20]
 800dfe0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800dfe4:	d10b      	bne.n	800dffe <vTaskStartScheduler+0xa2>
	__asm volatile
 800dfe6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfea:	f383 8811 	msr	BASEPRI, r3
 800dfee:	f3bf 8f6f 	isb	sy
 800dff2:	f3bf 8f4f 	dsb	sy
 800dff6:	60fb      	str	r3, [r7, #12]
}
 800dff8:	bf00      	nop
 800dffa:	bf00      	nop
 800dffc:	e7fd      	b.n	800dffa <vTaskStartScheduler+0x9e>
}
 800dffe:	bf00      	nop
 800e000:	3718      	adds	r7, #24
 800e002:	46bd      	mov	sp, r7
 800e004:	bd80      	pop	{r7, pc}
 800e006:	bf00      	nop
 800e008:	0800fa94 	.word	0x0800fa94
 800e00c:	0800e3a5 	.word	0x0800e3a5
 800e010:	20000cd0 	.word	0x20000cd0
 800e014:	20000ccc 	.word	0x20000ccc
 800e018:	20000cb8 	.word	0x20000cb8
 800e01c:	20000cb0 	.word	0x20000cb0

0800e020 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e020:	b480      	push	{r7}
 800e022:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e024:	4b04      	ldr	r3, [pc, #16]	@ (800e038 <vTaskSuspendAll+0x18>)
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	3301      	adds	r3, #1
 800e02a:	4a03      	ldr	r2, [pc, #12]	@ (800e038 <vTaskSuspendAll+0x18>)
 800e02c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e02e:	bf00      	nop
 800e030:	46bd      	mov	sp, r7
 800e032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e036:	4770      	bx	lr
 800e038:	20000cd4 	.word	0x20000cd4

0800e03c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e03c:	b580      	push	{r7, lr}
 800e03e:	b084      	sub	sp, #16
 800e040:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e042:	2300      	movs	r3, #0
 800e044:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e046:	2300      	movs	r3, #0
 800e048:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e04a:	4b42      	ldr	r3, [pc, #264]	@ (800e154 <xTaskResumeAll+0x118>)
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	2b00      	cmp	r3, #0
 800e050:	d10b      	bne.n	800e06a <xTaskResumeAll+0x2e>
	__asm volatile
 800e052:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e056:	f383 8811 	msr	BASEPRI, r3
 800e05a:	f3bf 8f6f 	isb	sy
 800e05e:	f3bf 8f4f 	dsb	sy
 800e062:	603b      	str	r3, [r7, #0]
}
 800e064:	bf00      	nop
 800e066:	bf00      	nop
 800e068:	e7fd      	b.n	800e066 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e06a:	f000 fc05 	bl	800e878 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e06e:	4b39      	ldr	r3, [pc, #228]	@ (800e154 <xTaskResumeAll+0x118>)
 800e070:	681b      	ldr	r3, [r3, #0]
 800e072:	3b01      	subs	r3, #1
 800e074:	4a37      	ldr	r2, [pc, #220]	@ (800e154 <xTaskResumeAll+0x118>)
 800e076:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e078:	4b36      	ldr	r3, [pc, #216]	@ (800e154 <xTaskResumeAll+0x118>)
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d161      	bne.n	800e144 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e080:	4b35      	ldr	r3, [pc, #212]	@ (800e158 <xTaskResumeAll+0x11c>)
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d05d      	beq.n	800e144 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e088:	e02e      	b.n	800e0e8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e08a:	4b34      	ldr	r3, [pc, #208]	@ (800e15c <xTaskResumeAll+0x120>)
 800e08c:	68db      	ldr	r3, [r3, #12]
 800e08e:	68db      	ldr	r3, [r3, #12]
 800e090:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	3318      	adds	r3, #24
 800e096:	4618      	mov	r0, r3
 800e098:	f7ff fd69 	bl	800db6e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	3304      	adds	r3, #4
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	f7ff fd64 	bl	800db6e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0aa:	2201      	movs	r2, #1
 800e0ac:	409a      	lsls	r2, r3
 800e0ae:	4b2c      	ldr	r3, [pc, #176]	@ (800e160 <xTaskResumeAll+0x124>)
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	4313      	orrs	r3, r2
 800e0b4:	4a2a      	ldr	r2, [pc, #168]	@ (800e160 <xTaskResumeAll+0x124>)
 800e0b6:	6013      	str	r3, [r2, #0]
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0bc:	4613      	mov	r3, r2
 800e0be:	009b      	lsls	r3, r3, #2
 800e0c0:	4413      	add	r3, r2
 800e0c2:	009b      	lsls	r3, r3, #2
 800e0c4:	4a27      	ldr	r2, [pc, #156]	@ (800e164 <xTaskResumeAll+0x128>)
 800e0c6:	441a      	add	r2, r3
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	3304      	adds	r3, #4
 800e0cc:	4619      	mov	r1, r3
 800e0ce:	4610      	mov	r0, r2
 800e0d0:	f7ff fcf0 	bl	800dab4 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e0d4:	68fb      	ldr	r3, [r7, #12]
 800e0d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e0d8:	4b23      	ldr	r3, [pc, #140]	@ (800e168 <xTaskResumeAll+0x12c>)
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0de:	429a      	cmp	r2, r3
 800e0e0:	d302      	bcc.n	800e0e8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e0e2:	4b22      	ldr	r3, [pc, #136]	@ (800e16c <xTaskResumeAll+0x130>)
 800e0e4:	2201      	movs	r2, #1
 800e0e6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e0e8:	4b1c      	ldr	r3, [pc, #112]	@ (800e15c <xTaskResumeAll+0x120>)
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d1cc      	bne.n	800e08a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d001      	beq.n	800e0fa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e0f6:	f000 fa0b 	bl	800e510 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e0fa:	4b1d      	ldr	r3, [pc, #116]	@ (800e170 <xTaskResumeAll+0x134>)
 800e0fc:	681b      	ldr	r3, [r3, #0]
 800e0fe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d010      	beq.n	800e128 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e106:	f000 f837 	bl	800e178 <xTaskIncrementTick>
 800e10a:	4603      	mov	r3, r0
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d002      	beq.n	800e116 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e110:	4b16      	ldr	r3, [pc, #88]	@ (800e16c <xTaskResumeAll+0x130>)
 800e112:	2201      	movs	r2, #1
 800e114:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	3b01      	subs	r3, #1
 800e11a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d1f1      	bne.n	800e106 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e122:	4b13      	ldr	r3, [pc, #76]	@ (800e170 <xTaskResumeAll+0x134>)
 800e124:	2200      	movs	r2, #0
 800e126:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e128:	4b10      	ldr	r3, [pc, #64]	@ (800e16c <xTaskResumeAll+0x130>)
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d009      	beq.n	800e144 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e130:	2301      	movs	r3, #1
 800e132:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e134:	4b0f      	ldr	r3, [pc, #60]	@ (800e174 <xTaskResumeAll+0x138>)
 800e136:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e13a:	601a      	str	r2, [r3, #0]
 800e13c:	f3bf 8f4f 	dsb	sy
 800e140:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e144:	f000 fbca 	bl	800e8dc <vPortExitCritical>

	return xAlreadyYielded;
 800e148:	68bb      	ldr	r3, [r7, #8]
}
 800e14a:	4618      	mov	r0, r3
 800e14c:	3710      	adds	r7, #16
 800e14e:	46bd      	mov	sp, r7
 800e150:	bd80      	pop	{r7, pc}
 800e152:	bf00      	nop
 800e154:	20000cd4 	.word	0x20000cd4
 800e158:	20000cac 	.word	0x20000cac
 800e15c:	20000c6c 	.word	0x20000c6c
 800e160:	20000cb4 	.word	0x20000cb4
 800e164:	20000bb0 	.word	0x20000bb0
 800e168:	20000bac 	.word	0x20000bac
 800e16c:	20000cc0 	.word	0x20000cc0
 800e170:	20000cbc 	.word	0x20000cbc
 800e174:	e000ed04 	.word	0xe000ed04

0800e178 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e178:	b580      	push	{r7, lr}
 800e17a:	b086      	sub	sp, #24
 800e17c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e17e:	2300      	movs	r3, #0
 800e180:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e182:	4b4f      	ldr	r3, [pc, #316]	@ (800e2c0 <xTaskIncrementTick+0x148>)
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	2b00      	cmp	r3, #0
 800e188:	f040 808f 	bne.w	800e2aa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e18c:	4b4d      	ldr	r3, [pc, #308]	@ (800e2c4 <xTaskIncrementTick+0x14c>)
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	3301      	adds	r3, #1
 800e192:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e194:	4a4b      	ldr	r2, [pc, #300]	@ (800e2c4 <xTaskIncrementTick+0x14c>)
 800e196:	693b      	ldr	r3, [r7, #16]
 800e198:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e19a:	693b      	ldr	r3, [r7, #16]
 800e19c:	2b00      	cmp	r3, #0
 800e19e:	d121      	bne.n	800e1e4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800e1a0:	4b49      	ldr	r3, [pc, #292]	@ (800e2c8 <xTaskIncrementTick+0x150>)
 800e1a2:	681b      	ldr	r3, [r3, #0]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d00b      	beq.n	800e1c2 <xTaskIncrementTick+0x4a>
	__asm volatile
 800e1aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1ae:	f383 8811 	msr	BASEPRI, r3
 800e1b2:	f3bf 8f6f 	isb	sy
 800e1b6:	f3bf 8f4f 	dsb	sy
 800e1ba:	603b      	str	r3, [r7, #0]
}
 800e1bc:	bf00      	nop
 800e1be:	bf00      	nop
 800e1c0:	e7fd      	b.n	800e1be <xTaskIncrementTick+0x46>
 800e1c2:	4b41      	ldr	r3, [pc, #260]	@ (800e2c8 <xTaskIncrementTick+0x150>)
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	60fb      	str	r3, [r7, #12]
 800e1c8:	4b40      	ldr	r3, [pc, #256]	@ (800e2cc <xTaskIncrementTick+0x154>)
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	4a3e      	ldr	r2, [pc, #248]	@ (800e2c8 <xTaskIncrementTick+0x150>)
 800e1ce:	6013      	str	r3, [r2, #0]
 800e1d0:	4a3e      	ldr	r2, [pc, #248]	@ (800e2cc <xTaskIncrementTick+0x154>)
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	6013      	str	r3, [r2, #0]
 800e1d6:	4b3e      	ldr	r3, [pc, #248]	@ (800e2d0 <xTaskIncrementTick+0x158>)
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	3301      	adds	r3, #1
 800e1dc:	4a3c      	ldr	r2, [pc, #240]	@ (800e2d0 <xTaskIncrementTick+0x158>)
 800e1de:	6013      	str	r3, [r2, #0]
 800e1e0:	f000 f996 	bl	800e510 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e1e4:	4b3b      	ldr	r3, [pc, #236]	@ (800e2d4 <xTaskIncrementTick+0x15c>)
 800e1e6:	681b      	ldr	r3, [r3, #0]
 800e1e8:	693a      	ldr	r2, [r7, #16]
 800e1ea:	429a      	cmp	r2, r3
 800e1ec:	d348      	bcc.n	800e280 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e1ee:	4b36      	ldr	r3, [pc, #216]	@ (800e2c8 <xTaskIncrementTick+0x150>)
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	2b00      	cmp	r3, #0
 800e1f6:	d104      	bne.n	800e202 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e1f8:	4b36      	ldr	r3, [pc, #216]	@ (800e2d4 <xTaskIncrementTick+0x15c>)
 800e1fa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e1fe:	601a      	str	r2, [r3, #0]
					break;
 800e200:	e03e      	b.n	800e280 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e202:	4b31      	ldr	r3, [pc, #196]	@ (800e2c8 <xTaskIncrementTick+0x150>)
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	68db      	ldr	r3, [r3, #12]
 800e208:	68db      	ldr	r3, [r3, #12]
 800e20a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e20c:	68bb      	ldr	r3, [r7, #8]
 800e20e:	685b      	ldr	r3, [r3, #4]
 800e210:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e212:	693a      	ldr	r2, [r7, #16]
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	429a      	cmp	r2, r3
 800e218:	d203      	bcs.n	800e222 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e21a:	4a2e      	ldr	r2, [pc, #184]	@ (800e2d4 <xTaskIncrementTick+0x15c>)
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e220:	e02e      	b.n	800e280 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e222:	68bb      	ldr	r3, [r7, #8]
 800e224:	3304      	adds	r3, #4
 800e226:	4618      	mov	r0, r3
 800e228:	f7ff fca1 	bl	800db6e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e22c:	68bb      	ldr	r3, [r7, #8]
 800e22e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e230:	2b00      	cmp	r3, #0
 800e232:	d004      	beq.n	800e23e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e234:	68bb      	ldr	r3, [r7, #8]
 800e236:	3318      	adds	r3, #24
 800e238:	4618      	mov	r0, r3
 800e23a:	f7ff fc98 	bl	800db6e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e23e:	68bb      	ldr	r3, [r7, #8]
 800e240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e242:	2201      	movs	r2, #1
 800e244:	409a      	lsls	r2, r3
 800e246:	4b24      	ldr	r3, [pc, #144]	@ (800e2d8 <xTaskIncrementTick+0x160>)
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	4313      	orrs	r3, r2
 800e24c:	4a22      	ldr	r2, [pc, #136]	@ (800e2d8 <xTaskIncrementTick+0x160>)
 800e24e:	6013      	str	r3, [r2, #0]
 800e250:	68bb      	ldr	r3, [r7, #8]
 800e252:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e254:	4613      	mov	r3, r2
 800e256:	009b      	lsls	r3, r3, #2
 800e258:	4413      	add	r3, r2
 800e25a:	009b      	lsls	r3, r3, #2
 800e25c:	4a1f      	ldr	r2, [pc, #124]	@ (800e2dc <xTaskIncrementTick+0x164>)
 800e25e:	441a      	add	r2, r3
 800e260:	68bb      	ldr	r3, [r7, #8]
 800e262:	3304      	adds	r3, #4
 800e264:	4619      	mov	r1, r3
 800e266:	4610      	mov	r0, r2
 800e268:	f7ff fc24 	bl	800dab4 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e26c:	68bb      	ldr	r3, [r7, #8]
 800e26e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e270:	4b1b      	ldr	r3, [pc, #108]	@ (800e2e0 <xTaskIncrementTick+0x168>)
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e276:	429a      	cmp	r2, r3
 800e278:	d3b9      	bcc.n	800e1ee <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800e27a:	2301      	movs	r3, #1
 800e27c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e27e:	e7b6      	b.n	800e1ee <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e280:	4b17      	ldr	r3, [pc, #92]	@ (800e2e0 <xTaskIncrementTick+0x168>)
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e286:	4915      	ldr	r1, [pc, #84]	@ (800e2dc <xTaskIncrementTick+0x164>)
 800e288:	4613      	mov	r3, r2
 800e28a:	009b      	lsls	r3, r3, #2
 800e28c:	4413      	add	r3, r2
 800e28e:	009b      	lsls	r3, r3, #2
 800e290:	440b      	add	r3, r1
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	2b01      	cmp	r3, #1
 800e296:	d901      	bls.n	800e29c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e298:	2301      	movs	r3, #1
 800e29a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e29c:	4b11      	ldr	r3, [pc, #68]	@ (800e2e4 <xTaskIncrementTick+0x16c>)
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d007      	beq.n	800e2b4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e2a4:	2301      	movs	r3, #1
 800e2a6:	617b      	str	r3, [r7, #20]
 800e2a8:	e004      	b.n	800e2b4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e2aa:	4b0f      	ldr	r3, [pc, #60]	@ (800e2e8 <xTaskIncrementTick+0x170>)
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	3301      	adds	r3, #1
 800e2b0:	4a0d      	ldr	r2, [pc, #52]	@ (800e2e8 <xTaskIncrementTick+0x170>)
 800e2b2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e2b4:	697b      	ldr	r3, [r7, #20]
}
 800e2b6:	4618      	mov	r0, r3
 800e2b8:	3718      	adds	r7, #24
 800e2ba:	46bd      	mov	sp, r7
 800e2bc:	bd80      	pop	{r7, pc}
 800e2be:	bf00      	nop
 800e2c0:	20000cd4 	.word	0x20000cd4
 800e2c4:	20000cb0 	.word	0x20000cb0
 800e2c8:	20000c64 	.word	0x20000c64
 800e2cc:	20000c68 	.word	0x20000c68
 800e2d0:	20000cc4 	.word	0x20000cc4
 800e2d4:	20000ccc 	.word	0x20000ccc
 800e2d8:	20000cb4 	.word	0x20000cb4
 800e2dc:	20000bb0 	.word	0x20000bb0
 800e2e0:	20000bac 	.word	0x20000bac
 800e2e4:	20000cc0 	.word	0x20000cc0
 800e2e8:	20000cbc 	.word	0x20000cbc

0800e2ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e2ec:	b480      	push	{r7}
 800e2ee:	b087      	sub	sp, #28
 800e2f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e2f2:	4b27      	ldr	r3, [pc, #156]	@ (800e390 <vTaskSwitchContext+0xa4>)
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d003      	beq.n	800e302 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e2fa:	4b26      	ldr	r3, [pc, #152]	@ (800e394 <vTaskSwitchContext+0xa8>)
 800e2fc:	2201      	movs	r2, #1
 800e2fe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e300:	e040      	b.n	800e384 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800e302:	4b24      	ldr	r3, [pc, #144]	@ (800e394 <vTaskSwitchContext+0xa8>)
 800e304:	2200      	movs	r2, #0
 800e306:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e308:	4b23      	ldr	r3, [pc, #140]	@ (800e398 <vTaskSwitchContext+0xac>)
 800e30a:	681b      	ldr	r3, [r3, #0]
 800e30c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	fab3 f383 	clz	r3, r3
 800e314:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e316:	7afb      	ldrb	r3, [r7, #11]
 800e318:	f1c3 031f 	rsb	r3, r3, #31
 800e31c:	617b      	str	r3, [r7, #20]
 800e31e:	491f      	ldr	r1, [pc, #124]	@ (800e39c <vTaskSwitchContext+0xb0>)
 800e320:	697a      	ldr	r2, [r7, #20]
 800e322:	4613      	mov	r3, r2
 800e324:	009b      	lsls	r3, r3, #2
 800e326:	4413      	add	r3, r2
 800e328:	009b      	lsls	r3, r3, #2
 800e32a:	440b      	add	r3, r1
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d10b      	bne.n	800e34a <vTaskSwitchContext+0x5e>
	__asm volatile
 800e332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e336:	f383 8811 	msr	BASEPRI, r3
 800e33a:	f3bf 8f6f 	isb	sy
 800e33e:	f3bf 8f4f 	dsb	sy
 800e342:	607b      	str	r3, [r7, #4]
}
 800e344:	bf00      	nop
 800e346:	bf00      	nop
 800e348:	e7fd      	b.n	800e346 <vTaskSwitchContext+0x5a>
 800e34a:	697a      	ldr	r2, [r7, #20]
 800e34c:	4613      	mov	r3, r2
 800e34e:	009b      	lsls	r3, r3, #2
 800e350:	4413      	add	r3, r2
 800e352:	009b      	lsls	r3, r3, #2
 800e354:	4a11      	ldr	r2, [pc, #68]	@ (800e39c <vTaskSwitchContext+0xb0>)
 800e356:	4413      	add	r3, r2
 800e358:	613b      	str	r3, [r7, #16]
 800e35a:	693b      	ldr	r3, [r7, #16]
 800e35c:	685b      	ldr	r3, [r3, #4]
 800e35e:	685a      	ldr	r2, [r3, #4]
 800e360:	693b      	ldr	r3, [r7, #16]
 800e362:	605a      	str	r2, [r3, #4]
 800e364:	693b      	ldr	r3, [r7, #16]
 800e366:	685a      	ldr	r2, [r3, #4]
 800e368:	693b      	ldr	r3, [r7, #16]
 800e36a:	3308      	adds	r3, #8
 800e36c:	429a      	cmp	r2, r3
 800e36e:	d104      	bne.n	800e37a <vTaskSwitchContext+0x8e>
 800e370:	693b      	ldr	r3, [r7, #16]
 800e372:	685b      	ldr	r3, [r3, #4]
 800e374:	685a      	ldr	r2, [r3, #4]
 800e376:	693b      	ldr	r3, [r7, #16]
 800e378:	605a      	str	r2, [r3, #4]
 800e37a:	693b      	ldr	r3, [r7, #16]
 800e37c:	685b      	ldr	r3, [r3, #4]
 800e37e:	68db      	ldr	r3, [r3, #12]
 800e380:	4a07      	ldr	r2, [pc, #28]	@ (800e3a0 <vTaskSwitchContext+0xb4>)
 800e382:	6013      	str	r3, [r2, #0]
}
 800e384:	bf00      	nop
 800e386:	371c      	adds	r7, #28
 800e388:	46bd      	mov	sp, r7
 800e38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e38e:	4770      	bx	lr
 800e390:	20000cd4 	.word	0x20000cd4
 800e394:	20000cc0 	.word	0x20000cc0
 800e398:	20000cb4 	.word	0x20000cb4
 800e39c:	20000bb0 	.word	0x20000bb0
 800e3a0:	20000bac 	.word	0x20000bac

0800e3a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b082      	sub	sp, #8
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e3ac:	f000 f852 	bl	800e454 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e3b0:	4b06      	ldr	r3, [pc, #24]	@ (800e3cc <prvIdleTask+0x28>)
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	2b01      	cmp	r3, #1
 800e3b6:	d9f9      	bls.n	800e3ac <prvIdleTask+0x8>
			{
				taskYIELD();
 800e3b8:	4b05      	ldr	r3, [pc, #20]	@ (800e3d0 <prvIdleTask+0x2c>)
 800e3ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e3be:	601a      	str	r2, [r3, #0]
 800e3c0:	f3bf 8f4f 	dsb	sy
 800e3c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e3c8:	e7f0      	b.n	800e3ac <prvIdleTask+0x8>
 800e3ca:	bf00      	nop
 800e3cc:	20000bb0 	.word	0x20000bb0
 800e3d0:	e000ed04 	.word	0xe000ed04

0800e3d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	b082      	sub	sp, #8
 800e3d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e3da:	2300      	movs	r3, #0
 800e3dc:	607b      	str	r3, [r7, #4]
 800e3de:	e00c      	b.n	800e3fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e3e0:	687a      	ldr	r2, [r7, #4]
 800e3e2:	4613      	mov	r3, r2
 800e3e4:	009b      	lsls	r3, r3, #2
 800e3e6:	4413      	add	r3, r2
 800e3e8:	009b      	lsls	r3, r3, #2
 800e3ea:	4a12      	ldr	r2, [pc, #72]	@ (800e434 <prvInitialiseTaskLists+0x60>)
 800e3ec:	4413      	add	r3, r2
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	f7ff fb33 	bl	800da5a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	3301      	adds	r3, #1
 800e3f8:	607b      	str	r3, [r7, #4]
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	2b06      	cmp	r3, #6
 800e3fe:	d9ef      	bls.n	800e3e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e400:	480d      	ldr	r0, [pc, #52]	@ (800e438 <prvInitialiseTaskLists+0x64>)
 800e402:	f7ff fb2a 	bl	800da5a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e406:	480d      	ldr	r0, [pc, #52]	@ (800e43c <prvInitialiseTaskLists+0x68>)
 800e408:	f7ff fb27 	bl	800da5a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e40c:	480c      	ldr	r0, [pc, #48]	@ (800e440 <prvInitialiseTaskLists+0x6c>)
 800e40e:	f7ff fb24 	bl	800da5a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e412:	480c      	ldr	r0, [pc, #48]	@ (800e444 <prvInitialiseTaskLists+0x70>)
 800e414:	f7ff fb21 	bl	800da5a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e418:	480b      	ldr	r0, [pc, #44]	@ (800e448 <prvInitialiseTaskLists+0x74>)
 800e41a:	f7ff fb1e 	bl	800da5a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e41e:	4b0b      	ldr	r3, [pc, #44]	@ (800e44c <prvInitialiseTaskLists+0x78>)
 800e420:	4a05      	ldr	r2, [pc, #20]	@ (800e438 <prvInitialiseTaskLists+0x64>)
 800e422:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e424:	4b0a      	ldr	r3, [pc, #40]	@ (800e450 <prvInitialiseTaskLists+0x7c>)
 800e426:	4a05      	ldr	r2, [pc, #20]	@ (800e43c <prvInitialiseTaskLists+0x68>)
 800e428:	601a      	str	r2, [r3, #0]
}
 800e42a:	bf00      	nop
 800e42c:	3708      	adds	r7, #8
 800e42e:	46bd      	mov	sp, r7
 800e430:	bd80      	pop	{r7, pc}
 800e432:	bf00      	nop
 800e434:	20000bb0 	.word	0x20000bb0
 800e438:	20000c3c 	.word	0x20000c3c
 800e43c:	20000c50 	.word	0x20000c50
 800e440:	20000c6c 	.word	0x20000c6c
 800e444:	20000c80 	.word	0x20000c80
 800e448:	20000c98 	.word	0x20000c98
 800e44c:	20000c64 	.word	0x20000c64
 800e450:	20000c68 	.word	0x20000c68

0800e454 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e454:	b580      	push	{r7, lr}
 800e456:	b082      	sub	sp, #8
 800e458:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e45a:	e019      	b.n	800e490 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e45c:	f000 fa0c 	bl	800e878 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e460:	4b10      	ldr	r3, [pc, #64]	@ (800e4a4 <prvCheckTasksWaitingTermination+0x50>)
 800e462:	68db      	ldr	r3, [r3, #12]
 800e464:	68db      	ldr	r3, [r3, #12]
 800e466:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	3304      	adds	r3, #4
 800e46c:	4618      	mov	r0, r3
 800e46e:	f7ff fb7e 	bl	800db6e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e472:	4b0d      	ldr	r3, [pc, #52]	@ (800e4a8 <prvCheckTasksWaitingTermination+0x54>)
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	3b01      	subs	r3, #1
 800e478:	4a0b      	ldr	r2, [pc, #44]	@ (800e4a8 <prvCheckTasksWaitingTermination+0x54>)
 800e47a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e47c:	4b0b      	ldr	r3, [pc, #44]	@ (800e4ac <prvCheckTasksWaitingTermination+0x58>)
 800e47e:	681b      	ldr	r3, [r3, #0]
 800e480:	3b01      	subs	r3, #1
 800e482:	4a0a      	ldr	r2, [pc, #40]	@ (800e4ac <prvCheckTasksWaitingTermination+0x58>)
 800e484:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e486:	f000 fa29 	bl	800e8dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e48a:	6878      	ldr	r0, [r7, #4]
 800e48c:	f000 f810 	bl	800e4b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e490:	4b06      	ldr	r3, [pc, #24]	@ (800e4ac <prvCheckTasksWaitingTermination+0x58>)
 800e492:	681b      	ldr	r3, [r3, #0]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d1e1      	bne.n	800e45c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e498:	bf00      	nop
 800e49a:	bf00      	nop
 800e49c:	3708      	adds	r7, #8
 800e49e:	46bd      	mov	sp, r7
 800e4a0:	bd80      	pop	{r7, pc}
 800e4a2:	bf00      	nop
 800e4a4:	20000c80 	.word	0x20000c80
 800e4a8:	20000cac 	.word	0x20000cac
 800e4ac:	20000c94 	.word	0x20000c94

0800e4b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b084      	sub	sp, #16
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d108      	bne.n	800e4d4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e4c6:	4618      	mov	r0, r3
 800e4c8:	f000 fb84 	bl	800ebd4 <vPortFree>
				vPortFree( pxTCB );
 800e4cc:	6878      	ldr	r0, [r7, #4]
 800e4ce:	f000 fb81 	bl	800ebd4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e4d2:	e019      	b.n	800e508 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800e4da:	2b01      	cmp	r3, #1
 800e4dc:	d103      	bne.n	800e4e6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e4de:	6878      	ldr	r0, [r7, #4]
 800e4e0:	f000 fb78 	bl	800ebd4 <vPortFree>
	}
 800e4e4:	e010      	b.n	800e508 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800e4ec:	2b02      	cmp	r3, #2
 800e4ee:	d00b      	beq.n	800e508 <prvDeleteTCB+0x58>
	__asm volatile
 800e4f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4f4:	f383 8811 	msr	BASEPRI, r3
 800e4f8:	f3bf 8f6f 	isb	sy
 800e4fc:	f3bf 8f4f 	dsb	sy
 800e500:	60fb      	str	r3, [r7, #12]
}
 800e502:	bf00      	nop
 800e504:	bf00      	nop
 800e506:	e7fd      	b.n	800e504 <prvDeleteTCB+0x54>
	}
 800e508:	bf00      	nop
 800e50a:	3710      	adds	r7, #16
 800e50c:	46bd      	mov	sp, r7
 800e50e:	bd80      	pop	{r7, pc}

0800e510 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e510:	b480      	push	{r7}
 800e512:	b083      	sub	sp, #12
 800e514:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e516:	4b0c      	ldr	r3, [pc, #48]	@ (800e548 <prvResetNextTaskUnblockTime+0x38>)
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	681b      	ldr	r3, [r3, #0]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d104      	bne.n	800e52a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e520:	4b0a      	ldr	r3, [pc, #40]	@ (800e54c <prvResetNextTaskUnblockTime+0x3c>)
 800e522:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e526:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e528:	e008      	b.n	800e53c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e52a:	4b07      	ldr	r3, [pc, #28]	@ (800e548 <prvResetNextTaskUnblockTime+0x38>)
 800e52c:	681b      	ldr	r3, [r3, #0]
 800e52e:	68db      	ldr	r3, [r3, #12]
 800e530:	68db      	ldr	r3, [r3, #12]
 800e532:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	685b      	ldr	r3, [r3, #4]
 800e538:	4a04      	ldr	r2, [pc, #16]	@ (800e54c <prvResetNextTaskUnblockTime+0x3c>)
 800e53a:	6013      	str	r3, [r2, #0]
}
 800e53c:	bf00      	nop
 800e53e:	370c      	adds	r7, #12
 800e540:	46bd      	mov	sp, r7
 800e542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e546:	4770      	bx	lr
 800e548:	20000c64 	.word	0x20000c64
 800e54c:	20000ccc 	.word	0x20000ccc

0800e550 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e550:	b580      	push	{r7, lr}
 800e552:	b084      	sub	sp, #16
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]
 800e558:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e55a:	4b29      	ldr	r3, [pc, #164]	@ (800e600 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e560:	4b28      	ldr	r3, [pc, #160]	@ (800e604 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	3304      	adds	r3, #4
 800e566:	4618      	mov	r0, r3
 800e568:	f7ff fb01 	bl	800db6e <uxListRemove>
 800e56c:	4603      	mov	r3, r0
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d10b      	bne.n	800e58a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e572:	4b24      	ldr	r3, [pc, #144]	@ (800e604 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e578:	2201      	movs	r2, #1
 800e57a:	fa02 f303 	lsl.w	r3, r2, r3
 800e57e:	43da      	mvns	r2, r3
 800e580:	4b21      	ldr	r3, [pc, #132]	@ (800e608 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	4013      	ands	r3, r2
 800e586:	4a20      	ldr	r2, [pc, #128]	@ (800e608 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e588:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e590:	d10a      	bne.n	800e5a8 <prvAddCurrentTaskToDelayedList+0x58>
 800e592:	683b      	ldr	r3, [r7, #0]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d007      	beq.n	800e5a8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e598:	4b1a      	ldr	r3, [pc, #104]	@ (800e604 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	3304      	adds	r3, #4
 800e59e:	4619      	mov	r1, r3
 800e5a0:	481a      	ldr	r0, [pc, #104]	@ (800e60c <prvAddCurrentTaskToDelayedList+0xbc>)
 800e5a2:	f7ff fa87 	bl	800dab4 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e5a6:	e026      	b.n	800e5f6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e5a8:	68fa      	ldr	r2, [r7, #12]
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	4413      	add	r3, r2
 800e5ae:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e5b0:	4b14      	ldr	r3, [pc, #80]	@ (800e604 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	68ba      	ldr	r2, [r7, #8]
 800e5b6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e5b8:	68ba      	ldr	r2, [r7, #8]
 800e5ba:	68fb      	ldr	r3, [r7, #12]
 800e5bc:	429a      	cmp	r2, r3
 800e5be:	d209      	bcs.n	800e5d4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e5c0:	4b13      	ldr	r3, [pc, #76]	@ (800e610 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e5c2:	681a      	ldr	r2, [r3, #0]
 800e5c4:	4b0f      	ldr	r3, [pc, #60]	@ (800e604 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	3304      	adds	r3, #4
 800e5ca:	4619      	mov	r1, r3
 800e5cc:	4610      	mov	r0, r2
 800e5ce:	f7ff fa95 	bl	800dafc <vListInsert>
}
 800e5d2:	e010      	b.n	800e5f6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e5d4:	4b0f      	ldr	r3, [pc, #60]	@ (800e614 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e5d6:	681a      	ldr	r2, [r3, #0]
 800e5d8:	4b0a      	ldr	r3, [pc, #40]	@ (800e604 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	3304      	adds	r3, #4
 800e5de:	4619      	mov	r1, r3
 800e5e0:	4610      	mov	r0, r2
 800e5e2:	f7ff fa8b 	bl	800dafc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e5e6:	4b0c      	ldr	r3, [pc, #48]	@ (800e618 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	68ba      	ldr	r2, [r7, #8]
 800e5ec:	429a      	cmp	r2, r3
 800e5ee:	d202      	bcs.n	800e5f6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e5f0:	4a09      	ldr	r2, [pc, #36]	@ (800e618 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e5f2:	68bb      	ldr	r3, [r7, #8]
 800e5f4:	6013      	str	r3, [r2, #0]
}
 800e5f6:	bf00      	nop
 800e5f8:	3710      	adds	r7, #16
 800e5fa:	46bd      	mov	sp, r7
 800e5fc:	bd80      	pop	{r7, pc}
 800e5fe:	bf00      	nop
 800e600:	20000cb0 	.word	0x20000cb0
 800e604:	20000bac 	.word	0x20000bac
 800e608:	20000cb4 	.word	0x20000cb4
 800e60c:	20000c98 	.word	0x20000c98
 800e610:	20000c68 	.word	0x20000c68
 800e614:	20000c64 	.word	0x20000c64
 800e618:	20000ccc 	.word	0x20000ccc

0800e61c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e61c:	b480      	push	{r7}
 800e61e:	b085      	sub	sp, #20
 800e620:	af00      	add	r7, sp, #0
 800e622:	60f8      	str	r0, [r7, #12]
 800e624:	60b9      	str	r1, [r7, #8]
 800e626:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	3b04      	subs	r3, #4
 800e62c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e62e:	68fb      	ldr	r3, [r7, #12]
 800e630:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800e634:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	3b04      	subs	r3, #4
 800e63a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e63c:	68bb      	ldr	r3, [r7, #8]
 800e63e:	f023 0201 	bic.w	r2, r3, #1
 800e642:	68fb      	ldr	r3, [r7, #12]
 800e644:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e646:	68fb      	ldr	r3, [r7, #12]
 800e648:	3b04      	subs	r3, #4
 800e64a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e64c:	4a0c      	ldr	r2, [pc, #48]	@ (800e680 <pxPortInitialiseStack+0x64>)
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e652:	68fb      	ldr	r3, [r7, #12]
 800e654:	3b14      	subs	r3, #20
 800e656:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e658:	687a      	ldr	r2, [r7, #4]
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	3b04      	subs	r3, #4
 800e662:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	f06f 0202 	mvn.w	r2, #2
 800e66a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	3b20      	subs	r3, #32
 800e670:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e672:	68fb      	ldr	r3, [r7, #12]
}
 800e674:	4618      	mov	r0, r3
 800e676:	3714      	adds	r7, #20
 800e678:	46bd      	mov	sp, r7
 800e67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e67e:	4770      	bx	lr
 800e680:	0800e685 	.word	0x0800e685

0800e684 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e684:	b480      	push	{r7}
 800e686:	b085      	sub	sp, #20
 800e688:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e68a:	2300      	movs	r3, #0
 800e68c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e68e:	4b13      	ldr	r3, [pc, #76]	@ (800e6dc <prvTaskExitError+0x58>)
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e696:	d00b      	beq.n	800e6b0 <prvTaskExitError+0x2c>
	__asm volatile
 800e698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e69c:	f383 8811 	msr	BASEPRI, r3
 800e6a0:	f3bf 8f6f 	isb	sy
 800e6a4:	f3bf 8f4f 	dsb	sy
 800e6a8:	60fb      	str	r3, [r7, #12]
}
 800e6aa:	bf00      	nop
 800e6ac:	bf00      	nop
 800e6ae:	e7fd      	b.n	800e6ac <prvTaskExitError+0x28>
	__asm volatile
 800e6b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6b4:	f383 8811 	msr	BASEPRI, r3
 800e6b8:	f3bf 8f6f 	isb	sy
 800e6bc:	f3bf 8f4f 	dsb	sy
 800e6c0:	60bb      	str	r3, [r7, #8]
}
 800e6c2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e6c4:	bf00      	nop
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	2b00      	cmp	r3, #0
 800e6ca:	d0fc      	beq.n	800e6c6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e6cc:	bf00      	nop
 800e6ce:	bf00      	nop
 800e6d0:	3714      	adds	r7, #20
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d8:	4770      	bx	lr
 800e6da:	bf00      	nop
 800e6dc:	200000e8 	.word	0x200000e8

0800e6e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e6e0:	4b07      	ldr	r3, [pc, #28]	@ (800e700 <pxCurrentTCBConst2>)
 800e6e2:	6819      	ldr	r1, [r3, #0]
 800e6e4:	6808      	ldr	r0, [r1, #0]
 800e6e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6ea:	f380 8809 	msr	PSP, r0
 800e6ee:	f3bf 8f6f 	isb	sy
 800e6f2:	f04f 0000 	mov.w	r0, #0
 800e6f6:	f380 8811 	msr	BASEPRI, r0
 800e6fa:	4770      	bx	lr
 800e6fc:	f3af 8000 	nop.w

0800e700 <pxCurrentTCBConst2>:
 800e700:	20000bac 	.word	0x20000bac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e704:	bf00      	nop
 800e706:	bf00      	nop

0800e708 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e708:	4808      	ldr	r0, [pc, #32]	@ (800e72c <prvPortStartFirstTask+0x24>)
 800e70a:	6800      	ldr	r0, [r0, #0]
 800e70c:	6800      	ldr	r0, [r0, #0]
 800e70e:	f380 8808 	msr	MSP, r0
 800e712:	f04f 0000 	mov.w	r0, #0
 800e716:	f380 8814 	msr	CONTROL, r0
 800e71a:	b662      	cpsie	i
 800e71c:	b661      	cpsie	f
 800e71e:	f3bf 8f4f 	dsb	sy
 800e722:	f3bf 8f6f 	isb	sy
 800e726:	df00      	svc	0
 800e728:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e72a:	bf00      	nop
 800e72c:	e000ed08 	.word	0xe000ed08

0800e730 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e730:	b580      	push	{r7, lr}
 800e732:	b086      	sub	sp, #24
 800e734:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e736:	4b47      	ldr	r3, [pc, #284]	@ (800e854 <xPortStartScheduler+0x124>)
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	4a47      	ldr	r2, [pc, #284]	@ (800e858 <xPortStartScheduler+0x128>)
 800e73c:	4293      	cmp	r3, r2
 800e73e:	d10b      	bne.n	800e758 <xPortStartScheduler+0x28>
	__asm volatile
 800e740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e744:	f383 8811 	msr	BASEPRI, r3
 800e748:	f3bf 8f6f 	isb	sy
 800e74c:	f3bf 8f4f 	dsb	sy
 800e750:	613b      	str	r3, [r7, #16]
}
 800e752:	bf00      	nop
 800e754:	bf00      	nop
 800e756:	e7fd      	b.n	800e754 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e758:	4b3e      	ldr	r3, [pc, #248]	@ (800e854 <xPortStartScheduler+0x124>)
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	4a3f      	ldr	r2, [pc, #252]	@ (800e85c <xPortStartScheduler+0x12c>)
 800e75e:	4293      	cmp	r3, r2
 800e760:	d10b      	bne.n	800e77a <xPortStartScheduler+0x4a>
	__asm volatile
 800e762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e766:	f383 8811 	msr	BASEPRI, r3
 800e76a:	f3bf 8f6f 	isb	sy
 800e76e:	f3bf 8f4f 	dsb	sy
 800e772:	60fb      	str	r3, [r7, #12]
}
 800e774:	bf00      	nop
 800e776:	bf00      	nop
 800e778:	e7fd      	b.n	800e776 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e77a:	4b39      	ldr	r3, [pc, #228]	@ (800e860 <xPortStartScheduler+0x130>)
 800e77c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e77e:	697b      	ldr	r3, [r7, #20]
 800e780:	781b      	ldrb	r3, [r3, #0]
 800e782:	b2db      	uxtb	r3, r3
 800e784:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e786:	697b      	ldr	r3, [r7, #20]
 800e788:	22ff      	movs	r2, #255	@ 0xff
 800e78a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e78c:	697b      	ldr	r3, [r7, #20]
 800e78e:	781b      	ldrb	r3, [r3, #0]
 800e790:	b2db      	uxtb	r3, r3
 800e792:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e794:	78fb      	ldrb	r3, [r7, #3]
 800e796:	b2db      	uxtb	r3, r3
 800e798:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e79c:	b2da      	uxtb	r2, r3
 800e79e:	4b31      	ldr	r3, [pc, #196]	@ (800e864 <xPortStartScheduler+0x134>)
 800e7a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e7a2:	4b31      	ldr	r3, [pc, #196]	@ (800e868 <xPortStartScheduler+0x138>)
 800e7a4:	2207      	movs	r2, #7
 800e7a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e7a8:	e009      	b.n	800e7be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800e7aa:	4b2f      	ldr	r3, [pc, #188]	@ (800e868 <xPortStartScheduler+0x138>)
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	3b01      	subs	r3, #1
 800e7b0:	4a2d      	ldr	r2, [pc, #180]	@ (800e868 <xPortStartScheduler+0x138>)
 800e7b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e7b4:	78fb      	ldrb	r3, [r7, #3]
 800e7b6:	b2db      	uxtb	r3, r3
 800e7b8:	005b      	lsls	r3, r3, #1
 800e7ba:	b2db      	uxtb	r3, r3
 800e7bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e7be:	78fb      	ldrb	r3, [r7, #3]
 800e7c0:	b2db      	uxtb	r3, r3
 800e7c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800e7c6:	2b80      	cmp	r3, #128	@ 0x80
 800e7c8:	d0ef      	beq.n	800e7aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e7ca:	4b27      	ldr	r3, [pc, #156]	@ (800e868 <xPortStartScheduler+0x138>)
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	f1c3 0307 	rsb	r3, r3, #7
 800e7d2:	2b04      	cmp	r3, #4
 800e7d4:	d00b      	beq.n	800e7ee <xPortStartScheduler+0xbe>
	__asm volatile
 800e7d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7da:	f383 8811 	msr	BASEPRI, r3
 800e7de:	f3bf 8f6f 	isb	sy
 800e7e2:	f3bf 8f4f 	dsb	sy
 800e7e6:	60bb      	str	r3, [r7, #8]
}
 800e7e8:	bf00      	nop
 800e7ea:	bf00      	nop
 800e7ec:	e7fd      	b.n	800e7ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e7ee:	4b1e      	ldr	r3, [pc, #120]	@ (800e868 <xPortStartScheduler+0x138>)
 800e7f0:	681b      	ldr	r3, [r3, #0]
 800e7f2:	021b      	lsls	r3, r3, #8
 800e7f4:	4a1c      	ldr	r2, [pc, #112]	@ (800e868 <xPortStartScheduler+0x138>)
 800e7f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e7f8:	4b1b      	ldr	r3, [pc, #108]	@ (800e868 <xPortStartScheduler+0x138>)
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e800:	4a19      	ldr	r2, [pc, #100]	@ (800e868 <xPortStartScheduler+0x138>)
 800e802:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	b2da      	uxtb	r2, r3
 800e808:	697b      	ldr	r3, [r7, #20]
 800e80a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e80c:	4b17      	ldr	r3, [pc, #92]	@ (800e86c <xPortStartScheduler+0x13c>)
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	4a16      	ldr	r2, [pc, #88]	@ (800e86c <xPortStartScheduler+0x13c>)
 800e812:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e816:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e818:	4b14      	ldr	r3, [pc, #80]	@ (800e86c <xPortStartScheduler+0x13c>)
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	4a13      	ldr	r2, [pc, #76]	@ (800e86c <xPortStartScheduler+0x13c>)
 800e81e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e822:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e824:	f000 f8da 	bl	800e9dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e828:	4b11      	ldr	r3, [pc, #68]	@ (800e870 <xPortStartScheduler+0x140>)
 800e82a:	2200      	movs	r2, #0
 800e82c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e82e:	f000 f8f9 	bl	800ea24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e832:	4b10      	ldr	r3, [pc, #64]	@ (800e874 <xPortStartScheduler+0x144>)
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	4a0f      	ldr	r2, [pc, #60]	@ (800e874 <xPortStartScheduler+0x144>)
 800e838:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e83c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e83e:	f7ff ff63 	bl	800e708 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e842:	f7ff fd53 	bl	800e2ec <vTaskSwitchContext>
	prvTaskExitError();
 800e846:	f7ff ff1d 	bl	800e684 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e84a:	2300      	movs	r3, #0
}
 800e84c:	4618      	mov	r0, r3
 800e84e:	3718      	adds	r7, #24
 800e850:	46bd      	mov	sp, r7
 800e852:	bd80      	pop	{r7, pc}
 800e854:	e000ed00 	.word	0xe000ed00
 800e858:	410fc271 	.word	0x410fc271
 800e85c:	410fc270 	.word	0x410fc270
 800e860:	e000e400 	.word	0xe000e400
 800e864:	20000cd8 	.word	0x20000cd8
 800e868:	20000cdc 	.word	0x20000cdc
 800e86c:	e000ed20 	.word	0xe000ed20
 800e870:	200000e8 	.word	0x200000e8
 800e874:	e000ef34 	.word	0xe000ef34

0800e878 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e878:	b480      	push	{r7}
 800e87a:	b083      	sub	sp, #12
 800e87c:	af00      	add	r7, sp, #0
	__asm volatile
 800e87e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e882:	f383 8811 	msr	BASEPRI, r3
 800e886:	f3bf 8f6f 	isb	sy
 800e88a:	f3bf 8f4f 	dsb	sy
 800e88e:	607b      	str	r3, [r7, #4]
}
 800e890:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e892:	4b10      	ldr	r3, [pc, #64]	@ (800e8d4 <vPortEnterCritical+0x5c>)
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	3301      	adds	r3, #1
 800e898:	4a0e      	ldr	r2, [pc, #56]	@ (800e8d4 <vPortEnterCritical+0x5c>)
 800e89a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e89c:	4b0d      	ldr	r3, [pc, #52]	@ (800e8d4 <vPortEnterCritical+0x5c>)
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	2b01      	cmp	r3, #1
 800e8a2:	d110      	bne.n	800e8c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e8a4:	4b0c      	ldr	r3, [pc, #48]	@ (800e8d8 <vPortEnterCritical+0x60>)
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	b2db      	uxtb	r3, r3
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d00b      	beq.n	800e8c6 <vPortEnterCritical+0x4e>
	__asm volatile
 800e8ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8b2:	f383 8811 	msr	BASEPRI, r3
 800e8b6:	f3bf 8f6f 	isb	sy
 800e8ba:	f3bf 8f4f 	dsb	sy
 800e8be:	603b      	str	r3, [r7, #0]
}
 800e8c0:	bf00      	nop
 800e8c2:	bf00      	nop
 800e8c4:	e7fd      	b.n	800e8c2 <vPortEnterCritical+0x4a>
	}
}
 800e8c6:	bf00      	nop
 800e8c8:	370c      	adds	r7, #12
 800e8ca:	46bd      	mov	sp, r7
 800e8cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d0:	4770      	bx	lr
 800e8d2:	bf00      	nop
 800e8d4:	200000e8 	.word	0x200000e8
 800e8d8:	e000ed04 	.word	0xe000ed04

0800e8dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e8dc:	b480      	push	{r7}
 800e8de:	b083      	sub	sp, #12
 800e8e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e8e2:	4b12      	ldr	r3, [pc, #72]	@ (800e92c <vPortExitCritical+0x50>)
 800e8e4:	681b      	ldr	r3, [r3, #0]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d10b      	bne.n	800e902 <vPortExitCritical+0x26>
	__asm volatile
 800e8ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8ee:	f383 8811 	msr	BASEPRI, r3
 800e8f2:	f3bf 8f6f 	isb	sy
 800e8f6:	f3bf 8f4f 	dsb	sy
 800e8fa:	607b      	str	r3, [r7, #4]
}
 800e8fc:	bf00      	nop
 800e8fe:	bf00      	nop
 800e900:	e7fd      	b.n	800e8fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e902:	4b0a      	ldr	r3, [pc, #40]	@ (800e92c <vPortExitCritical+0x50>)
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	3b01      	subs	r3, #1
 800e908:	4a08      	ldr	r2, [pc, #32]	@ (800e92c <vPortExitCritical+0x50>)
 800e90a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e90c:	4b07      	ldr	r3, [pc, #28]	@ (800e92c <vPortExitCritical+0x50>)
 800e90e:	681b      	ldr	r3, [r3, #0]
 800e910:	2b00      	cmp	r3, #0
 800e912:	d105      	bne.n	800e920 <vPortExitCritical+0x44>
 800e914:	2300      	movs	r3, #0
 800e916:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e918:	683b      	ldr	r3, [r7, #0]
 800e91a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e91e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e920:	bf00      	nop
 800e922:	370c      	adds	r7, #12
 800e924:	46bd      	mov	sp, r7
 800e926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92a:	4770      	bx	lr
 800e92c:	200000e8 	.word	0x200000e8

0800e930 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e930:	f3ef 8009 	mrs	r0, PSP
 800e934:	f3bf 8f6f 	isb	sy
 800e938:	4b15      	ldr	r3, [pc, #84]	@ (800e990 <pxCurrentTCBConst>)
 800e93a:	681a      	ldr	r2, [r3, #0]
 800e93c:	f01e 0f10 	tst.w	lr, #16
 800e940:	bf08      	it	eq
 800e942:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e946:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e94a:	6010      	str	r0, [r2, #0]
 800e94c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e950:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e954:	f380 8811 	msr	BASEPRI, r0
 800e958:	f3bf 8f4f 	dsb	sy
 800e95c:	f3bf 8f6f 	isb	sy
 800e960:	f7ff fcc4 	bl	800e2ec <vTaskSwitchContext>
 800e964:	f04f 0000 	mov.w	r0, #0
 800e968:	f380 8811 	msr	BASEPRI, r0
 800e96c:	bc09      	pop	{r0, r3}
 800e96e:	6819      	ldr	r1, [r3, #0]
 800e970:	6808      	ldr	r0, [r1, #0]
 800e972:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e976:	f01e 0f10 	tst.w	lr, #16
 800e97a:	bf08      	it	eq
 800e97c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e980:	f380 8809 	msr	PSP, r0
 800e984:	f3bf 8f6f 	isb	sy
 800e988:	4770      	bx	lr
 800e98a:	bf00      	nop
 800e98c:	f3af 8000 	nop.w

0800e990 <pxCurrentTCBConst>:
 800e990:	20000bac 	.word	0x20000bac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e994:	bf00      	nop
 800e996:	bf00      	nop

0800e998 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e998:	b580      	push	{r7, lr}
 800e99a:	b082      	sub	sp, #8
 800e99c:	af00      	add	r7, sp, #0
	__asm volatile
 800e99e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9a2:	f383 8811 	msr	BASEPRI, r3
 800e9a6:	f3bf 8f6f 	isb	sy
 800e9aa:	f3bf 8f4f 	dsb	sy
 800e9ae:	607b      	str	r3, [r7, #4]
}
 800e9b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e9b2:	f7ff fbe1 	bl	800e178 <xTaskIncrementTick>
 800e9b6:	4603      	mov	r3, r0
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d003      	beq.n	800e9c4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e9bc:	4b06      	ldr	r3, [pc, #24]	@ (800e9d8 <SysTick_Handler+0x40>)
 800e9be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e9c2:	601a      	str	r2, [r3, #0]
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e9c8:	683b      	ldr	r3, [r7, #0]
 800e9ca:	f383 8811 	msr	BASEPRI, r3
}
 800e9ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e9d0:	bf00      	nop
 800e9d2:	3708      	adds	r7, #8
 800e9d4:	46bd      	mov	sp, r7
 800e9d6:	bd80      	pop	{r7, pc}
 800e9d8:	e000ed04 	.word	0xe000ed04

0800e9dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e9dc:	b480      	push	{r7}
 800e9de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e9e0:	4b0b      	ldr	r3, [pc, #44]	@ (800ea10 <vPortSetupTimerInterrupt+0x34>)
 800e9e2:	2200      	movs	r2, #0
 800e9e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e9e6:	4b0b      	ldr	r3, [pc, #44]	@ (800ea14 <vPortSetupTimerInterrupt+0x38>)
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e9ec:	4b0a      	ldr	r3, [pc, #40]	@ (800ea18 <vPortSetupTimerInterrupt+0x3c>)
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	4a0a      	ldr	r2, [pc, #40]	@ (800ea1c <vPortSetupTimerInterrupt+0x40>)
 800e9f2:	fba2 2303 	umull	r2, r3, r2, r3
 800e9f6:	099b      	lsrs	r3, r3, #6
 800e9f8:	4a09      	ldr	r2, [pc, #36]	@ (800ea20 <vPortSetupTimerInterrupt+0x44>)
 800e9fa:	3b01      	subs	r3, #1
 800e9fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e9fe:	4b04      	ldr	r3, [pc, #16]	@ (800ea10 <vPortSetupTimerInterrupt+0x34>)
 800ea00:	2207      	movs	r2, #7
 800ea02:	601a      	str	r2, [r3, #0]
}
 800ea04:	bf00      	nop
 800ea06:	46bd      	mov	sp, r7
 800ea08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0c:	4770      	bx	lr
 800ea0e:	bf00      	nop
 800ea10:	e000e010 	.word	0xe000e010
 800ea14:	e000e018 	.word	0xe000e018
 800ea18:	20000050 	.word	0x20000050
 800ea1c:	10624dd3 	.word	0x10624dd3
 800ea20:	e000e014 	.word	0xe000e014

0800ea24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ea24:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ea34 <vPortEnableVFP+0x10>
 800ea28:	6801      	ldr	r1, [r0, #0]
 800ea2a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800ea2e:	6001      	str	r1, [r0, #0]
 800ea30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ea32:	bf00      	nop
 800ea34:	e000ed88 	.word	0xe000ed88

0800ea38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ea38:	b580      	push	{r7, lr}
 800ea3a:	b08a      	sub	sp, #40	@ 0x28
 800ea3c:	af00      	add	r7, sp, #0
 800ea3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ea40:	2300      	movs	r3, #0
 800ea42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ea44:	f7ff faec 	bl	800e020 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ea48:	4b5c      	ldr	r3, [pc, #368]	@ (800ebbc <pvPortMalloc+0x184>)
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d101      	bne.n	800ea54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ea50:	f000 f924 	bl	800ec9c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ea54:	4b5a      	ldr	r3, [pc, #360]	@ (800ebc0 <pvPortMalloc+0x188>)
 800ea56:	681a      	ldr	r2, [r3, #0]
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	4013      	ands	r3, r2
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	f040 8095 	bne.w	800eb8c <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d01e      	beq.n	800eaa6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800ea68:	2208      	movs	r2, #8
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	4413      	add	r3, r2
 800ea6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	f003 0307 	and.w	r3, r3, #7
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d015      	beq.n	800eaa6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	f023 0307 	bic.w	r3, r3, #7
 800ea80:	3308      	adds	r3, #8
 800ea82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	f003 0307 	and.w	r3, r3, #7
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d00b      	beq.n	800eaa6 <pvPortMalloc+0x6e>
	__asm volatile
 800ea8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea92:	f383 8811 	msr	BASEPRI, r3
 800ea96:	f3bf 8f6f 	isb	sy
 800ea9a:	f3bf 8f4f 	dsb	sy
 800ea9e:	617b      	str	r3, [r7, #20]
}
 800eaa0:	bf00      	nop
 800eaa2:	bf00      	nop
 800eaa4:	e7fd      	b.n	800eaa2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d06f      	beq.n	800eb8c <pvPortMalloc+0x154>
 800eaac:	4b45      	ldr	r3, [pc, #276]	@ (800ebc4 <pvPortMalloc+0x18c>)
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	687a      	ldr	r2, [r7, #4]
 800eab2:	429a      	cmp	r2, r3
 800eab4:	d86a      	bhi.n	800eb8c <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800eab6:	4b44      	ldr	r3, [pc, #272]	@ (800ebc8 <pvPortMalloc+0x190>)
 800eab8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800eaba:	4b43      	ldr	r3, [pc, #268]	@ (800ebc8 <pvPortMalloc+0x190>)
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800eac0:	e004      	b.n	800eacc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800eac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eac4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800eac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eac8:	681b      	ldr	r3, [r3, #0]
 800eaca:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800eacc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eace:	685b      	ldr	r3, [r3, #4]
 800ead0:	687a      	ldr	r2, [r7, #4]
 800ead2:	429a      	cmp	r2, r3
 800ead4:	d903      	bls.n	800eade <pvPortMalloc+0xa6>
 800ead6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	2b00      	cmp	r3, #0
 800eadc:	d1f1      	bne.n	800eac2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800eade:	4b37      	ldr	r3, [pc, #220]	@ (800ebbc <pvPortMalloc+0x184>)
 800eae0:	681b      	ldr	r3, [r3, #0]
 800eae2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eae4:	429a      	cmp	r2, r3
 800eae6:	d051      	beq.n	800eb8c <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800eae8:	6a3b      	ldr	r3, [r7, #32]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	2208      	movs	r2, #8
 800eaee:	4413      	add	r3, r2
 800eaf0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800eaf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eaf4:	681a      	ldr	r2, [r3, #0]
 800eaf6:	6a3b      	ldr	r3, [r7, #32]
 800eaf8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800eafa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eafc:	685a      	ldr	r2, [r3, #4]
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	1ad2      	subs	r2, r2, r3
 800eb02:	2308      	movs	r3, #8
 800eb04:	005b      	lsls	r3, r3, #1
 800eb06:	429a      	cmp	r2, r3
 800eb08:	d920      	bls.n	800eb4c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800eb0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	4413      	add	r3, r2
 800eb10:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800eb12:	69bb      	ldr	r3, [r7, #24]
 800eb14:	f003 0307 	and.w	r3, r3, #7
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d00b      	beq.n	800eb34 <pvPortMalloc+0xfc>
	__asm volatile
 800eb1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb20:	f383 8811 	msr	BASEPRI, r3
 800eb24:	f3bf 8f6f 	isb	sy
 800eb28:	f3bf 8f4f 	dsb	sy
 800eb2c:	613b      	str	r3, [r7, #16]
}
 800eb2e:	bf00      	nop
 800eb30:	bf00      	nop
 800eb32:	e7fd      	b.n	800eb30 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800eb34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb36:	685a      	ldr	r2, [r3, #4]
 800eb38:	687b      	ldr	r3, [r7, #4]
 800eb3a:	1ad2      	subs	r2, r2, r3
 800eb3c:	69bb      	ldr	r3, [r7, #24]
 800eb3e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800eb40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb42:	687a      	ldr	r2, [r7, #4]
 800eb44:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800eb46:	69b8      	ldr	r0, [r7, #24]
 800eb48:	f000 f90a 	bl	800ed60 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800eb4c:	4b1d      	ldr	r3, [pc, #116]	@ (800ebc4 <pvPortMalloc+0x18c>)
 800eb4e:	681a      	ldr	r2, [r3, #0]
 800eb50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb52:	685b      	ldr	r3, [r3, #4]
 800eb54:	1ad3      	subs	r3, r2, r3
 800eb56:	4a1b      	ldr	r2, [pc, #108]	@ (800ebc4 <pvPortMalloc+0x18c>)
 800eb58:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800eb5a:	4b1a      	ldr	r3, [pc, #104]	@ (800ebc4 <pvPortMalloc+0x18c>)
 800eb5c:	681a      	ldr	r2, [r3, #0]
 800eb5e:	4b1b      	ldr	r3, [pc, #108]	@ (800ebcc <pvPortMalloc+0x194>)
 800eb60:	681b      	ldr	r3, [r3, #0]
 800eb62:	429a      	cmp	r2, r3
 800eb64:	d203      	bcs.n	800eb6e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800eb66:	4b17      	ldr	r3, [pc, #92]	@ (800ebc4 <pvPortMalloc+0x18c>)
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	4a18      	ldr	r2, [pc, #96]	@ (800ebcc <pvPortMalloc+0x194>)
 800eb6c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800eb6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb70:	685a      	ldr	r2, [r3, #4]
 800eb72:	4b13      	ldr	r3, [pc, #76]	@ (800ebc0 <pvPortMalloc+0x188>)
 800eb74:	681b      	ldr	r3, [r3, #0]
 800eb76:	431a      	orrs	r2, r3
 800eb78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb7a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800eb7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eb7e:	2200      	movs	r2, #0
 800eb80:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800eb82:	4b13      	ldr	r3, [pc, #76]	@ (800ebd0 <pvPortMalloc+0x198>)
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	3301      	adds	r3, #1
 800eb88:	4a11      	ldr	r2, [pc, #68]	@ (800ebd0 <pvPortMalloc+0x198>)
 800eb8a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800eb8c:	f7ff fa56 	bl	800e03c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800eb90:	69fb      	ldr	r3, [r7, #28]
 800eb92:	f003 0307 	and.w	r3, r3, #7
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d00b      	beq.n	800ebb2 <pvPortMalloc+0x17a>
	__asm volatile
 800eb9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb9e:	f383 8811 	msr	BASEPRI, r3
 800eba2:	f3bf 8f6f 	isb	sy
 800eba6:	f3bf 8f4f 	dsb	sy
 800ebaa:	60fb      	str	r3, [r7, #12]
}
 800ebac:	bf00      	nop
 800ebae:	bf00      	nop
 800ebb0:	e7fd      	b.n	800ebae <pvPortMalloc+0x176>
	return pvReturn;
 800ebb2:	69fb      	ldr	r3, [r7, #28]
}
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	3728      	adds	r7, #40	@ 0x28
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	bd80      	pop	{r7, pc}
 800ebbc:	200048e8 	.word	0x200048e8
 800ebc0:	200048fc 	.word	0x200048fc
 800ebc4:	200048ec 	.word	0x200048ec
 800ebc8:	200048e0 	.word	0x200048e0
 800ebcc:	200048f0 	.word	0x200048f0
 800ebd0:	200048f4 	.word	0x200048f4

0800ebd4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ebd4:	b580      	push	{r7, lr}
 800ebd6:	b086      	sub	sp, #24
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d04f      	beq.n	800ec86 <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ebe6:	2308      	movs	r3, #8
 800ebe8:	425b      	negs	r3, r3
 800ebea:	697a      	ldr	r2, [r7, #20]
 800ebec:	4413      	add	r3, r2
 800ebee:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ebf0:	697b      	ldr	r3, [r7, #20]
 800ebf2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ebf4:	693b      	ldr	r3, [r7, #16]
 800ebf6:	685a      	ldr	r2, [r3, #4]
 800ebf8:	4b25      	ldr	r3, [pc, #148]	@ (800ec90 <vPortFree+0xbc>)
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	4013      	ands	r3, r2
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	d10b      	bne.n	800ec1a <vPortFree+0x46>
	__asm volatile
 800ec02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec06:	f383 8811 	msr	BASEPRI, r3
 800ec0a:	f3bf 8f6f 	isb	sy
 800ec0e:	f3bf 8f4f 	dsb	sy
 800ec12:	60fb      	str	r3, [r7, #12]
}
 800ec14:	bf00      	nop
 800ec16:	bf00      	nop
 800ec18:	e7fd      	b.n	800ec16 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ec1a:	693b      	ldr	r3, [r7, #16]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	2b00      	cmp	r3, #0
 800ec20:	d00b      	beq.n	800ec3a <vPortFree+0x66>
	__asm volatile
 800ec22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ec26:	f383 8811 	msr	BASEPRI, r3
 800ec2a:	f3bf 8f6f 	isb	sy
 800ec2e:	f3bf 8f4f 	dsb	sy
 800ec32:	60bb      	str	r3, [r7, #8]
}
 800ec34:	bf00      	nop
 800ec36:	bf00      	nop
 800ec38:	e7fd      	b.n	800ec36 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ec3a:	693b      	ldr	r3, [r7, #16]
 800ec3c:	685a      	ldr	r2, [r3, #4]
 800ec3e:	4b14      	ldr	r3, [pc, #80]	@ (800ec90 <vPortFree+0xbc>)
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	4013      	ands	r3, r2
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d01e      	beq.n	800ec86 <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ec48:	693b      	ldr	r3, [r7, #16]
 800ec4a:	681b      	ldr	r3, [r3, #0]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d11a      	bne.n	800ec86 <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ec50:	693b      	ldr	r3, [r7, #16]
 800ec52:	685a      	ldr	r2, [r3, #4]
 800ec54:	4b0e      	ldr	r3, [pc, #56]	@ (800ec90 <vPortFree+0xbc>)
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	43db      	mvns	r3, r3
 800ec5a:	401a      	ands	r2, r3
 800ec5c:	693b      	ldr	r3, [r7, #16]
 800ec5e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ec60:	f7ff f9de 	bl	800e020 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ec64:	693b      	ldr	r3, [r7, #16]
 800ec66:	685a      	ldr	r2, [r3, #4]
 800ec68:	4b0a      	ldr	r3, [pc, #40]	@ (800ec94 <vPortFree+0xc0>)
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	4413      	add	r3, r2
 800ec6e:	4a09      	ldr	r2, [pc, #36]	@ (800ec94 <vPortFree+0xc0>)
 800ec70:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ec72:	6938      	ldr	r0, [r7, #16]
 800ec74:	f000 f874 	bl	800ed60 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ec78:	4b07      	ldr	r3, [pc, #28]	@ (800ec98 <vPortFree+0xc4>)
 800ec7a:	681b      	ldr	r3, [r3, #0]
 800ec7c:	3301      	adds	r3, #1
 800ec7e:	4a06      	ldr	r2, [pc, #24]	@ (800ec98 <vPortFree+0xc4>)
 800ec80:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ec82:	f7ff f9db 	bl	800e03c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ec86:	bf00      	nop
 800ec88:	3718      	adds	r7, #24
 800ec8a:	46bd      	mov	sp, r7
 800ec8c:	bd80      	pop	{r7, pc}
 800ec8e:	bf00      	nop
 800ec90:	200048fc 	.word	0x200048fc
 800ec94:	200048ec 	.word	0x200048ec
 800ec98:	200048f8 	.word	0x200048f8

0800ec9c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ec9c:	b480      	push	{r7}
 800ec9e:	b085      	sub	sp, #20
 800eca0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800eca2:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800eca6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800eca8:	4b27      	ldr	r3, [pc, #156]	@ (800ed48 <prvHeapInit+0xac>)
 800ecaa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	f003 0307 	and.w	r3, r3, #7
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d00c      	beq.n	800ecd0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ecb6:	68fb      	ldr	r3, [r7, #12]
 800ecb8:	3307      	adds	r3, #7
 800ecba:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	f023 0307 	bic.w	r3, r3, #7
 800ecc2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ecc4:	68ba      	ldr	r2, [r7, #8]
 800ecc6:	68fb      	ldr	r3, [r7, #12]
 800ecc8:	1ad3      	subs	r3, r2, r3
 800ecca:	4a1f      	ldr	r2, [pc, #124]	@ (800ed48 <prvHeapInit+0xac>)
 800eccc:	4413      	add	r3, r2
 800ecce:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ecd4:	4a1d      	ldr	r2, [pc, #116]	@ (800ed4c <prvHeapInit+0xb0>)
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ecda:	4b1c      	ldr	r3, [pc, #112]	@ (800ed4c <prvHeapInit+0xb0>)
 800ecdc:	2200      	movs	r2, #0
 800ecde:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	68ba      	ldr	r2, [r7, #8]
 800ece4:	4413      	add	r3, r2
 800ece6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ece8:	2208      	movs	r2, #8
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	1a9b      	subs	r3, r3, r2
 800ecee:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ecf0:	68fb      	ldr	r3, [r7, #12]
 800ecf2:	f023 0307 	bic.w	r3, r3, #7
 800ecf6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ecf8:	68fb      	ldr	r3, [r7, #12]
 800ecfa:	4a15      	ldr	r2, [pc, #84]	@ (800ed50 <prvHeapInit+0xb4>)
 800ecfc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ecfe:	4b14      	ldr	r3, [pc, #80]	@ (800ed50 <prvHeapInit+0xb4>)
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	2200      	movs	r2, #0
 800ed04:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ed06:	4b12      	ldr	r3, [pc, #72]	@ (800ed50 <prvHeapInit+0xb4>)
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ed12:	683b      	ldr	r3, [r7, #0]
 800ed14:	68fa      	ldr	r2, [r7, #12]
 800ed16:	1ad2      	subs	r2, r2, r3
 800ed18:	683b      	ldr	r3, [r7, #0]
 800ed1a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ed1c:	4b0c      	ldr	r3, [pc, #48]	@ (800ed50 <prvHeapInit+0xb4>)
 800ed1e:	681a      	ldr	r2, [r3, #0]
 800ed20:	683b      	ldr	r3, [r7, #0]
 800ed22:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ed24:	683b      	ldr	r3, [r7, #0]
 800ed26:	685b      	ldr	r3, [r3, #4]
 800ed28:	4a0a      	ldr	r2, [pc, #40]	@ (800ed54 <prvHeapInit+0xb8>)
 800ed2a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ed2c:	683b      	ldr	r3, [r7, #0]
 800ed2e:	685b      	ldr	r3, [r3, #4]
 800ed30:	4a09      	ldr	r2, [pc, #36]	@ (800ed58 <prvHeapInit+0xbc>)
 800ed32:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ed34:	4b09      	ldr	r3, [pc, #36]	@ (800ed5c <prvHeapInit+0xc0>)
 800ed36:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800ed3a:	601a      	str	r2, [r3, #0]
}
 800ed3c:	bf00      	nop
 800ed3e:	3714      	adds	r7, #20
 800ed40:	46bd      	mov	sp, r7
 800ed42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed46:	4770      	bx	lr
 800ed48:	20000ce0 	.word	0x20000ce0
 800ed4c:	200048e0 	.word	0x200048e0
 800ed50:	200048e8 	.word	0x200048e8
 800ed54:	200048f0 	.word	0x200048f0
 800ed58:	200048ec 	.word	0x200048ec
 800ed5c:	200048fc 	.word	0x200048fc

0800ed60 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ed60:	b480      	push	{r7}
 800ed62:	b085      	sub	sp, #20
 800ed64:	af00      	add	r7, sp, #0
 800ed66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ed68:	4b28      	ldr	r3, [pc, #160]	@ (800ee0c <prvInsertBlockIntoFreeList+0xac>)
 800ed6a:	60fb      	str	r3, [r7, #12]
 800ed6c:	e002      	b.n	800ed74 <prvInsertBlockIntoFreeList+0x14>
 800ed6e:	68fb      	ldr	r3, [r7, #12]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	60fb      	str	r3, [r7, #12]
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	681b      	ldr	r3, [r3, #0]
 800ed78:	687a      	ldr	r2, [r7, #4]
 800ed7a:	429a      	cmp	r2, r3
 800ed7c:	d8f7      	bhi.n	800ed6e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	685b      	ldr	r3, [r3, #4]
 800ed86:	68ba      	ldr	r2, [r7, #8]
 800ed88:	4413      	add	r3, r2
 800ed8a:	687a      	ldr	r2, [r7, #4]
 800ed8c:	429a      	cmp	r2, r3
 800ed8e:	d108      	bne.n	800eda2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	685a      	ldr	r2, [r3, #4]
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	685b      	ldr	r3, [r3, #4]
 800ed98:	441a      	add	r2, r3
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	685b      	ldr	r3, [r3, #4]
 800edaa:	68ba      	ldr	r2, [r7, #8]
 800edac:	441a      	add	r2, r3
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	429a      	cmp	r2, r3
 800edb4:	d118      	bne.n	800ede8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800edb6:	68fb      	ldr	r3, [r7, #12]
 800edb8:	681a      	ldr	r2, [r3, #0]
 800edba:	4b15      	ldr	r3, [pc, #84]	@ (800ee10 <prvInsertBlockIntoFreeList+0xb0>)
 800edbc:	681b      	ldr	r3, [r3, #0]
 800edbe:	429a      	cmp	r2, r3
 800edc0:	d00d      	beq.n	800edde <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	685a      	ldr	r2, [r3, #4]
 800edc6:	68fb      	ldr	r3, [r7, #12]
 800edc8:	681b      	ldr	r3, [r3, #0]
 800edca:	685b      	ldr	r3, [r3, #4]
 800edcc:	441a      	add	r2, r3
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	681a      	ldr	r2, [r3, #0]
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	601a      	str	r2, [r3, #0]
 800eddc:	e008      	b.n	800edf0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800edde:	4b0c      	ldr	r3, [pc, #48]	@ (800ee10 <prvInsertBlockIntoFreeList+0xb0>)
 800ede0:	681a      	ldr	r2, [r3, #0]
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	601a      	str	r2, [r3, #0]
 800ede6:	e003      	b.n	800edf0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	681a      	ldr	r2, [r3, #0]
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800edf0:	68fa      	ldr	r2, [r7, #12]
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	429a      	cmp	r2, r3
 800edf6:	d002      	beq.n	800edfe <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800edf8:	68fb      	ldr	r3, [r7, #12]
 800edfa:	687a      	ldr	r2, [r7, #4]
 800edfc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800edfe:	bf00      	nop
 800ee00:	3714      	adds	r7, #20
 800ee02:	46bd      	mov	sp, r7
 800ee04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee08:	4770      	bx	lr
 800ee0a:	bf00      	nop
 800ee0c:	200048e0 	.word	0x200048e0
 800ee10:	200048e8 	.word	0x200048e8

0800ee14 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ee14:	b580      	push	{r7, lr}
 800ee16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ee18:	2200      	movs	r2, #0
 800ee1a:	4912      	ldr	r1, [pc, #72]	@ (800ee64 <MX_USB_DEVICE_Init+0x50>)
 800ee1c:	4812      	ldr	r0, [pc, #72]	@ (800ee68 <MX_USB_DEVICE_Init+0x54>)
 800ee1e:	f7fd faa7 	bl	800c370 <USBD_Init>
 800ee22:	4603      	mov	r3, r0
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d001      	beq.n	800ee2c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ee28:	f7f4 f8d2 	bl	8002fd0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ee2c:	490f      	ldr	r1, [pc, #60]	@ (800ee6c <MX_USB_DEVICE_Init+0x58>)
 800ee2e:	480e      	ldr	r0, [pc, #56]	@ (800ee68 <MX_USB_DEVICE_Init+0x54>)
 800ee30:	f7fd face 	bl	800c3d0 <USBD_RegisterClass>
 800ee34:	4603      	mov	r3, r0
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d001      	beq.n	800ee3e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ee3a:	f7f4 f8c9 	bl	8002fd0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ee3e:	490c      	ldr	r1, [pc, #48]	@ (800ee70 <MX_USB_DEVICE_Init+0x5c>)
 800ee40:	4809      	ldr	r0, [pc, #36]	@ (800ee68 <MX_USB_DEVICE_Init+0x54>)
 800ee42:	f7fd f9c5 	bl	800c1d0 <USBD_CDC_RegisterInterface>
 800ee46:	4603      	mov	r3, r0
 800ee48:	2b00      	cmp	r3, #0
 800ee4a:	d001      	beq.n	800ee50 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ee4c:	f7f4 f8c0 	bl	8002fd0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ee50:	4805      	ldr	r0, [pc, #20]	@ (800ee68 <MX_USB_DEVICE_Init+0x54>)
 800ee52:	f7fd faf3 	bl	800c43c <USBD_Start>
 800ee56:	4603      	mov	r3, r0
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d001      	beq.n	800ee60 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ee5c:	f7f4 f8b8 	bl	8002fd0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ee60:	bf00      	nop
 800ee62:	bd80      	pop	{r7, pc}
 800ee64:	20000100 	.word	0x20000100
 800ee68:	20004900 	.word	0x20004900
 800ee6c:	20000068 	.word	0x20000068
 800ee70:	200000ec 	.word	0x200000ec

0800ee74 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ee74:	b580      	push	{r7, lr}
 800ee76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ee78:	2200      	movs	r2, #0
 800ee7a:	4905      	ldr	r1, [pc, #20]	@ (800ee90 <CDC_Init_FS+0x1c>)
 800ee7c:	4805      	ldr	r0, [pc, #20]	@ (800ee94 <CDC_Init_FS+0x20>)
 800ee7e:	f7fd f9c1 	bl	800c204 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ee82:	4905      	ldr	r1, [pc, #20]	@ (800ee98 <CDC_Init_FS+0x24>)
 800ee84:	4803      	ldr	r0, [pc, #12]	@ (800ee94 <CDC_Init_FS+0x20>)
 800ee86:	f7fd f9df 	bl	800c248 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ee8a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ee8c:	4618      	mov	r0, r3
 800ee8e:	bd80      	pop	{r7, pc}
 800ee90:	200053dc 	.word	0x200053dc
 800ee94:	20004900 	.word	0x20004900
 800ee98:	20004bdc 	.word	0x20004bdc

0800ee9c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ee9c:	b480      	push	{r7}
 800ee9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800eea0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800eea2:	4618      	mov	r0, r3
 800eea4:	46bd      	mov	sp, r7
 800eea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeaa:	4770      	bx	lr

0800eeac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800eeac:	b480      	push	{r7}
 800eeae:	b083      	sub	sp, #12
 800eeb0:	af00      	add	r7, sp, #0
 800eeb2:	4603      	mov	r3, r0
 800eeb4:	6039      	str	r1, [r7, #0]
 800eeb6:	71fb      	strb	r3, [r7, #7]
 800eeb8:	4613      	mov	r3, r2
 800eeba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800eebc:	79fb      	ldrb	r3, [r7, #7]
 800eebe:	2b23      	cmp	r3, #35	@ 0x23
 800eec0:	d84a      	bhi.n	800ef58 <CDC_Control_FS+0xac>
 800eec2:	a201      	add	r2, pc, #4	@ (adr r2, 800eec8 <CDC_Control_FS+0x1c>)
 800eec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eec8:	0800ef59 	.word	0x0800ef59
 800eecc:	0800ef59 	.word	0x0800ef59
 800eed0:	0800ef59 	.word	0x0800ef59
 800eed4:	0800ef59 	.word	0x0800ef59
 800eed8:	0800ef59 	.word	0x0800ef59
 800eedc:	0800ef59 	.word	0x0800ef59
 800eee0:	0800ef59 	.word	0x0800ef59
 800eee4:	0800ef59 	.word	0x0800ef59
 800eee8:	0800ef59 	.word	0x0800ef59
 800eeec:	0800ef59 	.word	0x0800ef59
 800eef0:	0800ef59 	.word	0x0800ef59
 800eef4:	0800ef59 	.word	0x0800ef59
 800eef8:	0800ef59 	.word	0x0800ef59
 800eefc:	0800ef59 	.word	0x0800ef59
 800ef00:	0800ef59 	.word	0x0800ef59
 800ef04:	0800ef59 	.word	0x0800ef59
 800ef08:	0800ef59 	.word	0x0800ef59
 800ef0c:	0800ef59 	.word	0x0800ef59
 800ef10:	0800ef59 	.word	0x0800ef59
 800ef14:	0800ef59 	.word	0x0800ef59
 800ef18:	0800ef59 	.word	0x0800ef59
 800ef1c:	0800ef59 	.word	0x0800ef59
 800ef20:	0800ef59 	.word	0x0800ef59
 800ef24:	0800ef59 	.word	0x0800ef59
 800ef28:	0800ef59 	.word	0x0800ef59
 800ef2c:	0800ef59 	.word	0x0800ef59
 800ef30:	0800ef59 	.word	0x0800ef59
 800ef34:	0800ef59 	.word	0x0800ef59
 800ef38:	0800ef59 	.word	0x0800ef59
 800ef3c:	0800ef59 	.word	0x0800ef59
 800ef40:	0800ef59 	.word	0x0800ef59
 800ef44:	0800ef59 	.word	0x0800ef59
 800ef48:	0800ef59 	.word	0x0800ef59
 800ef4c:	0800ef59 	.word	0x0800ef59
 800ef50:	0800ef59 	.word	0x0800ef59
 800ef54:	0800ef59 	.word	0x0800ef59
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ef58:	bf00      	nop
  }

  return (USBD_OK);
 800ef5a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	370c      	adds	r7, #12
 800ef60:	46bd      	mov	sp, r7
 800ef62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef66:	4770      	bx	lr

0800ef68 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	b084      	sub	sp, #16
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	6078      	str	r0, [r7, #4]
 800ef70:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ef72:	6879      	ldr	r1, [r7, #4]
 800ef74:	480e      	ldr	r0, [pc, #56]	@ (800efb0 <CDC_Receive_FS+0x48>)
 800ef76:	f7fd f967 	bl	800c248 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ef7a:	480d      	ldr	r0, [pc, #52]	@ (800efb0 <CDC_Receive_FS+0x48>)
 800ef7c:	f7fd f9c2 	bl	800c304 <USBD_CDC_ReceivePacket>

	lastReceiveTime = HAL_GetTick(); //failsafe
 800ef80:	f7f4 fe24 	bl	8003bcc <HAL_GetTick>
 800ef84:	4603      	mov	r3, r0
 800ef86:	4a0b      	ldr	r2, [pc, #44]	@ (800efb4 <CDC_Receive_FS+0x4c>)
 800ef88:	6013      	str	r3, [r2, #0]

	uint8_t len = (uint8_t) *Len;
 800ef8a:	683b      	ldr	r3, [r7, #0]
 800ef8c:	681b      	ldr	r3, [r3, #0]
 800ef8e:	73fb      	strb	r3, [r7, #15]
	memset(serialBuffer, '\0', 16);
 800ef90:	2210      	movs	r2, #16
 800ef92:	2100      	movs	r1, #0
 800ef94:	4808      	ldr	r0, [pc, #32]	@ (800efb8 <CDC_Receive_FS+0x50>)
 800ef96:	f000 fc6d 	bl	800f874 <memset>
	memcpy(serialBuffer, Buf, len);
 800ef9a:	7bfb      	ldrb	r3, [r7, #15]
 800ef9c:	461a      	mov	r2, r3
 800ef9e:	6879      	ldr	r1, [r7, #4]
 800efa0:	4805      	ldr	r0, [pc, #20]	@ (800efb8 <CDC_Receive_FS+0x50>)
 800efa2:	f000 fc93 	bl	800f8cc <memcpy>
  return (USBD_OK);
 800efa6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800efa8:	4618      	mov	r0, r3
 800efaa:	3710      	adds	r7, #16
 800efac:	46bd      	mov	sp, r7
 800efae:	bd80      	pop	{r7, pc}
 800efb0:	20004900 	.word	0x20004900
 800efb4:	20000a0c 	.word	0x20000a0c
 800efb8:	20000938 	.word	0x20000938

0800efbc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800efbc:	b580      	push	{r7, lr}
 800efbe:	b084      	sub	sp, #16
 800efc0:	af00      	add	r7, sp, #0
 800efc2:	6078      	str	r0, [r7, #4]
 800efc4:	460b      	mov	r3, r1
 800efc6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800efc8:	2300      	movs	r3, #0
 800efca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800efcc:	4b0d      	ldr	r3, [pc, #52]	@ (800f004 <CDC_Transmit_FS+0x48>)
 800efce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800efd2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800efd4:	68bb      	ldr	r3, [r7, #8]
 800efd6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d001      	beq.n	800efe2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800efde:	2301      	movs	r3, #1
 800efe0:	e00b      	b.n	800effa <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800efe2:	887b      	ldrh	r3, [r7, #2]
 800efe4:	461a      	mov	r2, r3
 800efe6:	6879      	ldr	r1, [r7, #4]
 800efe8:	4806      	ldr	r0, [pc, #24]	@ (800f004 <CDC_Transmit_FS+0x48>)
 800efea:	f7fd f90b 	bl	800c204 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800efee:	4805      	ldr	r0, [pc, #20]	@ (800f004 <CDC_Transmit_FS+0x48>)
 800eff0:	f7fd f948 	bl	800c284 <USBD_CDC_TransmitPacket>
 800eff4:	4603      	mov	r3, r0
 800eff6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800eff8:	7bfb      	ldrb	r3, [r7, #15]
}
 800effa:	4618      	mov	r0, r3
 800effc:	3710      	adds	r7, #16
 800effe:	46bd      	mov	sp, r7
 800f000:	bd80      	pop	{r7, pc}
 800f002:	bf00      	nop
 800f004:	20004900 	.word	0x20004900

0800f008 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f008:	b480      	push	{r7}
 800f00a:	b087      	sub	sp, #28
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	60f8      	str	r0, [r7, #12]
 800f010:	60b9      	str	r1, [r7, #8]
 800f012:	4613      	mov	r3, r2
 800f014:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f016:	2300      	movs	r3, #0
 800f018:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f01a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f01e:	4618      	mov	r0, r3
 800f020:	371c      	adds	r7, #28
 800f022:	46bd      	mov	sp, r7
 800f024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f028:	4770      	bx	lr
	...

0800f02c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f02c:	b480      	push	{r7}
 800f02e:	b083      	sub	sp, #12
 800f030:	af00      	add	r7, sp, #0
 800f032:	4603      	mov	r3, r0
 800f034:	6039      	str	r1, [r7, #0]
 800f036:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f038:	683b      	ldr	r3, [r7, #0]
 800f03a:	2212      	movs	r2, #18
 800f03c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f03e:	4b03      	ldr	r3, [pc, #12]	@ (800f04c <USBD_FS_DeviceDescriptor+0x20>)
}
 800f040:	4618      	mov	r0, r3
 800f042:	370c      	adds	r7, #12
 800f044:	46bd      	mov	sp, r7
 800f046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f04a:	4770      	bx	lr
 800f04c:	2000011c 	.word	0x2000011c

0800f050 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f050:	b480      	push	{r7}
 800f052:	b083      	sub	sp, #12
 800f054:	af00      	add	r7, sp, #0
 800f056:	4603      	mov	r3, r0
 800f058:	6039      	str	r1, [r7, #0]
 800f05a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f05c:	683b      	ldr	r3, [r7, #0]
 800f05e:	2204      	movs	r2, #4
 800f060:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f062:	4b03      	ldr	r3, [pc, #12]	@ (800f070 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f064:	4618      	mov	r0, r3
 800f066:	370c      	adds	r7, #12
 800f068:	46bd      	mov	sp, r7
 800f06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f06e:	4770      	bx	lr
 800f070:	20000130 	.word	0x20000130

0800f074 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f074:	b580      	push	{r7, lr}
 800f076:	b082      	sub	sp, #8
 800f078:	af00      	add	r7, sp, #0
 800f07a:	4603      	mov	r3, r0
 800f07c:	6039      	str	r1, [r7, #0]
 800f07e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f080:	79fb      	ldrb	r3, [r7, #7]
 800f082:	2b00      	cmp	r3, #0
 800f084:	d105      	bne.n	800f092 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f086:	683a      	ldr	r2, [r7, #0]
 800f088:	4907      	ldr	r1, [pc, #28]	@ (800f0a8 <USBD_FS_ProductStrDescriptor+0x34>)
 800f08a:	4808      	ldr	r0, [pc, #32]	@ (800f0ac <USBD_FS_ProductStrDescriptor+0x38>)
 800f08c:	f7fe fb86 	bl	800d79c <USBD_GetString>
 800f090:	e004      	b.n	800f09c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f092:	683a      	ldr	r2, [r7, #0]
 800f094:	4904      	ldr	r1, [pc, #16]	@ (800f0a8 <USBD_FS_ProductStrDescriptor+0x34>)
 800f096:	4805      	ldr	r0, [pc, #20]	@ (800f0ac <USBD_FS_ProductStrDescriptor+0x38>)
 800f098:	f7fe fb80 	bl	800d79c <USBD_GetString>
  }
  return USBD_StrDesc;
 800f09c:	4b02      	ldr	r3, [pc, #8]	@ (800f0a8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f09e:	4618      	mov	r0, r3
 800f0a0:	3708      	adds	r7, #8
 800f0a2:	46bd      	mov	sp, r7
 800f0a4:	bd80      	pop	{r7, pc}
 800f0a6:	bf00      	nop
 800f0a8:	20005bdc 	.word	0x20005bdc
 800f0ac:	0800fa9c 	.word	0x0800fa9c

0800f0b0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f0b0:	b580      	push	{r7, lr}
 800f0b2:	b082      	sub	sp, #8
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	4603      	mov	r3, r0
 800f0b8:	6039      	str	r1, [r7, #0]
 800f0ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f0bc:	683a      	ldr	r2, [r7, #0]
 800f0be:	4904      	ldr	r1, [pc, #16]	@ (800f0d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f0c0:	4804      	ldr	r0, [pc, #16]	@ (800f0d4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f0c2:	f7fe fb6b 	bl	800d79c <USBD_GetString>
  return USBD_StrDesc;
 800f0c6:	4b02      	ldr	r3, [pc, #8]	@ (800f0d0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f0c8:	4618      	mov	r0, r3
 800f0ca:	3708      	adds	r7, #8
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	bd80      	pop	{r7, pc}
 800f0d0:	20005bdc 	.word	0x20005bdc
 800f0d4:	0800fab4 	.word	0x0800fab4

0800f0d8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f0d8:	b580      	push	{r7, lr}
 800f0da:	b082      	sub	sp, #8
 800f0dc:	af00      	add	r7, sp, #0
 800f0de:	4603      	mov	r3, r0
 800f0e0:	6039      	str	r1, [r7, #0]
 800f0e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f0e4:	683b      	ldr	r3, [r7, #0]
 800f0e6:	221a      	movs	r2, #26
 800f0e8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f0ea:	f000 f843 	bl	800f174 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f0ee:	4b02      	ldr	r3, [pc, #8]	@ (800f0f8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	3708      	adds	r7, #8
 800f0f4:	46bd      	mov	sp, r7
 800f0f6:	bd80      	pop	{r7, pc}
 800f0f8:	20000134 	.word	0x20000134

0800f0fc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b082      	sub	sp, #8
 800f100:	af00      	add	r7, sp, #0
 800f102:	4603      	mov	r3, r0
 800f104:	6039      	str	r1, [r7, #0]
 800f106:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f108:	79fb      	ldrb	r3, [r7, #7]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d105      	bne.n	800f11a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f10e:	683a      	ldr	r2, [r7, #0]
 800f110:	4907      	ldr	r1, [pc, #28]	@ (800f130 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f112:	4808      	ldr	r0, [pc, #32]	@ (800f134 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f114:	f7fe fb42 	bl	800d79c <USBD_GetString>
 800f118:	e004      	b.n	800f124 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f11a:	683a      	ldr	r2, [r7, #0]
 800f11c:	4904      	ldr	r1, [pc, #16]	@ (800f130 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f11e:	4805      	ldr	r0, [pc, #20]	@ (800f134 <USBD_FS_ConfigStrDescriptor+0x38>)
 800f120:	f7fe fb3c 	bl	800d79c <USBD_GetString>
  }
  return USBD_StrDesc;
 800f124:	4b02      	ldr	r3, [pc, #8]	@ (800f130 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f126:	4618      	mov	r0, r3
 800f128:	3708      	adds	r7, #8
 800f12a:	46bd      	mov	sp, r7
 800f12c:	bd80      	pop	{r7, pc}
 800f12e:	bf00      	nop
 800f130:	20005bdc 	.word	0x20005bdc
 800f134:	0800fac8 	.word	0x0800fac8

0800f138 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f138:	b580      	push	{r7, lr}
 800f13a:	b082      	sub	sp, #8
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	4603      	mov	r3, r0
 800f140:	6039      	str	r1, [r7, #0]
 800f142:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f144:	79fb      	ldrb	r3, [r7, #7]
 800f146:	2b00      	cmp	r3, #0
 800f148:	d105      	bne.n	800f156 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f14a:	683a      	ldr	r2, [r7, #0]
 800f14c:	4907      	ldr	r1, [pc, #28]	@ (800f16c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f14e:	4808      	ldr	r0, [pc, #32]	@ (800f170 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f150:	f7fe fb24 	bl	800d79c <USBD_GetString>
 800f154:	e004      	b.n	800f160 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f156:	683a      	ldr	r2, [r7, #0]
 800f158:	4904      	ldr	r1, [pc, #16]	@ (800f16c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f15a:	4805      	ldr	r0, [pc, #20]	@ (800f170 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f15c:	f7fe fb1e 	bl	800d79c <USBD_GetString>
  }
  return USBD_StrDesc;
 800f160:	4b02      	ldr	r3, [pc, #8]	@ (800f16c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f162:	4618      	mov	r0, r3
 800f164:	3708      	adds	r7, #8
 800f166:	46bd      	mov	sp, r7
 800f168:	bd80      	pop	{r7, pc}
 800f16a:	bf00      	nop
 800f16c:	20005bdc 	.word	0x20005bdc
 800f170:	0800fad4 	.word	0x0800fad4

0800f174 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f174:	b580      	push	{r7, lr}
 800f176:	b084      	sub	sp, #16
 800f178:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f17a:	4b0f      	ldr	r3, [pc, #60]	@ (800f1b8 <Get_SerialNum+0x44>)
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f180:	4b0e      	ldr	r3, [pc, #56]	@ (800f1bc <Get_SerialNum+0x48>)
 800f182:	681b      	ldr	r3, [r3, #0]
 800f184:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f186:	4b0e      	ldr	r3, [pc, #56]	@ (800f1c0 <Get_SerialNum+0x4c>)
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f18c:	68fa      	ldr	r2, [r7, #12]
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	4413      	add	r3, r2
 800f192:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	2b00      	cmp	r3, #0
 800f198:	d009      	beq.n	800f1ae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f19a:	2208      	movs	r2, #8
 800f19c:	4909      	ldr	r1, [pc, #36]	@ (800f1c4 <Get_SerialNum+0x50>)
 800f19e:	68f8      	ldr	r0, [r7, #12]
 800f1a0:	f000 f814 	bl	800f1cc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f1a4:	2204      	movs	r2, #4
 800f1a6:	4908      	ldr	r1, [pc, #32]	@ (800f1c8 <Get_SerialNum+0x54>)
 800f1a8:	68b8      	ldr	r0, [r7, #8]
 800f1aa:	f000 f80f 	bl	800f1cc <IntToUnicode>
  }
}
 800f1ae:	bf00      	nop
 800f1b0:	3710      	adds	r7, #16
 800f1b2:	46bd      	mov	sp, r7
 800f1b4:	bd80      	pop	{r7, pc}
 800f1b6:	bf00      	nop
 800f1b8:	1fff7a10 	.word	0x1fff7a10
 800f1bc:	1fff7a14 	.word	0x1fff7a14
 800f1c0:	1fff7a18 	.word	0x1fff7a18
 800f1c4:	20000136 	.word	0x20000136
 800f1c8:	20000146 	.word	0x20000146

0800f1cc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f1cc:	b480      	push	{r7}
 800f1ce:	b087      	sub	sp, #28
 800f1d0:	af00      	add	r7, sp, #0
 800f1d2:	60f8      	str	r0, [r7, #12]
 800f1d4:	60b9      	str	r1, [r7, #8]
 800f1d6:	4613      	mov	r3, r2
 800f1d8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f1da:	2300      	movs	r3, #0
 800f1dc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f1de:	2300      	movs	r3, #0
 800f1e0:	75fb      	strb	r3, [r7, #23]
 800f1e2:	e027      	b.n	800f234 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f1e4:	68fb      	ldr	r3, [r7, #12]
 800f1e6:	0f1b      	lsrs	r3, r3, #28
 800f1e8:	2b09      	cmp	r3, #9
 800f1ea:	d80b      	bhi.n	800f204 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f1ec:	68fb      	ldr	r3, [r7, #12]
 800f1ee:	0f1b      	lsrs	r3, r3, #28
 800f1f0:	b2da      	uxtb	r2, r3
 800f1f2:	7dfb      	ldrb	r3, [r7, #23]
 800f1f4:	005b      	lsls	r3, r3, #1
 800f1f6:	4619      	mov	r1, r3
 800f1f8:	68bb      	ldr	r3, [r7, #8]
 800f1fa:	440b      	add	r3, r1
 800f1fc:	3230      	adds	r2, #48	@ 0x30
 800f1fe:	b2d2      	uxtb	r2, r2
 800f200:	701a      	strb	r2, [r3, #0]
 800f202:	e00a      	b.n	800f21a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f204:	68fb      	ldr	r3, [r7, #12]
 800f206:	0f1b      	lsrs	r3, r3, #28
 800f208:	b2da      	uxtb	r2, r3
 800f20a:	7dfb      	ldrb	r3, [r7, #23]
 800f20c:	005b      	lsls	r3, r3, #1
 800f20e:	4619      	mov	r1, r3
 800f210:	68bb      	ldr	r3, [r7, #8]
 800f212:	440b      	add	r3, r1
 800f214:	3237      	adds	r2, #55	@ 0x37
 800f216:	b2d2      	uxtb	r2, r2
 800f218:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f21a:	68fb      	ldr	r3, [r7, #12]
 800f21c:	011b      	lsls	r3, r3, #4
 800f21e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f220:	7dfb      	ldrb	r3, [r7, #23]
 800f222:	005b      	lsls	r3, r3, #1
 800f224:	3301      	adds	r3, #1
 800f226:	68ba      	ldr	r2, [r7, #8]
 800f228:	4413      	add	r3, r2
 800f22a:	2200      	movs	r2, #0
 800f22c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f22e:	7dfb      	ldrb	r3, [r7, #23]
 800f230:	3301      	adds	r3, #1
 800f232:	75fb      	strb	r3, [r7, #23]
 800f234:	7dfa      	ldrb	r2, [r7, #23]
 800f236:	79fb      	ldrb	r3, [r7, #7]
 800f238:	429a      	cmp	r2, r3
 800f23a:	d3d3      	bcc.n	800f1e4 <IntToUnicode+0x18>
  }
}
 800f23c:	bf00      	nop
 800f23e:	bf00      	nop
 800f240:	371c      	adds	r7, #28
 800f242:	46bd      	mov	sp, r7
 800f244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f248:	4770      	bx	lr
	...

0800f24c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f24c:	b580      	push	{r7, lr}
 800f24e:	b08a      	sub	sp, #40	@ 0x28
 800f250:	af00      	add	r7, sp, #0
 800f252:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f254:	f107 0314 	add.w	r3, r7, #20
 800f258:	2200      	movs	r2, #0
 800f25a:	601a      	str	r2, [r3, #0]
 800f25c:	605a      	str	r2, [r3, #4]
 800f25e:	609a      	str	r2, [r3, #8]
 800f260:	60da      	str	r2, [r3, #12]
 800f262:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f26c:	d13a      	bne.n	800f2e4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f26e:	2300      	movs	r3, #0
 800f270:	613b      	str	r3, [r7, #16]
 800f272:	4b1e      	ldr	r3, [pc, #120]	@ (800f2ec <HAL_PCD_MspInit+0xa0>)
 800f274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f276:	4a1d      	ldr	r2, [pc, #116]	@ (800f2ec <HAL_PCD_MspInit+0xa0>)
 800f278:	f043 0301 	orr.w	r3, r3, #1
 800f27c:	6313      	str	r3, [r2, #48]	@ 0x30
 800f27e:	4b1b      	ldr	r3, [pc, #108]	@ (800f2ec <HAL_PCD_MspInit+0xa0>)
 800f280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f282:	f003 0301 	and.w	r3, r3, #1
 800f286:	613b      	str	r3, [r7, #16]
 800f288:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f28a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800f28e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f290:	2302      	movs	r3, #2
 800f292:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f294:	2300      	movs	r3, #0
 800f296:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f298:	2303      	movs	r3, #3
 800f29a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f29c:	230a      	movs	r3, #10
 800f29e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f2a0:	f107 0314 	add.w	r3, r7, #20
 800f2a4:	4619      	mov	r1, r3
 800f2a6:	4812      	ldr	r0, [pc, #72]	@ (800f2f0 <HAL_PCD_MspInit+0xa4>)
 800f2a8:	f7f5 fdb6 	bl	8004e18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f2ac:	4b0f      	ldr	r3, [pc, #60]	@ (800f2ec <HAL_PCD_MspInit+0xa0>)
 800f2ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f2b0:	4a0e      	ldr	r2, [pc, #56]	@ (800f2ec <HAL_PCD_MspInit+0xa0>)
 800f2b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f2b6:	6353      	str	r3, [r2, #52]	@ 0x34
 800f2b8:	2300      	movs	r3, #0
 800f2ba:	60fb      	str	r3, [r7, #12]
 800f2bc:	4b0b      	ldr	r3, [pc, #44]	@ (800f2ec <HAL_PCD_MspInit+0xa0>)
 800f2be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f2c0:	4a0a      	ldr	r2, [pc, #40]	@ (800f2ec <HAL_PCD_MspInit+0xa0>)
 800f2c2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800f2c6:	6453      	str	r3, [r2, #68]	@ 0x44
 800f2c8:	4b08      	ldr	r3, [pc, #32]	@ (800f2ec <HAL_PCD_MspInit+0xa0>)
 800f2ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f2cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f2d0:	60fb      	str	r3, [r7, #12]
 800f2d2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800f2d4:	2200      	movs	r2, #0
 800f2d6:	2105      	movs	r1, #5
 800f2d8:	2043      	movs	r0, #67	@ 0x43
 800f2da:	f7f5 f971 	bl	80045c0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f2de:	2043      	movs	r0, #67	@ 0x43
 800f2e0:	f7f5 f98a 	bl	80045f8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f2e4:	bf00      	nop
 800f2e6:	3728      	adds	r7, #40	@ 0x28
 800f2e8:	46bd      	mov	sp, r7
 800f2ea:	bd80      	pop	{r7, pc}
 800f2ec:	40023800 	.word	0x40023800
 800f2f0:	40020000 	.word	0x40020000

0800f2f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f2f4:	b580      	push	{r7, lr}
 800f2f6:	b082      	sub	sp, #8
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800f308:	4619      	mov	r1, r3
 800f30a:	4610      	mov	r0, r2
 800f30c:	f7fd f8e3 	bl	800c4d6 <USBD_LL_SetupStage>
}
 800f310:	bf00      	nop
 800f312:	3708      	adds	r7, #8
 800f314:	46bd      	mov	sp, r7
 800f316:	bd80      	pop	{r7, pc}

0800f318 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f318:	b580      	push	{r7, lr}
 800f31a:	b082      	sub	sp, #8
 800f31c:	af00      	add	r7, sp, #0
 800f31e:	6078      	str	r0, [r7, #4]
 800f320:	460b      	mov	r3, r1
 800f322:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800f32a:	78fa      	ldrb	r2, [r7, #3]
 800f32c:	6879      	ldr	r1, [r7, #4]
 800f32e:	4613      	mov	r3, r2
 800f330:	00db      	lsls	r3, r3, #3
 800f332:	4413      	add	r3, r2
 800f334:	009b      	lsls	r3, r3, #2
 800f336:	440b      	add	r3, r1
 800f338:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800f33c:	681a      	ldr	r2, [r3, #0]
 800f33e:	78fb      	ldrb	r3, [r7, #3]
 800f340:	4619      	mov	r1, r3
 800f342:	f7fd f91d 	bl	800c580 <USBD_LL_DataOutStage>
}
 800f346:	bf00      	nop
 800f348:	3708      	adds	r7, #8
 800f34a:	46bd      	mov	sp, r7
 800f34c:	bd80      	pop	{r7, pc}

0800f34e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f34e:	b580      	push	{r7, lr}
 800f350:	b082      	sub	sp, #8
 800f352:	af00      	add	r7, sp, #0
 800f354:	6078      	str	r0, [r7, #4]
 800f356:	460b      	mov	r3, r1
 800f358:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800f360:	78fa      	ldrb	r2, [r7, #3]
 800f362:	6879      	ldr	r1, [r7, #4]
 800f364:	4613      	mov	r3, r2
 800f366:	00db      	lsls	r3, r3, #3
 800f368:	4413      	add	r3, r2
 800f36a:	009b      	lsls	r3, r3, #2
 800f36c:	440b      	add	r3, r1
 800f36e:	3320      	adds	r3, #32
 800f370:	681a      	ldr	r2, [r3, #0]
 800f372:	78fb      	ldrb	r3, [r7, #3]
 800f374:	4619      	mov	r1, r3
 800f376:	f7fd f9b6 	bl	800c6e6 <USBD_LL_DataInStage>
}
 800f37a:	bf00      	nop
 800f37c:	3708      	adds	r7, #8
 800f37e:	46bd      	mov	sp, r7
 800f380:	bd80      	pop	{r7, pc}

0800f382 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f382:	b580      	push	{r7, lr}
 800f384:	b082      	sub	sp, #8
 800f386:	af00      	add	r7, sp, #0
 800f388:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f390:	4618      	mov	r0, r3
 800f392:	f7fd faf0 	bl	800c976 <USBD_LL_SOF>
}
 800f396:	bf00      	nop
 800f398:	3708      	adds	r7, #8
 800f39a:	46bd      	mov	sp, r7
 800f39c:	bd80      	pop	{r7, pc}

0800f39e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f39e:	b580      	push	{r7, lr}
 800f3a0:	b084      	sub	sp, #16
 800f3a2:	af00      	add	r7, sp, #0
 800f3a4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f3a6:	2301      	movs	r3, #1
 800f3a8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	79db      	ldrb	r3, [r3, #7]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d102      	bne.n	800f3b8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800f3b2:	2300      	movs	r3, #0
 800f3b4:	73fb      	strb	r3, [r7, #15]
 800f3b6:	e008      	b.n	800f3ca <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	79db      	ldrb	r3, [r3, #7]
 800f3bc:	2b02      	cmp	r3, #2
 800f3be:	d102      	bne.n	800f3c6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800f3c0:	2301      	movs	r3, #1
 800f3c2:	73fb      	strb	r3, [r7, #15]
 800f3c4:	e001      	b.n	800f3ca <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800f3c6:	f7f3 fe03 	bl	8002fd0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f3d0:	7bfa      	ldrb	r2, [r7, #15]
 800f3d2:	4611      	mov	r1, r2
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	f7fd fa8a 	bl	800c8ee <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	f7fd fa32 	bl	800c84a <USBD_LL_Reset>
}
 800f3e6:	bf00      	nop
 800f3e8:	3710      	adds	r7, #16
 800f3ea:	46bd      	mov	sp, r7
 800f3ec:	bd80      	pop	{r7, pc}
	...

0800f3f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f3f0:	b580      	push	{r7, lr}
 800f3f2:	b082      	sub	sp, #8
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f3fe:	4618      	mov	r0, r3
 800f400:	f7fd fa85 	bl	800c90e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f40c:	681b      	ldr	r3, [r3, #0]
 800f40e:	687a      	ldr	r2, [r7, #4]
 800f410:	6812      	ldr	r2, [r2, #0]
 800f412:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f416:	f043 0301 	orr.w	r3, r3, #1
 800f41a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	7adb      	ldrb	r3, [r3, #11]
 800f420:	2b00      	cmp	r3, #0
 800f422:	d005      	beq.n	800f430 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f424:	4b04      	ldr	r3, [pc, #16]	@ (800f438 <HAL_PCD_SuspendCallback+0x48>)
 800f426:	691b      	ldr	r3, [r3, #16]
 800f428:	4a03      	ldr	r2, [pc, #12]	@ (800f438 <HAL_PCD_SuspendCallback+0x48>)
 800f42a:	f043 0306 	orr.w	r3, r3, #6
 800f42e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f430:	bf00      	nop
 800f432:	3708      	adds	r7, #8
 800f434:	46bd      	mov	sp, r7
 800f436:	bd80      	pop	{r7, pc}
 800f438:	e000ed00 	.word	0xe000ed00

0800f43c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f43c:	b580      	push	{r7, lr}
 800f43e:	b082      	sub	sp, #8
 800f440:	af00      	add	r7, sp, #0
 800f442:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f44a:	4618      	mov	r0, r3
 800f44c:	f7fd fa7b 	bl	800c946 <USBD_LL_Resume>
}
 800f450:	bf00      	nop
 800f452:	3708      	adds	r7, #8
 800f454:	46bd      	mov	sp, r7
 800f456:	bd80      	pop	{r7, pc}

0800f458 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f458:	b580      	push	{r7, lr}
 800f45a:	b082      	sub	sp, #8
 800f45c:	af00      	add	r7, sp, #0
 800f45e:	6078      	str	r0, [r7, #4]
 800f460:	460b      	mov	r3, r1
 800f462:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f46a:	78fa      	ldrb	r2, [r7, #3]
 800f46c:	4611      	mov	r1, r2
 800f46e:	4618      	mov	r0, r3
 800f470:	f7fd fad3 	bl	800ca1a <USBD_LL_IsoOUTIncomplete>
}
 800f474:	bf00      	nop
 800f476:	3708      	adds	r7, #8
 800f478:	46bd      	mov	sp, r7
 800f47a:	bd80      	pop	{r7, pc}

0800f47c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f47c:	b580      	push	{r7, lr}
 800f47e:	b082      	sub	sp, #8
 800f480:	af00      	add	r7, sp, #0
 800f482:	6078      	str	r0, [r7, #4]
 800f484:	460b      	mov	r3, r1
 800f486:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f48e:	78fa      	ldrb	r2, [r7, #3]
 800f490:	4611      	mov	r1, r2
 800f492:	4618      	mov	r0, r3
 800f494:	f7fd fa8f 	bl	800c9b6 <USBD_LL_IsoINIncomplete>
}
 800f498:	bf00      	nop
 800f49a:	3708      	adds	r7, #8
 800f49c:	46bd      	mov	sp, r7
 800f49e:	bd80      	pop	{r7, pc}

0800f4a0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f4a0:	b580      	push	{r7, lr}
 800f4a2:	b082      	sub	sp, #8
 800f4a4:	af00      	add	r7, sp, #0
 800f4a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f4ae:	4618      	mov	r0, r3
 800f4b0:	f7fd fae5 	bl	800ca7e <USBD_LL_DevConnected>
}
 800f4b4:	bf00      	nop
 800f4b6:	3708      	adds	r7, #8
 800f4b8:	46bd      	mov	sp, r7
 800f4ba:	bd80      	pop	{r7, pc}

0800f4bc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f4bc:	b580      	push	{r7, lr}
 800f4be:	b082      	sub	sp, #8
 800f4c0:	af00      	add	r7, sp, #0
 800f4c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	f7fd fae2 	bl	800ca94 <USBD_LL_DevDisconnected>
}
 800f4d0:	bf00      	nop
 800f4d2:	3708      	adds	r7, #8
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	bd80      	pop	{r7, pc}

0800f4d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b082      	sub	sp, #8
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	781b      	ldrb	r3, [r3, #0]
 800f4e4:	2b00      	cmp	r3, #0
 800f4e6:	d13c      	bne.n	800f562 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f4e8:	4a20      	ldr	r2, [pc, #128]	@ (800f56c <USBD_LL_Init+0x94>)
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	4a1e      	ldr	r2, [pc, #120]	@ (800f56c <USBD_LL_Init+0x94>)
 800f4f4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f4f8:	4b1c      	ldr	r3, [pc, #112]	@ (800f56c <USBD_LL_Init+0x94>)
 800f4fa:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800f4fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800f500:	4b1a      	ldr	r3, [pc, #104]	@ (800f56c <USBD_LL_Init+0x94>)
 800f502:	2204      	movs	r2, #4
 800f504:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f506:	4b19      	ldr	r3, [pc, #100]	@ (800f56c <USBD_LL_Init+0x94>)
 800f508:	2202      	movs	r2, #2
 800f50a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f50c:	4b17      	ldr	r3, [pc, #92]	@ (800f56c <USBD_LL_Init+0x94>)
 800f50e:	2200      	movs	r2, #0
 800f510:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f512:	4b16      	ldr	r3, [pc, #88]	@ (800f56c <USBD_LL_Init+0x94>)
 800f514:	2202      	movs	r2, #2
 800f516:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f518:	4b14      	ldr	r3, [pc, #80]	@ (800f56c <USBD_LL_Init+0x94>)
 800f51a:	2200      	movs	r2, #0
 800f51c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f51e:	4b13      	ldr	r3, [pc, #76]	@ (800f56c <USBD_LL_Init+0x94>)
 800f520:	2200      	movs	r2, #0
 800f522:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f524:	4b11      	ldr	r3, [pc, #68]	@ (800f56c <USBD_LL_Init+0x94>)
 800f526:	2200      	movs	r2, #0
 800f528:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f52a:	4b10      	ldr	r3, [pc, #64]	@ (800f56c <USBD_LL_Init+0x94>)
 800f52c:	2200      	movs	r2, #0
 800f52e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f530:	4b0e      	ldr	r3, [pc, #56]	@ (800f56c <USBD_LL_Init+0x94>)
 800f532:	2200      	movs	r2, #0
 800f534:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f536:	480d      	ldr	r0, [pc, #52]	@ (800f56c <USBD_LL_Init+0x94>)
 800f538:	f7f6 fe36 	bl	80061a8 <HAL_PCD_Init>
 800f53c:	4603      	mov	r3, r0
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d001      	beq.n	800f546 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800f542:	f7f3 fd45 	bl	8002fd0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f546:	2180      	movs	r1, #128	@ 0x80
 800f548:	4808      	ldr	r0, [pc, #32]	@ (800f56c <USBD_LL_Init+0x94>)
 800f54a:	f7f8 f860 	bl	800760e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f54e:	2240      	movs	r2, #64	@ 0x40
 800f550:	2100      	movs	r1, #0
 800f552:	4806      	ldr	r0, [pc, #24]	@ (800f56c <USBD_LL_Init+0x94>)
 800f554:	f7f8 f814 	bl	8007580 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f558:	2280      	movs	r2, #128	@ 0x80
 800f55a:	2101      	movs	r1, #1
 800f55c:	4803      	ldr	r0, [pc, #12]	@ (800f56c <USBD_LL_Init+0x94>)
 800f55e:	f7f8 f80f 	bl	8007580 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f562:	2300      	movs	r3, #0
}
 800f564:	4618      	mov	r0, r3
 800f566:	3708      	adds	r7, #8
 800f568:	46bd      	mov	sp, r7
 800f56a:	bd80      	pop	{r7, pc}
 800f56c:	20005ddc 	.word	0x20005ddc

0800f570 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f570:	b580      	push	{r7, lr}
 800f572:	b084      	sub	sp, #16
 800f574:	af00      	add	r7, sp, #0
 800f576:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f578:	2300      	movs	r3, #0
 800f57a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f57c:	2300      	movs	r3, #0
 800f57e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f586:	4618      	mov	r0, r3
 800f588:	f7f6 ff1d 	bl	80063c6 <HAL_PCD_Start>
 800f58c:	4603      	mov	r3, r0
 800f58e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f590:	7bfb      	ldrb	r3, [r7, #15]
 800f592:	4618      	mov	r0, r3
 800f594:	f000 f942 	bl	800f81c <USBD_Get_USB_Status>
 800f598:	4603      	mov	r3, r0
 800f59a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f59c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f59e:	4618      	mov	r0, r3
 800f5a0:	3710      	adds	r7, #16
 800f5a2:	46bd      	mov	sp, r7
 800f5a4:	bd80      	pop	{r7, pc}

0800f5a6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f5a6:	b580      	push	{r7, lr}
 800f5a8:	b084      	sub	sp, #16
 800f5aa:	af00      	add	r7, sp, #0
 800f5ac:	6078      	str	r0, [r7, #4]
 800f5ae:	4608      	mov	r0, r1
 800f5b0:	4611      	mov	r1, r2
 800f5b2:	461a      	mov	r2, r3
 800f5b4:	4603      	mov	r3, r0
 800f5b6:	70fb      	strb	r3, [r7, #3]
 800f5b8:	460b      	mov	r3, r1
 800f5ba:	70bb      	strb	r3, [r7, #2]
 800f5bc:	4613      	mov	r3, r2
 800f5be:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f5ce:	78bb      	ldrb	r3, [r7, #2]
 800f5d0:	883a      	ldrh	r2, [r7, #0]
 800f5d2:	78f9      	ldrb	r1, [r7, #3]
 800f5d4:	f7f7 fbf1 	bl	8006dba <HAL_PCD_EP_Open>
 800f5d8:	4603      	mov	r3, r0
 800f5da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f5dc:	7bfb      	ldrb	r3, [r7, #15]
 800f5de:	4618      	mov	r0, r3
 800f5e0:	f000 f91c 	bl	800f81c <USBD_Get_USB_Status>
 800f5e4:	4603      	mov	r3, r0
 800f5e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f5e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800f5ea:	4618      	mov	r0, r3
 800f5ec:	3710      	adds	r7, #16
 800f5ee:	46bd      	mov	sp, r7
 800f5f0:	bd80      	pop	{r7, pc}

0800f5f2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f5f2:	b580      	push	{r7, lr}
 800f5f4:	b084      	sub	sp, #16
 800f5f6:	af00      	add	r7, sp, #0
 800f5f8:	6078      	str	r0, [r7, #4]
 800f5fa:	460b      	mov	r3, r1
 800f5fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f5fe:	2300      	movs	r3, #0
 800f600:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f602:	2300      	movs	r3, #0
 800f604:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f60c:	78fa      	ldrb	r2, [r7, #3]
 800f60e:	4611      	mov	r1, r2
 800f610:	4618      	mov	r0, r3
 800f612:	f7f7 fc3a 	bl	8006e8a <HAL_PCD_EP_Close>
 800f616:	4603      	mov	r3, r0
 800f618:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f61a:	7bfb      	ldrb	r3, [r7, #15]
 800f61c:	4618      	mov	r0, r3
 800f61e:	f000 f8fd 	bl	800f81c <USBD_Get_USB_Status>
 800f622:	4603      	mov	r3, r0
 800f624:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f626:	7bbb      	ldrb	r3, [r7, #14]
}
 800f628:	4618      	mov	r0, r3
 800f62a:	3710      	adds	r7, #16
 800f62c:	46bd      	mov	sp, r7
 800f62e:	bd80      	pop	{r7, pc}

0800f630 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f630:	b580      	push	{r7, lr}
 800f632:	b084      	sub	sp, #16
 800f634:	af00      	add	r7, sp, #0
 800f636:	6078      	str	r0, [r7, #4]
 800f638:	460b      	mov	r3, r1
 800f63a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f63c:	2300      	movs	r3, #0
 800f63e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f640:	2300      	movs	r3, #0
 800f642:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f64a:	78fa      	ldrb	r2, [r7, #3]
 800f64c:	4611      	mov	r1, r2
 800f64e:	4618      	mov	r0, r3
 800f650:	f7f7 fcf2 	bl	8007038 <HAL_PCD_EP_SetStall>
 800f654:	4603      	mov	r3, r0
 800f656:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f658:	7bfb      	ldrb	r3, [r7, #15]
 800f65a:	4618      	mov	r0, r3
 800f65c:	f000 f8de 	bl	800f81c <USBD_Get_USB_Status>
 800f660:	4603      	mov	r3, r0
 800f662:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f664:	7bbb      	ldrb	r3, [r7, #14]
}
 800f666:	4618      	mov	r0, r3
 800f668:	3710      	adds	r7, #16
 800f66a:	46bd      	mov	sp, r7
 800f66c:	bd80      	pop	{r7, pc}

0800f66e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f66e:	b580      	push	{r7, lr}
 800f670:	b084      	sub	sp, #16
 800f672:	af00      	add	r7, sp, #0
 800f674:	6078      	str	r0, [r7, #4]
 800f676:	460b      	mov	r3, r1
 800f678:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f67a:	2300      	movs	r3, #0
 800f67c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f67e:	2300      	movs	r3, #0
 800f680:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f688:	78fa      	ldrb	r2, [r7, #3]
 800f68a:	4611      	mov	r1, r2
 800f68c:	4618      	mov	r0, r3
 800f68e:	f7f7 fd36 	bl	80070fe <HAL_PCD_EP_ClrStall>
 800f692:	4603      	mov	r3, r0
 800f694:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f696:	7bfb      	ldrb	r3, [r7, #15]
 800f698:	4618      	mov	r0, r3
 800f69a:	f000 f8bf 	bl	800f81c <USBD_Get_USB_Status>
 800f69e:	4603      	mov	r3, r0
 800f6a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f6a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800f6a4:	4618      	mov	r0, r3
 800f6a6:	3710      	adds	r7, #16
 800f6a8:	46bd      	mov	sp, r7
 800f6aa:	bd80      	pop	{r7, pc}

0800f6ac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f6ac:	b480      	push	{r7}
 800f6ae:	b085      	sub	sp, #20
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
 800f6b4:	460b      	mov	r3, r1
 800f6b6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f6be:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f6c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	da0b      	bge.n	800f6e0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f6c8:	78fb      	ldrb	r3, [r7, #3]
 800f6ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f6ce:	68f9      	ldr	r1, [r7, #12]
 800f6d0:	4613      	mov	r3, r2
 800f6d2:	00db      	lsls	r3, r3, #3
 800f6d4:	4413      	add	r3, r2
 800f6d6:	009b      	lsls	r3, r3, #2
 800f6d8:	440b      	add	r3, r1
 800f6da:	3316      	adds	r3, #22
 800f6dc:	781b      	ldrb	r3, [r3, #0]
 800f6de:	e00b      	b.n	800f6f8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f6e0:	78fb      	ldrb	r3, [r7, #3]
 800f6e2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f6e6:	68f9      	ldr	r1, [r7, #12]
 800f6e8:	4613      	mov	r3, r2
 800f6ea:	00db      	lsls	r3, r3, #3
 800f6ec:	4413      	add	r3, r2
 800f6ee:	009b      	lsls	r3, r3, #2
 800f6f0:	440b      	add	r3, r1
 800f6f2:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800f6f6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	3714      	adds	r7, #20
 800f6fc:	46bd      	mov	sp, r7
 800f6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f702:	4770      	bx	lr

0800f704 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f704:	b580      	push	{r7, lr}
 800f706:	b084      	sub	sp, #16
 800f708:	af00      	add	r7, sp, #0
 800f70a:	6078      	str	r0, [r7, #4]
 800f70c:	460b      	mov	r3, r1
 800f70e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f710:	2300      	movs	r3, #0
 800f712:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f714:	2300      	movs	r3, #0
 800f716:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f71e:	78fa      	ldrb	r2, [r7, #3]
 800f720:	4611      	mov	r1, r2
 800f722:	4618      	mov	r0, r3
 800f724:	f7f7 fb25 	bl	8006d72 <HAL_PCD_SetAddress>
 800f728:	4603      	mov	r3, r0
 800f72a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f72c:	7bfb      	ldrb	r3, [r7, #15]
 800f72e:	4618      	mov	r0, r3
 800f730:	f000 f874 	bl	800f81c <USBD_Get_USB_Status>
 800f734:	4603      	mov	r3, r0
 800f736:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f738:	7bbb      	ldrb	r3, [r7, #14]
}
 800f73a:	4618      	mov	r0, r3
 800f73c:	3710      	adds	r7, #16
 800f73e:	46bd      	mov	sp, r7
 800f740:	bd80      	pop	{r7, pc}

0800f742 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f742:	b580      	push	{r7, lr}
 800f744:	b086      	sub	sp, #24
 800f746:	af00      	add	r7, sp, #0
 800f748:	60f8      	str	r0, [r7, #12]
 800f74a:	607a      	str	r2, [r7, #4]
 800f74c:	603b      	str	r3, [r7, #0]
 800f74e:	460b      	mov	r3, r1
 800f750:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f752:	2300      	movs	r3, #0
 800f754:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f756:	2300      	movs	r3, #0
 800f758:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f760:	7af9      	ldrb	r1, [r7, #11]
 800f762:	683b      	ldr	r3, [r7, #0]
 800f764:	687a      	ldr	r2, [r7, #4]
 800f766:	f7f7 fc2d 	bl	8006fc4 <HAL_PCD_EP_Transmit>
 800f76a:	4603      	mov	r3, r0
 800f76c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f76e:	7dfb      	ldrb	r3, [r7, #23]
 800f770:	4618      	mov	r0, r3
 800f772:	f000 f853 	bl	800f81c <USBD_Get_USB_Status>
 800f776:	4603      	mov	r3, r0
 800f778:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f77a:	7dbb      	ldrb	r3, [r7, #22]
}
 800f77c:	4618      	mov	r0, r3
 800f77e:	3718      	adds	r7, #24
 800f780:	46bd      	mov	sp, r7
 800f782:	bd80      	pop	{r7, pc}

0800f784 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f784:	b580      	push	{r7, lr}
 800f786:	b086      	sub	sp, #24
 800f788:	af00      	add	r7, sp, #0
 800f78a:	60f8      	str	r0, [r7, #12]
 800f78c:	607a      	str	r2, [r7, #4]
 800f78e:	603b      	str	r3, [r7, #0]
 800f790:	460b      	mov	r3, r1
 800f792:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f794:	2300      	movs	r3, #0
 800f796:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f798:	2300      	movs	r3, #0
 800f79a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f79c:	68fb      	ldr	r3, [r7, #12]
 800f79e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f7a2:	7af9      	ldrb	r1, [r7, #11]
 800f7a4:	683b      	ldr	r3, [r7, #0]
 800f7a6:	687a      	ldr	r2, [r7, #4]
 800f7a8:	f7f7 fbb9 	bl	8006f1e <HAL_PCD_EP_Receive>
 800f7ac:	4603      	mov	r3, r0
 800f7ae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f7b0:	7dfb      	ldrb	r3, [r7, #23]
 800f7b2:	4618      	mov	r0, r3
 800f7b4:	f000 f832 	bl	800f81c <USBD_Get_USB_Status>
 800f7b8:	4603      	mov	r3, r0
 800f7ba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f7bc:	7dbb      	ldrb	r3, [r7, #22]
}
 800f7be:	4618      	mov	r0, r3
 800f7c0:	3718      	adds	r7, #24
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	bd80      	pop	{r7, pc}

0800f7c6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f7c6:	b580      	push	{r7, lr}
 800f7c8:	b082      	sub	sp, #8
 800f7ca:	af00      	add	r7, sp, #0
 800f7cc:	6078      	str	r0, [r7, #4]
 800f7ce:	460b      	mov	r3, r1
 800f7d0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f7d2:	687b      	ldr	r3, [r7, #4]
 800f7d4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f7d8:	78fa      	ldrb	r2, [r7, #3]
 800f7da:	4611      	mov	r1, r2
 800f7dc:	4618      	mov	r0, r3
 800f7de:	f7f7 fbd9 	bl	8006f94 <HAL_PCD_EP_GetRxCount>
 800f7e2:	4603      	mov	r3, r0
}
 800f7e4:	4618      	mov	r0, r3
 800f7e6:	3708      	adds	r7, #8
 800f7e8:	46bd      	mov	sp, r7
 800f7ea:	bd80      	pop	{r7, pc}

0800f7ec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f7ec:	b480      	push	{r7}
 800f7ee:	b083      	sub	sp, #12
 800f7f0:	af00      	add	r7, sp, #0
 800f7f2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f7f4:	4b03      	ldr	r3, [pc, #12]	@ (800f804 <USBD_static_malloc+0x18>)
}
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	370c      	adds	r7, #12
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f800:	4770      	bx	lr
 800f802:	bf00      	nop
 800f804:	200062c0 	.word	0x200062c0

0800f808 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f808:	b480      	push	{r7}
 800f80a:	b083      	sub	sp, #12
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	6078      	str	r0, [r7, #4]

}
 800f810:	bf00      	nop
 800f812:	370c      	adds	r7, #12
 800f814:	46bd      	mov	sp, r7
 800f816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f81a:	4770      	bx	lr

0800f81c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f81c:	b480      	push	{r7}
 800f81e:	b085      	sub	sp, #20
 800f820:	af00      	add	r7, sp, #0
 800f822:	4603      	mov	r3, r0
 800f824:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f826:	2300      	movs	r3, #0
 800f828:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f82a:	79fb      	ldrb	r3, [r7, #7]
 800f82c:	2b03      	cmp	r3, #3
 800f82e:	d817      	bhi.n	800f860 <USBD_Get_USB_Status+0x44>
 800f830:	a201      	add	r2, pc, #4	@ (adr r2, 800f838 <USBD_Get_USB_Status+0x1c>)
 800f832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f836:	bf00      	nop
 800f838:	0800f849 	.word	0x0800f849
 800f83c:	0800f84f 	.word	0x0800f84f
 800f840:	0800f855 	.word	0x0800f855
 800f844:	0800f85b 	.word	0x0800f85b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f848:	2300      	movs	r3, #0
 800f84a:	73fb      	strb	r3, [r7, #15]
    break;
 800f84c:	e00b      	b.n	800f866 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f84e:	2303      	movs	r3, #3
 800f850:	73fb      	strb	r3, [r7, #15]
    break;
 800f852:	e008      	b.n	800f866 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f854:	2301      	movs	r3, #1
 800f856:	73fb      	strb	r3, [r7, #15]
    break;
 800f858:	e005      	b.n	800f866 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f85a:	2303      	movs	r3, #3
 800f85c:	73fb      	strb	r3, [r7, #15]
    break;
 800f85e:	e002      	b.n	800f866 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f860:	2303      	movs	r3, #3
 800f862:	73fb      	strb	r3, [r7, #15]
    break;
 800f864:	bf00      	nop
  }
  return usb_status;
 800f866:	7bfb      	ldrb	r3, [r7, #15]
}
 800f868:	4618      	mov	r0, r3
 800f86a:	3714      	adds	r7, #20
 800f86c:	46bd      	mov	sp, r7
 800f86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f872:	4770      	bx	lr

0800f874 <memset>:
 800f874:	4402      	add	r2, r0
 800f876:	4603      	mov	r3, r0
 800f878:	4293      	cmp	r3, r2
 800f87a:	d100      	bne.n	800f87e <memset+0xa>
 800f87c:	4770      	bx	lr
 800f87e:	f803 1b01 	strb.w	r1, [r3], #1
 800f882:	e7f9      	b.n	800f878 <memset+0x4>

0800f884 <__libc_init_array>:
 800f884:	b570      	push	{r4, r5, r6, lr}
 800f886:	4d0d      	ldr	r5, [pc, #52]	@ (800f8bc <__libc_init_array+0x38>)
 800f888:	4c0d      	ldr	r4, [pc, #52]	@ (800f8c0 <__libc_init_array+0x3c>)
 800f88a:	1b64      	subs	r4, r4, r5
 800f88c:	10a4      	asrs	r4, r4, #2
 800f88e:	2600      	movs	r6, #0
 800f890:	42a6      	cmp	r6, r4
 800f892:	d109      	bne.n	800f8a8 <__libc_init_array+0x24>
 800f894:	4d0b      	ldr	r5, [pc, #44]	@ (800f8c4 <__libc_init_array+0x40>)
 800f896:	4c0c      	ldr	r4, [pc, #48]	@ (800f8c8 <__libc_init_array+0x44>)
 800f898:	f000 f87a 	bl	800f990 <_init>
 800f89c:	1b64      	subs	r4, r4, r5
 800f89e:	10a4      	asrs	r4, r4, #2
 800f8a0:	2600      	movs	r6, #0
 800f8a2:	42a6      	cmp	r6, r4
 800f8a4:	d105      	bne.n	800f8b2 <__libc_init_array+0x2e>
 800f8a6:	bd70      	pop	{r4, r5, r6, pc}
 800f8a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800f8ac:	4798      	blx	r3
 800f8ae:	3601      	adds	r6, #1
 800f8b0:	e7ee      	b.n	800f890 <__libc_init_array+0xc>
 800f8b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800f8b6:	4798      	blx	r3
 800f8b8:	3601      	adds	r6, #1
 800f8ba:	e7f2      	b.n	800f8a2 <__libc_init_array+0x1e>
 800f8bc:	0800fb0c 	.word	0x0800fb0c
 800f8c0:	0800fb0c 	.word	0x0800fb0c
 800f8c4:	0800fb0c 	.word	0x0800fb0c
 800f8c8:	0800fb10 	.word	0x0800fb10

0800f8cc <memcpy>:
 800f8cc:	440a      	add	r2, r1
 800f8ce:	4291      	cmp	r1, r2
 800f8d0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800f8d4:	d100      	bne.n	800f8d8 <memcpy+0xc>
 800f8d6:	4770      	bx	lr
 800f8d8:	b510      	push	{r4, lr}
 800f8da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f8de:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f8e2:	4291      	cmp	r1, r2
 800f8e4:	d1f9      	bne.n	800f8da <memcpy+0xe>
 800f8e6:	bd10      	pop	{r4, pc}

0800f8e8 <fmax>:
 800f8e8:	b508      	push	{r3, lr}
 800f8ea:	ed2d 8b04 	vpush	{d8-d9}
 800f8ee:	eeb0 8a40 	vmov.f32	s16, s0
 800f8f2:	eef0 8a60 	vmov.f32	s17, s1
 800f8f6:	eeb0 9a41 	vmov.f32	s18, s2
 800f8fa:	eef0 9a61 	vmov.f32	s19, s3
 800f8fe:	f000 f81d 	bl	800f93c <__fpclassifyd>
 800f902:	b950      	cbnz	r0, 800f91a <fmax+0x32>
 800f904:	eeb0 8a49 	vmov.f32	s16, s18
 800f908:	eef0 8a69 	vmov.f32	s17, s19
 800f90c:	eeb0 0a48 	vmov.f32	s0, s16
 800f910:	eef0 0a68 	vmov.f32	s1, s17
 800f914:	ecbd 8b04 	vpop	{d8-d9}
 800f918:	bd08      	pop	{r3, pc}
 800f91a:	eeb0 0a49 	vmov.f32	s0, s18
 800f91e:	eef0 0a69 	vmov.f32	s1, s19
 800f922:	f000 f80b 	bl	800f93c <__fpclassifyd>
 800f926:	2800      	cmp	r0, #0
 800f928:	d0f0      	beq.n	800f90c <fmax+0x24>
 800f92a:	ec53 2b19 	vmov	r2, r3, d9
 800f92e:	ec51 0b18 	vmov	r0, r1, d8
 800f932:	f7f1 f899 	bl	8000a68 <__aeabi_dcmpgt>
 800f936:	2800      	cmp	r0, #0
 800f938:	d0e4      	beq.n	800f904 <fmax+0x1c>
 800f93a:	e7e7      	b.n	800f90c <fmax+0x24>

0800f93c <__fpclassifyd>:
 800f93c:	ec51 0b10 	vmov	r0, r1, d0
 800f940:	b510      	push	{r4, lr}
 800f942:	f031 4400 	bics.w	r4, r1, #2147483648	@ 0x80000000
 800f946:	460b      	mov	r3, r1
 800f948:	d019      	beq.n	800f97e <__fpclassifyd+0x42>
 800f94a:	f5a1 1280 	sub.w	r2, r1, #1048576	@ 0x100000
 800f94e:	490e      	ldr	r1, [pc, #56]	@ (800f988 <__fpclassifyd+0x4c>)
 800f950:	428a      	cmp	r2, r1
 800f952:	d90e      	bls.n	800f972 <__fpclassifyd+0x36>
 800f954:	f103 42ff 	add.w	r2, r3, #2139095040	@ 0x7f800000
 800f958:	f502 02e0 	add.w	r2, r2, #7340032	@ 0x700000
 800f95c:	428a      	cmp	r2, r1
 800f95e:	d908      	bls.n	800f972 <__fpclassifyd+0x36>
 800f960:	4a0a      	ldr	r2, [pc, #40]	@ (800f98c <__fpclassifyd+0x50>)
 800f962:	4213      	tst	r3, r2
 800f964:	d007      	beq.n	800f976 <__fpclassifyd+0x3a>
 800f966:	4294      	cmp	r4, r2
 800f968:	d107      	bne.n	800f97a <__fpclassifyd+0x3e>
 800f96a:	fab0 f080 	clz	r0, r0
 800f96e:	0940      	lsrs	r0, r0, #5
 800f970:	bd10      	pop	{r4, pc}
 800f972:	2004      	movs	r0, #4
 800f974:	e7fc      	b.n	800f970 <__fpclassifyd+0x34>
 800f976:	2003      	movs	r0, #3
 800f978:	e7fa      	b.n	800f970 <__fpclassifyd+0x34>
 800f97a:	2000      	movs	r0, #0
 800f97c:	e7f8      	b.n	800f970 <__fpclassifyd+0x34>
 800f97e:	2800      	cmp	r0, #0
 800f980:	d1ee      	bne.n	800f960 <__fpclassifyd+0x24>
 800f982:	2002      	movs	r0, #2
 800f984:	e7f4      	b.n	800f970 <__fpclassifyd+0x34>
 800f986:	bf00      	nop
 800f988:	7fdfffff 	.word	0x7fdfffff
 800f98c:	7ff00000 	.word	0x7ff00000

0800f990 <_init>:
 800f990:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f992:	bf00      	nop
 800f994:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f996:	bc08      	pop	{r3}
 800f998:	469e      	mov	lr, r3
 800f99a:	4770      	bx	lr

0800f99c <_fini>:
 800f99c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f99e:	bf00      	nop
 800f9a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f9a2:	bc08      	pop	{r3}
 800f9a4:	469e      	mov	lr, r3
 800f9a6:	4770      	bx	lr
