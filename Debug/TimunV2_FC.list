
TimunV2_FC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fc5c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  0800fdec  0800fdec  0001fdec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ff6c  0800ff6c  00020150  2**0
                  CONTENTS
  4 .ARM          00000008  0800ff6c  0800ff6c  0001ff6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ff74  0800ff74  00020150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ff74  0800ff74  0001ff74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ff78  0800ff78  0001ff78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000150  20000000  0800ff7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020150  2**0
                  CONTENTS
 10 .bss          000063b4  20000150  20000150  00020150  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20006504  20006504  00020150  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 14 .debug_info   000229c3  00000000  00000000  000201c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00005160  00000000  00000000  00042b86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001d70  00000000  00000000  00047ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000016d1  00000000  00000000  00049a58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00028875  00000000  00000000  0004b129  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00025729  00000000  00000000  0007399e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e7d92  00000000  00000000  000990c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007e38  00000000  00000000  00180e5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  00188c94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000150 	.word	0x20000150
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fdd4 	.word	0x0800fdd4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000154 	.word	0x20000154
 80001cc:	0800fdd4 	.word	0x0800fdd4

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2f>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad4:	bf24      	itt	cs
 8000ad6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ada:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ade:	d90d      	bls.n	8000afc <__aeabi_d2f+0x30>
 8000ae0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af4:	bf08      	it	eq
 8000af6:	f020 0001 	biceq.w	r0, r0, #1
 8000afa:	4770      	bx	lr
 8000afc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b00:	d121      	bne.n	8000b46 <__aeabi_d2f+0x7a>
 8000b02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b06:	bfbc      	itt	lt
 8000b08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	4770      	bxlt	lr
 8000b0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b16:	f1c2 0218 	rsb	r2, r2, #24
 8000b1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b22:	fa20 f002 	lsr.w	r0, r0, r2
 8000b26:	bf18      	it	ne
 8000b28:	f040 0001 	orrne.w	r0, r0, #1
 8000b2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b38:	ea40 000c 	orr.w	r0, r0, ip
 8000b3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b44:	e7cc      	b.n	8000ae0 <__aeabi_d2f+0x14>
 8000b46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b4a:	d107      	bne.n	8000b5c <__aeabi_d2f+0x90>
 8000b4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b50:	bf1e      	ittt	ne
 8000b52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b5a:	4770      	bxne	lr
 8000b5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b80:	f000 b970 	b.w	8000e64 <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f806 	bl	8000b9c <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba0:	9e08      	ldr	r6, [sp, #32]
 8000ba2:	460d      	mov	r5, r1
 8000ba4:	4604      	mov	r4, r0
 8000ba6:	460f      	mov	r7, r1
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d14a      	bne.n	8000c42 <__udivmoddi4+0xa6>
 8000bac:	428a      	cmp	r2, r1
 8000bae:	4694      	mov	ip, r2
 8000bb0:	d965      	bls.n	8000c7e <__udivmoddi4+0xe2>
 8000bb2:	fab2 f382 	clz	r3, r2
 8000bb6:	b143      	cbz	r3, 8000bca <__udivmoddi4+0x2e>
 8000bb8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bbc:	f1c3 0220 	rsb	r2, r3, #32
 8000bc0:	409f      	lsls	r7, r3
 8000bc2:	fa20 f202 	lsr.w	r2, r0, r2
 8000bc6:	4317      	orrs	r7, r2
 8000bc8:	409c      	lsls	r4, r3
 8000bca:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bce:	fa1f f58c 	uxth.w	r5, ip
 8000bd2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bd6:	0c22      	lsrs	r2, r4, #16
 8000bd8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bdc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000be0:	fb01 f005 	mul.w	r0, r1, r5
 8000be4:	4290      	cmp	r0, r2
 8000be6:	d90a      	bls.n	8000bfe <__udivmoddi4+0x62>
 8000be8:	eb1c 0202 	adds.w	r2, ip, r2
 8000bec:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000bf0:	f080 811c 	bcs.w	8000e2c <__udivmoddi4+0x290>
 8000bf4:	4290      	cmp	r0, r2
 8000bf6:	f240 8119 	bls.w	8000e2c <__udivmoddi4+0x290>
 8000bfa:	3902      	subs	r1, #2
 8000bfc:	4462      	add	r2, ip
 8000bfe:	1a12      	subs	r2, r2, r0
 8000c00:	b2a4      	uxth	r4, r4
 8000c02:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c06:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c0a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c0e:	fb00 f505 	mul.w	r5, r0, r5
 8000c12:	42a5      	cmp	r5, r4
 8000c14:	d90a      	bls.n	8000c2c <__udivmoddi4+0x90>
 8000c16:	eb1c 0404 	adds.w	r4, ip, r4
 8000c1a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c1e:	f080 8107 	bcs.w	8000e30 <__udivmoddi4+0x294>
 8000c22:	42a5      	cmp	r5, r4
 8000c24:	f240 8104 	bls.w	8000e30 <__udivmoddi4+0x294>
 8000c28:	4464      	add	r4, ip
 8000c2a:	3802      	subs	r0, #2
 8000c2c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c30:	1b64      	subs	r4, r4, r5
 8000c32:	2100      	movs	r1, #0
 8000c34:	b11e      	cbz	r6, 8000c3e <__udivmoddi4+0xa2>
 8000c36:	40dc      	lsrs	r4, r3
 8000c38:	2300      	movs	r3, #0
 8000c3a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	428b      	cmp	r3, r1
 8000c44:	d908      	bls.n	8000c58 <__udivmoddi4+0xbc>
 8000c46:	2e00      	cmp	r6, #0
 8000c48:	f000 80ed 	beq.w	8000e26 <__udivmoddi4+0x28a>
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c52:	4608      	mov	r0, r1
 8000c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c58:	fab3 f183 	clz	r1, r3
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	d149      	bne.n	8000cf4 <__udivmoddi4+0x158>
 8000c60:	42ab      	cmp	r3, r5
 8000c62:	d302      	bcc.n	8000c6a <__udivmoddi4+0xce>
 8000c64:	4282      	cmp	r2, r0
 8000c66:	f200 80f8 	bhi.w	8000e5a <__udivmoddi4+0x2be>
 8000c6a:	1a84      	subs	r4, r0, r2
 8000c6c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c70:	2001      	movs	r0, #1
 8000c72:	4617      	mov	r7, r2
 8000c74:	2e00      	cmp	r6, #0
 8000c76:	d0e2      	beq.n	8000c3e <__udivmoddi4+0xa2>
 8000c78:	e9c6 4700 	strd	r4, r7, [r6]
 8000c7c:	e7df      	b.n	8000c3e <__udivmoddi4+0xa2>
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xe6>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f382 	clz	r3, r2
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	f040 8090 	bne.w	8000dac <__udivmoddi4+0x210>
 8000c8c:	1a8a      	subs	r2, r1, r2
 8000c8e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c92:	fa1f fe8c 	uxth.w	lr, ip
 8000c96:	2101      	movs	r1, #1
 8000c98:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c9c:	fb07 2015 	mls	r0, r7, r5, r2
 8000ca0:	0c22      	lsrs	r2, r4, #16
 8000ca2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ca6:	fb0e f005 	mul.w	r0, lr, r5
 8000caa:	4290      	cmp	r0, r2
 8000cac:	d908      	bls.n	8000cc0 <__udivmoddi4+0x124>
 8000cae:	eb1c 0202 	adds.w	r2, ip, r2
 8000cb2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000cb6:	d202      	bcs.n	8000cbe <__udivmoddi4+0x122>
 8000cb8:	4290      	cmp	r0, r2
 8000cba:	f200 80cb 	bhi.w	8000e54 <__udivmoddi4+0x2b8>
 8000cbe:	4645      	mov	r5, r8
 8000cc0:	1a12      	subs	r2, r2, r0
 8000cc2:	b2a4      	uxth	r4, r4
 8000cc4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cc8:	fb07 2210 	mls	r2, r7, r0, r2
 8000ccc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cd0:	fb0e fe00 	mul.w	lr, lr, r0
 8000cd4:	45a6      	cmp	lr, r4
 8000cd6:	d908      	bls.n	8000cea <__udivmoddi4+0x14e>
 8000cd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cdc:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000ce0:	d202      	bcs.n	8000ce8 <__udivmoddi4+0x14c>
 8000ce2:	45a6      	cmp	lr, r4
 8000ce4:	f200 80bb 	bhi.w	8000e5e <__udivmoddi4+0x2c2>
 8000ce8:	4610      	mov	r0, r2
 8000cea:	eba4 040e 	sub.w	r4, r4, lr
 8000cee:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cf2:	e79f      	b.n	8000c34 <__udivmoddi4+0x98>
 8000cf4:	f1c1 0720 	rsb	r7, r1, #32
 8000cf8:	408b      	lsls	r3, r1
 8000cfa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cfe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d02:	fa05 f401 	lsl.w	r4, r5, r1
 8000d06:	fa20 f307 	lsr.w	r3, r0, r7
 8000d0a:	40fd      	lsrs	r5, r7
 8000d0c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d10:	4323      	orrs	r3, r4
 8000d12:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d1e:	0c1c      	lsrs	r4, r3, #16
 8000d20:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d24:	fb08 f50e 	mul.w	r5, r8, lr
 8000d28:	42a5      	cmp	r5, r4
 8000d2a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d2e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d32:	d90b      	bls.n	8000d4c <__udivmoddi4+0x1b0>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d3c:	f080 8088 	bcs.w	8000e50 <__udivmoddi4+0x2b4>
 8000d40:	42a5      	cmp	r5, r4
 8000d42:	f240 8085 	bls.w	8000e50 <__udivmoddi4+0x2b4>
 8000d46:	f1a8 0802 	sub.w	r8, r8, #2
 8000d4a:	4464      	add	r4, ip
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	b29d      	uxth	r5, r3
 8000d50:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d54:	fb09 4413 	mls	r4, r9, r3, r4
 8000d58:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d5c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x1da>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000d6c:	d26c      	bcs.n	8000e48 <__udivmoddi4+0x2ac>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	d96a      	bls.n	8000e48 <__udivmoddi4+0x2ac>
 8000d72:	3b02      	subs	r3, #2
 8000d74:	4464      	add	r4, ip
 8000d76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d7a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	42ac      	cmp	r4, r5
 8000d84:	46c8      	mov	r8, r9
 8000d86:	46ae      	mov	lr, r5
 8000d88:	d356      	bcc.n	8000e38 <__udivmoddi4+0x29c>
 8000d8a:	d053      	beq.n	8000e34 <__udivmoddi4+0x298>
 8000d8c:	b156      	cbz	r6, 8000da4 <__udivmoddi4+0x208>
 8000d8e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d92:	eb64 040e 	sbc.w	r4, r4, lr
 8000d96:	fa04 f707 	lsl.w	r7, r4, r7
 8000d9a:	40ca      	lsrs	r2, r1
 8000d9c:	40cc      	lsrs	r4, r1
 8000d9e:	4317      	orrs	r7, r2
 8000da0:	e9c6 7400 	strd	r7, r4, [r6]
 8000da4:	4618      	mov	r0, r3
 8000da6:	2100      	movs	r1, #0
 8000da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dac:	f1c3 0120 	rsb	r1, r3, #32
 8000db0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000db4:	fa20 f201 	lsr.w	r2, r0, r1
 8000db8:	fa25 f101 	lsr.w	r1, r5, r1
 8000dbc:	409d      	lsls	r5, r3
 8000dbe:	432a      	orrs	r2, r5
 8000dc0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc4:	fa1f fe8c 	uxth.w	lr, ip
 8000dc8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dcc:	fb07 1510 	mls	r5, r7, r0, r1
 8000dd0:	0c11      	lsrs	r1, r2, #16
 8000dd2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dd6:	fb00 f50e 	mul.w	r5, r0, lr
 8000dda:	428d      	cmp	r5, r1
 8000ddc:	fa04 f403 	lsl.w	r4, r4, r3
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x258>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000dea:	d22f      	bcs.n	8000e4c <__udivmoddi4+0x2b0>
 8000dec:	428d      	cmp	r5, r1
 8000dee:	d92d      	bls.n	8000e4c <__udivmoddi4+0x2b0>
 8000df0:	3802      	subs	r0, #2
 8000df2:	4461      	add	r1, ip
 8000df4:	1b49      	subs	r1, r1, r5
 8000df6:	b292      	uxth	r2, r2
 8000df8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000dfc:	fb07 1115 	mls	r1, r7, r5, r1
 8000e00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e04:	fb05 f10e 	mul.w	r1, r5, lr
 8000e08:	4291      	cmp	r1, r2
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x282>
 8000e0c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e10:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e14:	d216      	bcs.n	8000e44 <__udivmoddi4+0x2a8>
 8000e16:	4291      	cmp	r1, r2
 8000e18:	d914      	bls.n	8000e44 <__udivmoddi4+0x2a8>
 8000e1a:	3d02      	subs	r5, #2
 8000e1c:	4462      	add	r2, ip
 8000e1e:	1a52      	subs	r2, r2, r1
 8000e20:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e24:	e738      	b.n	8000c98 <__udivmoddi4+0xfc>
 8000e26:	4631      	mov	r1, r6
 8000e28:	4630      	mov	r0, r6
 8000e2a:	e708      	b.n	8000c3e <__udivmoddi4+0xa2>
 8000e2c:	4639      	mov	r1, r7
 8000e2e:	e6e6      	b.n	8000bfe <__udivmoddi4+0x62>
 8000e30:	4610      	mov	r0, r2
 8000e32:	e6fb      	b.n	8000c2c <__udivmoddi4+0x90>
 8000e34:	4548      	cmp	r0, r9
 8000e36:	d2a9      	bcs.n	8000d8c <__udivmoddi4+0x1f0>
 8000e38:	ebb9 0802 	subs.w	r8, r9, r2
 8000e3c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e40:	3b01      	subs	r3, #1
 8000e42:	e7a3      	b.n	8000d8c <__udivmoddi4+0x1f0>
 8000e44:	4645      	mov	r5, r8
 8000e46:	e7ea      	b.n	8000e1e <__udivmoddi4+0x282>
 8000e48:	462b      	mov	r3, r5
 8000e4a:	e794      	b.n	8000d76 <__udivmoddi4+0x1da>
 8000e4c:	4640      	mov	r0, r8
 8000e4e:	e7d1      	b.n	8000df4 <__udivmoddi4+0x258>
 8000e50:	46d0      	mov	r8, sl
 8000e52:	e77b      	b.n	8000d4c <__udivmoddi4+0x1b0>
 8000e54:	3d02      	subs	r5, #2
 8000e56:	4462      	add	r2, ip
 8000e58:	e732      	b.n	8000cc0 <__udivmoddi4+0x124>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e70a      	b.n	8000c74 <__udivmoddi4+0xd8>
 8000e5e:	4464      	add	r4, ip
 8000e60:	3802      	subs	r0, #2
 8000e62:	e742      	b.n	8000cea <__udivmoddi4+0x14e>

08000e64 <__aeabi_idiv0>:
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop

08000e68 <bit16ToInt>:
void intTo16Bit(int num, int ind, uint8_t* buffer) {
  buffer[ind] = (num >> 8) & 0xFF;  // Byte pertama
  buffer[ind+1] = num & 0xFF;         // Byte kedua
}

int bit16ToInt(int ind, uint8_t* buffer) {
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
  int num = ((int) buffer[ind] << 8) | (int) buffer[ind+1];
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	683a      	ldr	r2, [r7, #0]
 8000e76:	4413      	add	r3, r2
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	021b      	lsls	r3, r3, #8
 8000e7c:	687a      	ldr	r2, [r7, #4]
 8000e7e:	3201      	adds	r2, #1
 8000e80:	6839      	ldr	r1, [r7, #0]
 8000e82:	440a      	add	r2, r1
 8000e84:	7812      	ldrb	r2, [r2, #0]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	60fb      	str	r3, [r7, #12]
  if (num > 32767) {
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e90:	db03      	blt.n	8000e9a <bit16ToInt+0x32>
    num -= 65536;
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8000e98:	60fb      	str	r3, [r7, #12]
  }
  return num;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3714      	adds	r7, #20
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <merge16>:

void merge16(int16_t *values, uint8_t *merged_data, size_t num_values) {
 8000ea8:	b480      	push	{r7}
 8000eaa:	b087      	sub	sp, #28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
    for (size_t i = 0; i < num_values; i++) {
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]
 8000eb8:	e01d      	b.n	8000ef6 <merge16+0x4e>
        merged_data[i * 2] = (uint8_t)(values[i] & 0xFF);
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	68fa      	ldr	r2, [r7, #12]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	68ba      	ldr	r2, [r7, #8]
 8000ecc:	4413      	add	r3, r2
 8000ece:	b2ca      	uxtb	r2, r1
 8000ed0:	701a      	strb	r2, [r3, #0]
        merged_data[i * 2 + 1] = (uint8_t)((values[i] >> 8) & 0xFF);
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	68fa      	ldr	r2, [r7, #12]
 8000ed8:	4413      	add	r3, r2
 8000eda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ede:	121b      	asrs	r3, r3, #8
 8000ee0:	b219      	sxth	r1, r3
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	68ba      	ldr	r2, [r7, #8]
 8000eea:	4413      	add	r3, r2
 8000eec:	b2ca      	uxtb	r2, r1
 8000eee:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < num_values; i++) {
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	617b      	str	r3, [r7, #20]
 8000ef6:	697a      	ldr	r2, [r7, #20]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d3dd      	bcc.n	8000eba <merge16+0x12>
    }
}
 8000efe:	bf00      	nop
 8000f00:	bf00      	nop
 8000f02:	371c      	adds	r7, #28
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <Set_LED>:
uint8_t LED_Data[MAX_LED][4];
uint8_t LED_Mod[MAX_LED][4];
uint16_t pwmData[(24 * MAX_LED) + 50];

// Function definitions
void Set_LED(int LEDnum, int Red, int Green, int Blue) {
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
 8000f18:	603b      	str	r3, [r7, #0]
    LED_Data[LEDnum][0] = LEDnum;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	b2d9      	uxtb	r1, r3
 8000f1e:	4a11      	ldr	r2, [pc, #68]	; (8000f64 <Set_LED+0x58>)
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
    LED_Data[LEDnum][1] = Green;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	b2d9      	uxtb	r1, r3
 8000f2a:	4a0e      	ldr	r2, [pc, #56]	; (8000f64 <Set_LED+0x58>)
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	4413      	add	r3, r2
 8000f32:	460a      	mov	r2, r1
 8000f34:	705a      	strb	r2, [r3, #1]
    LED_Data[LEDnum][2] = Red;
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	b2d9      	uxtb	r1, r3
 8000f3a:	4a0a      	ldr	r2, [pc, #40]	; (8000f64 <Set_LED+0x58>)
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	4413      	add	r3, r2
 8000f42:	460a      	mov	r2, r1
 8000f44:	709a      	strb	r2, [r3, #2]
    LED_Data[LEDnum][3] = Blue;
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	b2d9      	uxtb	r1, r3
 8000f4a:	4a06      	ldr	r2, [pc, #24]	; (8000f64 <Set_LED+0x58>)
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	4413      	add	r3, r2
 8000f52:	460a      	mov	r2, r1
 8000f54:	70da      	strb	r2, [r3, #3]
}
 8000f56:	bf00      	nop
 8000f58:	3714      	adds	r7, #20
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	2000016c 	.word	0x2000016c

08000f68 <WS2812_Send>:
        }
    }
#endif
}

void WS2812_Send(TIM_HandleTypeDef *htim, uint32_t channel, int timer_arr) {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08c      	sub	sp, #48	; 0x30
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
    uint32_t indx = 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t color;
    float twothird = (2.0 / 3.0) * timer_arr;
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f7ff fa7b 	bl	8000474 <__aeabi_i2d>
 8000f7e:	a344      	add	r3, pc, #272	; (adr r3, 8001090 <WS2812_Send+0x128>)
 8000f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f84:	f7ff fae0 	bl	8000548 <__aeabi_dmul>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	4610      	mov	r0, r2
 8000f8e:	4619      	mov	r1, r3
 8000f90:	f7ff fd9c 	bl	8000acc <__aeabi_d2f>
 8000f94:	4603      	mov	r3, r0
 8000f96:	61fb      	str	r3, [r7, #28]
    float onethird = (1.0 / 3.0) * timer_arr;
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f7ff fa6b 	bl	8000474 <__aeabi_i2d>
 8000f9e:	a33e      	add	r3, pc, #248	; (adr r3, 8001098 <WS2812_Send+0x130>)
 8000fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa4:	f7ff fad0 	bl	8000548 <__aeabi_dmul>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	460b      	mov	r3, r1
 8000fac:	4610      	mov	r0, r2
 8000fae:	4619      	mov	r1, r3
 8000fb0:	f7ff fd8c 	bl	8000acc <__aeabi_d2f>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	61bb      	str	r3, [r7, #24]

    for (int i = 0; i < MAX_LED; i++) {
 8000fb8:	2300      	movs	r3, #0
 8000fba:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fbc:	e042      	b.n	8001044 <WS2812_Send+0xdc>
#if USE_BRIGHTNESS
        color = ((LED_Mod[i][1] << 16) | (LED_Mod[i][2] << 8) | (LED_Mod[i][3]));
#else
        color = ((LED_Data[i][1] << 16) | (LED_Data[i][2] << 8) | (LED_Data[i][3]));
 8000fbe:	4a32      	ldr	r2, [pc, #200]	; (8001088 <WS2812_Send+0x120>)
 8000fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	4413      	add	r3, r2
 8000fc6:	785b      	ldrb	r3, [r3, #1]
 8000fc8:	041a      	lsls	r2, r3, #16
 8000fca:	492f      	ldr	r1, [pc, #188]	; (8001088 <WS2812_Send+0x120>)
 8000fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	440b      	add	r3, r1
 8000fd2:	789b      	ldrb	r3, [r3, #2]
 8000fd4:	021b      	lsls	r3, r3, #8
 8000fd6:	431a      	orrs	r2, r3
 8000fd8:	492b      	ldr	r1, [pc, #172]	; (8001088 <WS2812_Send+0x120>)
 8000fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	440b      	add	r3, r1
 8000fe0:	78db      	ldrb	r3, [r3, #3]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	617b      	str	r3, [r7, #20]
#endif

        for (int i = 23; i >= 0; i--) {
 8000fe6:	2317      	movs	r3, #23
 8000fe8:	627b      	str	r3, [r7, #36]	; 0x24
 8000fea:	e025      	b.n	8001038 <WS2812_Send+0xd0>
            if (color & (1 << i)) {
 8000fec:	2201      	movs	r2, #1
 8000fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d00b      	beq.n	8001016 <WS2812_Send+0xae>
                pwmData[indx] = (uint16_t)twothird;  // 2/3 of arr
 8000ffe:	edd7 7a07 	vldr	s15, [r7, #28]
 8001002:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001006:	ee17 3a90 	vmov	r3, s15
 800100a:	b299      	uxth	r1, r3
 800100c:	4a1f      	ldr	r2, [pc, #124]	; (800108c <WS2812_Send+0x124>)
 800100e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001010:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001014:	e00a      	b.n	800102c <WS2812_Send+0xc4>
            } else {
                pwmData[indx] = (uint16_t)onethird;  // 1/3 of arr
 8001016:	edd7 7a06 	vldr	s15, [r7, #24]
 800101a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800101e:	ee17 3a90 	vmov	r3, s15
 8001022:	b299      	uxth	r1, r3
 8001024:	4a19      	ldr	r2, [pc, #100]	; (800108c <WS2812_Send+0x124>)
 8001026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001028:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            }
            indx++;
 800102c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800102e:	3301      	adds	r3, #1
 8001030:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (int i = 23; i >= 0; i--) {
 8001032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001034:	3b01      	subs	r3, #1
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
 8001038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103a:	2b00      	cmp	r3, #0
 800103c:	dad6      	bge.n	8000fec <WS2812_Send+0x84>
    for (int i = 0; i < MAX_LED; i++) {
 800103e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001040:	3301      	adds	r3, #1
 8001042:	62bb      	str	r3, [r7, #40]	; 0x28
 8001044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001046:	2b0a      	cmp	r3, #10
 8001048:	ddb9      	ble.n	8000fbe <WS2812_Send+0x56>
        }
    }

    for (int i = 0; i < 50; i++) {
 800104a:	2300      	movs	r3, #0
 800104c:	623b      	str	r3, [r7, #32]
 800104e:	e00a      	b.n	8001066 <WS2812_Send+0xfe>
        pwmData[indx] = 0;
 8001050:	4a0e      	ldr	r2, [pc, #56]	; (800108c <WS2812_Send+0x124>)
 8001052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001054:	2100      	movs	r1, #0
 8001056:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        indx++;
 800105a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800105c:	3301      	adds	r3, #1
 800105e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (int i = 0; i < 50; i++) {
 8001060:	6a3b      	ldr	r3, [r7, #32]
 8001062:	3301      	adds	r3, #1
 8001064:	623b      	str	r3, [r7, #32]
 8001066:	6a3b      	ldr	r3, [r7, #32]
 8001068:	2b31      	cmp	r3, #49	; 0x31
 800106a:	ddf1      	ble.n	8001050 <WS2812_Send+0xe8>
    }

    HAL_TIM_PWM_Start_DMA(htim, channel, (uint32_t *)pwmData, indx);
 800106c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800106e:	b29b      	uxth	r3, r3
 8001070:	4a06      	ldr	r2, [pc, #24]	; (800108c <WS2812_Send+0x124>)
 8001072:	68b9      	ldr	r1, [r7, #8]
 8001074:	68f8      	ldr	r0, [r7, #12]
 8001076:	f007 fb7b 	bl	8008770 <HAL_TIM_PWM_Start_DMA>
}
 800107a:	bf00      	nop
 800107c:	3730      	adds	r7, #48	; 0x30
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	f3af 8000 	nop.w
 8001088:	2000016c 	.word	0x2000016c
 800108c:	20000198 	.word	0x20000198
 8001090:	55555555 	.word	0x55555555
 8001094:	3fe55555 	.word	0x3fe55555
 8001098:	55555555 	.word	0x55555555
 800109c:	3fd55555 	.word	0x3fd55555

080010a0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	4a07      	ldr	r2, [pc, #28]	; (80010cc <vApplicationGetIdleTaskMemory+0x2c>)
 80010b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	4a06      	ldr	r2, [pc, #24]	; (80010d0 <vApplicationGetIdleTaskMemory+0x30>)
 80010b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2280      	movs	r2, #128	; 0x80
 80010bc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80010be:	bf00      	nop
 80010c0:	3714      	adds	r7, #20
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	2000040c 	.word	0x2000040c
 80010d0:	20000460 	.word	0x20000460

080010d4 <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
//	HAL_UART_Receive_IT(&huart2, atmega_buffer, 1);
	if (huart->Instance == USART2) {
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a78      	ldr	r2, [pc, #480]	; (80012c4 <HAL_UART_RxCpltCallback+0x1f0>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	f040 80e9 	bne.w	80012ba <HAL_UART_RxCpltCallback+0x1e6>
		if (atmega_buffer[0] == 0xAA && status_rx_atmega == 0) {
 80010e8:	4b77      	ldr	r3, [pc, #476]	; (80012c8 <HAL_UART_RxCpltCallback+0x1f4>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2baa      	cmp	r3, #170	; 0xaa
 80010ee:	d10d      	bne.n	800110c <HAL_UART_RxCpltCallback+0x38>
 80010f0:	4b76      	ldr	r3, [pc, #472]	; (80012cc <HAL_UART_RxCpltCallback+0x1f8>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d109      	bne.n	800110c <HAL_UART_RxCpltCallback+0x38>
			status_rx_atmega = 1;
 80010f8:	4b74      	ldr	r3, [pc, #464]	; (80012cc <HAL_UART_RxCpltCallback+0x1f8>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart2, atmega_buffer + 1, 1);
 80010fe:	4b74      	ldr	r3, [pc, #464]	; (80012d0 <HAL_UART_RxCpltCallback+0x1fc>)
 8001100:	2201      	movs	r2, #1
 8001102:	4619      	mov	r1, r3
 8001104:	4873      	ldr	r0, [pc, #460]	; (80012d4 <HAL_UART_RxCpltCallback+0x200>)
 8001106:	f008 fbe5 	bl	80098d4 <HAL_UART_Receive_IT>
 800110a:	e0d6      	b.n	80012ba <HAL_UART_RxCpltCallback+0x1e6>
		} else if (atmega_buffer[1] == 0xBB && status_rx_atmega == 1){
 800110c:	4b6e      	ldr	r3, [pc, #440]	; (80012c8 <HAL_UART_RxCpltCallback+0x1f4>)
 800110e:	785b      	ldrb	r3, [r3, #1]
 8001110:	2bbb      	cmp	r3, #187	; 0xbb
 8001112:	d10d      	bne.n	8001130 <HAL_UART_RxCpltCallback+0x5c>
 8001114:	4b6d      	ldr	r3, [pc, #436]	; (80012cc <HAL_UART_RxCpltCallback+0x1f8>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2b01      	cmp	r3, #1
 800111a:	d109      	bne.n	8001130 <HAL_UART_RxCpltCallback+0x5c>
			status_rx_atmega = 2;
 800111c:	4b6b      	ldr	r3, [pc, #428]	; (80012cc <HAL_UART_RxCpltCallback+0x1f8>)
 800111e:	2202      	movs	r2, #2
 8001120:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart2, atmega_buffer + 2, 11);
 8001122:	4b6d      	ldr	r3, [pc, #436]	; (80012d8 <HAL_UART_RxCpltCallback+0x204>)
 8001124:	220b      	movs	r2, #11
 8001126:	4619      	mov	r1, r3
 8001128:	486a      	ldr	r0, [pc, #424]	; (80012d4 <HAL_UART_RxCpltCallback+0x200>)
 800112a:	f008 fbd3 	bl	80098d4 <HAL_UART_Receive_IT>
 800112e:	e0c4      	b.n	80012ba <HAL_UART_RxCpltCallback+0x1e6>
		} else if ( status_rx_atmega == 2) {
 8001130:	4b66      	ldr	r3, [pc, #408]	; (80012cc <HAL_UART_RxCpltCallback+0x1f8>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b02      	cmp	r3, #2
 8001136:	f040 80b7 	bne.w	80012a8 <HAL_UART_RxCpltCallback+0x1d4>
			raw_bno055_yaw = (atmega_buffer[4] << 16) | (atmega_buffer[3] << 8) | atmega_buffer[2];
 800113a:	4b63      	ldr	r3, [pc, #396]	; (80012c8 <HAL_UART_RxCpltCallback+0x1f4>)
 800113c:	791b      	ldrb	r3, [r3, #4]
 800113e:	041a      	lsls	r2, r3, #16
 8001140:	4b61      	ldr	r3, [pc, #388]	; (80012c8 <HAL_UART_RxCpltCallback+0x1f4>)
 8001142:	78db      	ldrb	r3, [r3, #3]
 8001144:	021b      	lsls	r3, r3, #8
 8001146:	4313      	orrs	r3, r2
 8001148:	4a5f      	ldr	r2, [pc, #380]	; (80012c8 <HAL_UART_RxCpltCallback+0x1f4>)
 800114a:	7892      	ldrb	r2, [r2, #2]
 800114c:	4313      	orrs	r3, r2
 800114e:	4a63      	ldr	r2, [pc, #396]	; (80012dc <HAL_UART_RxCpltCallback+0x208>)
 8001150:	6013      	str	r3, [r2, #0]
			raw_bno055_pitch = (atmega_buffer[7] << 16) | (atmega_buffer[6] << 8) | atmega_buffer[5];
 8001152:	4b5d      	ldr	r3, [pc, #372]	; (80012c8 <HAL_UART_RxCpltCallback+0x1f4>)
 8001154:	79db      	ldrb	r3, [r3, #7]
 8001156:	041a      	lsls	r2, r3, #16
 8001158:	4b5b      	ldr	r3, [pc, #364]	; (80012c8 <HAL_UART_RxCpltCallback+0x1f4>)
 800115a:	799b      	ldrb	r3, [r3, #6]
 800115c:	021b      	lsls	r3, r3, #8
 800115e:	4313      	orrs	r3, r2
 8001160:	4a59      	ldr	r2, [pc, #356]	; (80012c8 <HAL_UART_RxCpltCallback+0x1f4>)
 8001162:	7952      	ldrb	r2, [r2, #5]
 8001164:	4313      	orrs	r3, r2
 8001166:	4a5e      	ldr	r2, [pc, #376]	; (80012e0 <HAL_UART_RxCpltCallback+0x20c>)
 8001168:	6013      	str	r3, [r2, #0]
			raw_bno055_roll = (atmega_buffer[10] << 16) | (atmega_buffer[9] << 8) | atmega_buffer[8];
 800116a:	4b57      	ldr	r3, [pc, #348]	; (80012c8 <HAL_UART_RxCpltCallback+0x1f4>)
 800116c:	7a9b      	ldrb	r3, [r3, #10]
 800116e:	041a      	lsls	r2, r3, #16
 8001170:	4b55      	ldr	r3, [pc, #340]	; (80012c8 <HAL_UART_RxCpltCallback+0x1f4>)
 8001172:	7a5b      	ldrb	r3, [r3, #9]
 8001174:	021b      	lsls	r3, r3, #8
 8001176:	4313      	orrs	r3, r2
 8001178:	4a53      	ldr	r2, [pc, #332]	; (80012c8 <HAL_UART_RxCpltCallback+0x1f4>)
 800117a:	7a12      	ldrb	r2, [r2, #8]
 800117c:	4313      	orrs	r3, r2
 800117e:	4a59      	ldr	r2, [pc, #356]	; (80012e4 <HAL_UART_RxCpltCallback+0x210>)
 8001180:	6013      	str	r3, [r2, #0]

			if (raw_bno055_yaw > 8388607) {
 8001182:	4b56      	ldr	r3, [pc, #344]	; (80012dc <HAL_UART_RxCpltCallback+0x208>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800118a:	db15      	blt.n	80011b8 <HAL_UART_RxCpltCallback+0xe4>
				bno055_yaw = ((raw_bno055_yaw - 16777216) / 100.0);
 800118c:	4b53      	ldr	r3, [pc, #332]	; (80012dc <HAL_UART_RxCpltCallback+0x208>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff f96d 	bl	8000474 <__aeabi_i2d>
 800119a:	f04f 0200 	mov.w	r2, #0
 800119e:	4b52      	ldr	r3, [pc, #328]	; (80012e8 <HAL_UART_RxCpltCallback+0x214>)
 80011a0:	f7ff fafc 	bl	800079c <__aeabi_ddiv>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4610      	mov	r0, r2
 80011aa:	4619      	mov	r1, r3
 80011ac:	f7ff fc8e 	bl	8000acc <__aeabi_d2f>
 80011b0:	4603      	mov	r3, r0
 80011b2:	4a4e      	ldr	r2, [pc, #312]	; (80012ec <HAL_UART_RxCpltCallback+0x218>)
 80011b4:	6013      	str	r3, [r2, #0]
 80011b6:	e012      	b.n	80011de <HAL_UART_RxCpltCallback+0x10a>
			} else {
				bno055_yaw = (raw_bno055_yaw / 100.0);
 80011b8:	4b48      	ldr	r3, [pc, #288]	; (80012dc <HAL_UART_RxCpltCallback+0x208>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff f959 	bl	8000474 <__aeabi_i2d>
 80011c2:	f04f 0200 	mov.w	r2, #0
 80011c6:	4b48      	ldr	r3, [pc, #288]	; (80012e8 <HAL_UART_RxCpltCallback+0x214>)
 80011c8:	f7ff fae8 	bl	800079c <__aeabi_ddiv>
 80011cc:	4602      	mov	r2, r0
 80011ce:	460b      	mov	r3, r1
 80011d0:	4610      	mov	r0, r2
 80011d2:	4619      	mov	r1, r3
 80011d4:	f7ff fc7a 	bl	8000acc <__aeabi_d2f>
 80011d8:	4603      	mov	r3, r0
 80011da:	4a44      	ldr	r2, [pc, #272]	; (80012ec <HAL_UART_RxCpltCallback+0x218>)
 80011dc:	6013      	str	r3, [r2, #0]
			}

			if (raw_bno055_pitch > 8388607) {
 80011de:	4b40      	ldr	r3, [pc, #256]	; (80012e0 <HAL_UART_RxCpltCallback+0x20c>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80011e6:	db15      	blt.n	8001214 <HAL_UART_RxCpltCallback+0x140>
				bno055_pitch = ((raw_bno055_pitch - 16777216) / 100.0);
 80011e8:	4b3d      	ldr	r3, [pc, #244]	; (80012e0 <HAL_UART_RxCpltCallback+0x20c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff f93f 	bl	8000474 <__aeabi_i2d>
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	4b3b      	ldr	r3, [pc, #236]	; (80012e8 <HAL_UART_RxCpltCallback+0x214>)
 80011fc:	f7ff face 	bl	800079c <__aeabi_ddiv>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	4610      	mov	r0, r2
 8001206:	4619      	mov	r1, r3
 8001208:	f7ff fc60 	bl	8000acc <__aeabi_d2f>
 800120c:	4603      	mov	r3, r0
 800120e:	4a38      	ldr	r2, [pc, #224]	; (80012f0 <HAL_UART_RxCpltCallback+0x21c>)
 8001210:	6013      	str	r3, [r2, #0]
 8001212:	e012      	b.n	800123a <HAL_UART_RxCpltCallback+0x166>
			} else {
				bno055_pitch = (raw_bno055_pitch / 100.0);
 8001214:	4b32      	ldr	r3, [pc, #200]	; (80012e0 <HAL_UART_RxCpltCallback+0x20c>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff f92b 	bl	8000474 <__aeabi_i2d>
 800121e:	f04f 0200 	mov.w	r2, #0
 8001222:	4b31      	ldr	r3, [pc, #196]	; (80012e8 <HAL_UART_RxCpltCallback+0x214>)
 8001224:	f7ff faba 	bl	800079c <__aeabi_ddiv>
 8001228:	4602      	mov	r2, r0
 800122a:	460b      	mov	r3, r1
 800122c:	4610      	mov	r0, r2
 800122e:	4619      	mov	r1, r3
 8001230:	f7ff fc4c 	bl	8000acc <__aeabi_d2f>
 8001234:	4603      	mov	r3, r0
 8001236:	4a2e      	ldr	r2, [pc, #184]	; (80012f0 <HAL_UART_RxCpltCallback+0x21c>)
 8001238:	6013      	str	r3, [r2, #0]
			}

			if (raw_bno055_roll > 8388607) {
 800123a:	4b2a      	ldr	r3, [pc, #168]	; (80012e4 <HAL_UART_RxCpltCallback+0x210>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001242:	db15      	blt.n	8001270 <HAL_UART_RxCpltCallback+0x19c>
				bno055_roll = ((raw_bno055_roll - 16777216) / 100.0);
 8001244:	4b27      	ldr	r3, [pc, #156]	; (80012e4 <HAL_UART_RxCpltCallback+0x210>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff f911 	bl	8000474 <__aeabi_i2d>
 8001252:	f04f 0200 	mov.w	r2, #0
 8001256:	4b24      	ldr	r3, [pc, #144]	; (80012e8 <HAL_UART_RxCpltCallback+0x214>)
 8001258:	f7ff faa0 	bl	800079c <__aeabi_ddiv>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4610      	mov	r0, r2
 8001262:	4619      	mov	r1, r3
 8001264:	f7ff fc32 	bl	8000acc <__aeabi_d2f>
 8001268:	4603      	mov	r3, r0
 800126a:	4a22      	ldr	r2, [pc, #136]	; (80012f4 <HAL_UART_RxCpltCallback+0x220>)
 800126c:	6013      	str	r3, [r2, #0]
 800126e:	e012      	b.n	8001296 <HAL_UART_RxCpltCallback+0x1c2>
			} else {
				bno055_roll = (raw_bno055_roll / 100.0);
 8001270:	4b1c      	ldr	r3, [pc, #112]	; (80012e4 <HAL_UART_RxCpltCallback+0x210>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff f8fd 	bl	8000474 <__aeabi_i2d>
 800127a:	f04f 0200 	mov.w	r2, #0
 800127e:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <HAL_UART_RxCpltCallback+0x214>)
 8001280:	f7ff fa8c 	bl	800079c <__aeabi_ddiv>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4610      	mov	r0, r2
 800128a:	4619      	mov	r1, r3
 800128c:	f7ff fc1e 	bl	8000acc <__aeabi_d2f>
 8001290:	4603      	mov	r3, r0
 8001292:	4a18      	ldr	r2, [pc, #96]	; (80012f4 <HAL_UART_RxCpltCallback+0x220>)
 8001294:	6013      	str	r3, [r2, #0]
			}

			status_rx_atmega = 0;
 8001296:	4b0d      	ldr	r3, [pc, #52]	; (80012cc <HAL_UART_RxCpltCallback+0x1f8>)
 8001298:	2200      	movs	r2, #0
 800129a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart2, atmega_buffer, 1);
 800129c:	2201      	movs	r2, #1
 800129e:	490a      	ldr	r1, [pc, #40]	; (80012c8 <HAL_UART_RxCpltCallback+0x1f4>)
 80012a0:	480c      	ldr	r0, [pc, #48]	; (80012d4 <HAL_UART_RxCpltCallback+0x200>)
 80012a2:	f008 fb17 	bl	80098d4 <HAL_UART_Receive_IT>
		} else {
			status_rx_atmega = 0;
			HAL_UART_Receive_IT(&huart2, atmega_buffer, 1);
		}
	}
}
 80012a6:	e008      	b.n	80012ba <HAL_UART_RxCpltCallback+0x1e6>
			status_rx_atmega = 0;
 80012a8:	4b08      	ldr	r3, [pc, #32]	; (80012cc <HAL_UART_RxCpltCallback+0x1f8>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart2, atmega_buffer, 1);
 80012ae:	2201      	movs	r2, #1
 80012b0:	4905      	ldr	r1, [pc, #20]	; (80012c8 <HAL_UART_RxCpltCallback+0x1f4>)
 80012b2:	4808      	ldr	r0, [pc, #32]	; (80012d4 <HAL_UART_RxCpltCallback+0x200>)
 80012b4:	f008 fb0e 	bl	80098d4 <HAL_UART_Receive_IT>
}
 80012b8:	e7ff      	b.n	80012ba <HAL_UART_RxCpltCallback+0x1e6>
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40004400 	.word	0x40004400
 80012c8:	20000a34 	.word	0x20000a34
 80012cc:	20000a41 	.word	0x20000a41
 80012d0:	20000a35 	.word	0x20000a35
 80012d4:	200008dc 	.word	0x200008dc
 80012d8:	20000a36 	.word	0x20000a36
 80012dc:	20000a44 	.word	0x20000a44
 80012e0:	20000a48 	.word	0x20000a48
 80012e4:	20000a4c 	.word	0x20000a4c
 80012e8:	40590000 	.word	0x40590000
 80012ec:	20000a50 	.word	0x20000a50
 80012f0:	20000a54 	.word	0x20000a54
 80012f4:	20000a58 	.word	0x20000a58

080012f8 <convertADCtoVoltage>:

float convertADCtoVoltage(uint16_t adc_value, uint16_t min_adc, uint16_t max_adc, float min_voltage, float max_voltage) {
 80012f8:	b480      	push	{r7}
 80012fa:	b087      	sub	sp, #28
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	ed87 0a01 	vstr	s0, [r7, #4]
 8001304:	edc7 0a00 	vstr	s1, [r7]
 8001308:	81fb      	strh	r3, [r7, #14]
 800130a:	460b      	mov	r3, r1
 800130c:	81bb      	strh	r3, [r7, #12]
 800130e:	4613      	mov	r3, r2
 8001310:	817b      	strh	r3, [r7, #10]
    float a = (max_voltage - min_voltage) / (float)(max_adc - min_adc);
 8001312:	ed97 7a00 	vldr	s14, [r7]
 8001316:	edd7 7a01 	vldr	s15, [r7, #4]
 800131a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800131e:	897a      	ldrh	r2, [r7, #10]
 8001320:	89bb      	ldrh	r3, [r7, #12]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	ee07 3a90 	vmov	s15, r3
 8001328:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800132c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001330:	edc7 7a05 	vstr	s15, [r7, #20]
    float b = min_voltage - a * min_adc;
 8001334:	89bb      	ldrh	r3, [r7, #12]
 8001336:	ee07 3a90 	vmov	s15, r3
 800133a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800133e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001346:	ed97 7a01 	vldr	s14, [r7, #4]
 800134a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800134e:	edc7 7a04 	vstr	s15, [r7, #16]
    return a * adc_value + b;
 8001352:	89fb      	ldrh	r3, [r7, #14]
 8001354:	ee07 3a90 	vmov	s15, r3
 8001358:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800135c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001360:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001364:	edd7 7a04 	vldr	s15, [r7, #16]
 8001368:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800136c:	eeb0 0a67 	vmov.f32	s0, s15
 8001370:	371c      	adds	r7, #28
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
	...

0800137c <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_2);
 8001384:	2104      	movs	r1, #4
 8001386:	4805      	ldr	r0, [pc, #20]	; (800139c <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8001388:	f007 fbba 	bl	8008b00 <HAL_TIM_PWM_Stop_DMA>
	datasentflag=1;
 800138c:	4b04      	ldr	r3, [pc, #16]	; (80013a0 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 800138e:	2201      	movs	r2, #1
 8001390:	601a      	str	r2, [r3, #0]
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	2000075c 	.word	0x2000075c
 80013a0:	20000b74 	.word	0x20000b74

080013a4 <map>:

int map(int x, int in_min, int in_max, int out_min, int out_max) {
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
 80013b0:	603b      	str	r3, [r7, #0]
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	69b9      	ldr	r1, [r7, #24]
 80013ba:	683a      	ldr	r2, [r7, #0]
 80013bc:	1a8a      	subs	r2, r1, r2
 80013be:	fb03 f202 	mul.w	r2, r3, r2
 80013c2:	6879      	ldr	r1, [r7, #4]
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	1acb      	subs	r3, r1, r3
 80013c8:	fb92 f2f3 	sdiv	r2, r2, r3
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	4413      	add	r3, r2
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013dc:	b5b0      	push	{r4, r5, r7, lr}
 80013de:	b0aa      	sub	sp, #168	; 0xa8
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013e2:	f002 fda5 	bl	8003f30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013e6:	f000 f8d1 	bl	800158c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013ea:	f000 fbbd 	bl	8001b68 <MX_GPIO_Init>
  MX_DMA_Init();
 80013ee:	f000 fb85 	bl	8001afc <MX_DMA_Init>
  MX_TIM4_Init();
 80013f2:	f000 fa19 	bl	8001828 <MX_TIM4_Init>
  MX_TIM5_Init();
 80013f6:	f000 fa91 	bl	800191c <MX_TIM5_Init>
  MX_TIM9_Init();
 80013fa:	f000 fb09 	bl	8001a10 <MX_TIM9_Init>
  MX_USART2_UART_Init();
 80013fe:	f000 fb4d 	bl	8001a9c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001402:	f000 f98b 	bl	800171c <MX_I2C1_Init>
  MX_ADC1_Init();
 8001406:	f000 f92b 	bl	8001660 <MX_ADC1_Init>
  MX_TIM3_Init();
 800140a:	f000 f9b5 	bl	8001778 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  //ESC PWM Timer Init
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800140e:	2100      	movs	r1, #0
 8001410:	484d      	ldr	r0, [pc, #308]	; (8001548 <main+0x16c>)
 8001412:	f007 f8e5 	bl	80085e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001416:	2104      	movs	r1, #4
 8001418:	484b      	ldr	r0, [pc, #300]	; (8001548 <main+0x16c>)
 800141a:	f007 f8e1 	bl	80085e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800141e:	2108      	movs	r1, #8
 8001420:	4849      	ldr	r0, [pc, #292]	; (8001548 <main+0x16c>)
 8001422:	f007 f8dd 	bl	80085e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001426:	210c      	movs	r1, #12
 8001428:	4847      	ldr	r0, [pc, #284]	; (8001548 <main+0x16c>)
 800142a:	f007 f8d9 	bl	80085e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 800142e:	2100      	movs	r1, #0
 8001430:	4846      	ldr	r0, [pc, #280]	; (800154c <main+0x170>)
 8001432:	f007 f8d5 	bl	80085e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8001436:	2104      	movs	r1, #4
 8001438:	4844      	ldr	r0, [pc, #272]	; (800154c <main+0x170>)
 800143a:	f007 f8d1 	bl	80085e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 800143e:	2108      	movs	r1, #8
 8001440:	4842      	ldr	r0, [pc, #264]	; (800154c <main+0x170>)
 8001442:	f007 f8cd 	bl	80085e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 8001446:	210c      	movs	r1, #12
 8001448:	4840      	ldr	r0, [pc, #256]	; (800154c <main+0x170>)
 800144a:	f007 f8c9 	bl	80085e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 800144e:	2100      	movs	r1, #0
 8001450:	483f      	ldr	r0, [pc, #252]	; (8001550 <main+0x174>)
 8001452:	f007 f8c5 	bl	80085e0 <HAL_TIM_PWM_Start>

  //ADC
  HAL_ADC_Start_DMA(&hadc1, adc1_value, 2);
 8001456:	2202      	movs	r2, #2
 8001458:	493e      	ldr	r1, [pc, #248]	; (8001554 <main+0x178>)
 800145a:	483f      	ldr	r0, [pc, #252]	; (8001558 <main+0x17c>)
 800145c:	f002 fe12 	bl	8004084 <HAL_ADC_Start_DMA>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of cdcSerialTask */
  osThreadDef(cdcSerialTask, StartCdcSerialTask, osPriorityNormal, 0, 128);
 8001460:	4b3e      	ldr	r3, [pc, #248]	; (800155c <main+0x180>)
 8001462:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8001466:	461d      	mov	r5, r3
 8001468:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800146a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800146c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001470:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  cdcSerialTaskHandle = osThreadCreate(osThread(cdcSerialTask), NULL);
 8001474:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001478:	2100      	movs	r1, #0
 800147a:	4618      	mov	r0, r3
 800147c:	f00c fc77 	bl	800dd6e <osThreadCreate>
 8001480:	4603      	mov	r3, r0
 8001482:	4a37      	ldr	r2, [pc, #220]	; (8001560 <main+0x184>)
 8001484:	6013      	str	r3, [r2, #0]

  /* definition and creation of movementTask */
  osThreadDef(movementTask, StartMovementTask, osPriorityNormal, 0, 128);
 8001486:	4b37      	ldr	r3, [pc, #220]	; (8001564 <main+0x188>)
 8001488:	f107 0470 	add.w	r4, r7, #112	; 0x70
 800148c:	461d      	mov	r5, r3
 800148e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001490:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001492:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001496:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  movementTaskHandle = osThreadCreate(osThread(movementTask), NULL);
 800149a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800149e:	2100      	movs	r1, #0
 80014a0:	4618      	mov	r0, r3
 80014a2:	f00c fc64 	bl	800dd6e <osThreadCreate>
 80014a6:	4603      	mov	r3, r0
 80014a8:	4a2f      	ldr	r2, [pc, #188]	; (8001568 <main+0x18c>)
 80014aa:	6013      	str	r3, [r2, #0]

  /* definition and creation of getPressureTask */
  osThreadDef(getPressureTask, StartGetPressureTask, osPriorityHigh, 0, 128);
 80014ac:	4b2f      	ldr	r3, [pc, #188]	; (800156c <main+0x190>)
 80014ae:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80014b2:	461d      	mov	r5, r3
 80014b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  getPressureTaskHandle = osThreadCreate(osThread(getPressureTask), NULL);
 80014c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80014c4:	2100      	movs	r1, #0
 80014c6:	4618      	mov	r0, r3
 80014c8:	f00c fc51 	bl	800dd6e <osThreadCreate>
 80014cc:	4603      	mov	r3, r0
 80014ce:	4a28      	ldr	r2, [pc, #160]	; (8001570 <main+0x194>)
 80014d0:	6013      	str	r3, [r2, #0]

  /* definition and creation of stroboTask */
  osThreadDef(stroboTask, StartStroboTask, osPriorityBelowNormal, 0, 128);
 80014d2:	4b28      	ldr	r3, [pc, #160]	; (8001574 <main+0x198>)
 80014d4:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80014d8:	461d      	mov	r5, r3
 80014da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  stroboTaskHandle = osThreadCreate(osThread(stroboTask), NULL);
 80014e6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80014ea:	2100      	movs	r1, #0
 80014ec:	4618      	mov	r0, r3
 80014ee:	f00c fc3e 	bl	800dd6e <osThreadCreate>
 80014f2:	4603      	mov	r3, r0
 80014f4:	4a20      	ldr	r2, [pc, #128]	; (8001578 <main+0x19c>)
 80014f6:	6013      	str	r3, [r2, #0]

  /* definition and creation of otherTask */
  osThreadDef(otherTask, StartOtherTask, osPriorityIdle, 0, 128);
 80014f8:	4b20      	ldr	r3, [pc, #128]	; (800157c <main+0x1a0>)
 80014fa:	f107 041c 	add.w	r4, r7, #28
 80014fe:	461d      	mov	r5, r3
 8001500:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001502:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001504:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001508:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  otherTaskHandle = osThreadCreate(osThread(otherTask), NULL);
 800150c:	f107 031c 	add.w	r3, r7, #28
 8001510:	2100      	movs	r1, #0
 8001512:	4618      	mov	r0, r3
 8001514:	f00c fc2b 	bl	800dd6e <osThreadCreate>
 8001518:	4603      	mov	r3, r0
 800151a:	4a19      	ldr	r2, [pc, #100]	; (8001580 <main+0x1a4>)
 800151c:	6013      	str	r3, [r2, #0]

  /* definition and creation of pidTask */
  osThreadDef(pidTask, StartPidTask, osPriorityHigh, 0, 128);
 800151e:	4b19      	ldr	r3, [pc, #100]	; (8001584 <main+0x1a8>)
 8001520:	463c      	mov	r4, r7
 8001522:	461d      	mov	r5, r3
 8001524:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001526:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001528:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800152c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  pidTaskHandle = osThreadCreate(osThread(pidTask), NULL);
 8001530:	463b      	mov	r3, r7
 8001532:	2100      	movs	r1, #0
 8001534:	4618      	mov	r0, r3
 8001536:	f00c fc1a 	bl	800dd6e <osThreadCreate>
 800153a:	4603      	mov	r3, r0
 800153c:	4a12      	ldr	r2, [pc, #72]	; (8001588 <main+0x1ac>)
 800153e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8001540:	f00c fc0e 	bl	800dd60 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001544:	e7fe      	b.n	8001544 <main+0x168>
 8001546:	bf00      	nop
 8001548:	200007a4 	.word	0x200007a4
 800154c:	200007ec 	.word	0x200007ec
 8001550:	20000834 	.word	0x20000834
 8001554:	20000b60 	.word	0x20000b60
 8001558:	20000660 	.word	0x20000660
 800155c:	0800fe08 	.word	0x0800fe08
 8001560:	20000924 	.word	0x20000924
 8001564:	0800fe34 	.word	0x0800fe34
 8001568:	20000928 	.word	0x20000928
 800156c:	0800fe60 	.word	0x0800fe60
 8001570:	2000092c 	.word	0x2000092c
 8001574:	0800fe88 	.word	0x0800fe88
 8001578:	20000930 	.word	0x20000930
 800157c:	0800feb0 	.word	0x0800feb0
 8001580:	20000934 	.word	0x20000934
 8001584:	0800fed4 	.word	0x0800fed4
 8001588:	20000938 	.word	0x20000938

0800158c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b094      	sub	sp, #80	; 0x50
 8001590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001592:	f107 0320 	add.w	r3, r7, #32
 8001596:	2230      	movs	r2, #48	; 0x30
 8001598:	2100      	movs	r1, #0
 800159a:	4618      	mov	r0, r3
 800159c:	f00e fb46 	bl	800fc2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015a0:	f107 030c 	add.w	r3, r7, #12
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015b0:	2300      	movs	r3, #0
 80015b2:	60bb      	str	r3, [r7, #8]
 80015b4:	4b28      	ldr	r3, [pc, #160]	; (8001658 <SystemClock_Config+0xcc>)
 80015b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b8:	4a27      	ldr	r2, [pc, #156]	; (8001658 <SystemClock_Config+0xcc>)
 80015ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015be:	6413      	str	r3, [r2, #64]	; 0x40
 80015c0:	4b25      	ldr	r3, [pc, #148]	; (8001658 <SystemClock_Config+0xcc>)
 80015c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c8:	60bb      	str	r3, [r7, #8]
 80015ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015cc:	2300      	movs	r3, #0
 80015ce:	607b      	str	r3, [r7, #4]
 80015d0:	4b22      	ldr	r3, [pc, #136]	; (800165c <SystemClock_Config+0xd0>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a21      	ldr	r2, [pc, #132]	; (800165c <SystemClock_Config+0xd0>)
 80015d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015da:	6013      	str	r3, [r2, #0]
 80015dc:	4b1f      	ldr	r3, [pc, #124]	; (800165c <SystemClock_Config+0xd0>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015e4:	607b      	str	r3, [r7, #4]
 80015e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015e8:	2301      	movs	r3, #1
 80015ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015f2:	2302      	movs	r3, #2
 80015f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80015fc:	2304      	movs	r3, #4
 80015fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001600:	23a8      	movs	r3, #168	; 0xa8
 8001602:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001604:	2302      	movs	r3, #2
 8001606:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001608:	2307      	movs	r3, #7
 800160a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800160c:	f107 0320 	add.w	r3, r7, #32
 8001610:	4618      	mov	r0, r3
 8001612:	f006 fa01 	bl	8007a18 <HAL_RCC_OscConfig>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800161c:	f001 fdba 	bl	8003194 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001620:	230f      	movs	r3, #15
 8001622:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001624:	2302      	movs	r3, #2
 8001626:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001628:	2300      	movs	r3, #0
 800162a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800162c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001630:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001632:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001636:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001638:	f107 030c 	add.w	r3, r7, #12
 800163c:	2105      	movs	r1, #5
 800163e:	4618      	mov	r0, r3
 8001640:	f006 fc62 	bl	8007f08 <HAL_RCC_ClockConfig>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800164a:	f001 fda3 	bl	8003194 <Error_Handler>
  }
}
 800164e:	bf00      	nop
 8001650:	3750      	adds	r7, #80	; 0x50
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40023800 	.word	0x40023800
 800165c:	40007000 	.word	0x40007000

08001660 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001666:	463b      	mov	r3, r7
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]
 800166e:	609a      	str	r2, [r3, #8]
 8001670:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001672:	4b27      	ldr	r3, [pc, #156]	; (8001710 <MX_ADC1_Init+0xb0>)
 8001674:	4a27      	ldr	r2, [pc, #156]	; (8001714 <MX_ADC1_Init+0xb4>)
 8001676:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001678:	4b25      	ldr	r3, [pc, #148]	; (8001710 <MX_ADC1_Init+0xb0>)
 800167a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800167e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001680:	4b23      	ldr	r3, [pc, #140]	; (8001710 <MX_ADC1_Init+0xb0>)
 8001682:	2200      	movs	r2, #0
 8001684:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001686:	4b22      	ldr	r3, [pc, #136]	; (8001710 <MX_ADC1_Init+0xb0>)
 8001688:	2201      	movs	r2, #1
 800168a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800168c:	4b20      	ldr	r3, [pc, #128]	; (8001710 <MX_ADC1_Init+0xb0>)
 800168e:	2201      	movs	r2, #1
 8001690:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001692:	4b1f      	ldr	r3, [pc, #124]	; (8001710 <MX_ADC1_Init+0xb0>)
 8001694:	2200      	movs	r2, #0
 8001696:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800169a:	4b1d      	ldr	r3, [pc, #116]	; (8001710 <MX_ADC1_Init+0xb0>)
 800169c:	2200      	movs	r2, #0
 800169e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016a0:	4b1b      	ldr	r3, [pc, #108]	; (8001710 <MX_ADC1_Init+0xb0>)
 80016a2:	4a1d      	ldr	r2, [pc, #116]	; (8001718 <MX_ADC1_Init+0xb8>)
 80016a4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016a6:	4b1a      	ldr	r3, [pc, #104]	; (8001710 <MX_ADC1_Init+0xb0>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80016ac:	4b18      	ldr	r3, [pc, #96]	; (8001710 <MX_ADC1_Init+0xb0>)
 80016ae:	2202      	movs	r2, #2
 80016b0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80016b2:	4b17      	ldr	r3, [pc, #92]	; (8001710 <MX_ADC1_Init+0xb0>)
 80016b4:	2201      	movs	r2, #1
 80016b6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016ba:	4b15      	ldr	r3, [pc, #84]	; (8001710 <MX_ADC1_Init+0xb0>)
 80016bc:	2201      	movs	r2, #1
 80016be:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016c0:	4813      	ldr	r0, [pc, #76]	; (8001710 <MX_ADC1_Init+0xb0>)
 80016c2:	f002 fc9b 	bl	8003ffc <HAL_ADC_Init>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80016cc:	f001 fd62 	bl	8003194 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80016d0:	2304      	movs	r3, #4
 80016d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80016d4:	2301      	movs	r3, #1
 80016d6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80016d8:	2300      	movs	r3, #0
 80016da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016dc:	463b      	mov	r3, r7
 80016de:	4619      	mov	r1, r3
 80016e0:	480b      	ldr	r0, [pc, #44]	; (8001710 <MX_ADC1_Init+0xb0>)
 80016e2:	f002 fdfd 	bl	80042e0 <HAL_ADC_ConfigChannel>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d001      	beq.n	80016f0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80016ec:	f001 fd52 	bl	8003194 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 80016f0:	2302      	movs	r3, #2
 80016f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016f4:	463b      	mov	r3, r7
 80016f6:	4619      	mov	r1, r3
 80016f8:	4805      	ldr	r0, [pc, #20]	; (8001710 <MX_ADC1_Init+0xb0>)
 80016fa:	f002 fdf1 	bl	80042e0 <HAL_ADC_ConfigChannel>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8001704:	f001 fd46 	bl	8003194 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001708:	bf00      	nop
 800170a:	3710      	adds	r7, #16
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	20000660 	.word	0x20000660
 8001714:	40012000 	.word	0x40012000
 8001718:	0f000001 	.word	0x0f000001

0800171c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001720:	4b12      	ldr	r3, [pc, #72]	; (800176c <MX_I2C1_Init+0x50>)
 8001722:	4a13      	ldr	r2, [pc, #76]	; (8001770 <MX_I2C1_Init+0x54>)
 8001724:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001726:	4b11      	ldr	r3, [pc, #68]	; (800176c <MX_I2C1_Init+0x50>)
 8001728:	4a12      	ldr	r2, [pc, #72]	; (8001774 <MX_I2C1_Init+0x58>)
 800172a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800172c:	4b0f      	ldr	r3, [pc, #60]	; (800176c <MX_I2C1_Init+0x50>)
 800172e:	2200      	movs	r2, #0
 8001730:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001732:	4b0e      	ldr	r3, [pc, #56]	; (800176c <MX_I2C1_Init+0x50>)
 8001734:	2200      	movs	r2, #0
 8001736:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001738:	4b0c      	ldr	r3, [pc, #48]	; (800176c <MX_I2C1_Init+0x50>)
 800173a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800173e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001740:	4b0a      	ldr	r3, [pc, #40]	; (800176c <MX_I2C1_Init+0x50>)
 8001742:	2200      	movs	r2, #0
 8001744:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001746:	4b09      	ldr	r3, [pc, #36]	; (800176c <MX_I2C1_Init+0x50>)
 8001748:	2200      	movs	r2, #0
 800174a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800174c:	4b07      	ldr	r3, [pc, #28]	; (800176c <MX_I2C1_Init+0x50>)
 800174e:	2200      	movs	r2, #0
 8001750:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001752:	4b06      	ldr	r3, [pc, #24]	; (800176c <MX_I2C1_Init+0x50>)
 8001754:	2200      	movs	r2, #0
 8001756:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001758:	4804      	ldr	r0, [pc, #16]	; (800176c <MX_I2C1_Init+0x50>)
 800175a:	f003 ff13 	bl	8005584 <HAL_I2C_Init>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001764:	f001 fd16 	bl	8003194 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001768:	bf00      	nop
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20000708 	.word	0x20000708
 8001770:	40005400 	.word	0x40005400
 8001774:	00061a80 	.word	0x00061a80

08001778 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b08a      	sub	sp, #40	; 0x28
 800177c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800177e:	f107 0320 	add.w	r3, r7, #32
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001788:	1d3b      	adds	r3, r7, #4
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	609a      	str	r2, [r3, #8]
 8001792:	60da      	str	r2, [r3, #12]
 8001794:	611a      	str	r2, [r3, #16]
 8001796:	615a      	str	r2, [r3, #20]
 8001798:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800179a:	4b21      	ldr	r3, [pc, #132]	; (8001820 <MX_TIM3_Init+0xa8>)
 800179c:	4a21      	ldr	r2, [pc, #132]	; (8001824 <MX_TIM3_Init+0xac>)
 800179e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80017a0:	4b1f      	ldr	r3, [pc, #124]	; (8001820 <MX_TIM3_Init+0xa8>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017a6:	4b1e      	ldr	r3, [pc, #120]	; (8001820 <MX_TIM3_Init+0xa8>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 105-1;
 80017ac:	4b1c      	ldr	r3, [pc, #112]	; (8001820 <MX_TIM3_Init+0xa8>)
 80017ae:	2268      	movs	r2, #104	; 0x68
 80017b0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017b2:	4b1b      	ldr	r3, [pc, #108]	; (8001820 <MX_TIM3_Init+0xa8>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017b8:	4b19      	ldr	r3, [pc, #100]	; (8001820 <MX_TIM3_Init+0xa8>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80017be:	4818      	ldr	r0, [pc, #96]	; (8001820 <MX_TIM3_Init+0xa8>)
 80017c0:	f006 febe 	bl	8008540 <HAL_TIM_PWM_Init>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 80017ca:	f001 fce3 	bl	8003194 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ce:	2300      	movs	r3, #0
 80017d0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017d2:	2300      	movs	r3, #0
 80017d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017d6:	f107 0320 	add.w	r3, r7, #32
 80017da:	4619      	mov	r1, r3
 80017dc:	4810      	ldr	r0, [pc, #64]	; (8001820 <MX_TIM3_Init+0xa8>)
 80017de:	f007 ff99 	bl	8009714 <HAL_TIMEx_MasterConfigSynchronization>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 80017e8:	f001 fcd4 	bl	8003194 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017ec:	2360      	movs	r3, #96	; 0x60
 80017ee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017f0:	2300      	movs	r3, #0
 80017f2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017f4:	2300      	movs	r3, #0
 80017f6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017fc:	1d3b      	adds	r3, r7, #4
 80017fe:	2204      	movs	r2, #4
 8001800:	4619      	mov	r1, r3
 8001802:	4807      	ldr	r0, [pc, #28]	; (8001820 <MX_TIM3_Init+0xa8>)
 8001804:	f007 fb3e 	bl	8008e84 <HAL_TIM_PWM_ConfigChannel>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800180e:	f001 fcc1 	bl	8003194 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001812:	4803      	ldr	r0, [pc, #12]	; (8001820 <MX_TIM3_Init+0xa8>)
 8001814:	f002 f98c 	bl	8003b30 <HAL_TIM_MspPostInit>

}
 8001818:	bf00      	nop
 800181a:	3728      	adds	r7, #40	; 0x28
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	2000075c 	.word	0x2000075c
 8001824:	40000400 	.word	0x40000400

08001828 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08a      	sub	sp, #40	; 0x28
 800182c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800182e:	f107 0320 	add.w	r3, r7, #32
 8001832:	2200      	movs	r2, #0
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001838:	1d3b      	adds	r3, r7, #4
 800183a:	2200      	movs	r2, #0
 800183c:	601a      	str	r2, [r3, #0]
 800183e:	605a      	str	r2, [r3, #4]
 8001840:	609a      	str	r2, [r3, #8]
 8001842:	60da      	str	r2, [r3, #12]
 8001844:	611a      	str	r2, [r3, #16]
 8001846:	615a      	str	r2, [r3, #20]
 8001848:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800184a:	4b32      	ldr	r3, [pc, #200]	; (8001914 <MX_TIM4_Init+0xec>)
 800184c:	4a32      	ldr	r2, [pc, #200]	; (8001918 <MX_TIM4_Init+0xf0>)
 800184e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84;
 8001850:	4b30      	ldr	r3, [pc, #192]	; (8001914 <MX_TIM4_Init+0xec>)
 8001852:	2254      	movs	r2, #84	; 0x54
 8001854:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001856:	4b2f      	ldr	r3, [pc, #188]	; (8001914 <MX_TIM4_Init+0xec>)
 8001858:	2200      	movs	r2, #0
 800185a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000;
 800185c:	4b2d      	ldr	r3, [pc, #180]	; (8001914 <MX_TIM4_Init+0xec>)
 800185e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001862:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001864:	4b2b      	ldr	r3, [pc, #172]	; (8001914 <MX_TIM4_Init+0xec>)
 8001866:	2200      	movs	r2, #0
 8001868:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800186a:	4b2a      	ldr	r3, [pc, #168]	; (8001914 <MX_TIM4_Init+0xec>)
 800186c:	2200      	movs	r2, #0
 800186e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001870:	4828      	ldr	r0, [pc, #160]	; (8001914 <MX_TIM4_Init+0xec>)
 8001872:	f006 fe65 	bl	8008540 <HAL_TIM_PWM_Init>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800187c:	f001 fc8a 	bl	8003194 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001880:	2300      	movs	r3, #0
 8001882:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001884:	2300      	movs	r3, #0
 8001886:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001888:	f107 0320 	add.w	r3, r7, #32
 800188c:	4619      	mov	r1, r3
 800188e:	4821      	ldr	r0, [pc, #132]	; (8001914 <MX_TIM4_Init+0xec>)
 8001890:	f007 ff40 	bl	8009714 <HAL_TIMEx_MasterConfigSynchronization>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800189a:	f001 fc7b 	bl	8003194 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800189e:	2360      	movs	r3, #96	; 0x60
 80018a0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80018a2:	2300      	movs	r3, #0
 80018a4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018a6:	2300      	movs	r3, #0
 80018a8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018aa:	2300      	movs	r3, #0
 80018ac:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018ae:	1d3b      	adds	r3, r7, #4
 80018b0:	2200      	movs	r2, #0
 80018b2:	4619      	mov	r1, r3
 80018b4:	4817      	ldr	r0, [pc, #92]	; (8001914 <MX_TIM4_Init+0xec>)
 80018b6:	f007 fae5 	bl	8008e84 <HAL_TIM_PWM_ConfigChannel>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 80018c0:	f001 fc68 	bl	8003194 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018c4:	1d3b      	adds	r3, r7, #4
 80018c6:	2204      	movs	r2, #4
 80018c8:	4619      	mov	r1, r3
 80018ca:	4812      	ldr	r0, [pc, #72]	; (8001914 <MX_TIM4_Init+0xec>)
 80018cc:	f007 fada 	bl	8008e84 <HAL_TIM_PWM_ConfigChannel>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80018d6:	f001 fc5d 	bl	8003194 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80018da:	1d3b      	adds	r3, r7, #4
 80018dc:	2208      	movs	r2, #8
 80018de:	4619      	mov	r1, r3
 80018e0:	480c      	ldr	r0, [pc, #48]	; (8001914 <MX_TIM4_Init+0xec>)
 80018e2:	f007 facf 	bl	8008e84 <HAL_TIM_PWM_ConfigChannel>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 80018ec:	f001 fc52 	bl	8003194 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80018f0:	1d3b      	adds	r3, r7, #4
 80018f2:	220c      	movs	r2, #12
 80018f4:	4619      	mov	r1, r3
 80018f6:	4807      	ldr	r0, [pc, #28]	; (8001914 <MX_TIM4_Init+0xec>)
 80018f8:	f007 fac4 	bl	8008e84 <HAL_TIM_PWM_ConfigChannel>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 8001902:	f001 fc47 	bl	8003194 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001906:	4803      	ldr	r0, [pc, #12]	; (8001914 <MX_TIM4_Init+0xec>)
 8001908:	f002 f912 	bl	8003b30 <HAL_TIM_MspPostInit>

}
 800190c:	bf00      	nop
 800190e:	3728      	adds	r7, #40	; 0x28
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}
 8001914:	200007a4 	.word	0x200007a4
 8001918:	40000800 	.word	0x40000800

0800191c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b08a      	sub	sp, #40	; 0x28
 8001920:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001922:	f107 0320 	add.w	r3, r7, #32
 8001926:	2200      	movs	r2, #0
 8001928:	601a      	str	r2, [r3, #0]
 800192a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800192c:	1d3b      	adds	r3, r7, #4
 800192e:	2200      	movs	r2, #0
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	605a      	str	r2, [r3, #4]
 8001934:	609a      	str	r2, [r3, #8]
 8001936:	60da      	str	r2, [r3, #12]
 8001938:	611a      	str	r2, [r3, #16]
 800193a:	615a      	str	r2, [r3, #20]
 800193c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800193e:	4b32      	ldr	r3, [pc, #200]	; (8001a08 <MX_TIM5_Init+0xec>)
 8001940:	4a32      	ldr	r2, [pc, #200]	; (8001a0c <MX_TIM5_Init+0xf0>)
 8001942:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84;
 8001944:	4b30      	ldr	r3, [pc, #192]	; (8001a08 <MX_TIM5_Init+0xec>)
 8001946:	2254      	movs	r2, #84	; 0x54
 8001948:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800194a:	4b2f      	ldr	r3, [pc, #188]	; (8001a08 <MX_TIM5_Init+0xec>)
 800194c:	2200      	movs	r2, #0
 800194e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20000;
 8001950:	4b2d      	ldr	r3, [pc, #180]	; (8001a08 <MX_TIM5_Init+0xec>)
 8001952:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001956:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001958:	4b2b      	ldr	r3, [pc, #172]	; (8001a08 <MX_TIM5_Init+0xec>)
 800195a:	2200      	movs	r2, #0
 800195c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800195e:	4b2a      	ldr	r3, [pc, #168]	; (8001a08 <MX_TIM5_Init+0xec>)
 8001960:	2200      	movs	r2, #0
 8001962:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001964:	4828      	ldr	r0, [pc, #160]	; (8001a08 <MX_TIM5_Init+0xec>)
 8001966:	f006 fdeb 	bl	8008540 <HAL_TIM_PWM_Init>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8001970:	f001 fc10 	bl	8003194 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001974:	2300      	movs	r3, #0
 8001976:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001978:	2300      	movs	r3, #0
 800197a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800197c:	f107 0320 	add.w	r3, r7, #32
 8001980:	4619      	mov	r1, r3
 8001982:	4821      	ldr	r0, [pc, #132]	; (8001a08 <MX_TIM5_Init+0xec>)
 8001984:	f007 fec6 	bl	8009714 <HAL_TIMEx_MasterConfigSynchronization>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 800198e:	f001 fc01 	bl	8003194 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001992:	2360      	movs	r3, #96	; 0x60
 8001994:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001996:	2300      	movs	r3, #0
 8001998:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800199a:	2300      	movs	r3, #0
 800199c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800199e:	2300      	movs	r3, #0
 80019a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019a2:	1d3b      	adds	r3, r7, #4
 80019a4:	2200      	movs	r2, #0
 80019a6:	4619      	mov	r1, r3
 80019a8:	4817      	ldr	r0, [pc, #92]	; (8001a08 <MX_TIM5_Init+0xec>)
 80019aa:	f007 fa6b 	bl	8008e84 <HAL_TIM_PWM_ConfigChannel>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 80019b4:	f001 fbee 	bl	8003194 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019b8:	1d3b      	adds	r3, r7, #4
 80019ba:	2204      	movs	r2, #4
 80019bc:	4619      	mov	r1, r3
 80019be:	4812      	ldr	r0, [pc, #72]	; (8001a08 <MX_TIM5_Init+0xec>)
 80019c0:	f007 fa60 	bl	8008e84 <HAL_TIM_PWM_ConfigChannel>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80019ca:	f001 fbe3 	bl	8003194 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019ce:	1d3b      	adds	r3, r7, #4
 80019d0:	2208      	movs	r2, #8
 80019d2:	4619      	mov	r1, r3
 80019d4:	480c      	ldr	r0, [pc, #48]	; (8001a08 <MX_TIM5_Init+0xec>)
 80019d6:	f007 fa55 	bl	8008e84 <HAL_TIM_PWM_ConfigChannel>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 80019e0:	f001 fbd8 	bl	8003194 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019e4:	1d3b      	adds	r3, r7, #4
 80019e6:	220c      	movs	r2, #12
 80019e8:	4619      	mov	r1, r3
 80019ea:	4807      	ldr	r0, [pc, #28]	; (8001a08 <MX_TIM5_Init+0xec>)
 80019ec:	f007 fa4a 	bl	8008e84 <HAL_TIM_PWM_ConfigChannel>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <MX_TIM5_Init+0xde>
  {
    Error_Handler();
 80019f6:	f001 fbcd 	bl	8003194 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80019fa:	4803      	ldr	r0, [pc, #12]	; (8001a08 <MX_TIM5_Init+0xec>)
 80019fc:	f002 f898 	bl	8003b30 <HAL_TIM_MspPostInit>

}
 8001a00:	bf00      	nop
 8001a02:	3728      	adds	r7, #40	; 0x28
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	200007ec 	.word	0x200007ec
 8001a0c:	40000c00 	.word	0x40000c00

08001a10 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b088      	sub	sp, #32
 8001a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a16:	1d3b      	adds	r3, r7, #4
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	605a      	str	r2, [r3, #4]
 8001a1e:	609a      	str	r2, [r3, #8]
 8001a20:	60da      	str	r2, [r3, #12]
 8001a22:	611a      	str	r2, [r3, #16]
 8001a24:	615a      	str	r2, [r3, #20]
 8001a26:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001a28:	4b1a      	ldr	r3, [pc, #104]	; (8001a94 <MX_TIM9_Init+0x84>)
 8001a2a:	4a1b      	ldr	r2, [pc, #108]	; (8001a98 <MX_TIM9_Init+0x88>)
 8001a2c:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 84;
 8001a2e:	4b19      	ldr	r3, [pc, #100]	; (8001a94 <MX_TIM9_Init+0x84>)
 8001a30:	2254      	movs	r2, #84	; 0x54
 8001a32:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a34:	4b17      	ldr	r3, [pc, #92]	; (8001a94 <MX_TIM9_Init+0x84>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 20000;
 8001a3a:	4b16      	ldr	r3, [pc, #88]	; (8001a94 <MX_TIM9_Init+0x84>)
 8001a3c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001a40:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a42:	4b14      	ldr	r3, [pc, #80]	; (8001a94 <MX_TIM9_Init+0x84>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a48:	4b12      	ldr	r3, [pc, #72]	; (8001a94 <MX_TIM9_Init+0x84>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001a4e:	4811      	ldr	r0, [pc, #68]	; (8001a94 <MX_TIM9_Init+0x84>)
 8001a50:	f006 fd76 	bl	8008540 <HAL_TIM_PWM_Init>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8001a5a:	f001 fb9b 	bl	8003194 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a5e:	2360      	movs	r3, #96	; 0x60
 8001a60:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a62:	2300      	movs	r3, #0
 8001a64:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a66:	2300      	movs	r3, #0
 8001a68:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a6e:	1d3b      	adds	r3, r7, #4
 8001a70:	2200      	movs	r2, #0
 8001a72:	4619      	mov	r1, r3
 8001a74:	4807      	ldr	r0, [pc, #28]	; (8001a94 <MX_TIM9_Init+0x84>)
 8001a76:	f007 fa05 	bl	8008e84 <HAL_TIM_PWM_ConfigChannel>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8001a80:	f001 fb88 	bl	8003194 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001a84:	4803      	ldr	r0, [pc, #12]	; (8001a94 <MX_TIM9_Init+0x84>)
 8001a86:	f002 f853 	bl	8003b30 <HAL_TIM_MspPostInit>

}
 8001a8a:	bf00      	nop
 8001a8c:	3720      	adds	r7, #32
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	20000834 	.word	0x20000834
 8001a98:	40014000 	.word	0x40014000

08001a9c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001aa0:	4b13      	ldr	r3, [pc, #76]	; (8001af0 <MX_USART2_UART_Init+0x54>)
 8001aa2:	4a14      	ldr	r2, [pc, #80]	; (8001af4 <MX_USART2_UART_Init+0x58>)
 8001aa4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001aa6:	4b12      	ldr	r3, [pc, #72]	; (8001af0 <MX_USART2_UART_Init+0x54>)
 8001aa8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001aac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001aae:	4b10      	ldr	r3, [pc, #64]	; (8001af0 <MX_USART2_UART_Init+0x54>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ab4:	4b0e      	ldr	r3, [pc, #56]	; (8001af0 <MX_USART2_UART_Init+0x54>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001aba:	4b0d      	ldr	r3, [pc, #52]	; (8001af0 <MX_USART2_UART_Init+0x54>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001ac0:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <MX_USART2_UART_Init+0x54>)
 8001ac2:	220c      	movs	r2, #12
 8001ac4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ac6:	4b0a      	ldr	r3, [pc, #40]	; (8001af0 <MX_USART2_UART_Init+0x54>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001acc:	4b08      	ldr	r3, [pc, #32]	; (8001af0 <MX_USART2_UART_Init+0x54>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ad2:	4807      	ldr	r0, [pc, #28]	; (8001af0 <MX_USART2_UART_Init+0x54>)
 8001ad4:	f007 feae 	bl	8009834 <HAL_UART_Init>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d001      	beq.n	8001ae2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001ade:	f001 fb59 	bl	8003194 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  HAL_UART_Receive_IT(&huart2, atmega_buffer, 1);
 8001ae2:	2201      	movs	r2, #1
 8001ae4:	4904      	ldr	r1, [pc, #16]	; (8001af8 <MX_USART2_UART_Init+0x5c>)
 8001ae6:	4802      	ldr	r0, [pc, #8]	; (8001af0 <MX_USART2_UART_Init+0x54>)
 8001ae8:	f007 fef4 	bl	80098d4 <HAL_UART_Receive_IT>
  /* USER CODE END USART2_Init 2 */

}
 8001aec:	bf00      	nop
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	200008dc 	.word	0x200008dc
 8001af4:	40004400 	.word	0x40004400
 8001af8:	20000a34 	.word	0x20000a34

08001afc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	607b      	str	r3, [r7, #4]
 8001b06:	4b17      	ldr	r3, [pc, #92]	; (8001b64 <MX_DMA_Init+0x68>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	4a16      	ldr	r2, [pc, #88]	; (8001b64 <MX_DMA_Init+0x68>)
 8001b0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001b10:	6313      	str	r3, [r2, #48]	; 0x30
 8001b12:	4b14      	ldr	r3, [pc, #80]	; (8001b64 <MX_DMA_Init+0x68>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001b1a:	607b      	str	r3, [r7, #4]
 8001b1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001b1e:	2300      	movs	r3, #0
 8001b20:	603b      	str	r3, [r7, #0]
 8001b22:	4b10      	ldr	r3, [pc, #64]	; (8001b64 <MX_DMA_Init+0x68>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	4a0f      	ldr	r2, [pc, #60]	; (8001b64 <MX_DMA_Init+0x68>)
 8001b28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2e:	4b0d      	ldr	r3, [pc, #52]	; (8001b64 <MX_DMA_Init+0x68>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b36:	603b      	str	r3, [r7, #0]
 8001b38:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2105      	movs	r1, #5
 8001b3e:	2010      	movs	r0, #16
 8001b40:	f002 ff26 	bl	8004990 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001b44:	2010      	movs	r0, #16
 8001b46:	f002 ff3f 	bl	80049c8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	2105      	movs	r1, #5
 8001b4e:	2038      	movs	r0, #56	; 0x38
 8001b50:	f002 ff1e 	bl	8004990 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001b54:	2038      	movs	r0, #56	; 0x38
 8001b56:	f002 ff37 	bl	80049c8 <HAL_NVIC_EnableIRQ>

}
 8001b5a:	bf00      	nop
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40023800 	.word	0x40023800

08001b68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b08c      	sub	sp, #48	; 0x30
 8001b6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6e:	f107 031c 	add.w	r3, r7, #28
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	605a      	str	r2, [r3, #4]
 8001b78:	609a      	str	r2, [r3, #8]
 8001b7a:	60da      	str	r2, [r3, #12]
 8001b7c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	61bb      	str	r3, [r7, #24]
 8001b82:	4b3e      	ldr	r3, [pc, #248]	; (8001c7c <MX_GPIO_Init+0x114>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	4a3d      	ldr	r2, [pc, #244]	; (8001c7c <MX_GPIO_Init+0x114>)
 8001b88:	f043 0310 	orr.w	r3, r3, #16
 8001b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b8e:	4b3b      	ldr	r3, [pc, #236]	; (8001c7c <MX_GPIO_Init+0x114>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b92:	f003 0310 	and.w	r3, r3, #16
 8001b96:	61bb      	str	r3, [r7, #24]
 8001b98:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	617b      	str	r3, [r7, #20]
 8001b9e:	4b37      	ldr	r3, [pc, #220]	; (8001c7c <MX_GPIO_Init+0x114>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba2:	4a36      	ldr	r2, [pc, #216]	; (8001c7c <MX_GPIO_Init+0x114>)
 8001ba4:	f043 0304 	orr.w	r3, r3, #4
 8001ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8001baa:	4b34      	ldr	r3, [pc, #208]	; (8001c7c <MX_GPIO_Init+0x114>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	f003 0304 	and.w	r3, r3, #4
 8001bb2:	617b      	str	r3, [r7, #20]
 8001bb4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	613b      	str	r3, [r7, #16]
 8001bba:	4b30      	ldr	r3, [pc, #192]	; (8001c7c <MX_GPIO_Init+0x114>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	4a2f      	ldr	r2, [pc, #188]	; (8001c7c <MX_GPIO_Init+0x114>)
 8001bc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc6:	4b2d      	ldr	r3, [pc, #180]	; (8001c7c <MX_GPIO_Init+0x114>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bce:	613b      	str	r3, [r7, #16]
 8001bd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	4b29      	ldr	r3, [pc, #164]	; (8001c7c <MX_GPIO_Init+0x114>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	4a28      	ldr	r2, [pc, #160]	; (8001c7c <MX_GPIO_Init+0x114>)
 8001bdc:	f043 0301 	orr.w	r3, r3, #1
 8001be0:	6313      	str	r3, [r2, #48]	; 0x30
 8001be2:	4b26      	ldr	r3, [pc, #152]	; (8001c7c <MX_GPIO_Init+0x114>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	60fb      	str	r3, [r7, #12]
 8001bec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	60bb      	str	r3, [r7, #8]
 8001bf2:	4b22      	ldr	r3, [pc, #136]	; (8001c7c <MX_GPIO_Init+0x114>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	4a21      	ldr	r2, [pc, #132]	; (8001c7c <MX_GPIO_Init+0x114>)
 8001bf8:	f043 0308 	orr.w	r3, r3, #8
 8001bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfe:	4b1f      	ldr	r3, [pc, #124]	; (8001c7c <MX_GPIO_Init+0x114>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	f003 0308 	and.w	r3, r3, #8
 8001c06:	60bb      	str	r3, [r7, #8]
 8001c08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	607b      	str	r3, [r7, #4]
 8001c0e:	4b1b      	ldr	r3, [pc, #108]	; (8001c7c <MX_GPIO_Init+0x114>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	4a1a      	ldr	r2, [pc, #104]	; (8001c7c <MX_GPIO_Init+0x114>)
 8001c14:	f043 0302 	orr.w	r3, r3, #2
 8001c18:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1a:	4b18      	ldr	r3, [pc, #96]	; (8001c7c <MX_GPIO_Init+0x114>)
 8001c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	607b      	str	r3, [r7, #4]
 8001c24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8001c26:	2200      	movs	r2, #0
 8001c28:	2104      	movs	r1, #4
 8001c2a:	4815      	ldr	r0, [pc, #84]	; (8001c80 <MX_GPIO_Init+0x118>)
 8001c2c:	f003 fc90 	bl	8005550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001c30:	2200      	movs	r2, #0
 8001c32:	2140      	movs	r1, #64	; 0x40
 8001c34:	4813      	ldr	r0, [pc, #76]	; (8001c84 <MX_GPIO_Init+0x11c>)
 8001c36:	f003 fc8b 	bl	8005550 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c3a:	2304      	movs	r3, #4
 8001c3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c42:	2301      	movs	r3, #1
 8001c44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c46:	2300      	movs	r3, #0
 8001c48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c4a:	f107 031c 	add.w	r3, r7, #28
 8001c4e:	4619      	mov	r1, r3
 8001c50:	480b      	ldr	r0, [pc, #44]	; (8001c80 <MX_GPIO_Init+0x118>)
 8001c52:	f003 fac9 	bl	80051e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c56:	2340      	movs	r3, #64	; 0x40
 8001c58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c62:	2300      	movs	r3, #0
 8001c64:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c66:	f107 031c 	add.w	r3, r7, #28
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4805      	ldr	r0, [pc, #20]	; (8001c84 <MX_GPIO_Init+0x11c>)
 8001c6e:	f003 fabb 	bl	80051e8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c72:	bf00      	nop
 8001c74:	3730      	adds	r7, #48	; 0x30
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	40023800 	.word	0x40023800
 8001c80:	40020800 	.word	0x40020800
 8001c84:	40020000 	.word	0x40020000

08001c88 <StartCdcSerialTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartCdcSerialTask */
void StartCdcSerialTask(void const * argument)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b08c      	sub	sp, #48	; 0x30
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001c90:	f00d fa9c 	bl	800f1cc <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  //Receive
		int i = 0;
 8001c94:	2300      	movs	r3, #0
 8001c96:	62fb      	str	r3, [r7, #44]	; 0x2c
		vel_linear[0] = bit16ToInt(i, serialBuffer); //linear x
 8001c98:	4984      	ldr	r1, [pc, #528]	; (8001eac <StartCdcSerialTask+0x224>)
 8001c9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001c9c:	f7ff f8e4 	bl	8000e68 <bit16ToInt>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	4a83      	ldr	r2, [pc, #524]	; (8001eb0 <StartCdcSerialTask+0x228>)
 8001ca4:	6013      	str	r3, [r2, #0]
		vel_linear[1] = bit16ToInt(i + 2, serialBuffer); //linear y
 8001ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ca8:	3302      	adds	r3, #2
 8001caa:	4980      	ldr	r1, [pc, #512]	; (8001eac <StartCdcSerialTask+0x224>)
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff f8db 	bl	8000e68 <bit16ToInt>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	4a7e      	ldr	r2, [pc, #504]	; (8001eb0 <StartCdcSerialTask+0x228>)
 8001cb6:	6053      	str	r3, [r2, #4]
		vel_linear[2] = bit16ToInt(i + 4, serialBuffer); //linear z
 8001cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cba:	3304      	adds	r3, #4
 8001cbc:	497b      	ldr	r1, [pc, #492]	; (8001eac <StartCdcSerialTask+0x224>)
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff f8d2 	bl	8000e68 <bit16ToInt>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	4a7a      	ldr	r2, [pc, #488]	; (8001eb0 <StartCdcSerialTask+0x228>)
 8001cc8:	6093      	str	r3, [r2, #8]
		vel_angular[0] = bit16ToInt(i + 6, serialBuffer); //angular z
 8001cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ccc:	3306      	adds	r3, #6
 8001cce:	4977      	ldr	r1, [pc, #476]	; (8001eac <StartCdcSerialTask+0x224>)
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff f8c9 	bl	8000e68 <bit16ToInt>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	4a76      	ldr	r2, [pc, #472]	; (8001eb4 <StartCdcSerialTask+0x22c>)
 8001cda:	6013      	str	r3, [r2, #0]
		vel_angular[1] = bit16ToInt(i + 8, serialBuffer); //angular y
 8001cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cde:	3308      	adds	r3, #8
 8001ce0:	4972      	ldr	r1, [pc, #456]	; (8001eac <StartCdcSerialTask+0x224>)
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f7ff f8c0 	bl	8000e68 <bit16ToInt>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	4a72      	ldr	r2, [pc, #456]	; (8001eb4 <StartCdcSerialTask+0x22c>)
 8001cec:	6053      	str	r3, [r2, #4]
		vel_angular[2] = bit16ToInt(i + 10, serialBuffer); //angular z
 8001cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cf0:	330a      	adds	r3, #10
 8001cf2:	496e      	ldr	r1, [pc, #440]	; (8001eac <StartCdcSerialTask+0x224>)
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f7ff f8b7 	bl	8000e68 <bit16ToInt>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	4a6d      	ldr	r2, [pc, #436]	; (8001eb4 <StartCdcSerialTask+0x22c>)
 8001cfe:	6093      	str	r3, [r2, #8]

		i = 12;
 8001d00:	230c      	movs	r3, #12
 8001d02:	62fb      	str	r3, [r7, #44]	; 0x2c
		throtle_scale = bit16ToInt(i, serialBuffer);
 8001d04:	4969      	ldr	r1, [pc, #420]	; (8001eac <StartCdcSerialTask+0x224>)
 8001d06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001d08:	f7ff f8ae 	bl	8000e68 <bit16ToInt>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	4a6a      	ldr	r2, [pc, #424]	; (8001eb8 <StartCdcSerialTask+0x230>)
 8001d10:	6013      	str	r3, [r2, #0]

		i = 14;
 8001d12:	230e      	movs	r3, #14
 8001d14:	62fb      	str	r3, [r7, #44]	; 0x2c
		set_point[0] = bit16ToInt(i, serialBuffer);
 8001d16:	4965      	ldr	r1, [pc, #404]	; (8001eac <StartCdcSerialTask+0x224>)
 8001d18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001d1a:	f7ff f8a5 	bl	8000e68 <bit16ToInt>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	4a66      	ldr	r2, [pc, #408]	; (8001ebc <StartCdcSerialTask+0x234>)
 8001d22:	6013      	str	r3, [r2, #0]
		set_point[1] = bit16ToInt(i + 2, serialBuffer);
 8001d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d26:	3302      	adds	r3, #2
 8001d28:	4960      	ldr	r1, [pc, #384]	; (8001eac <StartCdcSerialTask+0x224>)
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff f89c 	bl	8000e68 <bit16ToInt>
 8001d30:	4603      	mov	r3, r0
 8001d32:	4a62      	ldr	r2, [pc, #392]	; (8001ebc <StartCdcSerialTask+0x234>)
 8001d34:	6053      	str	r3, [r2, #4]
		set_point[2] = bit16ToInt(i + 4, serialBuffer);
 8001d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d38:	3304      	adds	r3, #4
 8001d3a:	495c      	ldr	r1, [pc, #368]	; (8001eac <StartCdcSerialTask+0x224>)
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff f893 	bl	8000e68 <bit16ToInt>
 8001d42:	4603      	mov	r3, r0
 8001d44:	4a5d      	ldr	r2, [pc, #372]	; (8001ebc <StartCdcSerialTask+0x234>)
 8001d46:	6093      	str	r3, [r2, #8]
		set_point[3] = bit16ToInt(i + 6, serialBuffer);
 8001d48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d4a:	3306      	adds	r3, #6
 8001d4c:	4957      	ldr	r1, [pc, #348]	; (8001eac <StartCdcSerialTask+0x224>)
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff f88a 	bl	8000e68 <bit16ToInt>
 8001d54:	4603      	mov	r3, r0
 8001d56:	4a59      	ldr	r2, [pc, #356]	; (8001ebc <StartCdcSerialTask+0x234>)
 8001d58:	60d3      	str	r3, [r2, #12]

		i = 22;
 8001d5a:	2316      	movs	r3, #22
 8001d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
		c_yaw[0] = bit16ToInt(i, serialBuffer);
 8001d5e:	4953      	ldr	r1, [pc, #332]	; (8001eac <StartCdcSerialTask+0x224>)
 8001d60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001d62:	f7ff f881 	bl	8000e68 <bit16ToInt>
 8001d66:	4603      	mov	r3, r0
 8001d68:	4a55      	ldr	r2, [pc, #340]	; (8001ec0 <StartCdcSerialTask+0x238>)
 8001d6a:	6013      	str	r3, [r2, #0]
		c_yaw[1] = bit16ToInt(i + 2, serialBuffer);
 8001d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d6e:	3302      	adds	r3, #2
 8001d70:	494e      	ldr	r1, [pc, #312]	; (8001eac <StartCdcSerialTask+0x224>)
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff f878 	bl	8000e68 <bit16ToInt>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	4a51      	ldr	r2, [pc, #324]	; (8001ec0 <StartCdcSerialTask+0x238>)
 8001d7c:	6053      	str	r3, [r2, #4]
		c_yaw[2] = bit16ToInt(i + 4, serialBuffer);
 8001d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d80:	3304      	adds	r3, #4
 8001d82:	494a      	ldr	r1, [pc, #296]	; (8001eac <StartCdcSerialTask+0x224>)
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff f86f 	bl	8000e68 <bit16ToInt>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	4a4c      	ldr	r2, [pc, #304]	; (8001ec0 <StartCdcSerialTask+0x238>)
 8001d8e:	6093      	str	r3, [r2, #8]
		c_pitch[0] = bit16ToInt(i + 6, serialBuffer);
 8001d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d92:	3306      	adds	r3, #6
 8001d94:	4945      	ldr	r1, [pc, #276]	; (8001eac <StartCdcSerialTask+0x224>)
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7ff f866 	bl	8000e68 <bit16ToInt>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	4a49      	ldr	r2, [pc, #292]	; (8001ec4 <StartCdcSerialTask+0x23c>)
 8001da0:	6013      	str	r3, [r2, #0]
		c_pitch[1] = bit16ToInt(i + 8, serialBuffer);
 8001da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da4:	3308      	adds	r3, #8
 8001da6:	4941      	ldr	r1, [pc, #260]	; (8001eac <StartCdcSerialTask+0x224>)
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff f85d 	bl	8000e68 <bit16ToInt>
 8001dae:	4603      	mov	r3, r0
 8001db0:	4a44      	ldr	r2, [pc, #272]	; (8001ec4 <StartCdcSerialTask+0x23c>)
 8001db2:	6053      	str	r3, [r2, #4]
		c_pitch[2] = bit16ToInt(i + 10, serialBuffer);
 8001db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db6:	330a      	adds	r3, #10
 8001db8:	493c      	ldr	r1, [pc, #240]	; (8001eac <StartCdcSerialTask+0x224>)
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff f854 	bl	8000e68 <bit16ToInt>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	4a40      	ldr	r2, [pc, #256]	; (8001ec4 <StartCdcSerialTask+0x23c>)
 8001dc4:	6093      	str	r3, [r2, #8]
		c_roll[0] = bit16ToInt(i + 12, serialBuffer);
 8001dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dc8:	330c      	adds	r3, #12
 8001dca:	4938      	ldr	r1, [pc, #224]	; (8001eac <StartCdcSerialTask+0x224>)
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff f84b 	bl	8000e68 <bit16ToInt>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	4a3c      	ldr	r2, [pc, #240]	; (8001ec8 <StartCdcSerialTask+0x240>)
 8001dd6:	6013      	str	r3, [r2, #0]
		c_roll[1] = bit16ToInt(i + 14, serialBuffer);
 8001dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dda:	330e      	adds	r3, #14
 8001ddc:	4933      	ldr	r1, [pc, #204]	; (8001eac <StartCdcSerialTask+0x224>)
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff f842 	bl	8000e68 <bit16ToInt>
 8001de4:	4603      	mov	r3, r0
 8001de6:	4a38      	ldr	r2, [pc, #224]	; (8001ec8 <StartCdcSerialTask+0x240>)
 8001de8:	6053      	str	r3, [r2, #4]
		c_roll[2] = bit16ToInt(i + 16, serialBuffer);
 8001dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dec:	3310      	adds	r3, #16
 8001dee:	492f      	ldr	r1, [pc, #188]	; (8001eac <StartCdcSerialTask+0x224>)
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff f839 	bl	8000e68 <bit16ToInt>
 8001df6:	4603      	mov	r3, r0
 8001df8:	4a33      	ldr	r2, [pc, #204]	; (8001ec8 <StartCdcSerialTask+0x240>)
 8001dfa:	6093      	str	r3, [r2, #8]
		c_depth[0] = bit16ToInt(i + 18, serialBuffer);
 8001dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dfe:	3312      	adds	r3, #18
 8001e00:	492a      	ldr	r1, [pc, #168]	; (8001eac <StartCdcSerialTask+0x224>)
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff f830 	bl	8000e68 <bit16ToInt>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	4a30      	ldr	r2, [pc, #192]	; (8001ecc <StartCdcSerialTask+0x244>)
 8001e0c:	6013      	str	r3, [r2, #0]
		c_depth[1] = bit16ToInt(i + 20, serialBuffer);
 8001e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e10:	3314      	adds	r3, #20
 8001e12:	4926      	ldr	r1, [pc, #152]	; (8001eac <StartCdcSerialTask+0x224>)
 8001e14:	4618      	mov	r0, r3
 8001e16:	f7ff f827 	bl	8000e68 <bit16ToInt>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	4a2b      	ldr	r2, [pc, #172]	; (8001ecc <StartCdcSerialTask+0x244>)
 8001e1e:	6053      	str	r3, [r2, #4]
		c_depth[2] = bit16ToInt(i + 22, serialBuffer);
 8001e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e22:	3316      	adds	r3, #22
 8001e24:	4921      	ldr	r1, [pc, #132]	; (8001eac <StartCdcSerialTask+0x224>)
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff f81e 	bl	8000e68 <bit16ToInt>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	4a27      	ldr	r2, [pc, #156]	; (8001ecc <StartCdcSerialTask+0x244>)
 8001e30:	6093      	str	r3, [r2, #8]

		i = 46;
 8001e32:	232e      	movs	r3, #46	; 0x2e
 8001e34:	62fb      	str	r3, [r7, #44]	; 0x2c
		lumen_power = bit16ToInt(i, serialBuffer);
 8001e36:	491d      	ldr	r1, [pc, #116]	; (8001eac <StartCdcSerialTask+0x224>)
 8001e38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001e3a:	f7ff f815 	bl	8000e68 <bit16ToInt>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	4a23      	ldr	r2, [pc, #140]	; (8001ed0 <StartCdcSerialTask+0x248>)
 8001e42:	6013      	str	r3, [r2, #0]

		i = 48;
 8001e44:	2330      	movs	r3, #48	; 0x30
 8001e46:	62fb      	str	r3, [r7, #44]	; 0x2c
		movement_mode = serialBuffer[i];
 8001e48:	4a18      	ldr	r2, [pc, #96]	; (8001eac <StartCdcSerialTask+0x224>)
 8001e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e4c:	4413      	add	r3, r2
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	461a      	mov	r2, r3
 8001e52:	4b20      	ldr	r3, [pc, #128]	; (8001ed4 <StartCdcSerialTask+0x24c>)
 8001e54:	601a      	str	r2, [r3, #0]
		operation_mode = serialBuffer[i + 1];
 8001e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e58:	3301      	adds	r3, #1
 8001e5a:	4a14      	ldr	r2, [pc, #80]	; (8001eac <StartCdcSerialTask+0x224>)
 8001e5c:	5cd3      	ldrb	r3, [r2, r3]
 8001e5e:	461a      	mov	r2, r3
 8001e60:	4b1d      	ldr	r3, [pc, #116]	; (8001ed8 <StartCdcSerialTask+0x250>)
 8001e62:	601a      	str	r2, [r3, #0]
		arm_hw = serialBuffer[i + 2];
 8001e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e66:	3302      	adds	r3, #2
 8001e68:	4a10      	ldr	r2, [pc, #64]	; (8001eac <StartCdcSerialTask+0x224>)
 8001e6a:	5cd3      	ldrb	r3, [r2, r3]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	4b1b      	ldr	r3, [pc, #108]	; (8001edc <StartCdcSerialTask+0x254>)
 8001e70:	601a      	str	r2, [r3, #0]
		arm_sw = serialBuffer[i + 3];
 8001e72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e74:	3303      	adds	r3, #3
 8001e76:	4a0d      	ldr	r2, [pc, #52]	; (8001eac <StartCdcSerialTask+0x224>)
 8001e78:	5cd3      	ldrb	r3, [r2, r3]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	4b18      	ldr	r3, [pc, #96]	; (8001ee0 <StartCdcSerialTask+0x258>)
 8001e7e:	601a      	str	r2, [r3, #0]
		imu_reset = serialBuffer[i + 4];
 8001e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e82:	3304      	adds	r3, #4
 8001e84:	4a09      	ldr	r2, [pc, #36]	; (8001eac <StartCdcSerialTask+0x224>)
 8001e86:	5cd3      	ldrb	r3, [r2, r3]
 8001e88:	461a      	mov	r2, r3
 8001e8a:	4b16      	ldr	r3, [pc, #88]	; (8001ee4 <StartCdcSerialTask+0x25c>)
 8001e8c:	601a      	str	r2, [r3, #0]

		if (HAL_GetTick() - lastReceiveTime > cdcTimeOut) {
 8001e8e:	f002 f885 	bl	8003f9c <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	4b14      	ldr	r3, [pc, #80]	; (8001ee8 <StartCdcSerialTask+0x260>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	4a14      	ldr	r2, [pc, #80]	; (8001eec <StartCdcSerialTask+0x264>)
 8001e9c:	6812      	ldr	r2, [r2, #0]
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d928      	bls.n	8001ef4 <StartCdcSerialTask+0x26c>
			cdcHeartBeat = 0;
 8001ea2:	4b13      	ldr	r3, [pc, #76]	; (8001ef0 <StartCdcSerialTask+0x268>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	e027      	b.n	8001efa <StartCdcSerialTask+0x272>
 8001eaa:	bf00      	nop
 8001eac:	2000093c 	.word	0x2000093c
 8001eb0:	2000097c 	.word	0x2000097c
 8001eb4:	20000988 	.word	0x20000988
 8001eb8:	20000994 	.word	0x20000994
 8001ebc:	20000998 	.word	0x20000998
 8001ec0:	200009c0 	.word	0x200009c0
 8001ec4:	200009cc 	.word	0x200009cc
 8001ec8:	200009d8 	.word	0x200009d8
 8001ecc:	200009e4 	.word	0x200009e4
 8001ed0:	200009a8 	.word	0x200009a8
 8001ed4:	200009ac 	.word	0x200009ac
 8001ed8:	200009b0 	.word	0x200009b0
 8001edc:	200009b4 	.word	0x200009b4
 8001ee0:	200009b8 	.word	0x200009b8
 8001ee4:	200009bc 	.word	0x200009bc
 8001ee8:	20000a30 	.word	0x20000a30
 8001eec:	20000004 	.word	0x20000004
 8001ef0:	20000000 	.word	0x20000000
		} else {
			cdcHeartBeat = 1;
 8001ef4:	4b6b      	ldr	r3, [pc, #428]	; (80020a4 <StartCdcSerialTask+0x41c>)
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	601a      	str	r2, [r3, #0]
		}

		if (cdcHeartBeat == 0) {
 8001efa:	4b6a      	ldr	r3, [pc, #424]	; (80020a4 <StartCdcSerialTask+0x41c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d123      	bne.n	8001f4a <StartCdcSerialTask+0x2c2>
			vel_linear[0] = 0; vel_linear[1] = 0; vel_linear[2] = 0;
 8001f02:	4b69      	ldr	r3, [pc, #420]	; (80020a8 <StartCdcSerialTask+0x420>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	4b67      	ldr	r3, [pc, #412]	; (80020a8 <StartCdcSerialTask+0x420>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	605a      	str	r2, [r3, #4]
 8001f0e:	4b66      	ldr	r3, [pc, #408]	; (80020a8 <StartCdcSerialTask+0x420>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	609a      	str	r2, [r3, #8]
			vel_angular[0] = 0; vel_angular[1] = 0; vel_angular[2] = 0;
 8001f14:	4b65      	ldr	r3, [pc, #404]	; (80020ac <StartCdcSerialTask+0x424>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	4b64      	ldr	r3, [pc, #400]	; (80020ac <StartCdcSerialTask+0x424>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	605a      	str	r2, [r3, #4]
 8001f20:	4b62      	ldr	r3, [pc, #392]	; (80020ac <StartCdcSerialTask+0x424>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	609a      	str	r2, [r3, #8]
			set_point[0] = 0; set_point[1] = 0; set_point[2] = 0; set_point[3] = 0;
 8001f26:	4b62      	ldr	r3, [pc, #392]	; (80020b0 <StartCdcSerialTask+0x428>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	4b60      	ldr	r3, [pc, #384]	; (80020b0 <StartCdcSerialTask+0x428>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	605a      	str	r2, [r3, #4]
 8001f32:	4b5f      	ldr	r3, [pc, #380]	; (80020b0 <StartCdcSerialTask+0x428>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	4b5d      	ldr	r3, [pc, #372]	; (80020b0 <StartCdcSerialTask+0x428>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	60da      	str	r2, [r3, #12]
			movement_mode = 0;
 8001f3e:	4b5d      	ldr	r3, [pc, #372]	; (80020b4 <StartCdcSerialTask+0x42c>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	601a      	str	r2, [r3, #0]
			operation_mode = 0;
 8001f44:	4b5c      	ldr	r3, [pc, #368]	; (80020b8 <StartCdcSerialTask+0x430>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	601a      	str	r2, [r3, #0]
		}

	//Transmit
		Message_IMU[0] = bno055_yaw * 10;
 8001f4a:	4b5c      	ldr	r3, [pc, #368]	; (80020bc <StartCdcSerialTask+0x434>)
 8001f4c:	edd3 7a00 	vldr	s15, [r3]
 8001f50:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001f54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f5c:	ee17 3a90 	vmov	r3, s15
 8001f60:	b21a      	sxth	r2, r3
 8001f62:	4b57      	ldr	r3, [pc, #348]	; (80020c0 <StartCdcSerialTask+0x438>)
 8001f64:	801a      	strh	r2, [r3, #0]
		Message_IMU[1] = bno055_pitch * 10;
 8001f66:	4b57      	ldr	r3, [pc, #348]	; (80020c4 <StartCdcSerialTask+0x43c>)
 8001f68:	edd3 7a00 	vldr	s15, [r3]
 8001f6c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001f70:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f78:	ee17 3a90 	vmov	r3, s15
 8001f7c:	b21a      	sxth	r2, r3
 8001f7e:	4b50      	ldr	r3, [pc, #320]	; (80020c0 <StartCdcSerialTask+0x438>)
 8001f80:	805a      	strh	r2, [r3, #2]
		Message_IMU[2] = bno055_roll * 10;
 8001f82:	4b51      	ldr	r3, [pc, #324]	; (80020c8 <StartCdcSerialTask+0x440>)
 8001f84:	edd3 7a00 	vldr	s15, [r3]
 8001f88:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001f8c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f90:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f94:	ee17 3a90 	vmov	r3, s15
 8001f98:	b21a      	sxth	r2, r3
 8001f9a:	4b49      	ldr	r3, [pc, #292]	; (80020c0 <StartCdcSerialTask+0x438>)
 8001f9c:	809a      	strh	r2, [r3, #4]

		Message_depth = depthValue * 100;
 8001f9e:	4b4b      	ldr	r3, [pc, #300]	; (80020cc <StartCdcSerialTask+0x444>)
 8001fa0:	edd3 7a00 	vldr	s15, [r3]
 8001fa4:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80020d0 <StartCdcSerialTask+0x448>
 8001fa8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fb0:	ee17 3a90 	vmov	r3, s15
 8001fb4:	b21a      	sxth	r2, r3
 8001fb6:	4b47      	ldr	r3, [pc, #284]	; (80020d4 <StartCdcSerialTask+0x44c>)
 8001fb8:	801a      	strh	r2, [r3, #0]
		Message_inPressure = pressureInside * 100;
 8001fba:	4b47      	ldr	r3, [pc, #284]	; (80020d8 <StartCdcSerialTask+0x450>)
 8001fbc:	edd3 7a00 	vldr	s15, [r3]
 8001fc0:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80020d0 <StartCdcSerialTask+0x448>
 8001fc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fc8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fcc:	ee17 3a90 	vmov	r3, s15
 8001fd0:	b21a      	sxth	r2, r3
 8001fd2:	4b42      	ldr	r3, [pc, #264]	; (80020dc <StartCdcSerialTask+0x454>)
 8001fd4:	801a      	strh	r2, [r3, #0]

		Message_batt1 = batt1_volt * 100;
 8001fd6:	4b42      	ldr	r3, [pc, #264]	; (80020e0 <StartCdcSerialTask+0x458>)
 8001fd8:	edd3 7a00 	vldr	s15, [r3]
 8001fdc:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80020d0 <StartCdcSerialTask+0x448>
 8001fe0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fe4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fe8:	ee17 3a90 	vmov	r3, s15
 8001fec:	b21a      	sxth	r2, r3
 8001fee:	4b3d      	ldr	r3, [pc, #244]	; (80020e4 <StartCdcSerialTask+0x45c>)
 8001ff0:	801a      	strh	r2, [r3, #0]
		Message_batt2 = batt2_volt * 100;
 8001ff2:	4b3d      	ldr	r3, [pc, #244]	; (80020e8 <StartCdcSerialTask+0x460>)
 8001ff4:	edd3 7a00 	vldr	s15, [r3]
 8001ff8:	ed9f 7a35 	vldr	s14, [pc, #212]	; 80020d0 <StartCdcSerialTask+0x448>
 8001ffc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002000:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002004:	ee17 3a90 	vmov	r3, s15
 8002008:	b21a      	sxth	r2, r3
 800200a:	4b38      	ldr	r3, [pc, #224]	; (80020ec <StartCdcSerialTask+0x464>)
 800200c:	801a      	strh	r2, [r3, #0]

		int16_t Message_Values[] = { Message_IMU[0],Message_IMU[1], Message_IMU[2], Message_depth, Message_inPressure,
 800200e:	4b2c      	ldr	r3, [pc, #176]	; (80020c0 <StartCdcSerialTask+0x438>)
 8002010:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002014:	81bb      	strh	r3, [r7, #12]
 8002016:	4b2a      	ldr	r3, [pc, #168]	; (80020c0 <StartCdcSerialTask+0x438>)
 8002018:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800201c:	81fb      	strh	r3, [r7, #14]
 800201e:	4b28      	ldr	r3, [pc, #160]	; (80020c0 <StartCdcSerialTask+0x438>)
 8002020:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002024:	823b      	strh	r3, [r7, #16]
 8002026:	4b2b      	ldr	r3, [pc, #172]	; (80020d4 <StartCdcSerialTask+0x44c>)
 8002028:	f9b3 3000 	ldrsh.w	r3, [r3]
 800202c:	827b      	strh	r3, [r7, #18]
 800202e:	4b2b      	ldr	r3, [pc, #172]	; (80020dc <StartCdcSerialTask+0x454>)
 8002030:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002034:	82bb      	strh	r3, [r7, #20]
 8002036:	4b2b      	ldr	r3, [pc, #172]	; (80020e4 <StartCdcSerialTask+0x45c>)
 8002038:	f9b3 3000 	ldrsh.w	r3, [r3]
 800203c:	82fb      	strh	r3, [r7, #22]
 800203e:	4b2b      	ldr	r3, [pc, #172]	; (80020ec <StartCdcSerialTask+0x464>)
 8002040:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002044:	833b      	strh	r3, [r7, #24]
 8002046:	4b2a      	ldr	r3, [pc, #168]	; (80020f0 <StartCdcSerialTask+0x468>)
 8002048:	f9b3 3000 	ldrsh.w	r3, [r3]
 800204c:	837b      	strh	r3, [r7, #26]
 800204e:	4b29      	ldr	r3, [pc, #164]	; (80020f4 <StartCdcSerialTask+0x46c>)
 8002050:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002054:	83bb      	strh	r3, [r7, #28]
 8002056:	4b28      	ldr	r3, [pc, #160]	; (80020f8 <StartCdcSerialTask+0x470>)
 8002058:	f9b3 3000 	ldrsh.w	r3, [r3]
 800205c:	83fb      	strh	r3, [r7, #30]
 800205e:	4b27      	ldr	r3, [pc, #156]	; (80020fc <StartCdcSerialTask+0x474>)
 8002060:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002064:	843b      	strh	r3, [r7, #32]
 8002066:	4b26      	ldr	r3, [pc, #152]	; (8002100 <StartCdcSerialTask+0x478>)
 8002068:	f9b3 3000 	ldrsh.w	r3, [r3]
 800206c:	847b      	strh	r3, [r7, #34]	; 0x22
 800206e:	4b25      	ldr	r3, [pc, #148]	; (8002104 <StartCdcSerialTask+0x47c>)
 8002070:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002074:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002076:	4b24      	ldr	r3, [pc, #144]	; (8002108 <StartCdcSerialTask+0x480>)
 8002078:	f9b3 3000 	ldrsh.w	r3, [r3]
 800207c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800207e:	4b23      	ldr	r3, [pc, #140]	; (800210c <StartCdcSerialTask+0x484>)
 8002080:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002084:	853b      	strh	r3, [r7, #40]	; 0x28
				Message_batt1, Message_batt2, Message_H_FR, Message_H_FL, Message_H_BR, Message_H_BL, Message_V_FR, Message_V_FL, Message_V_BR, Message_V_BL};


		merge16(Message_Values, transmitBuffer,
 8002086:	f107 030c 	add.w	r3, r7, #12
 800208a:	220f      	movs	r2, #15
 800208c:	4920      	ldr	r1, [pc, #128]	; (8002110 <StartCdcSerialTask+0x488>)
 800208e:	4618      	mov	r0, r3
 8002090:	f7fe ff0a 	bl	8000ea8 <merge16>
				sizeof(Message_Values) / sizeof(Message_Values[0]));

		CDC_Transmit_FS(transmitBuffer, sizeof(transmitBuffer));
 8002094:	211e      	movs	r1, #30
 8002096:	481e      	ldr	r0, [pc, #120]	; (8002110 <StartCdcSerialTask+0x488>)
 8002098:	f00d f96c 	bl	800f374 <CDC_Transmit_FS>

    osDelay(1);
 800209c:	2001      	movs	r0, #1
 800209e:	f00b feb2 	bl	800de06 <osDelay>
  {
 80020a2:	e5f7      	b.n	8001c94 <StartCdcSerialTask+0xc>
 80020a4:	20000000 	.word	0x20000000
 80020a8:	2000097c 	.word	0x2000097c
 80020ac:	20000988 	.word	0x20000988
 80020b0:	20000998 	.word	0x20000998
 80020b4:	200009ac 	.word	0x200009ac
 80020b8:	200009b0 	.word	0x200009b0
 80020bc:	20000a50 	.word	0x20000a50
 80020c0:	20000a10 	.word	0x20000a10
 80020c4:	20000a54 	.word	0x20000a54
 80020c8:	20000a58 	.word	0x20000a58
 80020cc:	20000a94 	.word	0x20000a94
 80020d0:	42c80000 	.word	0x42c80000
 80020d4:	20000a18 	.word	0x20000a18
 80020d8:	20000a90 	.word	0x20000a90
 80020dc:	20000a16 	.word	0x20000a16
 80020e0:	20000b68 	.word	0x20000b68
 80020e4:	20000a1a 	.word	0x20000a1a
 80020e8:	20000b6c 	.word	0x20000b6c
 80020ec:	20000a1c 	.word	0x20000a1c
 80020f0:	20000a1e 	.word	0x20000a1e
 80020f4:	20000a20 	.word	0x20000a20
 80020f8:	20000a22 	.word	0x20000a22
 80020fc:	20000a24 	.word	0x20000a24
 8002100:	20000a26 	.word	0x20000a26
 8002104:	20000a28 	.word	0x20000a28
 8002108:	20000a2a 	.word	0x20000a2a
 800210c:	20000a2c 	.word	0x20000a2c
 8002110:	200009f0 	.word	0x200009f0

08002114 <StartMovementTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMovementTask */
void StartMovementTask(void const * argument)
{
 8002114:	b5b0      	push	{r4, r5, r7, lr}
 8002116:	ed2d 8b02 	vpush	{d8}
 800211a:	b084      	sub	sp, #16
 800211c:	af02      	add	r7, sp, #8
 800211e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMovementTask */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, SET);
 8002120:	2201      	movs	r2, #1
 8002122:	2104      	movs	r1, #4
 8002124:	4886      	ldr	r0, [pc, #536]	; (8002340 <StartMovementTask+0x22c>)
 8002126:	f003 fa13 	bl	8005550 <HAL_GPIO_WritePin>
  /* Infinite loop */
  for(;;)
  {
		//Movement Calculation
		if (movement_mode == 0) { // Fully Manual
 800212a:	4b86      	ldr	r3, [pc, #536]	; (8002344 <StartMovementTask+0x230>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d153      	bne.n	80021da <StartMovementTask+0xc6>
			//Horizontal Thruster  Forwaed  |||   Lateral   |||    Yaw
			H_FR = +vel_linear[0] - vel_linear[1] + vel_angular[2];
 8002132:	4b85      	ldr	r3, [pc, #532]	; (8002348 <StartMovementTask+0x234>)
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	4b84      	ldr	r3, [pc, #528]	; (8002348 <StartMovementTask+0x234>)
 8002138:	685b      	ldr	r3, [r3, #4]
 800213a:	1ad2      	subs	r2, r2, r3
 800213c:	4b83      	ldr	r3, [pc, #524]	; (800234c <StartMovementTask+0x238>)
 800213e:	689b      	ldr	r3, [r3, #8]
 8002140:	4413      	add	r3, r2
 8002142:	4a83      	ldr	r2, [pc, #524]	; (8002350 <StartMovementTask+0x23c>)
 8002144:	6013      	str	r3, [r2, #0]
			H_FL = -vel_linear[0] - vel_linear[1] - vel_angular[2];
 8002146:	4b80      	ldr	r3, [pc, #512]	; (8002348 <StartMovementTask+0x234>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	425a      	negs	r2, r3
 800214c:	4b7e      	ldr	r3, [pc, #504]	; (8002348 <StartMovementTask+0x234>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	1ad2      	subs	r2, r2, r3
 8002152:	4b7e      	ldr	r3, [pc, #504]	; (800234c <StartMovementTask+0x238>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	4a7e      	ldr	r2, [pc, #504]	; (8002354 <StartMovementTask+0x240>)
 800215a:	6013      	str	r3, [r2, #0]
			H_BR = +vel_linear[0] + vel_linear[1] - vel_angular[2];
 800215c:	4b7a      	ldr	r3, [pc, #488]	; (8002348 <StartMovementTask+0x234>)
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	4b79      	ldr	r3, [pc, #484]	; (8002348 <StartMovementTask+0x234>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	441a      	add	r2, r3
 8002166:	4b79      	ldr	r3, [pc, #484]	; (800234c <StartMovementTask+0x238>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	4a7a      	ldr	r2, [pc, #488]	; (8002358 <StartMovementTask+0x244>)
 800216e:	6013      	str	r3, [r2, #0]
			H_BL = -vel_linear[0] + vel_linear[1] + vel_angular[2];
 8002170:	4b75      	ldr	r3, [pc, #468]	; (8002348 <StartMovementTask+0x234>)
 8002172:	685a      	ldr	r2, [r3, #4]
 8002174:	4b74      	ldr	r3, [pc, #464]	; (8002348 <StartMovementTask+0x234>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	1ad2      	subs	r2, r2, r3
 800217a:	4b74      	ldr	r3, [pc, #464]	; (800234c <StartMovementTask+0x238>)
 800217c:	689b      	ldr	r3, [r3, #8]
 800217e:	4413      	add	r3, r2
 8002180:	4a76      	ldr	r2, [pc, #472]	; (800235c <StartMovementTask+0x248>)
 8002182:	6013      	str	r3, [r2, #0]

			//Vertical Thruster    Up/Down  |||   Pitch     |||   Roll
			V_FR = -vel_linear[2] - vel_angular[0] + vel_angular[1];
 8002184:	4b70      	ldr	r3, [pc, #448]	; (8002348 <StartMovementTask+0x234>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	425a      	negs	r2, r3
 800218a:	4b70      	ldr	r3, [pc, #448]	; (800234c <StartMovementTask+0x238>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	1ad2      	subs	r2, r2, r3
 8002190:	4b6e      	ldr	r3, [pc, #440]	; (800234c <StartMovementTask+0x238>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	4413      	add	r3, r2
 8002196:	4a72      	ldr	r2, [pc, #456]	; (8002360 <StartMovementTask+0x24c>)
 8002198:	6013      	str	r3, [r2, #0]
			V_FL = -vel_linear[2] - vel_angular[0] - vel_angular[1];
 800219a:	4b6b      	ldr	r3, [pc, #428]	; (8002348 <StartMovementTask+0x234>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	425a      	negs	r2, r3
 80021a0:	4b6a      	ldr	r3, [pc, #424]	; (800234c <StartMovementTask+0x238>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	1ad2      	subs	r2, r2, r3
 80021a6:	4b69      	ldr	r3, [pc, #420]	; (800234c <StartMovementTask+0x238>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	4a6d      	ldr	r2, [pc, #436]	; (8002364 <StartMovementTask+0x250>)
 80021ae:	6013      	str	r3, [r2, #0]
			V_BR = -vel_linear[2] + vel_angular[0] + vel_angular[1];
 80021b0:	4b66      	ldr	r3, [pc, #408]	; (800234c <StartMovementTask+0x238>)
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	4b64      	ldr	r3, [pc, #400]	; (8002348 <StartMovementTask+0x234>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	1ad2      	subs	r2, r2, r3
 80021ba:	4b64      	ldr	r3, [pc, #400]	; (800234c <StartMovementTask+0x238>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	4413      	add	r3, r2
 80021c0:	4a69      	ldr	r2, [pc, #420]	; (8002368 <StartMovementTask+0x254>)
 80021c2:	6013      	str	r3, [r2, #0]
			V_BL = -vel_linear[2] + vel_angular[0] - vel_angular[1];
 80021c4:	4b61      	ldr	r3, [pc, #388]	; (800234c <StartMovementTask+0x238>)
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	4b5f      	ldr	r3, [pc, #380]	; (8002348 <StartMovementTask+0x234>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	1ad2      	subs	r2, r2, r3
 80021ce:	4b5f      	ldr	r3, [pc, #380]	; (800234c <StartMovementTask+0x238>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	4a65      	ldr	r2, [pc, #404]	; (800236c <StartMovementTask+0x258>)
 80021d6:	6013      	str	r3, [r2, #0]
 80021d8:	e21e      	b.n	8002618 <StartMovementTask+0x504>
		}

		else if (movement_mode == 1) { // Stabilize
 80021da:	4b5a      	ldr	r3, [pc, #360]	; (8002344 <StartMovementTask+0x230>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	f040 80cc 	bne.w	800237c <StartMovementTask+0x268>
			//Horizontal Thruster  Forwaed  |||   Lateral   |||    Yaw
			H_FR = +vel_linear[0] - vel_linear[1] + yaw.output;
 80021e4:	4b58      	ldr	r3, [pc, #352]	; (8002348 <StartMovementTask+0x234>)
 80021e6:	681a      	ldr	r2, [r3, #0]
 80021e8:	4b57      	ldr	r3, [pc, #348]	; (8002348 <StartMovementTask+0x234>)
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	ee07 3a90 	vmov	s15, r3
 80021f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021f6:	4b5e      	ldr	r3, [pc, #376]	; (8002370 <StartMovementTask+0x25c>)
 80021f8:	edd3 7a04 	vldr	s15, [r3, #16]
 80021fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002200:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002204:	ee17 2a90 	vmov	r2, s15
 8002208:	4b51      	ldr	r3, [pc, #324]	; (8002350 <StartMovementTask+0x23c>)
 800220a:	601a      	str	r2, [r3, #0]
			H_FL = -vel_linear[0] - vel_linear[1] - yaw.output;
 800220c:	4b4e      	ldr	r3, [pc, #312]	; (8002348 <StartMovementTask+0x234>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	425a      	negs	r2, r3
 8002212:	4b4d      	ldr	r3, [pc, #308]	; (8002348 <StartMovementTask+0x234>)
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	ee07 3a90 	vmov	s15, r3
 800221c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002220:	4b53      	ldr	r3, [pc, #332]	; (8002370 <StartMovementTask+0x25c>)
 8002222:	edd3 7a04 	vldr	s15, [r3, #16]
 8002226:	ee77 7a67 	vsub.f32	s15, s14, s15
 800222a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800222e:	ee17 2a90 	vmov	r2, s15
 8002232:	4b48      	ldr	r3, [pc, #288]	; (8002354 <StartMovementTask+0x240>)
 8002234:	601a      	str	r2, [r3, #0]
			H_BR = +vel_linear[0] + vel_linear[1] - yaw.output;
 8002236:	4b44      	ldr	r3, [pc, #272]	; (8002348 <StartMovementTask+0x234>)
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	4b43      	ldr	r3, [pc, #268]	; (8002348 <StartMovementTask+0x234>)
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	4413      	add	r3, r2
 8002240:	ee07 3a90 	vmov	s15, r3
 8002244:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002248:	4b49      	ldr	r3, [pc, #292]	; (8002370 <StartMovementTask+0x25c>)
 800224a:	edd3 7a04 	vldr	s15, [r3, #16]
 800224e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002252:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002256:	ee17 2a90 	vmov	r2, s15
 800225a:	4b3f      	ldr	r3, [pc, #252]	; (8002358 <StartMovementTask+0x244>)
 800225c:	601a      	str	r2, [r3, #0]
			H_BL = -vel_linear[0] + vel_linear[1] + yaw.output;
 800225e:	4b3a      	ldr	r3, [pc, #232]	; (8002348 <StartMovementTask+0x234>)
 8002260:	685a      	ldr	r2, [r3, #4]
 8002262:	4b39      	ldr	r3, [pc, #228]	; (8002348 <StartMovementTask+0x234>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	ee07 3a90 	vmov	s15, r3
 800226c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002270:	4b3f      	ldr	r3, [pc, #252]	; (8002370 <StartMovementTask+0x25c>)
 8002272:	edd3 7a04 	vldr	s15, [r3, #16]
 8002276:	ee77 7a27 	vadd.f32	s15, s14, s15
 800227a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800227e:	ee17 2a90 	vmov	r2, s15
 8002282:	4b36      	ldr	r3, [pc, #216]	; (800235c <StartMovementTask+0x248>)
 8002284:	601a      	str	r2, [r3, #0]

			//Vertical Thruster    Up/Down  |||   Pitch     |||   Roll
			V_FR = -vel_linear[2] - pitch.output - roll.output;
 8002286:	4b30      	ldr	r3, [pc, #192]	; (8002348 <StartMovementTask+0x234>)
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	425b      	negs	r3, r3
 800228c:	ee07 3a90 	vmov	s15, r3
 8002290:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002294:	4b37      	ldr	r3, [pc, #220]	; (8002374 <StartMovementTask+0x260>)
 8002296:	edd3 7a04 	vldr	s15, [r3, #16]
 800229a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800229e:	4b36      	ldr	r3, [pc, #216]	; (8002378 <StartMovementTask+0x264>)
 80022a0:	edd3 7a04 	vldr	s15, [r3, #16]
 80022a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022ac:	ee17 2a90 	vmov	r2, s15
 80022b0:	4b2b      	ldr	r3, [pc, #172]	; (8002360 <StartMovementTask+0x24c>)
 80022b2:	601a      	str	r2, [r3, #0]
			V_FL = -vel_linear[2] - pitch.output + roll.output;
 80022b4:	4b24      	ldr	r3, [pc, #144]	; (8002348 <StartMovementTask+0x234>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	425b      	negs	r3, r3
 80022ba:	ee07 3a90 	vmov	s15, r3
 80022be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022c2:	4b2c      	ldr	r3, [pc, #176]	; (8002374 <StartMovementTask+0x260>)
 80022c4:	edd3 7a04 	vldr	s15, [r3, #16]
 80022c8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022cc:	4b2a      	ldr	r3, [pc, #168]	; (8002378 <StartMovementTask+0x264>)
 80022ce:	edd3 7a04 	vldr	s15, [r3, #16]
 80022d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022da:	ee17 2a90 	vmov	r2, s15
 80022de:	4b21      	ldr	r3, [pc, #132]	; (8002364 <StartMovementTask+0x250>)
 80022e0:	601a      	str	r2, [r3, #0]
			V_BR = -vel_linear[2] + pitch.output - roll.output;
 80022e2:	4b19      	ldr	r3, [pc, #100]	; (8002348 <StartMovementTask+0x234>)
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	425b      	negs	r3, r3
 80022e8:	ee07 3a90 	vmov	s15, r3
 80022ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022f0:	4b20      	ldr	r3, [pc, #128]	; (8002374 <StartMovementTask+0x260>)
 80022f2:	edd3 7a04 	vldr	s15, [r3, #16]
 80022f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022fa:	4b1f      	ldr	r3, [pc, #124]	; (8002378 <StartMovementTask+0x264>)
 80022fc:	edd3 7a04 	vldr	s15, [r3, #16]
 8002300:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002304:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002308:	ee17 2a90 	vmov	r2, s15
 800230c:	4b16      	ldr	r3, [pc, #88]	; (8002368 <StartMovementTask+0x254>)
 800230e:	601a      	str	r2, [r3, #0]
			V_BL = -vel_linear[2] + pitch.output + roll.output;
 8002310:	4b0d      	ldr	r3, [pc, #52]	; (8002348 <StartMovementTask+0x234>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	425b      	negs	r3, r3
 8002316:	ee07 3a90 	vmov	s15, r3
 800231a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800231e:	4b15      	ldr	r3, [pc, #84]	; (8002374 <StartMovementTask+0x260>)
 8002320:	edd3 7a04 	vldr	s15, [r3, #16]
 8002324:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002328:	4b13      	ldr	r3, [pc, #76]	; (8002378 <StartMovementTask+0x264>)
 800232a:	edd3 7a04 	vldr	s15, [r3, #16]
 800232e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002332:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002336:	ee17 2a90 	vmov	r2, s15
 800233a:	4b0c      	ldr	r3, [pc, #48]	; (800236c <StartMovementTask+0x258>)
 800233c:	601a      	str	r2, [r3, #0]
 800233e:	e16b      	b.n	8002618 <StartMovementTask+0x504>
 8002340:	40020800 	.word	0x40020800
 8002344:	200009ac 	.word	0x200009ac
 8002348:	2000097c 	.word	0x2000097c
 800234c:	20000988 	.word	0x20000988
 8002350:	20000b40 	.word	0x20000b40
 8002354:	20000b44 	.word	0x20000b44
 8002358:	20000b48 	.word	0x20000b48
 800235c:	20000b4c 	.word	0x20000b4c
 8002360:	20000b50 	.word	0x20000b50
 8002364:	20000b54 	.word	0x20000b54
 8002368:	20000b58 	.word	0x20000b58
 800236c:	20000b5c 	.word	0x20000b5c
 8002370:	20000a98 	.word	0x20000a98
 8002374:	20000ac0 	.word	0x20000ac0
 8002378:	20000ae8 	.word	0x20000ae8
		}

		else if (movement_mode == 2) { // Depthhold
 800237c:	4b49      	ldr	r3, [pc, #292]	; (80024a4 <StartMovementTask+0x390>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2b02      	cmp	r3, #2
 8002382:	f040 80a7 	bne.w	80024d4 <StartMovementTask+0x3c0>
			//Horizontal Thruster  Forwaed  |||   Lateral   |||    Yaw
			H_FR = +vel_linear[0] - vel_linear[1] + vel_angular[2];
 8002386:	4b48      	ldr	r3, [pc, #288]	; (80024a8 <StartMovementTask+0x394>)
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	4b47      	ldr	r3, [pc, #284]	; (80024a8 <StartMovementTask+0x394>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	1ad2      	subs	r2, r2, r3
 8002390:	4b46      	ldr	r3, [pc, #280]	; (80024ac <StartMovementTask+0x398>)
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	4413      	add	r3, r2
 8002396:	4a46      	ldr	r2, [pc, #280]	; (80024b0 <StartMovementTask+0x39c>)
 8002398:	6013      	str	r3, [r2, #0]
			H_FL = -vel_linear[0] - vel_linear[1] - vel_angular[2];
 800239a:	4b43      	ldr	r3, [pc, #268]	; (80024a8 <StartMovementTask+0x394>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	425a      	negs	r2, r3
 80023a0:	4b41      	ldr	r3, [pc, #260]	; (80024a8 <StartMovementTask+0x394>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	1ad2      	subs	r2, r2, r3
 80023a6:	4b41      	ldr	r3, [pc, #260]	; (80024ac <StartMovementTask+0x398>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	4a41      	ldr	r2, [pc, #260]	; (80024b4 <StartMovementTask+0x3a0>)
 80023ae:	6013      	str	r3, [r2, #0]
			H_BR = +vel_linear[0] + vel_linear[1] - vel_angular[2];
 80023b0:	4b3d      	ldr	r3, [pc, #244]	; (80024a8 <StartMovementTask+0x394>)
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	4b3c      	ldr	r3, [pc, #240]	; (80024a8 <StartMovementTask+0x394>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	441a      	add	r2, r3
 80023ba:	4b3c      	ldr	r3, [pc, #240]	; (80024ac <StartMovementTask+0x398>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	1ad3      	subs	r3, r2, r3
 80023c0:	4a3d      	ldr	r2, [pc, #244]	; (80024b8 <StartMovementTask+0x3a4>)
 80023c2:	6013      	str	r3, [r2, #0]
			H_BL = -vel_linear[0] + vel_linear[1] + vel_angular[2];
 80023c4:	4b38      	ldr	r3, [pc, #224]	; (80024a8 <StartMovementTask+0x394>)
 80023c6:	685a      	ldr	r2, [r3, #4]
 80023c8:	4b37      	ldr	r3, [pc, #220]	; (80024a8 <StartMovementTask+0x394>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	1ad2      	subs	r2, r2, r3
 80023ce:	4b37      	ldr	r3, [pc, #220]	; (80024ac <StartMovementTask+0x398>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	4413      	add	r3, r2
 80023d4:	4a39      	ldr	r2, [pc, #228]	; (80024bc <StartMovementTask+0x3a8>)
 80023d6:	6013      	str	r3, [r2, #0]

			//Vertical Thruster    Up/Down  |||   Pitch     |||   Roll
			V_FR = +depth.output - vel_angular[0] + vel_angular[1];
 80023d8:	4b39      	ldr	r3, [pc, #228]	; (80024c0 <StartMovementTask+0x3ac>)
 80023da:	ed93 7a04 	vldr	s14, [r3, #16]
 80023de:	4b33      	ldr	r3, [pc, #204]	; (80024ac <StartMovementTask+0x398>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	ee07 3a90 	vmov	s15, r3
 80023e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80023ee:	4b2f      	ldr	r3, [pc, #188]	; (80024ac <StartMovementTask+0x398>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	ee07 3a90 	vmov	s15, r3
 80023f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002402:	ee17 2a90 	vmov	r2, s15
 8002406:	4b2f      	ldr	r3, [pc, #188]	; (80024c4 <StartMovementTask+0x3b0>)
 8002408:	601a      	str	r2, [r3, #0]
			V_FL = +depth.output - vel_angular[0] - vel_angular[1];
 800240a:	4b2d      	ldr	r3, [pc, #180]	; (80024c0 <StartMovementTask+0x3ac>)
 800240c:	ed93 7a04 	vldr	s14, [r3, #16]
 8002410:	4b26      	ldr	r3, [pc, #152]	; (80024ac <StartMovementTask+0x398>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	ee07 3a90 	vmov	s15, r3
 8002418:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800241c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002420:	4b22      	ldr	r3, [pc, #136]	; (80024ac <StartMovementTask+0x398>)
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	ee07 3a90 	vmov	s15, r3
 8002428:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800242c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002430:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002434:	ee17 2a90 	vmov	r2, s15
 8002438:	4b23      	ldr	r3, [pc, #140]	; (80024c8 <StartMovementTask+0x3b4>)
 800243a:	601a      	str	r2, [r3, #0]
			V_BR = +depth.output + vel_angular[0] + vel_angular[1];
 800243c:	4b20      	ldr	r3, [pc, #128]	; (80024c0 <StartMovementTask+0x3ac>)
 800243e:	ed93 7a04 	vldr	s14, [r3, #16]
 8002442:	4b1a      	ldr	r3, [pc, #104]	; (80024ac <StartMovementTask+0x398>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	ee07 3a90 	vmov	s15, r3
 800244a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800244e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002452:	4b16      	ldr	r3, [pc, #88]	; (80024ac <StartMovementTask+0x398>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	ee07 3a90 	vmov	s15, r3
 800245a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800245e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002462:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002466:	ee17 2a90 	vmov	r2, s15
 800246a:	4b18      	ldr	r3, [pc, #96]	; (80024cc <StartMovementTask+0x3b8>)
 800246c:	601a      	str	r2, [r3, #0]
			V_BL = +depth.output + vel_angular[0] - vel_angular[1];
 800246e:	4b14      	ldr	r3, [pc, #80]	; (80024c0 <StartMovementTask+0x3ac>)
 8002470:	ed93 7a04 	vldr	s14, [r3, #16]
 8002474:	4b0d      	ldr	r3, [pc, #52]	; (80024ac <StartMovementTask+0x398>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	ee07 3a90 	vmov	s15, r3
 800247c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002480:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002484:	4b09      	ldr	r3, [pc, #36]	; (80024ac <StartMovementTask+0x398>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	ee07 3a90 	vmov	s15, r3
 800248c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002490:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002494:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002498:	ee17 2a90 	vmov	r2, s15
 800249c:	4b0c      	ldr	r3, [pc, #48]	; (80024d0 <StartMovementTask+0x3bc>)
 800249e:	601a      	str	r2, [r3, #0]
 80024a0:	e0ba      	b.n	8002618 <StartMovementTask+0x504>
 80024a2:	bf00      	nop
 80024a4:	200009ac 	.word	0x200009ac
 80024a8:	2000097c 	.word	0x2000097c
 80024ac:	20000988 	.word	0x20000988
 80024b0:	20000b40 	.word	0x20000b40
 80024b4:	20000b44 	.word	0x20000b44
 80024b8:	20000b48 	.word	0x20000b48
 80024bc:	20000b4c 	.word	0x20000b4c
 80024c0:	20000b10 	.word	0x20000b10
 80024c4:	20000b50 	.word	0x20000b50
 80024c8:	20000b54 	.word	0x20000b54
 80024cc:	20000b58 	.word	0x20000b58
 80024d0:	20000b5c 	.word	0x20000b5c
		}

		else if (movement_mode == 3) { // Fully Assisted
 80024d4:	4bbe      	ldr	r3, [pc, #760]	; (80027d0 <StartMovementTask+0x6bc>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2b03      	cmp	r3, #3
 80024da:	f040 809d 	bne.w	8002618 <StartMovementTask+0x504>
			//Horizontal Thruster  Forwaed  |||   Lateral   |||    Yaw
			H_FR = +vel_linear[0] - vel_linear[1] + yaw.output;
 80024de:	4bbd      	ldr	r3, [pc, #756]	; (80027d4 <StartMovementTask+0x6c0>)
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	4bbc      	ldr	r3, [pc, #752]	; (80027d4 <StartMovementTask+0x6c0>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	ee07 3a90 	vmov	s15, r3
 80024ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024f0:	4bb9      	ldr	r3, [pc, #740]	; (80027d8 <StartMovementTask+0x6c4>)
 80024f2:	edd3 7a04 	vldr	s15, [r3, #16]
 80024f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024fa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024fe:	ee17 2a90 	vmov	r2, s15
 8002502:	4bb6      	ldr	r3, [pc, #728]	; (80027dc <StartMovementTask+0x6c8>)
 8002504:	601a      	str	r2, [r3, #0]
			H_FL = -vel_linear[0] - vel_linear[1] - yaw.output;
 8002506:	4bb3      	ldr	r3, [pc, #716]	; (80027d4 <StartMovementTask+0x6c0>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	425a      	negs	r2, r3
 800250c:	4bb1      	ldr	r3, [pc, #708]	; (80027d4 <StartMovementTask+0x6c0>)
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	ee07 3a90 	vmov	s15, r3
 8002516:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800251a:	4baf      	ldr	r3, [pc, #700]	; (80027d8 <StartMovementTask+0x6c4>)
 800251c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002520:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002524:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002528:	ee17 2a90 	vmov	r2, s15
 800252c:	4bac      	ldr	r3, [pc, #688]	; (80027e0 <StartMovementTask+0x6cc>)
 800252e:	601a      	str	r2, [r3, #0]
			H_BR = +vel_linear[0] + vel_linear[1] - yaw.output;
 8002530:	4ba8      	ldr	r3, [pc, #672]	; (80027d4 <StartMovementTask+0x6c0>)
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	4ba7      	ldr	r3, [pc, #668]	; (80027d4 <StartMovementTask+0x6c0>)
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	4413      	add	r3, r2
 800253a:	ee07 3a90 	vmov	s15, r3
 800253e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002542:	4ba5      	ldr	r3, [pc, #660]	; (80027d8 <StartMovementTask+0x6c4>)
 8002544:	edd3 7a04 	vldr	s15, [r3, #16]
 8002548:	ee77 7a67 	vsub.f32	s15, s14, s15
 800254c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002550:	ee17 2a90 	vmov	r2, s15
 8002554:	4ba3      	ldr	r3, [pc, #652]	; (80027e4 <StartMovementTask+0x6d0>)
 8002556:	601a      	str	r2, [r3, #0]
			H_BL = -vel_linear[0] + vel_linear[1] + yaw.output;
 8002558:	4b9e      	ldr	r3, [pc, #632]	; (80027d4 <StartMovementTask+0x6c0>)
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	4b9d      	ldr	r3, [pc, #628]	; (80027d4 <StartMovementTask+0x6c0>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	ee07 3a90 	vmov	s15, r3
 8002566:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800256a:	4b9b      	ldr	r3, [pc, #620]	; (80027d8 <StartMovementTask+0x6c4>)
 800256c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002570:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002574:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002578:	ee17 2a90 	vmov	r2, s15
 800257c:	4b9a      	ldr	r3, [pc, #616]	; (80027e8 <StartMovementTask+0x6d4>)
 800257e:	601a      	str	r2, [r3, #0]

			//Vertical Thruster    Up/Down  |||   Pitch     |||   Roll
			V_FR = +depth.output - pitch.output - roll.output;
 8002580:	4b9a      	ldr	r3, [pc, #616]	; (80027ec <StartMovementTask+0x6d8>)
 8002582:	ed93 7a04 	vldr	s14, [r3, #16]
 8002586:	4b9a      	ldr	r3, [pc, #616]	; (80027f0 <StartMovementTask+0x6dc>)
 8002588:	edd3 7a04 	vldr	s15, [r3, #16]
 800258c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002590:	4b98      	ldr	r3, [pc, #608]	; (80027f4 <StartMovementTask+0x6e0>)
 8002592:	edd3 7a04 	vldr	s15, [r3, #16]
 8002596:	ee77 7a67 	vsub.f32	s15, s14, s15
 800259a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800259e:	ee17 2a90 	vmov	r2, s15
 80025a2:	4b95      	ldr	r3, [pc, #596]	; (80027f8 <StartMovementTask+0x6e4>)
 80025a4:	601a      	str	r2, [r3, #0]
			V_FL = +depth.output - pitch.output + roll.output;
 80025a6:	4b91      	ldr	r3, [pc, #580]	; (80027ec <StartMovementTask+0x6d8>)
 80025a8:	ed93 7a04 	vldr	s14, [r3, #16]
 80025ac:	4b90      	ldr	r3, [pc, #576]	; (80027f0 <StartMovementTask+0x6dc>)
 80025ae:	edd3 7a04 	vldr	s15, [r3, #16]
 80025b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80025b6:	4b8f      	ldr	r3, [pc, #572]	; (80027f4 <StartMovementTask+0x6e0>)
 80025b8:	edd3 7a04 	vldr	s15, [r3, #16]
 80025bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025c4:	ee17 2a90 	vmov	r2, s15
 80025c8:	4b8c      	ldr	r3, [pc, #560]	; (80027fc <StartMovementTask+0x6e8>)
 80025ca:	601a      	str	r2, [r3, #0]
			V_BR = +depth.output + pitch.output - roll.output;
 80025cc:	4b87      	ldr	r3, [pc, #540]	; (80027ec <StartMovementTask+0x6d8>)
 80025ce:	ed93 7a04 	vldr	s14, [r3, #16]
 80025d2:	4b87      	ldr	r3, [pc, #540]	; (80027f0 <StartMovementTask+0x6dc>)
 80025d4:	edd3 7a04 	vldr	s15, [r3, #16]
 80025d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80025dc:	4b85      	ldr	r3, [pc, #532]	; (80027f4 <StartMovementTask+0x6e0>)
 80025de:	edd3 7a04 	vldr	s15, [r3, #16]
 80025e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80025ea:	ee17 2a90 	vmov	r2, s15
 80025ee:	4b84      	ldr	r3, [pc, #528]	; (8002800 <StartMovementTask+0x6ec>)
 80025f0:	601a      	str	r2, [r3, #0]
			V_BL = +depth.output + pitch.output + roll.output;
 80025f2:	4b7e      	ldr	r3, [pc, #504]	; (80027ec <StartMovementTask+0x6d8>)
 80025f4:	ed93 7a04 	vldr	s14, [r3, #16]
 80025f8:	4b7d      	ldr	r3, [pc, #500]	; (80027f0 <StartMovementTask+0x6dc>)
 80025fa:	edd3 7a04 	vldr	s15, [r3, #16]
 80025fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002602:	4b7c      	ldr	r3, [pc, #496]	; (80027f4 <StartMovementTask+0x6e0>)
 8002604:	edd3 7a04 	vldr	s15, [r3, #16]
 8002608:	ee77 7a27 	vadd.f32	s15, s14, s15
 800260c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002610:	ee17 2a90 	vmov	r2, s15
 8002614:	4b7b      	ldr	r3, [pc, #492]	; (8002804 <StartMovementTask+0x6f0>)
 8002616:	601a      	str	r2, [r3, #0]
		}

		HorizontalMax = fmax(fmax(abs(H_FR), abs(H_FL)),fmax(abs(H_BR), abs(H_BL)));
 8002618:	4b70      	ldr	r3, [pc, #448]	; (80027dc <StartMovementTask+0x6c8>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2b00      	cmp	r3, #0
 800261e:	bfb8      	it	lt
 8002620:	425b      	neglt	r3, r3
 8002622:	4618      	mov	r0, r3
 8002624:	f7fd ff26 	bl	8000474 <__aeabi_i2d>
 8002628:	4604      	mov	r4, r0
 800262a:	460d      	mov	r5, r1
 800262c:	4b6c      	ldr	r3, [pc, #432]	; (80027e0 <StartMovementTask+0x6cc>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2b00      	cmp	r3, #0
 8002632:	bfb8      	it	lt
 8002634:	425b      	neglt	r3, r3
 8002636:	4618      	mov	r0, r3
 8002638:	f7fd ff1c 	bl	8000474 <__aeabi_i2d>
 800263c:	4602      	mov	r2, r0
 800263e:	460b      	mov	r3, r1
 8002640:	ec43 2b11 	vmov	d1, r2, r3
 8002644:	ec45 4b10 	vmov	d0, r4, r5
 8002648:	f00d fb2a 	bl	800fca0 <fmax>
 800264c:	eeb0 8a40 	vmov.f32	s16, s0
 8002650:	eef0 8a60 	vmov.f32	s17, s1
 8002654:	4b63      	ldr	r3, [pc, #396]	; (80027e4 <StartMovementTask+0x6d0>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2b00      	cmp	r3, #0
 800265a:	bfb8      	it	lt
 800265c:	425b      	neglt	r3, r3
 800265e:	4618      	mov	r0, r3
 8002660:	f7fd ff08 	bl	8000474 <__aeabi_i2d>
 8002664:	4604      	mov	r4, r0
 8002666:	460d      	mov	r5, r1
 8002668:	4b5f      	ldr	r3, [pc, #380]	; (80027e8 <StartMovementTask+0x6d4>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2b00      	cmp	r3, #0
 800266e:	bfb8      	it	lt
 8002670:	425b      	neglt	r3, r3
 8002672:	4618      	mov	r0, r3
 8002674:	f7fd fefe 	bl	8000474 <__aeabi_i2d>
 8002678:	4602      	mov	r2, r0
 800267a:	460b      	mov	r3, r1
 800267c:	ec43 2b11 	vmov	d1, r2, r3
 8002680:	ec45 4b10 	vmov	d0, r4, r5
 8002684:	f00d fb0c 	bl	800fca0 <fmax>
 8002688:	eeb0 7a40 	vmov.f32	s14, s0
 800268c:	eef0 7a60 	vmov.f32	s15, s1
 8002690:	eeb0 1a47 	vmov.f32	s2, s14
 8002694:	eef0 1a67 	vmov.f32	s3, s15
 8002698:	eeb0 0a48 	vmov.f32	s0, s16
 800269c:	eef0 0a68 	vmov.f32	s1, s17
 80026a0:	f00d fafe 	bl	800fca0 <fmax>
 80026a4:	ec53 2b10 	vmov	r2, r3, d0
 80026a8:	4610      	mov	r0, r2
 80026aa:	4619      	mov	r1, r3
 80026ac:	f7fe f9e6 	bl	8000a7c <__aeabi_d2iz>
 80026b0:	4603      	mov	r3, r0
 80026b2:	4a55      	ldr	r2, [pc, #340]	; (8002808 <StartMovementTask+0x6f4>)
 80026b4:	6013      	str	r3, [r2, #0]
		VerticalMax = fmax(fmax(abs(V_FR), abs(V_FL)),fmax(abs(V_BR), abs(V_BL)));
 80026b6:	4b50      	ldr	r3, [pc, #320]	; (80027f8 <StartMovementTask+0x6e4>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	bfb8      	it	lt
 80026be:	425b      	neglt	r3, r3
 80026c0:	4618      	mov	r0, r3
 80026c2:	f7fd fed7 	bl	8000474 <__aeabi_i2d>
 80026c6:	4604      	mov	r4, r0
 80026c8:	460d      	mov	r5, r1
 80026ca:	4b4c      	ldr	r3, [pc, #304]	; (80027fc <StartMovementTask+0x6e8>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	bfb8      	it	lt
 80026d2:	425b      	neglt	r3, r3
 80026d4:	4618      	mov	r0, r3
 80026d6:	f7fd fecd 	bl	8000474 <__aeabi_i2d>
 80026da:	4602      	mov	r2, r0
 80026dc:	460b      	mov	r3, r1
 80026de:	ec43 2b11 	vmov	d1, r2, r3
 80026e2:	ec45 4b10 	vmov	d0, r4, r5
 80026e6:	f00d fadb 	bl	800fca0 <fmax>
 80026ea:	eeb0 8a40 	vmov.f32	s16, s0
 80026ee:	eef0 8a60 	vmov.f32	s17, s1
 80026f2:	4b43      	ldr	r3, [pc, #268]	; (8002800 <StartMovementTask+0x6ec>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	bfb8      	it	lt
 80026fa:	425b      	neglt	r3, r3
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7fd feb9 	bl	8000474 <__aeabi_i2d>
 8002702:	4604      	mov	r4, r0
 8002704:	460d      	mov	r5, r1
 8002706:	4b3f      	ldr	r3, [pc, #252]	; (8002804 <StartMovementTask+0x6f0>)
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2b00      	cmp	r3, #0
 800270c:	bfb8      	it	lt
 800270e:	425b      	neglt	r3, r3
 8002710:	4618      	mov	r0, r3
 8002712:	f7fd feaf 	bl	8000474 <__aeabi_i2d>
 8002716:	4602      	mov	r2, r0
 8002718:	460b      	mov	r3, r1
 800271a:	ec43 2b11 	vmov	d1, r2, r3
 800271e:	ec45 4b10 	vmov	d0, r4, r5
 8002722:	f00d fabd 	bl	800fca0 <fmax>
 8002726:	eeb0 7a40 	vmov.f32	s14, s0
 800272a:	eef0 7a60 	vmov.f32	s15, s1
 800272e:	eeb0 1a47 	vmov.f32	s2, s14
 8002732:	eef0 1a67 	vmov.f32	s3, s15
 8002736:	eeb0 0a48 	vmov.f32	s0, s16
 800273a:	eef0 0a68 	vmov.f32	s1, s17
 800273e:	f00d faaf 	bl	800fca0 <fmax>
 8002742:	ec53 2b10 	vmov	r2, r3, d0
 8002746:	4610      	mov	r0, r2
 8002748:	4619      	mov	r1, r3
 800274a:	f7fe f997 	bl	8000a7c <__aeabi_d2iz>
 800274e:	4603      	mov	r3, r0
 8002750:	4a2e      	ldr	r2, [pc, #184]	; (800280c <StartMovementTask+0x6f8>)
 8002752:	6013      	str	r3, [r2, #0]

		if (HorizontalMax > 500) {
 8002754:	4b2c      	ldr	r3, [pc, #176]	; (8002808 <StartMovementTask+0x6f4>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800275c:	dd1f      	ble.n	800279e <StartMovementTask+0x68a>
			H_FR = H_FR / HorizontalMax;
 800275e:	4b1f      	ldr	r3, [pc, #124]	; (80027dc <StartMovementTask+0x6c8>)
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	4b29      	ldr	r3, [pc, #164]	; (8002808 <StartMovementTask+0x6f4>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	fb92 f3f3 	sdiv	r3, r2, r3
 800276a:	4a1c      	ldr	r2, [pc, #112]	; (80027dc <StartMovementTask+0x6c8>)
 800276c:	6013      	str	r3, [r2, #0]
			H_FL = H_FL / HorizontalMax;
 800276e:	4b1c      	ldr	r3, [pc, #112]	; (80027e0 <StartMovementTask+0x6cc>)
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	4b25      	ldr	r3, [pc, #148]	; (8002808 <StartMovementTask+0x6f4>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	fb92 f3f3 	sdiv	r3, r2, r3
 800277a:	4a19      	ldr	r2, [pc, #100]	; (80027e0 <StartMovementTask+0x6cc>)
 800277c:	6013      	str	r3, [r2, #0]
			H_BR = H_BR / HorizontalMax;
 800277e:	4b19      	ldr	r3, [pc, #100]	; (80027e4 <StartMovementTask+0x6d0>)
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	4b21      	ldr	r3, [pc, #132]	; (8002808 <StartMovementTask+0x6f4>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	fb92 f3f3 	sdiv	r3, r2, r3
 800278a:	4a16      	ldr	r2, [pc, #88]	; (80027e4 <StartMovementTask+0x6d0>)
 800278c:	6013      	str	r3, [r2, #0]
			H_BL = H_BL / HorizontalMax;
 800278e:	4b16      	ldr	r3, [pc, #88]	; (80027e8 <StartMovementTask+0x6d4>)
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	4b1d      	ldr	r3, [pc, #116]	; (8002808 <StartMovementTask+0x6f4>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	fb92 f3f3 	sdiv	r3, r2, r3
 800279a:	4a13      	ldr	r2, [pc, #76]	; (80027e8 <StartMovementTask+0x6d4>)
 800279c:	6013      	str	r3, [r2, #0]
		}

		if (VerticalMax > 500) {
 800279e:	4b1b      	ldr	r3, [pc, #108]	; (800280c <StartMovementTask+0x6f8>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80027a6:	dd41      	ble.n	800282c <StartMovementTask+0x718>
			V_FR = V_FR / VerticalMax;
 80027a8:	4b13      	ldr	r3, [pc, #76]	; (80027f8 <StartMovementTask+0x6e4>)
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	4b17      	ldr	r3, [pc, #92]	; (800280c <StartMovementTask+0x6f8>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	fb92 f3f3 	sdiv	r3, r2, r3
 80027b4:	4a10      	ldr	r2, [pc, #64]	; (80027f8 <StartMovementTask+0x6e4>)
 80027b6:	6013      	str	r3, [r2, #0]
			V_FL = V_FL / VerticalMax;
 80027b8:	4b10      	ldr	r3, [pc, #64]	; (80027fc <StartMovementTask+0x6e8>)
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	4b13      	ldr	r3, [pc, #76]	; (800280c <StartMovementTask+0x6f8>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	fb92 f3f3 	sdiv	r3, r2, r3
 80027c4:	4a0d      	ldr	r2, [pc, #52]	; (80027fc <StartMovementTask+0x6e8>)
 80027c6:	6013      	str	r3, [r2, #0]
			V_BR = V_BR / VerticalMax;
 80027c8:	4b0d      	ldr	r3, [pc, #52]	; (8002800 <StartMovementTask+0x6ec>)
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	e020      	b.n	8002810 <StartMovementTask+0x6fc>
 80027ce:	bf00      	nop
 80027d0:	200009ac 	.word	0x200009ac
 80027d4:	2000097c 	.word	0x2000097c
 80027d8:	20000a98 	.word	0x20000a98
 80027dc:	20000b40 	.word	0x20000b40
 80027e0:	20000b44 	.word	0x20000b44
 80027e4:	20000b48 	.word	0x20000b48
 80027e8:	20000b4c 	.word	0x20000b4c
 80027ec:	20000b10 	.word	0x20000b10
 80027f0:	20000ac0 	.word	0x20000ac0
 80027f4:	20000ae8 	.word	0x20000ae8
 80027f8:	20000b50 	.word	0x20000b50
 80027fc:	20000b54 	.word	0x20000b54
 8002800:	20000b58 	.word	0x20000b58
 8002804:	20000b5c 	.word	0x20000b5c
 8002808:	20000b38 	.word	0x20000b38
 800280c:	20000b3c 	.word	0x20000b3c
 8002810:	4b71      	ldr	r3, [pc, #452]	; (80029d8 <StartMovementTask+0x8c4>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	fb92 f3f3 	sdiv	r3, r2, r3
 8002818:	4a70      	ldr	r2, [pc, #448]	; (80029dc <StartMovementTask+0x8c8>)
 800281a:	6013      	str	r3, [r2, #0]
			V_BL = V_BL / VerticalMax;
 800281c:	4b70      	ldr	r3, [pc, #448]	; (80029e0 <StartMovementTask+0x8cc>)
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	4b6d      	ldr	r3, [pc, #436]	; (80029d8 <StartMovementTask+0x8c4>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	fb92 f3f3 	sdiv	r3, r2, r3
 8002828:	4a6d      	ldr	r2, [pc, #436]	; (80029e0 <StartMovementTask+0x8cc>)
 800282a:	6013      	str	r3, [r2, #0]
		}

		H_FR = H_FR + pwmCenter + H_FRoffset;
 800282c:	4b6d      	ldr	r3, [pc, #436]	; (80029e4 <StartMovementTask+0x8d0>)
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	4b6d      	ldr	r3, [pc, #436]	; (80029e8 <StartMovementTask+0x8d4>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	441a      	add	r2, r3
 8002836:	4b6d      	ldr	r3, [pc, #436]	; (80029ec <StartMovementTask+0x8d8>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4413      	add	r3, r2
 800283c:	4a69      	ldr	r2, [pc, #420]	; (80029e4 <StartMovementTask+0x8d0>)
 800283e:	6013      	str	r3, [r2, #0]
		H_FL = H_FL + pwmCenter + H_FLoffset;
 8002840:	4b6b      	ldr	r3, [pc, #428]	; (80029f0 <StartMovementTask+0x8dc>)
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	4b68      	ldr	r3, [pc, #416]	; (80029e8 <StartMovementTask+0x8d4>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	441a      	add	r2, r3
 800284a:	4b6a      	ldr	r3, [pc, #424]	; (80029f4 <StartMovementTask+0x8e0>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4413      	add	r3, r2
 8002850:	4a67      	ldr	r2, [pc, #412]	; (80029f0 <StartMovementTask+0x8dc>)
 8002852:	6013      	str	r3, [r2, #0]
		H_BR = H_BR + pwmCenter + H_FRoffset;
 8002854:	4b68      	ldr	r3, [pc, #416]	; (80029f8 <StartMovementTask+0x8e4>)
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	4b63      	ldr	r3, [pc, #396]	; (80029e8 <StartMovementTask+0x8d4>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	441a      	add	r2, r3
 800285e:	4b63      	ldr	r3, [pc, #396]	; (80029ec <StartMovementTask+0x8d8>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4413      	add	r3, r2
 8002864:	4a64      	ldr	r2, [pc, #400]	; (80029f8 <StartMovementTask+0x8e4>)
 8002866:	6013      	str	r3, [r2, #0]
		H_BL = H_BL + pwmCenter + H_BLoffset;
 8002868:	4b64      	ldr	r3, [pc, #400]	; (80029fc <StartMovementTask+0x8e8>)
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	4b5e      	ldr	r3, [pc, #376]	; (80029e8 <StartMovementTask+0x8d4>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	441a      	add	r2, r3
 8002872:	4b63      	ldr	r3, [pc, #396]	; (8002a00 <StartMovementTask+0x8ec>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4413      	add	r3, r2
 8002878:	4a60      	ldr	r2, [pc, #384]	; (80029fc <StartMovementTask+0x8e8>)
 800287a:	6013      	str	r3, [r2, #0]
		V_FR = V_FR + pwmCenter + V_FRoffset;
 800287c:	4b61      	ldr	r3, [pc, #388]	; (8002a04 <StartMovementTask+0x8f0>)
 800287e:	681a      	ldr	r2, [r3, #0]
 8002880:	4b59      	ldr	r3, [pc, #356]	; (80029e8 <StartMovementTask+0x8d4>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	441a      	add	r2, r3
 8002886:	4b60      	ldr	r3, [pc, #384]	; (8002a08 <StartMovementTask+0x8f4>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4413      	add	r3, r2
 800288c:	4a5d      	ldr	r2, [pc, #372]	; (8002a04 <StartMovementTask+0x8f0>)
 800288e:	6013      	str	r3, [r2, #0]
		V_FL = V_FL + pwmCenter + V_FLoffset;
 8002890:	4b5e      	ldr	r3, [pc, #376]	; (8002a0c <StartMovementTask+0x8f8>)
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	4b54      	ldr	r3, [pc, #336]	; (80029e8 <StartMovementTask+0x8d4>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	441a      	add	r2, r3
 800289a:	4b5d      	ldr	r3, [pc, #372]	; (8002a10 <StartMovementTask+0x8fc>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4413      	add	r3, r2
 80028a0:	4a5a      	ldr	r2, [pc, #360]	; (8002a0c <StartMovementTask+0x8f8>)
 80028a2:	6013      	str	r3, [r2, #0]
		V_BR = V_BR + pwmCenter + V_BRoffset;
 80028a4:	4b4d      	ldr	r3, [pc, #308]	; (80029dc <StartMovementTask+0x8c8>)
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	4b4f      	ldr	r3, [pc, #316]	; (80029e8 <StartMovementTask+0x8d4>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	441a      	add	r2, r3
 80028ae:	4b59      	ldr	r3, [pc, #356]	; (8002a14 <StartMovementTask+0x900>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4413      	add	r3, r2
 80028b4:	4a49      	ldr	r2, [pc, #292]	; (80029dc <StartMovementTask+0x8c8>)
 80028b6:	6013      	str	r3, [r2, #0]
		V_BL = V_BL + pwmCenter + V_BLoffset;
 80028b8:	4b49      	ldr	r3, [pc, #292]	; (80029e0 <StartMovementTask+0x8cc>)
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	4b4a      	ldr	r3, [pc, #296]	; (80029e8 <StartMovementTask+0x8d4>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	441a      	add	r2, r3
 80028c2:	4b55      	ldr	r3, [pc, #340]	; (8002a18 <StartMovementTask+0x904>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4413      	add	r3, r2
 80028c8:	4a45      	ldr	r2, [pc, #276]	; (80029e0 <StartMovementTask+0x8cc>)
 80028ca:	6013      	str	r3, [r2, #0]

		//Send to ESC
		send_H_FR = H_FR;
 80028cc:	4b45      	ldr	r3, [pc, #276]	; (80029e4 <StartMovementTask+0x8d0>)
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	4b52      	ldr	r3, [pc, #328]	; (8002a1c <StartMovementTask+0x908>)
 80028d2:	635a      	str	r2, [r3, #52]	; 0x34
		send_H_FL = H_FL;
 80028d4:	4b46      	ldr	r3, [pc, #280]	; (80029f0 <StartMovementTask+0x8dc>)
 80028d6:	681a      	ldr	r2, [r3, #0]
 80028d8:	4b50      	ldr	r3, [pc, #320]	; (8002a1c <StartMovementTask+0x908>)
 80028da:	641a      	str	r2, [r3, #64]	; 0x40
		send_H_BR = H_BR;
 80028dc:	4b46      	ldr	r3, [pc, #280]	; (80029f8 <StartMovementTask+0x8e4>)
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	4b4e      	ldr	r3, [pc, #312]	; (8002a1c <StartMovementTask+0x908>)
 80028e2:	639a      	str	r2, [r3, #56]	; 0x38
		send_H_BL = H_BL;
 80028e4:	4b45      	ldr	r3, [pc, #276]	; (80029fc <StartMovementTask+0x8e8>)
 80028e6:	681a      	ldr	r2, [r3, #0]
 80028e8:	4b4c      	ldr	r3, [pc, #304]	; (8002a1c <StartMovementTask+0x908>)
 80028ea:	63da      	str	r2, [r3, #60]	; 0x3c
		send_V_FR = V_FR;
 80028ec:	4b45      	ldr	r3, [pc, #276]	; (8002a04 <StartMovementTask+0x8f0>)
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	4b4b      	ldr	r3, [pc, #300]	; (8002a20 <StartMovementTask+0x90c>)
 80028f2:	635a      	str	r2, [r3, #52]	; 0x34
		send_V_FL = V_FL;
 80028f4:	4b45      	ldr	r3, [pc, #276]	; (8002a0c <StartMovementTask+0x8f8>)
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	4b49      	ldr	r3, [pc, #292]	; (8002a20 <StartMovementTask+0x90c>)
 80028fa:	641a      	str	r2, [r3, #64]	; 0x40
		send_V_BR = V_BR;
 80028fc:	4b37      	ldr	r3, [pc, #220]	; (80029dc <StartMovementTask+0x8c8>)
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	4b47      	ldr	r3, [pc, #284]	; (8002a20 <StartMovementTask+0x90c>)
 8002902:	63da      	str	r2, [r3, #60]	; 0x3c
		send_V_BL = V_BL;
 8002904:	4b36      	ldr	r3, [pc, #216]	; (80029e0 <StartMovementTask+0x8cc>)
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	4b45      	ldr	r3, [pc, #276]	; (8002a20 <StartMovementTask+0x90c>)
 800290a:	639a      	str	r2, [r3, #56]	; 0x38

		//Lumen
		lumen_pwm = map(lumen_power, 0, 100, 1000, 2000);
 800290c:	4b45      	ldr	r3, [pc, #276]	; (8002a24 <StartMovementTask+0x910>)
 800290e:	6818      	ldr	r0, [r3, #0]
 8002910:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002914:	9300      	str	r3, [sp, #0]
 8002916:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800291a:	2264      	movs	r2, #100	; 0x64
 800291c:	2100      	movs	r1, #0
 800291e:	f7fe fd41 	bl	80013a4 <map>
 8002922:	4603      	mov	r3, r0
 8002924:	4a40      	ldr	r2, [pc, #256]	; (8002a28 <StartMovementTask+0x914>)
 8002926:	6013      	str	r3, [r2, #0]
		send_Lumen = lumen_pwm;
 8002928:	4b3f      	ldr	r3, [pc, #252]	; (8002a28 <StartMovementTask+0x914>)
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	4b3f      	ldr	r3, [pc, #252]	; (8002a2c <StartMovementTask+0x918>)
 800292e:	635a      	str	r2, [r3, #52]	; 0x34

		//Capture last value to send back to ROS
		Message_H_FR = H_FR;
 8002930:	4b2c      	ldr	r3, [pc, #176]	; (80029e4 <StartMovementTask+0x8d0>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	b21a      	sxth	r2, r3
 8002936:	4b3e      	ldr	r3, [pc, #248]	; (8002a30 <StartMovementTask+0x91c>)
 8002938:	801a      	strh	r2, [r3, #0]
		Message_H_FL = H_FL;
 800293a:	4b2d      	ldr	r3, [pc, #180]	; (80029f0 <StartMovementTask+0x8dc>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	b21a      	sxth	r2, r3
 8002940:	4b3c      	ldr	r3, [pc, #240]	; (8002a34 <StartMovementTask+0x920>)
 8002942:	801a      	strh	r2, [r3, #0]
		Message_H_BR = H_BR;
 8002944:	4b2c      	ldr	r3, [pc, #176]	; (80029f8 <StartMovementTask+0x8e4>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	b21a      	sxth	r2, r3
 800294a:	4b3b      	ldr	r3, [pc, #236]	; (8002a38 <StartMovementTask+0x924>)
 800294c:	801a      	strh	r2, [r3, #0]
		Message_H_BL = H_BL;
 800294e:	4b2b      	ldr	r3, [pc, #172]	; (80029fc <StartMovementTask+0x8e8>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	b21a      	sxth	r2, r3
 8002954:	4b39      	ldr	r3, [pc, #228]	; (8002a3c <StartMovementTask+0x928>)
 8002956:	801a      	strh	r2, [r3, #0]
		Message_V_FR = V_FR;
 8002958:	4b2a      	ldr	r3, [pc, #168]	; (8002a04 <StartMovementTask+0x8f0>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	b21a      	sxth	r2, r3
 800295e:	4b38      	ldr	r3, [pc, #224]	; (8002a40 <StartMovementTask+0x92c>)
 8002960:	801a      	strh	r2, [r3, #0]
		Message_V_FL = V_FL;
 8002962:	4b2a      	ldr	r3, [pc, #168]	; (8002a0c <StartMovementTask+0x8f8>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	b21a      	sxth	r2, r3
 8002968:	4b36      	ldr	r3, [pc, #216]	; (8002a44 <StartMovementTask+0x930>)
 800296a:	801a      	strh	r2, [r3, #0]
		Message_V_BR = V_BR;
 800296c:	4b1b      	ldr	r3, [pc, #108]	; (80029dc <StartMovementTask+0x8c8>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	b21a      	sxth	r2, r3
 8002972:	4b35      	ldr	r3, [pc, #212]	; (8002a48 <StartMovementTask+0x934>)
 8002974:	801a      	strh	r2, [r3, #0]
		Message_V_BL = V_BL;
 8002976:	4b1a      	ldr	r3, [pc, #104]	; (80029e0 <StartMovementTask+0x8cc>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	b21a      	sxth	r2, r3
 800297c:	4b33      	ldr	r3, [pc, #204]	; (8002a4c <StartMovementTask+0x938>)
 800297e:	801a      	strh	r2, [r3, #0]

		//Reset IMU
		IMU_resetStatus_new = imu_reset;
 8002980:	4b33      	ldr	r3, [pc, #204]	; (8002a50 <StartMovementTask+0x93c>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a33      	ldr	r2, [pc, #204]	; (8002a54 <StartMovementTask+0x940>)
 8002986:	6013      	str	r3, [r2, #0]
		if (IMU_resetStatus_new == 1 && IMU_resetStatus_old == 0) {
 8002988:	4b32      	ldr	r3, [pc, #200]	; (8002a54 <StartMovementTask+0x940>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2b01      	cmp	r3, #1
 800298e:	d119      	bne.n	80029c4 <StartMovementTask+0x8b0>
 8002990:	4b31      	ldr	r3, [pc, #196]	; (8002a58 <StartMovementTask+0x944>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d115      	bne.n	80029c4 <StartMovementTask+0x8b0>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, RESET);
 8002998:	2200      	movs	r2, #0
 800299a:	2104      	movs	r1, #4
 800299c:	482f      	ldr	r0, [pc, #188]	; (8002a5c <StartMovementTask+0x948>)
 800299e:	f002 fdd7 	bl	8005550 <HAL_GPIO_WritePin>
			IMUStatus = "Resetting..";
 80029a2:	4b2f      	ldr	r3, [pc, #188]	; (8002a60 <StartMovementTask+0x94c>)
 80029a4:	4a2f      	ldr	r2, [pc, #188]	; (8002a64 <StartMovementTask+0x950>)
 80029a6:	601a      	str	r2, [r3, #0]
			led_status = 1;
 80029a8:	4b2f      	ldr	r3, [pc, #188]	; (8002a68 <StartMovementTask+0x954>)
 80029aa:	2201      	movs	r2, #1
 80029ac:	701a      	strb	r2, [r3, #0]
			osDelay(200);
 80029ae:	20c8      	movs	r0, #200	; 0xc8
 80029b0:	f00b fa29 	bl	800de06 <osDelay>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, SET);
 80029b4:	2201      	movs	r2, #1
 80029b6:	2104      	movs	r1, #4
 80029b8:	4828      	ldr	r0, [pc, #160]	; (8002a5c <StartMovementTask+0x948>)
 80029ba:	f002 fdc9 	bl	8005550 <HAL_GPIO_WritePin>
			IMUStatus = "Running..";
 80029be:	4b28      	ldr	r3, [pc, #160]	; (8002a60 <StartMovementTask+0x94c>)
 80029c0:	4a2a      	ldr	r2, [pc, #168]	; (8002a6c <StartMovementTask+0x958>)
 80029c2:	601a      	str	r2, [r3, #0]
		}
		IMU_resetStatus_old = IMU_resetStatus_new;
 80029c4:	4b23      	ldr	r3, [pc, #140]	; (8002a54 <StartMovementTask+0x940>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a23      	ldr	r2, [pc, #140]	; (8002a58 <StartMovementTask+0x944>)
 80029ca:	6013      	str	r3, [r2, #0]

    osDelay(1);
 80029cc:	2001      	movs	r0, #1
 80029ce:	f00b fa1a 	bl	800de06 <osDelay>
		if (movement_mode == 0) { // Fully Manual
 80029d2:	f7ff bbaa 	b.w	800212a <StartMovementTask+0x16>
 80029d6:	bf00      	nop
 80029d8:	20000b3c 	.word	0x20000b3c
 80029dc:	20000b58 	.word	0x20000b58
 80029e0:	20000b5c 	.word	0x20000b5c
 80029e4:	20000b40 	.word	0x20000b40
 80029e8:	20000010 	.word	0x20000010
 80029ec:	20000014 	.word	0x20000014
 80029f0:	20000b44 	.word	0x20000b44
 80029f4:	20000018 	.word	0x20000018
 80029f8:	20000b48 	.word	0x20000b48
 80029fc:	20000b4c 	.word	0x20000b4c
 8002a00:	2000001c 	.word	0x2000001c
 8002a04:	20000b50 	.word	0x20000b50
 8002a08:	20000020 	.word	0x20000020
 8002a0c:	20000b54 	.word	0x20000b54
 8002a10:	20000024 	.word	0x20000024
 8002a14:	20000028 	.word	0x20000028
 8002a18:	2000002c 	.word	0x2000002c
 8002a1c:	40000800 	.word	0x40000800
 8002a20:	40000c00 	.word	0x40000c00
 8002a24:	200009a8 	.word	0x200009a8
 8002a28:	20000b70 	.word	0x20000b70
 8002a2c:	40014000 	.word	0x40014000
 8002a30:	20000a1e 	.word	0x20000a1e
 8002a34:	20000a20 	.word	0x20000a20
 8002a38:	20000a22 	.word	0x20000a22
 8002a3c:	20000a24 	.word	0x20000a24
 8002a40:	20000a26 	.word	0x20000a26
 8002a44:	20000a28 	.word	0x20000a28
 8002a48:	20000a2a 	.word	0x20000a2a
 8002a4c:	20000a2c 	.word	0x20000a2c
 8002a50:	200009bc 	.word	0x200009bc
 8002a54:	20000a5c 	.word	0x20000a5c
 8002a58:	20000a60 	.word	0x20000a60
 8002a5c:	40020800 	.word	0x40020800
 8002a60:	20000008 	.word	0x20000008
 8002a64:	0800fef0 	.word	0x0800fef0
 8002a68:	20000b78 	.word	0x20000b78
 8002a6c:	0800fdec 	.word	0x0800fdec

08002a70 <StartGetPressureTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGetPressureTask */
void StartGetPressureTask(void const * argument)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b088      	sub	sp, #32
 8002a74:	af04      	add	r7, sp, #16
 8002a76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGetPressureTask */

	// check sensor status
	MS5803_status = MS58xx_reset(&hi2c1, MS5803_address);
 8002a78:	4b4f      	ldr	r3, [pc, #316]	; (8002bb8 <StartGetPressureTask+0x148>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	4619      	mov	r1, r3
 8002a7e:	484f      	ldr	r0, [pc, #316]	; (8002bbc <StartGetPressureTask+0x14c>)
 8002a80:	f000 fbc3 	bl	800320a <MS58xx_reset>
 8002a84:	4603      	mov	r3, r0
 8002a86:	461a      	mov	r2, r3
 8002a88:	4b4d      	ldr	r3, [pc, #308]	; (8002bc0 <StartGetPressureTask+0x150>)
 8002a8a:	701a      	strb	r2, [r3, #0]
	MS5837_status = MS58xx_reset(&hi2c1, MS5837_address);
 8002a8c:	4b4d      	ldr	r3, [pc, #308]	; (8002bc4 <StartGetPressureTask+0x154>)
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	4619      	mov	r1, r3
 8002a92:	484a      	ldr	r0, [pc, #296]	; (8002bbc <StartGetPressureTask+0x14c>)
 8002a94:	f000 fbb9 	bl	800320a <MS58xx_reset>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	4b4a      	ldr	r3, [pc, #296]	; (8002bc8 <StartGetPressureTask+0x158>)
 8002a9e:	701a      	strb	r2, [r3, #0]

	// Initialize MS5803 sensor if attached
	if (MS5803_status == HAL_OK) {
 8002aa0:	4b47      	ldr	r3, [pc, #284]	; (8002bc0 <StartGetPressureTask+0x150>)
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d115      	bne.n	8002ad4 <StartGetPressureTask+0x64>
		for (int i = 0; i < 6; i++) {
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	60fb      	str	r3, [r7, #12]
 8002aac:	e00f      	b.n	8002ace <StartGetPressureTask+0x5e>
			MS58xx_coeff(&hi2c1, &MS5803_coefficient[i], MS5803_address, i + 1);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	005b      	lsls	r3, r3, #1
 8002ab2:	4a46      	ldr	r2, [pc, #280]	; (8002bcc <StartGetPressureTask+0x15c>)
 8002ab4:	1899      	adds	r1, r3, r2
 8002ab6:	4b40      	ldr	r3, [pc, #256]	; (8002bb8 <StartGetPressureTask+0x148>)
 8002ab8:	781a      	ldrb	r2, [r3, #0]
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	3301      	adds	r3, #1
 8002ac0:	b2db      	uxtb	r3, r3
 8002ac2:	483e      	ldr	r0, [pc, #248]	; (8002bbc <StartGetPressureTask+0x14c>)
 8002ac4:	f000 fbc0 	bl	8003248 <MS58xx_coeff>
		for (int i = 0; i < 6; i++) {
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	3301      	adds	r3, #1
 8002acc:	60fb      	str	r3, [r7, #12]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2b05      	cmp	r3, #5
 8002ad2:	ddec      	ble.n	8002aae <StartGetPressureTask+0x3e>
		}
	}

	// Initialize MS5837 sensor if attached
	if (MS5837_status == HAL_OK) {
 8002ad4:	4b3c      	ldr	r3, [pc, #240]	; (8002bc8 <StartGetPressureTask+0x158>)
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d115      	bne.n	8002b08 <StartGetPressureTask+0x98>
		for (int i = 0; i < 6; i++) {
 8002adc:	2300      	movs	r3, #0
 8002ade:	60bb      	str	r3, [r7, #8]
 8002ae0:	e00f      	b.n	8002b02 <StartGetPressureTask+0x92>
			MS58xx_coeff(&hi2c1, &MS5837_coefficient[i], MS5837_address, i + 1);
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	4a3a      	ldr	r2, [pc, #232]	; (8002bd0 <StartGetPressureTask+0x160>)
 8002ae8:	1899      	adds	r1, r3, r2
 8002aea:	4b36      	ldr	r3, [pc, #216]	; (8002bc4 <StartGetPressureTask+0x154>)
 8002aec:	781a      	ldrb	r2, [r3, #0]
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	3301      	adds	r3, #1
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	4831      	ldr	r0, [pc, #196]	; (8002bbc <StartGetPressureTask+0x14c>)
 8002af8:	f000 fba6 	bl	8003248 <MS58xx_coeff>
		for (int i = 0; i < 6; i++) {
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	3301      	adds	r3, #1
 8002b00:	60bb      	str	r3, [r7, #8]
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	2b05      	cmp	r3, #5
 8002b06:	ddec      	ble.n	8002ae2 <StartGetPressureTask+0x72>
	}

  /* Infinite loop */
  for(;;)
  {
		if (MS5803_status  == HAL_OK ) {
 8002b08:	4b2d      	ldr	r3, [pc, #180]	; (8002bc0 <StartGetPressureTask+0x150>)
 8002b0a:	781b      	ldrb	r3, [r3, #0]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d10c      	bne.n	8002b2a <StartGetPressureTask+0xba>
			MS58xx_get_values(&hi2c1, ADC_4096, MS5803_coefficient,
 8002b10:	4b29      	ldr	r3, [pc, #164]	; (8002bb8 <StartGetPressureTask+0x148>)
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	2201      	movs	r2, #1
 8002b16:	9202      	str	r2, [sp, #8]
 8002b18:	9301      	str	r3, [sp, #4]
 8002b1a:	4b2e      	ldr	r3, [pc, #184]	; (8002bd4 <StartGetPressureTask+0x164>)
 8002b1c:	9300      	str	r3, [sp, #0]
 8002b1e:	4b2e      	ldr	r3, [pc, #184]	; (8002bd8 <StartGetPressureTask+0x168>)
 8002b20:	4a2a      	ldr	r2, [pc, #168]	; (8002bcc <StartGetPressureTask+0x15c>)
 8002b22:	2108      	movs	r1, #8
 8002b24:	4825      	ldr	r0, [pc, #148]	; (8002bbc <StartGetPressureTask+0x14c>)
 8002b26:	f000 fc31 	bl	800338c <MS58xx_get_values>
					&MS5803_temperature, &MS5803_pressure, MS5803_address, MS5803);
		}

		if (MS5837_status  == HAL_OK ) {
 8002b2a:	4b27      	ldr	r3, [pc, #156]	; (8002bc8 <StartGetPressureTask+0x158>)
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d10c      	bne.n	8002b4c <StartGetPressureTask+0xdc>
			MS58xx_get_values(&hi2c1, ADC_4096, MS5837_coefficient,
 8002b32:	4b24      	ldr	r3, [pc, #144]	; (8002bc4 <StartGetPressureTask+0x154>)
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	2202      	movs	r2, #2
 8002b38:	9202      	str	r2, [sp, #8]
 8002b3a:	9301      	str	r3, [sp, #4]
 8002b3c:	4b27      	ldr	r3, [pc, #156]	; (8002bdc <StartGetPressureTask+0x16c>)
 8002b3e:	9300      	str	r3, [sp, #0]
 8002b40:	4b27      	ldr	r3, [pc, #156]	; (8002be0 <StartGetPressureTask+0x170>)
 8002b42:	4a23      	ldr	r2, [pc, #140]	; (8002bd0 <StartGetPressureTask+0x160>)
 8002b44:	2108      	movs	r1, #8
 8002b46:	481d      	ldr	r0, [pc, #116]	; (8002bbc <StartGetPressureTask+0x14c>)
 8002b48:	f000 fc20 	bl	800338c <MS58xx_get_values>
					&MS5837_temperature, &MS5837_pressure, MS5837_address,MS5837);
		}

		//pressure(Bar)
		pressureInside = MS5803_pressure / 1000;
 8002b4c:	4b21      	ldr	r3, [pc, #132]	; (8002bd4 <StartGetPressureTask+0x164>)
 8002b4e:	ed93 7a00 	vldr	s14, [r3]
 8002b52:	eddf 6a24 	vldr	s13, [pc, #144]	; 8002be4 <StartGetPressureTask+0x174>
 8002b56:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b5a:	4b23      	ldr	r3, [pc, #140]	; (8002be8 <StartGetPressureTask+0x178>)
 8002b5c:	edc3 7a00 	vstr	s15, [r3]
		//depth(cm) = pressure(mbar) / (water density(kg/m3) * gravity(m/s2) * 10)
		depthValue = round(MS5837_pressure / (9.81 * 100.0)) / 100.0;;
 8002b60:	4b1e      	ldr	r3, [pc, #120]	; (8002bdc <StartGetPressureTask+0x16c>)
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4618      	mov	r0, r3
 8002b66:	f7fd fc97 	bl	8000498 <__aeabi_f2d>
 8002b6a:	a311      	add	r3, pc, #68	; (adr r3, 8002bb0 <StartGetPressureTask+0x140>)
 8002b6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b70:	f7fd fe14 	bl	800079c <__aeabi_ddiv>
 8002b74:	4602      	mov	r2, r0
 8002b76:	460b      	mov	r3, r1
 8002b78:	ec43 2b17 	vmov	d7, r2, r3
 8002b7c:	eeb0 0a47 	vmov.f32	s0, s14
 8002b80:	eef0 0a67 	vmov.f32	s1, s15
 8002b84:	f00d f8de 	bl	800fd44 <round>
 8002b88:	ec51 0b10 	vmov	r0, r1, d0
 8002b8c:	f04f 0200 	mov.w	r2, #0
 8002b90:	4b16      	ldr	r3, [pc, #88]	; (8002bec <StartGetPressureTask+0x17c>)
 8002b92:	f7fd fe03 	bl	800079c <__aeabi_ddiv>
 8002b96:	4602      	mov	r2, r0
 8002b98:	460b      	mov	r3, r1
 8002b9a:	4610      	mov	r0, r2
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	f7fd ff95 	bl	8000acc <__aeabi_d2f>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	4a12      	ldr	r2, [pc, #72]	; (8002bf0 <StartGetPressureTask+0x180>)
 8002ba6:	6013      	str	r3, [r2, #0]

    osDelay(1);
 8002ba8:	2001      	movs	r0, #1
 8002baa:	f00b f92c 	bl	800de06 <osDelay>
		if (MS5803_status  == HAL_OK ) {
 8002bae:	e7ab      	b.n	8002b08 <StartGetPressureTask+0x98>
 8002bb0:	00000000 	.word	0x00000000
 8002bb4:	408ea800 	.word	0x408ea800
 8002bb8:	2000000c 	.word	0x2000000c
 8002bbc:	20000708 	.word	0x20000708
 8002bc0:	20000a64 	.word	0x20000a64
 8002bc4:	2000000d 	.word	0x2000000d
 8002bc8:	20000a65 	.word	0x20000a65
 8002bcc:	20000a68 	.word	0x20000a68
 8002bd0:	20000a74 	.word	0x20000a74
 8002bd4:	20000a80 	.word	0x20000a80
 8002bd8:	20000a84 	.word	0x20000a84
 8002bdc:	20000a88 	.word	0x20000a88
 8002be0:	20000a8c 	.word	0x20000a8c
 8002be4:	447a0000 	.word	0x447a0000
 8002be8:	20000a90 	.word	0x20000a90
 8002bec:	40590000 	.word	0x40590000
 8002bf0:	20000a94 	.word	0x20000a94

08002bf4 <StartStroboTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartStroboTask */
void StartStroboTask(void const * argument)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b096      	sub	sp, #88	; 0x58
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartStroboTask */
  /* Infinite loop */
  for(;;)
  {
		if (led_status == 0) {
 8002bfc:	4ba1      	ldr	r3, [pc, #644]	; (8002e84 <StartStroboTask+0x290>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f040 8139 	bne.w	8002e78 <StartStroboTask+0x284>
			if (movement_mode == 0) {
 8002c06:	4ba0      	ldr	r3, [pc, #640]	; (8002e88 <StartStroboTask+0x294>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d149      	bne.n	8002ca2 <StartStroboTask+0xae>
				for (int i = 1; i <= 5; i++) {
 8002c0e:	2301      	movs	r3, #1
 8002c10:	657b      	str	r3, [r7, #84]	; 0x54
 8002c12:	e042      	b.n	8002c9a <StartStroboTask+0xa6>
					// Clear all LEDs
					for (int j = 0; j < 11; j++) {
 8002c14:	2300      	movs	r3, #0
 8002c16:	653b      	str	r3, [r7, #80]	; 0x50
 8002c18:	e008      	b.n	8002c2c <StartStroboTask+0x38>
						Set_LED(j, 0, 0, 0); // Turn off LED
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	2100      	movs	r1, #0
 8002c20:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8002c22:	f7fe f973 	bl	8000f0c <Set_LED>
					for (int j = 0; j < 11; j++) {
 8002c26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c28:	3301      	adds	r3, #1
 8002c2a:	653b      	str	r3, [r7, #80]	; 0x50
 8002c2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c2e:	2b0a      	cmp	r3, #10
 8002c30:	ddf3      	ble.n	8002c1a <StartStroboTask+0x26>
					}
					for (int j = 1; j <= i + 1; j++) {
 8002c32:	2301      	movs	r3, #1
 8002c34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c36:	e00e      	b.n	8002c56 <StartStroboTask+0x62>
						Set_LED(j, 0, 0, 255);
 8002c38:	23ff      	movs	r3, #255	; 0xff
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	2100      	movs	r1, #0
 8002c3e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8002c40:	f7fe f964 	bl	8000f0c <Set_LED>
						Set_LED(j - j, 0, 0, 255);
 8002c44:	23ff      	movs	r3, #255	; 0xff
 8002c46:	2200      	movs	r2, #0
 8002c48:	2100      	movs	r1, #0
 8002c4a:	2000      	movs	r0, #0
 8002c4c:	f7fe f95e 	bl	8000f0c <Set_LED>
					for (int j = 1; j <= i + 1; j++) {
 8002c50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002c52:	3301      	adds	r3, #1
 8002c54:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c58:	3301      	adds	r3, #1
 8002c5a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	ddeb      	ble.n	8002c38 <StartStroboTask+0x44>
					}
					for (int j = 10; j >= 11 - i; j--) {
 8002c60:	230a      	movs	r3, #10
 8002c62:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c64:	e008      	b.n	8002c78 <StartStroboTask+0x84>
						Set_LED(j, 0, 0, 255);
 8002c66:	23ff      	movs	r3, #255	; 0xff
 8002c68:	2200      	movs	r2, #0
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8002c6e:	f7fe f94d 	bl	8000f0c <Set_LED>
					for (int j = 10; j >= 11 - i; j--) {
 8002c72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c74:	3b01      	subs	r3, #1
 8002c76:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c7a:	f1c3 030b 	rsb	r3, r3, #11
 8002c7e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002c80:	429a      	cmp	r2, r3
 8002c82:	daf0      	bge.n	8002c66 <StartStroboTask+0x72>
					}
					WS2812_Send(&htim3, TIM_CHANNEL_2, 105);
 8002c84:	2269      	movs	r2, #105	; 0x69
 8002c86:	2104      	movs	r1, #4
 8002c88:	4880      	ldr	r0, [pc, #512]	; (8002e8c <StartStroboTask+0x298>)
 8002c8a:	f7fe f96d 	bl	8000f68 <WS2812_Send>
					osDelay(120); // Adjust as needed
 8002c8e:	2078      	movs	r0, #120	; 0x78
 8002c90:	f00b f8b9 	bl	800de06 <osDelay>
				for (int i = 1; i <= 5; i++) {
 8002c94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c96:	3301      	adds	r3, #1
 8002c98:	657b      	str	r3, [r7, #84]	; 0x54
 8002c9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002c9c:	2b05      	cmp	r3, #5
 8002c9e:	ddb9      	ble.n	8002c14 <StartStroboTask+0x20>
 8002ca0:	e124      	b.n	8002eec <StartStroboTask+0x2f8>
				}
			} else if (movement_mode == 1) {
 8002ca2:	4b79      	ldr	r3, [pc, #484]	; (8002e88 <StartStroboTask+0x294>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d149      	bne.n	8002d3e <StartStroboTask+0x14a>
				for (int i = 1; i <= 5; i++) {
 8002caa:	2301      	movs	r3, #1
 8002cac:	647b      	str	r3, [r7, #68]	; 0x44
 8002cae:	e042      	b.n	8002d36 <StartStroboTask+0x142>
					// Clear all LEDs
					for (int j = 0; j < 11; j++) {
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	643b      	str	r3, [r7, #64]	; 0x40
 8002cb4:	e008      	b.n	8002cc8 <StartStroboTask+0xd4>
						Set_LED(j, 0, 0, 0); // Turn off LED
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	2200      	movs	r2, #0
 8002cba:	2100      	movs	r1, #0
 8002cbc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002cbe:	f7fe f925 	bl	8000f0c <Set_LED>
					for (int j = 0; j < 11; j++) {
 8002cc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	643b      	str	r3, [r7, #64]	; 0x40
 8002cc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cca:	2b0a      	cmp	r3, #10
 8002ccc:	ddf3      	ble.n	8002cb6 <StartStroboTask+0xc2>
					}
					for (int j = 1; j <= i + 1; j++) {
 8002cce:	2301      	movs	r3, #1
 8002cd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cd2:	e00e      	b.n	8002cf2 <StartStroboTask+0xfe>
						Set_LED(j, 255, 0, 255);
 8002cd4:	23ff      	movs	r3, #255	; 0xff
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	21ff      	movs	r1, #255	; 0xff
 8002cda:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002cdc:	f7fe f916 	bl	8000f0c <Set_LED>
						Set_LED(j - j, 255, 0, 255);
 8002ce0:	23ff      	movs	r3, #255	; 0xff
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	21ff      	movs	r1, #255	; 0xff
 8002ce6:	2000      	movs	r0, #0
 8002ce8:	f7fe f910 	bl	8000f0c <Set_LED>
					for (int j = 1; j <= i + 1; j++) {
 8002cec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cee:	3301      	adds	r3, #1
 8002cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002cf8:	429a      	cmp	r2, r3
 8002cfa:	ddeb      	ble.n	8002cd4 <StartStroboTask+0xe0>
					}
					for (int j = 10; j >= 11 - i; j--) {
 8002cfc:	230a      	movs	r3, #10
 8002cfe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d00:	e008      	b.n	8002d14 <StartStroboTask+0x120>
						Set_LED(j, 255, 0, 255);
 8002d02:	23ff      	movs	r3, #255	; 0xff
 8002d04:	2200      	movs	r2, #0
 8002d06:	21ff      	movs	r1, #255	; 0xff
 8002d08:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002d0a:	f7fe f8ff 	bl	8000f0c <Set_LED>
					for (int j = 10; j >= 11 - i; j--) {
 8002d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d10:	3b01      	subs	r3, #1
 8002d12:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d16:	f1c3 030b 	rsb	r3, r3, #11
 8002d1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	daf0      	bge.n	8002d02 <StartStroboTask+0x10e>
					}
					WS2812_Send(&htim3, TIM_CHANNEL_2, 105);
 8002d20:	2269      	movs	r2, #105	; 0x69
 8002d22:	2104      	movs	r1, #4
 8002d24:	4859      	ldr	r0, [pc, #356]	; (8002e8c <StartStroboTask+0x298>)
 8002d26:	f7fe f91f 	bl	8000f68 <WS2812_Send>
					osDelay(120); // Adjust as needed
 8002d2a:	2078      	movs	r0, #120	; 0x78
 8002d2c:	f00b f86b 	bl	800de06 <osDelay>
				for (int i = 1; i <= 5; i++) {
 8002d30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d32:	3301      	adds	r3, #1
 8002d34:	647b      	str	r3, [r7, #68]	; 0x44
 8002d36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d38:	2b05      	cmp	r3, #5
 8002d3a:	ddb9      	ble.n	8002cb0 <StartStroboTask+0xbc>
 8002d3c:	e0d6      	b.n	8002eec <StartStroboTask+0x2f8>
				}
			} else if (movement_mode == 2) {
 8002d3e:	4b52      	ldr	r3, [pc, #328]	; (8002e88 <StartStroboTask+0x294>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d149      	bne.n	8002dda <StartStroboTask+0x1e6>
				for (int i = 1; i <= 5; i++) {
 8002d46:	2301      	movs	r3, #1
 8002d48:	637b      	str	r3, [r7, #52]	; 0x34
 8002d4a:	e042      	b.n	8002dd2 <StartStroboTask+0x1de>
					// Clear all LEDs
					for (int j = 0; j < 11; j++) {
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	633b      	str	r3, [r7, #48]	; 0x30
 8002d50:	e008      	b.n	8002d64 <StartStroboTask+0x170>
						Set_LED(j, 0, 0, 0); // Turn off LED
 8002d52:	2300      	movs	r3, #0
 8002d54:	2200      	movs	r2, #0
 8002d56:	2100      	movs	r1, #0
 8002d58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d5a:	f7fe f8d7 	bl	8000f0c <Set_LED>
					for (int j = 0; j < 11; j++) {
 8002d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d60:	3301      	adds	r3, #1
 8002d62:	633b      	str	r3, [r7, #48]	; 0x30
 8002d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d66:	2b0a      	cmp	r3, #10
 8002d68:	ddf3      	ble.n	8002d52 <StartStroboTask+0x15e>
					}
					for (int j = 1; j <= i + 1; j++) {
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d6e:	e00e      	b.n	8002d8e <StartStroboTask+0x19a>
						Set_LED(j, 255, 255, 0);
 8002d70:	2300      	movs	r3, #0
 8002d72:	22ff      	movs	r2, #255	; 0xff
 8002d74:	21ff      	movs	r1, #255	; 0xff
 8002d76:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002d78:	f7fe f8c8 	bl	8000f0c <Set_LED>
						Set_LED(j - j, 255, 255, 0);
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	22ff      	movs	r2, #255	; 0xff
 8002d80:	21ff      	movs	r1, #255	; 0xff
 8002d82:	2000      	movs	r0, #0
 8002d84:	f7fe f8c2 	bl	8000f0c <Set_LED>
					for (int j = 1; j <= i + 1; j++) {
 8002d88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d90:	3301      	adds	r3, #1
 8002d92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d94:	429a      	cmp	r2, r3
 8002d96:	ddeb      	ble.n	8002d70 <StartStroboTask+0x17c>
					}
					for (int j = 10; j >= 11 - i; j--) {
 8002d98:	230a      	movs	r3, #10
 8002d9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d9c:	e008      	b.n	8002db0 <StartStroboTask+0x1bc>
						Set_LED(j, 255, 255, 0);
 8002d9e:	2300      	movs	r3, #0
 8002da0:	22ff      	movs	r2, #255	; 0xff
 8002da2:	21ff      	movs	r1, #255	; 0xff
 8002da4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002da6:	f7fe f8b1 	bl	8000f0c <Set_LED>
					for (int j = 10; j >= 11 - i; j--) {
 8002daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dac:	3b01      	subs	r3, #1
 8002dae:	62bb      	str	r3, [r7, #40]	; 0x28
 8002db0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002db2:	f1c3 030b 	rsb	r3, r3, #11
 8002db6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002db8:	429a      	cmp	r2, r3
 8002dba:	daf0      	bge.n	8002d9e <StartStroboTask+0x1aa>
					}
					WS2812_Send(&htim3, TIM_CHANNEL_2, 105);
 8002dbc:	2269      	movs	r2, #105	; 0x69
 8002dbe:	2104      	movs	r1, #4
 8002dc0:	4832      	ldr	r0, [pc, #200]	; (8002e8c <StartStroboTask+0x298>)
 8002dc2:	f7fe f8d1 	bl	8000f68 <WS2812_Send>
					osDelay(120); // Adjust as needed
 8002dc6:	2078      	movs	r0, #120	; 0x78
 8002dc8:	f00b f81d 	bl	800de06 <osDelay>
				for (int i = 1; i <= 5; i++) {
 8002dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dce:	3301      	adds	r3, #1
 8002dd0:	637b      	str	r3, [r7, #52]	; 0x34
 8002dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dd4:	2b05      	cmp	r3, #5
 8002dd6:	ddb9      	ble.n	8002d4c <StartStroboTask+0x158>
 8002dd8:	e088      	b.n	8002eec <StartStroboTask+0x2f8>
				}
			} else if (movement_mode == 3) {
 8002dda:	4b2b      	ldr	r3, [pc, #172]	; (8002e88 <StartStroboTask+0x294>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2b03      	cmp	r3, #3
 8002de0:	f040 8084 	bne.w	8002eec <StartStroboTask+0x2f8>
				for (int i = 1; i <= 5; i++) {
 8002de4:	2301      	movs	r3, #1
 8002de6:	627b      	str	r3, [r7, #36]	; 0x24
 8002de8:	e042      	b.n	8002e70 <StartStroboTask+0x27c>
					// Clear all LEDs
					for (int j = 0; j < 11; j++) {
 8002dea:	2300      	movs	r3, #0
 8002dec:	623b      	str	r3, [r7, #32]
 8002dee:	e008      	b.n	8002e02 <StartStroboTask+0x20e>
						Set_LED(j, 0, 0, 0); // Turn off LED
 8002df0:	2300      	movs	r3, #0
 8002df2:	2200      	movs	r2, #0
 8002df4:	2100      	movs	r1, #0
 8002df6:	6a38      	ldr	r0, [r7, #32]
 8002df8:	f7fe f888 	bl	8000f0c <Set_LED>
					for (int j = 0; j < 11; j++) {
 8002dfc:	6a3b      	ldr	r3, [r7, #32]
 8002dfe:	3301      	adds	r3, #1
 8002e00:	623b      	str	r3, [r7, #32]
 8002e02:	6a3b      	ldr	r3, [r7, #32]
 8002e04:	2b0a      	cmp	r3, #10
 8002e06:	ddf3      	ble.n	8002df0 <StartStroboTask+0x1fc>
					}
					for (int j = 1; j <= i + 1; j++) {
 8002e08:	2301      	movs	r3, #1
 8002e0a:	61fb      	str	r3, [r7, #28]
 8002e0c:	e00e      	b.n	8002e2c <StartStroboTask+0x238>
						Set_LED(j, 255, 0, 0);
 8002e0e:	2300      	movs	r3, #0
 8002e10:	2200      	movs	r2, #0
 8002e12:	21ff      	movs	r1, #255	; 0xff
 8002e14:	69f8      	ldr	r0, [r7, #28]
 8002e16:	f7fe f879 	bl	8000f0c <Set_LED>
						Set_LED(j - j, 255, 0, 0);
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	21ff      	movs	r1, #255	; 0xff
 8002e20:	2000      	movs	r0, #0
 8002e22:	f7fe f873 	bl	8000f0c <Set_LED>
					for (int j = 1; j <= i + 1; j++) {
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	3301      	adds	r3, #1
 8002e2a:	61fb      	str	r3, [r7, #28]
 8002e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e2e:	3301      	adds	r3, #1
 8002e30:	69fa      	ldr	r2, [r7, #28]
 8002e32:	429a      	cmp	r2, r3
 8002e34:	ddeb      	ble.n	8002e0e <StartStroboTask+0x21a>
					}
					for (int j = 10; j >= 11 - i; j--) {
 8002e36:	230a      	movs	r3, #10
 8002e38:	61bb      	str	r3, [r7, #24]
 8002e3a:	e008      	b.n	8002e4e <StartStroboTask+0x25a>
						Set_LED(j, 255, 0, 0);
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	2200      	movs	r2, #0
 8002e40:	21ff      	movs	r1, #255	; 0xff
 8002e42:	69b8      	ldr	r0, [r7, #24]
 8002e44:	f7fe f862 	bl	8000f0c <Set_LED>
					for (int j = 10; j >= 11 - i; j--) {
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	3b01      	subs	r3, #1
 8002e4c:	61bb      	str	r3, [r7, #24]
 8002e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e50:	f1c3 030b 	rsb	r3, r3, #11
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	429a      	cmp	r2, r3
 8002e58:	daf0      	bge.n	8002e3c <StartStroboTask+0x248>
					}
					WS2812_Send(&htim3, TIM_CHANNEL_2, 105);
 8002e5a:	2269      	movs	r2, #105	; 0x69
 8002e5c:	2104      	movs	r1, #4
 8002e5e:	480b      	ldr	r0, [pc, #44]	; (8002e8c <StartStroboTask+0x298>)
 8002e60:	f7fe f882 	bl	8000f68 <WS2812_Send>
					osDelay(120); // Adjust as needed
 8002e64:	2078      	movs	r0, #120	; 0x78
 8002e66:	f00a ffce 	bl	800de06 <osDelay>
				for (int i = 1; i <= 5; i++) {
 8002e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6c:	3301      	adds	r3, #1
 8002e6e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e72:	2b05      	cmp	r3, #5
 8002e74:	ddb9      	ble.n	8002dea <StartStroboTask+0x1f6>
 8002e76:	e039      	b.n	8002eec <StartStroboTask+0x2f8>
			}
		}

		else {
			// Loop through each LED and light it up progressively
			for (int i = 0; i < 11; i++) {
 8002e78:	2300      	movs	r3, #0
 8002e7a:	617b      	str	r3, [r7, #20]
 8002e7c:	e030      	b.n	8002ee0 <StartStroboTask+0x2ec>
				// Clear all LEDs
				for (int j = 0; j < 11; j++) {
 8002e7e:	2300      	movs	r3, #0
 8002e80:	613b      	str	r3, [r7, #16]
 8002e82:	e00e      	b.n	8002ea2 <StartStroboTask+0x2ae>
 8002e84:	20000b78 	.word	0x20000b78
 8002e88:	200009ac 	.word	0x200009ac
 8002e8c:	2000075c 	.word	0x2000075c
					Set_LED(j, 0, 0, 0); // Turn off LED
 8002e90:	2300      	movs	r3, #0
 8002e92:	2200      	movs	r2, #0
 8002e94:	2100      	movs	r1, #0
 8002e96:	6938      	ldr	r0, [r7, #16]
 8002e98:	f7fe f838 	bl	8000f0c <Set_LED>
				for (int j = 0; j < 11; j++) {
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	3301      	adds	r3, #1
 8002ea0:	613b      	str	r3, [r7, #16]
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	2b0a      	cmp	r3, #10
 8002ea6:	ddf3      	ble.n	8002e90 <StartStroboTask+0x29c>
				}
				// Light up LEDs from index 0 to i
				for (int j = 0; j <= i; j++) {
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	60fb      	str	r3, [r7, #12]
 8002eac:	e008      	b.n	8002ec0 <StartStroboTask+0x2cc>
					Set_LED(j, 255, 0, 0); // Set LED color to red
 8002eae:	2300      	movs	r3, #0
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	21ff      	movs	r1, #255	; 0xff
 8002eb4:	68f8      	ldr	r0, [r7, #12]
 8002eb6:	f7fe f829 	bl	8000f0c <Set_LED>
				for (int j = 0; j <= i; j++) {
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	60fb      	str	r3, [r7, #12]
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	ddf2      	ble.n	8002eae <StartStroboTask+0x2ba>
				}
				// Send data to LEDs
				WS2812_Send(&htim3, TIM_CHANNEL_2, 105); // Assuming you're sending 105 bits of data
 8002ec8:	2269      	movs	r2, #105	; 0x69
 8002eca:	2104      	movs	r1, #4
 8002ecc:	4809      	ldr	r0, [pc, #36]	; (8002ef4 <StartStroboTask+0x300>)
 8002ece:	f7fe f84b 	bl	8000f68 <WS2812_Send>
				osDelay(350); // Delay for 500 ms (adjust as needed for desired speed)
 8002ed2:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8002ed6:	f00a ff96 	bl	800de06 <osDelay>
			for (int i = 0; i < 11; i++) {
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	3301      	adds	r3, #1
 8002ede:	617b      	str	r3, [r7, #20]
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	2b0a      	cmp	r3, #10
 8002ee4:	ddcb      	ble.n	8002e7e <StartStroboTask+0x28a>
			}
			led_status = 0;
 8002ee6:	4b04      	ldr	r3, [pc, #16]	; (8002ef8 <StartStroboTask+0x304>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	701a      	strb	r2, [r3, #0]
		}

    osDelay(1);
 8002eec:	2001      	movs	r0, #1
 8002eee:	f00a ff8a 	bl	800de06 <osDelay>
		if (led_status == 0) {
 8002ef2:	e683      	b.n	8002bfc <StartStroboTask+0x8>
 8002ef4:	2000075c 	.word	0x2000075c
 8002ef8:	20000b78 	.word	0x20000b78

08002efc <StartOtherTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOtherTask */
void StartOtherTask(void const * argument)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOtherTask */
  /* Infinite loop */
  for(;;)
  {
		//Switch Actuator Power
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, arm_hw);
 8002f04:	4b24      	ldr	r3, [pc, #144]	; (8002f98 <StartOtherTask+0x9c>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	2140      	movs	r1, #64	; 0x40
 8002f0e:	4823      	ldr	r0, [pc, #140]	; (8002f9c <StartOtherTask+0xa0>)
 8002f10:	f002 fb1e 	bl	8005550 <HAL_GPIO_WritePin>

		//Leaks Sensor
		leaks = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 8002f14:	2120      	movs	r1, #32
 8002f16:	4822      	ldr	r0, [pc, #136]	; (8002fa0 <StartOtherTask+0xa4>)
 8002f18:	f002 fb02 	bl	8005520 <HAL_GPIO_ReadPin>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	461a      	mov	r2, r3
 8002f20:	4b20      	ldr	r3, [pc, #128]	; (8002fa4 <StartOtherTask+0xa8>)
 8002f22:	601a      	str	r2, [r3, #0]

		//Volt Meter Battery
		batt1_volt = convertADCtoVoltage(adc1_value[0], batt1adc_min, batt1adc_max, batt1_min, batt1_max);
 8002f24:	4b20      	ldr	r3, [pc, #128]	; (8002fa8 <StartOtherTask+0xac>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	b29b      	uxth	r3, r3
 8002f2a:	4a20      	ldr	r2, [pc, #128]	; (8002fac <StartOtherTask+0xb0>)
 8002f2c:	6812      	ldr	r2, [r2, #0]
 8002f2e:	b291      	uxth	r1, r2
 8002f30:	4a1f      	ldr	r2, [pc, #124]	; (8002fb0 <StartOtherTask+0xb4>)
 8002f32:	6812      	ldr	r2, [r2, #0]
 8002f34:	b292      	uxth	r2, r2
 8002f36:	481f      	ldr	r0, [pc, #124]	; (8002fb4 <StartOtherTask+0xb8>)
 8002f38:	edd0 7a00 	vldr	s15, [r0]
 8002f3c:	481e      	ldr	r0, [pc, #120]	; (8002fb8 <StartOtherTask+0xbc>)
 8002f3e:	ed90 7a00 	vldr	s14, [r0]
 8002f42:	eef0 0a47 	vmov.f32	s1, s14
 8002f46:	eeb0 0a67 	vmov.f32	s0, s15
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7fe f9d4 	bl	80012f8 <convertADCtoVoltage>
 8002f50:	eef0 7a40 	vmov.f32	s15, s0
 8002f54:	4b19      	ldr	r3, [pc, #100]	; (8002fbc <StartOtherTask+0xc0>)
 8002f56:	edc3 7a00 	vstr	s15, [r3]
		batt2_volt = convertADCtoVoltage(adc1_value[1], batt2adc_min, batt2adc_max, batt2_min, batt2_max);
 8002f5a:	4b13      	ldr	r3, [pc, #76]	; (8002fa8 <StartOtherTask+0xac>)
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	b29b      	uxth	r3, r3
 8002f60:	4a17      	ldr	r2, [pc, #92]	; (8002fc0 <StartOtherTask+0xc4>)
 8002f62:	6812      	ldr	r2, [r2, #0]
 8002f64:	b291      	uxth	r1, r2
 8002f66:	4a17      	ldr	r2, [pc, #92]	; (8002fc4 <StartOtherTask+0xc8>)
 8002f68:	6812      	ldr	r2, [r2, #0]
 8002f6a:	b292      	uxth	r2, r2
 8002f6c:	4816      	ldr	r0, [pc, #88]	; (8002fc8 <StartOtherTask+0xcc>)
 8002f6e:	edd0 7a00 	vldr	s15, [r0]
 8002f72:	4816      	ldr	r0, [pc, #88]	; (8002fcc <StartOtherTask+0xd0>)
 8002f74:	ed90 7a00 	vldr	s14, [r0]
 8002f78:	eef0 0a47 	vmov.f32	s1, s14
 8002f7c:	eeb0 0a67 	vmov.f32	s0, s15
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7fe f9b9 	bl	80012f8 <convertADCtoVoltage>
 8002f86:	eef0 7a40 	vmov.f32	s15, s0
 8002f8a:	4b11      	ldr	r3, [pc, #68]	; (8002fd0 <StartOtherTask+0xd4>)
 8002f8c:	edc3 7a00 	vstr	s15, [r3]
		//IMU Calibration
//		if(IMUStatus == "Resetting.."){
//
//		}

    osDelay(1);
 8002f90:	2001      	movs	r0, #1
 8002f92:	f00a ff38 	bl	800de06 <osDelay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, arm_hw);
 8002f96:	e7b5      	b.n	8002f04 <StartOtherTask+0x8>
 8002f98:	200009b4 	.word	0x200009b4
 8002f9c:	40020000 	.word	0x40020000
 8002fa0:	40020800 	.word	0x40020800
 8002fa4:	20000b7c 	.word	0x20000b7c
 8002fa8:	20000b60 	.word	0x20000b60
 8002fac:	20000030 	.word	0x20000030
 8002fb0:	20000034 	.word	0x20000034
 8002fb4:	20000040 	.word	0x20000040
 8002fb8:	20000044 	.word	0x20000044
 8002fbc:	20000b68 	.word	0x20000b68
 8002fc0:	20000038 	.word	0x20000038
 8002fc4:	2000003c 	.word	0x2000003c
 8002fc8:	20000048 	.word	0x20000048
 8002fcc:	2000004c 	.word	0x2000004c
 8002fd0:	20000b6c 	.word	0x20000b6c

08002fd4 <StartPidTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPidTask */
void StartPidTask(void const * argument)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b082      	sub	sp, #8
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPidTask */
  /* Infinite loop */
  for(;;)
  {
	  pid_param(&yaw, c_yaw[0], c_yaw[1], c_yaw[2]);
 8002fdc:	4b57      	ldr	r3, [pc, #348]	; (800313c <StartPidTask+0x168>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	ee07 3a90 	vmov	s15, r3
 8002fe4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fe8:	4b54      	ldr	r3, [pc, #336]	; (800313c <StartPidTask+0x168>)
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	ee07 3a10 	vmov	s14, r3
 8002ff0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8002ff4:	4b51      	ldr	r3, [pc, #324]	; (800313c <StartPidTask+0x168>)
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	ee06 3a90 	vmov	s13, r3
 8002ffc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003000:	eeb0 1a66 	vmov.f32	s2, s13
 8003004:	eef0 0a47 	vmov.f32	s1, s14
 8003008:	eeb0 0a67 	vmov.f32	s0, s15
 800300c:	484c      	ldr	r0, [pc, #304]	; (8003140 <StartPidTask+0x16c>)
 800300e:	f000 fb01 	bl	8003614 <pid_param>
	  pid_param(&pitch, c_pitch[0], c_pitch[1], c_pitch[2]);
 8003012:	4b4c      	ldr	r3, [pc, #304]	; (8003144 <StartPidTask+0x170>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	ee07 3a90 	vmov	s15, r3
 800301a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800301e:	4b49      	ldr	r3, [pc, #292]	; (8003144 <StartPidTask+0x170>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	ee07 3a10 	vmov	s14, r3
 8003026:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800302a:	4b46      	ldr	r3, [pc, #280]	; (8003144 <StartPidTask+0x170>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	ee06 3a90 	vmov	s13, r3
 8003032:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8003036:	eeb0 1a66 	vmov.f32	s2, s13
 800303a:	eef0 0a47 	vmov.f32	s1, s14
 800303e:	eeb0 0a67 	vmov.f32	s0, s15
 8003042:	4841      	ldr	r0, [pc, #260]	; (8003148 <StartPidTask+0x174>)
 8003044:	f000 fae6 	bl	8003614 <pid_param>
	  pid_param(&roll, c_roll[0], c_roll[1], c_roll[2]);
 8003048:	4b40      	ldr	r3, [pc, #256]	; (800314c <StartPidTask+0x178>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	ee07 3a90 	vmov	s15, r3
 8003050:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003054:	4b3d      	ldr	r3, [pc, #244]	; (800314c <StartPidTask+0x178>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	ee07 3a10 	vmov	s14, r3
 800305c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003060:	4b3a      	ldr	r3, [pc, #232]	; (800314c <StartPidTask+0x178>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	ee06 3a90 	vmov	s13, r3
 8003068:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800306c:	eeb0 1a66 	vmov.f32	s2, s13
 8003070:	eef0 0a47 	vmov.f32	s1, s14
 8003074:	eeb0 0a67 	vmov.f32	s0, s15
 8003078:	4835      	ldr	r0, [pc, #212]	; (8003150 <StartPidTask+0x17c>)
 800307a:	f000 facb 	bl	8003614 <pid_param>
	  pid_param(&depth, c_depth[0], c_depth[1], c_depth[2]);
 800307e:	4b35      	ldr	r3, [pc, #212]	; (8003154 <StartPidTask+0x180>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	ee07 3a90 	vmov	s15, r3
 8003086:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800308a:	4b32      	ldr	r3, [pc, #200]	; (8003154 <StartPidTask+0x180>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	ee07 3a10 	vmov	s14, r3
 8003092:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003096:	4b2f      	ldr	r3, [pc, #188]	; (8003154 <StartPidTask+0x180>)
 8003098:	689b      	ldr	r3, [r3, #8]
 800309a:	ee06 3a90 	vmov	s13, r3
 800309e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80030a2:	eeb0 1a66 	vmov.f32	s2, s13
 80030a6:	eef0 0a47 	vmov.f32	s1, s14
 80030aa:	eeb0 0a67 	vmov.f32	s0, s15
 80030ae:	482a      	ldr	r0, [pc, #168]	; (8003158 <StartPidTask+0x184>)
 80030b0:	f000 fab0 	bl	8003614 <pid_param>

	  yaw.input = bno055_yaw;
 80030b4:	4b29      	ldr	r3, [pc, #164]	; (800315c <StartPidTask+0x188>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a21      	ldr	r2, [pc, #132]	; (8003140 <StartPidTask+0x16c>)
 80030ba:	60d3      	str	r3, [r2, #12]
	  pitch.input = bno055_pitch;
 80030bc:	4b28      	ldr	r3, [pc, #160]	; (8003160 <StartPidTask+0x18c>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a21      	ldr	r2, [pc, #132]	; (8003148 <StartPidTask+0x174>)
 80030c2:	60d3      	str	r3, [r2, #12]
	  roll.input = bno055_roll;
 80030c4:	4b27      	ldr	r3, [pc, #156]	; (8003164 <StartPidTask+0x190>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a21      	ldr	r2, [pc, #132]	; (8003150 <StartPidTask+0x17c>)
 80030ca:	60d3      	str	r3, [r2, #12]
	  depth.input = depthValue;
 80030cc:	4b26      	ldr	r3, [pc, #152]	; (8003168 <StartPidTask+0x194>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a21      	ldr	r2, [pc, #132]	; (8003158 <StartPidTask+0x184>)
 80030d2:	60d3      	str	r3, [r2, #12]

	  yaw.setpoint = set_point[0];
 80030d4:	4b25      	ldr	r3, [pc, #148]	; (800316c <StartPidTask+0x198>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	ee07 3a90 	vmov	s15, r3
 80030dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030e0:	4b17      	ldr	r3, [pc, #92]	; (8003140 <StartPidTask+0x16c>)
 80030e2:	edc3 7a05 	vstr	s15, [r3, #20]
	  pitch.setpoint = set_point[1];
 80030e6:	4b21      	ldr	r3, [pc, #132]	; (800316c <StartPidTask+0x198>)
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	ee07 3a90 	vmov	s15, r3
 80030ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80030f2:	4b15      	ldr	r3, [pc, #84]	; (8003148 <StartPidTask+0x174>)
 80030f4:	edc3 7a05 	vstr	s15, [r3, #20]
	  roll.setpoint = set_point[2];
 80030f8:	4b1c      	ldr	r3, [pc, #112]	; (800316c <StartPidTask+0x198>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	ee07 3a90 	vmov	s15, r3
 8003100:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003104:	4b12      	ldr	r3, [pc, #72]	; (8003150 <StartPidTask+0x17c>)
 8003106:	edc3 7a05 	vstr	s15, [r3, #20]
	  depth.setpoint = set_point[3];
 800310a:	4b18      	ldr	r3, [pc, #96]	; (800316c <StartPidTask+0x198>)
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	ee07 3a90 	vmov	s15, r3
 8003112:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003116:	4b10      	ldr	r3, [pc, #64]	; (8003158 <StartPidTask+0x184>)
 8003118:	edc3 7a05 	vstr	s15, [r3, #20]

	  pid_calculate_rad(&yaw);
 800311c:	4808      	ldr	r0, [pc, #32]	; (8003140 <StartPidTask+0x16c>)
 800311e:	f000 fa93 	bl	8003648 <pid_calculate_rad>
	  pid_calculate_rad(&pitch);
 8003122:	4809      	ldr	r0, [pc, #36]	; (8003148 <StartPidTask+0x174>)
 8003124:	f000 fa90 	bl	8003648 <pid_calculate_rad>
	  pid_calculate_rad(&roll);
 8003128:	4809      	ldr	r0, [pc, #36]	; (8003150 <StartPidTask+0x17c>)
 800312a:	f000 fa8d 	bl	8003648 <pid_calculate_rad>
	  pid_calculate(&depth);
 800312e:	480a      	ldr	r0, [pc, #40]	; (8003158 <StartPidTask+0x184>)
 8003130:	f000 fb18 	bl	8003764 <pid_calculate>

    osDelay(1);
 8003134:	2001      	movs	r0, #1
 8003136:	f00a fe66 	bl	800de06 <osDelay>
	  pid_param(&yaw, c_yaw[0], c_yaw[1], c_yaw[2]);
 800313a:	e74f      	b.n	8002fdc <StartPidTask+0x8>
 800313c:	200009c0 	.word	0x200009c0
 8003140:	20000a98 	.word	0x20000a98
 8003144:	200009cc 	.word	0x200009cc
 8003148:	20000ac0 	.word	0x20000ac0
 800314c:	200009d8 	.word	0x200009d8
 8003150:	20000ae8 	.word	0x20000ae8
 8003154:	200009e4 	.word	0x200009e4
 8003158:	20000b10 	.word	0x20000b10
 800315c:	20000a50 	.word	0x20000a50
 8003160:	20000a54 	.word	0x20000a54
 8003164:	20000a58 	.word	0x20000a58
 8003168:	20000a94 	.word	0x20000a94
 800316c:	20000998 	.word	0x20000998

08003170 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a04      	ldr	r2, [pc, #16]	; (8003190 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d101      	bne.n	8003186 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003182:	f000 fef7 	bl	8003f74 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003186:	bf00      	nop
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	40002000 	.word	0x40002000

08003194 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003198:	b672      	cpsid	i
}
 800319a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800319c:	e7fe      	b.n	800319c <Error_Handler+0x8>

0800319e <MS58xx_read>:
 * @param handle The I2C handle being used
 * @param bufp The buffer to be read into
 * @param len The length of the buffer in 8-bit increments
 * @retval HAL Status
 */
HAL_StatusTypeDef MS58xx_read(void *handle, uint8_t *bufp, uint16_t len, uint8_t address) {
 800319e:	b580      	push	{r7, lr}
 80031a0:	b086      	sub	sp, #24
 80031a2:	af02      	add	r7, sp, #8
 80031a4:	60f8      	str	r0, [r7, #12]
 80031a6:	60b9      	str	r1, [r7, #8]
 80031a8:	4611      	mov	r1, r2
 80031aa:	461a      	mov	r2, r3
 80031ac:	460b      	mov	r3, r1
 80031ae:	80fb      	strh	r3, [r7, #6]
 80031b0:	4613      	mov	r3, r2
 80031b2:	717b      	strb	r3, [r7, #5]
    return HAL_I2C_Master_Receive(handle, MS58xx_I2C_ADDRESS(address), bufp, len, 100);
 80031b4:	797b      	ldrb	r3, [r7, #5]
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	b299      	uxth	r1, r3
 80031bc:	88fb      	ldrh	r3, [r7, #6]
 80031be:	2264      	movs	r2, #100	; 0x64
 80031c0:	9200      	str	r2, [sp, #0]
 80031c2:	68ba      	ldr	r2, [r7, #8]
 80031c4:	68f8      	ldr	r0, [r7, #12]
 80031c6:	f002 fc1f 	bl	8005a08 <HAL_I2C_Master_Receive>
 80031ca:	4603      	mov	r3, r0
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3710      	adds	r7, #16
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}

080031d4 <MS58xx_write>:
 * @param handle The I2C handle being used
 * @param bufp The buffer to read from
 * @param len The length of the buffer in 8-bit increments
 * @retval HAL Status
 */
HAL_StatusTypeDef MS58xx_write(void *handle, uint8_t *bufp, uint16_t len, uint8_t address) {
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b086      	sub	sp, #24
 80031d8:	af02      	add	r7, sp, #8
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	4611      	mov	r1, r2
 80031e0:	461a      	mov	r2, r3
 80031e2:	460b      	mov	r3, r1
 80031e4:	80fb      	strh	r3, [r7, #6]
 80031e6:	4613      	mov	r3, r2
 80031e8:	717b      	strb	r3, [r7, #5]
    return HAL_I2C_Master_Transmit(handle, MS58xx_I2C_ADDRESS(address), bufp, len, 100);
 80031ea:	797b      	ldrb	r3, [r7, #5]
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	005b      	lsls	r3, r3, #1
 80031f0:	b299      	uxth	r1, r3
 80031f2:	88fb      	ldrh	r3, [r7, #6]
 80031f4:	2264      	movs	r2, #100	; 0x64
 80031f6:	9200      	str	r2, [sp, #0]
 80031f8:	68ba      	ldr	r2, [r7, #8]
 80031fa:	68f8      	ldr	r0, [r7, #12]
 80031fc:	f002 fb06 	bl	800580c <HAL_I2C_Master_Transmit>
 8003200:	4603      	mov	r3, r0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <MS58xx_reset>:
 * @brief Resets the MS58xx
 * @param handle The I2C Handle being used
 * @retval HAL Status
 */

HAL_StatusTypeDef MS58xx_reset(void *handle, uint8_t address) {
 800320a:	b580      	push	{r7, lr}
 800320c:	b088      	sub	sp, #32
 800320e:	af02      	add	r7, sp, #8
 8003210:	6078      	str	r0, [r7, #4]
 8003212:	460b      	mov	r3, r1
 8003214:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[12];
    buf[0] = MS58xx_RESET;
 8003216:	231e      	movs	r3, #30
 8003218:	723b      	strb	r3, [r7, #8]
    HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(handle, MS58xx_I2C_ADDRESS(address), buf, 1, 1000);
 800321a:	78fb      	ldrb	r3, [r7, #3]
 800321c:	b29b      	uxth	r3, r3
 800321e:	005b      	lsls	r3, r3, #1
 8003220:	b299      	uxth	r1, r3
 8003222:	f107 0208 	add.w	r2, r7, #8
 8003226:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800322a:	9300      	str	r3, [sp, #0]
 800322c:	2301      	movs	r3, #1
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f002 faec 	bl	800580c <HAL_I2C_Master_Transmit>
 8003234:	4603      	mov	r3, r0
 8003236:	75fb      	strb	r3, [r7, #23]
    osDelay(3);
 8003238:	2003      	movs	r0, #3
 800323a:	f00a fde4 	bl	800de06 <osDelay>
    return ret;
 800323e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003240:	4618      	mov	r0, r3
 8003242:	3718      	adds	r7, #24
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}

08003248 <MS58xx_coeff>:
 * @param coeff The pointer to the coefficient being read in to
 * @param value The coefficient number
 * @return HAL Status
 */

HAL_StatusTypeDef MS58xx_coeff(void *handle, uint16_t *coeff, uint8_t address, uint8_t value) {
 8003248:	b580      	push	{r7, lr}
 800324a:	b08a      	sub	sp, #40	; 0x28
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	4611      	mov	r1, r2
 8003254:	461a      	mov	r2, r3
 8003256:	460b      	mov	r3, r1
 8003258:	71fb      	strb	r3, [r7, #7]
 800325a:	4613      	mov	r3, r2
 800325c:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[12];
    buf[0] = MS58xx_PROM + (value << 1);
 800325e:	79bb      	ldrb	r3, [r7, #6]
 8003260:	005b      	lsls	r3, r3, #1
 8003262:	b2db      	uxtb	r3, r3
 8003264:	3b60      	subs	r3, #96	; 0x60
 8003266:	b2db      	uxtb	r3, r3
 8003268:	763b      	strb	r3, [r7, #24]
    HAL_StatusTypeDef x = MS58xx_write(handle, buf, 1, address);
 800326a:	79fb      	ldrb	r3, [r7, #7]
 800326c:	f107 0118 	add.w	r1, r7, #24
 8003270:	2201      	movs	r2, #1
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f7ff ffae 	bl	80031d4 <MS58xx_write>
 8003278:	4603      	mov	r3, r0
 800327a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    osDelay(2);
 800327e:	2002      	movs	r0, #2
 8003280:	f00a fdc1 	bl	800de06 <osDelay>
    uint8_t c[2];
    x = MS58xx_read(handle, c, 2, address);
 8003284:	79fb      	ldrb	r3, [r7, #7]
 8003286:	f107 0114 	add.w	r1, r7, #20
 800328a:	2202      	movs	r2, #2
 800328c:	68f8      	ldr	r0, [r7, #12]
 800328e:	f7ff ff86 	bl	800319e <MS58xx_read>
 8003292:	4603      	mov	r3, r0
 8003294:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    *coeff = (c[0] << 8) + c[1];
 8003298:	7d3b      	ldrb	r3, [r7, #20]
 800329a:	b29b      	uxth	r3, r3
 800329c:	021b      	lsls	r3, r3, #8
 800329e:	b29a      	uxth	r2, r3
 80032a0:	7d7b      	ldrb	r3, [r7, #21]
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	4413      	add	r3, r2
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	801a      	strh	r2, [r3, #0]
    return x;
 80032ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3728      	adds	r7, #40	; 0x28
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <MS58xx_ADC>:
 * @param handle The I2C Handle being used
 * @param type The measurement type, chosen from measurement enum
 * @param prec The precision to use, chosen from precision enum
 * @retval Raw 24-bit data from the ADC
 */
uint32_t MS58xx_ADC(void *handle, measurement type, precision prec, uint8_t address) {
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b088      	sub	sp, #32
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	4608      	mov	r0, r1
 80032c2:	4611      	mov	r1, r2
 80032c4:	461a      	mov	r2, r3
 80032c6:	4603      	mov	r3, r0
 80032c8:	70fb      	strb	r3, [r7, #3]
 80032ca:	460b      	mov	r3, r1
 80032cc:	70bb      	strb	r3, [r7, #2]
 80032ce:	4613      	mov	r3, r2
 80032d0:	707b      	strb	r3, [r7, #1]
    uint32_t result;
    uint8_t buf[12];
    buf[0] = MS58xx_ADC_CONV + type + prec; // Tell the ADC to convert along with the precision and type
 80032d2:	78fa      	ldrb	r2, [r7, #3]
 80032d4:	78bb      	ldrb	r3, [r7, #2]
 80032d6:	4413      	add	r3, r2
 80032d8:	b2db      	uxtb	r3, r3
 80032da:	3340      	adds	r3, #64	; 0x40
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	743b      	strb	r3, [r7, #16]
    MS58xx_write(handle, buf, 1, address);
 80032e0:	787b      	ldrb	r3, [r7, #1]
 80032e2:	f107 0110 	add.w	r1, r7, #16
 80032e6:	2201      	movs	r2, #1
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f7ff ff73 	bl	80031d4 <MS58xx_write>
    osDelay(2);
 80032ee:	2002      	movs	r0, #2
 80032f0:	f00a fd89 	bl	800de06 <osDelay>

    switch (prec) {
 80032f4:	78bb      	ldrb	r3, [r7, #2]
 80032f6:	2b08      	cmp	r3, #8
 80032f8:	d828      	bhi.n	800334c <MS58xx_ADC+0x94>
 80032fa:	a201      	add	r2, pc, #4	; (adr r2, 8003300 <MS58xx_ADC+0x48>)
 80032fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003300:	08003325 	.word	0x08003325
 8003304:	0800334d 	.word	0x0800334d
 8003308:	0800332d 	.word	0x0800332d
 800330c:	0800334d 	.word	0x0800334d
 8003310:	08003335 	.word	0x08003335
 8003314:	0800334d 	.word	0x0800334d
 8003318:	0800333d 	.word	0x0800333d
 800331c:	0800334d 	.word	0x0800334d
 8003320:	08003345 	.word	0x08003345
        case ADC_256: osDelay(1); break;
 8003324:	2001      	movs	r0, #1
 8003326:	f00a fd6e 	bl	800de06 <osDelay>
 800332a:	e00f      	b.n	800334c <MS58xx_ADC+0x94>
        case ADC_512: osDelay(3); break;
 800332c:	2003      	movs	r0, #3
 800332e:	f00a fd6a 	bl	800de06 <osDelay>
 8003332:	e00b      	b.n	800334c <MS58xx_ADC+0x94>
        case ADC_1024: osDelay(4); break;
 8003334:	2004      	movs	r0, #4
 8003336:	f00a fd66 	bl	800de06 <osDelay>
 800333a:	e007      	b.n	800334c <MS58xx_ADC+0x94>
        case ADC_2048: osDelay(6); break;
 800333c:	2006      	movs	r0, #6
 800333e:	f00a fd62 	bl	800de06 <osDelay>
 8003342:	e003      	b.n	800334c <MS58xx_ADC+0x94>
        case ADC_4096: osDelay(10); break;  // Delay longer if higher precision, as conversion takes longer.
 8003344:	200a      	movs	r0, #10
 8003346:	f00a fd5e 	bl	800de06 <osDelay>
 800334a:	bf00      	nop
    }

    buf[0] = MS58xx_ADC_READ; // Tell the MS58xx that we want to read the ADC
 800334c:	2300      	movs	r3, #0
 800334e:	743b      	strb	r3, [r7, #16]
    MS58xx_write(handle, buf, 1, address);
 8003350:	787b      	ldrb	r3, [r7, #1]
 8003352:	f107 0110 	add.w	r1, r7, #16
 8003356:	2201      	movs	r2, #1
 8003358:	6878      	ldr	r0, [r7, #4]
 800335a:	f7ff ff3b 	bl	80031d4 <MS58xx_write>
    osDelay(2);
 800335e:	2002      	movs	r0, #2
 8003360:	f00a fd51 	bl	800de06 <osDelay>

    uint8_t c[3];
    MS58xx_read(handle, c, 3, address); // Read out the ADC
 8003364:	787b      	ldrb	r3, [r7, #1]
 8003366:	f107 010c 	add.w	r1, r7, #12
 800336a:	2203      	movs	r2, #3
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f7ff ff16 	bl	800319e <MS58xx_read>
    result = (c[0] << 16) + (c[1] << 8) + c[2]; // Convert the three 8-bit values into one value.
 8003372:	7b3b      	ldrb	r3, [r7, #12]
 8003374:	041a      	lsls	r2, r3, #16
 8003376:	7b7b      	ldrb	r3, [r7, #13]
 8003378:	021b      	lsls	r3, r3, #8
 800337a:	4413      	add	r3, r2
 800337c:	7bba      	ldrb	r2, [r7, #14]
 800337e:	4413      	add	r3, r2
 8003380:	61fb      	str	r3, [r7, #28]
    return result;
 8003382:	69fb      	ldr	r3, [r7, #28]
}
 8003384:	4618      	mov	r0, r3
 8003386:	3720      	adds	r7, #32
 8003388:	46bd      	mov	sp, r7
 800338a:	bd80      	pop	{r7, pc}

0800338c <MS58xx_get_values>:
 * @param handle The I2C Handle being used
 * @param prec The precision to be used
 * @param temperature The pointer to the temperature variable being read in to.
 * @param pressure The pointer to the pressure variable being read in to.
 */
void MS58xx_get_values(void *handle, precision prec, uint16_t coeff[6], float *temperature, float *pressure, uint8_t address, MS58xx_type sensor_type) {
 800338c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003390:	b0a8      	sub	sp, #160	; 0xa0
 8003392:	af00      	add	r7, sp, #0
 8003394:	6678      	str	r0, [r7, #100]	; 0x64
 8003396:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003398:	65bb      	str	r3, [r7, #88]	; 0x58
 800339a:	460b      	mov	r3, r1
 800339c:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
    uint32_t temperature_raw = MS58xx_ADC(handle, TEMPERATURE, prec, address);
 80033a0:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 80033a4:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 80033a8:	2110      	movs	r1, #16
 80033aa:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80033ac:	f7ff ff84 	bl	80032b8 <MS58xx_ADC>
 80033b0:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
    uint32_t pressure_raw = MS58xx_ADC(handle, PRESSURE, prec, address); // get temperature and pressure raw values
 80033b4:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 80033b8:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 80033bc:	2100      	movs	r1, #0
 80033be:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80033c0:	f7ff ff7a 	bl	80032b8 <MS58xx_ADC>
 80033c4:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

    int32_t sub = coeff[4] * 256;
 80033c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033ca:	3308      	adds	r3, #8
 80033cc:	881b      	ldrh	r3, [r3, #0]
 80033ce:	021b      	lsls	r3, r3, #8
 80033d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    int32_t dT = temperature_raw - sub;
 80033d4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80033d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80033dc:	1a9b      	subs	r3, r3, r2
 80033de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    int64_t add = ((int64_t)coeff[4])*((int64_t)dT)/128;
 80033e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033e4:	3308      	adds	r3, #8
 80033e6:	881b      	ldrh	r3, [r3, #0]
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	2200      	movs	r2, #0
 80033ec:	4698      	mov	r8, r3
 80033ee:	4691      	mov	r9, r2
 80033f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80033f4:	17da      	asrs	r2, r3, #31
 80033f6:	461c      	mov	r4, r3
 80033f8:	4615      	mov	r5, r2
 80033fa:	fb04 f209 	mul.w	r2, r4, r9
 80033fe:	fb08 f305 	mul.w	r3, r8, r5
 8003402:	4413      	add	r3, r2
 8003404:	fba8 ab04 	umull	sl, fp, r8, r4
 8003408:	445b      	add	r3, fp
 800340a:	469b      	mov	fp, r3
 800340c:	4652      	mov	r2, sl
 800340e:	465b      	mov	r3, fp
 8003410:	2b00      	cmp	r3, #0
 8003412:	da07      	bge.n	8003424 <MS58xx_get_values+0x98>
 8003414:	f112 017f 	adds.w	r1, r2, #127	; 0x7f
 8003418:	62b9      	str	r1, [r7, #40]	; 0x28
 800341a:	f143 0300 	adc.w	r3, r3, #0
 800341e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003420:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003424:	f04f 0000 	mov.w	r0, #0
 8003428:	f04f 0100 	mov.w	r1, #0
 800342c:	09d0      	lsrs	r0, r2, #7
 800342e:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 8003432:	11d9      	asrs	r1, r3, #7
 8003434:	e9c7 0120 	strd	r0, r1, [r7, #128]	; 0x80
    int64_t OFF = ((int64_t)coeff[2])*65536+add;
 8003438:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800343a:	3304      	adds	r3, #4
 800343c:	881b      	ldrh	r3, [r3, #0]
 800343e:	b29b      	uxth	r3, r3
 8003440:	2200      	movs	r2, #0
 8003442:	64bb      	str	r3, [r7, #72]	; 0x48
 8003444:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003446:	f04f 0000 	mov.w	r0, #0
 800344a:	f04f 0100 	mov.w	r1, #0
 800344e:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003452:	462b      	mov	r3, r5
 8003454:	0419      	lsls	r1, r3, #16
 8003456:	4623      	mov	r3, r4
 8003458:	ea41 4113 	orr.w	r1, r1, r3, lsr #16
 800345c:	4623      	mov	r3, r4
 800345e:	0418      	lsls	r0, r3, #16
 8003460:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8003464:	1814      	adds	r4, r2, r0
 8003466:	623c      	str	r4, [r7, #32]
 8003468:	414b      	adcs	r3, r1
 800346a:	627b      	str	r3, [r7, #36]	; 0x24
 800346c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003470:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
    int64_t SENS = coeff[1] * (32768) + (coeff[3]*dT)/(256);
 8003474:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003476:	3302      	adds	r3, #2
 8003478:	881b      	ldrh	r3, [r3, #0]
 800347a:	03d9      	lsls	r1, r3, #15
 800347c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800347e:	3306      	adds	r3, #6
 8003480:	881b      	ldrh	r3, [r3, #0]
 8003482:	461a      	mov	r2, r3
 8003484:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003488:	fb02 f303 	mul.w	r3, r2, r3
 800348c:	2b00      	cmp	r3, #0
 800348e:	da00      	bge.n	8003492 <MS58xx_get_values+0x106>
 8003490:	33ff      	adds	r3, #255	; 0xff
 8003492:	121b      	asrs	r3, r3, #8
 8003494:	440b      	add	r3, r1
 8003496:	17da      	asrs	r2, r3, #31
 8003498:	61bb      	str	r3, [r7, #24]
 800349a:	61fa      	str	r2, [r7, #28]
 800349c:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80034a0:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
    int64_t mult = pressure_raw*SENS/2097152;
 80034a4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80034a8:	2200      	movs	r2, #0
 80034aa:	643b      	str	r3, [r7, #64]	; 0x40
 80034ac:	647a      	str	r2, [r7, #68]	; 0x44
 80034ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034b0:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 80034b4:	462a      	mov	r2, r5
 80034b6:	fb02 f203 	mul.w	r2, r2, r3
 80034ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034bc:	4621      	mov	r1, r4
 80034be:	fb01 f303 	mul.w	r3, r1, r3
 80034c2:	441a      	add	r2, r3
 80034c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034c6:	4621      	mov	r1, r4
 80034c8:	fba3 1301 	umull	r1, r3, r3, r1
 80034cc:	657b      	str	r3, [r7, #84]	; 0x54
 80034ce:	460b      	mov	r3, r1
 80034d0:	653b      	str	r3, [r7, #80]	; 0x50
 80034d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034d4:	18d3      	adds	r3, r2, r3
 80034d6:	657b      	str	r3, [r7, #84]	; 0x54
 80034d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80034dc:	2b00      	cmp	r3, #0
 80034de:	da07      	bge.n	80034f0 <MS58xx_get_values+0x164>
 80034e0:	4949      	ldr	r1, [pc, #292]	; (8003608 <MS58xx_get_values+0x27c>)
 80034e2:	1851      	adds	r1, r2, r1
 80034e4:	6139      	str	r1, [r7, #16]
 80034e6:	f143 0300 	adc.w	r3, r3, #0
 80034ea:	617b      	str	r3, [r7, #20]
 80034ec:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80034f0:	f04f 0000 	mov.w	r0, #0
 80034f4:	f04f 0100 	mov.w	r1, #0
 80034f8:	0d50      	lsrs	r0, r2, #21
 80034fa:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 80034fe:	1559      	asrs	r1, r3, #21
 8003500:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68

    int32_t pres;
    if (sensor_type == MS5803) {
 8003504:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
 8003508:	2b01      	cmp	r3, #1
 800350a:	d123      	bne.n	8003554 <MS58xx_get_values+0x1c8>
        pres = (mult-OFF)/32768;
 800350c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003510:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003514:	1a84      	subs	r4, r0, r2
 8003516:	63bc      	str	r4, [r7, #56]	; 0x38
 8003518:	eb61 0303 	sbc.w	r3, r1, r3
 800351c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800351e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003522:	2b00      	cmp	r3, #0
 8003524:	da08      	bge.n	8003538 <MS58xx_get_values+0x1ac>
 8003526:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800352a:	1851      	adds	r1, r2, r1
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	f143 0300 	adc.w	r3, r3, #0
 8003532:	60fb      	str	r3, [r7, #12]
 8003534:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003538:	f04f 0000 	mov.w	r0, #0
 800353c:	f04f 0100 	mov.w	r1, #0
 8003540:	0bd0      	lsrs	r0, r2, #15
 8003542:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 8003546:	13d9      	asrs	r1, r3, #15
 8003548:	4602      	mov	r2, r0
 800354a:	460b      	mov	r3, r1
 800354c:	4613      	mov	r3, r2
 800354e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003552:	e02a      	b.n	80035aa <MS58xx_get_values+0x21e>
    } else if (sensor_type == MS5837) {
 8003554:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
 8003558:	2b02      	cmp	r3, #2
 800355a:	d123      	bne.n	80035a4 <MS58xx_get_values+0x218>
        pres = (mult-OFF)/8192;
 800355c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003560:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003564:	1a84      	subs	r4, r0, r2
 8003566:	633c      	str	r4, [r7, #48]	; 0x30
 8003568:	eb61 0303 	sbc.w	r3, r1, r3
 800356c:	637b      	str	r3, [r7, #52]	; 0x34
 800356e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003572:	2b00      	cmp	r3, #0
 8003574:	da08      	bge.n	8003588 <MS58xx_get_values+0x1fc>
 8003576:	f641 71ff 	movw	r1, #8191	; 0x1fff
 800357a:	1851      	adds	r1, r2, r1
 800357c:	6039      	str	r1, [r7, #0]
 800357e:	f143 0300 	adc.w	r3, r3, #0
 8003582:	607b      	str	r3, [r7, #4]
 8003584:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003588:	f04f 0000 	mov.w	r0, #0
 800358c:	f04f 0100 	mov.w	r1, #0
 8003590:	0b50      	lsrs	r0, r2, #13
 8003592:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8003596:	1359      	asrs	r1, r3, #13
 8003598:	4602      	mov	r2, r0
 800359a:	460b      	mov	r3, r1
 800359c:	4613      	mov	r3, r2
 800359e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80035a2:	e002      	b.n	80035aa <MS58xx_get_values+0x21e>
    } else {
        // Handle unknown sensor type
        pres = 0; // Set a default value or handle the case appropriately
 80035a4:	2300      	movs	r3, #0
 80035a6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    }

    // determine pressure according to datasheet
    if (sensor_type == MS5803) {
 80035aa:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d112      	bne.n	80035d8 <MS58xx_get_values+0x24c>
        *pressure = (pres/100.f) + 819;
 80035b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80035b6:	ee07 3a90 	vmov	s15, r3
 80035ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035be:	eddf 6a13 	vldr	s13, [pc, #76]	; 800360c <MS58xx_get_values+0x280>
 80035c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035c6:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8003610 <MS58xx_get_values+0x284>
 80035ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80035ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80035d2:	edc3 7a00 	vstr	s15, [r3]
    } else if (sensor_type == MS5837) {
        *pressure = (pres/100.f);
    }
}
 80035d6:	e011      	b.n	80035fc <MS58xx_get_values+0x270>
    } else if (sensor_type == MS5837) {
 80035d8:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d10d      	bne.n	80035fc <MS58xx_get_values+0x270>
        *pressure = (pres/100.f);
 80035e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80035e4:	ee07 3a90 	vmov	s15, r3
 80035e8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80035ec:	eddf 6a07 	vldr	s13, [pc, #28]	; 800360c <MS58xx_get_values+0x280>
 80035f0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80035f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80035f8:	edc3 7a00 	vstr	s15, [r3]
}
 80035fc:	bf00      	nop
 80035fe:	37a0      	adds	r7, #160	; 0xa0
 8003600:	46bd      	mov	sp, r7
 8003602:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003606:	bf00      	nop
 8003608:	001fffff 	.word	0x001fffff
 800360c:	42c80000 	.word	0x42c80000
 8003610:	444cc000 	.word	0x444cc000

08003614 <pid_param>:
 *      Author: mthudaa
 */

#include "pid.h"

void pid_param(PID_t *pid, float kp, float ki, float kd){
 8003614:	b480      	push	{r7}
 8003616:	b085      	sub	sp, #20
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003620:	edc7 0a01 	vstr	s1, [r7, #4]
 8003624:	ed87 1a00 	vstr	s2, [r7]
	pid->P = kp;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	68ba      	ldr	r2, [r7, #8]
 800362c:	601a      	str	r2, [r3, #0]
	pid->I = ki;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	687a      	ldr	r2, [r7, #4]
 8003632:	605a      	str	r2, [r3, #4]
	pid->D = kd;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	683a      	ldr	r2, [r7, #0]
 8003638:	609a      	str	r2, [r3, #8]
}
 800363a:	bf00      	nop
 800363c:	3714      	adds	r7, #20
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr
	...

08003648 <pid_calculate_rad>:

float pid_output(PID_t *pid){
	return pid->output;
}

void pid_calculate_rad(PID_t *pid){
 8003648:	b480      	push	{r7}
 800364a:	b089      	sub	sp, #36	; 0x24
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
	float in = (pid->input);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	61bb      	str	r3, [r7, #24]
	float setpoint = (pid->setpoint);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	617b      	str	r3, [r7, #20]
	float error = setpoint - in;
 800365c:	ed97 7a05 	vldr	s14, [r7, #20]
 8003660:	edd7 7a06 	vldr	s15, [r7, #24]
 8003664:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003668:	edc7 7a07 	vstr	s15, [r7, #28]
	pid->output = 0.0;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f04f 0200 	mov.w	r2, #0
 8003672:	611a      	str	r2, [r3, #16]

	while (error < -180)
 8003674:	e007      	b.n	8003686 <pid_calculate_rad+0x3e>
		error += 360;
 8003676:	edd7 7a07 	vldr	s15, [r7, #28]
 800367a:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8003758 <pid_calculate_rad+0x110>
 800367e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003682:	edc7 7a07 	vstr	s15, [r7, #28]
	while (error < -180)
 8003686:	edd7 7a07 	vldr	s15, [r7, #28]
 800368a:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800375c <pid_calculate_rad+0x114>
 800368e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003696:	d4ee      	bmi.n	8003676 <pid_calculate_rad+0x2e>
	while (error > 180)
 8003698:	e007      	b.n	80036aa <pid_calculate_rad+0x62>
		error -= 360;
 800369a:	edd7 7a07 	vldr	s15, [r7, #28]
 800369e:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 8003758 <pid_calculate_rad+0x110>
 80036a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80036a6:	edc7 7a07 	vstr	s15, [r7, #28]
	while (error > 180)
 80036aa:	edd7 7a07 	vldr	s15, [r7, #28]
 80036ae:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8003760 <pid_calculate_rad+0x118>
 80036b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80036b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ba:	dcee      	bgt.n	800369a <pid_calculate_rad+0x52>

	(pid->first_error) = error;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	69fa      	ldr	r2, [r7, #28]
 80036c0:	619a      	str	r2, [r3, #24]
	(pid->sum_error) += ((pid->first_error));
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	ed93 7a08 	vldr	s14, [r3, #32]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	edd3 7a06 	vldr	s15, [r3, #24]
 80036ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	edc3 7a08 	vstr	s15, [r3, #32]
	(pid->derror) = ((pid->first_error))-((pid->last_error));
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	ed93 7a06 	vldr	s14, [r3, #24]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	edd3 7a07 	vldr	s15, [r3, #28]
 80036e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	float p = ((pid->first_error))*((pid->P));
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	ed93 7a06 	vldr	s14, [r3, #24]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	edd3 7a00 	vldr	s15, [r3]
 80036fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036fe:	edc7 7a04 	vstr	s15, [r7, #16]
	float i = ((pid->sum_error))*((pid->I));
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	ed93 7a08 	vldr	s14, [r3, #32]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	edd3 7a01 	vldr	s15, [r3, #4]
 800370e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003712:	edc7 7a03 	vstr	s15, [r7, #12]
	float d = ((pid->derror))*((pid->D));
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003726:	edc7 7a02 	vstr	s15, [r7, #8]

	(pid->last_error) = (pid->first_error);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	699a      	ldr	r2, [r3, #24]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	61da      	str	r2, [r3, #28]

	pid->output = p+i+d;
 8003732:	ed97 7a04 	vldr	s14, [r7, #16]
 8003736:	edd7 7a03 	vldr	s15, [r7, #12]
 800373a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800373e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003742:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	edc3 7a04 	vstr	s15, [r3, #16]
}
 800374c:	bf00      	nop
 800374e:	3724      	adds	r7, #36	; 0x24
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr
 8003758:	43b40000 	.word	0x43b40000
 800375c:	c3340000 	.word	0xc3340000
 8003760:	43340000 	.word	0x43340000

08003764 <pid_calculate>:

void pid_calculate(PID_t *pid){
 8003764:	b480      	push	{r7}
 8003766:	b089      	sub	sp, #36	; 0x24
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
	float in = (pid->input);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	61fb      	str	r3, [r7, #28]
	float setpoint = (pid->setpoint);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	61bb      	str	r3, [r7, #24]
	float error = setpoint - in;
 8003778:	ed97 7a06 	vldr	s14, [r7, #24]
 800377c:	edd7 7a07 	vldr	s15, [r7, #28]
 8003780:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003784:	edc7 7a05 	vstr	s15, [r7, #20]
	pid->output = 0.0;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	f04f 0200 	mov.w	r2, #0
 800378e:	611a      	str	r2, [r3, #16]

	(pid->first_error) = error;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	619a      	str	r2, [r3, #24]
	(pid->sum_error) += ((pid->first_error));
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	ed93 7a08 	vldr	s14, [r3, #32]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	edd3 7a06 	vldr	s15, [r3, #24]
 80037a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	edc3 7a08 	vstr	s15, [r3, #32]
	(pid->derror) = ((pid->first_error))-((pid->last_error));
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	ed93 7a06 	vldr	s14, [r3, #24]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	edd3 7a07 	vldr	s15, [r3, #28]
 80037b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	float p = ((pid->first_error))*((pid->P));
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	ed93 7a06 	vldr	s14, [r3, #24]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	edd3 7a00 	vldr	s15, [r3]
 80037ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037d2:	edc7 7a04 	vstr	s15, [r7, #16]
	float i = ((pid->sum_error))*((pid->I));
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	ed93 7a08 	vldr	s14, [r3, #32]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	edd3 7a01 	vldr	s15, [r3, #4]
 80037e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037e6:	edc7 7a03 	vstr	s15, [r7, #12]
	float d = ((pid->derror))*((pid->D));
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	edd3 7a02 	vldr	s15, [r3, #8]
 80037f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037fa:	edc7 7a02 	vstr	s15, [r7, #8]

	(pid->last_error) = (pid->first_error);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	699a      	ldr	r2, [r3, #24]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	61da      	str	r2, [r3, #28]

	pid->output = p+i+d;
 8003806:	ed97 7a04 	vldr	s14, [r7, #16]
 800380a:	edd7 7a03 	vldr	s15, [r7, #12]
 800380e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003812:	edd7 7a02 	vldr	s15, [r7, #8]
 8003816:	ee77 7a27 	vadd.f32	s15, s14, s15
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	edc3 7a04 	vstr	s15, [r3, #16]
}
 8003820:	bf00      	nop
 8003822:	3724      	adds	r7, #36	; 0x24
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003832:	2300      	movs	r3, #0
 8003834:	607b      	str	r3, [r7, #4]
 8003836:	4b12      	ldr	r3, [pc, #72]	; (8003880 <HAL_MspInit+0x54>)
 8003838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800383a:	4a11      	ldr	r2, [pc, #68]	; (8003880 <HAL_MspInit+0x54>)
 800383c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003840:	6453      	str	r3, [r2, #68]	; 0x44
 8003842:	4b0f      	ldr	r3, [pc, #60]	; (8003880 <HAL_MspInit+0x54>)
 8003844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800384a:	607b      	str	r3, [r7, #4]
 800384c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800384e:	2300      	movs	r3, #0
 8003850:	603b      	str	r3, [r7, #0]
 8003852:	4b0b      	ldr	r3, [pc, #44]	; (8003880 <HAL_MspInit+0x54>)
 8003854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003856:	4a0a      	ldr	r2, [pc, #40]	; (8003880 <HAL_MspInit+0x54>)
 8003858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800385c:	6413      	str	r3, [r2, #64]	; 0x40
 800385e:	4b08      	ldr	r3, [pc, #32]	; (8003880 <HAL_MspInit+0x54>)
 8003860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003866:	603b      	str	r3, [r7, #0]
 8003868:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800386a:	2200      	movs	r2, #0
 800386c:	210f      	movs	r1, #15
 800386e:	f06f 0001 	mvn.w	r0, #1
 8003872:	f001 f88d 	bl	8004990 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003876:	bf00      	nop
 8003878:	3708      	adds	r7, #8
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}
 800387e:	bf00      	nop
 8003880:	40023800 	.word	0x40023800

08003884 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b08a      	sub	sp, #40	; 0x28
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800388c:	f107 0314 	add.w	r3, r7, #20
 8003890:	2200      	movs	r2, #0
 8003892:	601a      	str	r2, [r3, #0]
 8003894:	605a      	str	r2, [r3, #4]
 8003896:	609a      	str	r2, [r3, #8]
 8003898:	60da      	str	r2, [r3, #12]
 800389a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a2f      	ldr	r2, [pc, #188]	; (8003960 <HAL_ADC_MspInit+0xdc>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d157      	bne.n	8003956 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80038a6:	2300      	movs	r3, #0
 80038a8:	613b      	str	r3, [r7, #16]
 80038aa:	4b2e      	ldr	r3, [pc, #184]	; (8003964 <HAL_ADC_MspInit+0xe0>)
 80038ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ae:	4a2d      	ldr	r2, [pc, #180]	; (8003964 <HAL_ADC_MspInit+0xe0>)
 80038b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038b4:	6453      	str	r3, [r2, #68]	; 0x44
 80038b6:	4b2b      	ldr	r3, [pc, #172]	; (8003964 <HAL_ADC_MspInit+0xe0>)
 80038b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038be:	613b      	str	r3, [r7, #16]
 80038c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038c2:	2300      	movs	r3, #0
 80038c4:	60fb      	str	r3, [r7, #12]
 80038c6:	4b27      	ldr	r3, [pc, #156]	; (8003964 <HAL_ADC_MspInit+0xe0>)
 80038c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ca:	4a26      	ldr	r2, [pc, #152]	; (8003964 <HAL_ADC_MspInit+0xe0>)
 80038cc:	f043 0301 	orr.w	r3, r3, #1
 80038d0:	6313      	str	r3, [r2, #48]	; 0x30
 80038d2:	4b24      	ldr	r3, [pc, #144]	; (8003964 <HAL_ADC_MspInit+0xe0>)
 80038d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d6:	f003 0301 	and.w	r3, r3, #1
 80038da:	60fb      	str	r3, [r7, #12]
 80038dc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80038de:	2330      	movs	r3, #48	; 0x30
 80038e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80038e2:	2303      	movs	r3, #3
 80038e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e6:	2300      	movs	r3, #0
 80038e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038ea:	f107 0314 	add.w	r3, r7, #20
 80038ee:	4619      	mov	r1, r3
 80038f0:	481d      	ldr	r0, [pc, #116]	; (8003968 <HAL_ADC_MspInit+0xe4>)
 80038f2:	f001 fc79 	bl	80051e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80038f6:	4b1d      	ldr	r3, [pc, #116]	; (800396c <HAL_ADC_MspInit+0xe8>)
 80038f8:	4a1d      	ldr	r2, [pc, #116]	; (8003970 <HAL_ADC_MspInit+0xec>)
 80038fa:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80038fc:	4b1b      	ldr	r3, [pc, #108]	; (800396c <HAL_ADC_MspInit+0xe8>)
 80038fe:	2200      	movs	r2, #0
 8003900:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003902:	4b1a      	ldr	r3, [pc, #104]	; (800396c <HAL_ADC_MspInit+0xe8>)
 8003904:	2200      	movs	r2, #0
 8003906:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003908:	4b18      	ldr	r3, [pc, #96]	; (800396c <HAL_ADC_MspInit+0xe8>)
 800390a:	2200      	movs	r2, #0
 800390c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800390e:	4b17      	ldr	r3, [pc, #92]	; (800396c <HAL_ADC_MspInit+0xe8>)
 8003910:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003914:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003916:	4b15      	ldr	r3, [pc, #84]	; (800396c <HAL_ADC_MspInit+0xe8>)
 8003918:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800391c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800391e:	4b13      	ldr	r3, [pc, #76]	; (800396c <HAL_ADC_MspInit+0xe8>)
 8003920:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003924:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003926:	4b11      	ldr	r3, [pc, #68]	; (800396c <HAL_ADC_MspInit+0xe8>)
 8003928:	f44f 7280 	mov.w	r2, #256	; 0x100
 800392c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800392e:	4b0f      	ldr	r3, [pc, #60]	; (800396c <HAL_ADC_MspInit+0xe8>)
 8003930:	2200      	movs	r2, #0
 8003932:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003934:	4b0d      	ldr	r3, [pc, #52]	; (800396c <HAL_ADC_MspInit+0xe8>)
 8003936:	2200      	movs	r2, #0
 8003938:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800393a:	480c      	ldr	r0, [pc, #48]	; (800396c <HAL_ADC_MspInit+0xe8>)
 800393c:	f001 f852 	bl	80049e4 <HAL_DMA_Init>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8003946:	f7ff fc25 	bl	8003194 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a07      	ldr	r2, [pc, #28]	; (800396c <HAL_ADC_MspInit+0xe8>)
 800394e:	639a      	str	r2, [r3, #56]	; 0x38
 8003950:	4a06      	ldr	r2, [pc, #24]	; (800396c <HAL_ADC_MspInit+0xe8>)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003956:	bf00      	nop
 8003958:	3728      	adds	r7, #40	; 0x28
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	40012000 	.word	0x40012000
 8003964:	40023800 	.word	0x40023800
 8003968:	40020000 	.word	0x40020000
 800396c:	200006a8 	.word	0x200006a8
 8003970:	40026410 	.word	0x40026410

08003974 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	b08a      	sub	sp, #40	; 0x28
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800397c:	f107 0314 	add.w	r3, r7, #20
 8003980:	2200      	movs	r2, #0
 8003982:	601a      	str	r2, [r3, #0]
 8003984:	605a      	str	r2, [r3, #4]
 8003986:	609a      	str	r2, [r3, #8]
 8003988:	60da      	str	r2, [r3, #12]
 800398a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a19      	ldr	r2, [pc, #100]	; (80039f8 <HAL_I2C_MspInit+0x84>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d12b      	bne.n	80039ee <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003996:	2300      	movs	r3, #0
 8003998:	613b      	str	r3, [r7, #16]
 800399a:	4b18      	ldr	r3, [pc, #96]	; (80039fc <HAL_I2C_MspInit+0x88>)
 800399c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800399e:	4a17      	ldr	r2, [pc, #92]	; (80039fc <HAL_I2C_MspInit+0x88>)
 80039a0:	f043 0302 	orr.w	r3, r3, #2
 80039a4:	6313      	str	r3, [r2, #48]	; 0x30
 80039a6:	4b15      	ldr	r3, [pc, #84]	; (80039fc <HAL_I2C_MspInit+0x88>)
 80039a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	613b      	str	r3, [r7, #16]
 80039b0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80039b2:	23c0      	movs	r3, #192	; 0xc0
 80039b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80039b6:	2312      	movs	r3, #18
 80039b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039ba:	2300      	movs	r3, #0
 80039bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039be:	2303      	movs	r3, #3
 80039c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80039c2:	2304      	movs	r3, #4
 80039c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039c6:	f107 0314 	add.w	r3, r7, #20
 80039ca:	4619      	mov	r1, r3
 80039cc:	480c      	ldr	r0, [pc, #48]	; (8003a00 <HAL_I2C_MspInit+0x8c>)
 80039ce:	f001 fc0b 	bl	80051e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80039d2:	2300      	movs	r3, #0
 80039d4:	60fb      	str	r3, [r7, #12]
 80039d6:	4b09      	ldr	r3, [pc, #36]	; (80039fc <HAL_I2C_MspInit+0x88>)
 80039d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039da:	4a08      	ldr	r2, [pc, #32]	; (80039fc <HAL_I2C_MspInit+0x88>)
 80039dc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80039e0:	6413      	str	r3, [r2, #64]	; 0x40
 80039e2:	4b06      	ldr	r3, [pc, #24]	; (80039fc <HAL_I2C_MspInit+0x88>)
 80039e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039ea:	60fb      	str	r3, [r7, #12]
 80039ec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80039ee:	bf00      	nop
 80039f0:	3728      	adds	r7, #40	; 0x28
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	40005400 	.word	0x40005400
 80039fc:	40023800 	.word	0x40023800
 8003a00:	40020400 	.word	0x40020400

08003a04 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b086      	sub	sp, #24
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a40      	ldr	r2, [pc, #256]	; (8003b14 <HAL_TIM_PWM_MspInit+0x110>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d13e      	bne.n	8003a94 <HAL_TIM_PWM_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003a16:	2300      	movs	r3, #0
 8003a18:	617b      	str	r3, [r7, #20]
 8003a1a:	4b3f      	ldr	r3, [pc, #252]	; (8003b18 <HAL_TIM_PWM_MspInit+0x114>)
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1e:	4a3e      	ldr	r2, [pc, #248]	; (8003b18 <HAL_TIM_PWM_MspInit+0x114>)
 8003a20:	f043 0302 	orr.w	r3, r3, #2
 8003a24:	6413      	str	r3, [r2, #64]	; 0x40
 8003a26:	4b3c      	ldr	r3, [pc, #240]	; (8003b18 <HAL_TIM_PWM_MspInit+0x114>)
 8003a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	617b      	str	r3, [r7, #20]
 8003a30:	697b      	ldr	r3, [r7, #20]

    /* TIM3 DMA Init */
    /* TIM3_CH2 Init */
    hdma_tim3_ch2.Instance = DMA1_Stream5;
 8003a32:	4b3a      	ldr	r3, [pc, #232]	; (8003b1c <HAL_TIM_PWM_MspInit+0x118>)
 8003a34:	4a3a      	ldr	r2, [pc, #232]	; (8003b20 <HAL_TIM_PWM_MspInit+0x11c>)
 8003a36:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Channel = DMA_CHANNEL_5;
 8003a38:	4b38      	ldr	r3, [pc, #224]	; (8003b1c <HAL_TIM_PWM_MspInit+0x118>)
 8003a3a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8003a3e:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003a40:	4b36      	ldr	r3, [pc, #216]	; (8003b1c <HAL_TIM_PWM_MspInit+0x118>)
 8003a42:	2240      	movs	r2, #64	; 0x40
 8003a44:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003a46:	4b35      	ldr	r3, [pc, #212]	; (8003b1c <HAL_TIM_PWM_MspInit+0x118>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8003a4c:	4b33      	ldr	r3, [pc, #204]	; (8003b1c <HAL_TIM_PWM_MspInit+0x118>)
 8003a4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a52:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003a54:	4b31      	ldr	r3, [pc, #196]	; (8003b1c <HAL_TIM_PWM_MspInit+0x118>)
 8003a56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003a5a:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003a5c:	4b2f      	ldr	r3, [pc, #188]	; (8003b1c <HAL_TIM_PWM_MspInit+0x118>)
 8003a5e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a62:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 8003a64:	4b2d      	ldr	r3, [pc, #180]	; (8003b1c <HAL_TIM_PWM_MspInit+0x118>)
 8003a66:	2200      	movs	r2, #0
 8003a68:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8003a6a:	4b2c      	ldr	r3, [pc, #176]	; (8003b1c <HAL_TIM_PWM_MspInit+0x118>)
 8003a6c:	2200      	movs	r2, #0
 8003a6e:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003a70:	4b2a      	ldr	r3, [pc, #168]	; (8003b1c <HAL_TIM_PWM_MspInit+0x118>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8003a76:	4829      	ldr	r0, [pc, #164]	; (8003b1c <HAL_TIM_PWM_MspInit+0x118>)
 8003a78:	f000 ffb4 	bl	80049e4 <HAL_DMA_Init>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d001      	beq.n	8003a86 <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 8003a82:	f7ff fb87 	bl	8003194 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a24      	ldr	r2, [pc, #144]	; (8003b1c <HAL_TIM_PWM_MspInit+0x118>)
 8003a8a:	629a      	str	r2, [r3, #40]	; 0x28
 8003a8c:	4a23      	ldr	r2, [pc, #140]	; (8003b1c <HAL_TIM_PWM_MspInit+0x118>)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 8003a92:	e03a      	b.n	8003b0a <HAL_TIM_PWM_MspInit+0x106>
  else if(htim_pwm->Instance==TIM4)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a22      	ldr	r2, [pc, #136]	; (8003b24 <HAL_TIM_PWM_MspInit+0x120>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d10e      	bne.n	8003abc <HAL_TIM_PWM_MspInit+0xb8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	613b      	str	r3, [r7, #16]
 8003aa2:	4b1d      	ldr	r3, [pc, #116]	; (8003b18 <HAL_TIM_PWM_MspInit+0x114>)
 8003aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aa6:	4a1c      	ldr	r2, [pc, #112]	; (8003b18 <HAL_TIM_PWM_MspInit+0x114>)
 8003aa8:	f043 0304 	orr.w	r3, r3, #4
 8003aac:	6413      	str	r3, [r2, #64]	; 0x40
 8003aae:	4b1a      	ldr	r3, [pc, #104]	; (8003b18 <HAL_TIM_PWM_MspInit+0x114>)
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab2:	f003 0304 	and.w	r3, r3, #4
 8003ab6:	613b      	str	r3, [r7, #16]
 8003ab8:	693b      	ldr	r3, [r7, #16]
}
 8003aba:	e026      	b.n	8003b0a <HAL_TIM_PWM_MspInit+0x106>
  else if(htim_pwm->Instance==TIM5)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a19      	ldr	r2, [pc, #100]	; (8003b28 <HAL_TIM_PWM_MspInit+0x124>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d10e      	bne.n	8003ae4 <HAL_TIM_PWM_MspInit+0xe0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	60fb      	str	r3, [r7, #12]
 8003aca:	4b13      	ldr	r3, [pc, #76]	; (8003b18 <HAL_TIM_PWM_MspInit+0x114>)
 8003acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ace:	4a12      	ldr	r2, [pc, #72]	; (8003b18 <HAL_TIM_PWM_MspInit+0x114>)
 8003ad0:	f043 0308 	orr.w	r3, r3, #8
 8003ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ad6:	4b10      	ldr	r3, [pc, #64]	; (8003b18 <HAL_TIM_PWM_MspInit+0x114>)
 8003ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ada:	f003 0308 	and.w	r3, r3, #8
 8003ade:	60fb      	str	r3, [r7, #12]
 8003ae0:	68fb      	ldr	r3, [r7, #12]
}
 8003ae2:	e012      	b.n	8003b0a <HAL_TIM_PWM_MspInit+0x106>
  else if(htim_pwm->Instance==TIM9)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a10      	ldr	r2, [pc, #64]	; (8003b2c <HAL_TIM_PWM_MspInit+0x128>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d10d      	bne.n	8003b0a <HAL_TIM_PWM_MspInit+0x106>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8003aee:	2300      	movs	r3, #0
 8003af0:	60bb      	str	r3, [r7, #8]
 8003af2:	4b09      	ldr	r3, [pc, #36]	; (8003b18 <HAL_TIM_PWM_MspInit+0x114>)
 8003af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003af6:	4a08      	ldr	r2, [pc, #32]	; (8003b18 <HAL_TIM_PWM_MspInit+0x114>)
 8003af8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003afc:	6453      	str	r3, [r2, #68]	; 0x44
 8003afe:	4b06      	ldr	r3, [pc, #24]	; (8003b18 <HAL_TIM_PWM_MspInit+0x114>)
 8003b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b06:	60bb      	str	r3, [r7, #8]
 8003b08:	68bb      	ldr	r3, [r7, #8]
}
 8003b0a:	bf00      	nop
 8003b0c:	3718      	adds	r7, #24
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	40000400 	.word	0x40000400
 8003b18:	40023800 	.word	0x40023800
 8003b1c:	2000087c 	.word	0x2000087c
 8003b20:	40026088 	.word	0x40026088
 8003b24:	40000800 	.word	0x40000800
 8003b28:	40000c00 	.word	0x40000c00
 8003b2c:	40014000 	.word	0x40014000

08003b30 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b08c      	sub	sp, #48	; 0x30
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b38:	f107 031c 	add.w	r3, r7, #28
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	601a      	str	r2, [r3, #0]
 8003b40:	605a      	str	r2, [r3, #4]
 8003b42:	609a      	str	r2, [r3, #8]
 8003b44:	60da      	str	r2, [r3, #12]
 8003b46:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a48      	ldr	r2, [pc, #288]	; (8003c70 <HAL_TIM_MspPostInit+0x140>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d11e      	bne.n	8003b90 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b52:	2300      	movs	r3, #0
 8003b54:	61bb      	str	r3, [r7, #24]
 8003b56:	4b47      	ldr	r3, [pc, #284]	; (8003c74 <HAL_TIM_MspPostInit+0x144>)
 8003b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5a:	4a46      	ldr	r2, [pc, #280]	; (8003c74 <HAL_TIM_MspPostInit+0x144>)
 8003b5c:	f043 0301 	orr.w	r3, r3, #1
 8003b60:	6313      	str	r3, [r2, #48]	; 0x30
 8003b62:	4b44      	ldr	r3, [pc, #272]	; (8003c74 <HAL_TIM_MspPostInit+0x144>)
 8003b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	61bb      	str	r3, [r7, #24]
 8003b6c:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003b6e:	2380      	movs	r3, #128	; 0x80
 8003b70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b72:	2302      	movs	r3, #2
 8003b74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b76:	2300      	movs	r3, #0
 8003b78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003b7e:	2302      	movs	r3, #2
 8003b80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b82:	f107 031c 	add.w	r3, r7, #28
 8003b86:	4619      	mov	r1, r3
 8003b88:	483b      	ldr	r0, [pc, #236]	; (8003c78 <HAL_TIM_MspPostInit+0x148>)
 8003b8a:	f001 fb2d 	bl	80051e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8003b8e:	e06b      	b.n	8003c68 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM4)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a39      	ldr	r2, [pc, #228]	; (8003c7c <HAL_TIM_MspPostInit+0x14c>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d11f      	bne.n	8003bda <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	617b      	str	r3, [r7, #20]
 8003b9e:	4b35      	ldr	r3, [pc, #212]	; (8003c74 <HAL_TIM_MspPostInit+0x144>)
 8003ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba2:	4a34      	ldr	r2, [pc, #208]	; (8003c74 <HAL_TIM_MspPostInit+0x144>)
 8003ba4:	f043 0308 	orr.w	r3, r3, #8
 8003ba8:	6313      	str	r3, [r2, #48]	; 0x30
 8003baa:	4b32      	ldr	r3, [pc, #200]	; (8003c74 <HAL_TIM_MspPostInit+0x144>)
 8003bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bae:	f003 0308 	and.w	r3, r3, #8
 8003bb2:	617b      	str	r3, [r7, #20]
 8003bb4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003bb6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8003bba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bbc:	2302      	movs	r3, #2
 8003bbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003bc8:	2302      	movs	r3, #2
 8003bca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003bcc:	f107 031c 	add.w	r3, r7, #28
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	482b      	ldr	r0, [pc, #172]	; (8003c80 <HAL_TIM_MspPostInit+0x150>)
 8003bd4:	f001 fb08 	bl	80051e8 <HAL_GPIO_Init>
}
 8003bd8:	e046      	b.n	8003c68 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM5)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a29      	ldr	r2, [pc, #164]	; (8003c84 <HAL_TIM_MspPostInit+0x154>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d11e      	bne.n	8003c22 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003be4:	2300      	movs	r3, #0
 8003be6:	613b      	str	r3, [r7, #16]
 8003be8:	4b22      	ldr	r3, [pc, #136]	; (8003c74 <HAL_TIM_MspPostInit+0x144>)
 8003bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bec:	4a21      	ldr	r2, [pc, #132]	; (8003c74 <HAL_TIM_MspPostInit+0x144>)
 8003bee:	f043 0301 	orr.w	r3, r3, #1
 8003bf2:	6313      	str	r3, [r2, #48]	; 0x30
 8003bf4:	4b1f      	ldr	r3, [pc, #124]	; (8003c74 <HAL_TIM_MspPostInit+0x144>)
 8003bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	613b      	str	r3, [r7, #16]
 8003bfe:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8003c00:	230f      	movs	r3, #15
 8003c02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c04:	2302      	movs	r3, #2
 8003c06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c08:	2300      	movs	r3, #0
 8003c0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003c10:	2302      	movs	r3, #2
 8003c12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c14:	f107 031c 	add.w	r3, r7, #28
 8003c18:	4619      	mov	r1, r3
 8003c1a:	4817      	ldr	r0, [pc, #92]	; (8003c78 <HAL_TIM_MspPostInit+0x148>)
 8003c1c:	f001 fae4 	bl	80051e8 <HAL_GPIO_Init>
}
 8003c20:	e022      	b.n	8003c68 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM9)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4a18      	ldr	r2, [pc, #96]	; (8003c88 <HAL_TIM_MspPostInit+0x158>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d11d      	bne.n	8003c68 <HAL_TIM_MspPostInit+0x138>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	60fb      	str	r3, [r7, #12]
 8003c30:	4b10      	ldr	r3, [pc, #64]	; (8003c74 <HAL_TIM_MspPostInit+0x144>)
 8003c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c34:	4a0f      	ldr	r2, [pc, #60]	; (8003c74 <HAL_TIM_MspPostInit+0x144>)
 8003c36:	f043 0310 	orr.w	r3, r3, #16
 8003c3a:	6313      	str	r3, [r2, #48]	; 0x30
 8003c3c:	4b0d      	ldr	r3, [pc, #52]	; (8003c74 <HAL_TIM_MspPostInit+0x144>)
 8003c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c40:	f003 0310 	and.w	r3, r3, #16
 8003c44:	60fb      	str	r3, [r7, #12]
 8003c46:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003c48:	2320      	movs	r3, #32
 8003c4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c4c:	2302      	movs	r3, #2
 8003c4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c50:	2300      	movs	r3, #0
 8003c52:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c54:	2300      	movs	r3, #0
 8003c56:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003c5c:	f107 031c 	add.w	r3, r7, #28
 8003c60:	4619      	mov	r1, r3
 8003c62:	480a      	ldr	r0, [pc, #40]	; (8003c8c <HAL_TIM_MspPostInit+0x15c>)
 8003c64:	f001 fac0 	bl	80051e8 <HAL_GPIO_Init>
}
 8003c68:	bf00      	nop
 8003c6a:	3730      	adds	r7, #48	; 0x30
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	40000400 	.word	0x40000400
 8003c74:	40023800 	.word	0x40023800
 8003c78:	40020000 	.word	0x40020000
 8003c7c:	40000800 	.word	0x40000800
 8003c80:	40020c00 	.word	0x40020c00
 8003c84:	40000c00 	.word	0x40000c00
 8003c88:	40014000 	.word	0x40014000
 8003c8c:	40021000 	.word	0x40021000

08003c90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b08a      	sub	sp, #40	; 0x28
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c98:	f107 0314 	add.w	r3, r7, #20
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	601a      	str	r2, [r3, #0]
 8003ca0:	605a      	str	r2, [r3, #4]
 8003ca2:	609a      	str	r2, [r3, #8]
 8003ca4:	60da      	str	r2, [r3, #12]
 8003ca6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a1d      	ldr	r2, [pc, #116]	; (8003d24 <HAL_UART_MspInit+0x94>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d133      	bne.n	8003d1a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	613b      	str	r3, [r7, #16]
 8003cb6:	4b1c      	ldr	r3, [pc, #112]	; (8003d28 <HAL_UART_MspInit+0x98>)
 8003cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cba:	4a1b      	ldr	r2, [pc, #108]	; (8003d28 <HAL_UART_MspInit+0x98>)
 8003cbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8003cc2:	4b19      	ldr	r3, [pc, #100]	; (8003d28 <HAL_UART_MspInit+0x98>)
 8003cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cca:	613b      	str	r3, [r7, #16]
 8003ccc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003cce:	2300      	movs	r3, #0
 8003cd0:	60fb      	str	r3, [r7, #12]
 8003cd2:	4b15      	ldr	r3, [pc, #84]	; (8003d28 <HAL_UART_MspInit+0x98>)
 8003cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd6:	4a14      	ldr	r2, [pc, #80]	; (8003d28 <HAL_UART_MspInit+0x98>)
 8003cd8:	f043 0308 	orr.w	r3, r3, #8
 8003cdc:	6313      	str	r3, [r2, #48]	; 0x30
 8003cde:	4b12      	ldr	r3, [pc, #72]	; (8003d28 <HAL_UART_MspInit+0x98>)
 8003ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce2:	f003 0308 	and.w	r3, r3, #8
 8003ce6:	60fb      	str	r3, [r7, #12]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003cea:	2360      	movs	r3, #96	; 0x60
 8003cec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cee:	2302      	movs	r3, #2
 8003cf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003cfa:	2307      	movs	r3, #7
 8003cfc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003cfe:	f107 0314 	add.w	r3, r7, #20
 8003d02:	4619      	mov	r1, r3
 8003d04:	4809      	ldr	r0, [pc, #36]	; (8003d2c <HAL_UART_MspInit+0x9c>)
 8003d06:	f001 fa6f 	bl	80051e8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	2105      	movs	r1, #5
 8003d0e:	2026      	movs	r0, #38	; 0x26
 8003d10:	f000 fe3e 	bl	8004990 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003d14:	2026      	movs	r0, #38	; 0x26
 8003d16:	f000 fe57 	bl	80049c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003d1a:	bf00      	nop
 8003d1c:	3728      	adds	r7, #40	; 0x28
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	40004400 	.word	0x40004400
 8003d28:	40023800 	.word	0x40023800
 8003d2c:	40020c00 	.word	0x40020c00

08003d30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b08e      	sub	sp, #56	; 0x38
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8003d40:	2300      	movs	r3, #0
 8003d42:	60fb      	str	r3, [r7, #12]
 8003d44:	4b33      	ldr	r3, [pc, #204]	; (8003e14 <HAL_InitTick+0xe4>)
 8003d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d48:	4a32      	ldr	r2, [pc, #200]	; (8003e14 <HAL_InitTick+0xe4>)
 8003d4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d4e:	6413      	str	r3, [r2, #64]	; 0x40
 8003d50:	4b30      	ldr	r3, [pc, #192]	; (8003e14 <HAL_InitTick+0xe4>)
 8003d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d58:	60fb      	str	r3, [r7, #12]
 8003d5a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003d5c:	f107 0210 	add.w	r2, r7, #16
 8003d60:	f107 0314 	add.w	r3, r7, #20
 8003d64:	4611      	mov	r1, r2
 8003d66:	4618      	mov	r0, r3
 8003d68:	f004 faee 	bl	8008348 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003d6c:	6a3b      	ldr	r3, [r7, #32]
 8003d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d103      	bne.n	8003d7e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003d76:	f004 fabf 	bl	80082f8 <HAL_RCC_GetPCLK1Freq>
 8003d7a:	6378      	str	r0, [r7, #52]	; 0x34
 8003d7c:	e004      	b.n	8003d88 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003d7e:	f004 fabb 	bl	80082f8 <HAL_RCC_GetPCLK1Freq>
 8003d82:	4603      	mov	r3, r0
 8003d84:	005b      	lsls	r3, r3, #1
 8003d86:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d8a:	4a23      	ldr	r2, [pc, #140]	; (8003e18 <HAL_InitTick+0xe8>)
 8003d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d90:	0c9b      	lsrs	r3, r3, #18
 8003d92:	3b01      	subs	r3, #1
 8003d94:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8003d96:	4b21      	ldr	r3, [pc, #132]	; (8003e1c <HAL_InitTick+0xec>)
 8003d98:	4a21      	ldr	r2, [pc, #132]	; (8003e20 <HAL_InitTick+0xf0>)
 8003d9a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8003d9c:	4b1f      	ldr	r3, [pc, #124]	; (8003e1c <HAL_InitTick+0xec>)
 8003d9e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003da2:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8003da4:	4a1d      	ldr	r2, [pc, #116]	; (8003e1c <HAL_InitTick+0xec>)
 8003da6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003da8:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8003daa:	4b1c      	ldr	r3, [pc, #112]	; (8003e1c <HAL_InitTick+0xec>)
 8003dac:	2200      	movs	r2, #0
 8003dae:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003db0:	4b1a      	ldr	r3, [pc, #104]	; (8003e1c <HAL_InitTick+0xec>)
 8003db2:	2200      	movs	r2, #0
 8003db4:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003db6:	4b19      	ldr	r3, [pc, #100]	; (8003e1c <HAL_InitTick+0xec>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8003dbc:	4817      	ldr	r0, [pc, #92]	; (8003e1c <HAL_InitTick+0xec>)
 8003dbe:	f004 faf5 	bl	80083ac <HAL_TIM_Base_Init>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003dc8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d11b      	bne.n	8003e08 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8003dd0:	4812      	ldr	r0, [pc, #72]	; (8003e1c <HAL_InitTick+0xec>)
 8003dd2:	f004 fb45 	bl	8008460 <HAL_TIM_Base_Start_IT>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003ddc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d111      	bne.n	8003e08 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8003de4:	202d      	movs	r0, #45	; 0x2d
 8003de6:	f000 fdef 	bl	80049c8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2b0f      	cmp	r3, #15
 8003dee:	d808      	bhi.n	8003e02 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8003df0:	2200      	movs	r2, #0
 8003df2:	6879      	ldr	r1, [r7, #4]
 8003df4:	202d      	movs	r0, #45	; 0x2d
 8003df6:	f000 fdcb 	bl	8004990 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003dfa:	4a0a      	ldr	r2, [pc, #40]	; (8003e24 <HAL_InitTick+0xf4>)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6013      	str	r3, [r2, #0]
 8003e00:	e002      	b.n	8003e08 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003e08:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	3738      	adds	r7, #56	; 0x38
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}
 8003e14:	40023800 	.word	0x40023800
 8003e18:	431bde83 	.word	0x431bde83
 8003e1c:	20000b80 	.word	0x20000b80
 8003e20:	40002000 	.word	0x40002000
 8003e24:	20000054 	.word	0x20000054

08003e28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003e2c:	e7fe      	b.n	8003e2c <NMI_Handler+0x4>

08003e2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e32:	e7fe      	b.n	8003e32 <HardFault_Handler+0x4>

08003e34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e34:	b480      	push	{r7}
 8003e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e38:	e7fe      	b.n	8003e38 <MemManage_Handler+0x4>

08003e3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e3e:	e7fe      	b.n	8003e3e <BusFault_Handler+0x4>

08003e40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e40:	b480      	push	{r7}
 8003e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e44:	e7fe      	b.n	8003e44 <UsageFault_Handler+0x4>

08003e46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e46:	b480      	push	{r7}
 8003e48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e4a:	bf00      	nop
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e52:	4770      	bx	lr

08003e54 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8003e58:	4802      	ldr	r0, [pc, #8]	; (8003e64 <DMA1_Stream5_IRQHandler+0x10>)
 8003e5a:	f000 ff5b 	bl	8004d14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003e5e:	bf00      	nop
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	2000087c 	.word	0x2000087c

08003e68 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003e6c:	4802      	ldr	r0, [pc, #8]	; (8003e78 <USART2_IRQHandler+0x10>)
 8003e6e:	f005 fd57 	bl	8009920 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003e72:	bf00      	nop
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	200008dc 	.word	0x200008dc

08003e7c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8003e80:	4802      	ldr	r0, [pc, #8]	; (8003e8c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8003e82:	f004 ff0f 	bl	8008ca4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8003e86:	bf00      	nop
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	20000b80 	.word	0x20000b80

08003e90 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003e94:	4802      	ldr	r0, [pc, #8]	; (8003ea0 <DMA2_Stream0_IRQHandler+0x10>)
 8003e96:	f000 ff3d 	bl	8004d14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003e9a:	bf00      	nop
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	200006a8 	.word	0x200006a8

08003ea4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003ea8:	4802      	ldr	r0, [pc, #8]	; (8003eb4 <OTG_FS_IRQHandler+0x10>)
 8003eaa:	f002 fca9 	bl	8006800 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003eae:	bf00      	nop
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	20005e00 	.word	0x20005e00

08003eb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ebc:	4b06      	ldr	r3, [pc, #24]	; (8003ed8 <SystemInit+0x20>)
 8003ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ec2:	4a05      	ldr	r2, [pc, #20]	; (8003ed8 <SystemInit+0x20>)
 8003ec4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003ec8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003ecc:	bf00      	nop
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	e000ed00 	.word	0xe000ed00

08003edc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003edc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f14 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003ee0:	f7ff ffea 	bl	8003eb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003ee4:	480c      	ldr	r0, [pc, #48]	; (8003f18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003ee6:	490d      	ldr	r1, [pc, #52]	; (8003f1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003ee8:	4a0d      	ldr	r2, [pc, #52]	; (8003f20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003eea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003eec:	e002      	b.n	8003ef4 <LoopCopyDataInit>

08003eee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003eee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ef0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ef2:	3304      	adds	r3, #4

08003ef4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ef4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ef6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ef8:	d3f9      	bcc.n	8003eee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003efa:	4a0a      	ldr	r2, [pc, #40]	; (8003f24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003efc:	4c0a      	ldr	r4, [pc, #40]	; (8003f28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003efe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f00:	e001      	b.n	8003f06 <LoopFillZerobss>

08003f02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f04:	3204      	adds	r2, #4

08003f06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f08:	d3fb      	bcc.n	8003f02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003f0a:	f00b fe97 	bl	800fc3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f0e:	f7fd fa65 	bl	80013dc <main>
  bx  lr    
 8003f12:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003f14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003f18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f1c:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 8003f20:	0800ff7c 	.word	0x0800ff7c
  ldr r2, =_sbss
 8003f24:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8003f28:	20006504 	.word	0x20006504

08003f2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f2c:	e7fe      	b.n	8003f2c <ADC_IRQHandler>
	...

08003f30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003f34:	4b0e      	ldr	r3, [pc, #56]	; (8003f70 <HAL_Init+0x40>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a0d      	ldr	r2, [pc, #52]	; (8003f70 <HAL_Init+0x40>)
 8003f3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003f40:	4b0b      	ldr	r3, [pc, #44]	; (8003f70 <HAL_Init+0x40>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4a0a      	ldr	r2, [pc, #40]	; (8003f70 <HAL_Init+0x40>)
 8003f46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f4c:	4b08      	ldr	r3, [pc, #32]	; (8003f70 <HAL_Init+0x40>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a07      	ldr	r2, [pc, #28]	; (8003f70 <HAL_Init+0x40>)
 8003f52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f58:	2003      	movs	r0, #3
 8003f5a:	f000 fd0e 	bl	800497a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f5e:	200f      	movs	r0, #15
 8003f60:	f7ff fee6 	bl	8003d30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f64:	f7ff fc62 	bl	800382c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	bd80      	pop	{r7, pc}
 8003f6e:	bf00      	nop
 8003f70:	40023c00 	.word	0x40023c00

08003f74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f74:	b480      	push	{r7}
 8003f76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003f78:	4b06      	ldr	r3, [pc, #24]	; (8003f94 <HAL_IncTick+0x20>)
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	461a      	mov	r2, r3
 8003f7e:	4b06      	ldr	r3, [pc, #24]	; (8003f98 <HAL_IncTick+0x24>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4413      	add	r3, r2
 8003f84:	4a04      	ldr	r2, [pc, #16]	; (8003f98 <HAL_IncTick+0x24>)
 8003f86:	6013      	str	r3, [r2, #0]
}
 8003f88:	bf00      	nop
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	20000058 	.word	0x20000058
 8003f98:	20000bc8 	.word	0x20000bc8

08003f9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	af00      	add	r7, sp, #0
  return uwTick;
 8003fa0:	4b03      	ldr	r3, [pc, #12]	; (8003fb0 <HAL_GetTick+0x14>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	20000bc8 	.word	0x20000bc8

08003fb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b084      	sub	sp, #16
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003fbc:	f7ff ffee 	bl	8003f9c <HAL_GetTick>
 8003fc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fcc:	d005      	beq.n	8003fda <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003fce:	4b0a      	ldr	r3, [pc, #40]	; (8003ff8 <HAL_Delay+0x44>)
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003fda:	bf00      	nop
 8003fdc:	f7ff ffde 	bl	8003f9c <HAL_GetTick>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	1ad3      	subs	r3, r2, r3
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d8f7      	bhi.n	8003fdc <HAL_Delay+0x28>
  {
  }
}
 8003fec:	bf00      	nop
 8003fee:	bf00      	nop
 8003ff0:	3710      	adds	r7, #16
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	20000058 	.word	0x20000058

08003ffc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b084      	sub	sp, #16
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004004:	2300      	movs	r3, #0
 8004006:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2b00      	cmp	r3, #0
 800400c:	d101      	bne.n	8004012 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e033      	b.n	800407a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004016:	2b00      	cmp	r3, #0
 8004018:	d109      	bne.n	800402e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f7ff fc32 	bl	8003884 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2200      	movs	r2, #0
 8004024:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004032:	f003 0310 	and.w	r3, r3, #16
 8004036:	2b00      	cmp	r3, #0
 8004038:	d118      	bne.n	800406c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004042:	f023 0302 	bic.w	r3, r3, #2
 8004046:	f043 0202 	orr.w	r2, r3, #2
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 fa68 	bl	8004524 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2200      	movs	r2, #0
 8004058:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405e:	f023 0303 	bic.w	r3, r3, #3
 8004062:	f043 0201 	orr.w	r2, r3, #1
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	641a      	str	r2, [r3, #64]	; 0x40
 800406a:	e001      	b.n	8004070 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004078:	7bfb      	ldrb	r3, [r7, #15]
}
 800407a:	4618      	mov	r0, r3
 800407c:	3710      	adds	r7, #16
 800407e:	46bd      	mov	sp, r7
 8004080:	bd80      	pop	{r7, pc}
	...

08004084 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b086      	sub	sp, #24
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8004090:	2300      	movs	r3, #0
 8004092:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800409a:	2b01      	cmp	r3, #1
 800409c:	d101      	bne.n	80040a2 <HAL_ADC_Start_DMA+0x1e>
 800409e:	2302      	movs	r3, #2
 80040a0:	e0e9      	b.n	8004276 <HAL_ADC_Start_DMA+0x1f2>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2201      	movs	r2, #1
 80040a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f003 0301 	and.w	r3, r3, #1
 80040b4:	2b01      	cmp	r3, #1
 80040b6:	d018      	beq.n	80040ea <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	689a      	ldr	r2, [r3, #8]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f042 0201 	orr.w	r2, r2, #1
 80040c6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80040c8:	4b6d      	ldr	r3, [pc, #436]	; (8004280 <HAL_ADC_Start_DMA+0x1fc>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a6d      	ldr	r2, [pc, #436]	; (8004284 <HAL_ADC_Start_DMA+0x200>)
 80040ce:	fba2 2303 	umull	r2, r3, r2, r3
 80040d2:	0c9a      	lsrs	r2, r3, #18
 80040d4:	4613      	mov	r3, r2
 80040d6:	005b      	lsls	r3, r3, #1
 80040d8:	4413      	add	r3, r2
 80040da:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80040dc:	e002      	b.n	80040e4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	3b01      	subs	r3, #1
 80040e2:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1f9      	bne.n	80040de <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040f8:	d107      	bne.n	800410a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	689a      	ldr	r2, [r3, #8]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004108:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f003 0301 	and.w	r3, r3, #1
 8004114:	2b01      	cmp	r3, #1
 8004116:	f040 80a1 	bne.w	800425c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800411e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004122:	f023 0301 	bic.w	r3, r3, #1
 8004126:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004138:	2b00      	cmp	r3, #0
 800413a:	d007      	beq.n	800414c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004140:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004144:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004150:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004154:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004158:	d106      	bne.n	8004168 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800415e:	f023 0206 	bic.w	r2, r3, #6
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	645a      	str	r2, [r3, #68]	; 0x44
 8004166:	e002      	b.n	800416e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004176:	4b44      	ldr	r3, [pc, #272]	; (8004288 <HAL_ADC_Start_DMA+0x204>)
 8004178:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417e:	4a43      	ldr	r2, [pc, #268]	; (800428c <HAL_ADC_Start_DMA+0x208>)
 8004180:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004186:	4a42      	ldr	r2, [pc, #264]	; (8004290 <HAL_ADC_Start_DMA+0x20c>)
 8004188:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800418e:	4a41      	ldr	r2, [pc, #260]	; (8004294 <HAL_ADC_Start_DMA+0x210>)
 8004190:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800419a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	685a      	ldr	r2, [r3, #4]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80041aa:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	689a      	ldr	r2, [r3, #8]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041ba:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	334c      	adds	r3, #76	; 0x4c
 80041c6:	4619      	mov	r1, r3
 80041c8:	68ba      	ldr	r2, [r7, #8]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f000 fcb8 	bl	8004b40 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80041d0:	697b      	ldr	r3, [r7, #20]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	f003 031f 	and.w	r3, r3, #31
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d12a      	bne.n	8004232 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	4a2d      	ldr	r2, [pc, #180]	; (8004298 <HAL_ADC_Start_DMA+0x214>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d015      	beq.n	8004212 <HAL_ADC_Start_DMA+0x18e>
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a2c      	ldr	r2, [pc, #176]	; (800429c <HAL_ADC_Start_DMA+0x218>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d105      	bne.n	80041fc <HAL_ADC_Start_DMA+0x178>
 80041f0:	4b25      	ldr	r3, [pc, #148]	; (8004288 <HAL_ADC_Start_DMA+0x204>)
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f003 031f 	and.w	r3, r3, #31
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00a      	beq.n	8004212 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a27      	ldr	r2, [pc, #156]	; (80042a0 <HAL_ADC_Start_DMA+0x21c>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d136      	bne.n	8004274 <HAL_ADC_Start_DMA+0x1f0>
 8004206:	4b20      	ldr	r3, [pc, #128]	; (8004288 <HAL_ADC_Start_DMA+0x204>)
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	f003 0310 	and.w	r3, r3, #16
 800420e:	2b00      	cmp	r3, #0
 8004210:	d130      	bne.n	8004274 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d129      	bne.n	8004274 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	689a      	ldr	r2, [r3, #8]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800422e:	609a      	str	r2, [r3, #8]
 8004230:	e020      	b.n	8004274 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a18      	ldr	r2, [pc, #96]	; (8004298 <HAL_ADC_Start_DMA+0x214>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d11b      	bne.n	8004274 <HAL_ADC_Start_DMA+0x1f0>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d114      	bne.n	8004274 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	689a      	ldr	r2, [r3, #8]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004258:	609a      	str	r2, [r3, #8]
 800425a:	e00b      	b.n	8004274 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004260:	f043 0210 	orr.w	r2, r3, #16
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800426c:	f043 0201 	orr.w	r2, r3, #1
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3718      	adds	r7, #24
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	20000050 	.word	0x20000050
 8004284:	431bde83 	.word	0x431bde83
 8004288:	40012300 	.word	0x40012300
 800428c:	0800471d 	.word	0x0800471d
 8004290:	080047d7 	.word	0x080047d7
 8004294:	080047f3 	.word	0x080047f3
 8004298:	40012000 	.word	0x40012000
 800429c:	40012100 	.word	0x40012100
 80042a0:	40012200 	.word	0x40012200

080042a4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80042ea:	2300      	movs	r3, #0
 80042ec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d101      	bne.n	80042fc <HAL_ADC_ConfigChannel+0x1c>
 80042f8:	2302      	movs	r3, #2
 80042fa:	e105      	b.n	8004508 <HAL_ADC_ConfigChannel+0x228>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	2b09      	cmp	r3, #9
 800430a:	d925      	bls.n	8004358 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	68d9      	ldr	r1, [r3, #12]
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	b29b      	uxth	r3, r3
 8004318:	461a      	mov	r2, r3
 800431a:	4613      	mov	r3, r2
 800431c:	005b      	lsls	r3, r3, #1
 800431e:	4413      	add	r3, r2
 8004320:	3b1e      	subs	r3, #30
 8004322:	2207      	movs	r2, #7
 8004324:	fa02 f303 	lsl.w	r3, r2, r3
 8004328:	43da      	mvns	r2, r3
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	400a      	ands	r2, r1
 8004330:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68d9      	ldr	r1, [r3, #12]
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	689a      	ldr	r2, [r3, #8]
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	b29b      	uxth	r3, r3
 8004342:	4618      	mov	r0, r3
 8004344:	4603      	mov	r3, r0
 8004346:	005b      	lsls	r3, r3, #1
 8004348:	4403      	add	r3, r0
 800434a:	3b1e      	subs	r3, #30
 800434c:	409a      	lsls	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	430a      	orrs	r2, r1
 8004354:	60da      	str	r2, [r3, #12]
 8004356:	e022      	b.n	800439e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	6919      	ldr	r1, [r3, #16]
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	b29b      	uxth	r3, r3
 8004364:	461a      	mov	r2, r3
 8004366:	4613      	mov	r3, r2
 8004368:	005b      	lsls	r3, r3, #1
 800436a:	4413      	add	r3, r2
 800436c:	2207      	movs	r2, #7
 800436e:	fa02 f303 	lsl.w	r3, r2, r3
 8004372:	43da      	mvns	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	400a      	ands	r2, r1
 800437a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	6919      	ldr	r1, [r3, #16]
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	689a      	ldr	r2, [r3, #8]
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	b29b      	uxth	r3, r3
 800438c:	4618      	mov	r0, r3
 800438e:	4603      	mov	r3, r0
 8004390:	005b      	lsls	r3, r3, #1
 8004392:	4403      	add	r3, r0
 8004394:	409a      	lsls	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	430a      	orrs	r2, r1
 800439c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	2b06      	cmp	r3, #6
 80043a4:	d824      	bhi.n	80043f0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	685a      	ldr	r2, [r3, #4]
 80043b0:	4613      	mov	r3, r2
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	4413      	add	r3, r2
 80043b6:	3b05      	subs	r3, #5
 80043b8:	221f      	movs	r2, #31
 80043ba:	fa02 f303 	lsl.w	r3, r2, r3
 80043be:	43da      	mvns	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	400a      	ands	r2, r1
 80043c6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	4618      	mov	r0, r3
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	685a      	ldr	r2, [r3, #4]
 80043da:	4613      	mov	r3, r2
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	4413      	add	r3, r2
 80043e0:	3b05      	subs	r3, #5
 80043e2:	fa00 f203 	lsl.w	r2, r0, r3
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	430a      	orrs	r2, r1
 80043ec:	635a      	str	r2, [r3, #52]	; 0x34
 80043ee:	e04c      	b.n	800448a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	2b0c      	cmp	r3, #12
 80043f6:	d824      	bhi.n	8004442 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	685a      	ldr	r2, [r3, #4]
 8004402:	4613      	mov	r3, r2
 8004404:	009b      	lsls	r3, r3, #2
 8004406:	4413      	add	r3, r2
 8004408:	3b23      	subs	r3, #35	; 0x23
 800440a:	221f      	movs	r2, #31
 800440c:	fa02 f303 	lsl.w	r3, r2, r3
 8004410:	43da      	mvns	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	400a      	ands	r2, r1
 8004418:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	b29b      	uxth	r3, r3
 8004426:	4618      	mov	r0, r3
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	685a      	ldr	r2, [r3, #4]
 800442c:	4613      	mov	r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4413      	add	r3, r2
 8004432:	3b23      	subs	r3, #35	; 0x23
 8004434:	fa00 f203 	lsl.w	r2, r0, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	430a      	orrs	r2, r1
 800443e:	631a      	str	r2, [r3, #48]	; 0x30
 8004440:	e023      	b.n	800448a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	685a      	ldr	r2, [r3, #4]
 800444c:	4613      	mov	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4413      	add	r3, r2
 8004452:	3b41      	subs	r3, #65	; 0x41
 8004454:	221f      	movs	r2, #31
 8004456:	fa02 f303 	lsl.w	r3, r2, r3
 800445a:	43da      	mvns	r2, r3
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	400a      	ands	r2, r1
 8004462:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	b29b      	uxth	r3, r3
 8004470:	4618      	mov	r0, r3
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	685a      	ldr	r2, [r3, #4]
 8004476:	4613      	mov	r3, r2
 8004478:	009b      	lsls	r3, r3, #2
 800447a:	4413      	add	r3, r2
 800447c:	3b41      	subs	r3, #65	; 0x41
 800447e:	fa00 f203 	lsl.w	r2, r0, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	430a      	orrs	r2, r1
 8004488:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800448a:	4b22      	ldr	r3, [pc, #136]	; (8004514 <HAL_ADC_ConfigChannel+0x234>)
 800448c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a21      	ldr	r2, [pc, #132]	; (8004518 <HAL_ADC_ConfigChannel+0x238>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d109      	bne.n	80044ac <HAL_ADC_ConfigChannel+0x1cc>
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	2b12      	cmp	r3, #18
 800449e:	d105      	bne.n	80044ac <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a19      	ldr	r2, [pc, #100]	; (8004518 <HAL_ADC_ConfigChannel+0x238>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d123      	bne.n	80044fe <HAL_ADC_ConfigChannel+0x21e>
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2b10      	cmp	r3, #16
 80044bc:	d003      	beq.n	80044c6 <HAL_ADC_ConfigChannel+0x1e6>
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	2b11      	cmp	r3, #17
 80044c4:	d11b      	bne.n	80044fe <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	2b10      	cmp	r3, #16
 80044d8:	d111      	bne.n	80044fe <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80044da:	4b10      	ldr	r3, [pc, #64]	; (800451c <HAL_ADC_ConfigChannel+0x23c>)
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a10      	ldr	r2, [pc, #64]	; (8004520 <HAL_ADC_ConfigChannel+0x240>)
 80044e0:	fba2 2303 	umull	r2, r3, r2, r3
 80044e4:	0c9a      	lsrs	r2, r3, #18
 80044e6:	4613      	mov	r3, r2
 80044e8:	009b      	lsls	r3, r3, #2
 80044ea:	4413      	add	r3, r2
 80044ec:	005b      	lsls	r3, r3, #1
 80044ee:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80044f0:	e002      	b.n	80044f8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	3b01      	subs	r3, #1
 80044f6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1f9      	bne.n	80044f2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8004506:	2300      	movs	r3, #0
}
 8004508:	4618      	mov	r0, r3
 800450a:	3714      	adds	r7, #20
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr
 8004514:	40012300 	.word	0x40012300
 8004518:	40012000 	.word	0x40012000
 800451c:	20000050 	.word	0x20000050
 8004520:	431bde83 	.word	0x431bde83

08004524 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8004524:	b480      	push	{r7}
 8004526:	b085      	sub	sp, #20
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800452c:	4b79      	ldr	r3, [pc, #484]	; (8004714 <ADC_Init+0x1f0>)
 800452e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	431a      	orrs	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	685a      	ldr	r2, [r3, #4]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004558:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	6859      	ldr	r1, [r3, #4]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	021a      	lsls	r2, r3, #8
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	430a      	orrs	r2, r1
 800456c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	685a      	ldr	r2, [r3, #4]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800457c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	6859      	ldr	r1, [r3, #4]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689a      	ldr	r2, [r3, #8]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	430a      	orrs	r2, r1
 800458e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	689a      	ldr	r2, [r3, #8]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800459e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6899      	ldr	r1, [r3, #8]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	68da      	ldr	r2, [r3, #12]
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b6:	4a58      	ldr	r2, [pc, #352]	; (8004718 <ADC_Init+0x1f4>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d022      	beq.n	8004602 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	689a      	ldr	r2, [r3, #8]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80045ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6899      	ldr	r1, [r3, #8]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	430a      	orrs	r2, r1
 80045dc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	689a      	ldr	r2, [r3, #8]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80045ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	6899      	ldr	r1, [r3, #8]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	430a      	orrs	r2, r1
 80045fe:	609a      	str	r2, [r3, #8]
 8004600:	e00f      	b.n	8004622 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	689a      	ldr	r2, [r3, #8]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004610:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	689a      	ldr	r2, [r3, #8]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004620:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	689a      	ldr	r2, [r3, #8]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f022 0202 	bic.w	r2, r2, #2
 8004630:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	6899      	ldr	r1, [r3, #8]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	7e1b      	ldrb	r3, [r3, #24]
 800463c:	005a      	lsls	r2, r3, #1
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	430a      	orrs	r2, r1
 8004644:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	f893 3020 	ldrb.w	r3, [r3, #32]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d01b      	beq.n	8004688 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	685a      	ldr	r2, [r3, #4]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800465e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	685a      	ldr	r2, [r3, #4]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800466e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	6859      	ldr	r1, [r3, #4]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467a:	3b01      	subs	r3, #1
 800467c:	035a      	lsls	r2, r3, #13
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	430a      	orrs	r2, r1
 8004684:	605a      	str	r2, [r3, #4]
 8004686:	e007      	b.n	8004698 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	685a      	ldr	r2, [r3, #4]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004696:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80046a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	69db      	ldr	r3, [r3, #28]
 80046b2:	3b01      	subs	r3, #1
 80046b4:	051a      	lsls	r2, r3, #20
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	430a      	orrs	r2, r1
 80046bc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80046cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	6899      	ldr	r1, [r3, #8]
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80046da:	025a      	lsls	r2, r3, #9
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	430a      	orrs	r2, r1
 80046e2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	689a      	ldr	r2, [r3, #8]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	6899      	ldr	r1, [r3, #8]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	029a      	lsls	r2, r3, #10
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	430a      	orrs	r2, r1
 8004706:	609a      	str	r2, [r3, #8]
}
 8004708:	bf00      	nop
 800470a:	3714      	adds	r7, #20
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr
 8004714:	40012300 	.word	0x40012300
 8004718:	0f000001 	.word	0x0f000001

0800471c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004728:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004732:	2b00      	cmp	r3, #0
 8004734:	d13c      	bne.n	80047b0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800474c:	2b00      	cmp	r3, #0
 800474e:	d12b      	bne.n	80047a8 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004754:	2b00      	cmp	r3, #0
 8004756:	d127      	bne.n	80047a8 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004762:	2b00      	cmp	r3, #0
 8004764:	d006      	beq.n	8004774 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	689b      	ldr	r3, [r3, #8]
 800476c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004770:	2b00      	cmp	r3, #0
 8004772:	d119      	bne.n	80047a8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	685a      	ldr	r2, [r3, #4]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f022 0220 	bic.w	r2, r2, #32
 8004782:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004788:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004794:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d105      	bne.n	80047a8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a0:	f043 0201 	orr.w	r2, r3, #1
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80047a8:	68f8      	ldr	r0, [r7, #12]
 80047aa:	f7ff fd7b 	bl	80042a4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80047ae:	e00e      	b.n	80047ce <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b4:	f003 0310 	and.w	r3, r3, #16
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d003      	beq.n	80047c4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80047bc:	68f8      	ldr	r0, [r7, #12]
 80047be:	f7ff fd85 	bl	80042cc <HAL_ADC_ErrorCallback>
}
 80047c2:	e004      	b.n	80047ce <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	4798      	blx	r3
}
 80047ce:	bf00      	nop
 80047d0:	3710      	adds	r7, #16
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}

080047d6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80047d6:	b580      	push	{r7, lr}
 80047d8:	b084      	sub	sp, #16
 80047da:	af00      	add	r7, sp, #0
 80047dc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e2:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80047e4:	68f8      	ldr	r0, [r7, #12]
 80047e6:	f7ff fd67 	bl	80042b8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80047ea:	bf00      	nop
 80047ec:	3710      	adds	r7, #16
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b084      	sub	sp, #16
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fe:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2240      	movs	r2, #64	; 0x40
 8004804:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800480a:	f043 0204 	orr.w	r2, r3, #4
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	f7ff fd5a 	bl	80042cc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004818:	bf00      	nop
 800481a:	3710      	adds	r7, #16
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}

08004820 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f003 0307 	and.w	r3, r3, #7
 800482e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004830:	4b0c      	ldr	r3, [pc, #48]	; (8004864 <__NVIC_SetPriorityGrouping+0x44>)
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004836:	68ba      	ldr	r2, [r7, #8]
 8004838:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800483c:	4013      	ands	r3, r2
 800483e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004848:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800484c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004850:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004852:	4a04      	ldr	r2, [pc, #16]	; (8004864 <__NVIC_SetPriorityGrouping+0x44>)
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	60d3      	str	r3, [r2, #12]
}
 8004858:	bf00      	nop
 800485a:	3714      	adds	r7, #20
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr
 8004864:	e000ed00 	.word	0xe000ed00

08004868 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004868:	b480      	push	{r7}
 800486a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800486c:	4b04      	ldr	r3, [pc, #16]	; (8004880 <__NVIC_GetPriorityGrouping+0x18>)
 800486e:	68db      	ldr	r3, [r3, #12]
 8004870:	0a1b      	lsrs	r3, r3, #8
 8004872:	f003 0307 	and.w	r3, r3, #7
}
 8004876:	4618      	mov	r0, r3
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr
 8004880:	e000ed00 	.word	0xe000ed00

08004884 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004884:	b480      	push	{r7}
 8004886:	b083      	sub	sp, #12
 8004888:	af00      	add	r7, sp, #0
 800488a:	4603      	mov	r3, r0
 800488c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800488e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004892:	2b00      	cmp	r3, #0
 8004894:	db0b      	blt.n	80048ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004896:	79fb      	ldrb	r3, [r7, #7]
 8004898:	f003 021f 	and.w	r2, r3, #31
 800489c:	4907      	ldr	r1, [pc, #28]	; (80048bc <__NVIC_EnableIRQ+0x38>)
 800489e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048a2:	095b      	lsrs	r3, r3, #5
 80048a4:	2001      	movs	r0, #1
 80048a6:	fa00 f202 	lsl.w	r2, r0, r2
 80048aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80048ae:	bf00      	nop
 80048b0:	370c      	adds	r7, #12
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop
 80048bc:	e000e100 	.word	0xe000e100

080048c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	4603      	mov	r3, r0
 80048c8:	6039      	str	r1, [r7, #0]
 80048ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	db0a      	blt.n	80048ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	b2da      	uxtb	r2, r3
 80048d8:	490c      	ldr	r1, [pc, #48]	; (800490c <__NVIC_SetPriority+0x4c>)
 80048da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048de:	0112      	lsls	r2, r2, #4
 80048e0:	b2d2      	uxtb	r2, r2
 80048e2:	440b      	add	r3, r1
 80048e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80048e8:	e00a      	b.n	8004900 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	b2da      	uxtb	r2, r3
 80048ee:	4908      	ldr	r1, [pc, #32]	; (8004910 <__NVIC_SetPriority+0x50>)
 80048f0:	79fb      	ldrb	r3, [r7, #7]
 80048f2:	f003 030f 	and.w	r3, r3, #15
 80048f6:	3b04      	subs	r3, #4
 80048f8:	0112      	lsls	r2, r2, #4
 80048fa:	b2d2      	uxtb	r2, r2
 80048fc:	440b      	add	r3, r1
 80048fe:	761a      	strb	r2, [r3, #24]
}
 8004900:	bf00      	nop
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr
 800490c:	e000e100 	.word	0xe000e100
 8004910:	e000ed00 	.word	0xe000ed00

08004914 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004914:	b480      	push	{r7}
 8004916:	b089      	sub	sp, #36	; 0x24
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f003 0307 	and.w	r3, r3, #7
 8004926:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	f1c3 0307 	rsb	r3, r3, #7
 800492e:	2b04      	cmp	r3, #4
 8004930:	bf28      	it	cs
 8004932:	2304      	movcs	r3, #4
 8004934:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	3304      	adds	r3, #4
 800493a:	2b06      	cmp	r3, #6
 800493c:	d902      	bls.n	8004944 <NVIC_EncodePriority+0x30>
 800493e:	69fb      	ldr	r3, [r7, #28]
 8004940:	3b03      	subs	r3, #3
 8004942:	e000      	b.n	8004946 <NVIC_EncodePriority+0x32>
 8004944:	2300      	movs	r3, #0
 8004946:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004948:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800494c:	69bb      	ldr	r3, [r7, #24]
 800494e:	fa02 f303 	lsl.w	r3, r2, r3
 8004952:	43da      	mvns	r2, r3
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	401a      	ands	r2, r3
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800495c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	fa01 f303 	lsl.w	r3, r1, r3
 8004966:	43d9      	mvns	r1, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800496c:	4313      	orrs	r3, r2
         );
}
 800496e:	4618      	mov	r0, r3
 8004970:	3724      	adds	r7, #36	; 0x24
 8004972:	46bd      	mov	sp, r7
 8004974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004978:	4770      	bx	lr

0800497a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800497a:	b580      	push	{r7, lr}
 800497c:	b082      	sub	sp, #8
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f7ff ff4c 	bl	8004820 <__NVIC_SetPriorityGrouping>
}
 8004988:	bf00      	nop
 800498a:	3708      	adds	r7, #8
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}

08004990 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004990:	b580      	push	{r7, lr}
 8004992:	b086      	sub	sp, #24
 8004994:	af00      	add	r7, sp, #0
 8004996:	4603      	mov	r3, r0
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]
 800499c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800499e:	2300      	movs	r3, #0
 80049a0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80049a2:	f7ff ff61 	bl	8004868 <__NVIC_GetPriorityGrouping>
 80049a6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	68b9      	ldr	r1, [r7, #8]
 80049ac:	6978      	ldr	r0, [r7, #20]
 80049ae:	f7ff ffb1 	bl	8004914 <NVIC_EncodePriority>
 80049b2:	4602      	mov	r2, r0
 80049b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80049b8:	4611      	mov	r1, r2
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7ff ff80 	bl	80048c0 <__NVIC_SetPriority>
}
 80049c0:	bf00      	nop
 80049c2:	3718      	adds	r7, #24
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}

080049c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b082      	sub	sp, #8
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	4603      	mov	r3, r0
 80049d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80049d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049d6:	4618      	mov	r0, r3
 80049d8:	f7ff ff54 	bl	8004884 <__NVIC_EnableIRQ>
}
 80049dc:	bf00      	nop
 80049de:	3708      	adds	r7, #8
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b086      	sub	sp, #24
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80049ec:	2300      	movs	r3, #0
 80049ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80049f0:	f7ff fad4 	bl	8003f9c <HAL_GetTick>
 80049f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d101      	bne.n	8004a00 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e099      	b.n	8004b34 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2202      	movs	r2, #2
 8004a04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f022 0201 	bic.w	r2, r2, #1
 8004a1e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a20:	e00f      	b.n	8004a42 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004a22:	f7ff fabb 	bl	8003f9c <HAL_GetTick>
 8004a26:	4602      	mov	r2, r0
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	2b05      	cmp	r3, #5
 8004a2e:	d908      	bls.n	8004a42 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2220      	movs	r2, #32
 8004a34:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2203      	movs	r2, #3
 8004a3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004a3e:	2303      	movs	r3, #3
 8004a40:	e078      	b.n	8004b34 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 0301 	and.w	r3, r3, #1
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d1e8      	bne.n	8004a22 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004a58:	697a      	ldr	r2, [r7, #20]
 8004a5a:	4b38      	ldr	r3, [pc, #224]	; (8004b3c <HAL_DMA_Init+0x158>)
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	685a      	ldr	r2, [r3, #4]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a1b      	ldr	r3, [r3, #32]
 8004a8c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004a8e:	697a      	ldr	r2, [r7, #20]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a98:	2b04      	cmp	r3, #4
 8004a9a:	d107      	bne.n	8004aac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	697a      	ldr	r2, [r7, #20]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	697a      	ldr	r2, [r7, #20]
 8004ab2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	695b      	ldr	r3, [r3, #20]
 8004aba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	f023 0307 	bic.w	r3, r3, #7
 8004ac2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac8:	697a      	ldr	r2, [r7, #20]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad2:	2b04      	cmp	r3, #4
 8004ad4:	d117      	bne.n	8004b06 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ada:	697a      	ldr	r2, [r7, #20]
 8004adc:	4313      	orrs	r3, r2
 8004ade:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d00e      	beq.n	8004b06 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004ae8:	6878      	ldr	r0, [r7, #4]
 8004aea:	f000 fb01 	bl	80050f0 <DMA_CheckFifoParam>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d008      	beq.n	8004b06 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2240      	movs	r2, #64	; 0x40
 8004af8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2201      	movs	r2, #1
 8004afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004b02:	2301      	movs	r3, #1
 8004b04:	e016      	b.n	8004b34 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	697a      	ldr	r2, [r7, #20]
 8004b0c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 fab8 	bl	8005084 <DMA_CalcBaseAndBitshift>
 8004b14:	4603      	mov	r3, r0
 8004b16:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b1c:	223f      	movs	r2, #63	; 0x3f
 8004b1e:	409a      	lsls	r2, r3
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2200      	movs	r2, #0
 8004b28:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2201      	movs	r2, #1
 8004b2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3718      	adds	r7, #24
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	f010803f 	.word	0xf010803f

08004b40 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b086      	sub	sp, #24
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	607a      	str	r2, [r7, #4]
 8004b4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b4e:	2300      	movs	r3, #0
 8004b50:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b56:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d101      	bne.n	8004b66 <HAL_DMA_Start_IT+0x26>
 8004b62:	2302      	movs	r3, #2
 8004b64:	e040      	b.n	8004be8 <HAL_DMA_Start_IT+0xa8>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2201      	movs	r2, #1
 8004b6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d12f      	bne.n	8004bda <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2202      	movs	r2, #2
 8004b7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	68b9      	ldr	r1, [r7, #8]
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f000 fa4a 	bl	8005028 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b98:	223f      	movs	r2, #63	; 0x3f
 8004b9a:	409a      	lsls	r2, r3
 8004b9c:	693b      	ldr	r3, [r7, #16]
 8004b9e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f042 0216 	orr.w	r2, r2, #22
 8004bae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d007      	beq.n	8004bc8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f042 0208 	orr.w	r2, r2, #8
 8004bc6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f042 0201 	orr.w	r2, r2, #1
 8004bd6:	601a      	str	r2, [r3, #0]
 8004bd8:	e005      	b.n	8004be6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004be2:	2302      	movs	r3, #2
 8004be4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004be6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004be8:	4618      	mov	r0, r3
 8004bea:	3718      	adds	r7, #24
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bfc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004bfe:	f7ff f9cd 	bl	8003f9c <HAL_GetTick>
 8004c02:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d008      	beq.n	8004c22 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2280      	movs	r2, #128	; 0x80
 8004c14:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e052      	b.n	8004cc8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f022 0216 	bic.w	r2, r2, #22
 8004c30:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	695a      	ldr	r2, [r3, #20]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c40:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d103      	bne.n	8004c52 <HAL_DMA_Abort+0x62>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d007      	beq.n	8004c62 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f022 0208 	bic.w	r2, r2, #8
 8004c60:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f022 0201 	bic.w	r2, r2, #1
 8004c70:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c72:	e013      	b.n	8004c9c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004c74:	f7ff f992 	bl	8003f9c <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	2b05      	cmp	r3, #5
 8004c80:	d90c      	bls.n	8004c9c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2220      	movs	r2, #32
 8004c86:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2203      	movs	r2, #3
 8004c8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e015      	b.n	8004cc8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f003 0301 	and.w	r3, r3, #1
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d1e4      	bne.n	8004c74 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cae:	223f      	movs	r2, #63	; 0x3f
 8004cb0:	409a      	lsls	r2, r3
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3710      	adds	r7, #16
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b083      	sub	sp, #12
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d004      	beq.n	8004cee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2280      	movs	r2, #128	; 0x80
 8004ce8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e00c      	b.n	8004d08 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2205      	movs	r2, #5
 8004cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f022 0201 	bic.w	r2, r2, #1
 8004d04:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004d06:	2300      	movs	r3, #0
}
 8004d08:	4618      	mov	r0, r3
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b086      	sub	sp, #24
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004d20:	4b8e      	ldr	r3, [pc, #568]	; (8004f5c <HAL_DMA_IRQHandler+0x248>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a8e      	ldr	r2, [pc, #568]	; (8004f60 <HAL_DMA_IRQHandler+0x24c>)
 8004d26:	fba2 2303 	umull	r2, r3, r2, r3
 8004d2a:	0a9b      	lsrs	r3, r3, #10
 8004d2c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d32:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d3e:	2208      	movs	r2, #8
 8004d40:	409a      	lsls	r2, r3
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	4013      	ands	r3, r2
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d01a      	beq.n	8004d80 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0304 	and.w	r3, r3, #4
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d013      	beq.n	8004d80 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f022 0204 	bic.w	r2, r2, #4
 8004d66:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d6c:	2208      	movs	r2, #8
 8004d6e:	409a      	lsls	r2, r3
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d78:	f043 0201 	orr.w	r2, r3, #1
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d84:	2201      	movs	r2, #1
 8004d86:	409a      	lsls	r2, r3
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d012      	beq.n	8004db6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00b      	beq.n	8004db6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004da2:	2201      	movs	r2, #1
 8004da4:	409a      	lsls	r2, r3
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dae:	f043 0202 	orr.w	r2, r3, #2
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dba:	2204      	movs	r2, #4
 8004dbc:	409a      	lsls	r2, r3
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d012      	beq.n	8004dec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0302 	and.w	r3, r3, #2
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d00b      	beq.n	8004dec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004dd8:	2204      	movs	r2, #4
 8004dda:	409a      	lsls	r2, r3
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de4:	f043 0204 	orr.w	r2, r3, #4
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004df0:	2210      	movs	r2, #16
 8004df2:	409a      	lsls	r2, r3
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	4013      	ands	r3, r2
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d043      	beq.n	8004e84 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0308 	and.w	r3, r3, #8
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d03c      	beq.n	8004e84 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e0e:	2210      	movs	r2, #16
 8004e10:	409a      	lsls	r2, r3
 8004e12:	693b      	ldr	r3, [r7, #16]
 8004e14:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d018      	beq.n	8004e56 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d108      	bne.n	8004e44 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d024      	beq.n	8004e84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	4798      	blx	r3
 8004e42:	e01f      	b.n	8004e84 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d01b      	beq.n	8004e84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e50:	6878      	ldr	r0, [r7, #4]
 8004e52:	4798      	blx	r3
 8004e54:	e016      	b.n	8004e84 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d107      	bne.n	8004e74 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f022 0208 	bic.w	r2, r2, #8
 8004e72:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d003      	beq.n	8004e84 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e88:	2220      	movs	r2, #32
 8004e8a:	409a      	lsls	r2, r3
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	4013      	ands	r3, r2
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f000 808f 	beq.w	8004fb4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 0310 	and.w	r3, r3, #16
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	f000 8087 	beq.w	8004fb4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004eaa:	2220      	movs	r2, #32
 8004eac:	409a      	lsls	r2, r3
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	2b05      	cmp	r3, #5
 8004ebc:	d136      	bne.n	8004f2c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f022 0216 	bic.w	r2, r2, #22
 8004ecc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	695a      	ldr	r2, [r3, #20]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004edc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d103      	bne.n	8004eee <HAL_DMA_IRQHandler+0x1da>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d007      	beq.n	8004efe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f022 0208 	bic.w	r2, r2, #8
 8004efc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f02:	223f      	movs	r2, #63	; 0x3f
 8004f04:	409a      	lsls	r2, r3
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d07e      	beq.n	8005020 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	4798      	blx	r3
        }
        return;
 8004f2a:	e079      	b.n	8005020 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d01d      	beq.n	8004f76 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d10d      	bne.n	8004f64 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d031      	beq.n	8004fb4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	4798      	blx	r3
 8004f58:	e02c      	b.n	8004fb4 <HAL_DMA_IRQHandler+0x2a0>
 8004f5a:	bf00      	nop
 8004f5c:	20000050 	.word	0x20000050
 8004f60:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d023      	beq.n	8004fb4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	4798      	blx	r3
 8004f74:	e01e      	b.n	8004fb4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d10f      	bne.n	8004fa4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681a      	ldr	r2, [r3, #0]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f022 0210 	bic.w	r2, r2, #16
 8004f92:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d003      	beq.n	8004fb4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d032      	beq.n	8005022 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc0:	f003 0301 	and.w	r3, r3, #1
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d022      	beq.n	800500e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2205      	movs	r2, #5
 8004fcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f022 0201 	bic.w	r2, r2, #1
 8004fde:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004fe0:	68bb      	ldr	r3, [r7, #8]
 8004fe2:	3301      	adds	r3, #1
 8004fe4:	60bb      	str	r3, [r7, #8]
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d307      	bcc.n	8004ffc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0301 	and.w	r3, r3, #1
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d1f2      	bne.n	8004fe0 <HAL_DMA_IRQHandler+0x2cc>
 8004ffa:	e000      	b.n	8004ffe <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004ffc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2201      	movs	r2, #1
 8005002:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005012:	2b00      	cmp	r3, #0
 8005014:	d005      	beq.n	8005022 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	4798      	blx	r3
 800501e:	e000      	b.n	8005022 <HAL_DMA_IRQHandler+0x30e>
        return;
 8005020:	bf00      	nop
    }
  }
}
 8005022:	3718      	adds	r7, #24
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005028:	b480      	push	{r7}
 800502a:	b085      	sub	sp, #20
 800502c:	af00      	add	r7, sp, #0
 800502e:	60f8      	str	r0, [r7, #12]
 8005030:	60b9      	str	r1, [r7, #8]
 8005032:	607a      	str	r2, [r7, #4]
 8005034:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005044:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	683a      	ldr	r2, [r7, #0]
 800504c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	2b40      	cmp	r3, #64	; 0x40
 8005054:	d108      	bne.n	8005068 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68ba      	ldr	r2, [r7, #8]
 8005064:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005066:	e007      	b.n	8005078 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68ba      	ldr	r2, [r7, #8]
 800506e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	687a      	ldr	r2, [r7, #4]
 8005076:	60da      	str	r2, [r3, #12]
}
 8005078:	bf00      	nop
 800507a:	3714      	adds	r7, #20
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr

08005084 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005084:	b480      	push	{r7}
 8005086:	b085      	sub	sp, #20
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	b2db      	uxtb	r3, r3
 8005092:	3b10      	subs	r3, #16
 8005094:	4a14      	ldr	r2, [pc, #80]	; (80050e8 <DMA_CalcBaseAndBitshift+0x64>)
 8005096:	fba2 2303 	umull	r2, r3, r2, r3
 800509a:	091b      	lsrs	r3, r3, #4
 800509c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800509e:	4a13      	ldr	r2, [pc, #76]	; (80050ec <DMA_CalcBaseAndBitshift+0x68>)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	4413      	add	r3, r2
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	461a      	mov	r2, r3
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2b03      	cmp	r3, #3
 80050b0:	d909      	bls.n	80050c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80050ba:	f023 0303 	bic.w	r3, r3, #3
 80050be:	1d1a      	adds	r2, r3, #4
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	659a      	str	r2, [r3, #88]	; 0x58
 80050c4:	e007      	b.n	80050d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80050ce:	f023 0303 	bic.w	r3, r3, #3
 80050d2:	687a      	ldr	r2, [r7, #4]
 80050d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3714      	adds	r7, #20
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	aaaaaaab 	.word	0xaaaaaaab
 80050ec:	0800ff64 	.word	0x0800ff64

080050f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b085      	sub	sp, #20
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050f8:	2300      	movs	r3, #0
 80050fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005100:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	699b      	ldr	r3, [r3, #24]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d11f      	bne.n	800514a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	2b03      	cmp	r3, #3
 800510e:	d856      	bhi.n	80051be <DMA_CheckFifoParam+0xce>
 8005110:	a201      	add	r2, pc, #4	; (adr r2, 8005118 <DMA_CheckFifoParam+0x28>)
 8005112:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005116:	bf00      	nop
 8005118:	08005129 	.word	0x08005129
 800511c:	0800513b 	.word	0x0800513b
 8005120:	08005129 	.word	0x08005129
 8005124:	080051bf 	.word	0x080051bf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800512c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d046      	beq.n	80051c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005134:	2301      	movs	r3, #1
 8005136:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005138:	e043      	b.n	80051c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800513e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005142:	d140      	bne.n	80051c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005144:	2301      	movs	r3, #1
 8005146:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005148:	e03d      	b.n	80051c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005152:	d121      	bne.n	8005198 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	2b03      	cmp	r3, #3
 8005158:	d837      	bhi.n	80051ca <DMA_CheckFifoParam+0xda>
 800515a:	a201      	add	r2, pc, #4	; (adr r2, 8005160 <DMA_CheckFifoParam+0x70>)
 800515c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005160:	08005171 	.word	0x08005171
 8005164:	08005177 	.word	0x08005177
 8005168:	08005171 	.word	0x08005171
 800516c:	08005189 	.word	0x08005189
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	73fb      	strb	r3, [r7, #15]
      break;
 8005174:	e030      	b.n	80051d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800517a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d025      	beq.n	80051ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005182:	2301      	movs	r3, #1
 8005184:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005186:	e022      	b.n	80051ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005190:	d11f      	bne.n	80051d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005196:	e01c      	b.n	80051d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	2b02      	cmp	r3, #2
 800519c:	d903      	bls.n	80051a6 <DMA_CheckFifoParam+0xb6>
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	2b03      	cmp	r3, #3
 80051a2:	d003      	beq.n	80051ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80051a4:	e018      	b.n	80051d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	73fb      	strb	r3, [r7, #15]
      break;
 80051aa:	e015      	b.n	80051d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d00e      	beq.n	80051d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80051b8:	2301      	movs	r3, #1
 80051ba:	73fb      	strb	r3, [r7, #15]
      break;
 80051bc:	e00b      	b.n	80051d6 <DMA_CheckFifoParam+0xe6>
      break;
 80051be:	bf00      	nop
 80051c0:	e00a      	b.n	80051d8 <DMA_CheckFifoParam+0xe8>
      break;
 80051c2:	bf00      	nop
 80051c4:	e008      	b.n	80051d8 <DMA_CheckFifoParam+0xe8>
      break;
 80051c6:	bf00      	nop
 80051c8:	e006      	b.n	80051d8 <DMA_CheckFifoParam+0xe8>
      break;
 80051ca:	bf00      	nop
 80051cc:	e004      	b.n	80051d8 <DMA_CheckFifoParam+0xe8>
      break;
 80051ce:	bf00      	nop
 80051d0:	e002      	b.n	80051d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80051d2:	bf00      	nop
 80051d4:	e000      	b.n	80051d8 <DMA_CheckFifoParam+0xe8>
      break;
 80051d6:	bf00      	nop
    }
  } 
  
  return status; 
 80051d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3714      	adds	r7, #20
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop

080051e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b089      	sub	sp, #36	; 0x24
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80051f2:	2300      	movs	r3, #0
 80051f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80051f6:	2300      	movs	r3, #0
 80051f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80051fa:	2300      	movs	r3, #0
 80051fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80051fe:	2300      	movs	r3, #0
 8005200:	61fb      	str	r3, [r7, #28]
 8005202:	e16b      	b.n	80054dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005204:	2201      	movs	r2, #1
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	fa02 f303 	lsl.w	r3, r2, r3
 800520c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	697a      	ldr	r2, [r7, #20]
 8005214:	4013      	ands	r3, r2
 8005216:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005218:	693a      	ldr	r2, [r7, #16]
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	429a      	cmp	r2, r3
 800521e:	f040 815a 	bne.w	80054d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f003 0303 	and.w	r3, r3, #3
 800522a:	2b01      	cmp	r3, #1
 800522c:	d005      	beq.n	800523a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	685b      	ldr	r3, [r3, #4]
 8005232:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005236:	2b02      	cmp	r3, #2
 8005238:	d130      	bne.n	800529c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	005b      	lsls	r3, r3, #1
 8005244:	2203      	movs	r2, #3
 8005246:	fa02 f303 	lsl.w	r3, r2, r3
 800524a:	43db      	mvns	r3, r3
 800524c:	69ba      	ldr	r2, [r7, #24]
 800524e:	4013      	ands	r3, r2
 8005250:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	68da      	ldr	r2, [r3, #12]
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	005b      	lsls	r3, r3, #1
 800525a:	fa02 f303 	lsl.w	r3, r2, r3
 800525e:	69ba      	ldr	r2, [r7, #24]
 8005260:	4313      	orrs	r3, r2
 8005262:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	69ba      	ldr	r2, [r7, #24]
 8005268:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005270:	2201      	movs	r2, #1
 8005272:	69fb      	ldr	r3, [r7, #28]
 8005274:	fa02 f303 	lsl.w	r3, r2, r3
 8005278:	43db      	mvns	r3, r3
 800527a:	69ba      	ldr	r2, [r7, #24]
 800527c:	4013      	ands	r3, r2
 800527e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	091b      	lsrs	r3, r3, #4
 8005286:	f003 0201 	and.w	r2, r3, #1
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	fa02 f303 	lsl.w	r3, r2, r3
 8005290:	69ba      	ldr	r2, [r7, #24]
 8005292:	4313      	orrs	r3, r2
 8005294:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	69ba      	ldr	r2, [r7, #24]
 800529a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	f003 0303 	and.w	r3, r3, #3
 80052a4:	2b03      	cmp	r3, #3
 80052a6:	d017      	beq.n	80052d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	68db      	ldr	r3, [r3, #12]
 80052ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	005b      	lsls	r3, r3, #1
 80052b2:	2203      	movs	r2, #3
 80052b4:	fa02 f303 	lsl.w	r3, r2, r3
 80052b8:	43db      	mvns	r3, r3
 80052ba:	69ba      	ldr	r2, [r7, #24]
 80052bc:	4013      	ands	r3, r2
 80052be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	689a      	ldr	r2, [r3, #8]
 80052c4:	69fb      	ldr	r3, [r7, #28]
 80052c6:	005b      	lsls	r3, r3, #1
 80052c8:	fa02 f303 	lsl.w	r3, r2, r3
 80052cc:	69ba      	ldr	r2, [r7, #24]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	69ba      	ldr	r2, [r7, #24]
 80052d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	f003 0303 	and.w	r3, r3, #3
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d123      	bne.n	800532c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80052e4:	69fb      	ldr	r3, [r7, #28]
 80052e6:	08da      	lsrs	r2, r3, #3
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	3208      	adds	r2, #8
 80052ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80052f2:	69fb      	ldr	r3, [r7, #28]
 80052f4:	f003 0307 	and.w	r3, r3, #7
 80052f8:	009b      	lsls	r3, r3, #2
 80052fa:	220f      	movs	r2, #15
 80052fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005300:	43db      	mvns	r3, r3
 8005302:	69ba      	ldr	r2, [r7, #24]
 8005304:	4013      	ands	r3, r2
 8005306:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	691a      	ldr	r2, [r3, #16]
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	f003 0307 	and.w	r3, r3, #7
 8005312:	009b      	lsls	r3, r3, #2
 8005314:	fa02 f303 	lsl.w	r3, r2, r3
 8005318:	69ba      	ldr	r2, [r7, #24]
 800531a:	4313      	orrs	r3, r2
 800531c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800531e:	69fb      	ldr	r3, [r7, #28]
 8005320:	08da      	lsrs	r2, r3, #3
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	3208      	adds	r2, #8
 8005326:	69b9      	ldr	r1, [r7, #24]
 8005328:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005332:	69fb      	ldr	r3, [r7, #28]
 8005334:	005b      	lsls	r3, r3, #1
 8005336:	2203      	movs	r2, #3
 8005338:	fa02 f303 	lsl.w	r3, r2, r3
 800533c:	43db      	mvns	r3, r3
 800533e:	69ba      	ldr	r2, [r7, #24]
 8005340:	4013      	ands	r3, r2
 8005342:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	f003 0203 	and.w	r2, r3, #3
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	005b      	lsls	r3, r3, #1
 8005350:	fa02 f303 	lsl.w	r3, r2, r3
 8005354:	69ba      	ldr	r2, [r7, #24]
 8005356:	4313      	orrs	r3, r2
 8005358:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	69ba      	ldr	r2, [r7, #24]
 800535e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005368:	2b00      	cmp	r3, #0
 800536a:	f000 80b4 	beq.w	80054d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800536e:	2300      	movs	r3, #0
 8005370:	60fb      	str	r3, [r7, #12]
 8005372:	4b60      	ldr	r3, [pc, #384]	; (80054f4 <HAL_GPIO_Init+0x30c>)
 8005374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005376:	4a5f      	ldr	r2, [pc, #380]	; (80054f4 <HAL_GPIO_Init+0x30c>)
 8005378:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800537c:	6453      	str	r3, [r2, #68]	; 0x44
 800537e:	4b5d      	ldr	r3, [pc, #372]	; (80054f4 <HAL_GPIO_Init+0x30c>)
 8005380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005382:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005386:	60fb      	str	r3, [r7, #12]
 8005388:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800538a:	4a5b      	ldr	r2, [pc, #364]	; (80054f8 <HAL_GPIO_Init+0x310>)
 800538c:	69fb      	ldr	r3, [r7, #28]
 800538e:	089b      	lsrs	r3, r3, #2
 8005390:	3302      	adds	r3, #2
 8005392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005396:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	f003 0303 	and.w	r3, r3, #3
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	220f      	movs	r2, #15
 80053a2:	fa02 f303 	lsl.w	r3, r2, r3
 80053a6:	43db      	mvns	r3, r3
 80053a8:	69ba      	ldr	r2, [r7, #24]
 80053aa:	4013      	ands	r3, r2
 80053ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a52      	ldr	r2, [pc, #328]	; (80054fc <HAL_GPIO_Init+0x314>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d02b      	beq.n	800540e <HAL_GPIO_Init+0x226>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a51      	ldr	r2, [pc, #324]	; (8005500 <HAL_GPIO_Init+0x318>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d025      	beq.n	800540a <HAL_GPIO_Init+0x222>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a50      	ldr	r2, [pc, #320]	; (8005504 <HAL_GPIO_Init+0x31c>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d01f      	beq.n	8005406 <HAL_GPIO_Init+0x21e>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a4f      	ldr	r2, [pc, #316]	; (8005508 <HAL_GPIO_Init+0x320>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d019      	beq.n	8005402 <HAL_GPIO_Init+0x21a>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a4e      	ldr	r2, [pc, #312]	; (800550c <HAL_GPIO_Init+0x324>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d013      	beq.n	80053fe <HAL_GPIO_Init+0x216>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a4d      	ldr	r2, [pc, #308]	; (8005510 <HAL_GPIO_Init+0x328>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d00d      	beq.n	80053fa <HAL_GPIO_Init+0x212>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a4c      	ldr	r2, [pc, #304]	; (8005514 <HAL_GPIO_Init+0x32c>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d007      	beq.n	80053f6 <HAL_GPIO_Init+0x20e>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a4b      	ldr	r2, [pc, #300]	; (8005518 <HAL_GPIO_Init+0x330>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d101      	bne.n	80053f2 <HAL_GPIO_Init+0x20a>
 80053ee:	2307      	movs	r3, #7
 80053f0:	e00e      	b.n	8005410 <HAL_GPIO_Init+0x228>
 80053f2:	2308      	movs	r3, #8
 80053f4:	e00c      	b.n	8005410 <HAL_GPIO_Init+0x228>
 80053f6:	2306      	movs	r3, #6
 80053f8:	e00a      	b.n	8005410 <HAL_GPIO_Init+0x228>
 80053fa:	2305      	movs	r3, #5
 80053fc:	e008      	b.n	8005410 <HAL_GPIO_Init+0x228>
 80053fe:	2304      	movs	r3, #4
 8005400:	e006      	b.n	8005410 <HAL_GPIO_Init+0x228>
 8005402:	2303      	movs	r3, #3
 8005404:	e004      	b.n	8005410 <HAL_GPIO_Init+0x228>
 8005406:	2302      	movs	r3, #2
 8005408:	e002      	b.n	8005410 <HAL_GPIO_Init+0x228>
 800540a:	2301      	movs	r3, #1
 800540c:	e000      	b.n	8005410 <HAL_GPIO_Init+0x228>
 800540e:	2300      	movs	r3, #0
 8005410:	69fa      	ldr	r2, [r7, #28]
 8005412:	f002 0203 	and.w	r2, r2, #3
 8005416:	0092      	lsls	r2, r2, #2
 8005418:	4093      	lsls	r3, r2
 800541a:	69ba      	ldr	r2, [r7, #24]
 800541c:	4313      	orrs	r3, r2
 800541e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005420:	4935      	ldr	r1, [pc, #212]	; (80054f8 <HAL_GPIO_Init+0x310>)
 8005422:	69fb      	ldr	r3, [r7, #28]
 8005424:	089b      	lsrs	r3, r3, #2
 8005426:	3302      	adds	r3, #2
 8005428:	69ba      	ldr	r2, [r7, #24]
 800542a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800542e:	4b3b      	ldr	r3, [pc, #236]	; (800551c <HAL_GPIO_Init+0x334>)
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	43db      	mvns	r3, r3
 8005438:	69ba      	ldr	r2, [r7, #24]
 800543a:	4013      	ands	r3, r2
 800543c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005446:	2b00      	cmp	r3, #0
 8005448:	d003      	beq.n	8005452 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800544a:	69ba      	ldr	r2, [r7, #24]
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	4313      	orrs	r3, r2
 8005450:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005452:	4a32      	ldr	r2, [pc, #200]	; (800551c <HAL_GPIO_Init+0x334>)
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005458:	4b30      	ldr	r3, [pc, #192]	; (800551c <HAL_GPIO_Init+0x334>)
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	43db      	mvns	r3, r3
 8005462:	69ba      	ldr	r2, [r7, #24]
 8005464:	4013      	ands	r3, r2
 8005466:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d003      	beq.n	800547c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005474:	69ba      	ldr	r2, [r7, #24]
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	4313      	orrs	r3, r2
 800547a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800547c:	4a27      	ldr	r2, [pc, #156]	; (800551c <HAL_GPIO_Init+0x334>)
 800547e:	69bb      	ldr	r3, [r7, #24]
 8005480:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005482:	4b26      	ldr	r3, [pc, #152]	; (800551c <HAL_GPIO_Init+0x334>)
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	43db      	mvns	r3, r3
 800548c:	69ba      	ldr	r2, [r7, #24]
 800548e:	4013      	ands	r3, r2
 8005490:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800549a:	2b00      	cmp	r3, #0
 800549c:	d003      	beq.n	80054a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800549e:	69ba      	ldr	r2, [r7, #24]
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	4313      	orrs	r3, r2
 80054a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80054a6:	4a1d      	ldr	r2, [pc, #116]	; (800551c <HAL_GPIO_Init+0x334>)
 80054a8:	69bb      	ldr	r3, [r7, #24]
 80054aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80054ac:	4b1b      	ldr	r3, [pc, #108]	; (800551c <HAL_GPIO_Init+0x334>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	43db      	mvns	r3, r3
 80054b6:	69ba      	ldr	r2, [r7, #24]
 80054b8:	4013      	ands	r3, r2
 80054ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d003      	beq.n	80054d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80054c8:	69ba      	ldr	r2, [r7, #24]
 80054ca:	693b      	ldr	r3, [r7, #16]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80054d0:	4a12      	ldr	r2, [pc, #72]	; (800551c <HAL_GPIO_Init+0x334>)
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	3301      	adds	r3, #1
 80054da:	61fb      	str	r3, [r7, #28]
 80054dc:	69fb      	ldr	r3, [r7, #28]
 80054de:	2b0f      	cmp	r3, #15
 80054e0:	f67f ae90 	bls.w	8005204 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80054e4:	bf00      	nop
 80054e6:	bf00      	nop
 80054e8:	3724      	adds	r7, #36	; 0x24
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	40023800 	.word	0x40023800
 80054f8:	40013800 	.word	0x40013800
 80054fc:	40020000 	.word	0x40020000
 8005500:	40020400 	.word	0x40020400
 8005504:	40020800 	.word	0x40020800
 8005508:	40020c00 	.word	0x40020c00
 800550c:	40021000 	.word	0x40021000
 8005510:	40021400 	.word	0x40021400
 8005514:	40021800 	.word	0x40021800
 8005518:	40021c00 	.word	0x40021c00
 800551c:	40013c00 	.word	0x40013c00

08005520 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
 8005528:	460b      	mov	r3, r1
 800552a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	691a      	ldr	r2, [r3, #16]
 8005530:	887b      	ldrh	r3, [r7, #2]
 8005532:	4013      	ands	r3, r2
 8005534:	2b00      	cmp	r3, #0
 8005536:	d002      	beq.n	800553e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005538:	2301      	movs	r3, #1
 800553a:	73fb      	strb	r3, [r7, #15]
 800553c:	e001      	b.n	8005542 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800553e:	2300      	movs	r3, #0
 8005540:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005542:	7bfb      	ldrb	r3, [r7, #15]
}
 8005544:	4618      	mov	r0, r3
 8005546:	3714      	adds	r7, #20
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	460b      	mov	r3, r1
 800555a:	807b      	strh	r3, [r7, #2]
 800555c:	4613      	mov	r3, r2
 800555e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005560:	787b      	ldrb	r3, [r7, #1]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d003      	beq.n	800556e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005566:	887a      	ldrh	r2, [r7, #2]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800556c:	e003      	b.n	8005576 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800556e:	887b      	ldrh	r3, [r7, #2]
 8005570:	041a      	lsls	r2, r3, #16
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	619a      	str	r2, [r3, #24]
}
 8005576:	bf00      	nop
 8005578:	370c      	adds	r7, #12
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
	...

08005584 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d101      	bne.n	8005596 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e12b      	b.n	80057ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800559c:	b2db      	uxtb	r3, r3
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d106      	bne.n	80055b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f7fe f9e2 	bl	8003974 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2224      	movs	r2, #36	; 0x24
 80055b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681a      	ldr	r2, [r3, #0]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	f022 0201 	bic.w	r2, r2, #1
 80055c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681a      	ldr	r2, [r3, #0]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80055e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80055e8:	f002 fe86 	bl	80082f8 <HAL_RCC_GetPCLK1Freq>
 80055ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	4a81      	ldr	r2, [pc, #516]	; (80057f8 <HAL_I2C_Init+0x274>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d807      	bhi.n	8005608 <HAL_I2C_Init+0x84>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	4a80      	ldr	r2, [pc, #512]	; (80057fc <HAL_I2C_Init+0x278>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	bf94      	ite	ls
 8005600:	2301      	movls	r3, #1
 8005602:	2300      	movhi	r3, #0
 8005604:	b2db      	uxtb	r3, r3
 8005606:	e006      	b.n	8005616 <HAL_I2C_Init+0x92>
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	4a7d      	ldr	r2, [pc, #500]	; (8005800 <HAL_I2C_Init+0x27c>)
 800560c:	4293      	cmp	r3, r2
 800560e:	bf94      	ite	ls
 8005610:	2301      	movls	r3, #1
 8005612:	2300      	movhi	r3, #0
 8005614:	b2db      	uxtb	r3, r3
 8005616:	2b00      	cmp	r3, #0
 8005618:	d001      	beq.n	800561e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e0e7      	b.n	80057ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	4a78      	ldr	r2, [pc, #480]	; (8005804 <HAL_I2C_Init+0x280>)
 8005622:	fba2 2303 	umull	r2, r3, r2, r3
 8005626:	0c9b      	lsrs	r3, r3, #18
 8005628:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	685b      	ldr	r3, [r3, #4]
 8005630:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	68ba      	ldr	r2, [r7, #8]
 800563a:	430a      	orrs	r2, r1
 800563c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	6a1b      	ldr	r3, [r3, #32]
 8005644:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	4a6a      	ldr	r2, [pc, #424]	; (80057f8 <HAL_I2C_Init+0x274>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d802      	bhi.n	8005658 <HAL_I2C_Init+0xd4>
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	3301      	adds	r3, #1
 8005656:	e009      	b.n	800566c <HAL_I2C_Init+0xe8>
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800565e:	fb02 f303 	mul.w	r3, r2, r3
 8005662:	4a69      	ldr	r2, [pc, #420]	; (8005808 <HAL_I2C_Init+0x284>)
 8005664:	fba2 2303 	umull	r2, r3, r2, r3
 8005668:	099b      	lsrs	r3, r3, #6
 800566a:	3301      	adds	r3, #1
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	6812      	ldr	r2, [r2, #0]
 8005670:	430b      	orrs	r3, r1
 8005672:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	69db      	ldr	r3, [r3, #28]
 800567a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800567e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	495c      	ldr	r1, [pc, #368]	; (80057f8 <HAL_I2C_Init+0x274>)
 8005688:	428b      	cmp	r3, r1
 800568a:	d819      	bhi.n	80056c0 <HAL_I2C_Init+0x13c>
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	1e59      	subs	r1, r3, #1
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	005b      	lsls	r3, r3, #1
 8005696:	fbb1 f3f3 	udiv	r3, r1, r3
 800569a:	1c59      	adds	r1, r3, #1
 800569c:	f640 73fc 	movw	r3, #4092	; 0xffc
 80056a0:	400b      	ands	r3, r1
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d00a      	beq.n	80056bc <HAL_I2C_Init+0x138>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	1e59      	subs	r1, r3, #1
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	005b      	lsls	r3, r3, #1
 80056b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80056b4:	3301      	adds	r3, #1
 80056b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056ba:	e051      	b.n	8005760 <HAL_I2C_Init+0x1dc>
 80056bc:	2304      	movs	r3, #4
 80056be:	e04f      	b.n	8005760 <HAL_I2C_Init+0x1dc>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d111      	bne.n	80056ec <HAL_I2C_Init+0x168>
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	1e58      	subs	r0, r3, #1
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6859      	ldr	r1, [r3, #4]
 80056d0:	460b      	mov	r3, r1
 80056d2:	005b      	lsls	r3, r3, #1
 80056d4:	440b      	add	r3, r1
 80056d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80056da:	3301      	adds	r3, #1
 80056dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	bf0c      	ite	eq
 80056e4:	2301      	moveq	r3, #1
 80056e6:	2300      	movne	r3, #0
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	e012      	b.n	8005712 <HAL_I2C_Init+0x18e>
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	1e58      	subs	r0, r3, #1
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6859      	ldr	r1, [r3, #4]
 80056f4:	460b      	mov	r3, r1
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	440b      	add	r3, r1
 80056fa:	0099      	lsls	r1, r3, #2
 80056fc:	440b      	add	r3, r1
 80056fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005702:	3301      	adds	r3, #1
 8005704:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005708:	2b00      	cmp	r3, #0
 800570a:	bf0c      	ite	eq
 800570c:	2301      	moveq	r3, #1
 800570e:	2300      	movne	r3, #0
 8005710:	b2db      	uxtb	r3, r3
 8005712:	2b00      	cmp	r3, #0
 8005714:	d001      	beq.n	800571a <HAL_I2C_Init+0x196>
 8005716:	2301      	movs	r3, #1
 8005718:	e022      	b.n	8005760 <HAL_I2C_Init+0x1dc>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d10e      	bne.n	8005740 <HAL_I2C_Init+0x1bc>
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	1e58      	subs	r0, r3, #1
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6859      	ldr	r1, [r3, #4]
 800572a:	460b      	mov	r3, r1
 800572c:	005b      	lsls	r3, r3, #1
 800572e:	440b      	add	r3, r1
 8005730:	fbb0 f3f3 	udiv	r3, r0, r3
 8005734:	3301      	adds	r3, #1
 8005736:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800573a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800573e:	e00f      	b.n	8005760 <HAL_I2C_Init+0x1dc>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	1e58      	subs	r0, r3, #1
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6859      	ldr	r1, [r3, #4]
 8005748:	460b      	mov	r3, r1
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	440b      	add	r3, r1
 800574e:	0099      	lsls	r1, r3, #2
 8005750:	440b      	add	r3, r1
 8005752:	fbb0 f3f3 	udiv	r3, r0, r3
 8005756:	3301      	adds	r3, #1
 8005758:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800575c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005760:	6879      	ldr	r1, [r7, #4]
 8005762:	6809      	ldr	r1, [r1, #0]
 8005764:	4313      	orrs	r3, r2
 8005766:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	69da      	ldr	r2, [r3, #28]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a1b      	ldr	r3, [r3, #32]
 800577a:	431a      	orrs	r2, r3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	430a      	orrs	r2, r1
 8005782:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800578e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	6911      	ldr	r1, [r2, #16]
 8005796:	687a      	ldr	r2, [r7, #4]
 8005798:	68d2      	ldr	r2, [r2, #12]
 800579a:	4311      	orrs	r1, r2
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	6812      	ldr	r2, [r2, #0]
 80057a0:	430b      	orrs	r3, r1
 80057a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	695a      	ldr	r2, [r3, #20]
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	699b      	ldr	r3, [r3, #24]
 80057b6:	431a      	orrs	r2, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	430a      	orrs	r2, r1
 80057be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f042 0201 	orr.w	r2, r2, #1
 80057ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2220      	movs	r2, #32
 80057da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3710      	adds	r7, #16
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	000186a0 	.word	0x000186a0
 80057fc:	001e847f 	.word	0x001e847f
 8005800:	003d08ff 	.word	0x003d08ff
 8005804:	431bde83 	.word	0x431bde83
 8005808:	10624dd3 	.word	0x10624dd3

0800580c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b088      	sub	sp, #32
 8005810:	af02      	add	r7, sp, #8
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	607a      	str	r2, [r7, #4]
 8005816:	461a      	mov	r2, r3
 8005818:	460b      	mov	r3, r1
 800581a:	817b      	strh	r3, [r7, #10]
 800581c:	4613      	mov	r3, r2
 800581e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005820:	f7fe fbbc 	bl	8003f9c <HAL_GetTick>
 8005824:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2b20      	cmp	r3, #32
 8005830:	f040 80e0 	bne.w	80059f4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	9300      	str	r3, [sp, #0]
 8005838:	2319      	movs	r3, #25
 800583a:	2201      	movs	r2, #1
 800583c:	4970      	ldr	r1, [pc, #448]	; (8005a00 <HAL_I2C_Master_Transmit+0x1f4>)
 800583e:	68f8      	ldr	r0, [r7, #12]
 8005840:	f000 fc64 	bl	800610c <I2C_WaitOnFlagUntilTimeout>
 8005844:	4603      	mov	r3, r0
 8005846:	2b00      	cmp	r3, #0
 8005848:	d001      	beq.n	800584e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800584a:	2302      	movs	r3, #2
 800584c:	e0d3      	b.n	80059f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005854:	2b01      	cmp	r3, #1
 8005856:	d101      	bne.n	800585c <HAL_I2C_Master_Transmit+0x50>
 8005858:	2302      	movs	r3, #2
 800585a:	e0cc      	b.n	80059f6 <HAL_I2C_Master_Transmit+0x1ea>
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 0301 	and.w	r3, r3, #1
 800586e:	2b01      	cmp	r3, #1
 8005870:	d007      	beq.n	8005882 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f042 0201 	orr.w	r2, r2, #1
 8005880:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005890:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2221      	movs	r2, #33	; 0x21
 8005896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2210      	movs	r2, #16
 800589e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2200      	movs	r2, #0
 80058a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	893a      	ldrh	r2, [r7, #8]
 80058b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058b8:	b29a      	uxth	r2, r3
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	4a50      	ldr	r2, [pc, #320]	; (8005a04 <HAL_I2C_Master_Transmit+0x1f8>)
 80058c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80058c4:	8979      	ldrh	r1, [r7, #10]
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	6a3a      	ldr	r2, [r7, #32]
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	f000 face 	bl	8005e6c <I2C_MasterRequestWrite>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d001      	beq.n	80058da <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e08d      	b.n	80059f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058da:	2300      	movs	r3, #0
 80058dc:	613b      	str	r3, [r7, #16]
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	695b      	ldr	r3, [r3, #20]
 80058e4:	613b      	str	r3, [r7, #16]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	699b      	ldr	r3, [r3, #24]
 80058ec:	613b      	str	r3, [r7, #16]
 80058ee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80058f0:	e066      	b.n	80059c0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058f2:	697a      	ldr	r2, [r7, #20]
 80058f4:	6a39      	ldr	r1, [r7, #32]
 80058f6:	68f8      	ldr	r0, [r7, #12]
 80058f8:	f000 fd22 	bl	8006340 <I2C_WaitOnTXEFlagUntilTimeout>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00d      	beq.n	800591e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005906:	2b04      	cmp	r3, #4
 8005908:	d107      	bne.n	800591a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681a      	ldr	r2, [r3, #0]
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005918:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e06b      	b.n	80059f6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005922:	781a      	ldrb	r2, [r3, #0]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592e:	1c5a      	adds	r2, r3, #1
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005938:	b29b      	uxth	r3, r3
 800593a:	3b01      	subs	r3, #1
 800593c:	b29a      	uxth	r2, r3
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005946:	3b01      	subs	r3, #1
 8005948:	b29a      	uxth	r2, r3
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	695b      	ldr	r3, [r3, #20]
 8005954:	f003 0304 	and.w	r3, r3, #4
 8005958:	2b04      	cmp	r3, #4
 800595a:	d11b      	bne.n	8005994 <HAL_I2C_Master_Transmit+0x188>
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005960:	2b00      	cmp	r3, #0
 8005962:	d017      	beq.n	8005994 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005968:	781a      	ldrb	r2, [r3, #0]
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005974:	1c5a      	adds	r2, r3, #1
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800597e:	b29b      	uxth	r3, r3
 8005980:	3b01      	subs	r3, #1
 8005982:	b29a      	uxth	r2, r3
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800598c:	3b01      	subs	r3, #1
 800598e:	b29a      	uxth	r2, r3
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005994:	697a      	ldr	r2, [r7, #20]
 8005996:	6a39      	ldr	r1, [r7, #32]
 8005998:	68f8      	ldr	r0, [r7, #12]
 800599a:	f000 fd19 	bl	80063d0 <I2C_WaitOnBTFFlagUntilTimeout>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00d      	beq.n	80059c0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a8:	2b04      	cmp	r3, #4
 80059aa:	d107      	bne.n	80059bc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059ba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e01a      	b.n	80059f6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d194      	bne.n	80058f2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2220      	movs	r2, #32
 80059dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80059f0:	2300      	movs	r3, #0
 80059f2:	e000      	b.n	80059f6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80059f4:	2302      	movs	r3, #2
  }
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3718      	adds	r7, #24
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	00100002 	.word	0x00100002
 8005a04:	ffff0000 	.word	0xffff0000

08005a08 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b08c      	sub	sp, #48	; 0x30
 8005a0c:	af02      	add	r7, sp, #8
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	607a      	str	r2, [r7, #4]
 8005a12:	461a      	mov	r2, r3
 8005a14:	460b      	mov	r3, r1
 8005a16:	817b      	strh	r3, [r7, #10]
 8005a18:	4613      	mov	r3, r2
 8005a1a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005a1c:	f7fe fabe 	bl	8003f9c <HAL_GetTick>
 8005a20:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	2b20      	cmp	r3, #32
 8005a2c:	f040 8217 	bne.w	8005e5e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a32:	9300      	str	r3, [sp, #0]
 8005a34:	2319      	movs	r3, #25
 8005a36:	2201      	movs	r2, #1
 8005a38:	497c      	ldr	r1, [pc, #496]	; (8005c2c <HAL_I2C_Master_Receive+0x224>)
 8005a3a:	68f8      	ldr	r0, [r7, #12]
 8005a3c:	f000 fb66 	bl	800610c <I2C_WaitOnFlagUntilTimeout>
 8005a40:	4603      	mov	r3, r0
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d001      	beq.n	8005a4a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005a46:	2302      	movs	r3, #2
 8005a48:	e20a      	b.n	8005e60 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d101      	bne.n	8005a58 <HAL_I2C_Master_Receive+0x50>
 8005a54:	2302      	movs	r3, #2
 8005a56:	e203      	b.n	8005e60 <HAL_I2C_Master_Receive+0x458>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f003 0301 	and.w	r3, r3, #1
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d007      	beq.n	8005a7e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f042 0201 	orr.w	r2, r2, #1
 8005a7c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a8c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2222      	movs	r2, #34	; 0x22
 8005a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	2210      	movs	r2, #16
 8005a9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	893a      	ldrh	r2, [r7, #8]
 8005aae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ab4:	b29a      	uxth	r2, r3
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	4a5c      	ldr	r2, [pc, #368]	; (8005c30 <HAL_I2C_Master_Receive+0x228>)
 8005abe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005ac0:	8979      	ldrh	r1, [r7, #10]
 8005ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ac6:	68f8      	ldr	r0, [r7, #12]
 8005ac8:	f000 fa52 	bl	8005f70 <I2C_MasterRequestRead>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d001      	beq.n	8005ad6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e1c4      	b.n	8005e60 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d113      	bne.n	8005b06 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ade:	2300      	movs	r3, #0
 8005ae0:	623b      	str	r3, [r7, #32]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	695b      	ldr	r3, [r3, #20]
 8005ae8:	623b      	str	r3, [r7, #32]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	699b      	ldr	r3, [r3, #24]
 8005af0:	623b      	str	r3, [r7, #32]
 8005af2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b02:	601a      	str	r2, [r3, #0]
 8005b04:	e198      	b.n	8005e38 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d11b      	bne.n	8005b46 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b1e:	2300      	movs	r3, #0
 8005b20:	61fb      	str	r3, [r7, #28]
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	695b      	ldr	r3, [r3, #20]
 8005b28:	61fb      	str	r3, [r7, #28]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	699b      	ldr	r3, [r3, #24]
 8005b30:	61fb      	str	r3, [r7, #28]
 8005b32:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	681a      	ldr	r2, [r3, #0]
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b42:	601a      	str	r2, [r3, #0]
 8005b44:	e178      	b.n	8005e38 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b4a:	2b02      	cmp	r3, #2
 8005b4c:	d11b      	bne.n	8005b86 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681a      	ldr	r2, [r3, #0]
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b5c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b6c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b6e:	2300      	movs	r3, #0
 8005b70:	61bb      	str	r3, [r7, #24]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	695b      	ldr	r3, [r3, #20]
 8005b78:	61bb      	str	r3, [r7, #24]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	699b      	ldr	r3, [r3, #24]
 8005b80:	61bb      	str	r3, [r7, #24]
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	e158      	b.n	8005e38 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b96:	2300      	movs	r3, #0
 8005b98:	617b      	str	r3, [r7, #20]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	695b      	ldr	r3, [r3, #20]
 8005ba0:	617b      	str	r3, [r7, #20]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	699b      	ldr	r3, [r3, #24]
 8005ba8:	617b      	str	r3, [r7, #20]
 8005baa:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005bac:	e144      	b.n	8005e38 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bb2:	2b03      	cmp	r3, #3
 8005bb4:	f200 80f1 	bhi.w	8005d9a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d123      	bne.n	8005c08 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bc2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005bc4:	68f8      	ldr	r0, [r7, #12]
 8005bc6:	f000 fc4b 	bl	8006460 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d001      	beq.n	8005bd4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e145      	b.n	8005e60 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	691a      	ldr	r2, [r3, #16]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bde:	b2d2      	uxtb	r2, r2
 8005be0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be6:	1c5a      	adds	r2, r3, #1
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bf0:	3b01      	subs	r3, #1
 8005bf2:	b29a      	uxth	r2, r3
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	3b01      	subs	r3, #1
 8005c00:	b29a      	uxth	r2, r3
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005c06:	e117      	b.n	8005e38 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c0c:	2b02      	cmp	r3, #2
 8005c0e:	d14e      	bne.n	8005cae <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c12:	9300      	str	r3, [sp, #0]
 8005c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c16:	2200      	movs	r2, #0
 8005c18:	4906      	ldr	r1, [pc, #24]	; (8005c34 <HAL_I2C_Master_Receive+0x22c>)
 8005c1a:	68f8      	ldr	r0, [r7, #12]
 8005c1c:	f000 fa76 	bl	800610c <I2C_WaitOnFlagUntilTimeout>
 8005c20:	4603      	mov	r3, r0
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d008      	beq.n	8005c38 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e11a      	b.n	8005e60 <HAL_I2C_Master_Receive+0x458>
 8005c2a:	bf00      	nop
 8005c2c:	00100002 	.word	0x00100002
 8005c30:	ffff0000 	.word	0xffff0000
 8005c34:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c46:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	691a      	ldr	r2, [r3, #16]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c52:	b2d2      	uxtb	r2, r2
 8005c54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c5a:	1c5a      	adds	r2, r3, #1
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c64:	3b01      	subs	r3, #1
 8005c66:	b29a      	uxth	r2, r3
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c70:	b29b      	uxth	r3, r3
 8005c72:	3b01      	subs	r3, #1
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	691a      	ldr	r2, [r3, #16]
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c84:	b2d2      	uxtb	r2, r2
 8005c86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8c:	1c5a      	adds	r2, r3, #1
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c96:	3b01      	subs	r3, #1
 8005c98:	b29a      	uxth	r2, r3
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ca2:	b29b      	uxth	r3, r3
 8005ca4:	3b01      	subs	r3, #1
 8005ca6:	b29a      	uxth	r2, r3
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005cac:	e0c4      	b.n	8005e38 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb0:	9300      	str	r3, [sp, #0]
 8005cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	496c      	ldr	r1, [pc, #432]	; (8005e68 <HAL_I2C_Master_Receive+0x460>)
 8005cb8:	68f8      	ldr	r0, [r7, #12]
 8005cba:	f000 fa27 	bl	800610c <I2C_WaitOnFlagUntilTimeout>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d001      	beq.n	8005cc8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	e0cb      	b.n	8005e60 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681a      	ldr	r2, [r3, #0]
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cd6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	691a      	ldr	r2, [r3, #16]
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ce2:	b2d2      	uxtb	r2, r2
 8005ce4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cea:	1c5a      	adds	r2, r3, #1
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	3b01      	subs	r3, #1
 8005d04:	b29a      	uxth	r2, r3
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d0c:	9300      	str	r3, [sp, #0]
 8005d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d10:	2200      	movs	r2, #0
 8005d12:	4955      	ldr	r1, [pc, #340]	; (8005e68 <HAL_I2C_Master_Receive+0x460>)
 8005d14:	68f8      	ldr	r0, [r7, #12]
 8005d16:	f000 f9f9 	bl	800610c <I2C_WaitOnFlagUntilTimeout>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d001      	beq.n	8005d24 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e09d      	b.n	8005e60 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	691a      	ldr	r2, [r3, #16]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d3e:	b2d2      	uxtb	r2, r2
 8005d40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d46:	1c5a      	adds	r2, r3, #1
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d50:	3b01      	subs	r3, #1
 8005d52:	b29a      	uxth	r2, r3
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d5c:	b29b      	uxth	r3, r3
 8005d5e:	3b01      	subs	r3, #1
 8005d60:	b29a      	uxth	r2, r3
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	691a      	ldr	r2, [r3, #16]
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d70:	b2d2      	uxtb	r2, r2
 8005d72:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d78:	1c5a      	adds	r2, r3, #1
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d82:	3b01      	subs	r3, #1
 8005d84:	b29a      	uxth	r2, r3
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	3b01      	subs	r3, #1
 8005d92:	b29a      	uxth	r2, r3
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005d98:	e04e      	b.n	8005e38 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d9c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005d9e:	68f8      	ldr	r0, [r7, #12]
 8005da0:	f000 fb5e 	bl	8006460 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005da4:	4603      	mov	r3, r0
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d001      	beq.n	8005dae <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005daa:	2301      	movs	r3, #1
 8005dac:	e058      	b.n	8005e60 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	691a      	ldr	r2, [r3, #16]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db8:	b2d2      	uxtb	r2, r2
 8005dba:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc0:	1c5a      	adds	r2, r3, #1
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	b29a      	uxth	r2, r3
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dd6:	b29b      	uxth	r3, r3
 8005dd8:	3b01      	subs	r3, #1
 8005dda:	b29a      	uxth	r2, r3
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	695b      	ldr	r3, [r3, #20]
 8005de6:	f003 0304 	and.w	r3, r3, #4
 8005dea:	2b04      	cmp	r3, #4
 8005dec:	d124      	bne.n	8005e38 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005df2:	2b03      	cmp	r3, #3
 8005df4:	d107      	bne.n	8005e06 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e04:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	691a      	ldr	r2, [r3, #16]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e10:	b2d2      	uxtb	r2, r2
 8005e12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e18:	1c5a      	adds	r2, r3, #1
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e22:	3b01      	subs	r3, #1
 8005e24:	b29a      	uxth	r2, r3
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	3b01      	subs	r3, #1
 8005e32:	b29a      	uxth	r2, r3
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	f47f aeb6 	bne.w	8005bae <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	2220      	movs	r2, #32
 8005e46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	e000      	b.n	8005e60 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005e5e:	2302      	movs	r3, #2
  }
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3728      	adds	r7, #40	; 0x28
 8005e64:	46bd      	mov	sp, r7
 8005e66:	bd80      	pop	{r7, pc}
 8005e68:	00010004 	.word	0x00010004

08005e6c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b088      	sub	sp, #32
 8005e70:	af02      	add	r7, sp, #8
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	607a      	str	r2, [r7, #4]
 8005e76:	603b      	str	r3, [r7, #0]
 8005e78:	460b      	mov	r3, r1
 8005e7a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e80:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005e82:	697b      	ldr	r3, [r7, #20]
 8005e84:	2b08      	cmp	r3, #8
 8005e86:	d006      	beq.n	8005e96 <I2C_MasterRequestWrite+0x2a>
 8005e88:	697b      	ldr	r3, [r7, #20]
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d003      	beq.n	8005e96 <I2C_MasterRequestWrite+0x2a>
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005e94:	d108      	bne.n	8005ea8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ea4:	601a      	str	r2, [r3, #0]
 8005ea6:	e00b      	b.n	8005ec0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eac:	2b12      	cmp	r3, #18
 8005eae:	d107      	bne.n	8005ec0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ebe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	9300      	str	r3, [sp, #0]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ecc:	68f8      	ldr	r0, [r7, #12]
 8005ece:	f000 f91d 	bl	800610c <I2C_WaitOnFlagUntilTimeout>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d00d      	beq.n	8005ef4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ee2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ee6:	d103      	bne.n	8005ef0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005eee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	e035      	b.n	8005f60 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	691b      	ldr	r3, [r3, #16]
 8005ef8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005efc:	d108      	bne.n	8005f10 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005efe:	897b      	ldrh	r3, [r7, #10]
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	461a      	mov	r2, r3
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005f0c:	611a      	str	r2, [r3, #16]
 8005f0e:	e01b      	b.n	8005f48 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005f10:	897b      	ldrh	r3, [r7, #10]
 8005f12:	11db      	asrs	r3, r3, #7
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	f003 0306 	and.w	r3, r3, #6
 8005f1a:	b2db      	uxtb	r3, r3
 8005f1c:	f063 030f 	orn	r3, r3, #15
 8005f20:	b2da      	uxtb	r2, r3
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	490e      	ldr	r1, [pc, #56]	; (8005f68 <I2C_MasterRequestWrite+0xfc>)
 8005f2e:	68f8      	ldr	r0, [r7, #12]
 8005f30:	f000 f966 	bl	8006200 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f34:	4603      	mov	r3, r0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d001      	beq.n	8005f3e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e010      	b.n	8005f60 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005f3e:	897b      	ldrh	r3, [r7, #10]
 8005f40:	b2da      	uxtb	r2, r3
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	4907      	ldr	r1, [pc, #28]	; (8005f6c <I2C_MasterRequestWrite+0x100>)
 8005f4e:	68f8      	ldr	r0, [r7, #12]
 8005f50:	f000 f956 	bl	8006200 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005f54:	4603      	mov	r3, r0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d001      	beq.n	8005f5e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005f5a:	2301      	movs	r3, #1
 8005f5c:	e000      	b.n	8005f60 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005f5e:	2300      	movs	r3, #0
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3718      	adds	r7, #24
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}
 8005f68:	00010008 	.word	0x00010008
 8005f6c:	00010002 	.word	0x00010002

08005f70 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b088      	sub	sp, #32
 8005f74:	af02      	add	r7, sp, #8
 8005f76:	60f8      	str	r0, [r7, #12]
 8005f78:	607a      	str	r2, [r7, #4]
 8005f7a:	603b      	str	r3, [r7, #0]
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f84:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005f94:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	2b08      	cmp	r3, #8
 8005f9a:	d006      	beq.n	8005faa <I2C_MasterRequestRead+0x3a>
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d003      	beq.n	8005faa <I2C_MasterRequestRead+0x3a>
 8005fa2:	697b      	ldr	r3, [r7, #20]
 8005fa4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005fa8:	d108      	bne.n	8005fbc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fb8:	601a      	str	r2, [r3, #0]
 8005fba:	e00b      	b.n	8005fd4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc0:	2b11      	cmp	r3, #17
 8005fc2:	d107      	bne.n	8005fd4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fd2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	9300      	str	r3, [sp, #0]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005fe0:	68f8      	ldr	r0, [r7, #12]
 8005fe2:	f000 f893 	bl	800610c <I2C_WaitOnFlagUntilTimeout>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d00d      	beq.n	8006008 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ff6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ffa:	d103      	bne.n	8006004 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006002:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006004:	2303      	movs	r3, #3
 8006006:	e079      	b.n	80060fc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006010:	d108      	bne.n	8006024 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006012:	897b      	ldrh	r3, [r7, #10]
 8006014:	b2db      	uxtb	r3, r3
 8006016:	f043 0301 	orr.w	r3, r3, #1
 800601a:	b2da      	uxtb	r2, r3
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	611a      	str	r2, [r3, #16]
 8006022:	e05f      	b.n	80060e4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006024:	897b      	ldrh	r3, [r7, #10]
 8006026:	11db      	asrs	r3, r3, #7
 8006028:	b2db      	uxtb	r3, r3
 800602a:	f003 0306 	and.w	r3, r3, #6
 800602e:	b2db      	uxtb	r3, r3
 8006030:	f063 030f 	orn	r3, r3, #15
 8006034:	b2da      	uxtb	r2, r3
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	4930      	ldr	r1, [pc, #192]	; (8006104 <I2C_MasterRequestRead+0x194>)
 8006042:	68f8      	ldr	r0, [r7, #12]
 8006044:	f000 f8dc 	bl	8006200 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006048:	4603      	mov	r3, r0
 800604a:	2b00      	cmp	r3, #0
 800604c:	d001      	beq.n	8006052 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800604e:	2301      	movs	r3, #1
 8006050:	e054      	b.n	80060fc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006052:	897b      	ldrh	r3, [r7, #10]
 8006054:	b2da      	uxtb	r2, r3
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	687a      	ldr	r2, [r7, #4]
 8006060:	4929      	ldr	r1, [pc, #164]	; (8006108 <I2C_MasterRequestRead+0x198>)
 8006062:	68f8      	ldr	r0, [r7, #12]
 8006064:	f000 f8cc 	bl	8006200 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d001      	beq.n	8006072 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e044      	b.n	80060fc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006072:	2300      	movs	r3, #0
 8006074:	613b      	str	r3, [r7, #16]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	695b      	ldr	r3, [r3, #20]
 800607c:	613b      	str	r3, [r7, #16]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	699b      	ldr	r3, [r3, #24]
 8006084:	613b      	str	r3, [r7, #16]
 8006086:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006096:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	9300      	str	r3, [sp, #0]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80060a4:	68f8      	ldr	r0, [r7, #12]
 80060a6:	f000 f831 	bl	800610c <I2C_WaitOnFlagUntilTimeout>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d00d      	beq.n	80060cc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060be:	d103      	bne.n	80060c8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060c6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80060c8:	2303      	movs	r3, #3
 80060ca:	e017      	b.n	80060fc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80060cc:	897b      	ldrh	r3, [r7, #10]
 80060ce:	11db      	asrs	r3, r3, #7
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	f003 0306 	and.w	r3, r3, #6
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	f063 030e 	orn	r3, r3, #14
 80060dc:	b2da      	uxtb	r2, r3
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	4907      	ldr	r1, [pc, #28]	; (8006108 <I2C_MasterRequestRead+0x198>)
 80060ea:	68f8      	ldr	r0, [r7, #12]
 80060ec:	f000 f888 	bl	8006200 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d001      	beq.n	80060fa <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80060f6:	2301      	movs	r3, #1
 80060f8:	e000      	b.n	80060fc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80060fa:	2300      	movs	r3, #0
}
 80060fc:	4618      	mov	r0, r3
 80060fe:	3718      	adds	r7, #24
 8006100:	46bd      	mov	sp, r7
 8006102:	bd80      	pop	{r7, pc}
 8006104:	00010008 	.word	0x00010008
 8006108:	00010002 	.word	0x00010002

0800610c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b084      	sub	sp, #16
 8006110:	af00      	add	r7, sp, #0
 8006112:	60f8      	str	r0, [r7, #12]
 8006114:	60b9      	str	r1, [r7, #8]
 8006116:	603b      	str	r3, [r7, #0]
 8006118:	4613      	mov	r3, r2
 800611a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800611c:	e048      	b.n	80061b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006124:	d044      	beq.n	80061b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006126:	f7fd ff39 	bl	8003f9c <HAL_GetTick>
 800612a:	4602      	mov	r2, r0
 800612c:	69bb      	ldr	r3, [r7, #24]
 800612e:	1ad3      	subs	r3, r2, r3
 8006130:	683a      	ldr	r2, [r7, #0]
 8006132:	429a      	cmp	r2, r3
 8006134:	d302      	bcc.n	800613c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d139      	bne.n	80061b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	0c1b      	lsrs	r3, r3, #16
 8006140:	b2db      	uxtb	r3, r3
 8006142:	2b01      	cmp	r3, #1
 8006144:	d10d      	bne.n	8006162 <I2C_WaitOnFlagUntilTimeout+0x56>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	695b      	ldr	r3, [r3, #20]
 800614c:	43da      	mvns	r2, r3
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	4013      	ands	r3, r2
 8006152:	b29b      	uxth	r3, r3
 8006154:	2b00      	cmp	r3, #0
 8006156:	bf0c      	ite	eq
 8006158:	2301      	moveq	r3, #1
 800615a:	2300      	movne	r3, #0
 800615c:	b2db      	uxtb	r3, r3
 800615e:	461a      	mov	r2, r3
 8006160:	e00c      	b.n	800617c <I2C_WaitOnFlagUntilTimeout+0x70>
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	699b      	ldr	r3, [r3, #24]
 8006168:	43da      	mvns	r2, r3
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	4013      	ands	r3, r2
 800616e:	b29b      	uxth	r3, r3
 8006170:	2b00      	cmp	r3, #0
 8006172:	bf0c      	ite	eq
 8006174:	2301      	moveq	r3, #1
 8006176:	2300      	movne	r3, #0
 8006178:	b2db      	uxtb	r3, r3
 800617a:	461a      	mov	r2, r3
 800617c:	79fb      	ldrb	r3, [r7, #7]
 800617e:	429a      	cmp	r2, r3
 8006180:	d116      	bne.n	80061b0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2220      	movs	r2, #32
 800618c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2200      	movs	r2, #0
 8006194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800619c:	f043 0220 	orr.w	r2, r3, #32
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2200      	movs	r2, #0
 80061a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80061ac:	2301      	movs	r3, #1
 80061ae:	e023      	b.n	80061f8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	0c1b      	lsrs	r3, r3, #16
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d10d      	bne.n	80061d6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	695b      	ldr	r3, [r3, #20]
 80061c0:	43da      	mvns	r2, r3
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	4013      	ands	r3, r2
 80061c6:	b29b      	uxth	r3, r3
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	bf0c      	ite	eq
 80061cc:	2301      	moveq	r3, #1
 80061ce:	2300      	movne	r3, #0
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	461a      	mov	r2, r3
 80061d4:	e00c      	b.n	80061f0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	699b      	ldr	r3, [r3, #24]
 80061dc:	43da      	mvns	r2, r3
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	4013      	ands	r3, r2
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	bf0c      	ite	eq
 80061e8:	2301      	moveq	r3, #1
 80061ea:	2300      	movne	r3, #0
 80061ec:	b2db      	uxtb	r3, r3
 80061ee:	461a      	mov	r2, r3
 80061f0:	79fb      	ldrb	r3, [r7, #7]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d093      	beq.n	800611e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061f6:	2300      	movs	r3, #0
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	3710      	adds	r7, #16
 80061fc:	46bd      	mov	sp, r7
 80061fe:	bd80      	pop	{r7, pc}

08006200 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b084      	sub	sp, #16
 8006204:	af00      	add	r7, sp, #0
 8006206:	60f8      	str	r0, [r7, #12]
 8006208:	60b9      	str	r1, [r7, #8]
 800620a:	607a      	str	r2, [r7, #4]
 800620c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800620e:	e071      	b.n	80062f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	695b      	ldr	r3, [r3, #20]
 8006216:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800621a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800621e:	d123      	bne.n	8006268 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800622e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006238:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2200      	movs	r2, #0
 800623e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2220      	movs	r2, #32
 8006244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2200      	movs	r2, #0
 800624c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006254:	f043 0204 	orr.w	r2, r3, #4
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2200      	movs	r2, #0
 8006260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	e067      	b.n	8006338 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800626e:	d041      	beq.n	80062f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006270:	f7fd fe94 	bl	8003f9c <HAL_GetTick>
 8006274:	4602      	mov	r2, r0
 8006276:	683b      	ldr	r3, [r7, #0]
 8006278:	1ad3      	subs	r3, r2, r3
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	429a      	cmp	r2, r3
 800627e:	d302      	bcc.n	8006286 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d136      	bne.n	80062f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	0c1b      	lsrs	r3, r3, #16
 800628a:	b2db      	uxtb	r3, r3
 800628c:	2b01      	cmp	r3, #1
 800628e:	d10c      	bne.n	80062aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	695b      	ldr	r3, [r3, #20]
 8006296:	43da      	mvns	r2, r3
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	4013      	ands	r3, r2
 800629c:	b29b      	uxth	r3, r3
 800629e:	2b00      	cmp	r3, #0
 80062a0:	bf14      	ite	ne
 80062a2:	2301      	movne	r3, #1
 80062a4:	2300      	moveq	r3, #0
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	e00b      	b.n	80062c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	699b      	ldr	r3, [r3, #24]
 80062b0:	43da      	mvns	r2, r3
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	4013      	ands	r3, r2
 80062b6:	b29b      	uxth	r3, r3
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	bf14      	ite	ne
 80062bc:	2301      	movne	r3, #1
 80062be:	2300      	moveq	r3, #0
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d016      	beq.n	80062f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2200      	movs	r2, #0
 80062ca:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	2220      	movs	r2, #32
 80062d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2200      	movs	r2, #0
 80062d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062e0:	f043 0220 	orr.w	r2, r3, #32
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2200      	movs	r2, #0
 80062ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e021      	b.n	8006338 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	0c1b      	lsrs	r3, r3, #16
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	2b01      	cmp	r3, #1
 80062fc:	d10c      	bne.n	8006318 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	695b      	ldr	r3, [r3, #20]
 8006304:	43da      	mvns	r2, r3
 8006306:	68bb      	ldr	r3, [r7, #8]
 8006308:	4013      	ands	r3, r2
 800630a:	b29b      	uxth	r3, r3
 800630c:	2b00      	cmp	r3, #0
 800630e:	bf14      	ite	ne
 8006310:	2301      	movne	r3, #1
 8006312:	2300      	moveq	r3, #0
 8006314:	b2db      	uxtb	r3, r3
 8006316:	e00b      	b.n	8006330 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	699b      	ldr	r3, [r3, #24]
 800631e:	43da      	mvns	r2, r3
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	4013      	ands	r3, r2
 8006324:	b29b      	uxth	r3, r3
 8006326:	2b00      	cmp	r3, #0
 8006328:	bf14      	ite	ne
 800632a:	2301      	movne	r3, #1
 800632c:	2300      	moveq	r3, #0
 800632e:	b2db      	uxtb	r3, r3
 8006330:	2b00      	cmp	r3, #0
 8006332:	f47f af6d 	bne.w	8006210 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006336:	2300      	movs	r3, #0
}
 8006338:	4618      	mov	r0, r3
 800633a:	3710      	adds	r7, #16
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}

08006340 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b084      	sub	sp, #16
 8006344:	af00      	add	r7, sp, #0
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800634c:	e034      	b.n	80063b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800634e:	68f8      	ldr	r0, [r7, #12]
 8006350:	f000 f8e3 	bl	800651a <I2C_IsAcknowledgeFailed>
 8006354:	4603      	mov	r3, r0
 8006356:	2b00      	cmp	r3, #0
 8006358:	d001      	beq.n	800635e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e034      	b.n	80063c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006364:	d028      	beq.n	80063b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006366:	f7fd fe19 	bl	8003f9c <HAL_GetTick>
 800636a:	4602      	mov	r2, r0
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	1ad3      	subs	r3, r2, r3
 8006370:	68ba      	ldr	r2, [r7, #8]
 8006372:	429a      	cmp	r2, r3
 8006374:	d302      	bcc.n	800637c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d11d      	bne.n	80063b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	695b      	ldr	r3, [r3, #20]
 8006382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006386:	2b80      	cmp	r3, #128	; 0x80
 8006388:	d016      	beq.n	80063b8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	2200      	movs	r2, #0
 800638e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2220      	movs	r2, #32
 8006394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2200      	movs	r2, #0
 800639c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063a4:	f043 0220 	orr.w	r2, r3, #32
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	e007      	b.n	80063c8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	695b      	ldr	r3, [r3, #20]
 80063be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063c2:	2b80      	cmp	r3, #128	; 0x80
 80063c4:	d1c3      	bne.n	800634e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3710      	adds	r7, #16
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}

080063d0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b084      	sub	sp, #16
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	60f8      	str	r0, [r7, #12]
 80063d8:	60b9      	str	r1, [r7, #8]
 80063da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80063dc:	e034      	b.n	8006448 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80063de:	68f8      	ldr	r0, [r7, #12]
 80063e0:	f000 f89b 	bl	800651a <I2C_IsAcknowledgeFailed>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d001      	beq.n	80063ee <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	e034      	b.n	8006458 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063f4:	d028      	beq.n	8006448 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063f6:	f7fd fdd1 	bl	8003f9c <HAL_GetTick>
 80063fa:	4602      	mov	r2, r0
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	1ad3      	subs	r3, r2, r3
 8006400:	68ba      	ldr	r2, [r7, #8]
 8006402:	429a      	cmp	r2, r3
 8006404:	d302      	bcc.n	800640c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d11d      	bne.n	8006448 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	695b      	ldr	r3, [r3, #20]
 8006412:	f003 0304 	and.w	r3, r3, #4
 8006416:	2b04      	cmp	r3, #4
 8006418:	d016      	beq.n	8006448 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2200      	movs	r2, #0
 800641e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2220      	movs	r2, #32
 8006424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2200      	movs	r2, #0
 800642c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006434:	f043 0220 	orr.w	r2, r3, #32
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2200      	movs	r2, #0
 8006440:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	e007      	b.n	8006458 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	695b      	ldr	r3, [r3, #20]
 800644e:	f003 0304 	and.w	r3, r3, #4
 8006452:	2b04      	cmp	r3, #4
 8006454:	d1c3      	bne.n	80063de <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	3710      	adds	r7, #16
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800646c:	e049      	b.n	8006502 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	695b      	ldr	r3, [r3, #20]
 8006474:	f003 0310 	and.w	r3, r3, #16
 8006478:	2b10      	cmp	r3, #16
 800647a:	d119      	bne.n	80064b0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f06f 0210 	mvn.w	r2, #16
 8006484:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2200      	movs	r2, #0
 800648a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2220      	movs	r2, #32
 8006490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2200      	movs	r2, #0
 8006498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	2200      	movs	r2, #0
 80064a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80064ac:	2301      	movs	r3, #1
 80064ae:	e030      	b.n	8006512 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064b0:	f7fd fd74 	bl	8003f9c <HAL_GetTick>
 80064b4:	4602      	mov	r2, r0
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	1ad3      	subs	r3, r2, r3
 80064ba:	68ba      	ldr	r2, [r7, #8]
 80064bc:	429a      	cmp	r2, r3
 80064be:	d302      	bcc.n	80064c6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d11d      	bne.n	8006502 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	695b      	ldr	r3, [r3, #20]
 80064cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064d0:	2b40      	cmp	r3, #64	; 0x40
 80064d2:	d016      	beq.n	8006502 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2200      	movs	r2, #0
 80064d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2220      	movs	r2, #32
 80064de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ee:	f043 0220 	orr.w	r2, r3, #32
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2200      	movs	r2, #0
 80064fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	e007      	b.n	8006512 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	695b      	ldr	r3, [r3, #20]
 8006508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800650c:	2b40      	cmp	r3, #64	; 0x40
 800650e:	d1ae      	bne.n	800646e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	3710      	adds	r7, #16
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}

0800651a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800651a:	b480      	push	{r7}
 800651c:	b083      	sub	sp, #12
 800651e:	af00      	add	r7, sp, #0
 8006520:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	695b      	ldr	r3, [r3, #20]
 8006528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800652c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006530:	d11b      	bne.n	800656a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800653a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	2200      	movs	r2, #0
 8006540:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2220      	movs	r2, #32
 8006546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2200      	movs	r2, #0
 800654e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006556:	f043 0204 	orr.w	r2, r3, #4
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006566:	2301      	movs	r3, #1
 8006568:	e000      	b.n	800656c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800656a:	2300      	movs	r3, #0
}
 800656c:	4618      	mov	r0, r3
 800656e:	370c      	adds	r7, #12
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr

08006578 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b086      	sub	sp, #24
 800657c:	af02      	add	r7, sp, #8
 800657e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d101      	bne.n	800658a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006586:	2301      	movs	r3, #1
 8006588:	e101      	b.n	800678e <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8006596:	b2db      	uxtb	r3, r3
 8006598:	2b00      	cmp	r3, #0
 800659a:	d106      	bne.n	80065aa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2200      	movs	r2, #0
 80065a0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f009 f82d 	bl	800f604 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2203      	movs	r2, #3
 80065ae:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80065b8:	d102      	bne.n	80065c0 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	4618      	mov	r0, r3
 80065c6:	f004 f9c0 	bl	800a94a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6818      	ldr	r0, [r3, #0]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	7c1a      	ldrb	r2, [r3, #16]
 80065d2:	f88d 2000 	strb.w	r2, [sp]
 80065d6:	3304      	adds	r3, #4
 80065d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80065da:	f004 f89f 	bl	800a71c <USB_CoreInit>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d005      	beq.n	80065f0 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2202      	movs	r2, #2
 80065e8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80065ec:	2301      	movs	r3, #1
 80065ee:	e0ce      	b.n	800678e <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	2100      	movs	r1, #0
 80065f6:	4618      	mov	r0, r3
 80065f8:	f004 f9b8 	bl	800a96c <USB_SetCurrentMode>
 80065fc:	4603      	mov	r3, r0
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d005      	beq.n	800660e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2202      	movs	r2, #2
 8006606:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e0bf      	b.n	800678e <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800660e:	2300      	movs	r3, #0
 8006610:	73fb      	strb	r3, [r7, #15]
 8006612:	e04a      	b.n	80066aa <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8006614:	7bfa      	ldrb	r2, [r7, #15]
 8006616:	6879      	ldr	r1, [r7, #4]
 8006618:	4613      	mov	r3, r2
 800661a:	00db      	lsls	r3, r3, #3
 800661c:	4413      	add	r3, r2
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	440b      	add	r3, r1
 8006622:	3315      	adds	r3, #21
 8006624:	2201      	movs	r2, #1
 8006626:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8006628:	7bfa      	ldrb	r2, [r7, #15]
 800662a:	6879      	ldr	r1, [r7, #4]
 800662c:	4613      	mov	r3, r2
 800662e:	00db      	lsls	r3, r3, #3
 8006630:	4413      	add	r3, r2
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	440b      	add	r3, r1
 8006636:	3314      	adds	r3, #20
 8006638:	7bfa      	ldrb	r2, [r7, #15]
 800663a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800663c:	7bfa      	ldrb	r2, [r7, #15]
 800663e:	7bfb      	ldrb	r3, [r7, #15]
 8006640:	b298      	uxth	r0, r3
 8006642:	6879      	ldr	r1, [r7, #4]
 8006644:	4613      	mov	r3, r2
 8006646:	00db      	lsls	r3, r3, #3
 8006648:	4413      	add	r3, r2
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	440b      	add	r3, r1
 800664e:	332e      	adds	r3, #46	; 0x2e
 8006650:	4602      	mov	r2, r0
 8006652:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006654:	7bfa      	ldrb	r2, [r7, #15]
 8006656:	6879      	ldr	r1, [r7, #4]
 8006658:	4613      	mov	r3, r2
 800665a:	00db      	lsls	r3, r3, #3
 800665c:	4413      	add	r3, r2
 800665e:	009b      	lsls	r3, r3, #2
 8006660:	440b      	add	r3, r1
 8006662:	3318      	adds	r3, #24
 8006664:	2200      	movs	r2, #0
 8006666:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006668:	7bfa      	ldrb	r2, [r7, #15]
 800666a:	6879      	ldr	r1, [r7, #4]
 800666c:	4613      	mov	r3, r2
 800666e:	00db      	lsls	r3, r3, #3
 8006670:	4413      	add	r3, r2
 8006672:	009b      	lsls	r3, r3, #2
 8006674:	440b      	add	r3, r1
 8006676:	331c      	adds	r3, #28
 8006678:	2200      	movs	r2, #0
 800667a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800667c:	7bfa      	ldrb	r2, [r7, #15]
 800667e:	6879      	ldr	r1, [r7, #4]
 8006680:	4613      	mov	r3, r2
 8006682:	00db      	lsls	r3, r3, #3
 8006684:	4413      	add	r3, r2
 8006686:	009b      	lsls	r3, r3, #2
 8006688:	440b      	add	r3, r1
 800668a:	3320      	adds	r3, #32
 800668c:	2200      	movs	r2, #0
 800668e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006690:	7bfa      	ldrb	r2, [r7, #15]
 8006692:	6879      	ldr	r1, [r7, #4]
 8006694:	4613      	mov	r3, r2
 8006696:	00db      	lsls	r3, r3, #3
 8006698:	4413      	add	r3, r2
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	440b      	add	r3, r1
 800669e:	3324      	adds	r3, #36	; 0x24
 80066a0:	2200      	movs	r2, #0
 80066a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80066a4:	7bfb      	ldrb	r3, [r7, #15]
 80066a6:	3301      	adds	r3, #1
 80066a8:	73fb      	strb	r3, [r7, #15]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	791b      	ldrb	r3, [r3, #4]
 80066ae:	7bfa      	ldrb	r2, [r7, #15]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d3af      	bcc.n	8006614 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80066b4:	2300      	movs	r3, #0
 80066b6:	73fb      	strb	r3, [r7, #15]
 80066b8:	e044      	b.n	8006744 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80066ba:	7bfa      	ldrb	r2, [r7, #15]
 80066bc:	6879      	ldr	r1, [r7, #4]
 80066be:	4613      	mov	r3, r2
 80066c0:	00db      	lsls	r3, r3, #3
 80066c2:	4413      	add	r3, r2
 80066c4:	009b      	lsls	r3, r3, #2
 80066c6:	440b      	add	r3, r1
 80066c8:	f203 2355 	addw	r3, r3, #597	; 0x255
 80066cc:	2200      	movs	r2, #0
 80066ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80066d0:	7bfa      	ldrb	r2, [r7, #15]
 80066d2:	6879      	ldr	r1, [r7, #4]
 80066d4:	4613      	mov	r3, r2
 80066d6:	00db      	lsls	r3, r3, #3
 80066d8:	4413      	add	r3, r2
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	440b      	add	r3, r1
 80066de:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80066e2:	7bfa      	ldrb	r2, [r7, #15]
 80066e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80066e6:	7bfa      	ldrb	r2, [r7, #15]
 80066e8:	6879      	ldr	r1, [r7, #4]
 80066ea:	4613      	mov	r3, r2
 80066ec:	00db      	lsls	r3, r3, #3
 80066ee:	4413      	add	r3, r2
 80066f0:	009b      	lsls	r3, r3, #2
 80066f2:	440b      	add	r3, r1
 80066f4:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80066f8:	2200      	movs	r2, #0
 80066fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80066fc:	7bfa      	ldrb	r2, [r7, #15]
 80066fe:	6879      	ldr	r1, [r7, #4]
 8006700:	4613      	mov	r3, r2
 8006702:	00db      	lsls	r3, r3, #3
 8006704:	4413      	add	r3, r2
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	440b      	add	r3, r1
 800670a:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800670e:	2200      	movs	r2, #0
 8006710:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006712:	7bfa      	ldrb	r2, [r7, #15]
 8006714:	6879      	ldr	r1, [r7, #4]
 8006716:	4613      	mov	r3, r2
 8006718:	00db      	lsls	r3, r3, #3
 800671a:	4413      	add	r3, r2
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	440b      	add	r3, r1
 8006720:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8006724:	2200      	movs	r2, #0
 8006726:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8006728:	7bfa      	ldrb	r2, [r7, #15]
 800672a:	6879      	ldr	r1, [r7, #4]
 800672c:	4613      	mov	r3, r2
 800672e:	00db      	lsls	r3, r3, #3
 8006730:	4413      	add	r3, r2
 8006732:	009b      	lsls	r3, r3, #2
 8006734:	440b      	add	r3, r1
 8006736:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800673a:	2200      	movs	r2, #0
 800673c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800673e:	7bfb      	ldrb	r3, [r7, #15]
 8006740:	3301      	adds	r3, #1
 8006742:	73fb      	strb	r3, [r7, #15]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	791b      	ldrb	r3, [r3, #4]
 8006748:	7bfa      	ldrb	r2, [r7, #15]
 800674a:	429a      	cmp	r2, r3
 800674c:	d3b5      	bcc.n	80066ba <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6818      	ldr	r0, [r3, #0]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	7c1a      	ldrb	r2, [r3, #16]
 8006756:	f88d 2000 	strb.w	r2, [sp]
 800675a:	3304      	adds	r3, #4
 800675c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800675e:	f004 f951 	bl	800aa04 <USB_DevInit>
 8006762:	4603      	mov	r3, r0
 8006764:	2b00      	cmp	r3, #0
 8006766:	d005      	beq.n	8006774 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2202      	movs	r2, #2
 800676c:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8006770:	2301      	movs	r3, #1
 8006772:	e00c      	b.n	800678e <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2201      	movs	r2, #1
 800677e:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4618      	mov	r0, r3
 8006788:	f005 f995 	bl	800bab6 <USB_DevDisconnect>

  return HAL_OK;
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	3710      	adds	r7, #16
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}

08006796 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006796:	b580      	push	{r7, lr}
 8006798:	b084      	sub	sp, #16
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d101      	bne.n	80067b2 <HAL_PCD_Start+0x1c>
 80067ae:	2302      	movs	r3, #2
 80067b0:	e022      	b.n	80067f8 <HAL_PCD_Start+0x62>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2201      	movs	r2, #1
 80067b6:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	68db      	ldr	r3, [r3, #12]
 80067be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d009      	beq.n	80067da <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80067ca:	2b01      	cmp	r3, #1
 80067cc:	d105      	bne.n	80067da <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4618      	mov	r0, r3
 80067e0:	f004 f8a2 	bl	800a928 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	4618      	mov	r0, r3
 80067ea:	f005 f943 	bl	800ba74 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80067f6:	2300      	movs	r3, #0
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3710      	adds	r7, #16
 80067fc:	46bd      	mov	sp, r7
 80067fe:	bd80      	pop	{r7, pc}

08006800 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8006800:	b590      	push	{r4, r7, lr}
 8006802:	b08d      	sub	sp, #52	; 0x34
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800680e:	6a3b      	ldr	r3, [r7, #32]
 8006810:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4618      	mov	r0, r3
 8006818:	f005 fa01 	bl	800bc1e <USB_GetMode>
 800681c:	4603      	mov	r3, r0
 800681e:	2b00      	cmp	r3, #0
 8006820:	f040 848c 	bne.w	800713c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4618      	mov	r0, r3
 800682a:	f005 f965 	bl	800baf8 <USB_ReadInterrupts>
 800682e:	4603      	mov	r3, r0
 8006830:	2b00      	cmp	r3, #0
 8006832:	f000 8482 	beq.w	800713a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006836:	69fb      	ldr	r3, [r7, #28]
 8006838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	0a1b      	lsrs	r3, r3, #8
 8006840:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4618      	mov	r0, r3
 8006850:	f005 f952 	bl	800baf8 <USB_ReadInterrupts>
 8006854:	4603      	mov	r3, r0
 8006856:	f003 0302 	and.w	r3, r3, #2
 800685a:	2b02      	cmp	r3, #2
 800685c:	d107      	bne.n	800686e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	695a      	ldr	r2, [r3, #20]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f002 0202 	and.w	r2, r2, #2
 800686c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4618      	mov	r0, r3
 8006874:	f005 f940 	bl	800baf8 <USB_ReadInterrupts>
 8006878:	4603      	mov	r3, r0
 800687a:	f003 0310 	and.w	r3, r3, #16
 800687e:	2b10      	cmp	r3, #16
 8006880:	d161      	bne.n	8006946 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	699a      	ldr	r2, [r3, #24]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	f022 0210 	bic.w	r2, r2, #16
 8006890:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006892:	6a3b      	ldr	r3, [r7, #32]
 8006894:	6a1b      	ldr	r3, [r3, #32]
 8006896:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	f003 020f 	and.w	r2, r3, #15
 800689e:	4613      	mov	r3, r2
 80068a0:	00db      	lsls	r3, r3, #3
 80068a2:	4413      	add	r3, r2
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	4413      	add	r3, r2
 80068ae:	3304      	adds	r3, #4
 80068b0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80068b2:	69bb      	ldr	r3, [r7, #24]
 80068b4:	0c5b      	lsrs	r3, r3, #17
 80068b6:	f003 030f 	and.w	r3, r3, #15
 80068ba:	2b02      	cmp	r3, #2
 80068bc:	d124      	bne.n	8006908 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80068be:	69ba      	ldr	r2, [r7, #24]
 80068c0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80068c4:	4013      	ands	r3, r2
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d035      	beq.n	8006936 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	091b      	lsrs	r3, r3, #4
 80068d2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80068d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80068d8:	b29b      	uxth	r3, r3
 80068da:	461a      	mov	r2, r3
 80068dc:	6a38      	ldr	r0, [r7, #32]
 80068de:	f004 ff77 	bl	800b7d0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	68da      	ldr	r2, [r3, #12]
 80068e6:	69bb      	ldr	r3, [r7, #24]
 80068e8:	091b      	lsrs	r3, r3, #4
 80068ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80068ee:	441a      	add	r2, r3
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80068f4:	697b      	ldr	r3, [r7, #20]
 80068f6:	695a      	ldr	r2, [r3, #20]
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	091b      	lsrs	r3, r3, #4
 80068fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006900:	441a      	add	r2, r3
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	615a      	str	r2, [r3, #20]
 8006906:	e016      	b.n	8006936 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	0c5b      	lsrs	r3, r3, #17
 800690c:	f003 030f 	and.w	r3, r3, #15
 8006910:	2b06      	cmp	r3, #6
 8006912:	d110      	bne.n	8006936 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800691a:	2208      	movs	r2, #8
 800691c:	4619      	mov	r1, r3
 800691e:	6a38      	ldr	r0, [r7, #32]
 8006920:	f004 ff56 	bl	800b7d0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	695a      	ldr	r2, [r3, #20]
 8006928:	69bb      	ldr	r3, [r7, #24]
 800692a:	091b      	lsrs	r3, r3, #4
 800692c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006930:	441a      	add	r2, r3
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	699a      	ldr	r2, [r3, #24]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f042 0210 	orr.w	r2, r2, #16
 8006944:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4618      	mov	r0, r3
 800694c:	f005 f8d4 	bl	800baf8 <USB_ReadInterrupts>
 8006950:	4603      	mov	r3, r0
 8006952:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006956:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800695a:	f040 80a7 	bne.w	8006aac <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800695e:	2300      	movs	r3, #0
 8006960:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	4618      	mov	r0, r3
 8006968:	f005 f8d9 	bl	800bb1e <USB_ReadDevAllOutEpInterrupt>
 800696c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800696e:	e099      	b.n	8006aa4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006972:	f003 0301 	and.w	r3, r3, #1
 8006976:	2b00      	cmp	r3, #0
 8006978:	f000 808e 	beq.w	8006a98 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006982:	b2d2      	uxtb	r2, r2
 8006984:	4611      	mov	r1, r2
 8006986:	4618      	mov	r0, r3
 8006988:	f005 f8fd 	bl	800bb86 <USB_ReadDevOutEPInterrupt>
 800698c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	f003 0301 	and.w	r3, r3, #1
 8006994:	2b00      	cmp	r3, #0
 8006996:	d00c      	beq.n	80069b2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800699a:	015a      	lsls	r2, r3, #5
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	4413      	add	r3, r2
 80069a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069a4:	461a      	mov	r2, r3
 80069a6:	2301      	movs	r3, #1
 80069a8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80069aa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 fea1 	bl	80076f4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	f003 0308 	and.w	r3, r3, #8
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d00c      	beq.n	80069d6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80069bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069be:	015a      	lsls	r2, r3, #5
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	4413      	add	r3, r2
 80069c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069c8:	461a      	mov	r2, r3
 80069ca:	2308      	movs	r3, #8
 80069cc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80069ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f000 ff77 	bl	80078c4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	f003 0310 	and.w	r3, r3, #16
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d008      	beq.n	80069f2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80069e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e2:	015a      	lsls	r2, r3, #5
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	4413      	add	r3, r2
 80069e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ec:	461a      	mov	r2, r3
 80069ee:	2310      	movs	r3, #16
 80069f0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	f003 0302 	and.w	r3, r3, #2
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d030      	beq.n	8006a5e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80069fc:	6a3b      	ldr	r3, [r7, #32]
 80069fe:	695b      	ldr	r3, [r3, #20]
 8006a00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a04:	2b80      	cmp	r3, #128	; 0x80
 8006a06:	d109      	bne.n	8006a1c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8006a08:	69fb      	ldr	r3, [r7, #28]
 8006a0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a0e:	685b      	ldr	r3, [r3, #4]
 8006a10:	69fa      	ldr	r2, [r7, #28]
 8006a12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006a1a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8006a1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a1e:	4613      	mov	r3, r2
 8006a20:	00db      	lsls	r3, r3, #3
 8006a22:	4413      	add	r3, r2
 8006a24:	009b      	lsls	r3, r3, #2
 8006a26:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	4413      	add	r3, r2
 8006a2e:	3304      	adds	r3, #4
 8006a30:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	78db      	ldrb	r3, [r3, #3]
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d108      	bne.n	8006a4c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	4619      	mov	r1, r3
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f008 fee2 	bl	800f810 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4e:	015a      	lsls	r2, r3, #5
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	4413      	add	r3, r2
 8006a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a58:	461a      	mov	r2, r3
 8006a5a:	2302      	movs	r3, #2
 8006a5c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	f003 0320 	and.w	r3, r3, #32
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d008      	beq.n	8006a7a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6a:	015a      	lsls	r2, r3, #5
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	4413      	add	r3, r2
 8006a70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a74:	461a      	mov	r2, r3
 8006a76:	2320      	movs	r3, #32
 8006a78:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d009      	beq.n	8006a98 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a86:	015a      	lsls	r2, r3, #5
 8006a88:	69fb      	ldr	r3, [r7, #28]
 8006a8a:	4413      	add	r3, r2
 8006a8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a90:	461a      	mov	r2, r3
 8006a92:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006a96:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa0:	085b      	lsrs	r3, r3, #1
 8006aa2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	f47f af62 	bne.w	8006970 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f005 f821 	bl	800baf8 <USB_ReadInterrupts>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006abc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ac0:	f040 80db 	bne.w	8006c7a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f005 f842 	bl	800bb52 <USB_ReadDevAllInEpInterrupt>
 8006ace:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8006ad4:	e0cd      	b.n	8006c72 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8006ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad8:	f003 0301 	and.w	r3, r3, #1
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	f000 80c2 	beq.w	8006c66 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ae8:	b2d2      	uxtb	r2, r2
 8006aea:	4611      	mov	r1, r2
 8006aec:	4618      	mov	r0, r3
 8006aee:	f005 f868 	bl	800bbc2 <USB_ReadDevInEPInterrupt>
 8006af2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	f003 0301 	and.w	r3, r3, #1
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d057      	beq.n	8006bae <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b00:	f003 030f 	and.w	r3, r3, #15
 8006b04:	2201      	movs	r2, #1
 8006b06:	fa02 f303 	lsl.w	r3, r2, r3
 8006b0a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006b0c:	69fb      	ldr	r3, [r7, #28]
 8006b0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	43db      	mvns	r3, r3
 8006b18:	69f9      	ldr	r1, [r7, #28]
 8006b1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006b1e:	4013      	ands	r3, r2
 8006b20:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b24:	015a      	lsls	r2, r3, #5
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	4413      	add	r3, r2
 8006b2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b2e:	461a      	mov	r2, r3
 8006b30:	2301      	movs	r3, #1
 8006b32:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	799b      	ldrb	r3, [r3, #6]
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d132      	bne.n	8006ba2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006b3c:	6879      	ldr	r1, [r7, #4]
 8006b3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b40:	4613      	mov	r3, r2
 8006b42:	00db      	lsls	r3, r3, #3
 8006b44:	4413      	add	r3, r2
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	440b      	add	r3, r1
 8006b4a:	3320      	adds	r3, #32
 8006b4c:	6819      	ldr	r1, [r3, #0]
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b52:	4613      	mov	r3, r2
 8006b54:	00db      	lsls	r3, r3, #3
 8006b56:	4413      	add	r3, r2
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	4403      	add	r3, r0
 8006b5c:	331c      	adds	r3, #28
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4419      	add	r1, r3
 8006b62:	6878      	ldr	r0, [r7, #4]
 8006b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b66:	4613      	mov	r3, r2
 8006b68:	00db      	lsls	r3, r3, #3
 8006b6a:	4413      	add	r3, r2
 8006b6c:	009b      	lsls	r3, r3, #2
 8006b6e:	4403      	add	r3, r0
 8006b70:	3320      	adds	r3, #32
 8006b72:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d113      	bne.n	8006ba2 <HAL_PCD_IRQHandler+0x3a2>
 8006b7a:	6879      	ldr	r1, [r7, #4]
 8006b7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b7e:	4613      	mov	r3, r2
 8006b80:	00db      	lsls	r3, r3, #3
 8006b82:	4413      	add	r3, r2
 8006b84:	009b      	lsls	r3, r3, #2
 8006b86:	440b      	add	r3, r1
 8006b88:	3324      	adds	r3, #36	; 0x24
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d108      	bne.n	8006ba2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6818      	ldr	r0, [r3, #0]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8006b9a:	461a      	mov	r2, r3
 8006b9c:	2101      	movs	r1, #1
 8006b9e:	f005 f86f 	bl	800bc80 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba4:	b2db      	uxtb	r3, r3
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	f008 fdac 	bl	800f706 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	f003 0308 	and.w	r3, r3, #8
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d008      	beq.n	8006bca <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bba:	015a      	lsls	r2, r3, #5
 8006bbc:	69fb      	ldr	r3, [r7, #28]
 8006bbe:	4413      	add	r3, r2
 8006bc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	2308      	movs	r3, #8
 8006bc8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	f003 0310 	and.w	r3, r3, #16
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d008      	beq.n	8006be6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8006bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd6:	015a      	lsls	r2, r3, #5
 8006bd8:	69fb      	ldr	r3, [r7, #28]
 8006bda:	4413      	add	r3, r2
 8006bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006be0:	461a      	mov	r2, r3
 8006be2:	2310      	movs	r3, #16
 8006be4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d008      	beq.n	8006c02 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8006bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf2:	015a      	lsls	r2, r3, #5
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	4413      	add	r3, r2
 8006bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	2340      	movs	r3, #64	; 0x40
 8006c00:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	f003 0302 	and.w	r3, r3, #2
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d023      	beq.n	8006c54 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8006c0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c0e:	6a38      	ldr	r0, [r7, #32]
 8006c10:	f004 f85c 	bl	800accc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c16:	4613      	mov	r3, r2
 8006c18:	00db      	lsls	r3, r3, #3
 8006c1a:	4413      	add	r3, r2
 8006c1c:	009b      	lsls	r3, r3, #2
 8006c1e:	3310      	adds	r3, #16
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	4413      	add	r3, r2
 8006c24:	3304      	adds	r3, #4
 8006c26:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006c28:	697b      	ldr	r3, [r7, #20]
 8006c2a:	78db      	ldrb	r3, [r3, #3]
 8006c2c:	2b01      	cmp	r3, #1
 8006c2e:	d108      	bne.n	8006c42 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	2200      	movs	r2, #0
 8006c34:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	4619      	mov	r1, r3
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	f008 fdf9 	bl	800f834 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c44:	015a      	lsls	r2, r3, #5
 8006c46:	69fb      	ldr	r3, [r7, #28]
 8006c48:	4413      	add	r3, r2
 8006c4a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c4e:	461a      	mov	r2, r3
 8006c50:	2302      	movs	r3, #2
 8006c52:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d003      	beq.n	8006c66 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006c5e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 fcbb 	bl	80075dc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c68:	3301      	adds	r3, #1
 8006c6a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c6e:	085b      	lsrs	r3, r3, #1
 8006c70:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	f47f af2e 	bne.w	8006ad6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f004 ff3a 	bl	800baf8 <USB_ReadInterrupts>
 8006c84:	4603      	mov	r3, r0
 8006c86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c8e:	d122      	bne.n	8006cd6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006c90:	69fb      	ldr	r3, [r7, #28]
 8006c92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	69fa      	ldr	r2, [r7, #28]
 8006c9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c9e:	f023 0301 	bic.w	r3, r3, #1
 8006ca2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	d108      	bne.n	8006cc0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006cb6:	2100      	movs	r1, #0
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	f000 fea1 	bl	8007a00 <HAL_PCDEx_LPM_Callback>
 8006cbe:	e002      	b.n	8006cc6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f008 fd97 	bl	800f7f4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	695a      	ldr	r2, [r3, #20]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006cd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f004 ff0c 	bl	800baf8 <USB_ReadInterrupts>
 8006ce0:	4603      	mov	r3, r0
 8006ce2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ce6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006cea:	d112      	bne.n	8006d12 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006cec:	69fb      	ldr	r3, [r7, #28]
 8006cee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	f003 0301 	and.w	r3, r3, #1
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d102      	bne.n	8006d02 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f008 fd53 	bl	800f7a8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	695a      	ldr	r2, [r3, #20]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006d10:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4618      	mov	r0, r3
 8006d18:	f004 feee 	bl	800baf8 <USB_ReadInterrupts>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d26:	f040 80b7 	bne.w	8006e98 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006d2a:	69fb      	ldr	r3, [r7, #28]
 8006d2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	69fa      	ldr	r2, [r7, #28]
 8006d34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d38:	f023 0301 	bic.w	r3, r3, #1
 8006d3c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2110      	movs	r1, #16
 8006d44:	4618      	mov	r0, r3
 8006d46:	f003 ffc1 	bl	800accc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d4e:	e046      	b.n	8006dde <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d52:	015a      	lsls	r2, r3, #5
 8006d54:	69fb      	ldr	r3, [r7, #28]
 8006d56:	4413      	add	r3, r2
 8006d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d5c:	461a      	mov	r2, r3
 8006d5e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006d62:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d66:	015a      	lsls	r2, r3, #5
 8006d68:	69fb      	ldr	r3, [r7, #28]
 8006d6a:	4413      	add	r3, r2
 8006d6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006d74:	0151      	lsls	r1, r2, #5
 8006d76:	69fa      	ldr	r2, [r7, #28]
 8006d78:	440a      	add	r2, r1
 8006d7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006d82:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d86:	015a      	lsls	r2, r3, #5
 8006d88:	69fb      	ldr	r3, [r7, #28]
 8006d8a:	4413      	add	r3, r2
 8006d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d90:	461a      	mov	r2, r3
 8006d92:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006d96:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d9a:	015a      	lsls	r2, r3, #5
 8006d9c:	69fb      	ldr	r3, [r7, #28]
 8006d9e:	4413      	add	r3, r2
 8006da0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006da8:	0151      	lsls	r1, r2, #5
 8006daa:	69fa      	ldr	r2, [r7, #28]
 8006dac:	440a      	add	r2, r1
 8006dae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006db2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006db6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dba:	015a      	lsls	r2, r3, #5
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	4413      	add	r3, r2
 8006dc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006dc8:	0151      	lsls	r1, r2, #5
 8006dca:	69fa      	ldr	r2, [r7, #28]
 8006dcc:	440a      	add	r2, r1
 8006dce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dd2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006dd6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006dd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dda:	3301      	adds	r3, #1
 8006ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	791b      	ldrb	r3, [r3, #4]
 8006de2:	461a      	mov	r2, r3
 8006de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d3b2      	bcc.n	8006d50 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006dea:	69fb      	ldr	r3, [r7, #28]
 8006dec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006df0:	69db      	ldr	r3, [r3, #28]
 8006df2:	69fa      	ldr	r2, [r7, #28]
 8006df4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006df8:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006dfc:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	7bdb      	ldrb	r3, [r3, #15]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d016      	beq.n	8006e34 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e10:	69fa      	ldr	r2, [r7, #28]
 8006e12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e16:	f043 030b 	orr.w	r3, r3, #11
 8006e1a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006e1e:	69fb      	ldr	r3, [r7, #28]
 8006e20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e26:	69fa      	ldr	r2, [r7, #28]
 8006e28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e2c:	f043 030b 	orr.w	r3, r3, #11
 8006e30:	6453      	str	r3, [r2, #68]	; 0x44
 8006e32:	e015      	b.n	8006e60 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006e34:	69fb      	ldr	r3, [r7, #28]
 8006e36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e3a:	695b      	ldr	r3, [r3, #20]
 8006e3c:	69fa      	ldr	r2, [r7, #28]
 8006e3e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e42:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006e46:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8006e4a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e52:	691b      	ldr	r3, [r3, #16]
 8006e54:	69fa      	ldr	r2, [r7, #28]
 8006e56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e5a:	f043 030b 	orr.w	r3, r3, #11
 8006e5e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006e60:	69fb      	ldr	r3, [r7, #28]
 8006e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	69fa      	ldr	r2, [r7, #28]
 8006e6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e6e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006e72:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	6818      	ldr	r0, [r3, #0]
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006e82:	461a      	mov	r2, r3
 8006e84:	f004 fefc 	bl	800bc80 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	695a      	ldr	r2, [r3, #20]
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006e96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f004 fe2b 	bl	800baf8 <USB_ReadInterrupts>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006ea8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006eac:	d123      	bne.n	8006ef6 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	f004 fec1 	bl	800bc3a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f003 ff7e 	bl	800adbe <USB_GetDevSpeed>
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681c      	ldr	r4, [r3, #0]
 8006ece:	f001 fa07 	bl	80082e0 <HAL_RCC_GetHCLKFreq>
 8006ed2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006ed8:	461a      	mov	r2, r3
 8006eda:	4620      	mov	r0, r4
 8006edc:	f003 fc82 	bl	800a7e4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f008 fc38 	bl	800f756 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	695a      	ldr	r2, [r3, #20]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006ef4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4618      	mov	r0, r3
 8006efc:	f004 fdfc 	bl	800baf8 <USB_ReadInterrupts>
 8006f00:	4603      	mov	r3, r0
 8006f02:	f003 0308 	and.w	r3, r3, #8
 8006f06:	2b08      	cmp	r3, #8
 8006f08:	d10a      	bne.n	8006f20 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f008 fc15 	bl	800f73a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	695a      	ldr	r2, [r3, #20]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f002 0208 	and.w	r2, r2, #8
 8006f1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	4618      	mov	r0, r3
 8006f26:	f004 fde7 	bl	800baf8 <USB_ReadInterrupts>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f30:	2b80      	cmp	r3, #128	; 0x80
 8006f32:	d123      	bne.n	8006f7c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006f34:	6a3b      	ldr	r3, [r7, #32]
 8006f36:	699b      	ldr	r3, [r3, #24]
 8006f38:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006f3c:	6a3b      	ldr	r3, [r7, #32]
 8006f3e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006f40:	2301      	movs	r3, #1
 8006f42:	627b      	str	r3, [r7, #36]	; 0x24
 8006f44:	e014      	b.n	8006f70 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006f46:	6879      	ldr	r1, [r7, #4]
 8006f48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f4a:	4613      	mov	r3, r2
 8006f4c:	00db      	lsls	r3, r3, #3
 8006f4e:	4413      	add	r3, r2
 8006f50:	009b      	lsls	r3, r3, #2
 8006f52:	440b      	add	r3, r1
 8006f54:	f203 2357 	addw	r3, r3, #599	; 0x257
 8006f58:	781b      	ldrb	r3, [r3, #0]
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d105      	bne.n	8006f6a <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	4619      	mov	r1, r3
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f000 fb08 	bl	800757a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6c:	3301      	adds	r3, #1
 8006f6e:	627b      	str	r3, [r7, #36]	; 0x24
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	791b      	ldrb	r3, [r3, #4]
 8006f74:	461a      	mov	r2, r3
 8006f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d3e4      	bcc.n	8006f46 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	4618      	mov	r0, r3
 8006f82:	f004 fdb9 	bl	800baf8 <USB_ReadInterrupts>
 8006f86:	4603      	mov	r3, r0
 8006f88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006f90:	d13c      	bne.n	800700c <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006f92:	2301      	movs	r3, #1
 8006f94:	627b      	str	r3, [r7, #36]	; 0x24
 8006f96:	e02b      	b.n	8006ff0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f9a:	015a      	lsls	r2, r3, #5
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	4413      	add	r3, r2
 8006fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006fa8:	6879      	ldr	r1, [r7, #4]
 8006faa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fac:	4613      	mov	r3, r2
 8006fae:	00db      	lsls	r3, r3, #3
 8006fb0:	4413      	add	r3, r2
 8006fb2:	009b      	lsls	r3, r3, #2
 8006fb4:	440b      	add	r3, r1
 8006fb6:	3318      	adds	r3, #24
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	d115      	bne.n	8006fea <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006fbe:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	da12      	bge.n	8006fea <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006fc4:	6879      	ldr	r1, [r7, #4]
 8006fc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fc8:	4613      	mov	r3, r2
 8006fca:	00db      	lsls	r3, r3, #3
 8006fcc:	4413      	add	r3, r2
 8006fce:	009b      	lsls	r3, r3, #2
 8006fd0:	440b      	add	r3, r1
 8006fd2:	3317      	adds	r3, #23
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006fe0:	b2db      	uxtb	r3, r3
 8006fe2:	4619      	mov	r1, r3
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 fac8 	bl	800757a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fec:	3301      	adds	r3, #1
 8006fee:	627b      	str	r3, [r7, #36]	; 0x24
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	791b      	ldrb	r3, [r3, #4]
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d3cd      	bcc.n	8006f98 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	695a      	ldr	r2, [r3, #20]
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800700a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4618      	mov	r0, r3
 8007012:	f004 fd71 	bl	800baf8 <USB_ReadInterrupts>
 8007016:	4603      	mov	r3, r0
 8007018:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800701c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007020:	d156      	bne.n	80070d0 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8007022:	2301      	movs	r3, #1
 8007024:	627b      	str	r3, [r7, #36]	; 0x24
 8007026:	e045      	b.n	80070b4 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8007028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800702a:	015a      	lsls	r2, r3, #5
 800702c:	69fb      	ldr	r3, [r7, #28]
 800702e:	4413      	add	r3, r2
 8007030:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007038:	6879      	ldr	r1, [r7, #4]
 800703a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800703c:	4613      	mov	r3, r2
 800703e:	00db      	lsls	r3, r3, #3
 8007040:	4413      	add	r3, r2
 8007042:	009b      	lsls	r3, r3, #2
 8007044:	440b      	add	r3, r1
 8007046:	f503 7316 	add.w	r3, r3, #600	; 0x258
 800704a:	781b      	ldrb	r3, [r3, #0]
 800704c:	2b01      	cmp	r3, #1
 800704e:	d12e      	bne.n	80070ae <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007050:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8007052:	2b00      	cmp	r3, #0
 8007054:	da2b      	bge.n	80070ae <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8007056:	69bb      	ldr	r3, [r7, #24]
 8007058:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8007062:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8007066:	429a      	cmp	r2, r3
 8007068:	d121      	bne.n	80070ae <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800706a:	6879      	ldr	r1, [r7, #4]
 800706c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800706e:	4613      	mov	r3, r2
 8007070:	00db      	lsls	r3, r3, #3
 8007072:	4413      	add	r3, r2
 8007074:	009b      	lsls	r3, r3, #2
 8007076:	440b      	add	r3, r1
 8007078:	f203 2357 	addw	r3, r3, #599	; 0x257
 800707c:	2201      	movs	r2, #1
 800707e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8007080:	6a3b      	ldr	r3, [r7, #32]
 8007082:	699b      	ldr	r3, [r3, #24]
 8007084:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007088:	6a3b      	ldr	r3, [r7, #32]
 800708a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800708c:	6a3b      	ldr	r3, [r7, #32]
 800708e:	695b      	ldr	r3, [r3, #20]
 8007090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007094:	2b00      	cmp	r3, #0
 8007096:	d10a      	bne.n	80070ae <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8007098:	69fb      	ldr	r3, [r7, #28]
 800709a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	69fa      	ldr	r2, [r7, #28]
 80070a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80070aa:	6053      	str	r3, [r2, #4]
            break;
 80070ac:	e008      	b.n	80070c0 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80070ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b0:	3301      	adds	r3, #1
 80070b2:	627b      	str	r3, [r7, #36]	; 0x24
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	791b      	ldrb	r3, [r3, #4]
 80070b8:	461a      	mov	r2, r3
 80070ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070bc:	4293      	cmp	r3, r2
 80070be:	d3b3      	bcc.n	8007028 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	695a      	ldr	r2, [r3, #20]
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80070ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	4618      	mov	r0, r3
 80070d6:	f004 fd0f 	bl	800baf8 <USB_ReadInterrupts>
 80070da:	4603      	mov	r3, r0
 80070dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80070e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070e4:	d10a      	bne.n	80070fc <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f008 fbb6 	bl	800f858 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	695a      	ldr	r2, [r3, #20]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80070fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4618      	mov	r0, r3
 8007102:	f004 fcf9 	bl	800baf8 <USB_ReadInterrupts>
 8007106:	4603      	mov	r3, r0
 8007108:	f003 0304 	and.w	r3, r3, #4
 800710c:	2b04      	cmp	r3, #4
 800710e:	d115      	bne.n	800713c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8007118:	69bb      	ldr	r3, [r7, #24]
 800711a:	f003 0304 	and.w	r3, r3, #4
 800711e:	2b00      	cmp	r3, #0
 8007120:	d002      	beq.n	8007128 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f008 fba6 	bl	800f874 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	6859      	ldr	r1, [r3, #4]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	69ba      	ldr	r2, [r7, #24]
 8007134:	430a      	orrs	r2, r1
 8007136:	605a      	str	r2, [r3, #4]
 8007138:	e000      	b.n	800713c <HAL_PCD_IRQHandler+0x93c>
      return;
 800713a:	bf00      	nop
    }
  }
}
 800713c:	3734      	adds	r7, #52	; 0x34
 800713e:	46bd      	mov	sp, r7
 8007140:	bd90      	pop	{r4, r7, pc}

08007142 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8007142:	b580      	push	{r7, lr}
 8007144:	b082      	sub	sp, #8
 8007146:	af00      	add	r7, sp, #0
 8007148:	6078      	str	r0, [r7, #4]
 800714a:	460b      	mov	r3, r1
 800714c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8007154:	2b01      	cmp	r3, #1
 8007156:	d101      	bne.n	800715c <HAL_PCD_SetAddress+0x1a>
 8007158:	2302      	movs	r3, #2
 800715a:	e012      	b.n	8007182 <HAL_PCD_SetAddress+0x40>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2201      	movs	r2, #1
 8007160:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	78fa      	ldrb	r2, [r7, #3]
 8007168:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	78fa      	ldrb	r2, [r7, #3]
 8007170:	4611      	mov	r1, r2
 8007172:	4618      	mov	r0, r3
 8007174:	f004 fc58 	bl	800ba28 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8007180:	2300      	movs	r3, #0
}
 8007182:	4618      	mov	r0, r3
 8007184:	3708      	adds	r7, #8
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}

0800718a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800718a:	b580      	push	{r7, lr}
 800718c:	b084      	sub	sp, #16
 800718e:	af00      	add	r7, sp, #0
 8007190:	6078      	str	r0, [r7, #4]
 8007192:	4608      	mov	r0, r1
 8007194:	4611      	mov	r1, r2
 8007196:	461a      	mov	r2, r3
 8007198:	4603      	mov	r3, r0
 800719a:	70fb      	strb	r3, [r7, #3]
 800719c:	460b      	mov	r3, r1
 800719e:	803b      	strh	r3, [r7, #0]
 80071a0:	4613      	mov	r3, r2
 80071a2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80071a4:	2300      	movs	r3, #0
 80071a6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80071a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	da0f      	bge.n	80071d0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80071b0:	78fb      	ldrb	r3, [r7, #3]
 80071b2:	f003 020f 	and.w	r2, r3, #15
 80071b6:	4613      	mov	r3, r2
 80071b8:	00db      	lsls	r3, r3, #3
 80071ba:	4413      	add	r3, r2
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	3310      	adds	r3, #16
 80071c0:	687a      	ldr	r2, [r7, #4]
 80071c2:	4413      	add	r3, r2
 80071c4:	3304      	adds	r3, #4
 80071c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2201      	movs	r2, #1
 80071cc:	705a      	strb	r2, [r3, #1]
 80071ce:	e00f      	b.n	80071f0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80071d0:	78fb      	ldrb	r3, [r7, #3]
 80071d2:	f003 020f 	and.w	r2, r3, #15
 80071d6:	4613      	mov	r3, r2
 80071d8:	00db      	lsls	r3, r3, #3
 80071da:	4413      	add	r3, r2
 80071dc:	009b      	lsls	r3, r3, #2
 80071de:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	4413      	add	r3, r2
 80071e6:	3304      	adds	r3, #4
 80071e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2200      	movs	r2, #0
 80071ee:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80071f0:	78fb      	ldrb	r3, [r7, #3]
 80071f2:	f003 030f 	and.w	r3, r3, #15
 80071f6:	b2da      	uxtb	r2, r3
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80071fc:	883a      	ldrh	r2, [r7, #0]
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	78ba      	ldrb	r2, [r7, #2]
 8007206:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	785b      	ldrb	r3, [r3, #1]
 800720c:	2b00      	cmp	r3, #0
 800720e:	d004      	beq.n	800721a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	b29a      	uxth	r2, r3
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800721a:	78bb      	ldrb	r3, [r7, #2]
 800721c:	2b02      	cmp	r3, #2
 800721e:	d102      	bne.n	8007226 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	2200      	movs	r2, #0
 8007224:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800722c:	2b01      	cmp	r3, #1
 800722e:	d101      	bne.n	8007234 <HAL_PCD_EP_Open+0xaa>
 8007230:	2302      	movs	r3, #2
 8007232:	e00e      	b.n	8007252 <HAL_PCD_EP_Open+0xc8>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2201      	movs	r2, #1
 8007238:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	68f9      	ldr	r1, [r7, #12]
 8007242:	4618      	mov	r0, r3
 8007244:	f003 fde0 	bl	800ae08 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8007250:	7afb      	ldrb	r3, [r7, #11]
}
 8007252:	4618      	mov	r0, r3
 8007254:	3710      	adds	r7, #16
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}

0800725a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800725a:	b580      	push	{r7, lr}
 800725c:	b084      	sub	sp, #16
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
 8007262:	460b      	mov	r3, r1
 8007264:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8007266:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800726a:	2b00      	cmp	r3, #0
 800726c:	da0f      	bge.n	800728e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800726e:	78fb      	ldrb	r3, [r7, #3]
 8007270:	f003 020f 	and.w	r2, r3, #15
 8007274:	4613      	mov	r3, r2
 8007276:	00db      	lsls	r3, r3, #3
 8007278:	4413      	add	r3, r2
 800727a:	009b      	lsls	r3, r3, #2
 800727c:	3310      	adds	r3, #16
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	4413      	add	r3, r2
 8007282:	3304      	adds	r3, #4
 8007284:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2201      	movs	r2, #1
 800728a:	705a      	strb	r2, [r3, #1]
 800728c:	e00f      	b.n	80072ae <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800728e:	78fb      	ldrb	r3, [r7, #3]
 8007290:	f003 020f 	and.w	r2, r3, #15
 8007294:	4613      	mov	r3, r2
 8007296:	00db      	lsls	r3, r3, #3
 8007298:	4413      	add	r3, r2
 800729a:	009b      	lsls	r3, r3, #2
 800729c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	4413      	add	r3, r2
 80072a4:	3304      	adds	r3, #4
 80072a6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2200      	movs	r2, #0
 80072ac:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80072ae:	78fb      	ldrb	r3, [r7, #3]
 80072b0:	f003 030f 	and.w	r3, r3, #15
 80072b4:	b2da      	uxtb	r2, r3
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d101      	bne.n	80072c8 <HAL_PCD_EP_Close+0x6e>
 80072c4:	2302      	movs	r3, #2
 80072c6:	e00e      	b.n	80072e6 <HAL_PCD_EP_Close+0x8c>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2201      	movs	r2, #1
 80072cc:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	68f9      	ldr	r1, [r7, #12]
 80072d6:	4618      	mov	r0, r3
 80072d8:	f003 fe1e 	bl	800af18 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	2200      	movs	r2, #0
 80072e0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 80072e4:	2300      	movs	r3, #0
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3710      	adds	r7, #16
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}

080072ee <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80072ee:	b580      	push	{r7, lr}
 80072f0:	b086      	sub	sp, #24
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	60f8      	str	r0, [r7, #12]
 80072f6:	607a      	str	r2, [r7, #4]
 80072f8:	603b      	str	r3, [r7, #0]
 80072fa:	460b      	mov	r3, r1
 80072fc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80072fe:	7afb      	ldrb	r3, [r7, #11]
 8007300:	f003 020f 	and.w	r2, r3, #15
 8007304:	4613      	mov	r3, r2
 8007306:	00db      	lsls	r3, r3, #3
 8007308:	4413      	add	r3, r2
 800730a:	009b      	lsls	r3, r3, #2
 800730c:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8007310:	68fa      	ldr	r2, [r7, #12]
 8007312:	4413      	add	r3, r2
 8007314:	3304      	adds	r3, #4
 8007316:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	687a      	ldr	r2, [r7, #4]
 800731c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	683a      	ldr	r2, [r7, #0]
 8007322:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	2200      	movs	r2, #0
 8007328:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	2200      	movs	r2, #0
 800732e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007330:	7afb      	ldrb	r3, [r7, #11]
 8007332:	f003 030f 	and.w	r3, r3, #15
 8007336:	b2da      	uxtb	r2, r3
 8007338:	697b      	ldr	r3, [r7, #20]
 800733a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	799b      	ldrb	r3, [r3, #6]
 8007340:	2b01      	cmp	r3, #1
 8007342:	d102      	bne.n	800734a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	697b      	ldr	r3, [r7, #20]
 8007348:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	6818      	ldr	r0, [r3, #0]
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	799b      	ldrb	r3, [r3, #6]
 8007352:	461a      	mov	r2, r3
 8007354:	6979      	ldr	r1, [r7, #20]
 8007356:	f003 febb 	bl	800b0d0 <USB_EPStartXfer>

  return HAL_OK;
 800735a:	2300      	movs	r3, #0
}
 800735c:	4618      	mov	r0, r3
 800735e:	3718      	adds	r7, #24
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}

08007364 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8007364:	b480      	push	{r7}
 8007366:	b083      	sub	sp, #12
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
 800736c:	460b      	mov	r3, r1
 800736e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8007370:	78fb      	ldrb	r3, [r7, #3]
 8007372:	f003 020f 	and.w	r2, r3, #15
 8007376:	6879      	ldr	r1, [r7, #4]
 8007378:	4613      	mov	r3, r2
 800737a:	00db      	lsls	r3, r3, #3
 800737c:	4413      	add	r3, r2
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	440b      	add	r3, r1
 8007382:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8007386:	681b      	ldr	r3, [r3, #0]
}
 8007388:	4618      	mov	r0, r3
 800738a:	370c      	adds	r7, #12
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr

08007394 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007394:	b580      	push	{r7, lr}
 8007396:	b086      	sub	sp, #24
 8007398:	af00      	add	r7, sp, #0
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	607a      	str	r2, [r7, #4]
 800739e:	603b      	str	r3, [r7, #0]
 80073a0:	460b      	mov	r3, r1
 80073a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80073a4:	7afb      	ldrb	r3, [r7, #11]
 80073a6:	f003 020f 	and.w	r2, r3, #15
 80073aa:	4613      	mov	r3, r2
 80073ac:	00db      	lsls	r3, r3, #3
 80073ae:	4413      	add	r3, r2
 80073b0:	009b      	lsls	r3, r3, #2
 80073b2:	3310      	adds	r3, #16
 80073b4:	68fa      	ldr	r2, [r7, #12]
 80073b6:	4413      	add	r3, r2
 80073b8:	3304      	adds	r3, #4
 80073ba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80073c2:	697b      	ldr	r3, [r7, #20]
 80073c4:	683a      	ldr	r2, [r7, #0]
 80073c6:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	2200      	movs	r2, #0
 80073cc:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	2201      	movs	r2, #1
 80073d2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80073d4:	7afb      	ldrb	r3, [r7, #11]
 80073d6:	f003 030f 	and.w	r3, r3, #15
 80073da:	b2da      	uxtb	r2, r3
 80073dc:	697b      	ldr	r3, [r7, #20]
 80073de:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	799b      	ldrb	r3, [r3, #6]
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d102      	bne.n	80073ee <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	6818      	ldr	r0, [r3, #0]
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	799b      	ldrb	r3, [r3, #6]
 80073f6:	461a      	mov	r2, r3
 80073f8:	6979      	ldr	r1, [r7, #20]
 80073fa:	f003 fe69 	bl	800b0d0 <USB_EPStartXfer>

  return HAL_OK;
 80073fe:	2300      	movs	r3, #0
}
 8007400:	4618      	mov	r0, r3
 8007402:	3718      	adds	r7, #24
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	460b      	mov	r3, r1
 8007412:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007414:	78fb      	ldrb	r3, [r7, #3]
 8007416:	f003 030f 	and.w	r3, r3, #15
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	7912      	ldrb	r2, [r2, #4]
 800741e:	4293      	cmp	r3, r2
 8007420:	d901      	bls.n	8007426 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	e04f      	b.n	80074c6 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007426:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800742a:	2b00      	cmp	r3, #0
 800742c:	da0f      	bge.n	800744e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800742e:	78fb      	ldrb	r3, [r7, #3]
 8007430:	f003 020f 	and.w	r2, r3, #15
 8007434:	4613      	mov	r3, r2
 8007436:	00db      	lsls	r3, r3, #3
 8007438:	4413      	add	r3, r2
 800743a:	009b      	lsls	r3, r3, #2
 800743c:	3310      	adds	r3, #16
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	4413      	add	r3, r2
 8007442:	3304      	adds	r3, #4
 8007444:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2201      	movs	r2, #1
 800744a:	705a      	strb	r2, [r3, #1]
 800744c:	e00d      	b.n	800746a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800744e:	78fa      	ldrb	r2, [r7, #3]
 8007450:	4613      	mov	r3, r2
 8007452:	00db      	lsls	r3, r3, #3
 8007454:	4413      	add	r3, r2
 8007456:	009b      	lsls	r3, r3, #2
 8007458:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800745c:	687a      	ldr	r2, [r7, #4]
 800745e:	4413      	add	r3, r2
 8007460:	3304      	adds	r3, #4
 8007462:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2200      	movs	r2, #0
 8007468:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2201      	movs	r2, #1
 800746e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007470:	78fb      	ldrb	r3, [r7, #3]
 8007472:	f003 030f 	and.w	r3, r3, #15
 8007476:	b2da      	uxtb	r2, r3
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8007482:	2b01      	cmp	r3, #1
 8007484:	d101      	bne.n	800748a <HAL_PCD_EP_SetStall+0x82>
 8007486:	2302      	movs	r3, #2
 8007488:	e01d      	b.n	80074c6 <HAL_PCD_EP_SetStall+0xbe>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2201      	movs	r2, #1
 800748e:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	68f9      	ldr	r1, [r7, #12]
 8007498:	4618      	mov	r0, r3
 800749a:	f004 f9f1 	bl	800b880 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800749e:	78fb      	ldrb	r3, [r7, #3]
 80074a0:	f003 030f 	and.w	r3, r3, #15
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d109      	bne.n	80074bc <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6818      	ldr	r0, [r3, #0]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	7999      	ldrb	r1, [r3, #6]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80074b6:	461a      	mov	r2, r3
 80074b8:	f004 fbe2 	bl	800bc80 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3710      	adds	r7, #16
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}

080074ce <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80074ce:	b580      	push	{r7, lr}
 80074d0:	b084      	sub	sp, #16
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
 80074d6:	460b      	mov	r3, r1
 80074d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80074da:	78fb      	ldrb	r3, [r7, #3]
 80074dc:	f003 030f 	and.w	r3, r3, #15
 80074e0:	687a      	ldr	r2, [r7, #4]
 80074e2:	7912      	ldrb	r2, [r2, #4]
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d901      	bls.n	80074ec <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	e042      	b.n	8007572 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80074ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	da0f      	bge.n	8007514 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80074f4:	78fb      	ldrb	r3, [r7, #3]
 80074f6:	f003 020f 	and.w	r2, r3, #15
 80074fa:	4613      	mov	r3, r2
 80074fc:	00db      	lsls	r3, r3, #3
 80074fe:	4413      	add	r3, r2
 8007500:	009b      	lsls	r3, r3, #2
 8007502:	3310      	adds	r3, #16
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	4413      	add	r3, r2
 8007508:	3304      	adds	r3, #4
 800750a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2201      	movs	r2, #1
 8007510:	705a      	strb	r2, [r3, #1]
 8007512:	e00f      	b.n	8007534 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007514:	78fb      	ldrb	r3, [r7, #3]
 8007516:	f003 020f 	and.w	r2, r3, #15
 800751a:	4613      	mov	r3, r2
 800751c:	00db      	lsls	r3, r3, #3
 800751e:	4413      	add	r3, r2
 8007520:	009b      	lsls	r3, r3, #2
 8007522:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8007526:	687a      	ldr	r2, [r7, #4]
 8007528:	4413      	add	r3, r2
 800752a:	3304      	adds	r3, #4
 800752c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2200      	movs	r2, #0
 8007532:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2200      	movs	r2, #0
 8007538:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800753a:	78fb      	ldrb	r3, [r7, #3]
 800753c:	f003 030f 	and.w	r3, r3, #15
 8007540:	b2da      	uxtb	r2, r3
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800754c:	2b01      	cmp	r3, #1
 800754e:	d101      	bne.n	8007554 <HAL_PCD_EP_ClrStall+0x86>
 8007550:	2302      	movs	r3, #2
 8007552:	e00e      	b.n	8007572 <HAL_PCD_EP_ClrStall+0xa4>
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2201      	movs	r2, #1
 8007558:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	68f9      	ldr	r1, [r7, #12]
 8007562:	4618      	mov	r0, r3
 8007564:	f004 f9fa 	bl	800b95c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	2200      	movs	r2, #0
 800756c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8007570:	2300      	movs	r3, #0
}
 8007572:	4618      	mov	r0, r3
 8007574:	3710      	adds	r7, #16
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}

0800757a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800757a:	b580      	push	{r7, lr}
 800757c:	b084      	sub	sp, #16
 800757e:	af00      	add	r7, sp, #0
 8007580:	6078      	str	r0, [r7, #4]
 8007582:	460b      	mov	r3, r1
 8007584:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007586:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800758a:	2b00      	cmp	r3, #0
 800758c:	da0c      	bge.n	80075a8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800758e:	78fb      	ldrb	r3, [r7, #3]
 8007590:	f003 020f 	and.w	r2, r3, #15
 8007594:	4613      	mov	r3, r2
 8007596:	00db      	lsls	r3, r3, #3
 8007598:	4413      	add	r3, r2
 800759a:	009b      	lsls	r3, r3, #2
 800759c:	3310      	adds	r3, #16
 800759e:	687a      	ldr	r2, [r7, #4]
 80075a0:	4413      	add	r3, r2
 80075a2:	3304      	adds	r3, #4
 80075a4:	60fb      	str	r3, [r7, #12]
 80075a6:	e00c      	b.n	80075c2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80075a8:	78fb      	ldrb	r3, [r7, #3]
 80075aa:	f003 020f 	and.w	r2, r3, #15
 80075ae:	4613      	mov	r3, r2
 80075b0:	00db      	lsls	r3, r3, #3
 80075b2:	4413      	add	r3, r2
 80075b4:	009b      	lsls	r3, r3, #2
 80075b6:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80075ba:	687a      	ldr	r2, [r7, #4]
 80075bc:	4413      	add	r3, r2
 80075be:	3304      	adds	r3, #4
 80075c0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	68f9      	ldr	r1, [r7, #12]
 80075c8:	4618      	mov	r0, r3
 80075ca:	f004 f819 	bl	800b600 <USB_EPStopXfer>
 80075ce:	4603      	mov	r3, r0
 80075d0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80075d2:	7afb      	ldrb	r3, [r7, #11]
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3710      	adds	r7, #16
 80075d8:	46bd      	mov	sp, r7
 80075da:	bd80      	pop	{r7, pc}

080075dc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b08a      	sub	sp, #40	; 0x28
 80075e0:	af02      	add	r7, sp, #8
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80075f0:	683a      	ldr	r2, [r7, #0]
 80075f2:	4613      	mov	r3, r2
 80075f4:	00db      	lsls	r3, r3, #3
 80075f6:	4413      	add	r3, r2
 80075f8:	009b      	lsls	r3, r3, #2
 80075fa:	3310      	adds	r3, #16
 80075fc:	687a      	ldr	r2, [r7, #4]
 80075fe:	4413      	add	r3, r2
 8007600:	3304      	adds	r3, #4
 8007602:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	695a      	ldr	r2, [r3, #20]
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	691b      	ldr	r3, [r3, #16]
 800760c:	429a      	cmp	r2, r3
 800760e:	d901      	bls.n	8007614 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8007610:	2301      	movs	r3, #1
 8007612:	e06b      	b.n	80076ec <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	691a      	ldr	r2, [r3, #16]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	695b      	ldr	r3, [r3, #20]
 800761c:	1ad3      	subs	r3, r2, r3
 800761e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	69fa      	ldr	r2, [r7, #28]
 8007626:	429a      	cmp	r2, r3
 8007628:	d902      	bls.n	8007630 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	689b      	ldr	r3, [r3, #8]
 800762e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8007630:	69fb      	ldr	r3, [r7, #28]
 8007632:	3303      	adds	r3, #3
 8007634:	089b      	lsrs	r3, r3, #2
 8007636:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007638:	e02a      	b.n	8007690 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	691a      	ldr	r2, [r3, #16]
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	695b      	ldr	r3, [r3, #20]
 8007642:	1ad3      	subs	r3, r2, r3
 8007644:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	689b      	ldr	r3, [r3, #8]
 800764a:	69fa      	ldr	r2, [r7, #28]
 800764c:	429a      	cmp	r2, r3
 800764e:	d902      	bls.n	8007656 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	689b      	ldr	r3, [r3, #8]
 8007654:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007656:	69fb      	ldr	r3, [r7, #28]
 8007658:	3303      	adds	r3, #3
 800765a:	089b      	lsrs	r3, r3, #2
 800765c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	68d9      	ldr	r1, [r3, #12]
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	b2da      	uxtb	r2, r3
 8007666:	69fb      	ldr	r3, [r7, #28]
 8007668:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800766e:	9300      	str	r3, [sp, #0]
 8007670:	4603      	mov	r3, r0
 8007672:	6978      	ldr	r0, [r7, #20]
 8007674:	f004 f86e 	bl	800b754 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	68da      	ldr	r2, [r3, #12]
 800767c:	69fb      	ldr	r3, [r7, #28]
 800767e:	441a      	add	r2, r3
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	695a      	ldr	r2, [r3, #20]
 8007688:	69fb      	ldr	r3, [r7, #28]
 800768a:	441a      	add	r2, r3
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007690:	683b      	ldr	r3, [r7, #0]
 8007692:	015a      	lsls	r2, r3, #5
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	4413      	add	r3, r2
 8007698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800769c:	699b      	ldr	r3, [r3, #24]
 800769e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80076a0:	69ba      	ldr	r2, [r7, #24]
 80076a2:	429a      	cmp	r2, r3
 80076a4:	d809      	bhi.n	80076ba <PCD_WriteEmptyTxFifo+0xde>
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	695a      	ldr	r2, [r3, #20]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d203      	bcs.n	80076ba <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	691b      	ldr	r3, [r3, #16]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d1bf      	bne.n	800763a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	691a      	ldr	r2, [r3, #16]
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	695b      	ldr	r3, [r3, #20]
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d811      	bhi.n	80076ea <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80076c6:	683b      	ldr	r3, [r7, #0]
 80076c8:	f003 030f 	and.w	r3, r3, #15
 80076cc:	2201      	movs	r2, #1
 80076ce:	fa02 f303 	lsl.w	r3, r2, r3
 80076d2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	43db      	mvns	r3, r3
 80076e0:	6939      	ldr	r1, [r7, #16]
 80076e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80076e6:	4013      	ands	r3, r2
 80076e8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80076ea:	2300      	movs	r3, #0
}
 80076ec:	4618      	mov	r0, r3
 80076ee:	3720      	adds	r7, #32
 80076f0:	46bd      	mov	sp, r7
 80076f2:	bd80      	pop	{r7, pc}

080076f4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b088      	sub	sp, #32
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007704:	69fb      	ldr	r3, [r7, #28]
 8007706:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8007708:	69fb      	ldr	r3, [r7, #28]
 800770a:	333c      	adds	r3, #60	; 0x3c
 800770c:	3304      	adds	r3, #4
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	015a      	lsls	r2, r3, #5
 8007716:	69bb      	ldr	r3, [r7, #24]
 8007718:	4413      	add	r3, r2
 800771a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	799b      	ldrb	r3, [r3, #6]
 8007726:	2b01      	cmp	r3, #1
 8007728:	d17b      	bne.n	8007822 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800772a:	693b      	ldr	r3, [r7, #16]
 800772c:	f003 0308 	and.w	r3, r3, #8
 8007730:	2b00      	cmp	r3, #0
 8007732:	d015      	beq.n	8007760 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	4a61      	ldr	r2, [pc, #388]	; (80078bc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007738:	4293      	cmp	r3, r2
 800773a:	f240 80b9 	bls.w	80078b0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800773e:	693b      	ldr	r3, [r7, #16]
 8007740:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007744:	2b00      	cmp	r3, #0
 8007746:	f000 80b3 	beq.w	80078b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	015a      	lsls	r2, r3, #5
 800774e:	69bb      	ldr	r3, [r7, #24]
 8007750:	4413      	add	r3, r2
 8007752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007756:	461a      	mov	r2, r3
 8007758:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800775c:	6093      	str	r3, [r2, #8]
 800775e:	e0a7      	b.n	80078b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	f003 0320 	and.w	r3, r3, #32
 8007766:	2b00      	cmp	r3, #0
 8007768:	d009      	beq.n	800777e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	015a      	lsls	r2, r3, #5
 800776e:	69bb      	ldr	r3, [r7, #24]
 8007770:	4413      	add	r3, r2
 8007772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007776:	461a      	mov	r2, r3
 8007778:	2320      	movs	r3, #32
 800777a:	6093      	str	r3, [r2, #8]
 800777c:	e098      	b.n	80078b0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800777e:	693b      	ldr	r3, [r7, #16]
 8007780:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007784:	2b00      	cmp	r3, #0
 8007786:	f040 8093 	bne.w	80078b0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800778a:	697b      	ldr	r3, [r7, #20]
 800778c:	4a4b      	ldr	r2, [pc, #300]	; (80078bc <PCD_EP_OutXfrComplete_int+0x1c8>)
 800778e:	4293      	cmp	r3, r2
 8007790:	d90f      	bls.n	80077b2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007798:	2b00      	cmp	r3, #0
 800779a:	d00a      	beq.n	80077b2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	015a      	lsls	r2, r3, #5
 80077a0:	69bb      	ldr	r3, [r7, #24]
 80077a2:	4413      	add	r3, r2
 80077a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077a8:	461a      	mov	r2, r3
 80077aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077ae:	6093      	str	r3, [r2, #8]
 80077b0:	e07e      	b.n	80078b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80077b2:	683a      	ldr	r2, [r7, #0]
 80077b4:	4613      	mov	r3, r2
 80077b6:	00db      	lsls	r3, r3, #3
 80077b8:	4413      	add	r3, r2
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80077c0:	687a      	ldr	r2, [r7, #4]
 80077c2:	4413      	add	r3, r2
 80077c4:	3304      	adds	r3, #4
 80077c6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	6a1a      	ldr	r2, [r3, #32]
 80077cc:	683b      	ldr	r3, [r7, #0]
 80077ce:	0159      	lsls	r1, r3, #5
 80077d0:	69bb      	ldr	r3, [r7, #24]
 80077d2:	440b      	add	r3, r1
 80077d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077d8:	691b      	ldr	r3, [r3, #16]
 80077da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80077de:	1ad2      	subs	r2, r2, r3
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d114      	bne.n	8007814 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	691b      	ldr	r3, [r3, #16]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d109      	bne.n	8007806 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6818      	ldr	r0, [r3, #0]
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80077fc:	461a      	mov	r2, r3
 80077fe:	2101      	movs	r1, #1
 8007800:	f004 fa3e 	bl	800bc80 <USB_EP0_OutStart>
 8007804:	e006      	b.n	8007814 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	68da      	ldr	r2, [r3, #12]
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	695b      	ldr	r3, [r3, #20]
 800780e:	441a      	add	r2, r3
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007814:	683b      	ldr	r3, [r7, #0]
 8007816:	b2db      	uxtb	r3, r3
 8007818:	4619      	mov	r1, r3
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f007 ff58 	bl	800f6d0 <HAL_PCD_DataOutStageCallback>
 8007820:	e046      	b.n	80078b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	4a26      	ldr	r2, [pc, #152]	; (80078c0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d124      	bne.n	8007874 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007830:	2b00      	cmp	r3, #0
 8007832:	d00a      	beq.n	800784a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	015a      	lsls	r2, r3, #5
 8007838:	69bb      	ldr	r3, [r7, #24]
 800783a:	4413      	add	r3, r2
 800783c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007840:	461a      	mov	r2, r3
 8007842:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007846:	6093      	str	r3, [r2, #8]
 8007848:	e032      	b.n	80078b0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	f003 0320 	and.w	r3, r3, #32
 8007850:	2b00      	cmp	r3, #0
 8007852:	d008      	beq.n	8007866 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	015a      	lsls	r2, r3, #5
 8007858:	69bb      	ldr	r3, [r7, #24]
 800785a:	4413      	add	r3, r2
 800785c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007860:	461a      	mov	r2, r3
 8007862:	2320      	movs	r3, #32
 8007864:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	b2db      	uxtb	r3, r3
 800786a:	4619      	mov	r1, r3
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f007 ff2f 	bl	800f6d0 <HAL_PCD_DataOutStageCallback>
 8007872:	e01d      	b.n	80078b0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d114      	bne.n	80078a4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800787a:	6879      	ldr	r1, [r7, #4]
 800787c:	683a      	ldr	r2, [r7, #0]
 800787e:	4613      	mov	r3, r2
 8007880:	00db      	lsls	r3, r3, #3
 8007882:	4413      	add	r3, r2
 8007884:	009b      	lsls	r3, r3, #2
 8007886:	440b      	add	r3, r1
 8007888:	f503 7319 	add.w	r3, r3, #612	; 0x264
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d108      	bne.n	80078a4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6818      	ldr	r0, [r3, #0]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800789c:	461a      	mov	r2, r3
 800789e:	2100      	movs	r1, #0
 80078a0:	f004 f9ee 	bl	800bc80 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80078a4:	683b      	ldr	r3, [r7, #0]
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	4619      	mov	r1, r3
 80078aa:	6878      	ldr	r0, [r7, #4]
 80078ac:	f007 ff10 	bl	800f6d0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80078b0:	2300      	movs	r3, #0
}
 80078b2:	4618      	mov	r0, r3
 80078b4:	3720      	adds	r7, #32
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bd80      	pop	{r7, pc}
 80078ba:	bf00      	nop
 80078bc:	4f54300a 	.word	0x4f54300a
 80078c0:	4f54310a 	.word	0x4f54310a

080078c4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b086      	sub	sp, #24
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078d4:	697b      	ldr	r3, [r7, #20]
 80078d6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	333c      	adds	r3, #60	; 0x3c
 80078dc:	3304      	adds	r3, #4
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80078e2:	683b      	ldr	r3, [r7, #0]
 80078e4:	015a      	lsls	r2, r3, #5
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	4413      	add	r3, r2
 80078ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078ee:	689b      	ldr	r3, [r3, #8]
 80078f0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	4a15      	ldr	r2, [pc, #84]	; (800794c <PCD_EP_OutSetupPacket_int+0x88>)
 80078f6:	4293      	cmp	r3, r2
 80078f8:	d90e      	bls.n	8007918 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007900:	2b00      	cmp	r3, #0
 8007902:	d009      	beq.n	8007918 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	015a      	lsls	r2, r3, #5
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	4413      	add	r3, r2
 800790c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007910:	461a      	mov	r2, r3
 8007912:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007916:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f007 fec7 	bl	800f6ac <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	4a0a      	ldr	r2, [pc, #40]	; (800794c <PCD_EP_OutSetupPacket_int+0x88>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d90c      	bls.n	8007940 <PCD_EP_OutSetupPacket_int+0x7c>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	799b      	ldrb	r3, [r3, #6]
 800792a:	2b01      	cmp	r3, #1
 800792c:	d108      	bne.n	8007940 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6818      	ldr	r0, [r3, #0]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8007938:	461a      	mov	r2, r3
 800793a:	2101      	movs	r1, #1
 800793c:	f004 f9a0 	bl	800bc80 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007940:	2300      	movs	r3, #0
}
 8007942:	4618      	mov	r0, r3
 8007944:	3718      	adds	r7, #24
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
 800794a:	bf00      	nop
 800794c:	4f54300a 	.word	0x4f54300a

08007950 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8007950:	b480      	push	{r7}
 8007952:	b085      	sub	sp, #20
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	460b      	mov	r3, r1
 800795a:	70fb      	strb	r3, [r7, #3]
 800795c:	4613      	mov	r3, r2
 800795e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007966:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007968:	78fb      	ldrb	r3, [r7, #3]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d107      	bne.n	800797e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800796e:	883b      	ldrh	r3, [r7, #0]
 8007970:	0419      	lsls	r1, r3, #16
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	68ba      	ldr	r2, [r7, #8]
 8007978:	430a      	orrs	r2, r1
 800797a:	629a      	str	r2, [r3, #40]	; 0x28
 800797c:	e028      	b.n	80079d0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007984:	0c1b      	lsrs	r3, r3, #16
 8007986:	68ba      	ldr	r2, [r7, #8]
 8007988:	4413      	add	r3, r2
 800798a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800798c:	2300      	movs	r3, #0
 800798e:	73fb      	strb	r3, [r7, #15]
 8007990:	e00d      	b.n	80079ae <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681a      	ldr	r2, [r3, #0]
 8007996:	7bfb      	ldrb	r3, [r7, #15]
 8007998:	3340      	adds	r3, #64	; 0x40
 800799a:	009b      	lsls	r3, r3, #2
 800799c:	4413      	add	r3, r2
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	0c1b      	lsrs	r3, r3, #16
 80079a2:	68ba      	ldr	r2, [r7, #8]
 80079a4:	4413      	add	r3, r2
 80079a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80079a8:	7bfb      	ldrb	r3, [r7, #15]
 80079aa:	3301      	adds	r3, #1
 80079ac:	73fb      	strb	r3, [r7, #15]
 80079ae:	7bfa      	ldrb	r2, [r7, #15]
 80079b0:	78fb      	ldrb	r3, [r7, #3]
 80079b2:	3b01      	subs	r3, #1
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d3ec      	bcc.n	8007992 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80079b8:	883b      	ldrh	r3, [r7, #0]
 80079ba:	0418      	lsls	r0, r3, #16
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	6819      	ldr	r1, [r3, #0]
 80079c0:	78fb      	ldrb	r3, [r7, #3]
 80079c2:	3b01      	subs	r3, #1
 80079c4:	68ba      	ldr	r2, [r7, #8]
 80079c6:	4302      	orrs	r2, r0
 80079c8:	3340      	adds	r3, #64	; 0x40
 80079ca:	009b      	lsls	r3, r3, #2
 80079cc:	440b      	add	r3, r1
 80079ce:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80079d0:	2300      	movs	r3, #0
}
 80079d2:	4618      	mov	r0, r3
 80079d4:	3714      	adds	r7, #20
 80079d6:	46bd      	mov	sp, r7
 80079d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079dc:	4770      	bx	lr

080079de <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80079de:	b480      	push	{r7}
 80079e0:	b083      	sub	sp, #12
 80079e2:	af00      	add	r7, sp, #0
 80079e4:	6078      	str	r0, [r7, #4]
 80079e6:	460b      	mov	r3, r1
 80079e8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	887a      	ldrh	r2, [r7, #2]
 80079f0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80079f2:	2300      	movs	r3, #0
}
 80079f4:	4618      	mov	r0, r3
 80079f6:	370c      	adds	r7, #12
 80079f8:	46bd      	mov	sp, r7
 80079fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fe:	4770      	bx	lr

08007a00 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007a00:	b480      	push	{r7}
 8007a02:	b083      	sub	sp, #12
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	460b      	mov	r3, r1
 8007a0a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8007a0c:	bf00      	nop
 8007a0e:	370c      	adds	r7, #12
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b086      	sub	sp, #24
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d101      	bne.n	8007a2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007a26:	2301      	movs	r3, #1
 8007a28:	e267      	b.n	8007efa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f003 0301 	and.w	r3, r3, #1
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d075      	beq.n	8007b22 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007a36:	4b88      	ldr	r3, [pc, #544]	; (8007c58 <HAL_RCC_OscConfig+0x240>)
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	f003 030c 	and.w	r3, r3, #12
 8007a3e:	2b04      	cmp	r3, #4
 8007a40:	d00c      	beq.n	8007a5c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007a42:	4b85      	ldr	r3, [pc, #532]	; (8007c58 <HAL_RCC_OscConfig+0x240>)
 8007a44:	689b      	ldr	r3, [r3, #8]
 8007a46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007a4a:	2b08      	cmp	r3, #8
 8007a4c:	d112      	bne.n	8007a74 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007a4e:	4b82      	ldr	r3, [pc, #520]	; (8007c58 <HAL_RCC_OscConfig+0x240>)
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a5a:	d10b      	bne.n	8007a74 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a5c:	4b7e      	ldr	r3, [pc, #504]	; (8007c58 <HAL_RCC_OscConfig+0x240>)
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d05b      	beq.n	8007b20 <HAL_RCC_OscConfig+0x108>
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	685b      	ldr	r3, [r3, #4]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d157      	bne.n	8007b20 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007a70:	2301      	movs	r3, #1
 8007a72:	e242      	b.n	8007efa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	685b      	ldr	r3, [r3, #4]
 8007a78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a7c:	d106      	bne.n	8007a8c <HAL_RCC_OscConfig+0x74>
 8007a7e:	4b76      	ldr	r3, [pc, #472]	; (8007c58 <HAL_RCC_OscConfig+0x240>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4a75      	ldr	r2, [pc, #468]	; (8007c58 <HAL_RCC_OscConfig+0x240>)
 8007a84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a88:	6013      	str	r3, [r2, #0]
 8007a8a:	e01d      	b.n	8007ac8 <HAL_RCC_OscConfig+0xb0>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007a94:	d10c      	bne.n	8007ab0 <HAL_RCC_OscConfig+0x98>
 8007a96:	4b70      	ldr	r3, [pc, #448]	; (8007c58 <HAL_RCC_OscConfig+0x240>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a6f      	ldr	r2, [pc, #444]	; (8007c58 <HAL_RCC_OscConfig+0x240>)
 8007a9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007aa0:	6013      	str	r3, [r2, #0]
 8007aa2:	4b6d      	ldr	r3, [pc, #436]	; (8007c58 <HAL_RCC_OscConfig+0x240>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a6c      	ldr	r2, [pc, #432]	; (8007c58 <HAL_RCC_OscConfig+0x240>)
 8007aa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007aac:	6013      	str	r3, [r2, #0]
 8007aae:	e00b      	b.n	8007ac8 <HAL_RCC_OscConfig+0xb0>
 8007ab0:	4b69      	ldr	r3, [pc, #420]	; (8007c58 <HAL_RCC_OscConfig+0x240>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a68      	ldr	r2, [pc, #416]	; (8007c58 <HAL_RCC_OscConfig+0x240>)
 8007ab6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007aba:	6013      	str	r3, [r2, #0]
 8007abc:	4b66      	ldr	r3, [pc, #408]	; (8007c58 <HAL_RCC_OscConfig+0x240>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a65      	ldr	r2, [pc, #404]	; (8007c58 <HAL_RCC_OscConfig+0x240>)
 8007ac2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ac6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d013      	beq.n	8007af8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ad0:	f7fc fa64 	bl	8003f9c <HAL_GetTick>
 8007ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007ad6:	e008      	b.n	8007aea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007ad8:	f7fc fa60 	bl	8003f9c <HAL_GetTick>
 8007adc:	4602      	mov	r2, r0
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	1ad3      	subs	r3, r2, r3
 8007ae2:	2b64      	cmp	r3, #100	; 0x64
 8007ae4:	d901      	bls.n	8007aea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007ae6:	2303      	movs	r3, #3
 8007ae8:	e207      	b.n	8007efa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007aea:	4b5b      	ldr	r3, [pc, #364]	; (8007c58 <HAL_RCC_OscConfig+0x240>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d0f0      	beq.n	8007ad8 <HAL_RCC_OscConfig+0xc0>
 8007af6:	e014      	b.n	8007b22 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007af8:	f7fc fa50 	bl	8003f9c <HAL_GetTick>
 8007afc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007afe:	e008      	b.n	8007b12 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007b00:	f7fc fa4c 	bl	8003f9c <HAL_GetTick>
 8007b04:	4602      	mov	r2, r0
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	1ad3      	subs	r3, r2, r3
 8007b0a:	2b64      	cmp	r3, #100	; 0x64
 8007b0c:	d901      	bls.n	8007b12 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007b0e:	2303      	movs	r3, #3
 8007b10:	e1f3      	b.n	8007efa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b12:	4b51      	ldr	r3, [pc, #324]	; (8007c58 <HAL_RCC_OscConfig+0x240>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d1f0      	bne.n	8007b00 <HAL_RCC_OscConfig+0xe8>
 8007b1e:	e000      	b.n	8007b22 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f003 0302 	and.w	r3, r3, #2
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d063      	beq.n	8007bf6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007b2e:	4b4a      	ldr	r3, [pc, #296]	; (8007c58 <HAL_RCC_OscConfig+0x240>)
 8007b30:	689b      	ldr	r3, [r3, #8]
 8007b32:	f003 030c 	and.w	r3, r3, #12
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d00b      	beq.n	8007b52 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007b3a:	4b47      	ldr	r3, [pc, #284]	; (8007c58 <HAL_RCC_OscConfig+0x240>)
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007b42:	2b08      	cmp	r3, #8
 8007b44:	d11c      	bne.n	8007b80 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007b46:	4b44      	ldr	r3, [pc, #272]	; (8007c58 <HAL_RCC_OscConfig+0x240>)
 8007b48:	685b      	ldr	r3, [r3, #4]
 8007b4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d116      	bne.n	8007b80 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b52:	4b41      	ldr	r3, [pc, #260]	; (8007c58 <HAL_RCC_OscConfig+0x240>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f003 0302 	and.w	r3, r3, #2
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d005      	beq.n	8007b6a <HAL_RCC_OscConfig+0x152>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	68db      	ldr	r3, [r3, #12]
 8007b62:	2b01      	cmp	r3, #1
 8007b64:	d001      	beq.n	8007b6a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	e1c7      	b.n	8007efa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b6a:	4b3b      	ldr	r3, [pc, #236]	; (8007c58 <HAL_RCC_OscConfig+0x240>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	691b      	ldr	r3, [r3, #16]
 8007b76:	00db      	lsls	r3, r3, #3
 8007b78:	4937      	ldr	r1, [pc, #220]	; (8007c58 <HAL_RCC_OscConfig+0x240>)
 8007b7a:	4313      	orrs	r3, r2
 8007b7c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b7e:	e03a      	b.n	8007bf6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d020      	beq.n	8007bca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007b88:	4b34      	ldr	r3, [pc, #208]	; (8007c5c <HAL_RCC_OscConfig+0x244>)
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b8e:	f7fc fa05 	bl	8003f9c <HAL_GetTick>
 8007b92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b94:	e008      	b.n	8007ba8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b96:	f7fc fa01 	bl	8003f9c <HAL_GetTick>
 8007b9a:	4602      	mov	r2, r0
 8007b9c:	693b      	ldr	r3, [r7, #16]
 8007b9e:	1ad3      	subs	r3, r2, r3
 8007ba0:	2b02      	cmp	r3, #2
 8007ba2:	d901      	bls.n	8007ba8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007ba4:	2303      	movs	r3, #3
 8007ba6:	e1a8      	b.n	8007efa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ba8:	4b2b      	ldr	r3, [pc, #172]	; (8007c58 <HAL_RCC_OscConfig+0x240>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	f003 0302 	and.w	r3, r3, #2
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d0f0      	beq.n	8007b96 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bb4:	4b28      	ldr	r3, [pc, #160]	; (8007c58 <HAL_RCC_OscConfig+0x240>)
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	691b      	ldr	r3, [r3, #16]
 8007bc0:	00db      	lsls	r3, r3, #3
 8007bc2:	4925      	ldr	r1, [pc, #148]	; (8007c58 <HAL_RCC_OscConfig+0x240>)
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	600b      	str	r3, [r1, #0]
 8007bc8:	e015      	b.n	8007bf6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007bca:	4b24      	ldr	r3, [pc, #144]	; (8007c5c <HAL_RCC_OscConfig+0x244>)
 8007bcc:	2200      	movs	r2, #0
 8007bce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bd0:	f7fc f9e4 	bl	8003f9c <HAL_GetTick>
 8007bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007bd6:	e008      	b.n	8007bea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007bd8:	f7fc f9e0 	bl	8003f9c <HAL_GetTick>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	1ad3      	subs	r3, r2, r3
 8007be2:	2b02      	cmp	r3, #2
 8007be4:	d901      	bls.n	8007bea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007be6:	2303      	movs	r3, #3
 8007be8:	e187      	b.n	8007efa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007bea:	4b1b      	ldr	r3, [pc, #108]	; (8007c58 <HAL_RCC_OscConfig+0x240>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	f003 0302 	and.w	r3, r3, #2
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d1f0      	bne.n	8007bd8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f003 0308 	and.w	r3, r3, #8
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d036      	beq.n	8007c70 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	695b      	ldr	r3, [r3, #20]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d016      	beq.n	8007c38 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007c0a:	4b15      	ldr	r3, [pc, #84]	; (8007c60 <HAL_RCC_OscConfig+0x248>)
 8007c0c:	2201      	movs	r2, #1
 8007c0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c10:	f7fc f9c4 	bl	8003f9c <HAL_GetTick>
 8007c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c16:	e008      	b.n	8007c2a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007c18:	f7fc f9c0 	bl	8003f9c <HAL_GetTick>
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	693b      	ldr	r3, [r7, #16]
 8007c20:	1ad3      	subs	r3, r2, r3
 8007c22:	2b02      	cmp	r3, #2
 8007c24:	d901      	bls.n	8007c2a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007c26:	2303      	movs	r3, #3
 8007c28:	e167      	b.n	8007efa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c2a:	4b0b      	ldr	r3, [pc, #44]	; (8007c58 <HAL_RCC_OscConfig+0x240>)
 8007c2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c2e:	f003 0302 	and.w	r3, r3, #2
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d0f0      	beq.n	8007c18 <HAL_RCC_OscConfig+0x200>
 8007c36:	e01b      	b.n	8007c70 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007c38:	4b09      	ldr	r3, [pc, #36]	; (8007c60 <HAL_RCC_OscConfig+0x248>)
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c3e:	f7fc f9ad 	bl	8003f9c <HAL_GetTick>
 8007c42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c44:	e00e      	b.n	8007c64 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007c46:	f7fc f9a9 	bl	8003f9c <HAL_GetTick>
 8007c4a:	4602      	mov	r2, r0
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	1ad3      	subs	r3, r2, r3
 8007c50:	2b02      	cmp	r3, #2
 8007c52:	d907      	bls.n	8007c64 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007c54:	2303      	movs	r3, #3
 8007c56:	e150      	b.n	8007efa <HAL_RCC_OscConfig+0x4e2>
 8007c58:	40023800 	.word	0x40023800
 8007c5c:	42470000 	.word	0x42470000
 8007c60:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c64:	4b88      	ldr	r3, [pc, #544]	; (8007e88 <HAL_RCC_OscConfig+0x470>)
 8007c66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c68:	f003 0302 	and.w	r3, r3, #2
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d1ea      	bne.n	8007c46 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f003 0304 	and.w	r3, r3, #4
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	f000 8097 	beq.w	8007dac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c82:	4b81      	ldr	r3, [pc, #516]	; (8007e88 <HAL_RCC_OscConfig+0x470>)
 8007c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d10f      	bne.n	8007cae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c8e:	2300      	movs	r3, #0
 8007c90:	60bb      	str	r3, [r7, #8]
 8007c92:	4b7d      	ldr	r3, [pc, #500]	; (8007e88 <HAL_RCC_OscConfig+0x470>)
 8007c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c96:	4a7c      	ldr	r2, [pc, #496]	; (8007e88 <HAL_RCC_OscConfig+0x470>)
 8007c98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8007c9e:	4b7a      	ldr	r3, [pc, #488]	; (8007e88 <HAL_RCC_OscConfig+0x470>)
 8007ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ca6:	60bb      	str	r3, [r7, #8]
 8007ca8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007caa:	2301      	movs	r3, #1
 8007cac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007cae:	4b77      	ldr	r3, [pc, #476]	; (8007e8c <HAL_RCC_OscConfig+0x474>)
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d118      	bne.n	8007cec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007cba:	4b74      	ldr	r3, [pc, #464]	; (8007e8c <HAL_RCC_OscConfig+0x474>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	4a73      	ldr	r2, [pc, #460]	; (8007e8c <HAL_RCC_OscConfig+0x474>)
 8007cc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007cc6:	f7fc f969 	bl	8003f9c <HAL_GetTick>
 8007cca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ccc:	e008      	b.n	8007ce0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007cce:	f7fc f965 	bl	8003f9c <HAL_GetTick>
 8007cd2:	4602      	mov	r2, r0
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	1ad3      	subs	r3, r2, r3
 8007cd8:	2b02      	cmp	r3, #2
 8007cda:	d901      	bls.n	8007ce0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007cdc:	2303      	movs	r3, #3
 8007cde:	e10c      	b.n	8007efa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ce0:	4b6a      	ldr	r3, [pc, #424]	; (8007e8c <HAL_RCC_OscConfig+0x474>)
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d0f0      	beq.n	8007cce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	2b01      	cmp	r3, #1
 8007cf2:	d106      	bne.n	8007d02 <HAL_RCC_OscConfig+0x2ea>
 8007cf4:	4b64      	ldr	r3, [pc, #400]	; (8007e88 <HAL_RCC_OscConfig+0x470>)
 8007cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cf8:	4a63      	ldr	r2, [pc, #396]	; (8007e88 <HAL_RCC_OscConfig+0x470>)
 8007cfa:	f043 0301 	orr.w	r3, r3, #1
 8007cfe:	6713      	str	r3, [r2, #112]	; 0x70
 8007d00:	e01c      	b.n	8007d3c <HAL_RCC_OscConfig+0x324>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	689b      	ldr	r3, [r3, #8]
 8007d06:	2b05      	cmp	r3, #5
 8007d08:	d10c      	bne.n	8007d24 <HAL_RCC_OscConfig+0x30c>
 8007d0a:	4b5f      	ldr	r3, [pc, #380]	; (8007e88 <HAL_RCC_OscConfig+0x470>)
 8007d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d0e:	4a5e      	ldr	r2, [pc, #376]	; (8007e88 <HAL_RCC_OscConfig+0x470>)
 8007d10:	f043 0304 	orr.w	r3, r3, #4
 8007d14:	6713      	str	r3, [r2, #112]	; 0x70
 8007d16:	4b5c      	ldr	r3, [pc, #368]	; (8007e88 <HAL_RCC_OscConfig+0x470>)
 8007d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d1a:	4a5b      	ldr	r2, [pc, #364]	; (8007e88 <HAL_RCC_OscConfig+0x470>)
 8007d1c:	f043 0301 	orr.w	r3, r3, #1
 8007d20:	6713      	str	r3, [r2, #112]	; 0x70
 8007d22:	e00b      	b.n	8007d3c <HAL_RCC_OscConfig+0x324>
 8007d24:	4b58      	ldr	r3, [pc, #352]	; (8007e88 <HAL_RCC_OscConfig+0x470>)
 8007d26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d28:	4a57      	ldr	r2, [pc, #348]	; (8007e88 <HAL_RCC_OscConfig+0x470>)
 8007d2a:	f023 0301 	bic.w	r3, r3, #1
 8007d2e:	6713      	str	r3, [r2, #112]	; 0x70
 8007d30:	4b55      	ldr	r3, [pc, #340]	; (8007e88 <HAL_RCC_OscConfig+0x470>)
 8007d32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d34:	4a54      	ldr	r2, [pc, #336]	; (8007e88 <HAL_RCC_OscConfig+0x470>)
 8007d36:	f023 0304 	bic.w	r3, r3, #4
 8007d3a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	689b      	ldr	r3, [r3, #8]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d015      	beq.n	8007d70 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d44:	f7fc f92a 	bl	8003f9c <HAL_GetTick>
 8007d48:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d4a:	e00a      	b.n	8007d62 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d4c:	f7fc f926 	bl	8003f9c <HAL_GetTick>
 8007d50:	4602      	mov	r2, r0
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	1ad3      	subs	r3, r2, r3
 8007d56:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d901      	bls.n	8007d62 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007d5e:	2303      	movs	r3, #3
 8007d60:	e0cb      	b.n	8007efa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d62:	4b49      	ldr	r3, [pc, #292]	; (8007e88 <HAL_RCC_OscConfig+0x470>)
 8007d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d66:	f003 0302 	and.w	r3, r3, #2
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d0ee      	beq.n	8007d4c <HAL_RCC_OscConfig+0x334>
 8007d6e:	e014      	b.n	8007d9a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d70:	f7fc f914 	bl	8003f9c <HAL_GetTick>
 8007d74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d76:	e00a      	b.n	8007d8e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d78:	f7fc f910 	bl	8003f9c <HAL_GetTick>
 8007d7c:	4602      	mov	r2, r0
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	1ad3      	subs	r3, r2, r3
 8007d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d86:	4293      	cmp	r3, r2
 8007d88:	d901      	bls.n	8007d8e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007d8a:	2303      	movs	r3, #3
 8007d8c:	e0b5      	b.n	8007efa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d8e:	4b3e      	ldr	r3, [pc, #248]	; (8007e88 <HAL_RCC_OscConfig+0x470>)
 8007d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d92:	f003 0302 	and.w	r3, r3, #2
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d1ee      	bne.n	8007d78 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007d9a:	7dfb      	ldrb	r3, [r7, #23]
 8007d9c:	2b01      	cmp	r3, #1
 8007d9e:	d105      	bne.n	8007dac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007da0:	4b39      	ldr	r3, [pc, #228]	; (8007e88 <HAL_RCC_OscConfig+0x470>)
 8007da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da4:	4a38      	ldr	r2, [pc, #224]	; (8007e88 <HAL_RCC_OscConfig+0x470>)
 8007da6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007daa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	699b      	ldr	r3, [r3, #24]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	f000 80a1 	beq.w	8007ef8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007db6:	4b34      	ldr	r3, [pc, #208]	; (8007e88 <HAL_RCC_OscConfig+0x470>)
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	f003 030c 	and.w	r3, r3, #12
 8007dbe:	2b08      	cmp	r3, #8
 8007dc0:	d05c      	beq.n	8007e7c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	699b      	ldr	r3, [r3, #24]
 8007dc6:	2b02      	cmp	r3, #2
 8007dc8:	d141      	bne.n	8007e4e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007dca:	4b31      	ldr	r3, [pc, #196]	; (8007e90 <HAL_RCC_OscConfig+0x478>)
 8007dcc:	2200      	movs	r2, #0
 8007dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007dd0:	f7fc f8e4 	bl	8003f9c <HAL_GetTick>
 8007dd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007dd6:	e008      	b.n	8007dea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007dd8:	f7fc f8e0 	bl	8003f9c <HAL_GetTick>
 8007ddc:	4602      	mov	r2, r0
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	1ad3      	subs	r3, r2, r3
 8007de2:	2b02      	cmp	r3, #2
 8007de4:	d901      	bls.n	8007dea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007de6:	2303      	movs	r3, #3
 8007de8:	e087      	b.n	8007efa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007dea:	4b27      	ldr	r3, [pc, #156]	; (8007e88 <HAL_RCC_OscConfig+0x470>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d1f0      	bne.n	8007dd8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	69da      	ldr	r2, [r3, #28]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6a1b      	ldr	r3, [r3, #32]
 8007dfe:	431a      	orrs	r2, r3
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e04:	019b      	lsls	r3, r3, #6
 8007e06:	431a      	orrs	r2, r3
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e0c:	085b      	lsrs	r3, r3, #1
 8007e0e:	3b01      	subs	r3, #1
 8007e10:	041b      	lsls	r3, r3, #16
 8007e12:	431a      	orrs	r2, r3
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e18:	061b      	lsls	r3, r3, #24
 8007e1a:	491b      	ldr	r1, [pc, #108]	; (8007e88 <HAL_RCC_OscConfig+0x470>)
 8007e1c:	4313      	orrs	r3, r2
 8007e1e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007e20:	4b1b      	ldr	r3, [pc, #108]	; (8007e90 <HAL_RCC_OscConfig+0x478>)
 8007e22:	2201      	movs	r2, #1
 8007e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e26:	f7fc f8b9 	bl	8003f9c <HAL_GetTick>
 8007e2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e2c:	e008      	b.n	8007e40 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e2e:	f7fc f8b5 	bl	8003f9c <HAL_GetTick>
 8007e32:	4602      	mov	r2, r0
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	1ad3      	subs	r3, r2, r3
 8007e38:	2b02      	cmp	r3, #2
 8007e3a:	d901      	bls.n	8007e40 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007e3c:	2303      	movs	r3, #3
 8007e3e:	e05c      	b.n	8007efa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e40:	4b11      	ldr	r3, [pc, #68]	; (8007e88 <HAL_RCC_OscConfig+0x470>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d0f0      	beq.n	8007e2e <HAL_RCC_OscConfig+0x416>
 8007e4c:	e054      	b.n	8007ef8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e4e:	4b10      	ldr	r3, [pc, #64]	; (8007e90 <HAL_RCC_OscConfig+0x478>)
 8007e50:	2200      	movs	r2, #0
 8007e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e54:	f7fc f8a2 	bl	8003f9c <HAL_GetTick>
 8007e58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e5a:	e008      	b.n	8007e6e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e5c:	f7fc f89e 	bl	8003f9c <HAL_GetTick>
 8007e60:	4602      	mov	r2, r0
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	1ad3      	subs	r3, r2, r3
 8007e66:	2b02      	cmp	r3, #2
 8007e68:	d901      	bls.n	8007e6e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007e6a:	2303      	movs	r3, #3
 8007e6c:	e045      	b.n	8007efa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e6e:	4b06      	ldr	r3, [pc, #24]	; (8007e88 <HAL_RCC_OscConfig+0x470>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d1f0      	bne.n	8007e5c <HAL_RCC_OscConfig+0x444>
 8007e7a:	e03d      	b.n	8007ef8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	699b      	ldr	r3, [r3, #24]
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	d107      	bne.n	8007e94 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007e84:	2301      	movs	r3, #1
 8007e86:	e038      	b.n	8007efa <HAL_RCC_OscConfig+0x4e2>
 8007e88:	40023800 	.word	0x40023800
 8007e8c:	40007000 	.word	0x40007000
 8007e90:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007e94:	4b1b      	ldr	r3, [pc, #108]	; (8007f04 <HAL_RCC_OscConfig+0x4ec>)
 8007e96:	685b      	ldr	r3, [r3, #4]
 8007e98:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	699b      	ldr	r3, [r3, #24]
 8007e9e:	2b01      	cmp	r3, #1
 8007ea0:	d028      	beq.n	8007ef4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d121      	bne.n	8007ef4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	d11a      	bne.n	8007ef4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007ebe:	68fa      	ldr	r2, [r7, #12]
 8007ec0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007ec4:	4013      	ands	r3, r2
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007eca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d111      	bne.n	8007ef4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eda:	085b      	lsrs	r3, r3, #1
 8007edc:	3b01      	subs	r3, #1
 8007ede:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007ee0:	429a      	cmp	r2, r3
 8007ee2:	d107      	bne.n	8007ef4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007ef0:	429a      	cmp	r2, r3
 8007ef2:	d001      	beq.n	8007ef8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007ef4:	2301      	movs	r3, #1
 8007ef6:	e000      	b.n	8007efa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007ef8:	2300      	movs	r3, #0
}
 8007efa:	4618      	mov	r0, r3
 8007efc:	3718      	adds	r7, #24
 8007efe:	46bd      	mov	sp, r7
 8007f00:	bd80      	pop	{r7, pc}
 8007f02:	bf00      	nop
 8007f04:	40023800 	.word	0x40023800

08007f08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b084      	sub	sp, #16
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d101      	bne.n	8007f1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007f18:	2301      	movs	r3, #1
 8007f1a:	e0cc      	b.n	80080b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007f1c:	4b68      	ldr	r3, [pc, #416]	; (80080c0 <HAL_RCC_ClockConfig+0x1b8>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	f003 0307 	and.w	r3, r3, #7
 8007f24:	683a      	ldr	r2, [r7, #0]
 8007f26:	429a      	cmp	r2, r3
 8007f28:	d90c      	bls.n	8007f44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f2a:	4b65      	ldr	r3, [pc, #404]	; (80080c0 <HAL_RCC_ClockConfig+0x1b8>)
 8007f2c:	683a      	ldr	r2, [r7, #0]
 8007f2e:	b2d2      	uxtb	r2, r2
 8007f30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007f32:	4b63      	ldr	r3, [pc, #396]	; (80080c0 <HAL_RCC_ClockConfig+0x1b8>)
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	f003 0307 	and.w	r3, r3, #7
 8007f3a:	683a      	ldr	r2, [r7, #0]
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d001      	beq.n	8007f44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007f40:	2301      	movs	r3, #1
 8007f42:	e0b8      	b.n	80080b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f003 0302 	and.w	r3, r3, #2
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d020      	beq.n	8007f92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f003 0304 	and.w	r3, r3, #4
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d005      	beq.n	8007f68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007f5c:	4b59      	ldr	r3, [pc, #356]	; (80080c4 <HAL_RCC_ClockConfig+0x1bc>)
 8007f5e:	689b      	ldr	r3, [r3, #8]
 8007f60:	4a58      	ldr	r2, [pc, #352]	; (80080c4 <HAL_RCC_ClockConfig+0x1bc>)
 8007f62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007f66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f003 0308 	and.w	r3, r3, #8
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d005      	beq.n	8007f80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007f74:	4b53      	ldr	r3, [pc, #332]	; (80080c4 <HAL_RCC_ClockConfig+0x1bc>)
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	4a52      	ldr	r2, [pc, #328]	; (80080c4 <HAL_RCC_ClockConfig+0x1bc>)
 8007f7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007f7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f80:	4b50      	ldr	r3, [pc, #320]	; (80080c4 <HAL_RCC_ClockConfig+0x1bc>)
 8007f82:	689b      	ldr	r3, [r3, #8]
 8007f84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	689b      	ldr	r3, [r3, #8]
 8007f8c:	494d      	ldr	r1, [pc, #308]	; (80080c4 <HAL_RCC_ClockConfig+0x1bc>)
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	f003 0301 	and.w	r3, r3, #1
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d044      	beq.n	8008028 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	2b01      	cmp	r3, #1
 8007fa4:	d107      	bne.n	8007fb6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007fa6:	4b47      	ldr	r3, [pc, #284]	; (80080c4 <HAL_RCC_ClockConfig+0x1bc>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d119      	bne.n	8007fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e07f      	b.n	80080b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	2b02      	cmp	r3, #2
 8007fbc:	d003      	beq.n	8007fc6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007fc2:	2b03      	cmp	r3, #3
 8007fc4:	d107      	bne.n	8007fd6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007fc6:	4b3f      	ldr	r3, [pc, #252]	; (80080c4 <HAL_RCC_ClockConfig+0x1bc>)
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d109      	bne.n	8007fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007fd2:	2301      	movs	r3, #1
 8007fd4:	e06f      	b.n	80080b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007fd6:	4b3b      	ldr	r3, [pc, #236]	; (80080c4 <HAL_RCC_ClockConfig+0x1bc>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	f003 0302 	and.w	r3, r3, #2
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d101      	bne.n	8007fe6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	e067      	b.n	80080b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007fe6:	4b37      	ldr	r3, [pc, #220]	; (80080c4 <HAL_RCC_ClockConfig+0x1bc>)
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	f023 0203 	bic.w	r2, r3, #3
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	4934      	ldr	r1, [pc, #208]	; (80080c4 <HAL_RCC_ClockConfig+0x1bc>)
 8007ff4:	4313      	orrs	r3, r2
 8007ff6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007ff8:	f7fb ffd0 	bl	8003f9c <HAL_GetTick>
 8007ffc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ffe:	e00a      	b.n	8008016 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008000:	f7fb ffcc 	bl	8003f9c <HAL_GetTick>
 8008004:	4602      	mov	r2, r0
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	1ad3      	subs	r3, r2, r3
 800800a:	f241 3288 	movw	r2, #5000	; 0x1388
 800800e:	4293      	cmp	r3, r2
 8008010:	d901      	bls.n	8008016 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008012:	2303      	movs	r3, #3
 8008014:	e04f      	b.n	80080b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008016:	4b2b      	ldr	r3, [pc, #172]	; (80080c4 <HAL_RCC_ClockConfig+0x1bc>)
 8008018:	689b      	ldr	r3, [r3, #8]
 800801a:	f003 020c 	and.w	r2, r3, #12
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	685b      	ldr	r3, [r3, #4]
 8008022:	009b      	lsls	r3, r3, #2
 8008024:	429a      	cmp	r2, r3
 8008026:	d1eb      	bne.n	8008000 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008028:	4b25      	ldr	r3, [pc, #148]	; (80080c0 <HAL_RCC_ClockConfig+0x1b8>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f003 0307 	and.w	r3, r3, #7
 8008030:	683a      	ldr	r2, [r7, #0]
 8008032:	429a      	cmp	r2, r3
 8008034:	d20c      	bcs.n	8008050 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008036:	4b22      	ldr	r3, [pc, #136]	; (80080c0 <HAL_RCC_ClockConfig+0x1b8>)
 8008038:	683a      	ldr	r2, [r7, #0]
 800803a:	b2d2      	uxtb	r2, r2
 800803c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800803e:	4b20      	ldr	r3, [pc, #128]	; (80080c0 <HAL_RCC_ClockConfig+0x1b8>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f003 0307 	and.w	r3, r3, #7
 8008046:	683a      	ldr	r2, [r7, #0]
 8008048:	429a      	cmp	r2, r3
 800804a:	d001      	beq.n	8008050 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800804c:	2301      	movs	r3, #1
 800804e:	e032      	b.n	80080b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	f003 0304 	and.w	r3, r3, #4
 8008058:	2b00      	cmp	r3, #0
 800805a:	d008      	beq.n	800806e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800805c:	4b19      	ldr	r3, [pc, #100]	; (80080c4 <HAL_RCC_ClockConfig+0x1bc>)
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	68db      	ldr	r3, [r3, #12]
 8008068:	4916      	ldr	r1, [pc, #88]	; (80080c4 <HAL_RCC_ClockConfig+0x1bc>)
 800806a:	4313      	orrs	r3, r2
 800806c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	f003 0308 	and.w	r3, r3, #8
 8008076:	2b00      	cmp	r3, #0
 8008078:	d009      	beq.n	800808e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800807a:	4b12      	ldr	r3, [pc, #72]	; (80080c4 <HAL_RCC_ClockConfig+0x1bc>)
 800807c:	689b      	ldr	r3, [r3, #8]
 800807e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	691b      	ldr	r3, [r3, #16]
 8008086:	00db      	lsls	r3, r3, #3
 8008088:	490e      	ldr	r1, [pc, #56]	; (80080c4 <HAL_RCC_ClockConfig+0x1bc>)
 800808a:	4313      	orrs	r3, r2
 800808c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800808e:	f000 f821 	bl	80080d4 <HAL_RCC_GetSysClockFreq>
 8008092:	4602      	mov	r2, r0
 8008094:	4b0b      	ldr	r3, [pc, #44]	; (80080c4 <HAL_RCC_ClockConfig+0x1bc>)
 8008096:	689b      	ldr	r3, [r3, #8]
 8008098:	091b      	lsrs	r3, r3, #4
 800809a:	f003 030f 	and.w	r3, r3, #15
 800809e:	490a      	ldr	r1, [pc, #40]	; (80080c8 <HAL_RCC_ClockConfig+0x1c0>)
 80080a0:	5ccb      	ldrb	r3, [r1, r3]
 80080a2:	fa22 f303 	lsr.w	r3, r2, r3
 80080a6:	4a09      	ldr	r2, [pc, #36]	; (80080cc <HAL_RCC_ClockConfig+0x1c4>)
 80080a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80080aa:	4b09      	ldr	r3, [pc, #36]	; (80080d0 <HAL_RCC_ClockConfig+0x1c8>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4618      	mov	r0, r3
 80080b0:	f7fb fe3e 	bl	8003d30 <HAL_InitTick>

  return HAL_OK;
 80080b4:	2300      	movs	r3, #0
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3710      	adds	r7, #16
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
 80080be:	bf00      	nop
 80080c0:	40023c00 	.word	0x40023c00
 80080c4:	40023800 	.word	0x40023800
 80080c8:	0800ff4c 	.word	0x0800ff4c
 80080cc:	20000050 	.word	0x20000050
 80080d0:	20000054 	.word	0x20000054

080080d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80080d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80080d8:	b094      	sub	sp, #80	; 0x50
 80080da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80080dc:	2300      	movs	r3, #0
 80080de:	647b      	str	r3, [r7, #68]	; 0x44
 80080e0:	2300      	movs	r3, #0
 80080e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80080e4:	2300      	movs	r3, #0
 80080e6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80080e8:	2300      	movs	r3, #0
 80080ea:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80080ec:	4b79      	ldr	r3, [pc, #484]	; (80082d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80080ee:	689b      	ldr	r3, [r3, #8]
 80080f0:	f003 030c 	and.w	r3, r3, #12
 80080f4:	2b08      	cmp	r3, #8
 80080f6:	d00d      	beq.n	8008114 <HAL_RCC_GetSysClockFreq+0x40>
 80080f8:	2b08      	cmp	r3, #8
 80080fa:	f200 80e1 	bhi.w	80082c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d002      	beq.n	8008108 <HAL_RCC_GetSysClockFreq+0x34>
 8008102:	2b04      	cmp	r3, #4
 8008104:	d003      	beq.n	800810e <HAL_RCC_GetSysClockFreq+0x3a>
 8008106:	e0db      	b.n	80082c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008108:	4b73      	ldr	r3, [pc, #460]	; (80082d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800810a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800810c:	e0db      	b.n	80082c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800810e:	4b73      	ldr	r3, [pc, #460]	; (80082dc <HAL_RCC_GetSysClockFreq+0x208>)
 8008110:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008112:	e0d8      	b.n	80082c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008114:	4b6f      	ldr	r3, [pc, #444]	; (80082d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008116:	685b      	ldr	r3, [r3, #4]
 8008118:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800811c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800811e:	4b6d      	ldr	r3, [pc, #436]	; (80082d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008126:	2b00      	cmp	r3, #0
 8008128:	d063      	beq.n	80081f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800812a:	4b6a      	ldr	r3, [pc, #424]	; (80082d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800812c:	685b      	ldr	r3, [r3, #4]
 800812e:	099b      	lsrs	r3, r3, #6
 8008130:	2200      	movs	r2, #0
 8008132:	63bb      	str	r3, [r7, #56]	; 0x38
 8008134:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008138:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800813c:	633b      	str	r3, [r7, #48]	; 0x30
 800813e:	2300      	movs	r3, #0
 8008140:	637b      	str	r3, [r7, #52]	; 0x34
 8008142:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008146:	4622      	mov	r2, r4
 8008148:	462b      	mov	r3, r5
 800814a:	f04f 0000 	mov.w	r0, #0
 800814e:	f04f 0100 	mov.w	r1, #0
 8008152:	0159      	lsls	r1, r3, #5
 8008154:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008158:	0150      	lsls	r0, r2, #5
 800815a:	4602      	mov	r2, r0
 800815c:	460b      	mov	r3, r1
 800815e:	4621      	mov	r1, r4
 8008160:	1a51      	subs	r1, r2, r1
 8008162:	6139      	str	r1, [r7, #16]
 8008164:	4629      	mov	r1, r5
 8008166:	eb63 0301 	sbc.w	r3, r3, r1
 800816a:	617b      	str	r3, [r7, #20]
 800816c:	f04f 0200 	mov.w	r2, #0
 8008170:	f04f 0300 	mov.w	r3, #0
 8008174:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008178:	4659      	mov	r1, fp
 800817a:	018b      	lsls	r3, r1, #6
 800817c:	4651      	mov	r1, sl
 800817e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008182:	4651      	mov	r1, sl
 8008184:	018a      	lsls	r2, r1, #6
 8008186:	4651      	mov	r1, sl
 8008188:	ebb2 0801 	subs.w	r8, r2, r1
 800818c:	4659      	mov	r1, fp
 800818e:	eb63 0901 	sbc.w	r9, r3, r1
 8008192:	f04f 0200 	mov.w	r2, #0
 8008196:	f04f 0300 	mov.w	r3, #0
 800819a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800819e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80081a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80081a6:	4690      	mov	r8, r2
 80081a8:	4699      	mov	r9, r3
 80081aa:	4623      	mov	r3, r4
 80081ac:	eb18 0303 	adds.w	r3, r8, r3
 80081b0:	60bb      	str	r3, [r7, #8]
 80081b2:	462b      	mov	r3, r5
 80081b4:	eb49 0303 	adc.w	r3, r9, r3
 80081b8:	60fb      	str	r3, [r7, #12]
 80081ba:	f04f 0200 	mov.w	r2, #0
 80081be:	f04f 0300 	mov.w	r3, #0
 80081c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80081c6:	4629      	mov	r1, r5
 80081c8:	024b      	lsls	r3, r1, #9
 80081ca:	4621      	mov	r1, r4
 80081cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80081d0:	4621      	mov	r1, r4
 80081d2:	024a      	lsls	r2, r1, #9
 80081d4:	4610      	mov	r0, r2
 80081d6:	4619      	mov	r1, r3
 80081d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081da:	2200      	movs	r2, #0
 80081dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80081de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80081e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80081e4:	f7f8 fcc2 	bl	8000b6c <__aeabi_uldivmod>
 80081e8:	4602      	mov	r2, r0
 80081ea:	460b      	mov	r3, r1
 80081ec:	4613      	mov	r3, r2
 80081ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80081f0:	e058      	b.n	80082a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80081f2:	4b38      	ldr	r3, [pc, #224]	; (80082d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	099b      	lsrs	r3, r3, #6
 80081f8:	2200      	movs	r2, #0
 80081fa:	4618      	mov	r0, r3
 80081fc:	4611      	mov	r1, r2
 80081fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008202:	623b      	str	r3, [r7, #32]
 8008204:	2300      	movs	r3, #0
 8008206:	627b      	str	r3, [r7, #36]	; 0x24
 8008208:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800820c:	4642      	mov	r2, r8
 800820e:	464b      	mov	r3, r9
 8008210:	f04f 0000 	mov.w	r0, #0
 8008214:	f04f 0100 	mov.w	r1, #0
 8008218:	0159      	lsls	r1, r3, #5
 800821a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800821e:	0150      	lsls	r0, r2, #5
 8008220:	4602      	mov	r2, r0
 8008222:	460b      	mov	r3, r1
 8008224:	4641      	mov	r1, r8
 8008226:	ebb2 0a01 	subs.w	sl, r2, r1
 800822a:	4649      	mov	r1, r9
 800822c:	eb63 0b01 	sbc.w	fp, r3, r1
 8008230:	f04f 0200 	mov.w	r2, #0
 8008234:	f04f 0300 	mov.w	r3, #0
 8008238:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800823c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008240:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008244:	ebb2 040a 	subs.w	r4, r2, sl
 8008248:	eb63 050b 	sbc.w	r5, r3, fp
 800824c:	f04f 0200 	mov.w	r2, #0
 8008250:	f04f 0300 	mov.w	r3, #0
 8008254:	00eb      	lsls	r3, r5, #3
 8008256:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800825a:	00e2      	lsls	r2, r4, #3
 800825c:	4614      	mov	r4, r2
 800825e:	461d      	mov	r5, r3
 8008260:	4643      	mov	r3, r8
 8008262:	18e3      	adds	r3, r4, r3
 8008264:	603b      	str	r3, [r7, #0]
 8008266:	464b      	mov	r3, r9
 8008268:	eb45 0303 	adc.w	r3, r5, r3
 800826c:	607b      	str	r3, [r7, #4]
 800826e:	f04f 0200 	mov.w	r2, #0
 8008272:	f04f 0300 	mov.w	r3, #0
 8008276:	e9d7 4500 	ldrd	r4, r5, [r7]
 800827a:	4629      	mov	r1, r5
 800827c:	028b      	lsls	r3, r1, #10
 800827e:	4621      	mov	r1, r4
 8008280:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008284:	4621      	mov	r1, r4
 8008286:	028a      	lsls	r2, r1, #10
 8008288:	4610      	mov	r0, r2
 800828a:	4619      	mov	r1, r3
 800828c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800828e:	2200      	movs	r2, #0
 8008290:	61bb      	str	r3, [r7, #24]
 8008292:	61fa      	str	r2, [r7, #28]
 8008294:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008298:	f7f8 fc68 	bl	8000b6c <__aeabi_uldivmod>
 800829c:	4602      	mov	r2, r0
 800829e:	460b      	mov	r3, r1
 80082a0:	4613      	mov	r3, r2
 80082a2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80082a4:	4b0b      	ldr	r3, [pc, #44]	; (80082d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	0c1b      	lsrs	r3, r3, #16
 80082aa:	f003 0303 	and.w	r3, r3, #3
 80082ae:	3301      	adds	r3, #1
 80082b0:	005b      	lsls	r3, r3, #1
 80082b2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80082b4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80082b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80082b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80082bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80082be:	e002      	b.n	80082c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80082c0:	4b05      	ldr	r3, [pc, #20]	; (80082d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80082c2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80082c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80082c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80082c8:	4618      	mov	r0, r3
 80082ca:	3750      	adds	r7, #80	; 0x50
 80082cc:	46bd      	mov	sp, r7
 80082ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80082d2:	bf00      	nop
 80082d4:	40023800 	.word	0x40023800
 80082d8:	00f42400 	.word	0x00f42400
 80082dc:	007a1200 	.word	0x007a1200

080082e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80082e0:	b480      	push	{r7}
 80082e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80082e4:	4b03      	ldr	r3, [pc, #12]	; (80082f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80082e6:	681b      	ldr	r3, [r3, #0]
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr
 80082f2:	bf00      	nop
 80082f4:	20000050 	.word	0x20000050

080082f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80082fc:	f7ff fff0 	bl	80082e0 <HAL_RCC_GetHCLKFreq>
 8008300:	4602      	mov	r2, r0
 8008302:	4b05      	ldr	r3, [pc, #20]	; (8008318 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008304:	689b      	ldr	r3, [r3, #8]
 8008306:	0a9b      	lsrs	r3, r3, #10
 8008308:	f003 0307 	and.w	r3, r3, #7
 800830c:	4903      	ldr	r1, [pc, #12]	; (800831c <HAL_RCC_GetPCLK1Freq+0x24>)
 800830e:	5ccb      	ldrb	r3, [r1, r3]
 8008310:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008314:	4618      	mov	r0, r3
 8008316:	bd80      	pop	{r7, pc}
 8008318:	40023800 	.word	0x40023800
 800831c:	0800ff5c 	.word	0x0800ff5c

08008320 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008324:	f7ff ffdc 	bl	80082e0 <HAL_RCC_GetHCLKFreq>
 8008328:	4602      	mov	r2, r0
 800832a:	4b05      	ldr	r3, [pc, #20]	; (8008340 <HAL_RCC_GetPCLK2Freq+0x20>)
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	0b5b      	lsrs	r3, r3, #13
 8008330:	f003 0307 	and.w	r3, r3, #7
 8008334:	4903      	ldr	r1, [pc, #12]	; (8008344 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008336:	5ccb      	ldrb	r3, [r1, r3]
 8008338:	fa22 f303 	lsr.w	r3, r2, r3
}
 800833c:	4618      	mov	r0, r3
 800833e:	bd80      	pop	{r7, pc}
 8008340:	40023800 	.word	0x40023800
 8008344:	0800ff5c 	.word	0x0800ff5c

08008348 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008348:	b480      	push	{r7}
 800834a:	b083      	sub	sp, #12
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
 8008350:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	220f      	movs	r2, #15
 8008356:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008358:	4b12      	ldr	r3, [pc, #72]	; (80083a4 <HAL_RCC_GetClockConfig+0x5c>)
 800835a:	689b      	ldr	r3, [r3, #8]
 800835c:	f003 0203 	and.w	r2, r3, #3
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008364:	4b0f      	ldr	r3, [pc, #60]	; (80083a4 <HAL_RCC_GetClockConfig+0x5c>)
 8008366:	689b      	ldr	r3, [r3, #8]
 8008368:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008370:	4b0c      	ldr	r3, [pc, #48]	; (80083a4 <HAL_RCC_GetClockConfig+0x5c>)
 8008372:	689b      	ldr	r3, [r3, #8]
 8008374:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800837c:	4b09      	ldr	r3, [pc, #36]	; (80083a4 <HAL_RCC_GetClockConfig+0x5c>)
 800837e:	689b      	ldr	r3, [r3, #8]
 8008380:	08db      	lsrs	r3, r3, #3
 8008382:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800838a:	4b07      	ldr	r3, [pc, #28]	; (80083a8 <HAL_RCC_GetClockConfig+0x60>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f003 0207 	and.w	r2, r3, #7
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	601a      	str	r2, [r3, #0]
}
 8008396:	bf00      	nop
 8008398:	370c      	adds	r7, #12
 800839a:	46bd      	mov	sp, r7
 800839c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a0:	4770      	bx	lr
 80083a2:	bf00      	nop
 80083a4:	40023800 	.word	0x40023800
 80083a8:	40023c00 	.word	0x40023c00

080083ac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b082      	sub	sp, #8
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d101      	bne.n	80083be <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80083ba:	2301      	movs	r3, #1
 80083bc:	e041      	b.n	8008442 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083c4:	b2db      	uxtb	r3, r3
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d106      	bne.n	80083d8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2200      	movs	r2, #0
 80083ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 f839 	bl	800844a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2202      	movs	r2, #2
 80083dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681a      	ldr	r2, [r3, #0]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	3304      	adds	r3, #4
 80083e8:	4619      	mov	r1, r3
 80083ea:	4610      	mov	r0, r2
 80083ec:	f000 ff10 	bl	8009210 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2201      	movs	r2, #1
 80083f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2201      	movs	r2, #1
 80083fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2201      	movs	r2, #1
 8008404:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	2201      	movs	r2, #1
 800840c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2201      	movs	r2, #1
 8008414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2201      	movs	r2, #1
 800841c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2201      	movs	r2, #1
 8008424:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2201      	movs	r2, #1
 800842c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2201      	movs	r2, #1
 8008434:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2201      	movs	r2, #1
 800843c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008440:	2300      	movs	r3, #0
}
 8008442:	4618      	mov	r0, r3
 8008444:	3708      	adds	r7, #8
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}

0800844a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800844a:	b480      	push	{r7}
 800844c:	b083      	sub	sp, #12
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008452:	bf00      	nop
 8008454:	370c      	adds	r7, #12
 8008456:	46bd      	mov	sp, r7
 8008458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845c:	4770      	bx	lr
	...

08008460 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008460:	b480      	push	{r7}
 8008462:	b085      	sub	sp, #20
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800846e:	b2db      	uxtb	r3, r3
 8008470:	2b01      	cmp	r3, #1
 8008472:	d001      	beq.n	8008478 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008474:	2301      	movs	r3, #1
 8008476:	e04e      	b.n	8008516 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2202      	movs	r2, #2
 800847c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	68da      	ldr	r2, [r3, #12]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f042 0201 	orr.w	r2, r2, #1
 800848e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	4a23      	ldr	r2, [pc, #140]	; (8008524 <HAL_TIM_Base_Start_IT+0xc4>)
 8008496:	4293      	cmp	r3, r2
 8008498:	d022      	beq.n	80084e0 <HAL_TIM_Base_Start_IT+0x80>
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80084a2:	d01d      	beq.n	80084e0 <HAL_TIM_Base_Start_IT+0x80>
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a1f      	ldr	r2, [pc, #124]	; (8008528 <HAL_TIM_Base_Start_IT+0xc8>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d018      	beq.n	80084e0 <HAL_TIM_Base_Start_IT+0x80>
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	4a1e      	ldr	r2, [pc, #120]	; (800852c <HAL_TIM_Base_Start_IT+0xcc>)
 80084b4:	4293      	cmp	r3, r2
 80084b6:	d013      	beq.n	80084e0 <HAL_TIM_Base_Start_IT+0x80>
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	4a1c      	ldr	r2, [pc, #112]	; (8008530 <HAL_TIM_Base_Start_IT+0xd0>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d00e      	beq.n	80084e0 <HAL_TIM_Base_Start_IT+0x80>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	4a1b      	ldr	r2, [pc, #108]	; (8008534 <HAL_TIM_Base_Start_IT+0xd4>)
 80084c8:	4293      	cmp	r3, r2
 80084ca:	d009      	beq.n	80084e0 <HAL_TIM_Base_Start_IT+0x80>
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	4a19      	ldr	r2, [pc, #100]	; (8008538 <HAL_TIM_Base_Start_IT+0xd8>)
 80084d2:	4293      	cmp	r3, r2
 80084d4:	d004      	beq.n	80084e0 <HAL_TIM_Base_Start_IT+0x80>
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a18      	ldr	r2, [pc, #96]	; (800853c <HAL_TIM_Base_Start_IT+0xdc>)
 80084dc:	4293      	cmp	r3, r2
 80084de:	d111      	bne.n	8008504 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	689b      	ldr	r3, [r3, #8]
 80084e6:	f003 0307 	and.w	r3, r3, #7
 80084ea:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2b06      	cmp	r3, #6
 80084f0:	d010      	beq.n	8008514 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	681a      	ldr	r2, [r3, #0]
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	f042 0201 	orr.w	r2, r2, #1
 8008500:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008502:	e007      	b.n	8008514 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	681a      	ldr	r2, [r3, #0]
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	f042 0201 	orr.w	r2, r2, #1
 8008512:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008514:	2300      	movs	r3, #0
}
 8008516:	4618      	mov	r0, r3
 8008518:	3714      	adds	r7, #20
 800851a:	46bd      	mov	sp, r7
 800851c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008520:	4770      	bx	lr
 8008522:	bf00      	nop
 8008524:	40010000 	.word	0x40010000
 8008528:	40000400 	.word	0x40000400
 800852c:	40000800 	.word	0x40000800
 8008530:	40000c00 	.word	0x40000c00
 8008534:	40010400 	.word	0x40010400
 8008538:	40014000 	.word	0x40014000
 800853c:	40001800 	.word	0x40001800

08008540 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b082      	sub	sp, #8
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d101      	bne.n	8008552 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800854e:	2301      	movs	r3, #1
 8008550:	e041      	b.n	80085d6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008558:	b2db      	uxtb	r3, r3
 800855a:	2b00      	cmp	r3, #0
 800855c:	d106      	bne.n	800856c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2200      	movs	r2, #0
 8008562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f7fb fa4c 	bl	8003a04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2202      	movs	r2, #2
 8008570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681a      	ldr	r2, [r3, #0]
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	3304      	adds	r3, #4
 800857c:	4619      	mov	r1, r3
 800857e:	4610      	mov	r0, r2
 8008580:	f000 fe46 	bl	8009210 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2201      	movs	r2, #1
 8008588:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2201      	movs	r2, #1
 8008590:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2201      	movs	r2, #1
 8008598:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	2201      	movs	r2, #1
 80085a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2201      	movs	r2, #1
 80085a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2201      	movs	r2, #1
 80085b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2201      	movs	r2, #1
 80085b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2201      	movs	r2, #1
 80085c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2201      	movs	r2, #1
 80085c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2201      	movs	r2, #1
 80085d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80085d4:	2300      	movs	r3, #0
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3708      	adds	r7, #8
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}
	...

080085e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b084      	sub	sp, #16
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
 80085e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d109      	bne.n	8008604 <HAL_TIM_PWM_Start+0x24>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80085f6:	b2db      	uxtb	r3, r3
 80085f8:	2b01      	cmp	r3, #1
 80085fa:	bf14      	ite	ne
 80085fc:	2301      	movne	r3, #1
 80085fe:	2300      	moveq	r3, #0
 8008600:	b2db      	uxtb	r3, r3
 8008602:	e022      	b.n	800864a <HAL_TIM_PWM_Start+0x6a>
 8008604:	683b      	ldr	r3, [r7, #0]
 8008606:	2b04      	cmp	r3, #4
 8008608:	d109      	bne.n	800861e <HAL_TIM_PWM_Start+0x3e>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008610:	b2db      	uxtb	r3, r3
 8008612:	2b01      	cmp	r3, #1
 8008614:	bf14      	ite	ne
 8008616:	2301      	movne	r3, #1
 8008618:	2300      	moveq	r3, #0
 800861a:	b2db      	uxtb	r3, r3
 800861c:	e015      	b.n	800864a <HAL_TIM_PWM_Start+0x6a>
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	2b08      	cmp	r3, #8
 8008622:	d109      	bne.n	8008638 <HAL_TIM_PWM_Start+0x58>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800862a:	b2db      	uxtb	r3, r3
 800862c:	2b01      	cmp	r3, #1
 800862e:	bf14      	ite	ne
 8008630:	2301      	movne	r3, #1
 8008632:	2300      	moveq	r3, #0
 8008634:	b2db      	uxtb	r3, r3
 8008636:	e008      	b.n	800864a <HAL_TIM_PWM_Start+0x6a>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800863e:	b2db      	uxtb	r3, r3
 8008640:	2b01      	cmp	r3, #1
 8008642:	bf14      	ite	ne
 8008644:	2301      	movne	r3, #1
 8008646:	2300      	moveq	r3, #0
 8008648:	b2db      	uxtb	r3, r3
 800864a:	2b00      	cmp	r3, #0
 800864c:	d001      	beq.n	8008652 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800864e:	2301      	movs	r3, #1
 8008650:	e07c      	b.n	800874c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d104      	bne.n	8008662 <HAL_TIM_PWM_Start+0x82>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2202      	movs	r2, #2
 800865c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008660:	e013      	b.n	800868a <HAL_TIM_PWM_Start+0xaa>
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	2b04      	cmp	r3, #4
 8008666:	d104      	bne.n	8008672 <HAL_TIM_PWM_Start+0x92>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2202      	movs	r2, #2
 800866c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008670:	e00b      	b.n	800868a <HAL_TIM_PWM_Start+0xaa>
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	2b08      	cmp	r3, #8
 8008676:	d104      	bne.n	8008682 <HAL_TIM_PWM_Start+0xa2>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2202      	movs	r2, #2
 800867c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008680:	e003      	b.n	800868a <HAL_TIM_PWM_Start+0xaa>
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2202      	movs	r2, #2
 8008686:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	2201      	movs	r2, #1
 8008690:	6839      	ldr	r1, [r7, #0]
 8008692:	4618      	mov	r0, r3
 8008694:	f001 f818 	bl	80096c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4a2d      	ldr	r2, [pc, #180]	; (8008754 <HAL_TIM_PWM_Start+0x174>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d004      	beq.n	80086ac <HAL_TIM_PWM_Start+0xcc>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4a2c      	ldr	r2, [pc, #176]	; (8008758 <HAL_TIM_PWM_Start+0x178>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d101      	bne.n	80086b0 <HAL_TIM_PWM_Start+0xd0>
 80086ac:	2301      	movs	r3, #1
 80086ae:	e000      	b.n	80086b2 <HAL_TIM_PWM_Start+0xd2>
 80086b0:	2300      	movs	r3, #0
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d007      	beq.n	80086c6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80086c4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4a22      	ldr	r2, [pc, #136]	; (8008754 <HAL_TIM_PWM_Start+0x174>)
 80086cc:	4293      	cmp	r3, r2
 80086ce:	d022      	beq.n	8008716 <HAL_TIM_PWM_Start+0x136>
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80086d8:	d01d      	beq.n	8008716 <HAL_TIM_PWM_Start+0x136>
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a1f      	ldr	r2, [pc, #124]	; (800875c <HAL_TIM_PWM_Start+0x17c>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d018      	beq.n	8008716 <HAL_TIM_PWM_Start+0x136>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4a1d      	ldr	r2, [pc, #116]	; (8008760 <HAL_TIM_PWM_Start+0x180>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d013      	beq.n	8008716 <HAL_TIM_PWM_Start+0x136>
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	4a1c      	ldr	r2, [pc, #112]	; (8008764 <HAL_TIM_PWM_Start+0x184>)
 80086f4:	4293      	cmp	r3, r2
 80086f6:	d00e      	beq.n	8008716 <HAL_TIM_PWM_Start+0x136>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	4a16      	ldr	r2, [pc, #88]	; (8008758 <HAL_TIM_PWM_Start+0x178>)
 80086fe:	4293      	cmp	r3, r2
 8008700:	d009      	beq.n	8008716 <HAL_TIM_PWM_Start+0x136>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4a18      	ldr	r2, [pc, #96]	; (8008768 <HAL_TIM_PWM_Start+0x188>)
 8008708:	4293      	cmp	r3, r2
 800870a:	d004      	beq.n	8008716 <HAL_TIM_PWM_Start+0x136>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	4a16      	ldr	r2, [pc, #88]	; (800876c <HAL_TIM_PWM_Start+0x18c>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d111      	bne.n	800873a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	689b      	ldr	r3, [r3, #8]
 800871c:	f003 0307 	and.w	r3, r3, #7
 8008720:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	2b06      	cmp	r3, #6
 8008726:	d010      	beq.n	800874a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	681a      	ldr	r2, [r3, #0]
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f042 0201 	orr.w	r2, r2, #1
 8008736:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008738:	e007      	b.n	800874a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	681a      	ldr	r2, [r3, #0]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f042 0201 	orr.w	r2, r2, #1
 8008748:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800874a:	2300      	movs	r3, #0
}
 800874c:	4618      	mov	r0, r3
 800874e:	3710      	adds	r7, #16
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}
 8008754:	40010000 	.word	0x40010000
 8008758:	40010400 	.word	0x40010400
 800875c:	40000400 	.word	0x40000400
 8008760:	40000800 	.word	0x40000800
 8008764:	40000c00 	.word	0x40000c00
 8008768:	40014000 	.word	0x40014000
 800876c:	40001800 	.word	0x40001800

08008770 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b086      	sub	sp, #24
 8008774:	af00      	add	r7, sp, #0
 8008776:	60f8      	str	r0, [r7, #12]
 8008778:	60b9      	str	r1, [r7, #8]
 800877a:	607a      	str	r2, [r7, #4]
 800877c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800877e:	2300      	movs	r3, #0
 8008780:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d109      	bne.n	800879c <HAL_TIM_PWM_Start_DMA+0x2c>
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800878e:	b2db      	uxtb	r3, r3
 8008790:	2b02      	cmp	r3, #2
 8008792:	bf0c      	ite	eq
 8008794:	2301      	moveq	r3, #1
 8008796:	2300      	movne	r3, #0
 8008798:	b2db      	uxtb	r3, r3
 800879a:	e022      	b.n	80087e2 <HAL_TIM_PWM_Start_DMA+0x72>
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	2b04      	cmp	r3, #4
 80087a0:	d109      	bne.n	80087b6 <HAL_TIM_PWM_Start_DMA+0x46>
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80087a8:	b2db      	uxtb	r3, r3
 80087aa:	2b02      	cmp	r3, #2
 80087ac:	bf0c      	ite	eq
 80087ae:	2301      	moveq	r3, #1
 80087b0:	2300      	movne	r3, #0
 80087b2:	b2db      	uxtb	r3, r3
 80087b4:	e015      	b.n	80087e2 <HAL_TIM_PWM_Start_DMA+0x72>
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	2b08      	cmp	r3, #8
 80087ba:	d109      	bne.n	80087d0 <HAL_TIM_PWM_Start_DMA+0x60>
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80087c2:	b2db      	uxtb	r3, r3
 80087c4:	2b02      	cmp	r3, #2
 80087c6:	bf0c      	ite	eq
 80087c8:	2301      	moveq	r3, #1
 80087ca:	2300      	movne	r3, #0
 80087cc:	b2db      	uxtb	r3, r3
 80087ce:	e008      	b.n	80087e2 <HAL_TIM_PWM_Start_DMA+0x72>
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80087d6:	b2db      	uxtb	r3, r3
 80087d8:	2b02      	cmp	r3, #2
 80087da:	bf0c      	ite	eq
 80087dc:	2301      	moveq	r3, #1
 80087de:	2300      	movne	r3, #0
 80087e0:	b2db      	uxtb	r3, r3
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d001      	beq.n	80087ea <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80087e6:	2302      	movs	r3, #2
 80087e8:	e171      	b.n	8008ace <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d109      	bne.n	8008804 <HAL_TIM_PWM_Start_DMA+0x94>
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80087f6:	b2db      	uxtb	r3, r3
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	bf0c      	ite	eq
 80087fc:	2301      	moveq	r3, #1
 80087fe:	2300      	movne	r3, #0
 8008800:	b2db      	uxtb	r3, r3
 8008802:	e022      	b.n	800884a <HAL_TIM_PWM_Start_DMA+0xda>
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	2b04      	cmp	r3, #4
 8008808:	d109      	bne.n	800881e <HAL_TIM_PWM_Start_DMA+0xae>
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008810:	b2db      	uxtb	r3, r3
 8008812:	2b01      	cmp	r3, #1
 8008814:	bf0c      	ite	eq
 8008816:	2301      	moveq	r3, #1
 8008818:	2300      	movne	r3, #0
 800881a:	b2db      	uxtb	r3, r3
 800881c:	e015      	b.n	800884a <HAL_TIM_PWM_Start_DMA+0xda>
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	2b08      	cmp	r3, #8
 8008822:	d109      	bne.n	8008838 <HAL_TIM_PWM_Start_DMA+0xc8>
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800882a:	b2db      	uxtb	r3, r3
 800882c:	2b01      	cmp	r3, #1
 800882e:	bf0c      	ite	eq
 8008830:	2301      	moveq	r3, #1
 8008832:	2300      	movne	r3, #0
 8008834:	b2db      	uxtb	r3, r3
 8008836:	e008      	b.n	800884a <HAL_TIM_PWM_Start_DMA+0xda>
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800883e:	b2db      	uxtb	r3, r3
 8008840:	2b01      	cmp	r3, #1
 8008842:	bf0c      	ite	eq
 8008844:	2301      	moveq	r3, #1
 8008846:	2300      	movne	r3, #0
 8008848:	b2db      	uxtb	r3, r3
 800884a:	2b00      	cmp	r3, #0
 800884c:	d024      	beq.n	8008898 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d002      	beq.n	800885a <HAL_TIM_PWM_Start_DMA+0xea>
 8008854:	887b      	ldrh	r3, [r7, #2]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d101      	bne.n	800885e <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800885a:	2301      	movs	r3, #1
 800885c:	e137      	b.n	8008ace <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d104      	bne.n	800886e <HAL_TIM_PWM_Start_DMA+0xfe>
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	2202      	movs	r2, #2
 8008868:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800886c:	e016      	b.n	800889c <HAL_TIM_PWM_Start_DMA+0x12c>
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	2b04      	cmp	r3, #4
 8008872:	d104      	bne.n	800887e <HAL_TIM_PWM_Start_DMA+0x10e>
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	2202      	movs	r2, #2
 8008878:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800887c:	e00e      	b.n	800889c <HAL_TIM_PWM_Start_DMA+0x12c>
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	2b08      	cmp	r3, #8
 8008882:	d104      	bne.n	800888e <HAL_TIM_PWM_Start_DMA+0x11e>
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	2202      	movs	r2, #2
 8008888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800888c:	e006      	b.n	800889c <HAL_TIM_PWM_Start_DMA+0x12c>
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2202      	movs	r2, #2
 8008892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008896:	e001      	b.n	800889c <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8008898:	2301      	movs	r3, #1
 800889a:	e118      	b.n	8008ace <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	2b0c      	cmp	r3, #12
 80088a0:	f200 80ae 	bhi.w	8008a00 <HAL_TIM_PWM_Start_DMA+0x290>
 80088a4:	a201      	add	r2, pc, #4	; (adr r2, 80088ac <HAL_TIM_PWM_Start_DMA+0x13c>)
 80088a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088aa:	bf00      	nop
 80088ac:	080088e1 	.word	0x080088e1
 80088b0:	08008a01 	.word	0x08008a01
 80088b4:	08008a01 	.word	0x08008a01
 80088b8:	08008a01 	.word	0x08008a01
 80088bc:	08008929 	.word	0x08008929
 80088c0:	08008a01 	.word	0x08008a01
 80088c4:	08008a01 	.word	0x08008a01
 80088c8:	08008a01 	.word	0x08008a01
 80088cc:	08008971 	.word	0x08008971
 80088d0:	08008a01 	.word	0x08008a01
 80088d4:	08008a01 	.word	0x08008a01
 80088d8:	08008a01 	.word	0x08008a01
 80088dc:	080089b9 	.word	0x080089b9
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088e4:	4a7c      	ldr	r2, [pc, #496]	; (8008ad8 <HAL_TIM_PWM_Start_DMA+0x368>)
 80088e6:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ec:	4a7b      	ldr	r2, [pc, #492]	; (8008adc <HAL_TIM_PWM_Start_DMA+0x36c>)
 80088ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f4:	4a7a      	ldr	r2, [pc, #488]	; (8008ae0 <HAL_TIM_PWM_Start_DMA+0x370>)
 80088f6:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80088fc:	6879      	ldr	r1, [r7, #4]
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	3334      	adds	r3, #52	; 0x34
 8008904:	461a      	mov	r2, r3
 8008906:	887b      	ldrh	r3, [r7, #2]
 8008908:	f7fc f91a 	bl	8004b40 <HAL_DMA_Start_IT>
 800890c:	4603      	mov	r3, r0
 800890e:	2b00      	cmp	r3, #0
 8008910:	d001      	beq.n	8008916 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008912:	2301      	movs	r3, #1
 8008914:	e0db      	b.n	8008ace <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	68da      	ldr	r2, [r3, #12]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008924:	60da      	str	r2, [r3, #12]
      break;
 8008926:	e06e      	b.n	8008a06 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800892c:	4a6a      	ldr	r2, [pc, #424]	; (8008ad8 <HAL_TIM_PWM_Start_DMA+0x368>)
 800892e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008934:	4a69      	ldr	r2, [pc, #420]	; (8008adc <HAL_TIM_PWM_Start_DMA+0x36c>)
 8008936:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800893c:	4a68      	ldr	r2, [pc, #416]	; (8008ae0 <HAL_TIM_PWM_Start_DMA+0x370>)
 800893e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008944:	6879      	ldr	r1, [r7, #4]
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	3338      	adds	r3, #56	; 0x38
 800894c:	461a      	mov	r2, r3
 800894e:	887b      	ldrh	r3, [r7, #2]
 8008950:	f7fc f8f6 	bl	8004b40 <HAL_DMA_Start_IT>
 8008954:	4603      	mov	r3, r0
 8008956:	2b00      	cmp	r3, #0
 8008958:	d001      	beq.n	800895e <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800895a:	2301      	movs	r3, #1
 800895c:	e0b7      	b.n	8008ace <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	68da      	ldr	r2, [r3, #12]
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800896c:	60da      	str	r2, [r3, #12]
      break;
 800896e:	e04a      	b.n	8008a06 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008974:	4a58      	ldr	r2, [pc, #352]	; (8008ad8 <HAL_TIM_PWM_Start_DMA+0x368>)
 8008976:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800897c:	4a57      	ldr	r2, [pc, #348]	; (8008adc <HAL_TIM_PWM_Start_DMA+0x36c>)
 800897e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008984:	4a56      	ldr	r2, [pc, #344]	; (8008ae0 <HAL_TIM_PWM_Start_DMA+0x370>)
 8008986:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800898c:	6879      	ldr	r1, [r7, #4]
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	333c      	adds	r3, #60	; 0x3c
 8008994:	461a      	mov	r2, r3
 8008996:	887b      	ldrh	r3, [r7, #2]
 8008998:	f7fc f8d2 	bl	8004b40 <HAL_DMA_Start_IT>
 800899c:	4603      	mov	r3, r0
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d001      	beq.n	80089a6 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80089a2:	2301      	movs	r3, #1
 80089a4:	e093      	b.n	8008ace <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	68da      	ldr	r2, [r3, #12]
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80089b4:	60da      	str	r2, [r3, #12]
      break;
 80089b6:	e026      	b.n	8008a06 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089bc:	4a46      	ldr	r2, [pc, #280]	; (8008ad8 <HAL_TIM_PWM_Start_DMA+0x368>)
 80089be:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089c4:	4a45      	ldr	r2, [pc, #276]	; (8008adc <HAL_TIM_PWM_Start_DMA+0x36c>)
 80089c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089cc:	4a44      	ldr	r2, [pc, #272]	; (8008ae0 <HAL_TIM_PWM_Start_DMA+0x370>)
 80089ce:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80089d4:	6879      	ldr	r1, [r7, #4]
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	3340      	adds	r3, #64	; 0x40
 80089dc:	461a      	mov	r2, r3
 80089de:	887b      	ldrh	r3, [r7, #2]
 80089e0:	f7fc f8ae 	bl	8004b40 <HAL_DMA_Start_IT>
 80089e4:	4603      	mov	r3, r0
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d001      	beq.n	80089ee <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80089ea:	2301      	movs	r3, #1
 80089ec:	e06f      	b.n	8008ace <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	68da      	ldr	r2, [r3, #12]
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80089fc:	60da      	str	r2, [r3, #12]
      break;
 80089fe:	e002      	b.n	8008a06 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8008a00:	2301      	movs	r3, #1
 8008a02:	75fb      	strb	r3, [r7, #23]
      break;
 8008a04:	bf00      	nop
  }

  if (status == HAL_OK)
 8008a06:	7dfb      	ldrb	r3, [r7, #23]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d15f      	bne.n	8008acc <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	2201      	movs	r2, #1
 8008a12:	68b9      	ldr	r1, [r7, #8]
 8008a14:	4618      	mov	r0, r3
 8008a16:	f000 fe57 	bl	80096c8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	4a31      	ldr	r2, [pc, #196]	; (8008ae4 <HAL_TIM_PWM_Start_DMA+0x374>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d004      	beq.n	8008a2e <HAL_TIM_PWM_Start_DMA+0x2be>
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a2f      	ldr	r2, [pc, #188]	; (8008ae8 <HAL_TIM_PWM_Start_DMA+0x378>)
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	d101      	bne.n	8008a32 <HAL_TIM_PWM_Start_DMA+0x2c2>
 8008a2e:	2301      	movs	r3, #1
 8008a30:	e000      	b.n	8008a34 <HAL_TIM_PWM_Start_DMA+0x2c4>
 8008a32:	2300      	movs	r3, #0
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d007      	beq.n	8008a48 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008a46:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4a25      	ldr	r2, [pc, #148]	; (8008ae4 <HAL_TIM_PWM_Start_DMA+0x374>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d022      	beq.n	8008a98 <HAL_TIM_PWM_Start_DMA+0x328>
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008a5a:	d01d      	beq.n	8008a98 <HAL_TIM_PWM_Start_DMA+0x328>
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a22      	ldr	r2, [pc, #136]	; (8008aec <HAL_TIM_PWM_Start_DMA+0x37c>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d018      	beq.n	8008a98 <HAL_TIM_PWM_Start_DMA+0x328>
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	4a21      	ldr	r2, [pc, #132]	; (8008af0 <HAL_TIM_PWM_Start_DMA+0x380>)
 8008a6c:	4293      	cmp	r3, r2
 8008a6e:	d013      	beq.n	8008a98 <HAL_TIM_PWM_Start_DMA+0x328>
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	4a1f      	ldr	r2, [pc, #124]	; (8008af4 <HAL_TIM_PWM_Start_DMA+0x384>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d00e      	beq.n	8008a98 <HAL_TIM_PWM_Start_DMA+0x328>
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4a1a      	ldr	r2, [pc, #104]	; (8008ae8 <HAL_TIM_PWM_Start_DMA+0x378>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d009      	beq.n	8008a98 <HAL_TIM_PWM_Start_DMA+0x328>
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	4a1b      	ldr	r2, [pc, #108]	; (8008af8 <HAL_TIM_PWM_Start_DMA+0x388>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d004      	beq.n	8008a98 <HAL_TIM_PWM_Start_DMA+0x328>
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4a1a      	ldr	r2, [pc, #104]	; (8008afc <HAL_TIM_PWM_Start_DMA+0x38c>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d111      	bne.n	8008abc <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	689b      	ldr	r3, [r3, #8]
 8008a9e:	f003 0307 	and.w	r3, r3, #7
 8008aa2:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	2b06      	cmp	r3, #6
 8008aa8:	d010      	beq.n	8008acc <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	681a      	ldr	r2, [r3, #0]
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f042 0201 	orr.w	r2, r2, #1
 8008ab8:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008aba:	e007      	b.n	8008acc <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	681a      	ldr	r2, [r3, #0]
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f042 0201 	orr.w	r2, r2, #1
 8008aca:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8008acc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	3718      	adds	r7, #24
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	bd80      	pop	{r7, pc}
 8008ad6:	bf00      	nop
 8008ad8:	080090ff 	.word	0x080090ff
 8008adc:	080091a7 	.word	0x080091a7
 8008ae0:	0800906d 	.word	0x0800906d
 8008ae4:	40010000 	.word	0x40010000
 8008ae8:	40010400 	.word	0x40010400
 8008aec:	40000400 	.word	0x40000400
 8008af0:	40000800 	.word	0x40000800
 8008af4:	40000c00 	.word	0x40000c00
 8008af8:	40014000 	.word	0x40014000
 8008afc:	40001800 	.word	0x40001800

08008b00 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b084      	sub	sp, #16
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	2b0c      	cmp	r3, #12
 8008b12:	d855      	bhi.n	8008bc0 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8008b14:	a201      	add	r2, pc, #4	; (adr r2, 8008b1c <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8008b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b1a:	bf00      	nop
 8008b1c:	08008b51 	.word	0x08008b51
 8008b20:	08008bc1 	.word	0x08008bc1
 8008b24:	08008bc1 	.word	0x08008bc1
 8008b28:	08008bc1 	.word	0x08008bc1
 8008b2c:	08008b6d 	.word	0x08008b6d
 8008b30:	08008bc1 	.word	0x08008bc1
 8008b34:	08008bc1 	.word	0x08008bc1
 8008b38:	08008bc1 	.word	0x08008bc1
 8008b3c:	08008b89 	.word	0x08008b89
 8008b40:	08008bc1 	.word	0x08008bc1
 8008b44:	08008bc1 	.word	0x08008bc1
 8008b48:	08008bc1 	.word	0x08008bc1
 8008b4c:	08008ba5 	.word	0x08008ba5
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	68da      	ldr	r2, [r3, #12]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008b5e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b64:	4618      	mov	r0, r3
 8008b66:	f7fc f8b3 	bl	8004cd0 <HAL_DMA_Abort_IT>
      break;
 8008b6a:	e02c      	b.n	8008bc6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	68da      	ldr	r2, [r3, #12]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b7a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b80:	4618      	mov	r0, r3
 8008b82:	f7fc f8a5 	bl	8004cd0 <HAL_DMA_Abort_IT>
      break;
 8008b86:	e01e      	b.n	8008bc6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	68da      	ldr	r2, [r3, #12]
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008b96:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f7fc f897 	bl	8004cd0 <HAL_DMA_Abort_IT>
      break;
 8008ba2:	e010      	b.n	8008bc6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	68da      	ldr	r2, [r3, #12]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008bb2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008bb8:	4618      	mov	r0, r3
 8008bba:	f7fc f889 	bl	8004cd0 <HAL_DMA_Abort_IT>
      break;
 8008bbe:	e002      	b.n	8008bc6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	73fb      	strb	r3, [r7, #15]
      break;
 8008bc4:	bf00      	nop
  }

  if (status == HAL_OK)
 8008bc6:	7bfb      	ldrb	r3, [r7, #15]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d161      	bne.n	8008c90 <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	6839      	ldr	r1, [r7, #0]
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	f000 fd77 	bl	80096c8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	4a2f      	ldr	r2, [pc, #188]	; (8008c9c <HAL_TIM_PWM_Stop_DMA+0x19c>)
 8008be0:	4293      	cmp	r3, r2
 8008be2:	d004      	beq.n	8008bee <HAL_TIM_PWM_Stop_DMA+0xee>
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4a2d      	ldr	r2, [pc, #180]	; (8008ca0 <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d101      	bne.n	8008bf2 <HAL_TIM_PWM_Stop_DMA+0xf2>
 8008bee:	2301      	movs	r3, #1
 8008bf0:	e000      	b.n	8008bf4 <HAL_TIM_PWM_Stop_DMA+0xf4>
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d017      	beq.n	8008c28 <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	6a1a      	ldr	r2, [r3, #32]
 8008bfe:	f241 1311 	movw	r3, #4369	; 0x1111
 8008c02:	4013      	ands	r3, r2
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d10f      	bne.n	8008c28 <HAL_TIM_PWM_Stop_DMA+0x128>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	6a1a      	ldr	r2, [r3, #32]
 8008c0e:	f240 4344 	movw	r3, #1092	; 0x444
 8008c12:	4013      	ands	r3, r2
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d107      	bne.n	8008c28 <HAL_TIM_PWM_Stop_DMA+0x128>
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008c26:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	6a1a      	ldr	r2, [r3, #32]
 8008c2e:	f241 1311 	movw	r3, #4369	; 0x1111
 8008c32:	4013      	ands	r3, r2
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d10f      	bne.n	8008c58 <HAL_TIM_PWM_Stop_DMA+0x158>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	6a1a      	ldr	r2, [r3, #32]
 8008c3e:	f240 4344 	movw	r3, #1092	; 0x444
 8008c42:	4013      	ands	r3, r2
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d107      	bne.n	8008c58 <HAL_TIM_PWM_Stop_DMA+0x158>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	f022 0201 	bic.w	r2, r2, #1
 8008c56:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d104      	bne.n	8008c68 <HAL_TIM_PWM_Stop_DMA+0x168>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	2201      	movs	r2, #1
 8008c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c66:	e013      	b.n	8008c90 <HAL_TIM_PWM_Stop_DMA+0x190>
 8008c68:	683b      	ldr	r3, [r7, #0]
 8008c6a:	2b04      	cmp	r3, #4
 8008c6c:	d104      	bne.n	8008c78 <HAL_TIM_PWM_Stop_DMA+0x178>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2201      	movs	r2, #1
 8008c72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c76:	e00b      	b.n	8008c90 <HAL_TIM_PWM_Stop_DMA+0x190>
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	2b08      	cmp	r3, #8
 8008c7c:	d104      	bne.n	8008c88 <HAL_TIM_PWM_Stop_DMA+0x188>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2201      	movs	r2, #1
 8008c82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c86:	e003      	b.n	8008c90 <HAL_TIM_PWM_Stop_DMA+0x190>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8008c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3710      	adds	r7, #16
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bd80      	pop	{r7, pc}
 8008c9a:	bf00      	nop
 8008c9c:	40010000 	.word	0x40010000
 8008ca0:	40010400 	.word	0x40010400

08008ca4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b084      	sub	sp, #16
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	68db      	ldr	r3, [r3, #12]
 8008cb2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	691b      	ldr	r3, [r3, #16]
 8008cba:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	f003 0302 	and.w	r3, r3, #2
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d020      	beq.n	8008d08 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	f003 0302 	and.w	r3, r3, #2
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d01b      	beq.n	8008d08 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f06f 0202 	mvn.w	r2, #2
 8008cd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2201      	movs	r2, #1
 8008cde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	699b      	ldr	r3, [r3, #24]
 8008ce6:	f003 0303 	and.w	r3, r3, #3
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d003      	beq.n	8008cf6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008cee:	6878      	ldr	r0, [r7, #4]
 8008cf0:	f000 f994 	bl	800901c <HAL_TIM_IC_CaptureCallback>
 8008cf4:	e005      	b.n	8008d02 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f000 f986 	bl	8009008 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cfc:	6878      	ldr	r0, [r7, #4]
 8008cfe:	f7f8 fb3d 	bl	800137c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2200      	movs	r2, #0
 8008d06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	f003 0304 	and.w	r3, r3, #4
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d020      	beq.n	8008d54 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	f003 0304 	and.w	r3, r3, #4
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d01b      	beq.n	8008d54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	f06f 0204 	mvn.w	r2, #4
 8008d24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2202      	movs	r2, #2
 8008d2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	699b      	ldr	r3, [r3, #24]
 8008d32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d003      	beq.n	8008d42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f000 f96e 	bl	800901c <HAL_TIM_IC_CaptureCallback>
 8008d40:	e005      	b.n	8008d4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f000 f960 	bl	8009008 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f7f8 fb17 	bl	800137c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2200      	movs	r2, #0
 8008d52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008d54:	68bb      	ldr	r3, [r7, #8]
 8008d56:	f003 0308 	and.w	r3, r3, #8
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d020      	beq.n	8008da0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	f003 0308 	and.w	r3, r3, #8
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d01b      	beq.n	8008da0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f06f 0208 	mvn.w	r2, #8
 8008d70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2204      	movs	r2, #4
 8008d76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	69db      	ldr	r3, [r3, #28]
 8008d7e:	f003 0303 	and.w	r3, r3, #3
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d003      	beq.n	8008d8e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	f000 f948 	bl	800901c <HAL_TIM_IC_CaptureCallback>
 8008d8c:	e005      	b.n	8008d9a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 f93a 	bl	8009008 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d94:	6878      	ldr	r0, [r7, #4]
 8008d96:	f7f8 faf1 	bl	800137c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	f003 0310 	and.w	r3, r3, #16
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d020      	beq.n	8008dec <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	f003 0310 	and.w	r3, r3, #16
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d01b      	beq.n	8008dec <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f06f 0210 	mvn.w	r2, #16
 8008dbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2208      	movs	r2, #8
 8008dc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	69db      	ldr	r3, [r3, #28]
 8008dca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d003      	beq.n	8008dda <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f000 f922 	bl	800901c <HAL_TIM_IC_CaptureCallback>
 8008dd8:	e005      	b.n	8008de6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 f914 	bl	8009008 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	f7f8 facb 	bl	800137c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2200      	movs	r2, #0
 8008dea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008dec:	68bb      	ldr	r3, [r7, #8]
 8008dee:	f003 0301 	and.w	r3, r3, #1
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d00c      	beq.n	8008e10 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	f003 0301 	and.w	r3, r3, #1
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d007      	beq.n	8008e10 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f06f 0201 	mvn.w	r2, #1
 8008e08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f7fa f9b0 	bl	8003170 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d00c      	beq.n	8008e34 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d007      	beq.n	8008e34 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008e2e:	6878      	ldr	r0, [r7, #4]
 8008e30:	f000 fcf6 	bl	8009820 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d00c      	beq.n	8008e58 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d007      	beq.n	8008e58 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 f8f6 	bl	8009044 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	f003 0320 	and.w	r3, r3, #32
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d00c      	beq.n	8008e7c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	f003 0320 	and.w	r3, r3, #32
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d007      	beq.n	8008e7c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f06f 0220 	mvn.w	r2, #32
 8008e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 fcc8 	bl	800980c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008e7c:	bf00      	nop
 8008e7e:	3710      	adds	r7, #16
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b086      	sub	sp, #24
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	60f8      	str	r0, [r7, #12]
 8008e8c:	60b9      	str	r1, [r7, #8]
 8008e8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008e90:	2300      	movs	r3, #0
 8008e92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e9a:	2b01      	cmp	r3, #1
 8008e9c:	d101      	bne.n	8008ea2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008e9e:	2302      	movs	r3, #2
 8008ea0:	e0ae      	b.n	8009000 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	2201      	movs	r2, #1
 8008ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2b0c      	cmp	r3, #12
 8008eae:	f200 809f 	bhi.w	8008ff0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008eb2:	a201      	add	r2, pc, #4	; (adr r2, 8008eb8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eb8:	08008eed 	.word	0x08008eed
 8008ebc:	08008ff1 	.word	0x08008ff1
 8008ec0:	08008ff1 	.word	0x08008ff1
 8008ec4:	08008ff1 	.word	0x08008ff1
 8008ec8:	08008f2d 	.word	0x08008f2d
 8008ecc:	08008ff1 	.word	0x08008ff1
 8008ed0:	08008ff1 	.word	0x08008ff1
 8008ed4:	08008ff1 	.word	0x08008ff1
 8008ed8:	08008f6f 	.word	0x08008f6f
 8008edc:	08008ff1 	.word	0x08008ff1
 8008ee0:	08008ff1 	.word	0x08008ff1
 8008ee4:	08008ff1 	.word	0x08008ff1
 8008ee8:	08008faf 	.word	0x08008faf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	68b9      	ldr	r1, [r7, #8]
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f000 fa38 	bl	8009368 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	699a      	ldr	r2, [r3, #24]
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f042 0208 	orr.w	r2, r2, #8
 8008f06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	699a      	ldr	r2, [r3, #24]
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f022 0204 	bic.w	r2, r2, #4
 8008f16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	6999      	ldr	r1, [r3, #24]
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	691a      	ldr	r2, [r3, #16]
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	430a      	orrs	r2, r1
 8008f28:	619a      	str	r2, [r3, #24]
      break;
 8008f2a:	e064      	b.n	8008ff6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	68b9      	ldr	r1, [r7, #8]
 8008f32:	4618      	mov	r0, r3
 8008f34:	f000 fa88 	bl	8009448 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	699a      	ldr	r2, [r3, #24]
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008f46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	699a      	ldr	r2, [r3, #24]
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008f56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	6999      	ldr	r1, [r3, #24]
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	691b      	ldr	r3, [r3, #16]
 8008f62:	021a      	lsls	r2, r3, #8
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	430a      	orrs	r2, r1
 8008f6a:	619a      	str	r2, [r3, #24]
      break;
 8008f6c:	e043      	b.n	8008ff6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	68b9      	ldr	r1, [r7, #8]
 8008f74:	4618      	mov	r0, r3
 8008f76:	f000 fadd 	bl	8009534 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	69da      	ldr	r2, [r3, #28]
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f042 0208 	orr.w	r2, r2, #8
 8008f88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	69da      	ldr	r2, [r3, #28]
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f022 0204 	bic.w	r2, r2, #4
 8008f98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	69d9      	ldr	r1, [r3, #28]
 8008fa0:	68bb      	ldr	r3, [r7, #8]
 8008fa2:	691a      	ldr	r2, [r3, #16]
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	430a      	orrs	r2, r1
 8008faa:	61da      	str	r2, [r3, #28]
      break;
 8008fac:	e023      	b.n	8008ff6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	68b9      	ldr	r1, [r7, #8]
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f000 fb31 	bl	800961c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	69da      	ldr	r2, [r3, #28]
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008fc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	69da      	ldr	r2, [r3, #28]
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008fd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	69d9      	ldr	r1, [r3, #28]
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	691b      	ldr	r3, [r3, #16]
 8008fe4:	021a      	lsls	r2, r3, #8
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	430a      	orrs	r2, r1
 8008fec:	61da      	str	r2, [r3, #28]
      break;
 8008fee:	e002      	b.n	8008ff6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008ff0:	2301      	movs	r3, #1
 8008ff2:	75fb      	strb	r3, [r7, #23]
      break;
 8008ff4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008ffe:	7dfb      	ldrb	r3, [r7, #23]
}
 8009000:	4618      	mov	r0, r3
 8009002:	3718      	adds	r7, #24
 8009004:	46bd      	mov	sp, r7
 8009006:	bd80      	pop	{r7, pc}

08009008 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009008:	b480      	push	{r7}
 800900a:	b083      	sub	sp, #12
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009010:	bf00      	nop
 8009012:	370c      	adds	r7, #12
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr

0800901c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800901c:	b480      	push	{r7}
 800901e:	b083      	sub	sp, #12
 8009020:	af00      	add	r7, sp, #0
 8009022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009024:	bf00      	nop
 8009026:	370c      	adds	r7, #12
 8009028:	46bd      	mov	sp, r7
 800902a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902e:	4770      	bx	lr

08009030 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009030:	b480      	push	{r7}
 8009032:	b083      	sub	sp, #12
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8009038:	bf00      	nop
 800903a:	370c      	adds	r7, #12
 800903c:	46bd      	mov	sp, r7
 800903e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009042:	4770      	bx	lr

08009044 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009044:	b480      	push	{r7}
 8009046:	b083      	sub	sp, #12
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800904c:	bf00      	nop
 800904e:	370c      	adds	r7, #12
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr

08009058 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009058:	b480      	push	{r7}
 800905a:	b083      	sub	sp, #12
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8009060:	bf00      	nop
 8009062:	370c      	adds	r7, #12
 8009064:	46bd      	mov	sp, r7
 8009066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906a:	4770      	bx	lr

0800906c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b084      	sub	sp, #16
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009078:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800907e:	687a      	ldr	r2, [r7, #4]
 8009080:	429a      	cmp	r2, r3
 8009082:	d107      	bne.n	8009094 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	2201      	movs	r2, #1
 8009088:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	2201      	movs	r2, #1
 800908e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009092:	e02a      	b.n	80090ea <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009098:	687a      	ldr	r2, [r7, #4]
 800909a:	429a      	cmp	r2, r3
 800909c:	d107      	bne.n	80090ae <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2202      	movs	r2, #2
 80090a2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	2201      	movs	r2, #1
 80090a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80090ac:	e01d      	b.n	80090ea <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090b2:	687a      	ldr	r2, [r7, #4]
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d107      	bne.n	80090c8 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	2204      	movs	r2, #4
 80090bc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	2201      	movs	r2, #1
 80090c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80090c6:	e010      	b.n	80090ea <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090cc:	687a      	ldr	r2, [r7, #4]
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d107      	bne.n	80090e2 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	2208      	movs	r2, #8
 80090d6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2201      	movs	r2, #1
 80090dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80090e0:	e003      	b.n	80090ea <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	2201      	movs	r2, #1
 80090e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80090ea:	68f8      	ldr	r0, [r7, #12]
 80090ec:	f7ff ffb4 	bl	8009058 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	2200      	movs	r2, #0
 80090f4:	771a      	strb	r2, [r3, #28]
}
 80090f6:	bf00      	nop
 80090f8:	3710      	adds	r7, #16
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}

080090fe <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80090fe:	b580      	push	{r7, lr}
 8009100:	b084      	sub	sp, #16
 8009102:	af00      	add	r7, sp, #0
 8009104:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800910a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009110:	687a      	ldr	r2, [r7, #4]
 8009112:	429a      	cmp	r2, r3
 8009114:	d10b      	bne.n	800912e <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	2201      	movs	r2, #1
 800911a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	69db      	ldr	r3, [r3, #28]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d136      	bne.n	8009192 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2201      	movs	r2, #1
 8009128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800912c:	e031      	b.n	8009192 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009132:	687a      	ldr	r2, [r7, #4]
 8009134:	429a      	cmp	r2, r3
 8009136:	d10b      	bne.n	8009150 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2202      	movs	r2, #2
 800913c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	69db      	ldr	r3, [r3, #28]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d125      	bne.n	8009192 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2201      	movs	r2, #1
 800914a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800914e:	e020      	b.n	8009192 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009154:	687a      	ldr	r2, [r7, #4]
 8009156:	429a      	cmp	r2, r3
 8009158:	d10b      	bne.n	8009172 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2204      	movs	r2, #4
 800915e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	69db      	ldr	r3, [r3, #28]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d114      	bne.n	8009192 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	2201      	movs	r2, #1
 800916c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009170:	e00f      	b.n	8009192 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009176:	687a      	ldr	r2, [r7, #4]
 8009178:	429a      	cmp	r2, r3
 800917a:	d10a      	bne.n	8009192 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	2208      	movs	r2, #8
 8009180:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	69db      	ldr	r3, [r3, #28]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d103      	bne.n	8009192 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	2201      	movs	r2, #1
 800918e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009192:	68f8      	ldr	r0, [r7, #12]
 8009194:	f7f8 f8f2 	bl	800137c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	2200      	movs	r2, #0
 800919c:	771a      	strb	r2, [r3, #28]
}
 800919e:	bf00      	nop
 80091a0:	3710      	adds	r7, #16
 80091a2:	46bd      	mov	sp, r7
 80091a4:	bd80      	pop	{r7, pc}

080091a6 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80091a6:	b580      	push	{r7, lr}
 80091a8:	b084      	sub	sp, #16
 80091aa:	af00      	add	r7, sp, #0
 80091ac:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091b2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091b8:	687a      	ldr	r2, [r7, #4]
 80091ba:	429a      	cmp	r2, r3
 80091bc:	d103      	bne.n	80091c6 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	2201      	movs	r2, #1
 80091c2:	771a      	strb	r2, [r3, #28]
 80091c4:	e019      	b.n	80091fa <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091ca:	687a      	ldr	r2, [r7, #4]
 80091cc:	429a      	cmp	r2, r3
 80091ce:	d103      	bne.n	80091d8 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2202      	movs	r2, #2
 80091d4:	771a      	strb	r2, [r3, #28]
 80091d6:	e010      	b.n	80091fa <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091dc:	687a      	ldr	r2, [r7, #4]
 80091de:	429a      	cmp	r2, r3
 80091e0:	d103      	bne.n	80091ea <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2204      	movs	r2, #4
 80091e6:	771a      	strb	r2, [r3, #28]
 80091e8:	e007      	b.n	80091fa <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091ee:	687a      	ldr	r2, [r7, #4]
 80091f0:	429a      	cmp	r2, r3
 80091f2:	d102      	bne.n	80091fa <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	2208      	movs	r2, #8
 80091f8:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80091fa:	68f8      	ldr	r0, [r7, #12]
 80091fc:	f7ff ff18 	bl	8009030 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	2200      	movs	r2, #0
 8009204:	771a      	strb	r2, [r3, #28]
}
 8009206:	bf00      	nop
 8009208:	3710      	adds	r7, #16
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
	...

08009210 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009210:	b480      	push	{r7}
 8009212:	b085      	sub	sp, #20
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	4a46      	ldr	r2, [pc, #280]	; (800933c <TIM_Base_SetConfig+0x12c>)
 8009224:	4293      	cmp	r3, r2
 8009226:	d013      	beq.n	8009250 <TIM_Base_SetConfig+0x40>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800922e:	d00f      	beq.n	8009250 <TIM_Base_SetConfig+0x40>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	4a43      	ldr	r2, [pc, #268]	; (8009340 <TIM_Base_SetConfig+0x130>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d00b      	beq.n	8009250 <TIM_Base_SetConfig+0x40>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	4a42      	ldr	r2, [pc, #264]	; (8009344 <TIM_Base_SetConfig+0x134>)
 800923c:	4293      	cmp	r3, r2
 800923e:	d007      	beq.n	8009250 <TIM_Base_SetConfig+0x40>
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	4a41      	ldr	r2, [pc, #260]	; (8009348 <TIM_Base_SetConfig+0x138>)
 8009244:	4293      	cmp	r3, r2
 8009246:	d003      	beq.n	8009250 <TIM_Base_SetConfig+0x40>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	4a40      	ldr	r2, [pc, #256]	; (800934c <TIM_Base_SetConfig+0x13c>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d108      	bne.n	8009262 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009256:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	68fa      	ldr	r2, [r7, #12]
 800925e:	4313      	orrs	r3, r2
 8009260:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	4a35      	ldr	r2, [pc, #212]	; (800933c <TIM_Base_SetConfig+0x12c>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d02b      	beq.n	80092c2 <TIM_Base_SetConfig+0xb2>
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009270:	d027      	beq.n	80092c2 <TIM_Base_SetConfig+0xb2>
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	4a32      	ldr	r2, [pc, #200]	; (8009340 <TIM_Base_SetConfig+0x130>)
 8009276:	4293      	cmp	r3, r2
 8009278:	d023      	beq.n	80092c2 <TIM_Base_SetConfig+0xb2>
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	4a31      	ldr	r2, [pc, #196]	; (8009344 <TIM_Base_SetConfig+0x134>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d01f      	beq.n	80092c2 <TIM_Base_SetConfig+0xb2>
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	4a30      	ldr	r2, [pc, #192]	; (8009348 <TIM_Base_SetConfig+0x138>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d01b      	beq.n	80092c2 <TIM_Base_SetConfig+0xb2>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	4a2f      	ldr	r2, [pc, #188]	; (800934c <TIM_Base_SetConfig+0x13c>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d017      	beq.n	80092c2 <TIM_Base_SetConfig+0xb2>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	4a2e      	ldr	r2, [pc, #184]	; (8009350 <TIM_Base_SetConfig+0x140>)
 8009296:	4293      	cmp	r3, r2
 8009298:	d013      	beq.n	80092c2 <TIM_Base_SetConfig+0xb2>
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	4a2d      	ldr	r2, [pc, #180]	; (8009354 <TIM_Base_SetConfig+0x144>)
 800929e:	4293      	cmp	r3, r2
 80092a0:	d00f      	beq.n	80092c2 <TIM_Base_SetConfig+0xb2>
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	4a2c      	ldr	r2, [pc, #176]	; (8009358 <TIM_Base_SetConfig+0x148>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d00b      	beq.n	80092c2 <TIM_Base_SetConfig+0xb2>
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	4a2b      	ldr	r2, [pc, #172]	; (800935c <TIM_Base_SetConfig+0x14c>)
 80092ae:	4293      	cmp	r3, r2
 80092b0:	d007      	beq.n	80092c2 <TIM_Base_SetConfig+0xb2>
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	4a2a      	ldr	r2, [pc, #168]	; (8009360 <TIM_Base_SetConfig+0x150>)
 80092b6:	4293      	cmp	r3, r2
 80092b8:	d003      	beq.n	80092c2 <TIM_Base_SetConfig+0xb2>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	4a29      	ldr	r2, [pc, #164]	; (8009364 <TIM_Base_SetConfig+0x154>)
 80092be:	4293      	cmp	r3, r2
 80092c0:	d108      	bne.n	80092d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80092ca:	683b      	ldr	r3, [r7, #0]
 80092cc:	68db      	ldr	r3, [r3, #12]
 80092ce:	68fa      	ldr	r2, [r7, #12]
 80092d0:	4313      	orrs	r3, r2
 80092d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	695b      	ldr	r3, [r3, #20]
 80092de:	4313      	orrs	r3, r2
 80092e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	68fa      	ldr	r2, [r7, #12]
 80092e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	689a      	ldr	r2, [r3, #8]
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	4a10      	ldr	r2, [pc, #64]	; (800933c <TIM_Base_SetConfig+0x12c>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d003      	beq.n	8009308 <TIM_Base_SetConfig+0xf8>
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	4a12      	ldr	r2, [pc, #72]	; (800934c <TIM_Base_SetConfig+0x13c>)
 8009304:	4293      	cmp	r3, r2
 8009306:	d103      	bne.n	8009310 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	691a      	ldr	r2, [r3, #16]
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2201      	movs	r2, #1
 8009314:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	691b      	ldr	r3, [r3, #16]
 800931a:	f003 0301 	and.w	r3, r3, #1
 800931e:	2b01      	cmp	r3, #1
 8009320:	d105      	bne.n	800932e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	691b      	ldr	r3, [r3, #16]
 8009326:	f023 0201 	bic.w	r2, r3, #1
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	611a      	str	r2, [r3, #16]
  }
}
 800932e:	bf00      	nop
 8009330:	3714      	adds	r7, #20
 8009332:	46bd      	mov	sp, r7
 8009334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009338:	4770      	bx	lr
 800933a:	bf00      	nop
 800933c:	40010000 	.word	0x40010000
 8009340:	40000400 	.word	0x40000400
 8009344:	40000800 	.word	0x40000800
 8009348:	40000c00 	.word	0x40000c00
 800934c:	40010400 	.word	0x40010400
 8009350:	40014000 	.word	0x40014000
 8009354:	40014400 	.word	0x40014400
 8009358:	40014800 	.word	0x40014800
 800935c:	40001800 	.word	0x40001800
 8009360:	40001c00 	.word	0x40001c00
 8009364:	40002000 	.word	0x40002000

08009368 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009368:	b480      	push	{r7}
 800936a:	b087      	sub	sp, #28
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
 8009370:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6a1b      	ldr	r3, [r3, #32]
 8009376:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6a1b      	ldr	r3, [r3, #32]
 800937c:	f023 0201 	bic.w	r2, r3, #1
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	685b      	ldr	r3, [r3, #4]
 8009388:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	699b      	ldr	r3, [r3, #24]
 800938e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009396:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f023 0303 	bic.w	r3, r3, #3
 800939e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	68fa      	ldr	r2, [r7, #12]
 80093a6:	4313      	orrs	r3, r2
 80093a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80093aa:	697b      	ldr	r3, [r7, #20]
 80093ac:	f023 0302 	bic.w	r3, r3, #2
 80093b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80093b2:	683b      	ldr	r3, [r7, #0]
 80093b4:	689b      	ldr	r3, [r3, #8]
 80093b6:	697a      	ldr	r2, [r7, #20]
 80093b8:	4313      	orrs	r3, r2
 80093ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	4a20      	ldr	r2, [pc, #128]	; (8009440 <TIM_OC1_SetConfig+0xd8>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d003      	beq.n	80093cc <TIM_OC1_SetConfig+0x64>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	4a1f      	ldr	r2, [pc, #124]	; (8009444 <TIM_OC1_SetConfig+0xdc>)
 80093c8:	4293      	cmp	r3, r2
 80093ca:	d10c      	bne.n	80093e6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80093cc:	697b      	ldr	r3, [r7, #20]
 80093ce:	f023 0308 	bic.w	r3, r3, #8
 80093d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	68db      	ldr	r3, [r3, #12]
 80093d8:	697a      	ldr	r2, [r7, #20]
 80093da:	4313      	orrs	r3, r2
 80093dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80093de:	697b      	ldr	r3, [r7, #20]
 80093e0:	f023 0304 	bic.w	r3, r3, #4
 80093e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	4a15      	ldr	r2, [pc, #84]	; (8009440 <TIM_OC1_SetConfig+0xd8>)
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d003      	beq.n	80093f6 <TIM_OC1_SetConfig+0x8e>
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	4a14      	ldr	r2, [pc, #80]	; (8009444 <TIM_OC1_SetConfig+0xdc>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d111      	bne.n	800941a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80093fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009404:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	695b      	ldr	r3, [r3, #20]
 800940a:	693a      	ldr	r2, [r7, #16]
 800940c:	4313      	orrs	r3, r2
 800940e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	699b      	ldr	r3, [r3, #24]
 8009414:	693a      	ldr	r2, [r7, #16]
 8009416:	4313      	orrs	r3, r2
 8009418:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	693a      	ldr	r2, [r7, #16]
 800941e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	68fa      	ldr	r2, [r7, #12]
 8009424:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	685a      	ldr	r2, [r3, #4]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	697a      	ldr	r2, [r7, #20]
 8009432:	621a      	str	r2, [r3, #32]
}
 8009434:	bf00      	nop
 8009436:	371c      	adds	r7, #28
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr
 8009440:	40010000 	.word	0x40010000
 8009444:	40010400 	.word	0x40010400

08009448 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009448:	b480      	push	{r7}
 800944a:	b087      	sub	sp, #28
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	6a1b      	ldr	r3, [r3, #32]
 8009456:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6a1b      	ldr	r3, [r3, #32]
 800945c:	f023 0210 	bic.w	r2, r3, #16
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	685b      	ldr	r3, [r3, #4]
 8009468:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	699b      	ldr	r3, [r3, #24]
 800946e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009476:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800947e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	021b      	lsls	r3, r3, #8
 8009486:	68fa      	ldr	r2, [r7, #12]
 8009488:	4313      	orrs	r3, r2
 800948a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800948c:	697b      	ldr	r3, [r7, #20]
 800948e:	f023 0320 	bic.w	r3, r3, #32
 8009492:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	689b      	ldr	r3, [r3, #8]
 8009498:	011b      	lsls	r3, r3, #4
 800949a:	697a      	ldr	r2, [r7, #20]
 800949c:	4313      	orrs	r3, r2
 800949e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	4a22      	ldr	r2, [pc, #136]	; (800952c <TIM_OC2_SetConfig+0xe4>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d003      	beq.n	80094b0 <TIM_OC2_SetConfig+0x68>
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	4a21      	ldr	r2, [pc, #132]	; (8009530 <TIM_OC2_SetConfig+0xe8>)
 80094ac:	4293      	cmp	r3, r2
 80094ae:	d10d      	bne.n	80094cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80094b0:	697b      	ldr	r3, [r7, #20]
 80094b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80094b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80094b8:	683b      	ldr	r3, [r7, #0]
 80094ba:	68db      	ldr	r3, [r3, #12]
 80094bc:	011b      	lsls	r3, r3, #4
 80094be:	697a      	ldr	r2, [r7, #20]
 80094c0:	4313      	orrs	r3, r2
 80094c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80094c4:	697b      	ldr	r3, [r7, #20]
 80094c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094ca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	4a17      	ldr	r2, [pc, #92]	; (800952c <TIM_OC2_SetConfig+0xe4>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d003      	beq.n	80094dc <TIM_OC2_SetConfig+0x94>
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	4a16      	ldr	r2, [pc, #88]	; (8009530 <TIM_OC2_SetConfig+0xe8>)
 80094d8:	4293      	cmp	r3, r2
 80094da:	d113      	bne.n	8009504 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80094dc:	693b      	ldr	r3, [r7, #16]
 80094de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80094e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80094e4:	693b      	ldr	r3, [r7, #16]
 80094e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80094ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	695b      	ldr	r3, [r3, #20]
 80094f0:	009b      	lsls	r3, r3, #2
 80094f2:	693a      	ldr	r2, [r7, #16]
 80094f4:	4313      	orrs	r3, r2
 80094f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	699b      	ldr	r3, [r3, #24]
 80094fc:	009b      	lsls	r3, r3, #2
 80094fe:	693a      	ldr	r2, [r7, #16]
 8009500:	4313      	orrs	r3, r2
 8009502:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	693a      	ldr	r2, [r7, #16]
 8009508:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	68fa      	ldr	r2, [r7, #12]
 800950e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	685a      	ldr	r2, [r3, #4]
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	697a      	ldr	r2, [r7, #20]
 800951c:	621a      	str	r2, [r3, #32]
}
 800951e:	bf00      	nop
 8009520:	371c      	adds	r7, #28
 8009522:	46bd      	mov	sp, r7
 8009524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009528:	4770      	bx	lr
 800952a:	bf00      	nop
 800952c:	40010000 	.word	0x40010000
 8009530:	40010400 	.word	0x40010400

08009534 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009534:	b480      	push	{r7}
 8009536:	b087      	sub	sp, #28
 8009538:	af00      	add	r7, sp, #0
 800953a:	6078      	str	r0, [r7, #4]
 800953c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6a1b      	ldr	r3, [r3, #32]
 8009542:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6a1b      	ldr	r3, [r3, #32]
 8009548:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	685b      	ldr	r3, [r3, #4]
 8009554:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	69db      	ldr	r3, [r3, #28]
 800955a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009562:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	f023 0303 	bic.w	r3, r3, #3
 800956a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	68fa      	ldr	r2, [r7, #12]
 8009572:	4313      	orrs	r3, r2
 8009574:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009576:	697b      	ldr	r3, [r7, #20]
 8009578:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800957c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	689b      	ldr	r3, [r3, #8]
 8009582:	021b      	lsls	r3, r3, #8
 8009584:	697a      	ldr	r2, [r7, #20]
 8009586:	4313      	orrs	r3, r2
 8009588:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	4a21      	ldr	r2, [pc, #132]	; (8009614 <TIM_OC3_SetConfig+0xe0>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d003      	beq.n	800959a <TIM_OC3_SetConfig+0x66>
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	4a20      	ldr	r2, [pc, #128]	; (8009618 <TIM_OC3_SetConfig+0xe4>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d10d      	bne.n	80095b6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80095a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	68db      	ldr	r3, [r3, #12]
 80095a6:	021b      	lsls	r3, r3, #8
 80095a8:	697a      	ldr	r2, [r7, #20]
 80095aa:	4313      	orrs	r3, r2
 80095ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80095ae:	697b      	ldr	r3, [r7, #20]
 80095b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80095b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	4a16      	ldr	r2, [pc, #88]	; (8009614 <TIM_OC3_SetConfig+0xe0>)
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d003      	beq.n	80095c6 <TIM_OC3_SetConfig+0x92>
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	4a15      	ldr	r2, [pc, #84]	; (8009618 <TIM_OC3_SetConfig+0xe4>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d113      	bne.n	80095ee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80095cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80095d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80095d6:	683b      	ldr	r3, [r7, #0]
 80095d8:	695b      	ldr	r3, [r3, #20]
 80095da:	011b      	lsls	r3, r3, #4
 80095dc:	693a      	ldr	r2, [r7, #16]
 80095de:	4313      	orrs	r3, r2
 80095e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80095e2:	683b      	ldr	r3, [r7, #0]
 80095e4:	699b      	ldr	r3, [r3, #24]
 80095e6:	011b      	lsls	r3, r3, #4
 80095e8:	693a      	ldr	r2, [r7, #16]
 80095ea:	4313      	orrs	r3, r2
 80095ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	693a      	ldr	r2, [r7, #16]
 80095f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	68fa      	ldr	r2, [r7, #12]
 80095f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	685a      	ldr	r2, [r3, #4]
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	697a      	ldr	r2, [r7, #20]
 8009606:	621a      	str	r2, [r3, #32]
}
 8009608:	bf00      	nop
 800960a:	371c      	adds	r7, #28
 800960c:	46bd      	mov	sp, r7
 800960e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009612:	4770      	bx	lr
 8009614:	40010000 	.word	0x40010000
 8009618:	40010400 	.word	0x40010400

0800961c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800961c:	b480      	push	{r7}
 800961e:	b087      	sub	sp, #28
 8009620:	af00      	add	r7, sp, #0
 8009622:	6078      	str	r0, [r7, #4]
 8009624:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6a1b      	ldr	r3, [r3, #32]
 800962a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	6a1b      	ldr	r3, [r3, #32]
 8009630:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	685b      	ldr	r3, [r3, #4]
 800963c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	69db      	ldr	r3, [r3, #28]
 8009642:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800964a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009652:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	021b      	lsls	r3, r3, #8
 800965a:	68fa      	ldr	r2, [r7, #12]
 800965c:	4313      	orrs	r3, r2
 800965e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009660:	693b      	ldr	r3, [r7, #16]
 8009662:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009666:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	689b      	ldr	r3, [r3, #8]
 800966c:	031b      	lsls	r3, r3, #12
 800966e:	693a      	ldr	r2, [r7, #16]
 8009670:	4313      	orrs	r3, r2
 8009672:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	4a12      	ldr	r2, [pc, #72]	; (80096c0 <TIM_OC4_SetConfig+0xa4>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d003      	beq.n	8009684 <TIM_OC4_SetConfig+0x68>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	4a11      	ldr	r2, [pc, #68]	; (80096c4 <TIM_OC4_SetConfig+0xa8>)
 8009680:	4293      	cmp	r3, r2
 8009682:	d109      	bne.n	8009698 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800968a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	695b      	ldr	r3, [r3, #20]
 8009690:	019b      	lsls	r3, r3, #6
 8009692:	697a      	ldr	r2, [r7, #20]
 8009694:	4313      	orrs	r3, r2
 8009696:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	697a      	ldr	r2, [r7, #20]
 800969c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	68fa      	ldr	r2, [r7, #12]
 80096a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80096a4:	683b      	ldr	r3, [r7, #0]
 80096a6:	685a      	ldr	r2, [r3, #4]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	693a      	ldr	r2, [r7, #16]
 80096b0:	621a      	str	r2, [r3, #32]
}
 80096b2:	bf00      	nop
 80096b4:	371c      	adds	r7, #28
 80096b6:	46bd      	mov	sp, r7
 80096b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096bc:	4770      	bx	lr
 80096be:	bf00      	nop
 80096c0:	40010000 	.word	0x40010000
 80096c4:	40010400 	.word	0x40010400

080096c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b087      	sub	sp, #28
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	60f8      	str	r0, [r7, #12]
 80096d0:	60b9      	str	r1, [r7, #8]
 80096d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	f003 031f 	and.w	r3, r3, #31
 80096da:	2201      	movs	r2, #1
 80096dc:	fa02 f303 	lsl.w	r3, r2, r3
 80096e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80096e2:	68fb      	ldr	r3, [r7, #12]
 80096e4:	6a1a      	ldr	r2, [r3, #32]
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	43db      	mvns	r3, r3
 80096ea:	401a      	ands	r2, r3
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	6a1a      	ldr	r2, [r3, #32]
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	f003 031f 	and.w	r3, r3, #31
 80096fa:	6879      	ldr	r1, [r7, #4]
 80096fc:	fa01 f303 	lsl.w	r3, r1, r3
 8009700:	431a      	orrs	r2, r3
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	621a      	str	r2, [r3, #32]
}
 8009706:	bf00      	nop
 8009708:	371c      	adds	r7, #28
 800970a:	46bd      	mov	sp, r7
 800970c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009710:	4770      	bx	lr
	...

08009714 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009714:	b480      	push	{r7}
 8009716:	b085      	sub	sp, #20
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009724:	2b01      	cmp	r3, #1
 8009726:	d101      	bne.n	800972c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009728:	2302      	movs	r3, #2
 800972a:	e05a      	b.n	80097e2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	2201      	movs	r2, #1
 8009730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	2202      	movs	r2, #2
 8009738:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	685b      	ldr	r3, [r3, #4]
 8009742:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	689b      	ldr	r3, [r3, #8]
 800974a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009752:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	68fa      	ldr	r2, [r7, #12]
 800975a:	4313      	orrs	r3, r2
 800975c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	68fa      	ldr	r2, [r7, #12]
 8009764:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	4a21      	ldr	r2, [pc, #132]	; (80097f0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800976c:	4293      	cmp	r3, r2
 800976e:	d022      	beq.n	80097b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009778:	d01d      	beq.n	80097b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	681b      	ldr	r3, [r3, #0]
 800977e:	4a1d      	ldr	r2, [pc, #116]	; (80097f4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009780:	4293      	cmp	r3, r2
 8009782:	d018      	beq.n	80097b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	4a1b      	ldr	r2, [pc, #108]	; (80097f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800978a:	4293      	cmp	r3, r2
 800978c:	d013      	beq.n	80097b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	4a1a      	ldr	r2, [pc, #104]	; (80097fc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009794:	4293      	cmp	r3, r2
 8009796:	d00e      	beq.n	80097b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	4a18      	ldr	r2, [pc, #96]	; (8009800 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800979e:	4293      	cmp	r3, r2
 80097a0:	d009      	beq.n	80097b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	4a17      	ldr	r2, [pc, #92]	; (8009804 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80097a8:	4293      	cmp	r3, r2
 80097aa:	d004      	beq.n	80097b6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4a15      	ldr	r2, [pc, #84]	; (8009808 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d10c      	bne.n	80097d0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80097bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	685b      	ldr	r3, [r3, #4]
 80097c2:	68ba      	ldr	r2, [r7, #8]
 80097c4:	4313      	orrs	r3, r2
 80097c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	68ba      	ldr	r2, [r7, #8]
 80097ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2201      	movs	r2, #1
 80097d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2200      	movs	r2, #0
 80097dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80097e0:	2300      	movs	r3, #0
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3714      	adds	r7, #20
 80097e6:	46bd      	mov	sp, r7
 80097e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ec:	4770      	bx	lr
 80097ee:	bf00      	nop
 80097f0:	40010000 	.word	0x40010000
 80097f4:	40000400 	.word	0x40000400
 80097f8:	40000800 	.word	0x40000800
 80097fc:	40000c00 	.word	0x40000c00
 8009800:	40010400 	.word	0x40010400
 8009804:	40014000 	.word	0x40014000
 8009808:	40001800 	.word	0x40001800

0800980c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800980c:	b480      	push	{r7}
 800980e:	b083      	sub	sp, #12
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009814:	bf00      	nop
 8009816:	370c      	adds	r7, #12
 8009818:	46bd      	mov	sp, r7
 800981a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981e:	4770      	bx	lr

08009820 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009820:	b480      	push	{r7}
 8009822:	b083      	sub	sp, #12
 8009824:	af00      	add	r7, sp, #0
 8009826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009828:	bf00      	nop
 800982a:	370c      	adds	r7, #12
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr

08009834 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b082      	sub	sp, #8
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d101      	bne.n	8009846 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009842:	2301      	movs	r3, #1
 8009844:	e042      	b.n	80098cc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800984c:	b2db      	uxtb	r3, r3
 800984e:	2b00      	cmp	r3, #0
 8009850:	d106      	bne.n	8009860 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2200      	movs	r2, #0
 8009856:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f7fa fa18 	bl	8003c90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2224      	movs	r2, #36	; 0x24
 8009864:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	68da      	ldr	r2, [r3, #12]
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009876:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f000 fcdb 	bl	800a234 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	691a      	ldr	r2, [r3, #16]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800988c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	695a      	ldr	r2, [r3, #20]
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800989c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	68da      	ldr	r2, [r3, #12]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80098ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2200      	movs	r2, #0
 80098b2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2220      	movs	r2, #32
 80098b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2220      	movs	r2, #32
 80098c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2200      	movs	r2, #0
 80098c8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80098ca:	2300      	movs	r3, #0
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3708      	adds	r7, #8
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}

080098d4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b084      	sub	sp, #16
 80098d8:	af00      	add	r7, sp, #0
 80098da:	60f8      	str	r0, [r7, #12]
 80098dc:	60b9      	str	r1, [r7, #8]
 80098de:	4613      	mov	r3, r2
 80098e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80098e8:	b2db      	uxtb	r3, r3
 80098ea:	2b20      	cmp	r3, #32
 80098ec:	d112      	bne.n	8009914 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d002      	beq.n	80098fa <HAL_UART_Receive_IT+0x26>
 80098f4:	88fb      	ldrh	r3, [r7, #6]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d101      	bne.n	80098fe <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80098fa:	2301      	movs	r3, #1
 80098fc:	e00b      	b.n	8009916 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	2200      	movs	r2, #0
 8009902:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009904:	88fb      	ldrh	r3, [r7, #6]
 8009906:	461a      	mov	r2, r3
 8009908:	68b9      	ldr	r1, [r7, #8]
 800990a:	68f8      	ldr	r0, [r7, #12]
 800990c:	f000 faba 	bl	8009e84 <UART_Start_Receive_IT>
 8009910:	4603      	mov	r3, r0
 8009912:	e000      	b.n	8009916 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8009914:	2302      	movs	r3, #2
  }
}
 8009916:	4618      	mov	r0, r3
 8009918:	3710      	adds	r7, #16
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}
	...

08009920 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b0ba      	sub	sp, #232	; 0xe8
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	68db      	ldr	r3, [r3, #12]
 8009938:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	695b      	ldr	r3, [r3, #20]
 8009942:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009946:	2300      	movs	r3, #0
 8009948:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800994c:	2300      	movs	r3, #0
 800994e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009956:	f003 030f 	and.w	r3, r3, #15
 800995a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800995e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009962:	2b00      	cmp	r3, #0
 8009964:	d10f      	bne.n	8009986 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800996a:	f003 0320 	and.w	r3, r3, #32
 800996e:	2b00      	cmp	r3, #0
 8009970:	d009      	beq.n	8009986 <HAL_UART_IRQHandler+0x66>
 8009972:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009976:	f003 0320 	and.w	r3, r3, #32
 800997a:	2b00      	cmp	r3, #0
 800997c:	d003      	beq.n	8009986 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800997e:	6878      	ldr	r0, [r7, #4]
 8009980:	f000 fb99 	bl	800a0b6 <UART_Receive_IT>
      return;
 8009984:	e25b      	b.n	8009e3e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009986:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800998a:	2b00      	cmp	r3, #0
 800998c:	f000 80de 	beq.w	8009b4c <HAL_UART_IRQHandler+0x22c>
 8009990:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009994:	f003 0301 	and.w	r3, r3, #1
 8009998:	2b00      	cmp	r3, #0
 800999a:	d106      	bne.n	80099aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800999c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099a0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	f000 80d1 	beq.w	8009b4c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80099aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099ae:	f003 0301 	and.w	r3, r3, #1
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d00b      	beq.n	80099ce <HAL_UART_IRQHandler+0xae>
 80099b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d005      	beq.n	80099ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099c6:	f043 0201 	orr.w	r2, r3, #1
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80099ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099d2:	f003 0304 	and.w	r3, r3, #4
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d00b      	beq.n	80099f2 <HAL_UART_IRQHandler+0xd2>
 80099da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80099de:	f003 0301 	and.w	r3, r3, #1
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d005      	beq.n	80099f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099ea:	f043 0202 	orr.w	r2, r3, #2
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80099f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099f6:	f003 0302 	and.w	r3, r3, #2
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d00b      	beq.n	8009a16 <HAL_UART_IRQHandler+0xf6>
 80099fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a02:	f003 0301 	and.w	r3, r3, #1
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d005      	beq.n	8009a16 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a0e:	f043 0204 	orr.w	r2, r3, #4
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a1a:	f003 0308 	and.w	r3, r3, #8
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d011      	beq.n	8009a46 <HAL_UART_IRQHandler+0x126>
 8009a22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a26:	f003 0320 	and.w	r3, r3, #32
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d105      	bne.n	8009a3a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009a2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009a32:	f003 0301 	and.w	r3, r3, #1
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d005      	beq.n	8009a46 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a3e:	f043 0208 	orr.w	r2, r3, #8
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	f000 81f2 	beq.w	8009e34 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009a50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a54:	f003 0320 	and.w	r3, r3, #32
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d008      	beq.n	8009a6e <HAL_UART_IRQHandler+0x14e>
 8009a5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a60:	f003 0320 	and.w	r3, r3, #32
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d002      	beq.n	8009a6e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009a68:	6878      	ldr	r0, [r7, #4]
 8009a6a:	f000 fb24 	bl	800a0b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	695b      	ldr	r3, [r3, #20]
 8009a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a78:	2b40      	cmp	r3, #64	; 0x40
 8009a7a:	bf0c      	ite	eq
 8009a7c:	2301      	moveq	r3, #1
 8009a7e:	2300      	movne	r3, #0
 8009a80:	b2db      	uxtb	r3, r3
 8009a82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a8a:	f003 0308 	and.w	r3, r3, #8
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d103      	bne.n	8009a9a <HAL_UART_IRQHandler+0x17a>
 8009a92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d04f      	beq.n	8009b3a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	f000 fa2c 	bl	8009ef8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	695b      	ldr	r3, [r3, #20]
 8009aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009aaa:	2b40      	cmp	r3, #64	; 0x40
 8009aac:	d141      	bne.n	8009b32 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	3314      	adds	r3, #20
 8009ab4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ab8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009abc:	e853 3f00 	ldrex	r3, [r3]
 8009ac0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009ac4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009ac8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009acc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	3314      	adds	r3, #20
 8009ad6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009ada:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009ade:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ae2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009ae6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009aea:	e841 2300 	strex	r3, r2, [r1]
 8009aee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009af2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d1d9      	bne.n	8009aae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d013      	beq.n	8009b2a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b06:	4a7e      	ldr	r2, [pc, #504]	; (8009d00 <HAL_UART_IRQHandler+0x3e0>)
 8009b08:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f7fb f8de 	bl	8004cd0 <HAL_DMA_Abort_IT>
 8009b14:	4603      	mov	r3, r0
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d016      	beq.n	8009b48 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b20:	687a      	ldr	r2, [r7, #4]
 8009b22:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009b24:	4610      	mov	r0, r2
 8009b26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b28:	e00e      	b.n	8009b48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009b2a:	6878      	ldr	r0, [r7, #4]
 8009b2c:	f000 f994 	bl	8009e58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b30:	e00a      	b.n	8009b48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f000 f990 	bl	8009e58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b38:	e006      	b.n	8009b48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009b3a:	6878      	ldr	r0, [r7, #4]
 8009b3c:	f000 f98c 	bl	8009e58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2200      	movs	r2, #0
 8009b44:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8009b46:	e175      	b.n	8009e34 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b48:	bf00      	nop
    return;
 8009b4a:	e173      	b.n	8009e34 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b50:	2b01      	cmp	r3, #1
 8009b52:	f040 814f 	bne.w	8009df4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009b56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009b5a:	f003 0310 	and.w	r3, r3, #16
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	f000 8148 	beq.w	8009df4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009b64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009b68:	f003 0310 	and.w	r3, r3, #16
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	f000 8141 	beq.w	8009df4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009b72:	2300      	movs	r3, #0
 8009b74:	60bb      	str	r3, [r7, #8]
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	60bb      	str	r3, [r7, #8]
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	685b      	ldr	r3, [r3, #4]
 8009b84:	60bb      	str	r3, [r7, #8]
 8009b86:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	695b      	ldr	r3, [r3, #20]
 8009b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b92:	2b40      	cmp	r3, #64	; 0x40
 8009b94:	f040 80b6 	bne.w	8009d04 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	685b      	ldr	r3, [r3, #4]
 8009ba0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009ba4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	f000 8145 	beq.w	8009e38 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009bb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009bb6:	429a      	cmp	r2, r3
 8009bb8:	f080 813e 	bcs.w	8009e38 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009bc2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009bc8:	69db      	ldr	r3, [r3, #28]
 8009bca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009bce:	f000 8088 	beq.w	8009ce2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	330c      	adds	r3, #12
 8009bd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bdc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009be0:	e853 3f00 	ldrex	r3, [r3]
 8009be4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009be8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009bec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009bf0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	330c      	adds	r3, #12
 8009bfa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009bfe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009c02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c06:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009c0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009c0e:	e841 2300 	strex	r3, r2, [r1]
 8009c12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009c16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d1d9      	bne.n	8009bd2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	3314      	adds	r3, #20
 8009c24:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c28:	e853 3f00 	ldrex	r3, [r3]
 8009c2c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009c2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009c30:	f023 0301 	bic.w	r3, r3, #1
 8009c34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	3314      	adds	r3, #20
 8009c3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009c42:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009c46:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c48:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009c4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009c4e:	e841 2300 	strex	r3, r2, [r1]
 8009c52:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009c54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d1e1      	bne.n	8009c1e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	3314      	adds	r3, #20
 8009c60:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009c64:	e853 3f00 	ldrex	r3, [r3]
 8009c68:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009c6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	3314      	adds	r3, #20
 8009c7a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009c7e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009c80:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c82:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009c84:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009c86:	e841 2300 	strex	r3, r2, [r1]
 8009c8a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009c8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d1e3      	bne.n	8009c5a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2220      	movs	r2, #32
 8009c96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	330c      	adds	r3, #12
 8009ca6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ca8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009caa:	e853 3f00 	ldrex	r3, [r3]
 8009cae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009cb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009cb2:	f023 0310 	bic.w	r3, r3, #16
 8009cb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	330c      	adds	r3, #12
 8009cc0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009cc4:	65ba      	str	r2, [r7, #88]	; 0x58
 8009cc6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cc8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009cca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009ccc:	e841 2300 	strex	r3, r2, [r1]
 8009cd0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009cd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d1e3      	bne.n	8009ca0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cdc:	4618      	mov	r0, r3
 8009cde:	f7fa ff87 	bl	8004bf0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2202      	movs	r2, #2
 8009ce6:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009cf0:	b29b      	uxth	r3, r3
 8009cf2:	1ad3      	subs	r3, r2, r3
 8009cf4:	b29b      	uxth	r3, r3
 8009cf6:	4619      	mov	r1, r3
 8009cf8:	6878      	ldr	r0, [r7, #4]
 8009cfa:	f000 f8b7 	bl	8009e6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009cfe:	e09b      	b.n	8009e38 <HAL_UART_IRQHandler+0x518>
 8009d00:	08009fbf 	.word	0x08009fbf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009d0c:	b29b      	uxth	r3, r3
 8009d0e:	1ad3      	subs	r3, r2, r3
 8009d10:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009d18:	b29b      	uxth	r3, r3
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	f000 808e 	beq.w	8009e3c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8009d20:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	f000 8089 	beq.w	8009e3c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	330c      	adds	r3, #12
 8009d30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d34:	e853 3f00 	ldrex	r3, [r3]
 8009d38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009d40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	330c      	adds	r3, #12
 8009d4a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8009d4e:	647a      	str	r2, [r7, #68]	; 0x44
 8009d50:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009d54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d56:	e841 2300 	strex	r3, r2, [r1]
 8009d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009d5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d1e3      	bne.n	8009d2a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	3314      	adds	r3, #20
 8009d68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d6c:	e853 3f00 	ldrex	r3, [r3]
 8009d70:	623b      	str	r3, [r7, #32]
   return(result);
 8009d72:	6a3b      	ldr	r3, [r7, #32]
 8009d74:	f023 0301 	bic.w	r3, r3, #1
 8009d78:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	3314      	adds	r3, #20
 8009d82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009d86:	633a      	str	r2, [r7, #48]	; 0x30
 8009d88:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009d8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d8e:	e841 2300 	strex	r3, r2, [r1]
 8009d92:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d1e3      	bne.n	8009d62 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2220      	movs	r2, #32
 8009d9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2200      	movs	r2, #0
 8009da6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	330c      	adds	r3, #12
 8009dae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009db0:	693b      	ldr	r3, [r7, #16]
 8009db2:	e853 3f00 	ldrex	r3, [r3]
 8009db6:	60fb      	str	r3, [r7, #12]
   return(result);
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	f023 0310 	bic.w	r3, r3, #16
 8009dbe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	330c      	adds	r3, #12
 8009dc8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009dcc:	61fa      	str	r2, [r7, #28]
 8009dce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dd0:	69b9      	ldr	r1, [r7, #24]
 8009dd2:	69fa      	ldr	r2, [r7, #28]
 8009dd4:	e841 2300 	strex	r3, r2, [r1]
 8009dd8:	617b      	str	r3, [r7, #20]
   return(result);
 8009dda:	697b      	ldr	r3, [r7, #20]
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d1e3      	bne.n	8009da8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2202      	movs	r2, #2
 8009de4:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009de6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009dea:	4619      	mov	r1, r3
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f000 f83d 	bl	8009e6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009df2:	e023      	b.n	8009e3c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009df4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d009      	beq.n	8009e14 <HAL_UART_IRQHandler+0x4f4>
 8009e00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d003      	beq.n	8009e14 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f000 f8ea 	bl	8009fe6 <UART_Transmit_IT>
    return;
 8009e12:	e014      	b.n	8009e3e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009e14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d00e      	beq.n	8009e3e <HAL_UART_IRQHandler+0x51e>
 8009e20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d008      	beq.n	8009e3e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8009e2c:	6878      	ldr	r0, [r7, #4]
 8009e2e:	f000 f92a 	bl	800a086 <UART_EndTransmit_IT>
    return;
 8009e32:	e004      	b.n	8009e3e <HAL_UART_IRQHandler+0x51e>
    return;
 8009e34:	bf00      	nop
 8009e36:	e002      	b.n	8009e3e <HAL_UART_IRQHandler+0x51e>
      return;
 8009e38:	bf00      	nop
 8009e3a:	e000      	b.n	8009e3e <HAL_UART_IRQHandler+0x51e>
      return;
 8009e3c:	bf00      	nop
  }
}
 8009e3e:	37e8      	adds	r7, #232	; 0xe8
 8009e40:	46bd      	mov	sp, r7
 8009e42:	bd80      	pop	{r7, pc}

08009e44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009e44:	b480      	push	{r7}
 8009e46:	b083      	sub	sp, #12
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009e4c:	bf00      	nop
 8009e4e:	370c      	adds	r7, #12
 8009e50:	46bd      	mov	sp, r7
 8009e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e56:	4770      	bx	lr

08009e58 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009e58:	b480      	push	{r7}
 8009e5a:	b083      	sub	sp, #12
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009e60:	bf00      	nop
 8009e62:	370c      	adds	r7, #12
 8009e64:	46bd      	mov	sp, r7
 8009e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6a:	4770      	bx	lr

08009e6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b083      	sub	sp, #12
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
 8009e74:	460b      	mov	r3, r1
 8009e76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009e78:	bf00      	nop
 8009e7a:	370c      	adds	r7, #12
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e82:	4770      	bx	lr

08009e84 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009e84:	b480      	push	{r7}
 8009e86:	b085      	sub	sp, #20
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	60f8      	str	r0, [r7, #12]
 8009e8c:	60b9      	str	r1, [r7, #8]
 8009e8e:	4613      	mov	r3, r2
 8009e90:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	68ba      	ldr	r2, [r7, #8]
 8009e96:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	88fa      	ldrh	r2, [r7, #6]
 8009e9c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	88fa      	ldrh	r2, [r7, #6]
 8009ea2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	2222      	movs	r2, #34	; 0x22
 8009eae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	691b      	ldr	r3, [r3, #16]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d007      	beq.n	8009eca <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	68da      	ldr	r2, [r3, #12]
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ec8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	695a      	ldr	r2, [r3, #20]
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f042 0201 	orr.w	r2, r2, #1
 8009ed8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	681b      	ldr	r3, [r3, #0]
 8009ede:	68da      	ldr	r2, [r3, #12]
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	f042 0220 	orr.w	r2, r2, #32
 8009ee8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009eea:	2300      	movs	r3, #0
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3714      	adds	r7, #20
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef6:	4770      	bx	lr

08009ef8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b095      	sub	sp, #84	; 0x54
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	330c      	adds	r3, #12
 8009f06:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009f0a:	e853 3f00 	ldrex	r3, [r3]
 8009f0e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f12:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009f16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	330c      	adds	r3, #12
 8009f1e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009f20:	643a      	str	r2, [r7, #64]	; 0x40
 8009f22:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f24:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009f26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009f28:	e841 2300 	strex	r3, r2, [r1]
 8009f2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009f2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d1e5      	bne.n	8009f00 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	3314      	adds	r3, #20
 8009f3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f3c:	6a3b      	ldr	r3, [r7, #32]
 8009f3e:	e853 3f00 	ldrex	r3, [r3]
 8009f42:	61fb      	str	r3, [r7, #28]
   return(result);
 8009f44:	69fb      	ldr	r3, [r7, #28]
 8009f46:	f023 0301 	bic.w	r3, r3, #1
 8009f4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	3314      	adds	r3, #20
 8009f52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009f54:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009f56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009f5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009f5c:	e841 2300 	strex	r3, r2, [r1]
 8009f60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	d1e5      	bne.n	8009f34 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f6c:	2b01      	cmp	r3, #1
 8009f6e:	d119      	bne.n	8009fa4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	330c      	adds	r3, #12
 8009f76:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	e853 3f00 	ldrex	r3, [r3]
 8009f7e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	f023 0310 	bic.w	r3, r3, #16
 8009f86:	647b      	str	r3, [r7, #68]	; 0x44
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	330c      	adds	r3, #12
 8009f8e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f90:	61ba      	str	r2, [r7, #24]
 8009f92:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f94:	6979      	ldr	r1, [r7, #20]
 8009f96:	69ba      	ldr	r2, [r7, #24]
 8009f98:	e841 2300 	strex	r3, r2, [r1]
 8009f9c:	613b      	str	r3, [r7, #16]
   return(result);
 8009f9e:	693b      	ldr	r3, [r7, #16]
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d1e5      	bne.n	8009f70 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2220      	movs	r2, #32
 8009fa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009fb2:	bf00      	nop
 8009fb4:	3754      	adds	r7, #84	; 0x54
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbc:	4770      	bx	lr

08009fbe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009fbe:	b580      	push	{r7, lr}
 8009fc0:	b084      	sub	sp, #16
 8009fc2:	af00      	add	r7, sp, #0
 8009fc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009fd8:	68f8      	ldr	r0, [r7, #12]
 8009fda:	f7ff ff3d 	bl	8009e58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009fde:	bf00      	nop
 8009fe0:	3710      	adds	r7, #16
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}

08009fe6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009fe6:	b480      	push	{r7}
 8009fe8:	b085      	sub	sp, #20
 8009fea:	af00      	add	r7, sp, #0
 8009fec:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009ff4:	b2db      	uxtb	r3, r3
 8009ff6:	2b21      	cmp	r3, #33	; 0x21
 8009ff8:	d13e      	bne.n	800a078 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	689b      	ldr	r3, [r3, #8]
 8009ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a002:	d114      	bne.n	800a02e <UART_Transmit_IT+0x48>
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	691b      	ldr	r3, [r3, #16]
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d110      	bne.n	800a02e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	6a1b      	ldr	r3, [r3, #32]
 800a010:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	881b      	ldrh	r3, [r3, #0]
 800a016:	461a      	mov	r2, r3
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a020:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	6a1b      	ldr	r3, [r3, #32]
 800a026:	1c9a      	adds	r2, r3, #2
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	621a      	str	r2, [r3, #32]
 800a02c:	e008      	b.n	800a040 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	6a1b      	ldr	r3, [r3, #32]
 800a032:	1c59      	adds	r1, r3, #1
 800a034:	687a      	ldr	r2, [r7, #4]
 800a036:	6211      	str	r1, [r2, #32]
 800a038:	781a      	ldrb	r2, [r3, #0]
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a044:	b29b      	uxth	r3, r3
 800a046:	3b01      	subs	r3, #1
 800a048:	b29b      	uxth	r3, r3
 800a04a:	687a      	ldr	r2, [r7, #4]
 800a04c:	4619      	mov	r1, r3
 800a04e:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a050:	2b00      	cmp	r3, #0
 800a052:	d10f      	bne.n	800a074 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	68da      	ldr	r2, [r3, #12]
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a062:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	68da      	ldr	r2, [r3, #12]
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a072:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a074:	2300      	movs	r3, #0
 800a076:	e000      	b.n	800a07a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a078:	2302      	movs	r3, #2
  }
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	3714      	adds	r7, #20
 800a07e:	46bd      	mov	sp, r7
 800a080:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a084:	4770      	bx	lr

0800a086 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a086:	b580      	push	{r7, lr}
 800a088:	b082      	sub	sp, #8
 800a08a:	af00      	add	r7, sp, #0
 800a08c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	68da      	ldr	r2, [r3, #12]
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a09c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	2220      	movs	r2, #32
 800a0a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a0a6:	6878      	ldr	r0, [r7, #4]
 800a0a8:	f7ff fecc 	bl	8009e44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a0ac:	2300      	movs	r3, #0
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3708      	adds	r7, #8
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}

0800a0b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a0b6:	b580      	push	{r7, lr}
 800a0b8:	b08c      	sub	sp, #48	; 0x30
 800a0ba:	af00      	add	r7, sp, #0
 800a0bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a0c4:	b2db      	uxtb	r3, r3
 800a0c6:	2b22      	cmp	r3, #34	; 0x22
 800a0c8:	f040 80ae 	bne.w	800a228 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	689b      	ldr	r3, [r3, #8]
 800a0d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a0d4:	d117      	bne.n	800a106 <UART_Receive_IT+0x50>
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	691b      	ldr	r3, [r3, #16]
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d113      	bne.n	800a106 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a0de:	2300      	movs	r3, #0
 800a0e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0e6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	685b      	ldr	r3, [r3, #4]
 800a0ee:	b29b      	uxth	r3, r3
 800a0f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0f4:	b29a      	uxth	r2, r3
 800a0f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0fe:	1c9a      	adds	r2, r3, #2
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	629a      	str	r2, [r3, #40]	; 0x28
 800a104:	e026      	b.n	800a154 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a10a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a10c:	2300      	movs	r3, #0
 800a10e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	689b      	ldr	r3, [r3, #8]
 800a114:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a118:	d007      	beq.n	800a12a <UART_Receive_IT+0x74>
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	689b      	ldr	r3, [r3, #8]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d10a      	bne.n	800a138 <UART_Receive_IT+0x82>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	691b      	ldr	r3, [r3, #16]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d106      	bne.n	800a138 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	685b      	ldr	r3, [r3, #4]
 800a130:	b2da      	uxtb	r2, r3
 800a132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a134:	701a      	strb	r2, [r3, #0]
 800a136:	e008      	b.n	800a14a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	b2db      	uxtb	r3, r3
 800a140:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a144:	b2da      	uxtb	r2, r3
 800a146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a148:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a14e:	1c5a      	adds	r2, r3, #1
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a158:	b29b      	uxth	r3, r3
 800a15a:	3b01      	subs	r3, #1
 800a15c:	b29b      	uxth	r3, r3
 800a15e:	687a      	ldr	r2, [r7, #4]
 800a160:	4619      	mov	r1, r3
 800a162:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a164:	2b00      	cmp	r3, #0
 800a166:	d15d      	bne.n	800a224 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	68da      	ldr	r2, [r3, #12]
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f022 0220 	bic.w	r2, r2, #32
 800a176:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	68da      	ldr	r2, [r3, #12]
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a186:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	695a      	ldr	r2, [r3, #20]
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	f022 0201 	bic.w	r2, r2, #1
 800a196:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2220      	movs	r2, #32
 800a19c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a1aa:	2b01      	cmp	r3, #1
 800a1ac:	d135      	bne.n	800a21a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	2200      	movs	r2, #0
 800a1b2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	330c      	adds	r3, #12
 800a1ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1bc:	697b      	ldr	r3, [r7, #20]
 800a1be:	e853 3f00 	ldrex	r3, [r3]
 800a1c2:	613b      	str	r3, [r7, #16]
   return(result);
 800a1c4:	693b      	ldr	r3, [r7, #16]
 800a1c6:	f023 0310 	bic.w	r3, r3, #16
 800a1ca:	627b      	str	r3, [r7, #36]	; 0x24
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	330c      	adds	r3, #12
 800a1d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1d4:	623a      	str	r2, [r7, #32]
 800a1d6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1d8:	69f9      	ldr	r1, [r7, #28]
 800a1da:	6a3a      	ldr	r2, [r7, #32]
 800a1dc:	e841 2300 	strex	r3, r2, [r1]
 800a1e0:	61bb      	str	r3, [r7, #24]
   return(result);
 800a1e2:	69bb      	ldr	r3, [r7, #24]
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d1e5      	bne.n	800a1b4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f003 0310 	and.w	r3, r3, #16
 800a1f2:	2b10      	cmp	r3, #16
 800a1f4:	d10a      	bne.n	800a20c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	60fb      	str	r3, [r7, #12]
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	60fb      	str	r3, [r7, #12]
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	685b      	ldr	r3, [r3, #4]
 800a208:	60fb      	str	r3, [r7, #12]
 800a20a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a210:	4619      	mov	r1, r3
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f7ff fe2a 	bl	8009e6c <HAL_UARTEx_RxEventCallback>
 800a218:	e002      	b.n	800a220 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f7f6 ff5a 	bl	80010d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a220:	2300      	movs	r3, #0
 800a222:	e002      	b.n	800a22a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a224:	2300      	movs	r3, #0
 800a226:	e000      	b.n	800a22a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a228:	2302      	movs	r3, #2
  }
}
 800a22a:	4618      	mov	r0, r3
 800a22c:	3730      	adds	r7, #48	; 0x30
 800a22e:	46bd      	mov	sp, r7
 800a230:	bd80      	pop	{r7, pc}
	...

0800a234 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a234:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a238:	b0c0      	sub	sp, #256	; 0x100
 800a23a:	af00      	add	r7, sp, #0
 800a23c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	691b      	ldr	r3, [r3, #16]
 800a248:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a24c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a250:	68d9      	ldr	r1, [r3, #12]
 800a252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a256:	681a      	ldr	r2, [r3, #0]
 800a258:	ea40 0301 	orr.w	r3, r0, r1
 800a25c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a25e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a262:	689a      	ldr	r2, [r3, #8]
 800a264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a268:	691b      	ldr	r3, [r3, #16]
 800a26a:	431a      	orrs	r2, r3
 800a26c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a270:	695b      	ldr	r3, [r3, #20]
 800a272:	431a      	orrs	r2, r3
 800a274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a278:	69db      	ldr	r3, [r3, #28]
 800a27a:	4313      	orrs	r3, r2
 800a27c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a280:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	68db      	ldr	r3, [r3, #12]
 800a288:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a28c:	f021 010c 	bic.w	r1, r1, #12
 800a290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a294:	681a      	ldr	r2, [r3, #0]
 800a296:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a29a:	430b      	orrs	r3, r1
 800a29c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a29e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	695b      	ldr	r3, [r3, #20]
 800a2a6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a2aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2ae:	6999      	ldr	r1, [r3, #24]
 800a2b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2b4:	681a      	ldr	r2, [r3, #0]
 800a2b6:	ea40 0301 	orr.w	r3, r0, r1
 800a2ba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a2bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2c0:	681a      	ldr	r2, [r3, #0]
 800a2c2:	4b8f      	ldr	r3, [pc, #572]	; (800a500 <UART_SetConfig+0x2cc>)
 800a2c4:	429a      	cmp	r2, r3
 800a2c6:	d005      	beq.n	800a2d4 <UART_SetConfig+0xa0>
 800a2c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2cc:	681a      	ldr	r2, [r3, #0]
 800a2ce:	4b8d      	ldr	r3, [pc, #564]	; (800a504 <UART_SetConfig+0x2d0>)
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	d104      	bne.n	800a2de <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a2d4:	f7fe f824 	bl	8008320 <HAL_RCC_GetPCLK2Freq>
 800a2d8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a2dc:	e003      	b.n	800a2e6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a2de:	f7fe f80b 	bl	80082f8 <HAL_RCC_GetPCLK1Freq>
 800a2e2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a2e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2ea:	69db      	ldr	r3, [r3, #28]
 800a2ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a2f0:	f040 810c 	bne.w	800a50c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a2f4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a2fe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a302:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a306:	4622      	mov	r2, r4
 800a308:	462b      	mov	r3, r5
 800a30a:	1891      	adds	r1, r2, r2
 800a30c:	65b9      	str	r1, [r7, #88]	; 0x58
 800a30e:	415b      	adcs	r3, r3
 800a310:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a312:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a316:	4621      	mov	r1, r4
 800a318:	eb12 0801 	adds.w	r8, r2, r1
 800a31c:	4629      	mov	r1, r5
 800a31e:	eb43 0901 	adc.w	r9, r3, r1
 800a322:	f04f 0200 	mov.w	r2, #0
 800a326:	f04f 0300 	mov.w	r3, #0
 800a32a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a32e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a332:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a336:	4690      	mov	r8, r2
 800a338:	4699      	mov	r9, r3
 800a33a:	4623      	mov	r3, r4
 800a33c:	eb18 0303 	adds.w	r3, r8, r3
 800a340:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a344:	462b      	mov	r3, r5
 800a346:	eb49 0303 	adc.w	r3, r9, r3
 800a34a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a34e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a352:	685b      	ldr	r3, [r3, #4]
 800a354:	2200      	movs	r2, #0
 800a356:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a35a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a35e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a362:	460b      	mov	r3, r1
 800a364:	18db      	adds	r3, r3, r3
 800a366:	653b      	str	r3, [r7, #80]	; 0x50
 800a368:	4613      	mov	r3, r2
 800a36a:	eb42 0303 	adc.w	r3, r2, r3
 800a36e:	657b      	str	r3, [r7, #84]	; 0x54
 800a370:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a374:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a378:	f7f6 fbf8 	bl	8000b6c <__aeabi_uldivmod>
 800a37c:	4602      	mov	r2, r0
 800a37e:	460b      	mov	r3, r1
 800a380:	4b61      	ldr	r3, [pc, #388]	; (800a508 <UART_SetConfig+0x2d4>)
 800a382:	fba3 2302 	umull	r2, r3, r3, r2
 800a386:	095b      	lsrs	r3, r3, #5
 800a388:	011c      	lsls	r4, r3, #4
 800a38a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a38e:	2200      	movs	r2, #0
 800a390:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a394:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a398:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a39c:	4642      	mov	r2, r8
 800a39e:	464b      	mov	r3, r9
 800a3a0:	1891      	adds	r1, r2, r2
 800a3a2:	64b9      	str	r1, [r7, #72]	; 0x48
 800a3a4:	415b      	adcs	r3, r3
 800a3a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a3a8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a3ac:	4641      	mov	r1, r8
 800a3ae:	eb12 0a01 	adds.w	sl, r2, r1
 800a3b2:	4649      	mov	r1, r9
 800a3b4:	eb43 0b01 	adc.w	fp, r3, r1
 800a3b8:	f04f 0200 	mov.w	r2, #0
 800a3bc:	f04f 0300 	mov.w	r3, #0
 800a3c0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a3c4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a3c8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a3cc:	4692      	mov	sl, r2
 800a3ce:	469b      	mov	fp, r3
 800a3d0:	4643      	mov	r3, r8
 800a3d2:	eb1a 0303 	adds.w	r3, sl, r3
 800a3d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a3da:	464b      	mov	r3, r9
 800a3dc:	eb4b 0303 	adc.w	r3, fp, r3
 800a3e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a3e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a3e8:	685b      	ldr	r3, [r3, #4]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a3f0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a3f4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a3f8:	460b      	mov	r3, r1
 800a3fa:	18db      	adds	r3, r3, r3
 800a3fc:	643b      	str	r3, [r7, #64]	; 0x40
 800a3fe:	4613      	mov	r3, r2
 800a400:	eb42 0303 	adc.w	r3, r2, r3
 800a404:	647b      	str	r3, [r7, #68]	; 0x44
 800a406:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a40a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a40e:	f7f6 fbad 	bl	8000b6c <__aeabi_uldivmod>
 800a412:	4602      	mov	r2, r0
 800a414:	460b      	mov	r3, r1
 800a416:	4611      	mov	r1, r2
 800a418:	4b3b      	ldr	r3, [pc, #236]	; (800a508 <UART_SetConfig+0x2d4>)
 800a41a:	fba3 2301 	umull	r2, r3, r3, r1
 800a41e:	095b      	lsrs	r3, r3, #5
 800a420:	2264      	movs	r2, #100	; 0x64
 800a422:	fb02 f303 	mul.w	r3, r2, r3
 800a426:	1acb      	subs	r3, r1, r3
 800a428:	00db      	lsls	r3, r3, #3
 800a42a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a42e:	4b36      	ldr	r3, [pc, #216]	; (800a508 <UART_SetConfig+0x2d4>)
 800a430:	fba3 2302 	umull	r2, r3, r3, r2
 800a434:	095b      	lsrs	r3, r3, #5
 800a436:	005b      	lsls	r3, r3, #1
 800a438:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a43c:	441c      	add	r4, r3
 800a43e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a442:	2200      	movs	r2, #0
 800a444:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a448:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a44c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a450:	4642      	mov	r2, r8
 800a452:	464b      	mov	r3, r9
 800a454:	1891      	adds	r1, r2, r2
 800a456:	63b9      	str	r1, [r7, #56]	; 0x38
 800a458:	415b      	adcs	r3, r3
 800a45a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a45c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a460:	4641      	mov	r1, r8
 800a462:	1851      	adds	r1, r2, r1
 800a464:	6339      	str	r1, [r7, #48]	; 0x30
 800a466:	4649      	mov	r1, r9
 800a468:	414b      	adcs	r3, r1
 800a46a:	637b      	str	r3, [r7, #52]	; 0x34
 800a46c:	f04f 0200 	mov.w	r2, #0
 800a470:	f04f 0300 	mov.w	r3, #0
 800a474:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a478:	4659      	mov	r1, fp
 800a47a:	00cb      	lsls	r3, r1, #3
 800a47c:	4651      	mov	r1, sl
 800a47e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a482:	4651      	mov	r1, sl
 800a484:	00ca      	lsls	r2, r1, #3
 800a486:	4610      	mov	r0, r2
 800a488:	4619      	mov	r1, r3
 800a48a:	4603      	mov	r3, r0
 800a48c:	4642      	mov	r2, r8
 800a48e:	189b      	adds	r3, r3, r2
 800a490:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a494:	464b      	mov	r3, r9
 800a496:	460a      	mov	r2, r1
 800a498:	eb42 0303 	adc.w	r3, r2, r3
 800a49c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a4a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4a4:	685b      	ldr	r3, [r3, #4]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a4ac:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a4b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a4b4:	460b      	mov	r3, r1
 800a4b6:	18db      	adds	r3, r3, r3
 800a4b8:	62bb      	str	r3, [r7, #40]	; 0x28
 800a4ba:	4613      	mov	r3, r2
 800a4bc:	eb42 0303 	adc.w	r3, r2, r3
 800a4c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a4c2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a4c6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a4ca:	f7f6 fb4f 	bl	8000b6c <__aeabi_uldivmod>
 800a4ce:	4602      	mov	r2, r0
 800a4d0:	460b      	mov	r3, r1
 800a4d2:	4b0d      	ldr	r3, [pc, #52]	; (800a508 <UART_SetConfig+0x2d4>)
 800a4d4:	fba3 1302 	umull	r1, r3, r3, r2
 800a4d8:	095b      	lsrs	r3, r3, #5
 800a4da:	2164      	movs	r1, #100	; 0x64
 800a4dc:	fb01 f303 	mul.w	r3, r1, r3
 800a4e0:	1ad3      	subs	r3, r2, r3
 800a4e2:	00db      	lsls	r3, r3, #3
 800a4e4:	3332      	adds	r3, #50	; 0x32
 800a4e6:	4a08      	ldr	r2, [pc, #32]	; (800a508 <UART_SetConfig+0x2d4>)
 800a4e8:	fba2 2303 	umull	r2, r3, r2, r3
 800a4ec:	095b      	lsrs	r3, r3, #5
 800a4ee:	f003 0207 	and.w	r2, r3, #7
 800a4f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	4422      	add	r2, r4
 800a4fa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a4fc:	e106      	b.n	800a70c <UART_SetConfig+0x4d8>
 800a4fe:	bf00      	nop
 800a500:	40011000 	.word	0x40011000
 800a504:	40011400 	.word	0x40011400
 800a508:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a50c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a510:	2200      	movs	r2, #0
 800a512:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a516:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a51a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a51e:	4642      	mov	r2, r8
 800a520:	464b      	mov	r3, r9
 800a522:	1891      	adds	r1, r2, r2
 800a524:	6239      	str	r1, [r7, #32]
 800a526:	415b      	adcs	r3, r3
 800a528:	627b      	str	r3, [r7, #36]	; 0x24
 800a52a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a52e:	4641      	mov	r1, r8
 800a530:	1854      	adds	r4, r2, r1
 800a532:	4649      	mov	r1, r9
 800a534:	eb43 0501 	adc.w	r5, r3, r1
 800a538:	f04f 0200 	mov.w	r2, #0
 800a53c:	f04f 0300 	mov.w	r3, #0
 800a540:	00eb      	lsls	r3, r5, #3
 800a542:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a546:	00e2      	lsls	r2, r4, #3
 800a548:	4614      	mov	r4, r2
 800a54a:	461d      	mov	r5, r3
 800a54c:	4643      	mov	r3, r8
 800a54e:	18e3      	adds	r3, r4, r3
 800a550:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a554:	464b      	mov	r3, r9
 800a556:	eb45 0303 	adc.w	r3, r5, r3
 800a55a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a55e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a562:	685b      	ldr	r3, [r3, #4]
 800a564:	2200      	movs	r2, #0
 800a566:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a56a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a56e:	f04f 0200 	mov.w	r2, #0
 800a572:	f04f 0300 	mov.w	r3, #0
 800a576:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a57a:	4629      	mov	r1, r5
 800a57c:	008b      	lsls	r3, r1, #2
 800a57e:	4621      	mov	r1, r4
 800a580:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a584:	4621      	mov	r1, r4
 800a586:	008a      	lsls	r2, r1, #2
 800a588:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a58c:	f7f6 faee 	bl	8000b6c <__aeabi_uldivmod>
 800a590:	4602      	mov	r2, r0
 800a592:	460b      	mov	r3, r1
 800a594:	4b60      	ldr	r3, [pc, #384]	; (800a718 <UART_SetConfig+0x4e4>)
 800a596:	fba3 2302 	umull	r2, r3, r3, r2
 800a59a:	095b      	lsrs	r3, r3, #5
 800a59c:	011c      	lsls	r4, r3, #4
 800a59e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a5a2:	2200      	movs	r2, #0
 800a5a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a5a8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a5ac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a5b0:	4642      	mov	r2, r8
 800a5b2:	464b      	mov	r3, r9
 800a5b4:	1891      	adds	r1, r2, r2
 800a5b6:	61b9      	str	r1, [r7, #24]
 800a5b8:	415b      	adcs	r3, r3
 800a5ba:	61fb      	str	r3, [r7, #28]
 800a5bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a5c0:	4641      	mov	r1, r8
 800a5c2:	1851      	adds	r1, r2, r1
 800a5c4:	6139      	str	r1, [r7, #16]
 800a5c6:	4649      	mov	r1, r9
 800a5c8:	414b      	adcs	r3, r1
 800a5ca:	617b      	str	r3, [r7, #20]
 800a5cc:	f04f 0200 	mov.w	r2, #0
 800a5d0:	f04f 0300 	mov.w	r3, #0
 800a5d4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a5d8:	4659      	mov	r1, fp
 800a5da:	00cb      	lsls	r3, r1, #3
 800a5dc:	4651      	mov	r1, sl
 800a5de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a5e2:	4651      	mov	r1, sl
 800a5e4:	00ca      	lsls	r2, r1, #3
 800a5e6:	4610      	mov	r0, r2
 800a5e8:	4619      	mov	r1, r3
 800a5ea:	4603      	mov	r3, r0
 800a5ec:	4642      	mov	r2, r8
 800a5ee:	189b      	adds	r3, r3, r2
 800a5f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a5f4:	464b      	mov	r3, r9
 800a5f6:	460a      	mov	r2, r1
 800a5f8:	eb42 0303 	adc.w	r3, r2, r3
 800a5fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a600:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a604:	685b      	ldr	r3, [r3, #4]
 800a606:	2200      	movs	r2, #0
 800a608:	67bb      	str	r3, [r7, #120]	; 0x78
 800a60a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a60c:	f04f 0200 	mov.w	r2, #0
 800a610:	f04f 0300 	mov.w	r3, #0
 800a614:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a618:	4649      	mov	r1, r9
 800a61a:	008b      	lsls	r3, r1, #2
 800a61c:	4641      	mov	r1, r8
 800a61e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a622:	4641      	mov	r1, r8
 800a624:	008a      	lsls	r2, r1, #2
 800a626:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a62a:	f7f6 fa9f 	bl	8000b6c <__aeabi_uldivmod>
 800a62e:	4602      	mov	r2, r0
 800a630:	460b      	mov	r3, r1
 800a632:	4611      	mov	r1, r2
 800a634:	4b38      	ldr	r3, [pc, #224]	; (800a718 <UART_SetConfig+0x4e4>)
 800a636:	fba3 2301 	umull	r2, r3, r3, r1
 800a63a:	095b      	lsrs	r3, r3, #5
 800a63c:	2264      	movs	r2, #100	; 0x64
 800a63e:	fb02 f303 	mul.w	r3, r2, r3
 800a642:	1acb      	subs	r3, r1, r3
 800a644:	011b      	lsls	r3, r3, #4
 800a646:	3332      	adds	r3, #50	; 0x32
 800a648:	4a33      	ldr	r2, [pc, #204]	; (800a718 <UART_SetConfig+0x4e4>)
 800a64a:	fba2 2303 	umull	r2, r3, r2, r3
 800a64e:	095b      	lsrs	r3, r3, #5
 800a650:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a654:	441c      	add	r4, r3
 800a656:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a65a:	2200      	movs	r2, #0
 800a65c:	673b      	str	r3, [r7, #112]	; 0x70
 800a65e:	677a      	str	r2, [r7, #116]	; 0x74
 800a660:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a664:	4642      	mov	r2, r8
 800a666:	464b      	mov	r3, r9
 800a668:	1891      	adds	r1, r2, r2
 800a66a:	60b9      	str	r1, [r7, #8]
 800a66c:	415b      	adcs	r3, r3
 800a66e:	60fb      	str	r3, [r7, #12]
 800a670:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a674:	4641      	mov	r1, r8
 800a676:	1851      	adds	r1, r2, r1
 800a678:	6039      	str	r1, [r7, #0]
 800a67a:	4649      	mov	r1, r9
 800a67c:	414b      	adcs	r3, r1
 800a67e:	607b      	str	r3, [r7, #4]
 800a680:	f04f 0200 	mov.w	r2, #0
 800a684:	f04f 0300 	mov.w	r3, #0
 800a688:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a68c:	4659      	mov	r1, fp
 800a68e:	00cb      	lsls	r3, r1, #3
 800a690:	4651      	mov	r1, sl
 800a692:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a696:	4651      	mov	r1, sl
 800a698:	00ca      	lsls	r2, r1, #3
 800a69a:	4610      	mov	r0, r2
 800a69c:	4619      	mov	r1, r3
 800a69e:	4603      	mov	r3, r0
 800a6a0:	4642      	mov	r2, r8
 800a6a2:	189b      	adds	r3, r3, r2
 800a6a4:	66bb      	str	r3, [r7, #104]	; 0x68
 800a6a6:	464b      	mov	r3, r9
 800a6a8:	460a      	mov	r2, r1
 800a6aa:	eb42 0303 	adc.w	r3, r2, r3
 800a6ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a6b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a6b4:	685b      	ldr	r3, [r3, #4]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	663b      	str	r3, [r7, #96]	; 0x60
 800a6ba:	667a      	str	r2, [r7, #100]	; 0x64
 800a6bc:	f04f 0200 	mov.w	r2, #0
 800a6c0:	f04f 0300 	mov.w	r3, #0
 800a6c4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a6c8:	4649      	mov	r1, r9
 800a6ca:	008b      	lsls	r3, r1, #2
 800a6cc:	4641      	mov	r1, r8
 800a6ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a6d2:	4641      	mov	r1, r8
 800a6d4:	008a      	lsls	r2, r1, #2
 800a6d6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a6da:	f7f6 fa47 	bl	8000b6c <__aeabi_uldivmod>
 800a6de:	4602      	mov	r2, r0
 800a6e0:	460b      	mov	r3, r1
 800a6e2:	4b0d      	ldr	r3, [pc, #52]	; (800a718 <UART_SetConfig+0x4e4>)
 800a6e4:	fba3 1302 	umull	r1, r3, r3, r2
 800a6e8:	095b      	lsrs	r3, r3, #5
 800a6ea:	2164      	movs	r1, #100	; 0x64
 800a6ec:	fb01 f303 	mul.w	r3, r1, r3
 800a6f0:	1ad3      	subs	r3, r2, r3
 800a6f2:	011b      	lsls	r3, r3, #4
 800a6f4:	3332      	adds	r3, #50	; 0x32
 800a6f6:	4a08      	ldr	r2, [pc, #32]	; (800a718 <UART_SetConfig+0x4e4>)
 800a6f8:	fba2 2303 	umull	r2, r3, r2, r3
 800a6fc:	095b      	lsrs	r3, r3, #5
 800a6fe:	f003 020f 	and.w	r2, r3, #15
 800a702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	4422      	add	r2, r4
 800a70a:	609a      	str	r2, [r3, #8]
}
 800a70c:	bf00      	nop
 800a70e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a712:	46bd      	mov	sp, r7
 800a714:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a718:	51eb851f 	.word	0x51eb851f

0800a71c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a71c:	b084      	sub	sp, #16
 800a71e:	b580      	push	{r7, lr}
 800a720:	b084      	sub	sp, #16
 800a722:	af00      	add	r7, sp, #0
 800a724:	6078      	str	r0, [r7, #4]
 800a726:	f107 001c 	add.w	r0, r7, #28
 800a72a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a72e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800a732:	2b01      	cmp	r3, #1
 800a734:	d123      	bne.n	800a77e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a73a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	68db      	ldr	r3, [r3, #12]
 800a746:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a74a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a74e:	687a      	ldr	r2, [r7, #4]
 800a750:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	68db      	ldr	r3, [r3, #12]
 800a756:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a75e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a762:	2b01      	cmp	r3, #1
 800a764:	d105      	bne.n	800a772 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	68db      	ldr	r3, [r3, #12]
 800a76a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f001 fae2 	bl	800bd3c <USB_CoreReset>
 800a778:	4603      	mov	r3, r0
 800a77a:	73fb      	strb	r3, [r7, #15]
 800a77c:	e01b      	b.n	800a7b6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	68db      	ldr	r3, [r3, #12]
 800a782:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f001 fad6 	bl	800bd3c <USB_CoreReset>
 800a790:	4603      	mov	r3, r0
 800a792:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a794:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d106      	bne.n	800a7aa <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7a0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	639a      	str	r2, [r3, #56]	; 0x38
 800a7a8:	e005      	b.n	800a7b6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7ae:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a7b6:	7fbb      	ldrb	r3, [r7, #30]
 800a7b8:	2b01      	cmp	r3, #1
 800a7ba:	d10b      	bne.n	800a7d4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	689b      	ldr	r3, [r3, #8]
 800a7c0:	f043 0206 	orr.w	r2, r3, #6
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	689b      	ldr	r3, [r3, #8]
 800a7cc:	f043 0220 	orr.w	r2, r3, #32
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a7d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	3710      	adds	r7, #16
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a7e0:	b004      	add	sp, #16
 800a7e2:	4770      	bx	lr

0800a7e4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a7e4:	b480      	push	{r7}
 800a7e6:	b087      	sub	sp, #28
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	60f8      	str	r0, [r7, #12]
 800a7ec:	60b9      	str	r1, [r7, #8]
 800a7ee:	4613      	mov	r3, r2
 800a7f0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a7f2:	79fb      	ldrb	r3, [r7, #7]
 800a7f4:	2b02      	cmp	r3, #2
 800a7f6:	d165      	bne.n	800a8c4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a7f8:	68bb      	ldr	r3, [r7, #8]
 800a7fa:	4a41      	ldr	r2, [pc, #260]	; (800a900 <USB_SetTurnaroundTime+0x11c>)
 800a7fc:	4293      	cmp	r3, r2
 800a7fe:	d906      	bls.n	800a80e <USB_SetTurnaroundTime+0x2a>
 800a800:	68bb      	ldr	r3, [r7, #8]
 800a802:	4a40      	ldr	r2, [pc, #256]	; (800a904 <USB_SetTurnaroundTime+0x120>)
 800a804:	4293      	cmp	r3, r2
 800a806:	d202      	bcs.n	800a80e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a808:	230f      	movs	r3, #15
 800a80a:	617b      	str	r3, [r7, #20]
 800a80c:	e062      	b.n	800a8d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a80e:	68bb      	ldr	r3, [r7, #8]
 800a810:	4a3c      	ldr	r2, [pc, #240]	; (800a904 <USB_SetTurnaroundTime+0x120>)
 800a812:	4293      	cmp	r3, r2
 800a814:	d306      	bcc.n	800a824 <USB_SetTurnaroundTime+0x40>
 800a816:	68bb      	ldr	r3, [r7, #8]
 800a818:	4a3b      	ldr	r2, [pc, #236]	; (800a908 <USB_SetTurnaroundTime+0x124>)
 800a81a:	4293      	cmp	r3, r2
 800a81c:	d202      	bcs.n	800a824 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a81e:	230e      	movs	r3, #14
 800a820:	617b      	str	r3, [r7, #20]
 800a822:	e057      	b.n	800a8d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a824:	68bb      	ldr	r3, [r7, #8]
 800a826:	4a38      	ldr	r2, [pc, #224]	; (800a908 <USB_SetTurnaroundTime+0x124>)
 800a828:	4293      	cmp	r3, r2
 800a82a:	d306      	bcc.n	800a83a <USB_SetTurnaroundTime+0x56>
 800a82c:	68bb      	ldr	r3, [r7, #8]
 800a82e:	4a37      	ldr	r2, [pc, #220]	; (800a90c <USB_SetTurnaroundTime+0x128>)
 800a830:	4293      	cmp	r3, r2
 800a832:	d202      	bcs.n	800a83a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a834:	230d      	movs	r3, #13
 800a836:	617b      	str	r3, [r7, #20]
 800a838:	e04c      	b.n	800a8d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a83a:	68bb      	ldr	r3, [r7, #8]
 800a83c:	4a33      	ldr	r2, [pc, #204]	; (800a90c <USB_SetTurnaroundTime+0x128>)
 800a83e:	4293      	cmp	r3, r2
 800a840:	d306      	bcc.n	800a850 <USB_SetTurnaroundTime+0x6c>
 800a842:	68bb      	ldr	r3, [r7, #8]
 800a844:	4a32      	ldr	r2, [pc, #200]	; (800a910 <USB_SetTurnaroundTime+0x12c>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d802      	bhi.n	800a850 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a84a:	230c      	movs	r3, #12
 800a84c:	617b      	str	r3, [r7, #20]
 800a84e:	e041      	b.n	800a8d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a850:	68bb      	ldr	r3, [r7, #8]
 800a852:	4a2f      	ldr	r2, [pc, #188]	; (800a910 <USB_SetTurnaroundTime+0x12c>)
 800a854:	4293      	cmp	r3, r2
 800a856:	d906      	bls.n	800a866 <USB_SetTurnaroundTime+0x82>
 800a858:	68bb      	ldr	r3, [r7, #8]
 800a85a:	4a2e      	ldr	r2, [pc, #184]	; (800a914 <USB_SetTurnaroundTime+0x130>)
 800a85c:	4293      	cmp	r3, r2
 800a85e:	d802      	bhi.n	800a866 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a860:	230b      	movs	r3, #11
 800a862:	617b      	str	r3, [r7, #20]
 800a864:	e036      	b.n	800a8d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a866:	68bb      	ldr	r3, [r7, #8]
 800a868:	4a2a      	ldr	r2, [pc, #168]	; (800a914 <USB_SetTurnaroundTime+0x130>)
 800a86a:	4293      	cmp	r3, r2
 800a86c:	d906      	bls.n	800a87c <USB_SetTurnaroundTime+0x98>
 800a86e:	68bb      	ldr	r3, [r7, #8]
 800a870:	4a29      	ldr	r2, [pc, #164]	; (800a918 <USB_SetTurnaroundTime+0x134>)
 800a872:	4293      	cmp	r3, r2
 800a874:	d802      	bhi.n	800a87c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a876:	230a      	movs	r3, #10
 800a878:	617b      	str	r3, [r7, #20]
 800a87a:	e02b      	b.n	800a8d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a87c:	68bb      	ldr	r3, [r7, #8]
 800a87e:	4a26      	ldr	r2, [pc, #152]	; (800a918 <USB_SetTurnaroundTime+0x134>)
 800a880:	4293      	cmp	r3, r2
 800a882:	d906      	bls.n	800a892 <USB_SetTurnaroundTime+0xae>
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	4a25      	ldr	r2, [pc, #148]	; (800a91c <USB_SetTurnaroundTime+0x138>)
 800a888:	4293      	cmp	r3, r2
 800a88a:	d202      	bcs.n	800a892 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a88c:	2309      	movs	r3, #9
 800a88e:	617b      	str	r3, [r7, #20]
 800a890:	e020      	b.n	800a8d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a892:	68bb      	ldr	r3, [r7, #8]
 800a894:	4a21      	ldr	r2, [pc, #132]	; (800a91c <USB_SetTurnaroundTime+0x138>)
 800a896:	4293      	cmp	r3, r2
 800a898:	d306      	bcc.n	800a8a8 <USB_SetTurnaroundTime+0xc4>
 800a89a:	68bb      	ldr	r3, [r7, #8]
 800a89c:	4a20      	ldr	r2, [pc, #128]	; (800a920 <USB_SetTurnaroundTime+0x13c>)
 800a89e:	4293      	cmp	r3, r2
 800a8a0:	d802      	bhi.n	800a8a8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a8a2:	2308      	movs	r3, #8
 800a8a4:	617b      	str	r3, [r7, #20]
 800a8a6:	e015      	b.n	800a8d4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a8a8:	68bb      	ldr	r3, [r7, #8]
 800a8aa:	4a1d      	ldr	r2, [pc, #116]	; (800a920 <USB_SetTurnaroundTime+0x13c>)
 800a8ac:	4293      	cmp	r3, r2
 800a8ae:	d906      	bls.n	800a8be <USB_SetTurnaroundTime+0xda>
 800a8b0:	68bb      	ldr	r3, [r7, #8]
 800a8b2:	4a1c      	ldr	r2, [pc, #112]	; (800a924 <USB_SetTurnaroundTime+0x140>)
 800a8b4:	4293      	cmp	r3, r2
 800a8b6:	d202      	bcs.n	800a8be <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a8b8:	2307      	movs	r3, #7
 800a8ba:	617b      	str	r3, [r7, #20]
 800a8bc:	e00a      	b.n	800a8d4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a8be:	2306      	movs	r3, #6
 800a8c0:	617b      	str	r3, [r7, #20]
 800a8c2:	e007      	b.n	800a8d4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a8c4:	79fb      	ldrb	r3, [r7, #7]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d102      	bne.n	800a8d0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a8ca:	2309      	movs	r3, #9
 800a8cc:	617b      	str	r3, [r7, #20]
 800a8ce:	e001      	b.n	800a8d4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a8d0:	2309      	movs	r3, #9
 800a8d2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	68db      	ldr	r3, [r3, #12]
 800a8d8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	68da      	ldr	r2, [r3, #12]
 800a8e4:	697b      	ldr	r3, [r7, #20]
 800a8e6:	029b      	lsls	r3, r3, #10
 800a8e8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a8ec:	431a      	orrs	r2, r3
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a8f2:	2300      	movs	r3, #0
}
 800a8f4:	4618      	mov	r0, r3
 800a8f6:	371c      	adds	r7, #28
 800a8f8:	46bd      	mov	sp, r7
 800a8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fe:	4770      	bx	lr
 800a900:	00d8acbf 	.word	0x00d8acbf
 800a904:	00e4e1c0 	.word	0x00e4e1c0
 800a908:	00f42400 	.word	0x00f42400
 800a90c:	01067380 	.word	0x01067380
 800a910:	011a499f 	.word	0x011a499f
 800a914:	01312cff 	.word	0x01312cff
 800a918:	014ca43f 	.word	0x014ca43f
 800a91c:	016e3600 	.word	0x016e3600
 800a920:	01a6ab1f 	.word	0x01a6ab1f
 800a924:	01e84800 	.word	0x01e84800

0800a928 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a928:	b480      	push	{r7}
 800a92a:	b083      	sub	sp, #12
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	689b      	ldr	r3, [r3, #8]
 800a934:	f043 0201 	orr.w	r2, r3, #1
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a93c:	2300      	movs	r3, #0
}
 800a93e:	4618      	mov	r0, r3
 800a940:	370c      	adds	r7, #12
 800a942:	46bd      	mov	sp, r7
 800a944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a948:	4770      	bx	lr

0800a94a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a94a:	b480      	push	{r7}
 800a94c:	b083      	sub	sp, #12
 800a94e:	af00      	add	r7, sp, #0
 800a950:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	689b      	ldr	r3, [r3, #8]
 800a956:	f023 0201 	bic.w	r2, r3, #1
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a95e:	2300      	movs	r3, #0
}
 800a960:	4618      	mov	r0, r3
 800a962:	370c      	adds	r7, #12
 800a964:	46bd      	mov	sp, r7
 800a966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96a:	4770      	bx	lr

0800a96c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a96c:	b580      	push	{r7, lr}
 800a96e:	b084      	sub	sp, #16
 800a970:	af00      	add	r7, sp, #0
 800a972:	6078      	str	r0, [r7, #4]
 800a974:	460b      	mov	r3, r1
 800a976:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a978:	2300      	movs	r3, #0
 800a97a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	68db      	ldr	r3, [r3, #12]
 800a980:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a988:	78fb      	ldrb	r3, [r7, #3]
 800a98a:	2b01      	cmp	r3, #1
 800a98c:	d115      	bne.n	800a9ba <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	68db      	ldr	r3, [r3, #12]
 800a992:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a99a:	200a      	movs	r0, #10
 800a99c:	f7f9 fb0a 	bl	8003fb4 <HAL_Delay>
      ms += 10U;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	330a      	adds	r3, #10
 800a9a4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f001 f939 	bl	800bc1e <USB_GetMode>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	2b01      	cmp	r3, #1
 800a9b0:	d01e      	beq.n	800a9f0 <USB_SetCurrentMode+0x84>
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	2bc7      	cmp	r3, #199	; 0xc7
 800a9b6:	d9f0      	bls.n	800a99a <USB_SetCurrentMode+0x2e>
 800a9b8:	e01a      	b.n	800a9f0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a9ba:	78fb      	ldrb	r3, [r7, #3]
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d115      	bne.n	800a9ec <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	68db      	ldr	r3, [r3, #12]
 800a9c4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a9cc:	200a      	movs	r0, #10
 800a9ce:	f7f9 faf1 	bl	8003fb4 <HAL_Delay>
      ms += 10U;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	330a      	adds	r3, #10
 800a9d6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	f001 f920 	bl	800bc1e <USB_GetMode>
 800a9de:	4603      	mov	r3, r0
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d005      	beq.n	800a9f0 <USB_SetCurrentMode+0x84>
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	2bc7      	cmp	r3, #199	; 0xc7
 800a9e8:	d9f0      	bls.n	800a9cc <USB_SetCurrentMode+0x60>
 800a9ea:	e001      	b.n	800a9f0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	e005      	b.n	800a9fc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	2bc8      	cmp	r3, #200	; 0xc8
 800a9f4:	d101      	bne.n	800a9fa <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a9f6:	2301      	movs	r3, #1
 800a9f8:	e000      	b.n	800a9fc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a9fa:	2300      	movs	r3, #0
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3710      	adds	r7, #16
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}

0800aa04 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800aa04:	b084      	sub	sp, #16
 800aa06:	b580      	push	{r7, lr}
 800aa08:	b086      	sub	sp, #24
 800aa0a:	af00      	add	r7, sp, #0
 800aa0c:	6078      	str	r0, [r7, #4]
 800aa0e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800aa12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800aa16:	2300      	movs	r3, #0
 800aa18:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800aa1e:	2300      	movs	r3, #0
 800aa20:	613b      	str	r3, [r7, #16]
 800aa22:	e009      	b.n	800aa38 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800aa24:	687a      	ldr	r2, [r7, #4]
 800aa26:	693b      	ldr	r3, [r7, #16]
 800aa28:	3340      	adds	r3, #64	; 0x40
 800aa2a:	009b      	lsls	r3, r3, #2
 800aa2c:	4413      	add	r3, r2
 800aa2e:	2200      	movs	r2, #0
 800aa30:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	3301      	adds	r3, #1
 800aa36:	613b      	str	r3, [r7, #16]
 800aa38:	693b      	ldr	r3, [r7, #16]
 800aa3a:	2b0e      	cmp	r3, #14
 800aa3c:	d9f2      	bls.n	800aa24 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800aa3e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d11c      	bne.n	800aa80 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa4c:	685b      	ldr	r3, [r3, #4]
 800aa4e:	68fa      	ldr	r2, [r7, #12]
 800aa50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aa54:	f043 0302 	orr.w	r3, r3, #2
 800aa58:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa5e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa6a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa76:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	639a      	str	r2, [r3, #56]	; 0x38
 800aa7e:	e00b      	b.n	800aa98 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa84:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa90:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800aa9e:	461a      	mov	r2, r3
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800aaa4:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800aaa8:	2b01      	cmp	r3, #1
 800aaaa:	d10d      	bne.n	800aac8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800aaac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d104      	bne.n	800aabe <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800aab4:	2100      	movs	r1, #0
 800aab6:	6878      	ldr	r0, [r7, #4]
 800aab8:	f000 f968 	bl	800ad8c <USB_SetDevSpeed>
 800aabc:	e008      	b.n	800aad0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800aabe:	2101      	movs	r1, #1
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	f000 f963 	bl	800ad8c <USB_SetDevSpeed>
 800aac6:	e003      	b.n	800aad0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800aac8:	2103      	movs	r1, #3
 800aaca:	6878      	ldr	r0, [r7, #4]
 800aacc:	f000 f95e 	bl	800ad8c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800aad0:	2110      	movs	r1, #16
 800aad2:	6878      	ldr	r0, [r7, #4]
 800aad4:	f000 f8fa 	bl	800accc <USB_FlushTxFifo>
 800aad8:	4603      	mov	r3, r0
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d001      	beq.n	800aae2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800aade:	2301      	movs	r3, #1
 800aae0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800aae2:	6878      	ldr	r0, [r7, #4]
 800aae4:	f000 f924 	bl	800ad30 <USB_FlushRxFifo>
 800aae8:	4603      	mov	r3, r0
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	d001      	beq.n	800aaf2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800aaee:	2301      	movs	r3, #1
 800aaf0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aaf8:	461a      	mov	r2, r3
 800aafa:	2300      	movs	r3, #0
 800aafc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab04:	461a      	mov	r2, r3
 800ab06:	2300      	movs	r3, #0
 800ab08:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab10:	461a      	mov	r2, r3
 800ab12:	2300      	movs	r3, #0
 800ab14:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ab16:	2300      	movs	r3, #0
 800ab18:	613b      	str	r3, [r7, #16]
 800ab1a:	e043      	b.n	800aba4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ab1c:	693b      	ldr	r3, [r7, #16]
 800ab1e:	015a      	lsls	r2, r3, #5
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	4413      	add	r3, r2
 800ab24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab28:	681b      	ldr	r3, [r3, #0]
 800ab2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ab2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ab32:	d118      	bne.n	800ab66 <USB_DevInit+0x162>
    {
      if (i == 0U)
 800ab34:	693b      	ldr	r3, [r7, #16]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d10a      	bne.n	800ab50 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800ab3a:	693b      	ldr	r3, [r7, #16]
 800ab3c:	015a      	lsls	r2, r3, #5
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	4413      	add	r3, r2
 800ab42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab46:	461a      	mov	r2, r3
 800ab48:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ab4c:	6013      	str	r3, [r2, #0]
 800ab4e:	e013      	b.n	800ab78 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ab50:	693b      	ldr	r3, [r7, #16]
 800ab52:	015a      	lsls	r2, r3, #5
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	4413      	add	r3, r2
 800ab58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab5c:	461a      	mov	r2, r3
 800ab5e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ab62:	6013      	str	r3, [r2, #0]
 800ab64:	e008      	b.n	800ab78 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ab66:	693b      	ldr	r3, [r7, #16]
 800ab68:	015a      	lsls	r2, r3, #5
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	4413      	add	r3, r2
 800ab6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab72:	461a      	mov	r2, r3
 800ab74:	2300      	movs	r3, #0
 800ab76:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ab78:	693b      	ldr	r3, [r7, #16]
 800ab7a:	015a      	lsls	r2, r3, #5
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	4413      	add	r3, r2
 800ab80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab84:	461a      	mov	r2, r3
 800ab86:	2300      	movs	r3, #0
 800ab88:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ab8a:	693b      	ldr	r3, [r7, #16]
 800ab8c:	015a      	lsls	r2, r3, #5
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	4413      	add	r3, r2
 800ab92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab96:	461a      	mov	r2, r3
 800ab98:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ab9c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ab9e:	693b      	ldr	r3, [r7, #16]
 800aba0:	3301      	adds	r3, #1
 800aba2:	613b      	str	r3, [r7, #16]
 800aba4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800aba8:	461a      	mov	r2, r3
 800abaa:	693b      	ldr	r3, [r7, #16]
 800abac:	4293      	cmp	r3, r2
 800abae:	d3b5      	bcc.n	800ab1c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800abb0:	2300      	movs	r3, #0
 800abb2:	613b      	str	r3, [r7, #16]
 800abb4:	e043      	b.n	800ac3e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800abb6:	693b      	ldr	r3, [r7, #16]
 800abb8:	015a      	lsls	r2, r3, #5
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	4413      	add	r3, r2
 800abbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800abc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800abcc:	d118      	bne.n	800ac00 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800abce:	693b      	ldr	r3, [r7, #16]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d10a      	bne.n	800abea <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800abd4:	693b      	ldr	r3, [r7, #16]
 800abd6:	015a      	lsls	r2, r3, #5
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	4413      	add	r3, r2
 800abdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abe0:	461a      	mov	r2, r3
 800abe2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800abe6:	6013      	str	r3, [r2, #0]
 800abe8:	e013      	b.n	800ac12 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800abea:	693b      	ldr	r3, [r7, #16]
 800abec:	015a      	lsls	r2, r3, #5
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	4413      	add	r3, r2
 800abf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abf6:	461a      	mov	r2, r3
 800abf8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800abfc:	6013      	str	r3, [r2, #0]
 800abfe:	e008      	b.n	800ac12 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ac00:	693b      	ldr	r3, [r7, #16]
 800ac02:	015a      	lsls	r2, r3, #5
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	4413      	add	r3, r2
 800ac08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac0c:	461a      	mov	r2, r3
 800ac0e:	2300      	movs	r3, #0
 800ac10:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ac12:	693b      	ldr	r3, [r7, #16]
 800ac14:	015a      	lsls	r2, r3, #5
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	4413      	add	r3, r2
 800ac1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac1e:	461a      	mov	r2, r3
 800ac20:	2300      	movs	r3, #0
 800ac22:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ac24:	693b      	ldr	r3, [r7, #16]
 800ac26:	015a      	lsls	r2, r3, #5
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	4413      	add	r3, r2
 800ac2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac30:	461a      	mov	r2, r3
 800ac32:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ac36:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ac38:	693b      	ldr	r3, [r7, #16]
 800ac3a:	3301      	adds	r3, #1
 800ac3c:	613b      	str	r3, [r7, #16]
 800ac3e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ac42:	461a      	mov	r2, r3
 800ac44:	693b      	ldr	r3, [r7, #16]
 800ac46:	4293      	cmp	r3, r2
 800ac48:	d3b5      	bcc.n	800abb6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac50:	691b      	ldr	r3, [r3, #16]
 800ac52:	68fa      	ldr	r2, [r7, #12]
 800ac54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ac58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ac5c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2200      	movs	r2, #0
 800ac62:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ac6a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ac6c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d105      	bne.n	800ac80 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	699b      	ldr	r3, [r3, #24]
 800ac78:	f043 0210 	orr.w	r2, r3, #16
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	699a      	ldr	r2, [r3, #24]
 800ac84:	4b10      	ldr	r3, [pc, #64]	; (800acc8 <USB_DevInit+0x2c4>)
 800ac86:	4313      	orrs	r3, r2
 800ac88:	687a      	ldr	r2, [r7, #4]
 800ac8a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ac8c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d005      	beq.n	800aca0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	699b      	ldr	r3, [r3, #24]
 800ac98:	f043 0208 	orr.w	r2, r3, #8
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800aca0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800aca4:	2b01      	cmp	r3, #1
 800aca6:	d107      	bne.n	800acb8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	699b      	ldr	r3, [r3, #24]
 800acac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800acb0:	f043 0304 	orr.w	r3, r3, #4
 800acb4:	687a      	ldr	r2, [r7, #4]
 800acb6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800acb8:	7dfb      	ldrb	r3, [r7, #23]
}
 800acba:	4618      	mov	r0, r3
 800acbc:	3718      	adds	r7, #24
 800acbe:	46bd      	mov	sp, r7
 800acc0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800acc4:	b004      	add	sp, #16
 800acc6:	4770      	bx	lr
 800acc8:	803c3800 	.word	0x803c3800

0800accc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800accc:	b480      	push	{r7}
 800acce:	b085      	sub	sp, #20
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	6078      	str	r0, [r7, #4]
 800acd4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800acd6:	2300      	movs	r3, #0
 800acd8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	3301      	adds	r3, #1
 800acde:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800ace6:	d901      	bls.n	800acec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800ace8:	2303      	movs	r3, #3
 800acea:	e01b      	b.n	800ad24 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	691b      	ldr	r3, [r3, #16]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	daf2      	bge.n	800acda <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800acf4:	2300      	movs	r3, #0
 800acf6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	019b      	lsls	r3, r3, #6
 800acfc:	f043 0220 	orr.w	r2, r3, #32
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	3301      	adds	r3, #1
 800ad08:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800ad10:	d901      	bls.n	800ad16 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ad12:	2303      	movs	r3, #3
 800ad14:	e006      	b.n	800ad24 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	691b      	ldr	r3, [r3, #16]
 800ad1a:	f003 0320 	and.w	r3, r3, #32
 800ad1e:	2b20      	cmp	r3, #32
 800ad20:	d0f0      	beq.n	800ad04 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ad22:	2300      	movs	r3, #0
}
 800ad24:	4618      	mov	r0, r3
 800ad26:	3714      	adds	r7, #20
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2e:	4770      	bx	lr

0800ad30 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ad30:	b480      	push	{r7}
 800ad32:	b085      	sub	sp, #20
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ad38:	2300      	movs	r3, #0
 800ad3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	3301      	adds	r3, #1
 800ad40:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800ad48:	d901      	bls.n	800ad4e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ad4a:	2303      	movs	r3, #3
 800ad4c:	e018      	b.n	800ad80 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	691b      	ldr	r3, [r3, #16]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	daf2      	bge.n	800ad3c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ad56:	2300      	movs	r3, #0
 800ad58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	2210      	movs	r2, #16
 800ad5e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	3301      	adds	r3, #1
 800ad64:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800ad6c:	d901      	bls.n	800ad72 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ad6e:	2303      	movs	r3, #3
 800ad70:	e006      	b.n	800ad80 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	691b      	ldr	r3, [r3, #16]
 800ad76:	f003 0310 	and.w	r3, r3, #16
 800ad7a:	2b10      	cmp	r3, #16
 800ad7c:	d0f0      	beq.n	800ad60 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ad7e:	2300      	movs	r3, #0
}
 800ad80:	4618      	mov	r0, r3
 800ad82:	3714      	adds	r7, #20
 800ad84:	46bd      	mov	sp, r7
 800ad86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8a:	4770      	bx	lr

0800ad8c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	b085      	sub	sp, #20
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
 800ad94:	460b      	mov	r3, r1
 800ad96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ada2:	681a      	ldr	r2, [r3, #0]
 800ada4:	78fb      	ldrb	r3, [r7, #3]
 800ada6:	68f9      	ldr	r1, [r7, #12]
 800ada8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800adac:	4313      	orrs	r3, r2
 800adae:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800adb0:	2300      	movs	r3, #0
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	3714      	adds	r7, #20
 800adb6:	46bd      	mov	sp, r7
 800adb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adbc:	4770      	bx	lr

0800adbe <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800adbe:	b480      	push	{r7}
 800adc0:	b087      	sub	sp, #28
 800adc2:	af00      	add	r7, sp, #0
 800adc4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800adca:	693b      	ldr	r3, [r7, #16]
 800adcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800add0:	689b      	ldr	r3, [r3, #8]
 800add2:	f003 0306 	and.w	r3, r3, #6
 800add6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d102      	bne.n	800ade4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800adde:	2300      	movs	r3, #0
 800ade0:	75fb      	strb	r3, [r7, #23]
 800ade2:	e00a      	b.n	800adfa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	2b02      	cmp	r3, #2
 800ade8:	d002      	beq.n	800adf0 <USB_GetDevSpeed+0x32>
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	2b06      	cmp	r3, #6
 800adee:	d102      	bne.n	800adf6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800adf0:	2302      	movs	r3, #2
 800adf2:	75fb      	strb	r3, [r7, #23]
 800adf4:	e001      	b.n	800adfa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800adf6:	230f      	movs	r3, #15
 800adf8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800adfa:	7dfb      	ldrb	r3, [r7, #23]
}
 800adfc:	4618      	mov	r0, r3
 800adfe:	371c      	adds	r7, #28
 800ae00:	46bd      	mov	sp, r7
 800ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae06:	4770      	bx	lr

0800ae08 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b085      	sub	sp, #20
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
 800ae10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	781b      	ldrb	r3, [r3, #0]
 800ae1a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	785b      	ldrb	r3, [r3, #1]
 800ae20:	2b01      	cmp	r3, #1
 800ae22:	d13a      	bne.n	800ae9a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae2a:	69da      	ldr	r2, [r3, #28]
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	781b      	ldrb	r3, [r3, #0]
 800ae30:	f003 030f 	and.w	r3, r3, #15
 800ae34:	2101      	movs	r1, #1
 800ae36:	fa01 f303 	lsl.w	r3, r1, r3
 800ae3a:	b29b      	uxth	r3, r3
 800ae3c:	68f9      	ldr	r1, [r7, #12]
 800ae3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ae42:	4313      	orrs	r3, r2
 800ae44:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ae46:	68bb      	ldr	r3, [r7, #8]
 800ae48:	015a      	lsls	r2, r3, #5
 800ae4a:	68fb      	ldr	r3, [r7, #12]
 800ae4c:	4413      	add	r3, r2
 800ae4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d155      	bne.n	800af08 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ae5c:	68bb      	ldr	r3, [r7, #8]
 800ae5e:	015a      	lsls	r2, r3, #5
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	4413      	add	r3, r2
 800ae64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae68:	681a      	ldr	r2, [r3, #0]
 800ae6a:	683b      	ldr	r3, [r7, #0]
 800ae6c:	689b      	ldr	r3, [r3, #8]
 800ae6e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ae72:	683b      	ldr	r3, [r7, #0]
 800ae74:	791b      	ldrb	r3, [r3, #4]
 800ae76:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ae78:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ae7a:	68bb      	ldr	r3, [r7, #8]
 800ae7c:	059b      	lsls	r3, r3, #22
 800ae7e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ae80:	4313      	orrs	r3, r2
 800ae82:	68ba      	ldr	r2, [r7, #8]
 800ae84:	0151      	lsls	r1, r2, #5
 800ae86:	68fa      	ldr	r2, [r7, #12]
 800ae88:	440a      	add	r2, r1
 800ae8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ae96:	6013      	str	r3, [r2, #0]
 800ae98:	e036      	b.n	800af08 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ae9a:	68fb      	ldr	r3, [r7, #12]
 800ae9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aea0:	69da      	ldr	r2, [r3, #28]
 800aea2:	683b      	ldr	r3, [r7, #0]
 800aea4:	781b      	ldrb	r3, [r3, #0]
 800aea6:	f003 030f 	and.w	r3, r3, #15
 800aeaa:	2101      	movs	r1, #1
 800aeac:	fa01 f303 	lsl.w	r3, r1, r3
 800aeb0:	041b      	lsls	r3, r3, #16
 800aeb2:	68f9      	ldr	r1, [r7, #12]
 800aeb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aeb8:	4313      	orrs	r3, r2
 800aeba:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800aebc:	68bb      	ldr	r3, [r7, #8]
 800aebe:	015a      	lsls	r2, r3, #5
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	4413      	add	r3, r2
 800aec4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d11a      	bne.n	800af08 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	015a      	lsls	r2, r3, #5
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	4413      	add	r3, r2
 800aeda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aede:	681a      	ldr	r2, [r3, #0]
 800aee0:	683b      	ldr	r3, [r7, #0]
 800aee2:	689b      	ldr	r3, [r3, #8]
 800aee4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800aee8:	683b      	ldr	r3, [r7, #0]
 800aeea:	791b      	ldrb	r3, [r3, #4]
 800aeec:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800aeee:	430b      	orrs	r3, r1
 800aef0:	4313      	orrs	r3, r2
 800aef2:	68ba      	ldr	r2, [r7, #8]
 800aef4:	0151      	lsls	r1, r2, #5
 800aef6:	68fa      	ldr	r2, [r7, #12]
 800aef8:	440a      	add	r2, r1
 800aefa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aefe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800af06:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800af08:	2300      	movs	r3, #0
}
 800af0a:	4618      	mov	r0, r3
 800af0c:	3714      	adds	r7, #20
 800af0e:	46bd      	mov	sp, r7
 800af10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af14:	4770      	bx	lr
	...

0800af18 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800af18:	b480      	push	{r7}
 800af1a:	b085      	sub	sp, #20
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	781b      	ldrb	r3, [r3, #0]
 800af2a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800af2c:	683b      	ldr	r3, [r7, #0]
 800af2e:	785b      	ldrb	r3, [r3, #1]
 800af30:	2b01      	cmp	r3, #1
 800af32:	d161      	bne.n	800aff8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800af34:	68bb      	ldr	r3, [r7, #8]
 800af36:	015a      	lsls	r2, r3, #5
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	4413      	add	r3, r2
 800af3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800af46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800af4a:	d11f      	bne.n	800af8c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	015a      	lsls	r2, r3, #5
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	4413      	add	r3, r2
 800af54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	68ba      	ldr	r2, [r7, #8]
 800af5c:	0151      	lsls	r1, r2, #5
 800af5e:	68fa      	ldr	r2, [r7, #12]
 800af60:	440a      	add	r2, r1
 800af62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af66:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800af6a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800af6c:	68bb      	ldr	r3, [r7, #8]
 800af6e:	015a      	lsls	r2, r3, #5
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	4413      	add	r3, r2
 800af74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	68ba      	ldr	r2, [r7, #8]
 800af7c:	0151      	lsls	r1, r2, #5
 800af7e:	68fa      	ldr	r2, [r7, #12]
 800af80:	440a      	add	r2, r1
 800af82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800af8a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800af94:	683b      	ldr	r3, [r7, #0]
 800af96:	781b      	ldrb	r3, [r3, #0]
 800af98:	f003 030f 	and.w	r3, r3, #15
 800af9c:	2101      	movs	r1, #1
 800af9e:	fa01 f303 	lsl.w	r3, r1, r3
 800afa2:	b29b      	uxth	r3, r3
 800afa4:	43db      	mvns	r3, r3
 800afa6:	68f9      	ldr	r1, [r7, #12]
 800afa8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800afac:	4013      	ands	r3, r2
 800afae:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800afb6:	69da      	ldr	r2, [r3, #28]
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	781b      	ldrb	r3, [r3, #0]
 800afbc:	f003 030f 	and.w	r3, r3, #15
 800afc0:	2101      	movs	r1, #1
 800afc2:	fa01 f303 	lsl.w	r3, r1, r3
 800afc6:	b29b      	uxth	r3, r3
 800afc8:	43db      	mvns	r3, r3
 800afca:	68f9      	ldr	r1, [r7, #12]
 800afcc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800afd0:	4013      	ands	r3, r2
 800afd2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800afd4:	68bb      	ldr	r3, [r7, #8]
 800afd6:	015a      	lsls	r2, r3, #5
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	4413      	add	r3, r2
 800afdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afe0:	681a      	ldr	r2, [r3, #0]
 800afe2:	68bb      	ldr	r3, [r7, #8]
 800afe4:	0159      	lsls	r1, r3, #5
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	440b      	add	r3, r1
 800afea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afee:	4619      	mov	r1, r3
 800aff0:	4b35      	ldr	r3, [pc, #212]	; (800b0c8 <USB_DeactivateEndpoint+0x1b0>)
 800aff2:	4013      	ands	r3, r2
 800aff4:	600b      	str	r3, [r1, #0]
 800aff6:	e060      	b.n	800b0ba <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aff8:	68bb      	ldr	r3, [r7, #8]
 800affa:	015a      	lsls	r2, r3, #5
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	4413      	add	r3, r2
 800b000:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b00a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b00e:	d11f      	bne.n	800b050 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	015a      	lsls	r2, r3, #5
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	4413      	add	r3, r2
 800b018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	68ba      	ldr	r2, [r7, #8]
 800b020:	0151      	lsls	r1, r2, #5
 800b022:	68fa      	ldr	r2, [r7, #12]
 800b024:	440a      	add	r2, r1
 800b026:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b02a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b02e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	015a      	lsls	r2, r3, #5
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	4413      	add	r3, r2
 800b038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	68ba      	ldr	r2, [r7, #8]
 800b040:	0151      	lsls	r1, r2, #5
 800b042:	68fa      	ldr	r2, [r7, #12]
 800b044:	440a      	add	r2, r1
 800b046:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b04a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b04e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b056:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	781b      	ldrb	r3, [r3, #0]
 800b05c:	f003 030f 	and.w	r3, r3, #15
 800b060:	2101      	movs	r1, #1
 800b062:	fa01 f303 	lsl.w	r3, r1, r3
 800b066:	041b      	lsls	r3, r3, #16
 800b068:	43db      	mvns	r3, r3
 800b06a:	68f9      	ldr	r1, [r7, #12]
 800b06c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b070:	4013      	ands	r3, r2
 800b072:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b07a:	69da      	ldr	r2, [r3, #28]
 800b07c:	683b      	ldr	r3, [r7, #0]
 800b07e:	781b      	ldrb	r3, [r3, #0]
 800b080:	f003 030f 	and.w	r3, r3, #15
 800b084:	2101      	movs	r1, #1
 800b086:	fa01 f303 	lsl.w	r3, r1, r3
 800b08a:	041b      	lsls	r3, r3, #16
 800b08c:	43db      	mvns	r3, r3
 800b08e:	68f9      	ldr	r1, [r7, #12]
 800b090:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b094:	4013      	ands	r3, r2
 800b096:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b098:	68bb      	ldr	r3, [r7, #8]
 800b09a:	015a      	lsls	r2, r3, #5
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	4413      	add	r3, r2
 800b0a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0a4:	681a      	ldr	r2, [r3, #0]
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	0159      	lsls	r1, r3, #5
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	440b      	add	r3, r1
 800b0ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0b2:	4619      	mov	r1, r3
 800b0b4:	4b05      	ldr	r3, [pc, #20]	; (800b0cc <USB_DeactivateEndpoint+0x1b4>)
 800b0b6:	4013      	ands	r3, r2
 800b0b8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b0ba:	2300      	movs	r3, #0
}
 800b0bc:	4618      	mov	r0, r3
 800b0be:	3714      	adds	r7, #20
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c6:	4770      	bx	lr
 800b0c8:	ec337800 	.word	0xec337800
 800b0cc:	eff37800 	.word	0xeff37800

0800b0d0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b08a      	sub	sp, #40	; 0x28
 800b0d4:	af02      	add	r7, sp, #8
 800b0d6:	60f8      	str	r0, [r7, #12]
 800b0d8:	60b9      	str	r1, [r7, #8]
 800b0da:	4613      	mov	r3, r2
 800b0dc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b0e2:	68bb      	ldr	r3, [r7, #8]
 800b0e4:	781b      	ldrb	r3, [r3, #0]
 800b0e6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	785b      	ldrb	r3, [r3, #1]
 800b0ec:	2b01      	cmp	r3, #1
 800b0ee:	f040 817a 	bne.w	800b3e6 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b0f2:	68bb      	ldr	r3, [r7, #8]
 800b0f4:	691b      	ldr	r3, [r3, #16]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d132      	bne.n	800b160 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b0fa:	69bb      	ldr	r3, [r7, #24]
 800b0fc:	015a      	lsls	r2, r3, #5
 800b0fe:	69fb      	ldr	r3, [r7, #28]
 800b100:	4413      	add	r3, r2
 800b102:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b106:	691b      	ldr	r3, [r3, #16]
 800b108:	69ba      	ldr	r2, [r7, #24]
 800b10a:	0151      	lsls	r1, r2, #5
 800b10c:	69fa      	ldr	r2, [r7, #28]
 800b10e:	440a      	add	r2, r1
 800b110:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b114:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b118:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b11c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b11e:	69bb      	ldr	r3, [r7, #24]
 800b120:	015a      	lsls	r2, r3, #5
 800b122:	69fb      	ldr	r3, [r7, #28]
 800b124:	4413      	add	r3, r2
 800b126:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b12a:	691b      	ldr	r3, [r3, #16]
 800b12c:	69ba      	ldr	r2, [r7, #24]
 800b12e:	0151      	lsls	r1, r2, #5
 800b130:	69fa      	ldr	r2, [r7, #28]
 800b132:	440a      	add	r2, r1
 800b134:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b138:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b13c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b13e:	69bb      	ldr	r3, [r7, #24]
 800b140:	015a      	lsls	r2, r3, #5
 800b142:	69fb      	ldr	r3, [r7, #28]
 800b144:	4413      	add	r3, r2
 800b146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b14a:	691b      	ldr	r3, [r3, #16]
 800b14c:	69ba      	ldr	r2, [r7, #24]
 800b14e:	0151      	lsls	r1, r2, #5
 800b150:	69fa      	ldr	r2, [r7, #28]
 800b152:	440a      	add	r2, r1
 800b154:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b158:	0cdb      	lsrs	r3, r3, #19
 800b15a:	04db      	lsls	r3, r3, #19
 800b15c:	6113      	str	r3, [r2, #16]
 800b15e:	e092      	b.n	800b286 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b160:	69bb      	ldr	r3, [r7, #24]
 800b162:	015a      	lsls	r2, r3, #5
 800b164:	69fb      	ldr	r3, [r7, #28]
 800b166:	4413      	add	r3, r2
 800b168:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b16c:	691b      	ldr	r3, [r3, #16]
 800b16e:	69ba      	ldr	r2, [r7, #24]
 800b170:	0151      	lsls	r1, r2, #5
 800b172:	69fa      	ldr	r2, [r7, #28]
 800b174:	440a      	add	r2, r1
 800b176:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b17a:	0cdb      	lsrs	r3, r3, #19
 800b17c:	04db      	lsls	r3, r3, #19
 800b17e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b180:	69bb      	ldr	r3, [r7, #24]
 800b182:	015a      	lsls	r2, r3, #5
 800b184:	69fb      	ldr	r3, [r7, #28]
 800b186:	4413      	add	r3, r2
 800b188:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b18c:	691b      	ldr	r3, [r3, #16]
 800b18e:	69ba      	ldr	r2, [r7, #24]
 800b190:	0151      	lsls	r1, r2, #5
 800b192:	69fa      	ldr	r2, [r7, #28]
 800b194:	440a      	add	r2, r1
 800b196:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b19a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b19e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b1a2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800b1a4:	69bb      	ldr	r3, [r7, #24]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d11a      	bne.n	800b1e0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800b1aa:	68bb      	ldr	r3, [r7, #8]
 800b1ac:	691a      	ldr	r2, [r3, #16]
 800b1ae:	68bb      	ldr	r3, [r7, #8]
 800b1b0:	689b      	ldr	r3, [r3, #8]
 800b1b2:	429a      	cmp	r2, r3
 800b1b4:	d903      	bls.n	800b1be <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800b1b6:	68bb      	ldr	r3, [r7, #8]
 800b1b8:	689a      	ldr	r2, [r3, #8]
 800b1ba:	68bb      	ldr	r3, [r7, #8]
 800b1bc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b1be:	69bb      	ldr	r3, [r7, #24]
 800b1c0:	015a      	lsls	r2, r3, #5
 800b1c2:	69fb      	ldr	r3, [r7, #28]
 800b1c4:	4413      	add	r3, r2
 800b1c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1ca:	691b      	ldr	r3, [r3, #16]
 800b1cc:	69ba      	ldr	r2, [r7, #24]
 800b1ce:	0151      	lsls	r1, r2, #5
 800b1d0:	69fa      	ldr	r2, [r7, #28]
 800b1d2:	440a      	add	r2, r1
 800b1d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b1dc:	6113      	str	r3, [r2, #16]
 800b1de:	e01b      	b.n	800b218 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b1e0:	69bb      	ldr	r3, [r7, #24]
 800b1e2:	015a      	lsls	r2, r3, #5
 800b1e4:	69fb      	ldr	r3, [r7, #28]
 800b1e6:	4413      	add	r3, r2
 800b1e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1ec:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	6919      	ldr	r1, [r3, #16]
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	689b      	ldr	r3, [r3, #8]
 800b1f6:	440b      	add	r3, r1
 800b1f8:	1e59      	subs	r1, r3, #1
 800b1fa:	68bb      	ldr	r3, [r7, #8]
 800b1fc:	689b      	ldr	r3, [r3, #8]
 800b1fe:	fbb1 f3f3 	udiv	r3, r1, r3
 800b202:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b204:	4ba2      	ldr	r3, [pc, #648]	; (800b490 <USB_EPStartXfer+0x3c0>)
 800b206:	400b      	ands	r3, r1
 800b208:	69b9      	ldr	r1, [r7, #24]
 800b20a:	0148      	lsls	r0, r1, #5
 800b20c:	69f9      	ldr	r1, [r7, #28]
 800b20e:	4401      	add	r1, r0
 800b210:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b214:	4313      	orrs	r3, r2
 800b216:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b218:	69bb      	ldr	r3, [r7, #24]
 800b21a:	015a      	lsls	r2, r3, #5
 800b21c:	69fb      	ldr	r3, [r7, #28]
 800b21e:	4413      	add	r3, r2
 800b220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b224:	691a      	ldr	r2, [r3, #16]
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	691b      	ldr	r3, [r3, #16]
 800b22a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b22e:	69b9      	ldr	r1, [r7, #24]
 800b230:	0148      	lsls	r0, r1, #5
 800b232:	69f9      	ldr	r1, [r7, #28]
 800b234:	4401      	add	r1, r0
 800b236:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b23a:	4313      	orrs	r3, r2
 800b23c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	791b      	ldrb	r3, [r3, #4]
 800b242:	2b01      	cmp	r3, #1
 800b244:	d11f      	bne.n	800b286 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b246:	69bb      	ldr	r3, [r7, #24]
 800b248:	015a      	lsls	r2, r3, #5
 800b24a:	69fb      	ldr	r3, [r7, #28]
 800b24c:	4413      	add	r3, r2
 800b24e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b252:	691b      	ldr	r3, [r3, #16]
 800b254:	69ba      	ldr	r2, [r7, #24]
 800b256:	0151      	lsls	r1, r2, #5
 800b258:	69fa      	ldr	r2, [r7, #28]
 800b25a:	440a      	add	r2, r1
 800b25c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b260:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b264:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b266:	69bb      	ldr	r3, [r7, #24]
 800b268:	015a      	lsls	r2, r3, #5
 800b26a:	69fb      	ldr	r3, [r7, #28]
 800b26c:	4413      	add	r3, r2
 800b26e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b272:	691b      	ldr	r3, [r3, #16]
 800b274:	69ba      	ldr	r2, [r7, #24]
 800b276:	0151      	lsls	r1, r2, #5
 800b278:	69fa      	ldr	r2, [r7, #28]
 800b27a:	440a      	add	r2, r1
 800b27c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b280:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b284:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b286:	79fb      	ldrb	r3, [r7, #7]
 800b288:	2b01      	cmp	r3, #1
 800b28a:	d14b      	bne.n	800b324 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	69db      	ldr	r3, [r3, #28]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d009      	beq.n	800b2a8 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b294:	69bb      	ldr	r3, [r7, #24]
 800b296:	015a      	lsls	r2, r3, #5
 800b298:	69fb      	ldr	r3, [r7, #28]
 800b29a:	4413      	add	r3, r2
 800b29c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2a0:	461a      	mov	r2, r3
 800b2a2:	68bb      	ldr	r3, [r7, #8]
 800b2a4:	69db      	ldr	r3, [r3, #28]
 800b2a6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b2a8:	68bb      	ldr	r3, [r7, #8]
 800b2aa:	791b      	ldrb	r3, [r3, #4]
 800b2ac:	2b01      	cmp	r3, #1
 800b2ae:	d128      	bne.n	800b302 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b2b0:	69fb      	ldr	r3, [r7, #28]
 800b2b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2b6:	689b      	ldr	r3, [r3, #8]
 800b2b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d110      	bne.n	800b2e2 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b2c0:	69bb      	ldr	r3, [r7, #24]
 800b2c2:	015a      	lsls	r2, r3, #5
 800b2c4:	69fb      	ldr	r3, [r7, #28]
 800b2c6:	4413      	add	r3, r2
 800b2c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	69ba      	ldr	r2, [r7, #24]
 800b2d0:	0151      	lsls	r1, r2, #5
 800b2d2:	69fa      	ldr	r2, [r7, #28]
 800b2d4:	440a      	add	r2, r1
 800b2d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b2da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b2de:	6013      	str	r3, [r2, #0]
 800b2e0:	e00f      	b.n	800b302 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b2e2:	69bb      	ldr	r3, [r7, #24]
 800b2e4:	015a      	lsls	r2, r3, #5
 800b2e6:	69fb      	ldr	r3, [r7, #28]
 800b2e8:	4413      	add	r3, r2
 800b2ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	69ba      	ldr	r2, [r7, #24]
 800b2f2:	0151      	lsls	r1, r2, #5
 800b2f4:	69fa      	ldr	r2, [r7, #28]
 800b2f6:	440a      	add	r2, r1
 800b2f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b2fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b300:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b302:	69bb      	ldr	r3, [r7, #24]
 800b304:	015a      	lsls	r2, r3, #5
 800b306:	69fb      	ldr	r3, [r7, #28]
 800b308:	4413      	add	r3, r2
 800b30a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	69ba      	ldr	r2, [r7, #24]
 800b312:	0151      	lsls	r1, r2, #5
 800b314:	69fa      	ldr	r2, [r7, #28]
 800b316:	440a      	add	r2, r1
 800b318:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b31c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b320:	6013      	str	r3, [r2, #0]
 800b322:	e165      	b.n	800b5f0 <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b324:	69bb      	ldr	r3, [r7, #24]
 800b326:	015a      	lsls	r2, r3, #5
 800b328:	69fb      	ldr	r3, [r7, #28]
 800b32a:	4413      	add	r3, r2
 800b32c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	69ba      	ldr	r2, [r7, #24]
 800b334:	0151      	lsls	r1, r2, #5
 800b336:	69fa      	ldr	r2, [r7, #28]
 800b338:	440a      	add	r2, r1
 800b33a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b33e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b342:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	791b      	ldrb	r3, [r3, #4]
 800b348:	2b01      	cmp	r3, #1
 800b34a:	d015      	beq.n	800b378 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b34c:	68bb      	ldr	r3, [r7, #8]
 800b34e:	691b      	ldr	r3, [r3, #16]
 800b350:	2b00      	cmp	r3, #0
 800b352:	f000 814d 	beq.w	800b5f0 <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b356:	69fb      	ldr	r3, [r7, #28]
 800b358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b35c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	781b      	ldrb	r3, [r3, #0]
 800b362:	f003 030f 	and.w	r3, r3, #15
 800b366:	2101      	movs	r1, #1
 800b368:	fa01 f303 	lsl.w	r3, r1, r3
 800b36c:	69f9      	ldr	r1, [r7, #28]
 800b36e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b372:	4313      	orrs	r3, r2
 800b374:	634b      	str	r3, [r1, #52]	; 0x34
 800b376:	e13b      	b.n	800b5f0 <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b378:	69fb      	ldr	r3, [r7, #28]
 800b37a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b37e:	689b      	ldr	r3, [r3, #8]
 800b380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b384:	2b00      	cmp	r3, #0
 800b386:	d110      	bne.n	800b3aa <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b388:	69bb      	ldr	r3, [r7, #24]
 800b38a:	015a      	lsls	r2, r3, #5
 800b38c:	69fb      	ldr	r3, [r7, #28]
 800b38e:	4413      	add	r3, r2
 800b390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	69ba      	ldr	r2, [r7, #24]
 800b398:	0151      	lsls	r1, r2, #5
 800b39a:	69fa      	ldr	r2, [r7, #28]
 800b39c:	440a      	add	r2, r1
 800b39e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3a2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b3a6:	6013      	str	r3, [r2, #0]
 800b3a8:	e00f      	b.n	800b3ca <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b3aa:	69bb      	ldr	r3, [r7, #24]
 800b3ac:	015a      	lsls	r2, r3, #5
 800b3ae:	69fb      	ldr	r3, [r7, #28]
 800b3b0:	4413      	add	r3, r2
 800b3b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	69ba      	ldr	r2, [r7, #24]
 800b3ba:	0151      	lsls	r1, r2, #5
 800b3bc:	69fa      	ldr	r2, [r7, #28]
 800b3be:	440a      	add	r2, r1
 800b3c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b3c8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b3ca:	68bb      	ldr	r3, [r7, #8]
 800b3cc:	68d9      	ldr	r1, [r3, #12]
 800b3ce:	68bb      	ldr	r3, [r7, #8]
 800b3d0:	781a      	ldrb	r2, [r3, #0]
 800b3d2:	68bb      	ldr	r3, [r7, #8]
 800b3d4:	691b      	ldr	r3, [r3, #16]
 800b3d6:	b298      	uxth	r0, r3
 800b3d8:	79fb      	ldrb	r3, [r7, #7]
 800b3da:	9300      	str	r3, [sp, #0]
 800b3dc:	4603      	mov	r3, r0
 800b3de:	68f8      	ldr	r0, [r7, #12]
 800b3e0:	f000 f9b8 	bl	800b754 <USB_WritePacket>
 800b3e4:	e104      	b.n	800b5f0 <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b3e6:	69bb      	ldr	r3, [r7, #24]
 800b3e8:	015a      	lsls	r2, r3, #5
 800b3ea:	69fb      	ldr	r3, [r7, #28]
 800b3ec:	4413      	add	r3, r2
 800b3ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3f2:	691b      	ldr	r3, [r3, #16]
 800b3f4:	69ba      	ldr	r2, [r7, #24]
 800b3f6:	0151      	lsls	r1, r2, #5
 800b3f8:	69fa      	ldr	r2, [r7, #28]
 800b3fa:	440a      	add	r2, r1
 800b3fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b400:	0cdb      	lsrs	r3, r3, #19
 800b402:	04db      	lsls	r3, r3, #19
 800b404:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b406:	69bb      	ldr	r3, [r7, #24]
 800b408:	015a      	lsls	r2, r3, #5
 800b40a:	69fb      	ldr	r3, [r7, #28]
 800b40c:	4413      	add	r3, r2
 800b40e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b412:	691b      	ldr	r3, [r3, #16]
 800b414:	69ba      	ldr	r2, [r7, #24]
 800b416:	0151      	lsls	r1, r2, #5
 800b418:	69fa      	ldr	r2, [r7, #28]
 800b41a:	440a      	add	r2, r1
 800b41c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b420:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800b424:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800b428:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800b42a:	69bb      	ldr	r3, [r7, #24]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d131      	bne.n	800b494 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	691b      	ldr	r3, [r3, #16]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d003      	beq.n	800b440 <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	689a      	ldr	r2, [r3, #8]
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800b440:	68bb      	ldr	r3, [r7, #8]
 800b442:	689a      	ldr	r2, [r3, #8]
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b448:	69bb      	ldr	r3, [r7, #24]
 800b44a:	015a      	lsls	r2, r3, #5
 800b44c:	69fb      	ldr	r3, [r7, #28]
 800b44e:	4413      	add	r3, r2
 800b450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b454:	691a      	ldr	r2, [r3, #16]
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	6a1b      	ldr	r3, [r3, #32]
 800b45a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b45e:	69b9      	ldr	r1, [r7, #24]
 800b460:	0148      	lsls	r0, r1, #5
 800b462:	69f9      	ldr	r1, [r7, #28]
 800b464:	4401      	add	r1, r0
 800b466:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b46a:	4313      	orrs	r3, r2
 800b46c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b46e:	69bb      	ldr	r3, [r7, #24]
 800b470:	015a      	lsls	r2, r3, #5
 800b472:	69fb      	ldr	r3, [r7, #28]
 800b474:	4413      	add	r3, r2
 800b476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b47a:	691b      	ldr	r3, [r3, #16]
 800b47c:	69ba      	ldr	r2, [r7, #24]
 800b47e:	0151      	lsls	r1, r2, #5
 800b480:	69fa      	ldr	r2, [r7, #28]
 800b482:	440a      	add	r2, r1
 800b484:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b488:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b48c:	6113      	str	r3, [r2, #16]
 800b48e:	e061      	b.n	800b554 <USB_EPStartXfer+0x484>
 800b490:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	691b      	ldr	r3, [r3, #16]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d123      	bne.n	800b4e4 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b49c:	69bb      	ldr	r3, [r7, #24]
 800b49e:	015a      	lsls	r2, r3, #5
 800b4a0:	69fb      	ldr	r3, [r7, #28]
 800b4a2:	4413      	add	r3, r2
 800b4a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4a8:	691a      	ldr	r2, [r3, #16]
 800b4aa:	68bb      	ldr	r3, [r7, #8]
 800b4ac:	689b      	ldr	r3, [r3, #8]
 800b4ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b4b2:	69b9      	ldr	r1, [r7, #24]
 800b4b4:	0148      	lsls	r0, r1, #5
 800b4b6:	69f9      	ldr	r1, [r7, #28]
 800b4b8:	4401      	add	r1, r0
 800b4ba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b4be:	4313      	orrs	r3, r2
 800b4c0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b4c2:	69bb      	ldr	r3, [r7, #24]
 800b4c4:	015a      	lsls	r2, r3, #5
 800b4c6:	69fb      	ldr	r3, [r7, #28]
 800b4c8:	4413      	add	r3, r2
 800b4ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4ce:	691b      	ldr	r3, [r3, #16]
 800b4d0:	69ba      	ldr	r2, [r7, #24]
 800b4d2:	0151      	lsls	r1, r2, #5
 800b4d4:	69fa      	ldr	r2, [r7, #28]
 800b4d6:	440a      	add	r2, r1
 800b4d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b4e0:	6113      	str	r3, [r2, #16]
 800b4e2:	e037      	b.n	800b554 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	691a      	ldr	r2, [r3, #16]
 800b4e8:	68bb      	ldr	r3, [r7, #8]
 800b4ea:	689b      	ldr	r3, [r3, #8]
 800b4ec:	4413      	add	r3, r2
 800b4ee:	1e5a      	subs	r2, r3, #1
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	689b      	ldr	r3, [r3, #8]
 800b4f4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b4f8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800b4fa:	68bb      	ldr	r3, [r7, #8]
 800b4fc:	689b      	ldr	r3, [r3, #8]
 800b4fe:	8afa      	ldrh	r2, [r7, #22]
 800b500:	fb03 f202 	mul.w	r2, r3, r2
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b508:	69bb      	ldr	r3, [r7, #24]
 800b50a:	015a      	lsls	r2, r3, #5
 800b50c:	69fb      	ldr	r3, [r7, #28]
 800b50e:	4413      	add	r3, r2
 800b510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b514:	691a      	ldr	r2, [r3, #16]
 800b516:	8afb      	ldrh	r3, [r7, #22]
 800b518:	04d9      	lsls	r1, r3, #19
 800b51a:	4b38      	ldr	r3, [pc, #224]	; (800b5fc <USB_EPStartXfer+0x52c>)
 800b51c:	400b      	ands	r3, r1
 800b51e:	69b9      	ldr	r1, [r7, #24]
 800b520:	0148      	lsls	r0, r1, #5
 800b522:	69f9      	ldr	r1, [r7, #28]
 800b524:	4401      	add	r1, r0
 800b526:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b52a:	4313      	orrs	r3, r2
 800b52c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b52e:	69bb      	ldr	r3, [r7, #24]
 800b530:	015a      	lsls	r2, r3, #5
 800b532:	69fb      	ldr	r3, [r7, #28]
 800b534:	4413      	add	r3, r2
 800b536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b53a:	691a      	ldr	r2, [r3, #16]
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	6a1b      	ldr	r3, [r3, #32]
 800b540:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b544:	69b9      	ldr	r1, [r7, #24]
 800b546:	0148      	lsls	r0, r1, #5
 800b548:	69f9      	ldr	r1, [r7, #28]
 800b54a:	4401      	add	r1, r0
 800b54c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b550:	4313      	orrs	r3, r2
 800b552:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800b554:	79fb      	ldrb	r3, [r7, #7]
 800b556:	2b01      	cmp	r3, #1
 800b558:	d10d      	bne.n	800b576 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b55a:	68bb      	ldr	r3, [r7, #8]
 800b55c:	68db      	ldr	r3, [r3, #12]
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d009      	beq.n	800b576 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	68d9      	ldr	r1, [r3, #12]
 800b566:	69bb      	ldr	r3, [r7, #24]
 800b568:	015a      	lsls	r2, r3, #5
 800b56a:	69fb      	ldr	r3, [r7, #28]
 800b56c:	4413      	add	r3, r2
 800b56e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b572:	460a      	mov	r2, r1
 800b574:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b576:	68bb      	ldr	r3, [r7, #8]
 800b578:	791b      	ldrb	r3, [r3, #4]
 800b57a:	2b01      	cmp	r3, #1
 800b57c:	d128      	bne.n	800b5d0 <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b57e:	69fb      	ldr	r3, [r7, #28]
 800b580:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b584:	689b      	ldr	r3, [r3, #8]
 800b586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d110      	bne.n	800b5b0 <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b58e:	69bb      	ldr	r3, [r7, #24]
 800b590:	015a      	lsls	r2, r3, #5
 800b592:	69fb      	ldr	r3, [r7, #28]
 800b594:	4413      	add	r3, r2
 800b596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	69ba      	ldr	r2, [r7, #24]
 800b59e:	0151      	lsls	r1, r2, #5
 800b5a0:	69fa      	ldr	r2, [r7, #28]
 800b5a2:	440a      	add	r2, r1
 800b5a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b5a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b5ac:	6013      	str	r3, [r2, #0]
 800b5ae:	e00f      	b.n	800b5d0 <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b5b0:	69bb      	ldr	r3, [r7, #24]
 800b5b2:	015a      	lsls	r2, r3, #5
 800b5b4:	69fb      	ldr	r3, [r7, #28]
 800b5b6:	4413      	add	r3, r2
 800b5b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	69ba      	ldr	r2, [r7, #24]
 800b5c0:	0151      	lsls	r1, r2, #5
 800b5c2:	69fa      	ldr	r2, [r7, #28]
 800b5c4:	440a      	add	r2, r1
 800b5c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b5ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b5ce:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b5d0:	69bb      	ldr	r3, [r7, #24]
 800b5d2:	015a      	lsls	r2, r3, #5
 800b5d4:	69fb      	ldr	r3, [r7, #28]
 800b5d6:	4413      	add	r3, r2
 800b5d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	69ba      	ldr	r2, [r7, #24]
 800b5e0:	0151      	lsls	r1, r2, #5
 800b5e2:	69fa      	ldr	r2, [r7, #28]
 800b5e4:	440a      	add	r2, r1
 800b5e6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b5ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b5ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b5f0:	2300      	movs	r3, #0
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	3720      	adds	r7, #32
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}
 800b5fa:	bf00      	nop
 800b5fc:	1ff80000 	.word	0x1ff80000

0800b600 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b600:	b480      	push	{r7}
 800b602:	b087      	sub	sp, #28
 800b604:	af00      	add	r7, sp, #0
 800b606:	6078      	str	r0, [r7, #4]
 800b608:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b60a:	2300      	movs	r3, #0
 800b60c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b60e:	2300      	movs	r3, #0
 800b610:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b616:	683b      	ldr	r3, [r7, #0]
 800b618:	785b      	ldrb	r3, [r3, #1]
 800b61a:	2b01      	cmp	r3, #1
 800b61c:	d14a      	bne.n	800b6b4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b61e:	683b      	ldr	r3, [r7, #0]
 800b620:	781b      	ldrb	r3, [r3, #0]
 800b622:	015a      	lsls	r2, r3, #5
 800b624:	693b      	ldr	r3, [r7, #16]
 800b626:	4413      	add	r3, r2
 800b628:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b632:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b636:	f040 8086 	bne.w	800b746 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b63a:	683b      	ldr	r3, [r7, #0]
 800b63c:	781b      	ldrb	r3, [r3, #0]
 800b63e:	015a      	lsls	r2, r3, #5
 800b640:	693b      	ldr	r3, [r7, #16]
 800b642:	4413      	add	r3, r2
 800b644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	683a      	ldr	r2, [r7, #0]
 800b64c:	7812      	ldrb	r2, [r2, #0]
 800b64e:	0151      	lsls	r1, r2, #5
 800b650:	693a      	ldr	r2, [r7, #16]
 800b652:	440a      	add	r2, r1
 800b654:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b658:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b65c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	781b      	ldrb	r3, [r3, #0]
 800b662:	015a      	lsls	r2, r3, #5
 800b664:	693b      	ldr	r3, [r7, #16]
 800b666:	4413      	add	r3, r2
 800b668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	683a      	ldr	r2, [r7, #0]
 800b670:	7812      	ldrb	r2, [r2, #0]
 800b672:	0151      	lsls	r1, r2, #5
 800b674:	693a      	ldr	r2, [r7, #16]
 800b676:	440a      	add	r2, r1
 800b678:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b67c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b680:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	3301      	adds	r3, #1
 800b686:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	f242 7210 	movw	r2, #10000	; 0x2710
 800b68e:	4293      	cmp	r3, r2
 800b690:	d902      	bls.n	800b698 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b692:	2301      	movs	r3, #1
 800b694:	75fb      	strb	r3, [r7, #23]
          break;
 800b696:	e056      	b.n	800b746 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b698:	683b      	ldr	r3, [r7, #0]
 800b69a:	781b      	ldrb	r3, [r3, #0]
 800b69c:	015a      	lsls	r2, r3, #5
 800b69e:	693b      	ldr	r3, [r7, #16]
 800b6a0:	4413      	add	r3, r2
 800b6a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b6ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b6b0:	d0e7      	beq.n	800b682 <USB_EPStopXfer+0x82>
 800b6b2:	e048      	b.n	800b746 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b6b4:	683b      	ldr	r3, [r7, #0]
 800b6b6:	781b      	ldrb	r3, [r3, #0]
 800b6b8:	015a      	lsls	r2, r3, #5
 800b6ba:	693b      	ldr	r3, [r7, #16]
 800b6bc:	4413      	add	r3, r2
 800b6be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b6c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b6cc:	d13b      	bne.n	800b746 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b6ce:	683b      	ldr	r3, [r7, #0]
 800b6d0:	781b      	ldrb	r3, [r3, #0]
 800b6d2:	015a      	lsls	r2, r3, #5
 800b6d4:	693b      	ldr	r3, [r7, #16]
 800b6d6:	4413      	add	r3, r2
 800b6d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	683a      	ldr	r2, [r7, #0]
 800b6e0:	7812      	ldrb	r2, [r2, #0]
 800b6e2:	0151      	lsls	r1, r2, #5
 800b6e4:	693a      	ldr	r2, [r7, #16]
 800b6e6:	440a      	add	r2, r1
 800b6e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b6ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b6f0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b6f2:	683b      	ldr	r3, [r7, #0]
 800b6f4:	781b      	ldrb	r3, [r3, #0]
 800b6f6:	015a      	lsls	r2, r3, #5
 800b6f8:	693b      	ldr	r3, [r7, #16]
 800b6fa:	4413      	add	r3, r2
 800b6fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	683a      	ldr	r2, [r7, #0]
 800b704:	7812      	ldrb	r2, [r2, #0]
 800b706:	0151      	lsls	r1, r2, #5
 800b708:	693a      	ldr	r2, [r7, #16]
 800b70a:	440a      	add	r2, r1
 800b70c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b710:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b714:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	3301      	adds	r3, #1
 800b71a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	f242 7210 	movw	r2, #10000	; 0x2710
 800b722:	4293      	cmp	r3, r2
 800b724:	d902      	bls.n	800b72c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b726:	2301      	movs	r3, #1
 800b728:	75fb      	strb	r3, [r7, #23]
          break;
 800b72a:	e00c      	b.n	800b746 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b72c:	683b      	ldr	r3, [r7, #0]
 800b72e:	781b      	ldrb	r3, [r3, #0]
 800b730:	015a      	lsls	r2, r3, #5
 800b732:	693b      	ldr	r3, [r7, #16]
 800b734:	4413      	add	r3, r2
 800b736:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b740:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b744:	d0e7      	beq.n	800b716 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b746:	7dfb      	ldrb	r3, [r7, #23]
}
 800b748:	4618      	mov	r0, r3
 800b74a:	371c      	adds	r7, #28
 800b74c:	46bd      	mov	sp, r7
 800b74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b752:	4770      	bx	lr

0800b754 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b754:	b480      	push	{r7}
 800b756:	b089      	sub	sp, #36	; 0x24
 800b758:	af00      	add	r7, sp, #0
 800b75a:	60f8      	str	r0, [r7, #12]
 800b75c:	60b9      	str	r1, [r7, #8]
 800b75e:	4611      	mov	r1, r2
 800b760:	461a      	mov	r2, r3
 800b762:	460b      	mov	r3, r1
 800b764:	71fb      	strb	r3, [r7, #7]
 800b766:	4613      	mov	r3, r2
 800b768:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b772:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b776:	2b00      	cmp	r3, #0
 800b778:	d123      	bne.n	800b7c2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b77a:	88bb      	ldrh	r3, [r7, #4]
 800b77c:	3303      	adds	r3, #3
 800b77e:	089b      	lsrs	r3, r3, #2
 800b780:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b782:	2300      	movs	r3, #0
 800b784:	61bb      	str	r3, [r7, #24]
 800b786:	e018      	b.n	800b7ba <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b788:	79fb      	ldrb	r3, [r7, #7]
 800b78a:	031a      	lsls	r2, r3, #12
 800b78c:	697b      	ldr	r3, [r7, #20]
 800b78e:	4413      	add	r3, r2
 800b790:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b794:	461a      	mov	r2, r3
 800b796:	69fb      	ldr	r3, [r7, #28]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b79c:	69fb      	ldr	r3, [r7, #28]
 800b79e:	3301      	adds	r3, #1
 800b7a0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b7a2:	69fb      	ldr	r3, [r7, #28]
 800b7a4:	3301      	adds	r3, #1
 800b7a6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b7a8:	69fb      	ldr	r3, [r7, #28]
 800b7aa:	3301      	adds	r3, #1
 800b7ac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b7ae:	69fb      	ldr	r3, [r7, #28]
 800b7b0:	3301      	adds	r3, #1
 800b7b2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b7b4:	69bb      	ldr	r3, [r7, #24]
 800b7b6:	3301      	adds	r3, #1
 800b7b8:	61bb      	str	r3, [r7, #24]
 800b7ba:	69ba      	ldr	r2, [r7, #24]
 800b7bc:	693b      	ldr	r3, [r7, #16]
 800b7be:	429a      	cmp	r2, r3
 800b7c0:	d3e2      	bcc.n	800b788 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b7c2:	2300      	movs	r3, #0
}
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	3724      	adds	r7, #36	; 0x24
 800b7c8:	46bd      	mov	sp, r7
 800b7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ce:	4770      	bx	lr

0800b7d0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b7d0:	b480      	push	{r7}
 800b7d2:	b08b      	sub	sp, #44	; 0x2c
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	60f8      	str	r0, [r7, #12]
 800b7d8:	60b9      	str	r1, [r7, #8]
 800b7da:	4613      	mov	r3, r2
 800b7dc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b7e2:	68bb      	ldr	r3, [r7, #8]
 800b7e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b7e6:	88fb      	ldrh	r3, [r7, #6]
 800b7e8:	089b      	lsrs	r3, r3, #2
 800b7ea:	b29b      	uxth	r3, r3
 800b7ec:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b7ee:	88fb      	ldrh	r3, [r7, #6]
 800b7f0:	f003 0303 	and.w	r3, r3, #3
 800b7f4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b7f6:	2300      	movs	r3, #0
 800b7f8:	623b      	str	r3, [r7, #32]
 800b7fa:	e014      	b.n	800b826 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b7fc:	69bb      	ldr	r3, [r7, #24]
 800b7fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b802:	681a      	ldr	r2, [r3, #0]
 800b804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b806:	601a      	str	r2, [r3, #0]
    pDest++;
 800b808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b80a:	3301      	adds	r3, #1
 800b80c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b810:	3301      	adds	r3, #1
 800b812:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b816:	3301      	adds	r3, #1
 800b818:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b81a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b81c:	3301      	adds	r3, #1
 800b81e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800b820:	6a3b      	ldr	r3, [r7, #32]
 800b822:	3301      	adds	r3, #1
 800b824:	623b      	str	r3, [r7, #32]
 800b826:	6a3a      	ldr	r2, [r7, #32]
 800b828:	697b      	ldr	r3, [r7, #20]
 800b82a:	429a      	cmp	r2, r3
 800b82c:	d3e6      	bcc.n	800b7fc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b82e:	8bfb      	ldrh	r3, [r7, #30]
 800b830:	2b00      	cmp	r3, #0
 800b832:	d01e      	beq.n	800b872 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b834:	2300      	movs	r3, #0
 800b836:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b838:	69bb      	ldr	r3, [r7, #24]
 800b83a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b83e:	461a      	mov	r2, r3
 800b840:	f107 0310 	add.w	r3, r7, #16
 800b844:	6812      	ldr	r2, [r2, #0]
 800b846:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b848:	693a      	ldr	r2, [r7, #16]
 800b84a:	6a3b      	ldr	r3, [r7, #32]
 800b84c:	b2db      	uxtb	r3, r3
 800b84e:	00db      	lsls	r3, r3, #3
 800b850:	fa22 f303 	lsr.w	r3, r2, r3
 800b854:	b2da      	uxtb	r2, r3
 800b856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b858:	701a      	strb	r2, [r3, #0]
      i++;
 800b85a:	6a3b      	ldr	r3, [r7, #32]
 800b85c:	3301      	adds	r3, #1
 800b85e:	623b      	str	r3, [r7, #32]
      pDest++;
 800b860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b862:	3301      	adds	r3, #1
 800b864:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800b866:	8bfb      	ldrh	r3, [r7, #30]
 800b868:	3b01      	subs	r3, #1
 800b86a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b86c:	8bfb      	ldrh	r3, [r7, #30]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d1ea      	bne.n	800b848 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b874:	4618      	mov	r0, r3
 800b876:	372c      	adds	r7, #44	; 0x2c
 800b878:	46bd      	mov	sp, r7
 800b87a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b87e:	4770      	bx	lr

0800b880 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b880:	b480      	push	{r7}
 800b882:	b085      	sub	sp, #20
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
 800b888:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	781b      	ldrb	r3, [r3, #0]
 800b892:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	785b      	ldrb	r3, [r3, #1]
 800b898:	2b01      	cmp	r3, #1
 800b89a:	d12c      	bne.n	800b8f6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b89c:	68bb      	ldr	r3, [r7, #8]
 800b89e:	015a      	lsls	r2, r3, #5
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	4413      	add	r3, r2
 800b8a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	db12      	blt.n	800b8d4 <USB_EPSetStall+0x54>
 800b8ae:	68bb      	ldr	r3, [r7, #8]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	d00f      	beq.n	800b8d4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	015a      	lsls	r2, r3, #5
 800b8b8:	68fb      	ldr	r3, [r7, #12]
 800b8ba:	4413      	add	r3, r2
 800b8bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	68ba      	ldr	r2, [r7, #8]
 800b8c4:	0151      	lsls	r1, r2, #5
 800b8c6:	68fa      	ldr	r2, [r7, #12]
 800b8c8:	440a      	add	r2, r1
 800b8ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b8d2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	015a      	lsls	r2, r3, #5
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	4413      	add	r3, r2
 800b8dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	68ba      	ldr	r2, [r7, #8]
 800b8e4:	0151      	lsls	r1, r2, #5
 800b8e6:	68fa      	ldr	r2, [r7, #12]
 800b8e8:	440a      	add	r2, r1
 800b8ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b8f2:	6013      	str	r3, [r2, #0]
 800b8f4:	e02b      	b.n	800b94e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b8f6:	68bb      	ldr	r3, [r7, #8]
 800b8f8:	015a      	lsls	r2, r3, #5
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	4413      	add	r3, r2
 800b8fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	2b00      	cmp	r3, #0
 800b906:	db12      	blt.n	800b92e <USB_EPSetStall+0xae>
 800b908:	68bb      	ldr	r3, [r7, #8]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d00f      	beq.n	800b92e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b90e:	68bb      	ldr	r3, [r7, #8]
 800b910:	015a      	lsls	r2, r3, #5
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	4413      	add	r3, r2
 800b916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	68ba      	ldr	r2, [r7, #8]
 800b91e:	0151      	lsls	r1, r2, #5
 800b920:	68fa      	ldr	r2, [r7, #12]
 800b922:	440a      	add	r2, r1
 800b924:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b928:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b92c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b92e:	68bb      	ldr	r3, [r7, #8]
 800b930:	015a      	lsls	r2, r3, #5
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	4413      	add	r3, r2
 800b936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	68ba      	ldr	r2, [r7, #8]
 800b93e:	0151      	lsls	r1, r2, #5
 800b940:	68fa      	ldr	r2, [r7, #12]
 800b942:	440a      	add	r2, r1
 800b944:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b948:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b94c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b94e:	2300      	movs	r3, #0
}
 800b950:	4618      	mov	r0, r3
 800b952:	3714      	adds	r7, #20
 800b954:	46bd      	mov	sp, r7
 800b956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95a:	4770      	bx	lr

0800b95c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b95c:	b480      	push	{r7}
 800b95e:	b085      	sub	sp, #20
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
 800b964:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b96a:	683b      	ldr	r3, [r7, #0]
 800b96c:	781b      	ldrb	r3, [r3, #0]
 800b96e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b970:	683b      	ldr	r3, [r7, #0]
 800b972:	785b      	ldrb	r3, [r3, #1]
 800b974:	2b01      	cmp	r3, #1
 800b976:	d128      	bne.n	800b9ca <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b978:	68bb      	ldr	r3, [r7, #8]
 800b97a:	015a      	lsls	r2, r3, #5
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	4413      	add	r3, r2
 800b980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	68ba      	ldr	r2, [r7, #8]
 800b988:	0151      	lsls	r1, r2, #5
 800b98a:	68fa      	ldr	r2, [r7, #12]
 800b98c:	440a      	add	r2, r1
 800b98e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b992:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b996:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	791b      	ldrb	r3, [r3, #4]
 800b99c:	2b03      	cmp	r3, #3
 800b99e:	d003      	beq.n	800b9a8 <USB_EPClearStall+0x4c>
 800b9a0:	683b      	ldr	r3, [r7, #0]
 800b9a2:	791b      	ldrb	r3, [r3, #4]
 800b9a4:	2b02      	cmp	r3, #2
 800b9a6:	d138      	bne.n	800ba1a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b9a8:	68bb      	ldr	r3, [r7, #8]
 800b9aa:	015a      	lsls	r2, r3, #5
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	4413      	add	r3, r2
 800b9b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	68ba      	ldr	r2, [r7, #8]
 800b9b8:	0151      	lsls	r1, r2, #5
 800b9ba:	68fa      	ldr	r2, [r7, #12]
 800b9bc:	440a      	add	r2, r1
 800b9be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b9c6:	6013      	str	r3, [r2, #0]
 800b9c8:	e027      	b.n	800ba1a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b9ca:	68bb      	ldr	r3, [r7, #8]
 800b9cc:	015a      	lsls	r2, r3, #5
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	4413      	add	r3, r2
 800b9d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	68ba      	ldr	r2, [r7, #8]
 800b9da:	0151      	lsls	r1, r2, #5
 800b9dc:	68fa      	ldr	r2, [r7, #12]
 800b9de:	440a      	add	r2, r1
 800b9e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b9e4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b9e8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b9ea:	683b      	ldr	r3, [r7, #0]
 800b9ec:	791b      	ldrb	r3, [r3, #4]
 800b9ee:	2b03      	cmp	r3, #3
 800b9f0:	d003      	beq.n	800b9fa <USB_EPClearStall+0x9e>
 800b9f2:	683b      	ldr	r3, [r7, #0]
 800b9f4:	791b      	ldrb	r3, [r3, #4]
 800b9f6:	2b02      	cmp	r3, #2
 800b9f8:	d10f      	bne.n	800ba1a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	015a      	lsls	r2, r3, #5
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	4413      	add	r3, r2
 800ba02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	68ba      	ldr	r2, [r7, #8]
 800ba0a:	0151      	lsls	r1, r2, #5
 800ba0c:	68fa      	ldr	r2, [r7, #12]
 800ba0e:	440a      	add	r2, r1
 800ba10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba18:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ba1a:	2300      	movs	r3, #0
}
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	3714      	adds	r7, #20
 800ba20:	46bd      	mov	sp, r7
 800ba22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba26:	4770      	bx	lr

0800ba28 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ba28:	b480      	push	{r7}
 800ba2a:	b085      	sub	sp, #20
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
 800ba30:	460b      	mov	r3, r1
 800ba32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	68fa      	ldr	r2, [r7, #12]
 800ba42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ba46:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ba4a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba52:	681a      	ldr	r2, [r3, #0]
 800ba54:	78fb      	ldrb	r3, [r7, #3]
 800ba56:	011b      	lsls	r3, r3, #4
 800ba58:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800ba5c:	68f9      	ldr	r1, [r7, #12]
 800ba5e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ba62:	4313      	orrs	r3, r2
 800ba64:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ba66:	2300      	movs	r3, #0
}
 800ba68:	4618      	mov	r0, r3
 800ba6a:	3714      	adds	r7, #20
 800ba6c:	46bd      	mov	sp, r7
 800ba6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba72:	4770      	bx	lr

0800ba74 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800ba74:	b480      	push	{r7}
 800ba76:	b085      	sub	sp, #20
 800ba78:	af00      	add	r7, sp, #0
 800ba7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	68fa      	ldr	r2, [r7, #12]
 800ba8a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ba8e:	f023 0303 	bic.w	r3, r3, #3
 800ba92:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba9a:	685b      	ldr	r3, [r3, #4]
 800ba9c:	68fa      	ldr	r2, [r7, #12]
 800ba9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800baa2:	f023 0302 	bic.w	r3, r3, #2
 800baa6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800baa8:	2300      	movs	r3, #0
}
 800baaa:	4618      	mov	r0, r3
 800baac:	3714      	adds	r7, #20
 800baae:	46bd      	mov	sp, r7
 800bab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab4:	4770      	bx	lr

0800bab6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800bab6:	b480      	push	{r7}
 800bab8:	b085      	sub	sp, #20
 800baba:	af00      	add	r7, sp, #0
 800babc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	68fa      	ldr	r2, [r7, #12]
 800bacc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bad0:	f023 0303 	bic.w	r3, r3, #3
 800bad4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800badc:	685b      	ldr	r3, [r3, #4]
 800bade:	68fa      	ldr	r2, [r7, #12]
 800bae0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bae4:	f043 0302 	orr.w	r3, r3, #2
 800bae8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800baea:	2300      	movs	r3, #0
}
 800baec:	4618      	mov	r0, r3
 800baee:	3714      	adds	r7, #20
 800baf0:	46bd      	mov	sp, r7
 800baf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf6:	4770      	bx	lr

0800baf8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800baf8:	b480      	push	{r7}
 800bafa:	b085      	sub	sp, #20
 800bafc:	af00      	add	r7, sp, #0
 800bafe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	695b      	ldr	r3, [r3, #20]
 800bb04:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	699b      	ldr	r3, [r3, #24]
 800bb0a:	68fa      	ldr	r2, [r7, #12]
 800bb0c:	4013      	ands	r3, r2
 800bb0e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bb10:	68fb      	ldr	r3, [r7, #12]
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	3714      	adds	r7, #20
 800bb16:	46bd      	mov	sp, r7
 800bb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1c:	4770      	bx	lr

0800bb1e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800bb1e:	b480      	push	{r7}
 800bb20:	b085      	sub	sp, #20
 800bb22:	af00      	add	r7, sp, #0
 800bb24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb30:	699b      	ldr	r3, [r3, #24]
 800bb32:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb3a:	69db      	ldr	r3, [r3, #28]
 800bb3c:	68ba      	ldr	r2, [r7, #8]
 800bb3e:	4013      	ands	r3, r2
 800bb40:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800bb42:	68bb      	ldr	r3, [r7, #8]
 800bb44:	0c1b      	lsrs	r3, r3, #16
}
 800bb46:	4618      	mov	r0, r3
 800bb48:	3714      	adds	r7, #20
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb50:	4770      	bx	lr

0800bb52 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800bb52:	b480      	push	{r7}
 800bb54:	b085      	sub	sp, #20
 800bb56:	af00      	add	r7, sp, #0
 800bb58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb64:	699b      	ldr	r3, [r3, #24]
 800bb66:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb6e:	69db      	ldr	r3, [r3, #28]
 800bb70:	68ba      	ldr	r2, [r7, #8]
 800bb72:	4013      	ands	r3, r2
 800bb74:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800bb76:	68bb      	ldr	r3, [r7, #8]
 800bb78:	b29b      	uxth	r3, r3
}
 800bb7a:	4618      	mov	r0, r3
 800bb7c:	3714      	adds	r7, #20
 800bb7e:	46bd      	mov	sp, r7
 800bb80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb84:	4770      	bx	lr

0800bb86 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bb86:	b480      	push	{r7}
 800bb88:	b085      	sub	sp, #20
 800bb8a:	af00      	add	r7, sp, #0
 800bb8c:	6078      	str	r0, [r7, #4]
 800bb8e:	460b      	mov	r3, r1
 800bb90:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800bb96:	78fb      	ldrb	r3, [r7, #3]
 800bb98:	015a      	lsls	r2, r3, #5
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	4413      	add	r3, r2
 800bb9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bba2:	689b      	ldr	r3, [r3, #8]
 800bba4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbac:	695b      	ldr	r3, [r3, #20]
 800bbae:	68ba      	ldr	r2, [r7, #8]
 800bbb0:	4013      	ands	r3, r2
 800bbb2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bbb4:	68bb      	ldr	r3, [r7, #8]
}
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	3714      	adds	r7, #20
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbc0:	4770      	bx	lr

0800bbc2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bbc2:	b480      	push	{r7}
 800bbc4:	b087      	sub	sp, #28
 800bbc6:	af00      	add	r7, sp, #0
 800bbc8:	6078      	str	r0, [r7, #4]
 800bbca:	460b      	mov	r3, r1
 800bbcc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800bbd2:	697b      	ldr	r3, [r7, #20]
 800bbd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbd8:	691b      	ldr	r3, [r3, #16]
 800bbda:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800bbdc:	697b      	ldr	r3, [r7, #20]
 800bbde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbe2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bbe4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800bbe6:	78fb      	ldrb	r3, [r7, #3]
 800bbe8:	f003 030f 	and.w	r3, r3, #15
 800bbec:	68fa      	ldr	r2, [r7, #12]
 800bbee:	fa22 f303 	lsr.w	r3, r2, r3
 800bbf2:	01db      	lsls	r3, r3, #7
 800bbf4:	b2db      	uxtb	r3, r3
 800bbf6:	693a      	ldr	r2, [r7, #16]
 800bbf8:	4313      	orrs	r3, r2
 800bbfa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800bbfc:	78fb      	ldrb	r3, [r7, #3]
 800bbfe:	015a      	lsls	r2, r3, #5
 800bc00:	697b      	ldr	r3, [r7, #20]
 800bc02:	4413      	add	r3, r2
 800bc04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc08:	689b      	ldr	r3, [r3, #8]
 800bc0a:	693a      	ldr	r2, [r7, #16]
 800bc0c:	4013      	ands	r3, r2
 800bc0e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bc10:	68bb      	ldr	r3, [r7, #8]
}
 800bc12:	4618      	mov	r0, r3
 800bc14:	371c      	adds	r7, #28
 800bc16:	46bd      	mov	sp, r7
 800bc18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc1c:	4770      	bx	lr

0800bc1e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800bc1e:	b480      	push	{r7}
 800bc20:	b083      	sub	sp, #12
 800bc22:	af00      	add	r7, sp, #0
 800bc24:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	695b      	ldr	r3, [r3, #20]
 800bc2a:	f003 0301 	and.w	r3, r3, #1
}
 800bc2e:	4618      	mov	r0, r3
 800bc30:	370c      	adds	r7, #12
 800bc32:	46bd      	mov	sp, r7
 800bc34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc38:	4770      	bx	lr

0800bc3a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800bc3a:	b480      	push	{r7}
 800bc3c:	b085      	sub	sp, #20
 800bc3e:	af00      	add	r7, sp, #0
 800bc40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800bc46:	68fb      	ldr	r3, [r7, #12]
 800bc48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	68fa      	ldr	r2, [r7, #12]
 800bc50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc54:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800bc58:	f023 0307 	bic.w	r3, r3, #7
 800bc5c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800bc5e:	68fb      	ldr	r3, [r7, #12]
 800bc60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc64:	685b      	ldr	r3, [r3, #4]
 800bc66:	68fa      	ldr	r2, [r7, #12]
 800bc68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bc6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bc70:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bc72:	2300      	movs	r3, #0
}
 800bc74:	4618      	mov	r0, r3
 800bc76:	3714      	adds	r7, #20
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7e:	4770      	bx	lr

0800bc80 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800bc80:	b480      	push	{r7}
 800bc82:	b087      	sub	sp, #28
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	60f8      	str	r0, [r7, #12]
 800bc88:	460b      	mov	r3, r1
 800bc8a:	607a      	str	r2, [r7, #4]
 800bc8c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	333c      	adds	r3, #60	; 0x3c
 800bc96:	3304      	adds	r3, #4
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800bc9c:	693b      	ldr	r3, [r7, #16]
 800bc9e:	4a26      	ldr	r2, [pc, #152]	; (800bd38 <USB_EP0_OutStart+0xb8>)
 800bca0:	4293      	cmp	r3, r2
 800bca2:	d90a      	bls.n	800bcba <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bca4:	697b      	ldr	r3, [r7, #20]
 800bca6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bcb0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bcb4:	d101      	bne.n	800bcba <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800bcb6:	2300      	movs	r3, #0
 800bcb8:	e037      	b.n	800bd2a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800bcba:	697b      	ldr	r3, [r7, #20]
 800bcbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcc0:	461a      	mov	r2, r3
 800bcc2:	2300      	movs	r3, #0
 800bcc4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bcc6:	697b      	ldr	r3, [r7, #20]
 800bcc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bccc:	691b      	ldr	r3, [r3, #16]
 800bcce:	697a      	ldr	r2, [r7, #20]
 800bcd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bcd4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bcd8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800bcda:	697b      	ldr	r3, [r7, #20]
 800bcdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bce0:	691b      	ldr	r3, [r3, #16]
 800bce2:	697a      	ldr	r2, [r7, #20]
 800bce4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bce8:	f043 0318 	orr.w	r3, r3, #24
 800bcec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800bcee:	697b      	ldr	r3, [r7, #20]
 800bcf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcf4:	691b      	ldr	r3, [r3, #16]
 800bcf6:	697a      	ldr	r2, [r7, #20]
 800bcf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bcfc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800bd00:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800bd02:	7afb      	ldrb	r3, [r7, #11]
 800bd04:	2b01      	cmp	r3, #1
 800bd06:	d10f      	bne.n	800bd28 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800bd08:	697b      	ldr	r3, [r7, #20]
 800bd0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd0e:	461a      	mov	r2, r3
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800bd14:	697b      	ldr	r3, [r7, #20]
 800bd16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	697a      	ldr	r2, [r7, #20]
 800bd1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd22:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800bd26:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bd28:	2300      	movs	r3, #0
}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	371c      	adds	r7, #28
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd34:	4770      	bx	lr
 800bd36:	bf00      	nop
 800bd38:	4f54300a 	.word	0x4f54300a

0800bd3c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bd3c:	b480      	push	{r7}
 800bd3e:	b085      	sub	sp, #20
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bd44:	2300      	movs	r3, #0
 800bd46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	3301      	adds	r3, #1
 800bd4c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800bd54:	d901      	bls.n	800bd5a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bd56:	2303      	movs	r3, #3
 800bd58:	e01b      	b.n	800bd92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	691b      	ldr	r3, [r3, #16]
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	daf2      	bge.n	800bd48 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bd62:	2300      	movs	r3, #0
 800bd64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	691b      	ldr	r3, [r3, #16]
 800bd6a:	f043 0201 	orr.w	r2, r3, #1
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	3301      	adds	r3, #1
 800bd76:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800bd7e:	d901      	bls.n	800bd84 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bd80:	2303      	movs	r3, #3
 800bd82:	e006      	b.n	800bd92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	691b      	ldr	r3, [r3, #16]
 800bd88:	f003 0301 	and.w	r3, r3, #1
 800bd8c:	2b01      	cmp	r3, #1
 800bd8e:	d0f0      	beq.n	800bd72 <USB_CoreReset+0x36>

  return HAL_OK;
 800bd90:	2300      	movs	r3, #0
}
 800bd92:	4618      	mov	r0, r3
 800bd94:	3714      	adds	r7, #20
 800bd96:	46bd      	mov	sp, r7
 800bd98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9c:	4770      	bx	lr
	...

0800bda0 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b084      	sub	sp, #16
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	6078      	str	r0, [r7, #4]
 800bda8:	460b      	mov	r3, r1
 800bdaa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800bdac:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800bdb0:	f003 fef8 	bl	800fba4 <USBD_static_malloc>
 800bdb4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d109      	bne.n	800bdd0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	32b0      	adds	r2, #176	; 0xb0
 800bdc6:	2100      	movs	r1, #0
 800bdc8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800bdcc:	2302      	movs	r3, #2
 800bdce:	e0d4      	b.n	800bf7a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800bdd0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800bdd4:	2100      	movs	r1, #0
 800bdd6:	68f8      	ldr	r0, [r7, #12]
 800bdd8:	f003 ff28 	bl	800fc2c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	32b0      	adds	r2, #176	; 0xb0
 800bde6:	68f9      	ldr	r1, [r7, #12]
 800bde8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	32b0      	adds	r2, #176	; 0xb0
 800bdf6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	7c1b      	ldrb	r3, [r3, #16]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d138      	bne.n	800be7a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800be08:	4b5e      	ldr	r3, [pc, #376]	; (800bf84 <USBD_CDC_Init+0x1e4>)
 800be0a:	7819      	ldrb	r1, [r3, #0]
 800be0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be10:	2202      	movs	r2, #2
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f003 fda3 	bl	800f95e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800be18:	4b5a      	ldr	r3, [pc, #360]	; (800bf84 <USBD_CDC_Init+0x1e4>)
 800be1a:	781b      	ldrb	r3, [r3, #0]
 800be1c:	f003 020f 	and.w	r2, r3, #15
 800be20:	6879      	ldr	r1, [r7, #4]
 800be22:	4613      	mov	r3, r2
 800be24:	009b      	lsls	r3, r3, #2
 800be26:	4413      	add	r3, r2
 800be28:	009b      	lsls	r3, r3, #2
 800be2a:	440b      	add	r3, r1
 800be2c:	3324      	adds	r3, #36	; 0x24
 800be2e:	2201      	movs	r2, #1
 800be30:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800be32:	4b55      	ldr	r3, [pc, #340]	; (800bf88 <USBD_CDC_Init+0x1e8>)
 800be34:	7819      	ldrb	r1, [r3, #0]
 800be36:	f44f 7300 	mov.w	r3, #512	; 0x200
 800be3a:	2202      	movs	r2, #2
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f003 fd8e 	bl	800f95e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800be42:	4b51      	ldr	r3, [pc, #324]	; (800bf88 <USBD_CDC_Init+0x1e8>)
 800be44:	781b      	ldrb	r3, [r3, #0]
 800be46:	f003 020f 	and.w	r2, r3, #15
 800be4a:	6879      	ldr	r1, [r7, #4]
 800be4c:	4613      	mov	r3, r2
 800be4e:	009b      	lsls	r3, r3, #2
 800be50:	4413      	add	r3, r2
 800be52:	009b      	lsls	r3, r3, #2
 800be54:	440b      	add	r3, r1
 800be56:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800be5a:	2201      	movs	r2, #1
 800be5c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800be5e:	4b4b      	ldr	r3, [pc, #300]	; (800bf8c <USBD_CDC_Init+0x1ec>)
 800be60:	781b      	ldrb	r3, [r3, #0]
 800be62:	f003 020f 	and.w	r2, r3, #15
 800be66:	6879      	ldr	r1, [r7, #4]
 800be68:	4613      	mov	r3, r2
 800be6a:	009b      	lsls	r3, r3, #2
 800be6c:	4413      	add	r3, r2
 800be6e:	009b      	lsls	r3, r3, #2
 800be70:	440b      	add	r3, r1
 800be72:	3326      	adds	r3, #38	; 0x26
 800be74:	2210      	movs	r2, #16
 800be76:	801a      	strh	r2, [r3, #0]
 800be78:	e035      	b.n	800bee6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800be7a:	4b42      	ldr	r3, [pc, #264]	; (800bf84 <USBD_CDC_Init+0x1e4>)
 800be7c:	7819      	ldrb	r1, [r3, #0]
 800be7e:	2340      	movs	r3, #64	; 0x40
 800be80:	2202      	movs	r2, #2
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f003 fd6b 	bl	800f95e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800be88:	4b3e      	ldr	r3, [pc, #248]	; (800bf84 <USBD_CDC_Init+0x1e4>)
 800be8a:	781b      	ldrb	r3, [r3, #0]
 800be8c:	f003 020f 	and.w	r2, r3, #15
 800be90:	6879      	ldr	r1, [r7, #4]
 800be92:	4613      	mov	r3, r2
 800be94:	009b      	lsls	r3, r3, #2
 800be96:	4413      	add	r3, r2
 800be98:	009b      	lsls	r3, r3, #2
 800be9a:	440b      	add	r3, r1
 800be9c:	3324      	adds	r3, #36	; 0x24
 800be9e:	2201      	movs	r2, #1
 800bea0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800bea2:	4b39      	ldr	r3, [pc, #228]	; (800bf88 <USBD_CDC_Init+0x1e8>)
 800bea4:	7819      	ldrb	r1, [r3, #0]
 800bea6:	2340      	movs	r3, #64	; 0x40
 800bea8:	2202      	movs	r2, #2
 800beaa:	6878      	ldr	r0, [r7, #4]
 800beac:	f003 fd57 	bl	800f95e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800beb0:	4b35      	ldr	r3, [pc, #212]	; (800bf88 <USBD_CDC_Init+0x1e8>)
 800beb2:	781b      	ldrb	r3, [r3, #0]
 800beb4:	f003 020f 	and.w	r2, r3, #15
 800beb8:	6879      	ldr	r1, [r7, #4]
 800beba:	4613      	mov	r3, r2
 800bebc:	009b      	lsls	r3, r3, #2
 800bebe:	4413      	add	r3, r2
 800bec0:	009b      	lsls	r3, r3, #2
 800bec2:	440b      	add	r3, r1
 800bec4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bec8:	2201      	movs	r2, #1
 800beca:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800becc:	4b2f      	ldr	r3, [pc, #188]	; (800bf8c <USBD_CDC_Init+0x1ec>)
 800bece:	781b      	ldrb	r3, [r3, #0]
 800bed0:	f003 020f 	and.w	r2, r3, #15
 800bed4:	6879      	ldr	r1, [r7, #4]
 800bed6:	4613      	mov	r3, r2
 800bed8:	009b      	lsls	r3, r3, #2
 800beda:	4413      	add	r3, r2
 800bedc:	009b      	lsls	r3, r3, #2
 800bede:	440b      	add	r3, r1
 800bee0:	3326      	adds	r3, #38	; 0x26
 800bee2:	2210      	movs	r2, #16
 800bee4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bee6:	4b29      	ldr	r3, [pc, #164]	; (800bf8c <USBD_CDC_Init+0x1ec>)
 800bee8:	7819      	ldrb	r1, [r3, #0]
 800beea:	2308      	movs	r3, #8
 800beec:	2203      	movs	r2, #3
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	f003 fd35 	bl	800f95e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800bef4:	4b25      	ldr	r3, [pc, #148]	; (800bf8c <USBD_CDC_Init+0x1ec>)
 800bef6:	781b      	ldrb	r3, [r3, #0]
 800bef8:	f003 020f 	and.w	r2, r3, #15
 800befc:	6879      	ldr	r1, [r7, #4]
 800befe:	4613      	mov	r3, r2
 800bf00:	009b      	lsls	r3, r3, #2
 800bf02:	4413      	add	r3, r2
 800bf04:	009b      	lsls	r3, r3, #2
 800bf06:	440b      	add	r3, r1
 800bf08:	3324      	adds	r3, #36	; 0x24
 800bf0a:	2201      	movs	r2, #1
 800bf0c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800bf0e:	68fb      	ldr	r3, [r7, #12]
 800bf10:	2200      	movs	r2, #0
 800bf12:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bf1c:	687a      	ldr	r2, [r7, #4]
 800bf1e:	33b0      	adds	r3, #176	; 0xb0
 800bf20:	009b      	lsls	r3, r3, #2
 800bf22:	4413      	add	r3, r2
 800bf24:	685b      	ldr	r3, [r3, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	2200      	movs	r2, #0
 800bf36:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d101      	bne.n	800bf48 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800bf44:	2302      	movs	r3, #2
 800bf46:	e018      	b.n	800bf7a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	7c1b      	ldrb	r3, [r3, #16]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d10a      	bne.n	800bf66 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bf50:	4b0d      	ldr	r3, [pc, #52]	; (800bf88 <USBD_CDC_Init+0x1e8>)
 800bf52:	7819      	ldrb	r1, [r3, #0]
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bf5a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f003 fdec 	bl	800fb3c <USBD_LL_PrepareReceive>
 800bf64:	e008      	b.n	800bf78 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bf66:	4b08      	ldr	r3, [pc, #32]	; (800bf88 <USBD_CDC_Init+0x1e8>)
 800bf68:	7819      	ldrb	r1, [r3, #0]
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bf70:	2340      	movs	r3, #64	; 0x40
 800bf72:	6878      	ldr	r0, [r7, #4]
 800bf74:	f003 fde2 	bl	800fb3c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bf78:	2300      	movs	r3, #0
}
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	3710      	adds	r7, #16
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bd80      	pop	{r7, pc}
 800bf82:	bf00      	nop
 800bf84:	200000e3 	.word	0x200000e3
 800bf88:	200000e4 	.word	0x200000e4
 800bf8c:	200000e5 	.word	0x200000e5

0800bf90 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bf90:	b580      	push	{r7, lr}
 800bf92:	b082      	sub	sp, #8
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
 800bf98:	460b      	mov	r3, r1
 800bf9a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800bf9c:	4b3a      	ldr	r3, [pc, #232]	; (800c088 <USBD_CDC_DeInit+0xf8>)
 800bf9e:	781b      	ldrb	r3, [r3, #0]
 800bfa0:	4619      	mov	r1, r3
 800bfa2:	6878      	ldr	r0, [r7, #4]
 800bfa4:	f003 fd01 	bl	800f9aa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800bfa8:	4b37      	ldr	r3, [pc, #220]	; (800c088 <USBD_CDC_DeInit+0xf8>)
 800bfaa:	781b      	ldrb	r3, [r3, #0]
 800bfac:	f003 020f 	and.w	r2, r3, #15
 800bfb0:	6879      	ldr	r1, [r7, #4]
 800bfb2:	4613      	mov	r3, r2
 800bfb4:	009b      	lsls	r3, r3, #2
 800bfb6:	4413      	add	r3, r2
 800bfb8:	009b      	lsls	r3, r3, #2
 800bfba:	440b      	add	r3, r1
 800bfbc:	3324      	adds	r3, #36	; 0x24
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800bfc2:	4b32      	ldr	r3, [pc, #200]	; (800c08c <USBD_CDC_DeInit+0xfc>)
 800bfc4:	781b      	ldrb	r3, [r3, #0]
 800bfc6:	4619      	mov	r1, r3
 800bfc8:	6878      	ldr	r0, [r7, #4]
 800bfca:	f003 fcee 	bl	800f9aa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800bfce:	4b2f      	ldr	r3, [pc, #188]	; (800c08c <USBD_CDC_DeInit+0xfc>)
 800bfd0:	781b      	ldrb	r3, [r3, #0]
 800bfd2:	f003 020f 	and.w	r2, r3, #15
 800bfd6:	6879      	ldr	r1, [r7, #4]
 800bfd8:	4613      	mov	r3, r2
 800bfda:	009b      	lsls	r3, r3, #2
 800bfdc:	4413      	add	r3, r2
 800bfde:	009b      	lsls	r3, r3, #2
 800bfe0:	440b      	add	r3, r1
 800bfe2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800bfea:	4b29      	ldr	r3, [pc, #164]	; (800c090 <USBD_CDC_DeInit+0x100>)
 800bfec:	781b      	ldrb	r3, [r3, #0]
 800bfee:	4619      	mov	r1, r3
 800bff0:	6878      	ldr	r0, [r7, #4]
 800bff2:	f003 fcda 	bl	800f9aa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800bff6:	4b26      	ldr	r3, [pc, #152]	; (800c090 <USBD_CDC_DeInit+0x100>)
 800bff8:	781b      	ldrb	r3, [r3, #0]
 800bffa:	f003 020f 	and.w	r2, r3, #15
 800bffe:	6879      	ldr	r1, [r7, #4]
 800c000:	4613      	mov	r3, r2
 800c002:	009b      	lsls	r3, r3, #2
 800c004:	4413      	add	r3, r2
 800c006:	009b      	lsls	r3, r3, #2
 800c008:	440b      	add	r3, r1
 800c00a:	3324      	adds	r3, #36	; 0x24
 800c00c:	2200      	movs	r2, #0
 800c00e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800c010:	4b1f      	ldr	r3, [pc, #124]	; (800c090 <USBD_CDC_DeInit+0x100>)
 800c012:	781b      	ldrb	r3, [r3, #0]
 800c014:	f003 020f 	and.w	r2, r3, #15
 800c018:	6879      	ldr	r1, [r7, #4]
 800c01a:	4613      	mov	r3, r2
 800c01c:	009b      	lsls	r3, r3, #2
 800c01e:	4413      	add	r3, r2
 800c020:	009b      	lsls	r3, r3, #2
 800c022:	440b      	add	r3, r1
 800c024:	3326      	adds	r3, #38	; 0x26
 800c026:	2200      	movs	r2, #0
 800c028:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	32b0      	adds	r2, #176	; 0xb0
 800c034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d01f      	beq.n	800c07c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c042:	687a      	ldr	r2, [r7, #4]
 800c044:	33b0      	adds	r3, #176	; 0xb0
 800c046:	009b      	lsls	r3, r3, #2
 800c048:	4413      	add	r3, r2
 800c04a:	685b      	ldr	r3, [r3, #4]
 800c04c:	685b      	ldr	r3, [r3, #4]
 800c04e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	32b0      	adds	r2, #176	; 0xb0
 800c05a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c05e:	4618      	mov	r0, r3
 800c060:	f003 fdae 	bl	800fbc0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	32b0      	adds	r2, #176	; 0xb0
 800c06e:	2100      	movs	r1, #0
 800c070:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2200      	movs	r2, #0
 800c078:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c07c:	2300      	movs	r3, #0
}
 800c07e:	4618      	mov	r0, r3
 800c080:	3708      	adds	r7, #8
 800c082:	46bd      	mov	sp, r7
 800c084:	bd80      	pop	{r7, pc}
 800c086:	bf00      	nop
 800c088:	200000e3 	.word	0x200000e3
 800c08c:	200000e4 	.word	0x200000e4
 800c090:	200000e5 	.word	0x200000e5

0800c094 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c094:	b580      	push	{r7, lr}
 800c096:	b086      	sub	sp, #24
 800c098:	af00      	add	r7, sp, #0
 800c09a:	6078      	str	r0, [r7, #4]
 800c09c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	32b0      	adds	r2, #176	; 0xb0
 800c0a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0ac:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c0ba:	693b      	ldr	r3, [r7, #16]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d101      	bne.n	800c0c4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800c0c0:	2303      	movs	r3, #3
 800c0c2:	e0bf      	b.n	800c244 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c0c4:	683b      	ldr	r3, [r7, #0]
 800c0c6:	781b      	ldrb	r3, [r3, #0]
 800c0c8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d050      	beq.n	800c172 <USBD_CDC_Setup+0xde>
 800c0d0:	2b20      	cmp	r3, #32
 800c0d2:	f040 80af 	bne.w	800c234 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c0d6:	683b      	ldr	r3, [r7, #0]
 800c0d8:	88db      	ldrh	r3, [r3, #6]
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	d03a      	beq.n	800c154 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c0de:	683b      	ldr	r3, [r7, #0]
 800c0e0:	781b      	ldrb	r3, [r3, #0]
 800c0e2:	b25b      	sxtb	r3, r3
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	da1b      	bge.n	800c120 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c0ee:	687a      	ldr	r2, [r7, #4]
 800c0f0:	33b0      	adds	r3, #176	; 0xb0
 800c0f2:	009b      	lsls	r3, r3, #2
 800c0f4:	4413      	add	r3, r2
 800c0f6:	685b      	ldr	r3, [r3, #4]
 800c0f8:	689b      	ldr	r3, [r3, #8]
 800c0fa:	683a      	ldr	r2, [r7, #0]
 800c0fc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800c0fe:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c100:	683a      	ldr	r2, [r7, #0]
 800c102:	88d2      	ldrh	r2, [r2, #6]
 800c104:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c106:	683b      	ldr	r3, [r7, #0]
 800c108:	88db      	ldrh	r3, [r3, #6]
 800c10a:	2b07      	cmp	r3, #7
 800c10c:	bf28      	it	cs
 800c10e:	2307      	movcs	r3, #7
 800c110:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c112:	693b      	ldr	r3, [r7, #16]
 800c114:	89fa      	ldrh	r2, [r7, #14]
 800c116:	4619      	mov	r1, r3
 800c118:	6878      	ldr	r0, [r7, #4]
 800c11a:	f001 fd89 	bl	800dc30 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800c11e:	e090      	b.n	800c242 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800c120:	683b      	ldr	r3, [r7, #0]
 800c122:	785a      	ldrb	r2, [r3, #1]
 800c124:	693b      	ldr	r3, [r7, #16]
 800c126:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	88db      	ldrh	r3, [r3, #6]
 800c12e:	2b3f      	cmp	r3, #63	; 0x3f
 800c130:	d803      	bhi.n	800c13a <USBD_CDC_Setup+0xa6>
 800c132:	683b      	ldr	r3, [r7, #0]
 800c134:	88db      	ldrh	r3, [r3, #6]
 800c136:	b2da      	uxtb	r2, r3
 800c138:	e000      	b.n	800c13c <USBD_CDC_Setup+0xa8>
 800c13a:	2240      	movs	r2, #64	; 0x40
 800c13c:	693b      	ldr	r3, [r7, #16]
 800c13e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800c142:	6939      	ldr	r1, [r7, #16]
 800c144:	693b      	ldr	r3, [r7, #16]
 800c146:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800c14a:	461a      	mov	r2, r3
 800c14c:	6878      	ldr	r0, [r7, #4]
 800c14e:	f001 fd9b 	bl	800dc88 <USBD_CtlPrepareRx>
      break;
 800c152:	e076      	b.n	800c242 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c15a:	687a      	ldr	r2, [r7, #4]
 800c15c:	33b0      	adds	r3, #176	; 0xb0
 800c15e:	009b      	lsls	r3, r3, #2
 800c160:	4413      	add	r3, r2
 800c162:	685b      	ldr	r3, [r3, #4]
 800c164:	689b      	ldr	r3, [r3, #8]
 800c166:	683a      	ldr	r2, [r7, #0]
 800c168:	7850      	ldrb	r0, [r2, #1]
 800c16a:	2200      	movs	r2, #0
 800c16c:	6839      	ldr	r1, [r7, #0]
 800c16e:	4798      	blx	r3
      break;
 800c170:	e067      	b.n	800c242 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c172:	683b      	ldr	r3, [r7, #0]
 800c174:	785b      	ldrb	r3, [r3, #1]
 800c176:	2b0b      	cmp	r3, #11
 800c178:	d851      	bhi.n	800c21e <USBD_CDC_Setup+0x18a>
 800c17a:	a201      	add	r2, pc, #4	; (adr r2, 800c180 <USBD_CDC_Setup+0xec>)
 800c17c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c180:	0800c1b1 	.word	0x0800c1b1
 800c184:	0800c22d 	.word	0x0800c22d
 800c188:	0800c21f 	.word	0x0800c21f
 800c18c:	0800c21f 	.word	0x0800c21f
 800c190:	0800c21f 	.word	0x0800c21f
 800c194:	0800c21f 	.word	0x0800c21f
 800c198:	0800c21f 	.word	0x0800c21f
 800c19c:	0800c21f 	.word	0x0800c21f
 800c1a0:	0800c21f 	.word	0x0800c21f
 800c1a4:	0800c21f 	.word	0x0800c21f
 800c1a8:	0800c1db 	.word	0x0800c1db
 800c1ac:	0800c205 	.word	0x0800c205
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1b6:	b2db      	uxtb	r3, r3
 800c1b8:	2b03      	cmp	r3, #3
 800c1ba:	d107      	bne.n	800c1cc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c1bc:	f107 030a 	add.w	r3, r7, #10
 800c1c0:	2202      	movs	r2, #2
 800c1c2:	4619      	mov	r1, r3
 800c1c4:	6878      	ldr	r0, [r7, #4]
 800c1c6:	f001 fd33 	bl	800dc30 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c1ca:	e032      	b.n	800c232 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c1cc:	6839      	ldr	r1, [r7, #0]
 800c1ce:	6878      	ldr	r0, [r7, #4]
 800c1d0:	f001 fcbd 	bl	800db4e <USBD_CtlError>
            ret = USBD_FAIL;
 800c1d4:	2303      	movs	r3, #3
 800c1d6:	75fb      	strb	r3, [r7, #23]
          break;
 800c1d8:	e02b      	b.n	800c232 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c1e0:	b2db      	uxtb	r3, r3
 800c1e2:	2b03      	cmp	r3, #3
 800c1e4:	d107      	bne.n	800c1f6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c1e6:	f107 030d 	add.w	r3, r7, #13
 800c1ea:	2201      	movs	r2, #1
 800c1ec:	4619      	mov	r1, r3
 800c1ee:	6878      	ldr	r0, [r7, #4]
 800c1f0:	f001 fd1e 	bl	800dc30 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c1f4:	e01d      	b.n	800c232 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c1f6:	6839      	ldr	r1, [r7, #0]
 800c1f8:	6878      	ldr	r0, [r7, #4]
 800c1fa:	f001 fca8 	bl	800db4e <USBD_CtlError>
            ret = USBD_FAIL;
 800c1fe:	2303      	movs	r3, #3
 800c200:	75fb      	strb	r3, [r7, #23]
          break;
 800c202:	e016      	b.n	800c232 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c20a:	b2db      	uxtb	r3, r3
 800c20c:	2b03      	cmp	r3, #3
 800c20e:	d00f      	beq.n	800c230 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800c210:	6839      	ldr	r1, [r7, #0]
 800c212:	6878      	ldr	r0, [r7, #4]
 800c214:	f001 fc9b 	bl	800db4e <USBD_CtlError>
            ret = USBD_FAIL;
 800c218:	2303      	movs	r3, #3
 800c21a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c21c:	e008      	b.n	800c230 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c21e:	6839      	ldr	r1, [r7, #0]
 800c220:	6878      	ldr	r0, [r7, #4]
 800c222:	f001 fc94 	bl	800db4e <USBD_CtlError>
          ret = USBD_FAIL;
 800c226:	2303      	movs	r3, #3
 800c228:	75fb      	strb	r3, [r7, #23]
          break;
 800c22a:	e002      	b.n	800c232 <USBD_CDC_Setup+0x19e>
          break;
 800c22c:	bf00      	nop
 800c22e:	e008      	b.n	800c242 <USBD_CDC_Setup+0x1ae>
          break;
 800c230:	bf00      	nop
      }
      break;
 800c232:	e006      	b.n	800c242 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c234:	6839      	ldr	r1, [r7, #0]
 800c236:	6878      	ldr	r0, [r7, #4]
 800c238:	f001 fc89 	bl	800db4e <USBD_CtlError>
      ret = USBD_FAIL;
 800c23c:	2303      	movs	r3, #3
 800c23e:	75fb      	strb	r3, [r7, #23]
      break;
 800c240:	bf00      	nop
  }

  return (uint8_t)ret;
 800c242:	7dfb      	ldrb	r3, [r7, #23]
}
 800c244:	4618      	mov	r0, r3
 800c246:	3718      	adds	r7, #24
 800c248:	46bd      	mov	sp, r7
 800c24a:	bd80      	pop	{r7, pc}

0800c24c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b084      	sub	sp, #16
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
 800c254:	460b      	mov	r3, r1
 800c256:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c25e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	32b0      	adds	r2, #176	; 0xb0
 800c26a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d101      	bne.n	800c276 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c272:	2303      	movs	r3, #3
 800c274:	e065      	b.n	800c342 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	32b0      	adds	r2, #176	; 0xb0
 800c280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c284:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c286:	78fb      	ldrb	r3, [r7, #3]
 800c288:	f003 020f 	and.w	r2, r3, #15
 800c28c:	6879      	ldr	r1, [r7, #4]
 800c28e:	4613      	mov	r3, r2
 800c290:	009b      	lsls	r3, r3, #2
 800c292:	4413      	add	r3, r2
 800c294:	009b      	lsls	r3, r3, #2
 800c296:	440b      	add	r3, r1
 800c298:	3318      	adds	r3, #24
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d02f      	beq.n	800c300 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c2a0:	78fb      	ldrb	r3, [r7, #3]
 800c2a2:	f003 020f 	and.w	r2, r3, #15
 800c2a6:	6879      	ldr	r1, [r7, #4]
 800c2a8:	4613      	mov	r3, r2
 800c2aa:	009b      	lsls	r3, r3, #2
 800c2ac:	4413      	add	r3, r2
 800c2ae:	009b      	lsls	r3, r3, #2
 800c2b0:	440b      	add	r3, r1
 800c2b2:	3318      	adds	r3, #24
 800c2b4:	681a      	ldr	r2, [r3, #0]
 800c2b6:	78fb      	ldrb	r3, [r7, #3]
 800c2b8:	f003 010f 	and.w	r1, r3, #15
 800c2bc:	68f8      	ldr	r0, [r7, #12]
 800c2be:	460b      	mov	r3, r1
 800c2c0:	00db      	lsls	r3, r3, #3
 800c2c2:	440b      	add	r3, r1
 800c2c4:	009b      	lsls	r3, r3, #2
 800c2c6:	4403      	add	r3, r0
 800c2c8:	331c      	adds	r3, #28
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	fbb2 f1f3 	udiv	r1, r2, r3
 800c2d0:	fb01 f303 	mul.w	r3, r1, r3
 800c2d4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d112      	bne.n	800c300 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c2da:	78fb      	ldrb	r3, [r7, #3]
 800c2dc:	f003 020f 	and.w	r2, r3, #15
 800c2e0:	6879      	ldr	r1, [r7, #4]
 800c2e2:	4613      	mov	r3, r2
 800c2e4:	009b      	lsls	r3, r3, #2
 800c2e6:	4413      	add	r3, r2
 800c2e8:	009b      	lsls	r3, r3, #2
 800c2ea:	440b      	add	r3, r1
 800c2ec:	3318      	adds	r3, #24
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c2f2:	78f9      	ldrb	r1, [r7, #3]
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	2200      	movs	r2, #0
 800c2f8:	6878      	ldr	r0, [r7, #4]
 800c2fa:	f003 fbfe 	bl	800fafa <USBD_LL_Transmit>
 800c2fe:	e01f      	b.n	800c340 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c300:	68bb      	ldr	r3, [r7, #8]
 800c302:	2200      	movs	r2, #0
 800c304:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c30e:	687a      	ldr	r2, [r7, #4]
 800c310:	33b0      	adds	r3, #176	; 0xb0
 800c312:	009b      	lsls	r3, r3, #2
 800c314:	4413      	add	r3, r2
 800c316:	685b      	ldr	r3, [r3, #4]
 800c318:	691b      	ldr	r3, [r3, #16]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d010      	beq.n	800c340 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c324:	687a      	ldr	r2, [r7, #4]
 800c326:	33b0      	adds	r3, #176	; 0xb0
 800c328:	009b      	lsls	r3, r3, #2
 800c32a:	4413      	add	r3, r2
 800c32c:	685b      	ldr	r3, [r3, #4]
 800c32e:	691b      	ldr	r3, [r3, #16]
 800c330:	68ba      	ldr	r2, [r7, #8]
 800c332:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c336:	68ba      	ldr	r2, [r7, #8]
 800c338:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c33c:	78fa      	ldrb	r2, [r7, #3]
 800c33e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c340:	2300      	movs	r3, #0
}
 800c342:	4618      	mov	r0, r3
 800c344:	3710      	adds	r7, #16
 800c346:	46bd      	mov	sp, r7
 800c348:	bd80      	pop	{r7, pc}

0800c34a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c34a:	b580      	push	{r7, lr}
 800c34c:	b084      	sub	sp, #16
 800c34e:	af00      	add	r7, sp, #0
 800c350:	6078      	str	r0, [r7, #4]
 800c352:	460b      	mov	r3, r1
 800c354:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	32b0      	adds	r2, #176	; 0xb0
 800c360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c364:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	32b0      	adds	r2, #176	; 0xb0
 800c370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d101      	bne.n	800c37c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c378:	2303      	movs	r3, #3
 800c37a:	e01a      	b.n	800c3b2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c37c:	78fb      	ldrb	r3, [r7, #3]
 800c37e:	4619      	mov	r1, r3
 800c380:	6878      	ldr	r0, [r7, #4]
 800c382:	f003 fbfc 	bl	800fb7e <USBD_LL_GetRxDataSize>
 800c386:	4602      	mov	r2, r0
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c394:	687a      	ldr	r2, [r7, #4]
 800c396:	33b0      	adds	r3, #176	; 0xb0
 800c398:	009b      	lsls	r3, r3, #2
 800c39a:	4413      	add	r3, r2
 800c39c:	685b      	ldr	r3, [r3, #4]
 800c39e:	68db      	ldr	r3, [r3, #12]
 800c3a0:	68fa      	ldr	r2, [r7, #12]
 800c3a2:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c3a6:	68fa      	ldr	r2, [r7, #12]
 800c3a8:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c3ac:	4611      	mov	r1, r2
 800c3ae:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c3b0:	2300      	movs	r3, #0
}
 800c3b2:	4618      	mov	r0, r3
 800c3b4:	3710      	adds	r7, #16
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bd80      	pop	{r7, pc}

0800c3ba <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c3ba:	b580      	push	{r7, lr}
 800c3bc:	b084      	sub	sp, #16
 800c3be:	af00      	add	r7, sp, #0
 800c3c0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	32b0      	adds	r2, #176	; 0xb0
 800c3cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3d0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d101      	bne.n	800c3dc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c3d8:	2303      	movs	r3, #3
 800c3da:	e025      	b.n	800c428 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c3e2:	687a      	ldr	r2, [r7, #4]
 800c3e4:	33b0      	adds	r3, #176	; 0xb0
 800c3e6:	009b      	lsls	r3, r3, #2
 800c3e8:	4413      	add	r3, r2
 800c3ea:	685b      	ldr	r3, [r3, #4]
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	d01a      	beq.n	800c426 <USBD_CDC_EP0_RxReady+0x6c>
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c3f6:	2bff      	cmp	r3, #255	; 0xff
 800c3f8:	d015      	beq.n	800c426 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c400:	687a      	ldr	r2, [r7, #4]
 800c402:	33b0      	adds	r3, #176	; 0xb0
 800c404:	009b      	lsls	r3, r3, #2
 800c406:	4413      	add	r3, r2
 800c408:	685b      	ldr	r3, [r3, #4]
 800c40a:	689b      	ldr	r3, [r3, #8]
 800c40c:	68fa      	ldr	r2, [r7, #12]
 800c40e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800c412:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c414:	68fa      	ldr	r2, [r7, #12]
 800c416:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c41a:	b292      	uxth	r2, r2
 800c41c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	22ff      	movs	r2, #255	; 0xff
 800c422:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c426:	2300      	movs	r3, #0
}
 800c428:	4618      	mov	r0, r3
 800c42a:	3710      	adds	r7, #16
 800c42c:	46bd      	mov	sp, r7
 800c42e:	bd80      	pop	{r7, pc}

0800c430 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c430:	b580      	push	{r7, lr}
 800c432:	b086      	sub	sp, #24
 800c434:	af00      	add	r7, sp, #0
 800c436:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c438:	2182      	movs	r1, #130	; 0x82
 800c43a:	4818      	ldr	r0, [pc, #96]	; (800c49c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c43c:	f000 fd4f 	bl	800cede <USBD_GetEpDesc>
 800c440:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c442:	2101      	movs	r1, #1
 800c444:	4815      	ldr	r0, [pc, #84]	; (800c49c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c446:	f000 fd4a 	bl	800cede <USBD_GetEpDesc>
 800c44a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c44c:	2181      	movs	r1, #129	; 0x81
 800c44e:	4813      	ldr	r0, [pc, #76]	; (800c49c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c450:	f000 fd45 	bl	800cede <USBD_GetEpDesc>
 800c454:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c456:	697b      	ldr	r3, [r7, #20]
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d002      	beq.n	800c462 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c45c:	697b      	ldr	r3, [r7, #20]
 800c45e:	2210      	movs	r2, #16
 800c460:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c462:	693b      	ldr	r3, [r7, #16]
 800c464:	2b00      	cmp	r3, #0
 800c466:	d006      	beq.n	800c476 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c468:	693b      	ldr	r3, [r7, #16]
 800c46a:	2200      	movs	r2, #0
 800c46c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c470:	711a      	strb	r2, [r3, #4]
 800c472:	2200      	movs	r2, #0
 800c474:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c476:	68fb      	ldr	r3, [r7, #12]
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d006      	beq.n	800c48a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	2200      	movs	r2, #0
 800c480:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c484:	711a      	strb	r2, [r3, #4]
 800c486:	2200      	movs	r2, #0
 800c488:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	2243      	movs	r2, #67	; 0x43
 800c48e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c490:	4b02      	ldr	r3, [pc, #8]	; (800c49c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c492:	4618      	mov	r0, r3
 800c494:	3718      	adds	r7, #24
 800c496:	46bd      	mov	sp, r7
 800c498:	bd80      	pop	{r7, pc}
 800c49a:	bf00      	nop
 800c49c:	200000a0 	.word	0x200000a0

0800c4a0 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b086      	sub	sp, #24
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c4a8:	2182      	movs	r1, #130	; 0x82
 800c4aa:	4818      	ldr	r0, [pc, #96]	; (800c50c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c4ac:	f000 fd17 	bl	800cede <USBD_GetEpDesc>
 800c4b0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c4b2:	2101      	movs	r1, #1
 800c4b4:	4815      	ldr	r0, [pc, #84]	; (800c50c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c4b6:	f000 fd12 	bl	800cede <USBD_GetEpDesc>
 800c4ba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c4bc:	2181      	movs	r1, #129	; 0x81
 800c4be:	4813      	ldr	r0, [pc, #76]	; (800c50c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c4c0:	f000 fd0d 	bl	800cede <USBD_GetEpDesc>
 800c4c4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c4c6:	697b      	ldr	r3, [r7, #20]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d002      	beq.n	800c4d2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c4cc:	697b      	ldr	r3, [r7, #20]
 800c4ce:	2210      	movs	r2, #16
 800c4d0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c4d2:	693b      	ldr	r3, [r7, #16]
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d006      	beq.n	800c4e6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c4d8:	693b      	ldr	r3, [r7, #16]
 800c4da:	2200      	movs	r2, #0
 800c4dc:	711a      	strb	r2, [r3, #4]
 800c4de:	2200      	movs	r2, #0
 800c4e0:	f042 0202 	orr.w	r2, r2, #2
 800c4e4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d006      	beq.n	800c4fa <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	711a      	strb	r2, [r3, #4]
 800c4f2:	2200      	movs	r2, #0
 800c4f4:	f042 0202 	orr.w	r2, r2, #2
 800c4f8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	2243      	movs	r2, #67	; 0x43
 800c4fe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c500:	4b02      	ldr	r3, [pc, #8]	; (800c50c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c502:	4618      	mov	r0, r3
 800c504:	3718      	adds	r7, #24
 800c506:	46bd      	mov	sp, r7
 800c508:	bd80      	pop	{r7, pc}
 800c50a:	bf00      	nop
 800c50c:	200000a0 	.word	0x200000a0

0800c510 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b086      	sub	sp, #24
 800c514:	af00      	add	r7, sp, #0
 800c516:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c518:	2182      	movs	r1, #130	; 0x82
 800c51a:	4818      	ldr	r0, [pc, #96]	; (800c57c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c51c:	f000 fcdf 	bl	800cede <USBD_GetEpDesc>
 800c520:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c522:	2101      	movs	r1, #1
 800c524:	4815      	ldr	r0, [pc, #84]	; (800c57c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c526:	f000 fcda 	bl	800cede <USBD_GetEpDesc>
 800c52a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c52c:	2181      	movs	r1, #129	; 0x81
 800c52e:	4813      	ldr	r0, [pc, #76]	; (800c57c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c530:	f000 fcd5 	bl	800cede <USBD_GetEpDesc>
 800c534:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c536:	697b      	ldr	r3, [r7, #20]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d002      	beq.n	800c542 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c53c:	697b      	ldr	r3, [r7, #20]
 800c53e:	2210      	movs	r2, #16
 800c540:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c542:	693b      	ldr	r3, [r7, #16]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d006      	beq.n	800c556 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c548:	693b      	ldr	r3, [r7, #16]
 800c54a:	2200      	movs	r2, #0
 800c54c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c550:	711a      	strb	r2, [r3, #4]
 800c552:	2200      	movs	r2, #0
 800c554:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d006      	beq.n	800c56a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	2200      	movs	r2, #0
 800c560:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c564:	711a      	strb	r2, [r3, #4]
 800c566:	2200      	movs	r2, #0
 800c568:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	2243      	movs	r2, #67	; 0x43
 800c56e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c570:	4b02      	ldr	r3, [pc, #8]	; (800c57c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c572:	4618      	mov	r0, r3
 800c574:	3718      	adds	r7, #24
 800c576:	46bd      	mov	sp, r7
 800c578:	bd80      	pop	{r7, pc}
 800c57a:	bf00      	nop
 800c57c:	200000a0 	.word	0x200000a0

0800c580 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c580:	b480      	push	{r7}
 800c582:	b083      	sub	sp, #12
 800c584:	af00      	add	r7, sp, #0
 800c586:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	220a      	movs	r2, #10
 800c58c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c58e:	4b03      	ldr	r3, [pc, #12]	; (800c59c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c590:	4618      	mov	r0, r3
 800c592:	370c      	adds	r7, #12
 800c594:	46bd      	mov	sp, r7
 800c596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59a:	4770      	bx	lr
 800c59c:	2000005c 	.word	0x2000005c

0800c5a0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c5a0:	b480      	push	{r7}
 800c5a2:	b083      	sub	sp, #12
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
 800c5a8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c5aa:	683b      	ldr	r3, [r7, #0]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d101      	bne.n	800c5b4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c5b0:	2303      	movs	r3, #3
 800c5b2:	e009      	b.n	800c5c8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c5ba:	687a      	ldr	r2, [r7, #4]
 800c5bc:	33b0      	adds	r3, #176	; 0xb0
 800c5be:	009b      	lsls	r3, r3, #2
 800c5c0:	4413      	add	r3, r2
 800c5c2:	683a      	ldr	r2, [r7, #0]
 800c5c4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c5c6:	2300      	movs	r3, #0
}
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	370c      	adds	r7, #12
 800c5cc:	46bd      	mov	sp, r7
 800c5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5d2:	4770      	bx	lr

0800c5d4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c5d4:	b480      	push	{r7}
 800c5d6:	b087      	sub	sp, #28
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	60f8      	str	r0, [r7, #12]
 800c5dc:	60b9      	str	r1, [r7, #8]
 800c5de:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	32b0      	adds	r2, #176	; 0xb0
 800c5ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5ee:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c5f0:	697b      	ldr	r3, [r7, #20]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d101      	bne.n	800c5fa <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c5f6:	2303      	movs	r3, #3
 800c5f8:	e008      	b.n	800c60c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c5fa:	697b      	ldr	r3, [r7, #20]
 800c5fc:	68ba      	ldr	r2, [r7, #8]
 800c5fe:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c602:	697b      	ldr	r3, [r7, #20]
 800c604:	687a      	ldr	r2, [r7, #4]
 800c606:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c60a:	2300      	movs	r3, #0
}
 800c60c:	4618      	mov	r0, r3
 800c60e:	371c      	adds	r7, #28
 800c610:	46bd      	mov	sp, r7
 800c612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c616:	4770      	bx	lr

0800c618 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c618:	b480      	push	{r7}
 800c61a:	b085      	sub	sp, #20
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	6078      	str	r0, [r7, #4]
 800c620:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	32b0      	adds	r2, #176	; 0xb0
 800c62c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c630:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d101      	bne.n	800c63c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c638:	2303      	movs	r3, #3
 800c63a:	e004      	b.n	800c646 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	683a      	ldr	r2, [r7, #0]
 800c640:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c644:	2300      	movs	r3, #0
}
 800c646:	4618      	mov	r0, r3
 800c648:	3714      	adds	r7, #20
 800c64a:	46bd      	mov	sp, r7
 800c64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c650:	4770      	bx	lr
	...

0800c654 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b084      	sub	sp, #16
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	32b0      	adds	r2, #176	; 0xb0
 800c666:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c66a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800c66c:	2301      	movs	r3, #1
 800c66e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c670:	68bb      	ldr	r3, [r7, #8]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d101      	bne.n	800c67a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c676:	2303      	movs	r3, #3
 800c678:	e025      	b.n	800c6c6 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800c67a:	68bb      	ldr	r3, [r7, #8]
 800c67c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c680:	2b00      	cmp	r3, #0
 800c682:	d11f      	bne.n	800c6c4 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c684:	68bb      	ldr	r3, [r7, #8]
 800c686:	2201      	movs	r2, #1
 800c688:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800c68c:	4b10      	ldr	r3, [pc, #64]	; (800c6d0 <USBD_CDC_TransmitPacket+0x7c>)
 800c68e:	781b      	ldrb	r3, [r3, #0]
 800c690:	f003 020f 	and.w	r2, r3, #15
 800c694:	68bb      	ldr	r3, [r7, #8]
 800c696:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800c69a:	6878      	ldr	r0, [r7, #4]
 800c69c:	4613      	mov	r3, r2
 800c69e:	009b      	lsls	r3, r3, #2
 800c6a0:	4413      	add	r3, r2
 800c6a2:	009b      	lsls	r3, r3, #2
 800c6a4:	4403      	add	r3, r0
 800c6a6:	3318      	adds	r3, #24
 800c6a8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c6aa:	4b09      	ldr	r3, [pc, #36]	; (800c6d0 <USBD_CDC_TransmitPacket+0x7c>)
 800c6ac:	7819      	ldrb	r1, [r3, #0]
 800c6ae:	68bb      	ldr	r3, [r7, #8]
 800c6b0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c6b4:	68bb      	ldr	r3, [r7, #8]
 800c6b6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c6ba:	6878      	ldr	r0, [r7, #4]
 800c6bc:	f003 fa1d 	bl	800fafa <USBD_LL_Transmit>

    ret = USBD_OK;
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c6c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	3710      	adds	r7, #16
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bd80      	pop	{r7, pc}
 800c6ce:	bf00      	nop
 800c6d0:	200000e3 	.word	0x200000e3

0800c6d4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c6d4:	b580      	push	{r7, lr}
 800c6d6:	b084      	sub	sp, #16
 800c6d8:	af00      	add	r7, sp, #0
 800c6da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	32b0      	adds	r2, #176	; 0xb0
 800c6e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6ea:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	32b0      	adds	r2, #176	; 0xb0
 800c6f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6fa:	2b00      	cmp	r3, #0
 800c6fc:	d101      	bne.n	800c702 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c6fe:	2303      	movs	r3, #3
 800c700:	e018      	b.n	800c734 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	7c1b      	ldrb	r3, [r3, #16]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d10a      	bne.n	800c720 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c70a:	4b0c      	ldr	r3, [pc, #48]	; (800c73c <USBD_CDC_ReceivePacket+0x68>)
 800c70c:	7819      	ldrb	r1, [r3, #0]
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c714:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c718:	6878      	ldr	r0, [r7, #4]
 800c71a:	f003 fa0f 	bl	800fb3c <USBD_LL_PrepareReceive>
 800c71e:	e008      	b.n	800c732 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c720:	4b06      	ldr	r3, [pc, #24]	; (800c73c <USBD_CDC_ReceivePacket+0x68>)
 800c722:	7819      	ldrb	r1, [r3, #0]
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c72a:	2340      	movs	r3, #64	; 0x40
 800c72c:	6878      	ldr	r0, [r7, #4]
 800c72e:	f003 fa05 	bl	800fb3c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c732:	2300      	movs	r3, #0
}
 800c734:	4618      	mov	r0, r3
 800c736:	3710      	adds	r7, #16
 800c738:	46bd      	mov	sp, r7
 800c73a:	bd80      	pop	{r7, pc}
 800c73c:	200000e4 	.word	0x200000e4

0800c740 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c740:	b580      	push	{r7, lr}
 800c742:	b086      	sub	sp, #24
 800c744:	af00      	add	r7, sp, #0
 800c746:	60f8      	str	r0, [r7, #12]
 800c748:	60b9      	str	r1, [r7, #8]
 800c74a:	4613      	mov	r3, r2
 800c74c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d101      	bne.n	800c758 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c754:	2303      	movs	r3, #3
 800c756:	e01f      	b.n	800c798 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	2200      	movs	r2, #0
 800c75c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	2200      	movs	r2, #0
 800c764:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	2200      	movs	r2, #0
 800c76c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c770:	68bb      	ldr	r3, [r7, #8]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d003      	beq.n	800c77e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	68ba      	ldr	r2, [r7, #8]
 800c77a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	2201      	movs	r2, #1
 800c782:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	79fa      	ldrb	r2, [r7, #7]
 800c78a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c78c:	68f8      	ldr	r0, [r7, #12]
 800c78e:	f003 f87f 	bl	800f890 <USBD_LL_Init>
 800c792:	4603      	mov	r3, r0
 800c794:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c796:	7dfb      	ldrb	r3, [r7, #23]
}
 800c798:	4618      	mov	r0, r3
 800c79a:	3718      	adds	r7, #24
 800c79c:	46bd      	mov	sp, r7
 800c79e:	bd80      	pop	{r7, pc}

0800c7a0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c7a0:	b580      	push	{r7, lr}
 800c7a2:	b084      	sub	sp, #16
 800c7a4:	af00      	add	r7, sp, #0
 800c7a6:	6078      	str	r0, [r7, #4]
 800c7a8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c7aa:	2300      	movs	r3, #0
 800c7ac:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c7ae:	683b      	ldr	r3, [r7, #0]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d101      	bne.n	800c7b8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c7b4:	2303      	movs	r3, #3
 800c7b6:	e025      	b.n	800c804 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	683a      	ldr	r2, [r7, #0]
 800c7bc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	32ae      	adds	r2, #174	; 0xae
 800c7ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d00f      	beq.n	800c7f4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	32ae      	adds	r2, #174	; 0xae
 800c7de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c7e4:	f107 020e 	add.w	r2, r7, #14
 800c7e8:	4610      	mov	r0, r2
 800c7ea:	4798      	blx	r3
 800c7ec:	4602      	mov	r2, r0
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c7fa:	1c5a      	adds	r2, r3, #1
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800c802:	2300      	movs	r3, #0
}
 800c804:	4618      	mov	r0, r3
 800c806:	3710      	adds	r7, #16
 800c808:	46bd      	mov	sp, r7
 800c80a:	bd80      	pop	{r7, pc}

0800c80c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b082      	sub	sp, #8
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c814:	6878      	ldr	r0, [r7, #4]
 800c816:	f003 f887 	bl	800f928 <USBD_LL_Start>
 800c81a:	4603      	mov	r3, r0
}
 800c81c:	4618      	mov	r0, r3
 800c81e:	3708      	adds	r7, #8
 800c820:	46bd      	mov	sp, r7
 800c822:	bd80      	pop	{r7, pc}

0800c824 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c824:	b480      	push	{r7}
 800c826:	b083      	sub	sp, #12
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c82c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c82e:	4618      	mov	r0, r3
 800c830:	370c      	adds	r7, #12
 800c832:	46bd      	mov	sp, r7
 800c834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c838:	4770      	bx	lr

0800c83a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c83a:	b580      	push	{r7, lr}
 800c83c:	b084      	sub	sp, #16
 800c83e:	af00      	add	r7, sp, #0
 800c840:	6078      	str	r0, [r7, #4]
 800c842:	460b      	mov	r3, r1
 800c844:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c846:	2300      	movs	r3, #0
 800c848:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c850:	2b00      	cmp	r3, #0
 800c852:	d009      	beq.n	800c868 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	78fa      	ldrb	r2, [r7, #3]
 800c85e:	4611      	mov	r1, r2
 800c860:	6878      	ldr	r0, [r7, #4]
 800c862:	4798      	blx	r3
 800c864:	4603      	mov	r3, r0
 800c866:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c868:	7bfb      	ldrb	r3, [r7, #15]
}
 800c86a:	4618      	mov	r0, r3
 800c86c:	3710      	adds	r7, #16
 800c86e:	46bd      	mov	sp, r7
 800c870:	bd80      	pop	{r7, pc}

0800c872 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c872:	b580      	push	{r7, lr}
 800c874:	b084      	sub	sp, #16
 800c876:	af00      	add	r7, sp, #0
 800c878:	6078      	str	r0, [r7, #4]
 800c87a:	460b      	mov	r3, r1
 800c87c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c87e:	2300      	movs	r3, #0
 800c880:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c888:	685b      	ldr	r3, [r3, #4]
 800c88a:	78fa      	ldrb	r2, [r7, #3]
 800c88c:	4611      	mov	r1, r2
 800c88e:	6878      	ldr	r0, [r7, #4]
 800c890:	4798      	blx	r3
 800c892:	4603      	mov	r3, r0
 800c894:	2b00      	cmp	r3, #0
 800c896:	d001      	beq.n	800c89c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c898:	2303      	movs	r3, #3
 800c89a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c89c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c89e:	4618      	mov	r0, r3
 800c8a0:	3710      	adds	r7, #16
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bd80      	pop	{r7, pc}

0800c8a6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c8a6:	b580      	push	{r7, lr}
 800c8a8:	b084      	sub	sp, #16
 800c8aa:	af00      	add	r7, sp, #0
 800c8ac:	6078      	str	r0, [r7, #4]
 800c8ae:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c8b6:	6839      	ldr	r1, [r7, #0]
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	f001 f90e 	bl	800dada <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	2201      	movs	r2, #1
 800c8c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c8cc:	461a      	mov	r2, r3
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c8da:	f003 031f 	and.w	r3, r3, #31
 800c8de:	2b02      	cmp	r3, #2
 800c8e0:	d01a      	beq.n	800c918 <USBD_LL_SetupStage+0x72>
 800c8e2:	2b02      	cmp	r3, #2
 800c8e4:	d822      	bhi.n	800c92c <USBD_LL_SetupStage+0x86>
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d002      	beq.n	800c8f0 <USBD_LL_SetupStage+0x4a>
 800c8ea:	2b01      	cmp	r3, #1
 800c8ec:	d00a      	beq.n	800c904 <USBD_LL_SetupStage+0x5e>
 800c8ee:	e01d      	b.n	800c92c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c8f6:	4619      	mov	r1, r3
 800c8f8:	6878      	ldr	r0, [r7, #4]
 800c8fa:	f000 fb65 	bl	800cfc8 <USBD_StdDevReq>
 800c8fe:	4603      	mov	r3, r0
 800c900:	73fb      	strb	r3, [r7, #15]
      break;
 800c902:	e020      	b.n	800c946 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c90a:	4619      	mov	r1, r3
 800c90c:	6878      	ldr	r0, [r7, #4]
 800c90e:	f000 fbcd 	bl	800d0ac <USBD_StdItfReq>
 800c912:	4603      	mov	r3, r0
 800c914:	73fb      	strb	r3, [r7, #15]
      break;
 800c916:	e016      	b.n	800c946 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c91e:	4619      	mov	r1, r3
 800c920:	6878      	ldr	r0, [r7, #4]
 800c922:	f000 fc2f 	bl	800d184 <USBD_StdEPReq>
 800c926:	4603      	mov	r3, r0
 800c928:	73fb      	strb	r3, [r7, #15]
      break;
 800c92a:	e00c      	b.n	800c946 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c92c:	687b      	ldr	r3, [r7, #4]
 800c92e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c932:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c936:	b2db      	uxtb	r3, r3
 800c938:	4619      	mov	r1, r3
 800c93a:	6878      	ldr	r0, [r7, #4]
 800c93c:	f003 f854 	bl	800f9e8 <USBD_LL_StallEP>
 800c940:	4603      	mov	r3, r0
 800c942:	73fb      	strb	r3, [r7, #15]
      break;
 800c944:	bf00      	nop
  }

  return ret;
 800c946:	7bfb      	ldrb	r3, [r7, #15]
}
 800c948:	4618      	mov	r0, r3
 800c94a:	3710      	adds	r7, #16
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bd80      	pop	{r7, pc}

0800c950 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c950:	b580      	push	{r7, lr}
 800c952:	b086      	sub	sp, #24
 800c954:	af00      	add	r7, sp, #0
 800c956:	60f8      	str	r0, [r7, #12]
 800c958:	460b      	mov	r3, r1
 800c95a:	607a      	str	r2, [r7, #4]
 800c95c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c95e:	2300      	movs	r3, #0
 800c960:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c962:	7afb      	ldrb	r3, [r7, #11]
 800c964:	2b00      	cmp	r3, #0
 800c966:	d16e      	bne.n	800ca46 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c96e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c976:	2b03      	cmp	r3, #3
 800c978:	f040 8098 	bne.w	800caac <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c97c:	693b      	ldr	r3, [r7, #16]
 800c97e:	689a      	ldr	r2, [r3, #8]
 800c980:	693b      	ldr	r3, [r7, #16]
 800c982:	68db      	ldr	r3, [r3, #12]
 800c984:	429a      	cmp	r2, r3
 800c986:	d913      	bls.n	800c9b0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c988:	693b      	ldr	r3, [r7, #16]
 800c98a:	689a      	ldr	r2, [r3, #8]
 800c98c:	693b      	ldr	r3, [r7, #16]
 800c98e:	68db      	ldr	r3, [r3, #12]
 800c990:	1ad2      	subs	r2, r2, r3
 800c992:	693b      	ldr	r3, [r7, #16]
 800c994:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c996:	693b      	ldr	r3, [r7, #16]
 800c998:	68da      	ldr	r2, [r3, #12]
 800c99a:	693b      	ldr	r3, [r7, #16]
 800c99c:	689b      	ldr	r3, [r3, #8]
 800c99e:	4293      	cmp	r3, r2
 800c9a0:	bf28      	it	cs
 800c9a2:	4613      	movcs	r3, r2
 800c9a4:	461a      	mov	r2, r3
 800c9a6:	6879      	ldr	r1, [r7, #4]
 800c9a8:	68f8      	ldr	r0, [r7, #12]
 800c9aa:	f001 f98a 	bl	800dcc2 <USBD_CtlContinueRx>
 800c9ae:	e07d      	b.n	800caac <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c9b6:	f003 031f 	and.w	r3, r3, #31
 800c9ba:	2b02      	cmp	r3, #2
 800c9bc:	d014      	beq.n	800c9e8 <USBD_LL_DataOutStage+0x98>
 800c9be:	2b02      	cmp	r3, #2
 800c9c0:	d81d      	bhi.n	800c9fe <USBD_LL_DataOutStage+0xae>
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d002      	beq.n	800c9cc <USBD_LL_DataOutStage+0x7c>
 800c9c6:	2b01      	cmp	r3, #1
 800c9c8:	d003      	beq.n	800c9d2 <USBD_LL_DataOutStage+0x82>
 800c9ca:	e018      	b.n	800c9fe <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	75bb      	strb	r3, [r7, #22]
            break;
 800c9d0:	e018      	b.n	800ca04 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c9d2:	68fb      	ldr	r3, [r7, #12]
 800c9d4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c9d8:	b2db      	uxtb	r3, r3
 800c9da:	4619      	mov	r1, r3
 800c9dc:	68f8      	ldr	r0, [r7, #12]
 800c9de:	f000 fa64 	bl	800ceaa <USBD_CoreFindIF>
 800c9e2:	4603      	mov	r3, r0
 800c9e4:	75bb      	strb	r3, [r7, #22]
            break;
 800c9e6:	e00d      	b.n	800ca04 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c9ee:	b2db      	uxtb	r3, r3
 800c9f0:	4619      	mov	r1, r3
 800c9f2:	68f8      	ldr	r0, [r7, #12]
 800c9f4:	f000 fa66 	bl	800cec4 <USBD_CoreFindEP>
 800c9f8:	4603      	mov	r3, r0
 800c9fa:	75bb      	strb	r3, [r7, #22]
            break;
 800c9fc:	e002      	b.n	800ca04 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c9fe:	2300      	movs	r3, #0
 800ca00:	75bb      	strb	r3, [r7, #22]
            break;
 800ca02:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ca04:	7dbb      	ldrb	r3, [r7, #22]
 800ca06:	2b00      	cmp	r3, #0
 800ca08:	d119      	bne.n	800ca3e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca10:	b2db      	uxtb	r3, r3
 800ca12:	2b03      	cmp	r3, #3
 800ca14:	d113      	bne.n	800ca3e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ca16:	7dba      	ldrb	r2, [r7, #22]
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	32ae      	adds	r2, #174	; 0xae
 800ca1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca20:	691b      	ldr	r3, [r3, #16]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d00b      	beq.n	800ca3e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800ca26:	7dba      	ldrb	r2, [r7, #22]
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800ca2e:	7dba      	ldrb	r2, [r7, #22]
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	32ae      	adds	r2, #174	; 0xae
 800ca34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca38:	691b      	ldr	r3, [r3, #16]
 800ca3a:	68f8      	ldr	r0, [r7, #12]
 800ca3c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ca3e:	68f8      	ldr	r0, [r7, #12]
 800ca40:	f001 f950 	bl	800dce4 <USBD_CtlSendStatus>
 800ca44:	e032      	b.n	800caac <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800ca46:	7afb      	ldrb	r3, [r7, #11]
 800ca48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca4c:	b2db      	uxtb	r3, r3
 800ca4e:	4619      	mov	r1, r3
 800ca50:	68f8      	ldr	r0, [r7, #12]
 800ca52:	f000 fa37 	bl	800cec4 <USBD_CoreFindEP>
 800ca56:	4603      	mov	r3, r0
 800ca58:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ca5a:	7dbb      	ldrb	r3, [r7, #22]
 800ca5c:	2bff      	cmp	r3, #255	; 0xff
 800ca5e:	d025      	beq.n	800caac <USBD_LL_DataOutStage+0x15c>
 800ca60:	7dbb      	ldrb	r3, [r7, #22]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d122      	bne.n	800caac <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca6c:	b2db      	uxtb	r3, r3
 800ca6e:	2b03      	cmp	r3, #3
 800ca70:	d117      	bne.n	800caa2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ca72:	7dba      	ldrb	r2, [r7, #22]
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	32ae      	adds	r2, #174	; 0xae
 800ca78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca7c:	699b      	ldr	r3, [r3, #24]
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	d00f      	beq.n	800caa2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800ca82:	7dba      	ldrb	r2, [r7, #22]
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ca8a:	7dba      	ldrb	r2, [r7, #22]
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	32ae      	adds	r2, #174	; 0xae
 800ca90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca94:	699b      	ldr	r3, [r3, #24]
 800ca96:	7afa      	ldrb	r2, [r7, #11]
 800ca98:	4611      	mov	r1, r2
 800ca9a:	68f8      	ldr	r0, [r7, #12]
 800ca9c:	4798      	blx	r3
 800ca9e:	4603      	mov	r3, r0
 800caa0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800caa2:	7dfb      	ldrb	r3, [r7, #23]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d001      	beq.n	800caac <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800caa8:	7dfb      	ldrb	r3, [r7, #23]
 800caaa:	e000      	b.n	800caae <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800caac:	2300      	movs	r3, #0
}
 800caae:	4618      	mov	r0, r3
 800cab0:	3718      	adds	r7, #24
 800cab2:	46bd      	mov	sp, r7
 800cab4:	bd80      	pop	{r7, pc}

0800cab6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800cab6:	b580      	push	{r7, lr}
 800cab8:	b086      	sub	sp, #24
 800caba:	af00      	add	r7, sp, #0
 800cabc:	60f8      	str	r0, [r7, #12]
 800cabe:	460b      	mov	r3, r1
 800cac0:	607a      	str	r2, [r7, #4]
 800cac2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800cac4:	7afb      	ldrb	r3, [r7, #11]
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d16f      	bne.n	800cbaa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	3314      	adds	r3, #20
 800cace:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800cad0:	68fb      	ldr	r3, [r7, #12]
 800cad2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cad6:	2b02      	cmp	r3, #2
 800cad8:	d15a      	bne.n	800cb90 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800cada:	693b      	ldr	r3, [r7, #16]
 800cadc:	689a      	ldr	r2, [r3, #8]
 800cade:	693b      	ldr	r3, [r7, #16]
 800cae0:	68db      	ldr	r3, [r3, #12]
 800cae2:	429a      	cmp	r2, r3
 800cae4:	d914      	bls.n	800cb10 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800cae6:	693b      	ldr	r3, [r7, #16]
 800cae8:	689a      	ldr	r2, [r3, #8]
 800caea:	693b      	ldr	r3, [r7, #16]
 800caec:	68db      	ldr	r3, [r3, #12]
 800caee:	1ad2      	subs	r2, r2, r3
 800caf0:	693b      	ldr	r3, [r7, #16]
 800caf2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800caf4:	693b      	ldr	r3, [r7, #16]
 800caf6:	689b      	ldr	r3, [r3, #8]
 800caf8:	461a      	mov	r2, r3
 800cafa:	6879      	ldr	r1, [r7, #4]
 800cafc:	68f8      	ldr	r0, [r7, #12]
 800cafe:	f001 f8b2 	bl	800dc66 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cb02:	2300      	movs	r3, #0
 800cb04:	2200      	movs	r2, #0
 800cb06:	2100      	movs	r1, #0
 800cb08:	68f8      	ldr	r0, [r7, #12]
 800cb0a:	f003 f817 	bl	800fb3c <USBD_LL_PrepareReceive>
 800cb0e:	e03f      	b.n	800cb90 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800cb10:	693b      	ldr	r3, [r7, #16]
 800cb12:	68da      	ldr	r2, [r3, #12]
 800cb14:	693b      	ldr	r3, [r7, #16]
 800cb16:	689b      	ldr	r3, [r3, #8]
 800cb18:	429a      	cmp	r2, r3
 800cb1a:	d11c      	bne.n	800cb56 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800cb1c:	693b      	ldr	r3, [r7, #16]
 800cb1e:	685a      	ldr	r2, [r3, #4]
 800cb20:	693b      	ldr	r3, [r7, #16]
 800cb22:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800cb24:	429a      	cmp	r2, r3
 800cb26:	d316      	bcc.n	800cb56 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800cb28:	693b      	ldr	r3, [r7, #16]
 800cb2a:	685a      	ldr	r2, [r3, #4]
 800cb2c:	68fb      	ldr	r3, [r7, #12]
 800cb2e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800cb32:	429a      	cmp	r2, r3
 800cb34:	d20f      	bcs.n	800cb56 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800cb36:	2200      	movs	r2, #0
 800cb38:	2100      	movs	r1, #0
 800cb3a:	68f8      	ldr	r0, [r7, #12]
 800cb3c:	f001 f893 	bl	800dc66 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	2200      	movs	r2, #0
 800cb44:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cb48:	2300      	movs	r3, #0
 800cb4a:	2200      	movs	r2, #0
 800cb4c:	2100      	movs	r1, #0
 800cb4e:	68f8      	ldr	r0, [r7, #12]
 800cb50:	f002 fff4 	bl	800fb3c <USBD_LL_PrepareReceive>
 800cb54:	e01c      	b.n	800cb90 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb56:	68fb      	ldr	r3, [r7, #12]
 800cb58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb5c:	b2db      	uxtb	r3, r3
 800cb5e:	2b03      	cmp	r3, #3
 800cb60:	d10f      	bne.n	800cb82 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb68:	68db      	ldr	r3, [r3, #12]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d009      	beq.n	800cb82 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	2200      	movs	r2, #0
 800cb72:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cb7c:	68db      	ldr	r3, [r3, #12]
 800cb7e:	68f8      	ldr	r0, [r7, #12]
 800cb80:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800cb82:	2180      	movs	r1, #128	; 0x80
 800cb84:	68f8      	ldr	r0, [r7, #12]
 800cb86:	f002 ff2f 	bl	800f9e8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800cb8a:	68f8      	ldr	r0, [r7, #12]
 800cb8c:	f001 f8bd 	bl	800dd0a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d03a      	beq.n	800cc10 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800cb9a:	68f8      	ldr	r0, [r7, #12]
 800cb9c:	f7ff fe42 	bl	800c824 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	2200      	movs	r2, #0
 800cba4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800cba8:	e032      	b.n	800cc10 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800cbaa:	7afb      	ldrb	r3, [r7, #11]
 800cbac:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800cbb0:	b2db      	uxtb	r3, r3
 800cbb2:	4619      	mov	r1, r3
 800cbb4:	68f8      	ldr	r0, [r7, #12]
 800cbb6:	f000 f985 	bl	800cec4 <USBD_CoreFindEP>
 800cbba:	4603      	mov	r3, r0
 800cbbc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cbbe:	7dfb      	ldrb	r3, [r7, #23]
 800cbc0:	2bff      	cmp	r3, #255	; 0xff
 800cbc2:	d025      	beq.n	800cc10 <USBD_LL_DataInStage+0x15a>
 800cbc4:	7dfb      	ldrb	r3, [r7, #23]
 800cbc6:	2b00      	cmp	r3, #0
 800cbc8:	d122      	bne.n	800cc10 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cbd0:	b2db      	uxtb	r3, r3
 800cbd2:	2b03      	cmp	r3, #3
 800cbd4:	d11c      	bne.n	800cc10 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800cbd6:	7dfa      	ldrb	r2, [r7, #23]
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	32ae      	adds	r2, #174	; 0xae
 800cbdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbe0:	695b      	ldr	r3, [r3, #20]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d014      	beq.n	800cc10 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800cbe6:	7dfa      	ldrb	r2, [r7, #23]
 800cbe8:	68fb      	ldr	r3, [r7, #12]
 800cbea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800cbee:	7dfa      	ldrb	r2, [r7, #23]
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	32ae      	adds	r2, #174	; 0xae
 800cbf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbf8:	695b      	ldr	r3, [r3, #20]
 800cbfa:	7afa      	ldrb	r2, [r7, #11]
 800cbfc:	4611      	mov	r1, r2
 800cbfe:	68f8      	ldr	r0, [r7, #12]
 800cc00:	4798      	blx	r3
 800cc02:	4603      	mov	r3, r0
 800cc04:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800cc06:	7dbb      	ldrb	r3, [r7, #22]
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d001      	beq.n	800cc10 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800cc0c:	7dbb      	ldrb	r3, [r7, #22]
 800cc0e:	e000      	b.n	800cc12 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800cc10:	2300      	movs	r3, #0
}
 800cc12:	4618      	mov	r0, r3
 800cc14:	3718      	adds	r7, #24
 800cc16:	46bd      	mov	sp, r7
 800cc18:	bd80      	pop	{r7, pc}

0800cc1a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800cc1a:	b580      	push	{r7, lr}
 800cc1c:	b084      	sub	sp, #16
 800cc1e:	af00      	add	r7, sp, #0
 800cc20:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800cc22:	2300      	movs	r3, #0
 800cc24:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	2201      	movs	r2, #1
 800cc2a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	2200      	movs	r2, #0
 800cc32:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	2200      	movs	r2, #0
 800cc3a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	2200      	movs	r2, #0
 800cc40:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	2200      	movs	r2, #0
 800cc48:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d014      	beq.n	800cc80 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc5c:	685b      	ldr	r3, [r3, #4]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d00e      	beq.n	800cc80 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cc68:	685b      	ldr	r3, [r3, #4]
 800cc6a:	687a      	ldr	r2, [r7, #4]
 800cc6c:	6852      	ldr	r2, [r2, #4]
 800cc6e:	b2d2      	uxtb	r2, r2
 800cc70:	4611      	mov	r1, r2
 800cc72:	6878      	ldr	r0, [r7, #4]
 800cc74:	4798      	blx	r3
 800cc76:	4603      	mov	r3, r0
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d001      	beq.n	800cc80 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800cc7c:	2303      	movs	r3, #3
 800cc7e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cc80:	2340      	movs	r3, #64	; 0x40
 800cc82:	2200      	movs	r2, #0
 800cc84:	2100      	movs	r1, #0
 800cc86:	6878      	ldr	r0, [r7, #4]
 800cc88:	f002 fe69 	bl	800f95e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	2201      	movs	r2, #1
 800cc90:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	2240      	movs	r2, #64	; 0x40
 800cc98:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800cc9c:	2340      	movs	r3, #64	; 0x40
 800cc9e:	2200      	movs	r2, #0
 800cca0:	2180      	movs	r1, #128	; 0x80
 800cca2:	6878      	ldr	r0, [r7, #4]
 800cca4:	f002 fe5b 	bl	800f95e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	2201      	movs	r2, #1
 800ccac:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	2240      	movs	r2, #64	; 0x40
 800ccb2:	621a      	str	r2, [r3, #32]

  return ret;
 800ccb4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	3710      	adds	r7, #16
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	bd80      	pop	{r7, pc}

0800ccbe <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ccbe:	b480      	push	{r7}
 800ccc0:	b083      	sub	sp, #12
 800ccc2:	af00      	add	r7, sp, #0
 800ccc4:	6078      	str	r0, [r7, #4]
 800ccc6:	460b      	mov	r3, r1
 800ccc8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	78fa      	ldrb	r2, [r7, #3]
 800ccce:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ccd0:	2300      	movs	r3, #0
}
 800ccd2:	4618      	mov	r0, r3
 800ccd4:	370c      	adds	r7, #12
 800ccd6:	46bd      	mov	sp, r7
 800ccd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccdc:	4770      	bx	lr

0800ccde <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ccde:	b480      	push	{r7}
 800cce0:	b083      	sub	sp, #12
 800cce2:	af00      	add	r7, sp, #0
 800cce4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ccec:	b2db      	uxtb	r3, r3
 800ccee:	2b04      	cmp	r3, #4
 800ccf0:	d006      	beq.n	800cd00 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ccf8:	b2da      	uxtb	r2, r3
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	2204      	movs	r2, #4
 800cd04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800cd08:	2300      	movs	r3, #0
}
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	370c      	adds	r7, #12
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd14:	4770      	bx	lr

0800cd16 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800cd16:	b480      	push	{r7}
 800cd18:	b083      	sub	sp, #12
 800cd1a:	af00      	add	r7, sp, #0
 800cd1c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd24:	b2db      	uxtb	r3, r3
 800cd26:	2b04      	cmp	r3, #4
 800cd28:	d106      	bne.n	800cd38 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800cd30:	b2da      	uxtb	r2, r3
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800cd38:	2300      	movs	r3, #0
}
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	370c      	adds	r7, #12
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd44:	4770      	bx	lr

0800cd46 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800cd46:	b580      	push	{r7, lr}
 800cd48:	b082      	sub	sp, #8
 800cd4a:	af00      	add	r7, sp, #0
 800cd4c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cd54:	b2db      	uxtb	r3, r3
 800cd56:	2b03      	cmp	r3, #3
 800cd58:	d110      	bne.n	800cd7c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d00b      	beq.n	800cd7c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd6a:	69db      	ldr	r3, [r3, #28]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d005      	beq.n	800cd7c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cd76:	69db      	ldr	r3, [r3, #28]
 800cd78:	6878      	ldr	r0, [r7, #4]
 800cd7a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800cd7c:	2300      	movs	r3, #0
}
 800cd7e:	4618      	mov	r0, r3
 800cd80:	3708      	adds	r7, #8
 800cd82:	46bd      	mov	sp, r7
 800cd84:	bd80      	pop	{r7, pc}

0800cd86 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800cd86:	b580      	push	{r7, lr}
 800cd88:	b082      	sub	sp, #8
 800cd8a:	af00      	add	r7, sp, #0
 800cd8c:	6078      	str	r0, [r7, #4]
 800cd8e:	460b      	mov	r3, r1
 800cd90:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	32ae      	adds	r2, #174	; 0xae
 800cd9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d101      	bne.n	800cda8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800cda4:	2303      	movs	r3, #3
 800cda6:	e01c      	b.n	800cde2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cdae:	b2db      	uxtb	r3, r3
 800cdb0:	2b03      	cmp	r3, #3
 800cdb2:	d115      	bne.n	800cde0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	32ae      	adds	r2, #174	; 0xae
 800cdbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdc2:	6a1b      	ldr	r3, [r3, #32]
 800cdc4:	2b00      	cmp	r3, #0
 800cdc6:	d00b      	beq.n	800cde0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	32ae      	adds	r2, #174	; 0xae
 800cdd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdd6:	6a1b      	ldr	r3, [r3, #32]
 800cdd8:	78fa      	ldrb	r2, [r7, #3]
 800cdda:	4611      	mov	r1, r2
 800cddc:	6878      	ldr	r0, [r7, #4]
 800cdde:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800cde0:	2300      	movs	r3, #0
}
 800cde2:	4618      	mov	r0, r3
 800cde4:	3708      	adds	r7, #8
 800cde6:	46bd      	mov	sp, r7
 800cde8:	bd80      	pop	{r7, pc}

0800cdea <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800cdea:	b580      	push	{r7, lr}
 800cdec:	b082      	sub	sp, #8
 800cdee:	af00      	add	r7, sp, #0
 800cdf0:	6078      	str	r0, [r7, #4]
 800cdf2:	460b      	mov	r3, r1
 800cdf4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	32ae      	adds	r2, #174	; 0xae
 800ce00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce04:	2b00      	cmp	r3, #0
 800ce06:	d101      	bne.n	800ce0c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ce08:	2303      	movs	r3, #3
 800ce0a:	e01c      	b.n	800ce46 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce12:	b2db      	uxtb	r3, r3
 800ce14:	2b03      	cmp	r3, #3
 800ce16:	d115      	bne.n	800ce44 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	32ae      	adds	r2, #174	; 0xae
 800ce22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d00b      	beq.n	800ce44 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	32ae      	adds	r2, #174	; 0xae
 800ce36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ce3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ce3c:	78fa      	ldrb	r2, [r7, #3]
 800ce3e:	4611      	mov	r1, r2
 800ce40:	6878      	ldr	r0, [r7, #4]
 800ce42:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ce44:	2300      	movs	r3, #0
}
 800ce46:	4618      	mov	r0, r3
 800ce48:	3708      	adds	r7, #8
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	bd80      	pop	{r7, pc}

0800ce4e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ce4e:	b480      	push	{r7}
 800ce50:	b083      	sub	sp, #12
 800ce52:	af00      	add	r7, sp, #0
 800ce54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ce56:	2300      	movs	r3, #0
}
 800ce58:	4618      	mov	r0, r3
 800ce5a:	370c      	adds	r7, #12
 800ce5c:	46bd      	mov	sp, r7
 800ce5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce62:	4770      	bx	lr

0800ce64 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ce64:	b580      	push	{r7, lr}
 800ce66:	b084      	sub	sp, #16
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	2201      	movs	r2, #1
 800ce74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d00e      	beq.n	800cea0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce88:	685b      	ldr	r3, [r3, #4]
 800ce8a:	687a      	ldr	r2, [r7, #4]
 800ce8c:	6852      	ldr	r2, [r2, #4]
 800ce8e:	b2d2      	uxtb	r2, r2
 800ce90:	4611      	mov	r1, r2
 800ce92:	6878      	ldr	r0, [r7, #4]
 800ce94:	4798      	blx	r3
 800ce96:	4603      	mov	r3, r0
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d001      	beq.n	800cea0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ce9c:	2303      	movs	r3, #3
 800ce9e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800cea0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cea2:	4618      	mov	r0, r3
 800cea4:	3710      	adds	r7, #16
 800cea6:	46bd      	mov	sp, r7
 800cea8:	bd80      	pop	{r7, pc}

0800ceaa <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ceaa:	b480      	push	{r7}
 800ceac:	b083      	sub	sp, #12
 800ceae:	af00      	add	r7, sp, #0
 800ceb0:	6078      	str	r0, [r7, #4]
 800ceb2:	460b      	mov	r3, r1
 800ceb4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ceb6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ceb8:	4618      	mov	r0, r3
 800ceba:	370c      	adds	r7, #12
 800cebc:	46bd      	mov	sp, r7
 800cebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec2:	4770      	bx	lr

0800cec4 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800cec4:	b480      	push	{r7}
 800cec6:	b083      	sub	sp, #12
 800cec8:	af00      	add	r7, sp, #0
 800ceca:	6078      	str	r0, [r7, #4]
 800cecc:	460b      	mov	r3, r1
 800cece:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ced0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ced2:	4618      	mov	r0, r3
 800ced4:	370c      	adds	r7, #12
 800ced6:	46bd      	mov	sp, r7
 800ced8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cedc:	4770      	bx	lr

0800cede <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800cede:	b580      	push	{r7, lr}
 800cee0:	b086      	sub	sp, #24
 800cee2:	af00      	add	r7, sp, #0
 800cee4:	6078      	str	r0, [r7, #4]
 800cee6:	460b      	mov	r3, r1
 800cee8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800cef2:	2300      	movs	r3, #0
 800cef4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	885b      	ldrh	r3, [r3, #2]
 800cefa:	b29a      	uxth	r2, r3
 800cefc:	68fb      	ldr	r3, [r7, #12]
 800cefe:	781b      	ldrb	r3, [r3, #0]
 800cf00:	b29b      	uxth	r3, r3
 800cf02:	429a      	cmp	r2, r3
 800cf04:	d920      	bls.n	800cf48 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	781b      	ldrb	r3, [r3, #0]
 800cf0a:	b29b      	uxth	r3, r3
 800cf0c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800cf0e:	e013      	b.n	800cf38 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800cf10:	f107 030a 	add.w	r3, r7, #10
 800cf14:	4619      	mov	r1, r3
 800cf16:	6978      	ldr	r0, [r7, #20]
 800cf18:	f000 f81b 	bl	800cf52 <USBD_GetNextDesc>
 800cf1c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800cf1e:	697b      	ldr	r3, [r7, #20]
 800cf20:	785b      	ldrb	r3, [r3, #1]
 800cf22:	2b05      	cmp	r3, #5
 800cf24:	d108      	bne.n	800cf38 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800cf26:	697b      	ldr	r3, [r7, #20]
 800cf28:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800cf2a:	693b      	ldr	r3, [r7, #16]
 800cf2c:	789b      	ldrb	r3, [r3, #2]
 800cf2e:	78fa      	ldrb	r2, [r7, #3]
 800cf30:	429a      	cmp	r2, r3
 800cf32:	d008      	beq.n	800cf46 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800cf34:	2300      	movs	r3, #0
 800cf36:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	885b      	ldrh	r3, [r3, #2]
 800cf3c:	b29a      	uxth	r2, r3
 800cf3e:	897b      	ldrh	r3, [r7, #10]
 800cf40:	429a      	cmp	r2, r3
 800cf42:	d8e5      	bhi.n	800cf10 <USBD_GetEpDesc+0x32>
 800cf44:	e000      	b.n	800cf48 <USBD_GetEpDesc+0x6a>
          break;
 800cf46:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800cf48:	693b      	ldr	r3, [r7, #16]
}
 800cf4a:	4618      	mov	r0, r3
 800cf4c:	3718      	adds	r7, #24
 800cf4e:	46bd      	mov	sp, r7
 800cf50:	bd80      	pop	{r7, pc}

0800cf52 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800cf52:	b480      	push	{r7}
 800cf54:	b085      	sub	sp, #20
 800cf56:	af00      	add	r7, sp, #0
 800cf58:	6078      	str	r0, [r7, #4]
 800cf5a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800cf60:	683b      	ldr	r3, [r7, #0]
 800cf62:	881a      	ldrh	r2, [r3, #0]
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	781b      	ldrb	r3, [r3, #0]
 800cf68:	b29b      	uxth	r3, r3
 800cf6a:	4413      	add	r3, r2
 800cf6c:	b29a      	uxth	r2, r3
 800cf6e:	683b      	ldr	r3, [r7, #0]
 800cf70:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800cf72:	68fb      	ldr	r3, [r7, #12]
 800cf74:	781b      	ldrb	r3, [r3, #0]
 800cf76:	461a      	mov	r2, r3
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	4413      	add	r3, r2
 800cf7c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800cf7e:	68fb      	ldr	r3, [r7, #12]
}
 800cf80:	4618      	mov	r0, r3
 800cf82:	3714      	adds	r7, #20
 800cf84:	46bd      	mov	sp, r7
 800cf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8a:	4770      	bx	lr

0800cf8c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800cf8c:	b480      	push	{r7}
 800cf8e:	b087      	sub	sp, #28
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800cf98:	697b      	ldr	r3, [r7, #20]
 800cf9a:	781b      	ldrb	r3, [r3, #0]
 800cf9c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800cf9e:	697b      	ldr	r3, [r7, #20]
 800cfa0:	3301      	adds	r3, #1
 800cfa2:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800cfa4:	697b      	ldr	r3, [r7, #20]
 800cfa6:	781b      	ldrb	r3, [r3, #0]
 800cfa8:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800cfaa:	8a3b      	ldrh	r3, [r7, #16]
 800cfac:	021b      	lsls	r3, r3, #8
 800cfae:	b21a      	sxth	r2, r3
 800cfb0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cfb4:	4313      	orrs	r3, r2
 800cfb6:	b21b      	sxth	r3, r3
 800cfb8:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800cfba:	89fb      	ldrh	r3, [r7, #14]
}
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	371c      	adds	r7, #28
 800cfc0:	46bd      	mov	sp, r7
 800cfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc6:	4770      	bx	lr

0800cfc8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b084      	sub	sp, #16
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	6078      	str	r0, [r7, #4]
 800cfd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cfd2:	2300      	movs	r3, #0
 800cfd4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	781b      	ldrb	r3, [r3, #0]
 800cfda:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cfde:	2b40      	cmp	r3, #64	; 0x40
 800cfe0:	d005      	beq.n	800cfee <USBD_StdDevReq+0x26>
 800cfe2:	2b40      	cmp	r3, #64	; 0x40
 800cfe4:	d857      	bhi.n	800d096 <USBD_StdDevReq+0xce>
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d00f      	beq.n	800d00a <USBD_StdDevReq+0x42>
 800cfea:	2b20      	cmp	r3, #32
 800cfec:	d153      	bne.n	800d096 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	32ae      	adds	r2, #174	; 0xae
 800cff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cffc:	689b      	ldr	r3, [r3, #8]
 800cffe:	6839      	ldr	r1, [r7, #0]
 800d000:	6878      	ldr	r0, [r7, #4]
 800d002:	4798      	blx	r3
 800d004:	4603      	mov	r3, r0
 800d006:	73fb      	strb	r3, [r7, #15]
      break;
 800d008:	e04a      	b.n	800d0a0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d00a:	683b      	ldr	r3, [r7, #0]
 800d00c:	785b      	ldrb	r3, [r3, #1]
 800d00e:	2b09      	cmp	r3, #9
 800d010:	d83b      	bhi.n	800d08a <USBD_StdDevReq+0xc2>
 800d012:	a201      	add	r2, pc, #4	; (adr r2, 800d018 <USBD_StdDevReq+0x50>)
 800d014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d018:	0800d06d 	.word	0x0800d06d
 800d01c:	0800d081 	.word	0x0800d081
 800d020:	0800d08b 	.word	0x0800d08b
 800d024:	0800d077 	.word	0x0800d077
 800d028:	0800d08b 	.word	0x0800d08b
 800d02c:	0800d04b 	.word	0x0800d04b
 800d030:	0800d041 	.word	0x0800d041
 800d034:	0800d08b 	.word	0x0800d08b
 800d038:	0800d063 	.word	0x0800d063
 800d03c:	0800d055 	.word	0x0800d055
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d040:	6839      	ldr	r1, [r7, #0]
 800d042:	6878      	ldr	r0, [r7, #4]
 800d044:	f000 fa3c 	bl	800d4c0 <USBD_GetDescriptor>
          break;
 800d048:	e024      	b.n	800d094 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d04a:	6839      	ldr	r1, [r7, #0]
 800d04c:	6878      	ldr	r0, [r7, #4]
 800d04e:	f000 fba1 	bl	800d794 <USBD_SetAddress>
          break;
 800d052:	e01f      	b.n	800d094 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d054:	6839      	ldr	r1, [r7, #0]
 800d056:	6878      	ldr	r0, [r7, #4]
 800d058:	f000 fbe0 	bl	800d81c <USBD_SetConfig>
 800d05c:	4603      	mov	r3, r0
 800d05e:	73fb      	strb	r3, [r7, #15]
          break;
 800d060:	e018      	b.n	800d094 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d062:	6839      	ldr	r1, [r7, #0]
 800d064:	6878      	ldr	r0, [r7, #4]
 800d066:	f000 fc83 	bl	800d970 <USBD_GetConfig>
          break;
 800d06a:	e013      	b.n	800d094 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d06c:	6839      	ldr	r1, [r7, #0]
 800d06e:	6878      	ldr	r0, [r7, #4]
 800d070:	f000 fcb4 	bl	800d9dc <USBD_GetStatus>
          break;
 800d074:	e00e      	b.n	800d094 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d076:	6839      	ldr	r1, [r7, #0]
 800d078:	6878      	ldr	r0, [r7, #4]
 800d07a:	f000 fce3 	bl	800da44 <USBD_SetFeature>
          break;
 800d07e:	e009      	b.n	800d094 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d080:	6839      	ldr	r1, [r7, #0]
 800d082:	6878      	ldr	r0, [r7, #4]
 800d084:	f000 fd07 	bl	800da96 <USBD_ClrFeature>
          break;
 800d088:	e004      	b.n	800d094 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800d08a:	6839      	ldr	r1, [r7, #0]
 800d08c:	6878      	ldr	r0, [r7, #4]
 800d08e:	f000 fd5e 	bl	800db4e <USBD_CtlError>
          break;
 800d092:	bf00      	nop
      }
      break;
 800d094:	e004      	b.n	800d0a0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800d096:	6839      	ldr	r1, [r7, #0]
 800d098:	6878      	ldr	r0, [r7, #4]
 800d09a:	f000 fd58 	bl	800db4e <USBD_CtlError>
      break;
 800d09e:	bf00      	nop
  }

  return ret;
 800d0a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0a2:	4618      	mov	r0, r3
 800d0a4:	3710      	adds	r7, #16
 800d0a6:	46bd      	mov	sp, r7
 800d0a8:	bd80      	pop	{r7, pc}
 800d0aa:	bf00      	nop

0800d0ac <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d0ac:	b580      	push	{r7, lr}
 800d0ae:	b084      	sub	sp, #16
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
 800d0b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d0ba:	683b      	ldr	r3, [r7, #0]
 800d0bc:	781b      	ldrb	r3, [r3, #0]
 800d0be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d0c2:	2b40      	cmp	r3, #64	; 0x40
 800d0c4:	d005      	beq.n	800d0d2 <USBD_StdItfReq+0x26>
 800d0c6:	2b40      	cmp	r3, #64	; 0x40
 800d0c8:	d852      	bhi.n	800d170 <USBD_StdItfReq+0xc4>
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d001      	beq.n	800d0d2 <USBD_StdItfReq+0x26>
 800d0ce:	2b20      	cmp	r3, #32
 800d0d0:	d14e      	bne.n	800d170 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d0d8:	b2db      	uxtb	r3, r3
 800d0da:	3b01      	subs	r3, #1
 800d0dc:	2b02      	cmp	r3, #2
 800d0de:	d840      	bhi.n	800d162 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d0e0:	683b      	ldr	r3, [r7, #0]
 800d0e2:	889b      	ldrh	r3, [r3, #4]
 800d0e4:	b2db      	uxtb	r3, r3
 800d0e6:	2b01      	cmp	r3, #1
 800d0e8:	d836      	bhi.n	800d158 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	889b      	ldrh	r3, [r3, #4]
 800d0ee:	b2db      	uxtb	r3, r3
 800d0f0:	4619      	mov	r1, r3
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f7ff fed9 	bl	800ceaa <USBD_CoreFindIF>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d0fc:	7bbb      	ldrb	r3, [r7, #14]
 800d0fe:	2bff      	cmp	r3, #255	; 0xff
 800d100:	d01d      	beq.n	800d13e <USBD_StdItfReq+0x92>
 800d102:	7bbb      	ldrb	r3, [r7, #14]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d11a      	bne.n	800d13e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d108:	7bba      	ldrb	r2, [r7, #14]
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	32ae      	adds	r2, #174	; 0xae
 800d10e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d112:	689b      	ldr	r3, [r3, #8]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d00f      	beq.n	800d138 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d118:	7bba      	ldrb	r2, [r7, #14]
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d120:	7bba      	ldrb	r2, [r7, #14]
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	32ae      	adds	r2, #174	; 0xae
 800d126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d12a:	689b      	ldr	r3, [r3, #8]
 800d12c:	6839      	ldr	r1, [r7, #0]
 800d12e:	6878      	ldr	r0, [r7, #4]
 800d130:	4798      	blx	r3
 800d132:	4603      	mov	r3, r0
 800d134:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d136:	e004      	b.n	800d142 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d138:	2303      	movs	r3, #3
 800d13a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d13c:	e001      	b.n	800d142 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d13e:	2303      	movs	r3, #3
 800d140:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d142:	683b      	ldr	r3, [r7, #0]
 800d144:	88db      	ldrh	r3, [r3, #6]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d110      	bne.n	800d16c <USBD_StdItfReq+0xc0>
 800d14a:	7bfb      	ldrb	r3, [r7, #15]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d10d      	bne.n	800d16c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d150:	6878      	ldr	r0, [r7, #4]
 800d152:	f000 fdc7 	bl	800dce4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d156:	e009      	b.n	800d16c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d158:	6839      	ldr	r1, [r7, #0]
 800d15a:	6878      	ldr	r0, [r7, #4]
 800d15c:	f000 fcf7 	bl	800db4e <USBD_CtlError>
          break;
 800d160:	e004      	b.n	800d16c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d162:	6839      	ldr	r1, [r7, #0]
 800d164:	6878      	ldr	r0, [r7, #4]
 800d166:	f000 fcf2 	bl	800db4e <USBD_CtlError>
          break;
 800d16a:	e000      	b.n	800d16e <USBD_StdItfReq+0xc2>
          break;
 800d16c:	bf00      	nop
      }
      break;
 800d16e:	e004      	b.n	800d17a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d170:	6839      	ldr	r1, [r7, #0]
 800d172:	6878      	ldr	r0, [r7, #4]
 800d174:	f000 fceb 	bl	800db4e <USBD_CtlError>
      break;
 800d178:	bf00      	nop
  }

  return ret;
 800d17a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d17c:	4618      	mov	r0, r3
 800d17e:	3710      	adds	r7, #16
 800d180:	46bd      	mov	sp, r7
 800d182:	bd80      	pop	{r7, pc}

0800d184 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d184:	b580      	push	{r7, lr}
 800d186:	b084      	sub	sp, #16
 800d188:	af00      	add	r7, sp, #0
 800d18a:	6078      	str	r0, [r7, #4]
 800d18c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d18e:	2300      	movs	r3, #0
 800d190:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d192:	683b      	ldr	r3, [r7, #0]
 800d194:	889b      	ldrh	r3, [r3, #4]
 800d196:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d198:	683b      	ldr	r3, [r7, #0]
 800d19a:	781b      	ldrb	r3, [r3, #0]
 800d19c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d1a0:	2b40      	cmp	r3, #64	; 0x40
 800d1a2:	d007      	beq.n	800d1b4 <USBD_StdEPReq+0x30>
 800d1a4:	2b40      	cmp	r3, #64	; 0x40
 800d1a6:	f200 817f 	bhi.w	800d4a8 <USBD_StdEPReq+0x324>
 800d1aa:	2b00      	cmp	r3, #0
 800d1ac:	d02a      	beq.n	800d204 <USBD_StdEPReq+0x80>
 800d1ae:	2b20      	cmp	r3, #32
 800d1b0:	f040 817a 	bne.w	800d4a8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d1b4:	7bbb      	ldrb	r3, [r7, #14]
 800d1b6:	4619      	mov	r1, r3
 800d1b8:	6878      	ldr	r0, [r7, #4]
 800d1ba:	f7ff fe83 	bl	800cec4 <USBD_CoreFindEP>
 800d1be:	4603      	mov	r3, r0
 800d1c0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d1c2:	7b7b      	ldrb	r3, [r7, #13]
 800d1c4:	2bff      	cmp	r3, #255	; 0xff
 800d1c6:	f000 8174 	beq.w	800d4b2 <USBD_StdEPReq+0x32e>
 800d1ca:	7b7b      	ldrb	r3, [r7, #13]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	f040 8170 	bne.w	800d4b2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d1d2:	7b7a      	ldrb	r2, [r7, #13]
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d1da:	7b7a      	ldrb	r2, [r7, #13]
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	32ae      	adds	r2, #174	; 0xae
 800d1e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1e4:	689b      	ldr	r3, [r3, #8]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	f000 8163 	beq.w	800d4b2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d1ec:	7b7a      	ldrb	r2, [r7, #13]
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	32ae      	adds	r2, #174	; 0xae
 800d1f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1f6:	689b      	ldr	r3, [r3, #8]
 800d1f8:	6839      	ldr	r1, [r7, #0]
 800d1fa:	6878      	ldr	r0, [r7, #4]
 800d1fc:	4798      	blx	r3
 800d1fe:	4603      	mov	r3, r0
 800d200:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d202:	e156      	b.n	800d4b2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d204:	683b      	ldr	r3, [r7, #0]
 800d206:	785b      	ldrb	r3, [r3, #1]
 800d208:	2b03      	cmp	r3, #3
 800d20a:	d008      	beq.n	800d21e <USBD_StdEPReq+0x9a>
 800d20c:	2b03      	cmp	r3, #3
 800d20e:	f300 8145 	bgt.w	800d49c <USBD_StdEPReq+0x318>
 800d212:	2b00      	cmp	r3, #0
 800d214:	f000 809b 	beq.w	800d34e <USBD_StdEPReq+0x1ca>
 800d218:	2b01      	cmp	r3, #1
 800d21a:	d03c      	beq.n	800d296 <USBD_StdEPReq+0x112>
 800d21c:	e13e      	b.n	800d49c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d224:	b2db      	uxtb	r3, r3
 800d226:	2b02      	cmp	r3, #2
 800d228:	d002      	beq.n	800d230 <USBD_StdEPReq+0xac>
 800d22a:	2b03      	cmp	r3, #3
 800d22c:	d016      	beq.n	800d25c <USBD_StdEPReq+0xd8>
 800d22e:	e02c      	b.n	800d28a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d230:	7bbb      	ldrb	r3, [r7, #14]
 800d232:	2b00      	cmp	r3, #0
 800d234:	d00d      	beq.n	800d252 <USBD_StdEPReq+0xce>
 800d236:	7bbb      	ldrb	r3, [r7, #14]
 800d238:	2b80      	cmp	r3, #128	; 0x80
 800d23a:	d00a      	beq.n	800d252 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d23c:	7bbb      	ldrb	r3, [r7, #14]
 800d23e:	4619      	mov	r1, r3
 800d240:	6878      	ldr	r0, [r7, #4]
 800d242:	f002 fbd1 	bl	800f9e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d246:	2180      	movs	r1, #128	; 0x80
 800d248:	6878      	ldr	r0, [r7, #4]
 800d24a:	f002 fbcd 	bl	800f9e8 <USBD_LL_StallEP>
 800d24e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d250:	e020      	b.n	800d294 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d252:	6839      	ldr	r1, [r7, #0]
 800d254:	6878      	ldr	r0, [r7, #4]
 800d256:	f000 fc7a 	bl	800db4e <USBD_CtlError>
              break;
 800d25a:	e01b      	b.n	800d294 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d25c:	683b      	ldr	r3, [r7, #0]
 800d25e:	885b      	ldrh	r3, [r3, #2]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d10e      	bne.n	800d282 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d264:	7bbb      	ldrb	r3, [r7, #14]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d00b      	beq.n	800d282 <USBD_StdEPReq+0xfe>
 800d26a:	7bbb      	ldrb	r3, [r7, #14]
 800d26c:	2b80      	cmp	r3, #128	; 0x80
 800d26e:	d008      	beq.n	800d282 <USBD_StdEPReq+0xfe>
 800d270:	683b      	ldr	r3, [r7, #0]
 800d272:	88db      	ldrh	r3, [r3, #6]
 800d274:	2b00      	cmp	r3, #0
 800d276:	d104      	bne.n	800d282 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d278:	7bbb      	ldrb	r3, [r7, #14]
 800d27a:	4619      	mov	r1, r3
 800d27c:	6878      	ldr	r0, [r7, #4]
 800d27e:	f002 fbb3 	bl	800f9e8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d282:	6878      	ldr	r0, [r7, #4]
 800d284:	f000 fd2e 	bl	800dce4 <USBD_CtlSendStatus>

              break;
 800d288:	e004      	b.n	800d294 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d28a:	6839      	ldr	r1, [r7, #0]
 800d28c:	6878      	ldr	r0, [r7, #4]
 800d28e:	f000 fc5e 	bl	800db4e <USBD_CtlError>
              break;
 800d292:	bf00      	nop
          }
          break;
 800d294:	e107      	b.n	800d4a6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d29c:	b2db      	uxtb	r3, r3
 800d29e:	2b02      	cmp	r3, #2
 800d2a0:	d002      	beq.n	800d2a8 <USBD_StdEPReq+0x124>
 800d2a2:	2b03      	cmp	r3, #3
 800d2a4:	d016      	beq.n	800d2d4 <USBD_StdEPReq+0x150>
 800d2a6:	e04b      	b.n	800d340 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d2a8:	7bbb      	ldrb	r3, [r7, #14]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d00d      	beq.n	800d2ca <USBD_StdEPReq+0x146>
 800d2ae:	7bbb      	ldrb	r3, [r7, #14]
 800d2b0:	2b80      	cmp	r3, #128	; 0x80
 800d2b2:	d00a      	beq.n	800d2ca <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d2b4:	7bbb      	ldrb	r3, [r7, #14]
 800d2b6:	4619      	mov	r1, r3
 800d2b8:	6878      	ldr	r0, [r7, #4]
 800d2ba:	f002 fb95 	bl	800f9e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d2be:	2180      	movs	r1, #128	; 0x80
 800d2c0:	6878      	ldr	r0, [r7, #4]
 800d2c2:	f002 fb91 	bl	800f9e8 <USBD_LL_StallEP>
 800d2c6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d2c8:	e040      	b.n	800d34c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d2ca:	6839      	ldr	r1, [r7, #0]
 800d2cc:	6878      	ldr	r0, [r7, #4]
 800d2ce:	f000 fc3e 	bl	800db4e <USBD_CtlError>
              break;
 800d2d2:	e03b      	b.n	800d34c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d2d4:	683b      	ldr	r3, [r7, #0]
 800d2d6:	885b      	ldrh	r3, [r3, #2]
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	d136      	bne.n	800d34a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d2dc:	7bbb      	ldrb	r3, [r7, #14]
 800d2de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d004      	beq.n	800d2f0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d2e6:	7bbb      	ldrb	r3, [r7, #14]
 800d2e8:	4619      	mov	r1, r3
 800d2ea:	6878      	ldr	r0, [r7, #4]
 800d2ec:	f002 fb9b 	bl	800fa26 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d2f0:	6878      	ldr	r0, [r7, #4]
 800d2f2:	f000 fcf7 	bl	800dce4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d2f6:	7bbb      	ldrb	r3, [r7, #14]
 800d2f8:	4619      	mov	r1, r3
 800d2fa:	6878      	ldr	r0, [r7, #4]
 800d2fc:	f7ff fde2 	bl	800cec4 <USBD_CoreFindEP>
 800d300:	4603      	mov	r3, r0
 800d302:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d304:	7b7b      	ldrb	r3, [r7, #13]
 800d306:	2bff      	cmp	r3, #255	; 0xff
 800d308:	d01f      	beq.n	800d34a <USBD_StdEPReq+0x1c6>
 800d30a:	7b7b      	ldrb	r3, [r7, #13]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d11c      	bne.n	800d34a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d310:	7b7a      	ldrb	r2, [r7, #13]
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d318:	7b7a      	ldrb	r2, [r7, #13]
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	32ae      	adds	r2, #174	; 0xae
 800d31e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d322:	689b      	ldr	r3, [r3, #8]
 800d324:	2b00      	cmp	r3, #0
 800d326:	d010      	beq.n	800d34a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d328:	7b7a      	ldrb	r2, [r7, #13]
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	32ae      	adds	r2, #174	; 0xae
 800d32e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d332:	689b      	ldr	r3, [r3, #8]
 800d334:	6839      	ldr	r1, [r7, #0]
 800d336:	6878      	ldr	r0, [r7, #4]
 800d338:	4798      	blx	r3
 800d33a:	4603      	mov	r3, r0
 800d33c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d33e:	e004      	b.n	800d34a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d340:	6839      	ldr	r1, [r7, #0]
 800d342:	6878      	ldr	r0, [r7, #4]
 800d344:	f000 fc03 	bl	800db4e <USBD_CtlError>
              break;
 800d348:	e000      	b.n	800d34c <USBD_StdEPReq+0x1c8>
              break;
 800d34a:	bf00      	nop
          }
          break;
 800d34c:	e0ab      	b.n	800d4a6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d354:	b2db      	uxtb	r3, r3
 800d356:	2b02      	cmp	r3, #2
 800d358:	d002      	beq.n	800d360 <USBD_StdEPReq+0x1dc>
 800d35a:	2b03      	cmp	r3, #3
 800d35c:	d032      	beq.n	800d3c4 <USBD_StdEPReq+0x240>
 800d35e:	e097      	b.n	800d490 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d360:	7bbb      	ldrb	r3, [r7, #14]
 800d362:	2b00      	cmp	r3, #0
 800d364:	d007      	beq.n	800d376 <USBD_StdEPReq+0x1f2>
 800d366:	7bbb      	ldrb	r3, [r7, #14]
 800d368:	2b80      	cmp	r3, #128	; 0x80
 800d36a:	d004      	beq.n	800d376 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d36c:	6839      	ldr	r1, [r7, #0]
 800d36e:	6878      	ldr	r0, [r7, #4]
 800d370:	f000 fbed 	bl	800db4e <USBD_CtlError>
                break;
 800d374:	e091      	b.n	800d49a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d376:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	da0b      	bge.n	800d396 <USBD_StdEPReq+0x212>
 800d37e:	7bbb      	ldrb	r3, [r7, #14]
 800d380:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d384:	4613      	mov	r3, r2
 800d386:	009b      	lsls	r3, r3, #2
 800d388:	4413      	add	r3, r2
 800d38a:	009b      	lsls	r3, r3, #2
 800d38c:	3310      	adds	r3, #16
 800d38e:	687a      	ldr	r2, [r7, #4]
 800d390:	4413      	add	r3, r2
 800d392:	3304      	adds	r3, #4
 800d394:	e00b      	b.n	800d3ae <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d396:	7bbb      	ldrb	r3, [r7, #14]
 800d398:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d39c:	4613      	mov	r3, r2
 800d39e:	009b      	lsls	r3, r3, #2
 800d3a0:	4413      	add	r3, r2
 800d3a2:	009b      	lsls	r3, r3, #2
 800d3a4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d3a8:	687a      	ldr	r2, [r7, #4]
 800d3aa:	4413      	add	r3, r2
 800d3ac:	3304      	adds	r3, #4
 800d3ae:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d3b0:	68bb      	ldr	r3, [r7, #8]
 800d3b2:	2200      	movs	r2, #0
 800d3b4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d3b6:	68bb      	ldr	r3, [r7, #8]
 800d3b8:	2202      	movs	r2, #2
 800d3ba:	4619      	mov	r1, r3
 800d3bc:	6878      	ldr	r0, [r7, #4]
 800d3be:	f000 fc37 	bl	800dc30 <USBD_CtlSendData>
              break;
 800d3c2:	e06a      	b.n	800d49a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d3c4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d3c8:	2b00      	cmp	r3, #0
 800d3ca:	da11      	bge.n	800d3f0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d3cc:	7bbb      	ldrb	r3, [r7, #14]
 800d3ce:	f003 020f 	and.w	r2, r3, #15
 800d3d2:	6879      	ldr	r1, [r7, #4]
 800d3d4:	4613      	mov	r3, r2
 800d3d6:	009b      	lsls	r3, r3, #2
 800d3d8:	4413      	add	r3, r2
 800d3da:	009b      	lsls	r3, r3, #2
 800d3dc:	440b      	add	r3, r1
 800d3de:	3324      	adds	r3, #36	; 0x24
 800d3e0:	881b      	ldrh	r3, [r3, #0]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d117      	bne.n	800d416 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d3e6:	6839      	ldr	r1, [r7, #0]
 800d3e8:	6878      	ldr	r0, [r7, #4]
 800d3ea:	f000 fbb0 	bl	800db4e <USBD_CtlError>
                  break;
 800d3ee:	e054      	b.n	800d49a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d3f0:	7bbb      	ldrb	r3, [r7, #14]
 800d3f2:	f003 020f 	and.w	r2, r3, #15
 800d3f6:	6879      	ldr	r1, [r7, #4]
 800d3f8:	4613      	mov	r3, r2
 800d3fa:	009b      	lsls	r3, r3, #2
 800d3fc:	4413      	add	r3, r2
 800d3fe:	009b      	lsls	r3, r3, #2
 800d400:	440b      	add	r3, r1
 800d402:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d406:	881b      	ldrh	r3, [r3, #0]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d104      	bne.n	800d416 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d40c:	6839      	ldr	r1, [r7, #0]
 800d40e:	6878      	ldr	r0, [r7, #4]
 800d410:	f000 fb9d 	bl	800db4e <USBD_CtlError>
                  break;
 800d414:	e041      	b.n	800d49a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d416:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	da0b      	bge.n	800d436 <USBD_StdEPReq+0x2b2>
 800d41e:	7bbb      	ldrb	r3, [r7, #14]
 800d420:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d424:	4613      	mov	r3, r2
 800d426:	009b      	lsls	r3, r3, #2
 800d428:	4413      	add	r3, r2
 800d42a:	009b      	lsls	r3, r3, #2
 800d42c:	3310      	adds	r3, #16
 800d42e:	687a      	ldr	r2, [r7, #4]
 800d430:	4413      	add	r3, r2
 800d432:	3304      	adds	r3, #4
 800d434:	e00b      	b.n	800d44e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d436:	7bbb      	ldrb	r3, [r7, #14]
 800d438:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d43c:	4613      	mov	r3, r2
 800d43e:	009b      	lsls	r3, r3, #2
 800d440:	4413      	add	r3, r2
 800d442:	009b      	lsls	r3, r3, #2
 800d444:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d448:	687a      	ldr	r2, [r7, #4]
 800d44a:	4413      	add	r3, r2
 800d44c:	3304      	adds	r3, #4
 800d44e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d450:	7bbb      	ldrb	r3, [r7, #14]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d002      	beq.n	800d45c <USBD_StdEPReq+0x2d8>
 800d456:	7bbb      	ldrb	r3, [r7, #14]
 800d458:	2b80      	cmp	r3, #128	; 0x80
 800d45a:	d103      	bne.n	800d464 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d45c:	68bb      	ldr	r3, [r7, #8]
 800d45e:	2200      	movs	r2, #0
 800d460:	601a      	str	r2, [r3, #0]
 800d462:	e00e      	b.n	800d482 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d464:	7bbb      	ldrb	r3, [r7, #14]
 800d466:	4619      	mov	r1, r3
 800d468:	6878      	ldr	r0, [r7, #4]
 800d46a:	f002 fafb 	bl	800fa64 <USBD_LL_IsStallEP>
 800d46e:	4603      	mov	r3, r0
 800d470:	2b00      	cmp	r3, #0
 800d472:	d003      	beq.n	800d47c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d474:	68bb      	ldr	r3, [r7, #8]
 800d476:	2201      	movs	r2, #1
 800d478:	601a      	str	r2, [r3, #0]
 800d47a:	e002      	b.n	800d482 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d47c:	68bb      	ldr	r3, [r7, #8]
 800d47e:	2200      	movs	r2, #0
 800d480:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d482:	68bb      	ldr	r3, [r7, #8]
 800d484:	2202      	movs	r2, #2
 800d486:	4619      	mov	r1, r3
 800d488:	6878      	ldr	r0, [r7, #4]
 800d48a:	f000 fbd1 	bl	800dc30 <USBD_CtlSendData>
              break;
 800d48e:	e004      	b.n	800d49a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d490:	6839      	ldr	r1, [r7, #0]
 800d492:	6878      	ldr	r0, [r7, #4]
 800d494:	f000 fb5b 	bl	800db4e <USBD_CtlError>
              break;
 800d498:	bf00      	nop
          }
          break;
 800d49a:	e004      	b.n	800d4a6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800d49c:	6839      	ldr	r1, [r7, #0]
 800d49e:	6878      	ldr	r0, [r7, #4]
 800d4a0:	f000 fb55 	bl	800db4e <USBD_CtlError>
          break;
 800d4a4:	bf00      	nop
      }
      break;
 800d4a6:	e005      	b.n	800d4b4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800d4a8:	6839      	ldr	r1, [r7, #0]
 800d4aa:	6878      	ldr	r0, [r7, #4]
 800d4ac:	f000 fb4f 	bl	800db4e <USBD_CtlError>
      break;
 800d4b0:	e000      	b.n	800d4b4 <USBD_StdEPReq+0x330>
      break;
 800d4b2:	bf00      	nop
  }

  return ret;
 800d4b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4b6:	4618      	mov	r0, r3
 800d4b8:	3710      	adds	r7, #16
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	bd80      	pop	{r7, pc}
	...

0800d4c0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b084      	sub	sp, #16
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
 800d4c8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d4ca:	2300      	movs	r3, #0
 800d4cc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d4d2:	2300      	movs	r3, #0
 800d4d4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d4d6:	683b      	ldr	r3, [r7, #0]
 800d4d8:	885b      	ldrh	r3, [r3, #2]
 800d4da:	0a1b      	lsrs	r3, r3, #8
 800d4dc:	b29b      	uxth	r3, r3
 800d4de:	3b01      	subs	r3, #1
 800d4e0:	2b06      	cmp	r3, #6
 800d4e2:	f200 8128 	bhi.w	800d736 <USBD_GetDescriptor+0x276>
 800d4e6:	a201      	add	r2, pc, #4	; (adr r2, 800d4ec <USBD_GetDescriptor+0x2c>)
 800d4e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d4ec:	0800d509 	.word	0x0800d509
 800d4f0:	0800d521 	.word	0x0800d521
 800d4f4:	0800d561 	.word	0x0800d561
 800d4f8:	0800d737 	.word	0x0800d737
 800d4fc:	0800d737 	.word	0x0800d737
 800d500:	0800d6d7 	.word	0x0800d6d7
 800d504:	0800d703 	.word	0x0800d703
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d508:	687b      	ldr	r3, [r7, #4]
 800d50a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d50e:	681b      	ldr	r3, [r3, #0]
 800d510:	687a      	ldr	r2, [r7, #4]
 800d512:	7c12      	ldrb	r2, [r2, #16]
 800d514:	f107 0108 	add.w	r1, r7, #8
 800d518:	4610      	mov	r0, r2
 800d51a:	4798      	blx	r3
 800d51c:	60f8      	str	r0, [r7, #12]
      break;
 800d51e:	e112      	b.n	800d746 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	7c1b      	ldrb	r3, [r3, #16]
 800d524:	2b00      	cmp	r3, #0
 800d526:	d10d      	bne.n	800d544 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d52e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d530:	f107 0208 	add.w	r2, r7, #8
 800d534:	4610      	mov	r0, r2
 800d536:	4798      	blx	r3
 800d538:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	3301      	adds	r3, #1
 800d53e:	2202      	movs	r2, #2
 800d540:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d542:	e100      	b.n	800d746 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d54a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d54c:	f107 0208 	add.w	r2, r7, #8
 800d550:	4610      	mov	r0, r2
 800d552:	4798      	blx	r3
 800d554:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	3301      	adds	r3, #1
 800d55a:	2202      	movs	r2, #2
 800d55c:	701a      	strb	r2, [r3, #0]
      break;
 800d55e:	e0f2      	b.n	800d746 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d560:	683b      	ldr	r3, [r7, #0]
 800d562:	885b      	ldrh	r3, [r3, #2]
 800d564:	b2db      	uxtb	r3, r3
 800d566:	2b05      	cmp	r3, #5
 800d568:	f200 80ac 	bhi.w	800d6c4 <USBD_GetDescriptor+0x204>
 800d56c:	a201      	add	r2, pc, #4	; (adr r2, 800d574 <USBD_GetDescriptor+0xb4>)
 800d56e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d572:	bf00      	nop
 800d574:	0800d58d 	.word	0x0800d58d
 800d578:	0800d5c1 	.word	0x0800d5c1
 800d57c:	0800d5f5 	.word	0x0800d5f5
 800d580:	0800d629 	.word	0x0800d629
 800d584:	0800d65d 	.word	0x0800d65d
 800d588:	0800d691 	.word	0x0800d691
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d592:	685b      	ldr	r3, [r3, #4]
 800d594:	2b00      	cmp	r3, #0
 800d596:	d00b      	beq.n	800d5b0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d59e:	685b      	ldr	r3, [r3, #4]
 800d5a0:	687a      	ldr	r2, [r7, #4]
 800d5a2:	7c12      	ldrb	r2, [r2, #16]
 800d5a4:	f107 0108 	add.w	r1, r7, #8
 800d5a8:	4610      	mov	r0, r2
 800d5aa:	4798      	blx	r3
 800d5ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d5ae:	e091      	b.n	800d6d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d5b0:	6839      	ldr	r1, [r7, #0]
 800d5b2:	6878      	ldr	r0, [r7, #4]
 800d5b4:	f000 facb 	bl	800db4e <USBD_CtlError>
            err++;
 800d5b8:	7afb      	ldrb	r3, [r7, #11]
 800d5ba:	3301      	adds	r3, #1
 800d5bc:	72fb      	strb	r3, [r7, #11]
          break;
 800d5be:	e089      	b.n	800d6d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d5c6:	689b      	ldr	r3, [r3, #8]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d00b      	beq.n	800d5e4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d5d2:	689b      	ldr	r3, [r3, #8]
 800d5d4:	687a      	ldr	r2, [r7, #4]
 800d5d6:	7c12      	ldrb	r2, [r2, #16]
 800d5d8:	f107 0108 	add.w	r1, r7, #8
 800d5dc:	4610      	mov	r0, r2
 800d5de:	4798      	blx	r3
 800d5e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d5e2:	e077      	b.n	800d6d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d5e4:	6839      	ldr	r1, [r7, #0]
 800d5e6:	6878      	ldr	r0, [r7, #4]
 800d5e8:	f000 fab1 	bl	800db4e <USBD_CtlError>
            err++;
 800d5ec:	7afb      	ldrb	r3, [r7, #11]
 800d5ee:	3301      	adds	r3, #1
 800d5f0:	72fb      	strb	r3, [r7, #11]
          break;
 800d5f2:	e06f      	b.n	800d6d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d5fa:	68db      	ldr	r3, [r3, #12]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d00b      	beq.n	800d618 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d606:	68db      	ldr	r3, [r3, #12]
 800d608:	687a      	ldr	r2, [r7, #4]
 800d60a:	7c12      	ldrb	r2, [r2, #16]
 800d60c:	f107 0108 	add.w	r1, r7, #8
 800d610:	4610      	mov	r0, r2
 800d612:	4798      	blx	r3
 800d614:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d616:	e05d      	b.n	800d6d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d618:	6839      	ldr	r1, [r7, #0]
 800d61a:	6878      	ldr	r0, [r7, #4]
 800d61c:	f000 fa97 	bl	800db4e <USBD_CtlError>
            err++;
 800d620:	7afb      	ldrb	r3, [r7, #11]
 800d622:	3301      	adds	r3, #1
 800d624:	72fb      	strb	r3, [r7, #11]
          break;
 800d626:	e055      	b.n	800d6d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d62e:	691b      	ldr	r3, [r3, #16]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d00b      	beq.n	800d64c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d63a:	691b      	ldr	r3, [r3, #16]
 800d63c:	687a      	ldr	r2, [r7, #4]
 800d63e:	7c12      	ldrb	r2, [r2, #16]
 800d640:	f107 0108 	add.w	r1, r7, #8
 800d644:	4610      	mov	r0, r2
 800d646:	4798      	blx	r3
 800d648:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d64a:	e043      	b.n	800d6d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d64c:	6839      	ldr	r1, [r7, #0]
 800d64e:	6878      	ldr	r0, [r7, #4]
 800d650:	f000 fa7d 	bl	800db4e <USBD_CtlError>
            err++;
 800d654:	7afb      	ldrb	r3, [r7, #11]
 800d656:	3301      	adds	r3, #1
 800d658:	72fb      	strb	r3, [r7, #11]
          break;
 800d65a:	e03b      	b.n	800d6d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d662:	695b      	ldr	r3, [r3, #20]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d00b      	beq.n	800d680 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d66e:	695b      	ldr	r3, [r3, #20]
 800d670:	687a      	ldr	r2, [r7, #4]
 800d672:	7c12      	ldrb	r2, [r2, #16]
 800d674:	f107 0108 	add.w	r1, r7, #8
 800d678:	4610      	mov	r0, r2
 800d67a:	4798      	blx	r3
 800d67c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d67e:	e029      	b.n	800d6d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d680:	6839      	ldr	r1, [r7, #0]
 800d682:	6878      	ldr	r0, [r7, #4]
 800d684:	f000 fa63 	bl	800db4e <USBD_CtlError>
            err++;
 800d688:	7afb      	ldrb	r3, [r7, #11]
 800d68a:	3301      	adds	r3, #1
 800d68c:	72fb      	strb	r3, [r7, #11]
          break;
 800d68e:	e021      	b.n	800d6d4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d696:	699b      	ldr	r3, [r3, #24]
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d00b      	beq.n	800d6b4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d6a2:	699b      	ldr	r3, [r3, #24]
 800d6a4:	687a      	ldr	r2, [r7, #4]
 800d6a6:	7c12      	ldrb	r2, [r2, #16]
 800d6a8:	f107 0108 	add.w	r1, r7, #8
 800d6ac:	4610      	mov	r0, r2
 800d6ae:	4798      	blx	r3
 800d6b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d6b2:	e00f      	b.n	800d6d4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d6b4:	6839      	ldr	r1, [r7, #0]
 800d6b6:	6878      	ldr	r0, [r7, #4]
 800d6b8:	f000 fa49 	bl	800db4e <USBD_CtlError>
            err++;
 800d6bc:	7afb      	ldrb	r3, [r7, #11]
 800d6be:	3301      	adds	r3, #1
 800d6c0:	72fb      	strb	r3, [r7, #11]
          break;
 800d6c2:	e007      	b.n	800d6d4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d6c4:	6839      	ldr	r1, [r7, #0]
 800d6c6:	6878      	ldr	r0, [r7, #4]
 800d6c8:	f000 fa41 	bl	800db4e <USBD_CtlError>
          err++;
 800d6cc:	7afb      	ldrb	r3, [r7, #11]
 800d6ce:	3301      	adds	r3, #1
 800d6d0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d6d2:	bf00      	nop
      }
      break;
 800d6d4:	e037      	b.n	800d746 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	7c1b      	ldrb	r3, [r3, #16]
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d109      	bne.n	800d6f2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6e6:	f107 0208 	add.w	r2, r7, #8
 800d6ea:	4610      	mov	r0, r2
 800d6ec:	4798      	blx	r3
 800d6ee:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d6f0:	e029      	b.n	800d746 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d6f2:	6839      	ldr	r1, [r7, #0]
 800d6f4:	6878      	ldr	r0, [r7, #4]
 800d6f6:	f000 fa2a 	bl	800db4e <USBD_CtlError>
        err++;
 800d6fa:	7afb      	ldrb	r3, [r7, #11]
 800d6fc:	3301      	adds	r3, #1
 800d6fe:	72fb      	strb	r3, [r7, #11]
      break;
 800d700:	e021      	b.n	800d746 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	7c1b      	ldrb	r3, [r3, #16]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d10d      	bne.n	800d726 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d712:	f107 0208 	add.w	r2, r7, #8
 800d716:	4610      	mov	r0, r2
 800d718:	4798      	blx	r3
 800d71a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	3301      	adds	r3, #1
 800d720:	2207      	movs	r2, #7
 800d722:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d724:	e00f      	b.n	800d746 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d726:	6839      	ldr	r1, [r7, #0]
 800d728:	6878      	ldr	r0, [r7, #4]
 800d72a:	f000 fa10 	bl	800db4e <USBD_CtlError>
        err++;
 800d72e:	7afb      	ldrb	r3, [r7, #11]
 800d730:	3301      	adds	r3, #1
 800d732:	72fb      	strb	r3, [r7, #11]
      break;
 800d734:	e007      	b.n	800d746 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d736:	6839      	ldr	r1, [r7, #0]
 800d738:	6878      	ldr	r0, [r7, #4]
 800d73a:	f000 fa08 	bl	800db4e <USBD_CtlError>
      err++;
 800d73e:	7afb      	ldrb	r3, [r7, #11]
 800d740:	3301      	adds	r3, #1
 800d742:	72fb      	strb	r3, [r7, #11]
      break;
 800d744:	bf00      	nop
  }

  if (err != 0U)
 800d746:	7afb      	ldrb	r3, [r7, #11]
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d11e      	bne.n	800d78a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d74c:	683b      	ldr	r3, [r7, #0]
 800d74e:	88db      	ldrh	r3, [r3, #6]
 800d750:	2b00      	cmp	r3, #0
 800d752:	d016      	beq.n	800d782 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d754:	893b      	ldrh	r3, [r7, #8]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d00e      	beq.n	800d778 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d75a:	683b      	ldr	r3, [r7, #0]
 800d75c:	88da      	ldrh	r2, [r3, #6]
 800d75e:	893b      	ldrh	r3, [r7, #8]
 800d760:	4293      	cmp	r3, r2
 800d762:	bf28      	it	cs
 800d764:	4613      	movcs	r3, r2
 800d766:	b29b      	uxth	r3, r3
 800d768:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d76a:	893b      	ldrh	r3, [r7, #8]
 800d76c:	461a      	mov	r2, r3
 800d76e:	68f9      	ldr	r1, [r7, #12]
 800d770:	6878      	ldr	r0, [r7, #4]
 800d772:	f000 fa5d 	bl	800dc30 <USBD_CtlSendData>
 800d776:	e009      	b.n	800d78c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d778:	6839      	ldr	r1, [r7, #0]
 800d77a:	6878      	ldr	r0, [r7, #4]
 800d77c:	f000 f9e7 	bl	800db4e <USBD_CtlError>
 800d780:	e004      	b.n	800d78c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d782:	6878      	ldr	r0, [r7, #4]
 800d784:	f000 faae 	bl	800dce4 <USBD_CtlSendStatus>
 800d788:	e000      	b.n	800d78c <USBD_GetDescriptor+0x2cc>
    return;
 800d78a:	bf00      	nop
  }
}
 800d78c:	3710      	adds	r7, #16
 800d78e:	46bd      	mov	sp, r7
 800d790:	bd80      	pop	{r7, pc}
 800d792:	bf00      	nop

0800d794 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b084      	sub	sp, #16
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]
 800d79c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d79e:	683b      	ldr	r3, [r7, #0]
 800d7a0:	889b      	ldrh	r3, [r3, #4]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d131      	bne.n	800d80a <USBD_SetAddress+0x76>
 800d7a6:	683b      	ldr	r3, [r7, #0]
 800d7a8:	88db      	ldrh	r3, [r3, #6]
 800d7aa:	2b00      	cmp	r3, #0
 800d7ac:	d12d      	bne.n	800d80a <USBD_SetAddress+0x76>
 800d7ae:	683b      	ldr	r3, [r7, #0]
 800d7b0:	885b      	ldrh	r3, [r3, #2]
 800d7b2:	2b7f      	cmp	r3, #127	; 0x7f
 800d7b4:	d829      	bhi.n	800d80a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d7b6:	683b      	ldr	r3, [r7, #0]
 800d7b8:	885b      	ldrh	r3, [r3, #2]
 800d7ba:	b2db      	uxtb	r3, r3
 800d7bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d7c0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d7c8:	b2db      	uxtb	r3, r3
 800d7ca:	2b03      	cmp	r3, #3
 800d7cc:	d104      	bne.n	800d7d8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d7ce:	6839      	ldr	r1, [r7, #0]
 800d7d0:	6878      	ldr	r0, [r7, #4]
 800d7d2:	f000 f9bc 	bl	800db4e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7d6:	e01d      	b.n	800d814 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	7bfa      	ldrb	r2, [r7, #15]
 800d7dc:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d7e0:	7bfb      	ldrb	r3, [r7, #15]
 800d7e2:	4619      	mov	r1, r3
 800d7e4:	6878      	ldr	r0, [r7, #4]
 800d7e6:	f002 f969 	bl	800fabc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d7ea:	6878      	ldr	r0, [r7, #4]
 800d7ec:	f000 fa7a 	bl	800dce4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d7f0:	7bfb      	ldrb	r3, [r7, #15]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d004      	beq.n	800d800 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	2202      	movs	r2, #2
 800d7fa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d7fe:	e009      	b.n	800d814 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	2201      	movs	r2, #1
 800d804:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d808:	e004      	b.n	800d814 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d80a:	6839      	ldr	r1, [r7, #0]
 800d80c:	6878      	ldr	r0, [r7, #4]
 800d80e:	f000 f99e 	bl	800db4e <USBD_CtlError>
  }
}
 800d812:	bf00      	nop
 800d814:	bf00      	nop
 800d816:	3710      	adds	r7, #16
 800d818:	46bd      	mov	sp, r7
 800d81a:	bd80      	pop	{r7, pc}

0800d81c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b084      	sub	sp, #16
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
 800d824:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d826:	2300      	movs	r3, #0
 800d828:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d82a:	683b      	ldr	r3, [r7, #0]
 800d82c:	885b      	ldrh	r3, [r3, #2]
 800d82e:	b2da      	uxtb	r2, r3
 800d830:	4b4e      	ldr	r3, [pc, #312]	; (800d96c <USBD_SetConfig+0x150>)
 800d832:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d834:	4b4d      	ldr	r3, [pc, #308]	; (800d96c <USBD_SetConfig+0x150>)
 800d836:	781b      	ldrb	r3, [r3, #0]
 800d838:	2b01      	cmp	r3, #1
 800d83a:	d905      	bls.n	800d848 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d83c:	6839      	ldr	r1, [r7, #0]
 800d83e:	6878      	ldr	r0, [r7, #4]
 800d840:	f000 f985 	bl	800db4e <USBD_CtlError>
    return USBD_FAIL;
 800d844:	2303      	movs	r3, #3
 800d846:	e08c      	b.n	800d962 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d84e:	b2db      	uxtb	r3, r3
 800d850:	2b02      	cmp	r3, #2
 800d852:	d002      	beq.n	800d85a <USBD_SetConfig+0x3e>
 800d854:	2b03      	cmp	r3, #3
 800d856:	d029      	beq.n	800d8ac <USBD_SetConfig+0x90>
 800d858:	e075      	b.n	800d946 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d85a:	4b44      	ldr	r3, [pc, #272]	; (800d96c <USBD_SetConfig+0x150>)
 800d85c:	781b      	ldrb	r3, [r3, #0]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d020      	beq.n	800d8a4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d862:	4b42      	ldr	r3, [pc, #264]	; (800d96c <USBD_SetConfig+0x150>)
 800d864:	781b      	ldrb	r3, [r3, #0]
 800d866:	461a      	mov	r2, r3
 800d868:	687b      	ldr	r3, [r7, #4]
 800d86a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d86c:	4b3f      	ldr	r3, [pc, #252]	; (800d96c <USBD_SetConfig+0x150>)
 800d86e:	781b      	ldrb	r3, [r3, #0]
 800d870:	4619      	mov	r1, r3
 800d872:	6878      	ldr	r0, [r7, #4]
 800d874:	f7fe ffe1 	bl	800c83a <USBD_SetClassConfig>
 800d878:	4603      	mov	r3, r0
 800d87a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d87c:	7bfb      	ldrb	r3, [r7, #15]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d008      	beq.n	800d894 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d882:	6839      	ldr	r1, [r7, #0]
 800d884:	6878      	ldr	r0, [r7, #4]
 800d886:	f000 f962 	bl	800db4e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	2202      	movs	r2, #2
 800d88e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d892:	e065      	b.n	800d960 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d894:	6878      	ldr	r0, [r7, #4]
 800d896:	f000 fa25 	bl	800dce4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	2203      	movs	r2, #3
 800d89e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d8a2:	e05d      	b.n	800d960 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d8a4:	6878      	ldr	r0, [r7, #4]
 800d8a6:	f000 fa1d 	bl	800dce4 <USBD_CtlSendStatus>
      break;
 800d8aa:	e059      	b.n	800d960 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d8ac:	4b2f      	ldr	r3, [pc, #188]	; (800d96c <USBD_SetConfig+0x150>)
 800d8ae:	781b      	ldrb	r3, [r3, #0]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d112      	bne.n	800d8da <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	2202      	movs	r2, #2
 800d8b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d8bc:	4b2b      	ldr	r3, [pc, #172]	; (800d96c <USBD_SetConfig+0x150>)
 800d8be:	781b      	ldrb	r3, [r3, #0]
 800d8c0:	461a      	mov	r2, r3
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d8c6:	4b29      	ldr	r3, [pc, #164]	; (800d96c <USBD_SetConfig+0x150>)
 800d8c8:	781b      	ldrb	r3, [r3, #0]
 800d8ca:	4619      	mov	r1, r3
 800d8cc:	6878      	ldr	r0, [r7, #4]
 800d8ce:	f7fe ffd0 	bl	800c872 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d8d2:	6878      	ldr	r0, [r7, #4]
 800d8d4:	f000 fa06 	bl	800dce4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d8d8:	e042      	b.n	800d960 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d8da:	4b24      	ldr	r3, [pc, #144]	; (800d96c <USBD_SetConfig+0x150>)
 800d8dc:	781b      	ldrb	r3, [r3, #0]
 800d8de:	461a      	mov	r2, r3
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	685b      	ldr	r3, [r3, #4]
 800d8e4:	429a      	cmp	r2, r3
 800d8e6:	d02a      	beq.n	800d93e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	685b      	ldr	r3, [r3, #4]
 800d8ec:	b2db      	uxtb	r3, r3
 800d8ee:	4619      	mov	r1, r3
 800d8f0:	6878      	ldr	r0, [r7, #4]
 800d8f2:	f7fe ffbe 	bl	800c872 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d8f6:	4b1d      	ldr	r3, [pc, #116]	; (800d96c <USBD_SetConfig+0x150>)
 800d8f8:	781b      	ldrb	r3, [r3, #0]
 800d8fa:	461a      	mov	r2, r3
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d900:	4b1a      	ldr	r3, [pc, #104]	; (800d96c <USBD_SetConfig+0x150>)
 800d902:	781b      	ldrb	r3, [r3, #0]
 800d904:	4619      	mov	r1, r3
 800d906:	6878      	ldr	r0, [r7, #4]
 800d908:	f7fe ff97 	bl	800c83a <USBD_SetClassConfig>
 800d90c:	4603      	mov	r3, r0
 800d90e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d910:	7bfb      	ldrb	r3, [r7, #15]
 800d912:	2b00      	cmp	r3, #0
 800d914:	d00f      	beq.n	800d936 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d916:	6839      	ldr	r1, [r7, #0]
 800d918:	6878      	ldr	r0, [r7, #4]
 800d91a:	f000 f918 	bl	800db4e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	685b      	ldr	r3, [r3, #4]
 800d922:	b2db      	uxtb	r3, r3
 800d924:	4619      	mov	r1, r3
 800d926:	6878      	ldr	r0, [r7, #4]
 800d928:	f7fe ffa3 	bl	800c872 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	2202      	movs	r2, #2
 800d930:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d934:	e014      	b.n	800d960 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d936:	6878      	ldr	r0, [r7, #4]
 800d938:	f000 f9d4 	bl	800dce4 <USBD_CtlSendStatus>
      break;
 800d93c:	e010      	b.n	800d960 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d93e:	6878      	ldr	r0, [r7, #4]
 800d940:	f000 f9d0 	bl	800dce4 <USBD_CtlSendStatus>
      break;
 800d944:	e00c      	b.n	800d960 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d946:	6839      	ldr	r1, [r7, #0]
 800d948:	6878      	ldr	r0, [r7, #4]
 800d94a:	f000 f900 	bl	800db4e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d94e:	4b07      	ldr	r3, [pc, #28]	; (800d96c <USBD_SetConfig+0x150>)
 800d950:	781b      	ldrb	r3, [r3, #0]
 800d952:	4619      	mov	r1, r3
 800d954:	6878      	ldr	r0, [r7, #4]
 800d956:	f7fe ff8c 	bl	800c872 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d95a:	2303      	movs	r3, #3
 800d95c:	73fb      	strb	r3, [r7, #15]
      break;
 800d95e:	bf00      	nop
  }

  return ret;
 800d960:	7bfb      	ldrb	r3, [r7, #15]
}
 800d962:	4618      	mov	r0, r3
 800d964:	3710      	adds	r7, #16
 800d966:	46bd      	mov	sp, r7
 800d968:	bd80      	pop	{r7, pc}
 800d96a:	bf00      	nop
 800d96c:	20000bcc 	.word	0x20000bcc

0800d970 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d970:	b580      	push	{r7, lr}
 800d972:	b082      	sub	sp, #8
 800d974:	af00      	add	r7, sp, #0
 800d976:	6078      	str	r0, [r7, #4]
 800d978:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d97a:	683b      	ldr	r3, [r7, #0]
 800d97c:	88db      	ldrh	r3, [r3, #6]
 800d97e:	2b01      	cmp	r3, #1
 800d980:	d004      	beq.n	800d98c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d982:	6839      	ldr	r1, [r7, #0]
 800d984:	6878      	ldr	r0, [r7, #4]
 800d986:	f000 f8e2 	bl	800db4e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d98a:	e023      	b.n	800d9d4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d992:	b2db      	uxtb	r3, r3
 800d994:	2b02      	cmp	r3, #2
 800d996:	dc02      	bgt.n	800d99e <USBD_GetConfig+0x2e>
 800d998:	2b00      	cmp	r3, #0
 800d99a:	dc03      	bgt.n	800d9a4 <USBD_GetConfig+0x34>
 800d99c:	e015      	b.n	800d9ca <USBD_GetConfig+0x5a>
 800d99e:	2b03      	cmp	r3, #3
 800d9a0:	d00b      	beq.n	800d9ba <USBD_GetConfig+0x4a>
 800d9a2:	e012      	b.n	800d9ca <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d9a4:	687b      	ldr	r3, [r7, #4]
 800d9a6:	2200      	movs	r2, #0
 800d9a8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	3308      	adds	r3, #8
 800d9ae:	2201      	movs	r2, #1
 800d9b0:	4619      	mov	r1, r3
 800d9b2:	6878      	ldr	r0, [r7, #4]
 800d9b4:	f000 f93c 	bl	800dc30 <USBD_CtlSendData>
        break;
 800d9b8:	e00c      	b.n	800d9d4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	3304      	adds	r3, #4
 800d9be:	2201      	movs	r2, #1
 800d9c0:	4619      	mov	r1, r3
 800d9c2:	6878      	ldr	r0, [r7, #4]
 800d9c4:	f000 f934 	bl	800dc30 <USBD_CtlSendData>
        break;
 800d9c8:	e004      	b.n	800d9d4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d9ca:	6839      	ldr	r1, [r7, #0]
 800d9cc:	6878      	ldr	r0, [r7, #4]
 800d9ce:	f000 f8be 	bl	800db4e <USBD_CtlError>
        break;
 800d9d2:	bf00      	nop
}
 800d9d4:	bf00      	nop
 800d9d6:	3708      	adds	r7, #8
 800d9d8:	46bd      	mov	sp, r7
 800d9da:	bd80      	pop	{r7, pc}

0800d9dc <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d9dc:	b580      	push	{r7, lr}
 800d9de:	b082      	sub	sp, #8
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
 800d9e4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d9ec:	b2db      	uxtb	r3, r3
 800d9ee:	3b01      	subs	r3, #1
 800d9f0:	2b02      	cmp	r3, #2
 800d9f2:	d81e      	bhi.n	800da32 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d9f4:	683b      	ldr	r3, [r7, #0]
 800d9f6:	88db      	ldrh	r3, [r3, #6]
 800d9f8:	2b02      	cmp	r3, #2
 800d9fa:	d004      	beq.n	800da06 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d9fc:	6839      	ldr	r1, [r7, #0]
 800d9fe:	6878      	ldr	r0, [r7, #4]
 800da00:	f000 f8a5 	bl	800db4e <USBD_CtlError>
        break;
 800da04:	e01a      	b.n	800da3c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	2201      	movs	r2, #1
 800da0a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800da12:	2b00      	cmp	r3, #0
 800da14:	d005      	beq.n	800da22 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	68db      	ldr	r3, [r3, #12]
 800da1a:	f043 0202 	orr.w	r2, r3, #2
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	330c      	adds	r3, #12
 800da26:	2202      	movs	r2, #2
 800da28:	4619      	mov	r1, r3
 800da2a:	6878      	ldr	r0, [r7, #4]
 800da2c:	f000 f900 	bl	800dc30 <USBD_CtlSendData>
      break;
 800da30:	e004      	b.n	800da3c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800da32:	6839      	ldr	r1, [r7, #0]
 800da34:	6878      	ldr	r0, [r7, #4]
 800da36:	f000 f88a 	bl	800db4e <USBD_CtlError>
      break;
 800da3a:	bf00      	nop
  }
}
 800da3c:	bf00      	nop
 800da3e:	3708      	adds	r7, #8
 800da40:	46bd      	mov	sp, r7
 800da42:	bd80      	pop	{r7, pc}

0800da44 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b082      	sub	sp, #8
 800da48:	af00      	add	r7, sp, #0
 800da4a:	6078      	str	r0, [r7, #4]
 800da4c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800da4e:	683b      	ldr	r3, [r7, #0]
 800da50:	885b      	ldrh	r3, [r3, #2]
 800da52:	2b01      	cmp	r3, #1
 800da54:	d107      	bne.n	800da66 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	2201      	movs	r2, #1
 800da5a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800da5e:	6878      	ldr	r0, [r7, #4]
 800da60:	f000 f940 	bl	800dce4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800da64:	e013      	b.n	800da8e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800da66:	683b      	ldr	r3, [r7, #0]
 800da68:	885b      	ldrh	r3, [r3, #2]
 800da6a:	2b02      	cmp	r3, #2
 800da6c:	d10b      	bne.n	800da86 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800da6e:	683b      	ldr	r3, [r7, #0]
 800da70:	889b      	ldrh	r3, [r3, #4]
 800da72:	0a1b      	lsrs	r3, r3, #8
 800da74:	b29b      	uxth	r3, r3
 800da76:	b2da      	uxtb	r2, r3
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800da7e:	6878      	ldr	r0, [r7, #4]
 800da80:	f000 f930 	bl	800dce4 <USBD_CtlSendStatus>
}
 800da84:	e003      	b.n	800da8e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800da86:	6839      	ldr	r1, [r7, #0]
 800da88:	6878      	ldr	r0, [r7, #4]
 800da8a:	f000 f860 	bl	800db4e <USBD_CtlError>
}
 800da8e:	bf00      	nop
 800da90:	3708      	adds	r7, #8
 800da92:	46bd      	mov	sp, r7
 800da94:	bd80      	pop	{r7, pc}

0800da96 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da96:	b580      	push	{r7, lr}
 800da98:	b082      	sub	sp, #8
 800da9a:	af00      	add	r7, sp, #0
 800da9c:	6078      	str	r0, [r7, #4]
 800da9e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800daa6:	b2db      	uxtb	r3, r3
 800daa8:	3b01      	subs	r3, #1
 800daaa:	2b02      	cmp	r3, #2
 800daac:	d80b      	bhi.n	800dac6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800daae:	683b      	ldr	r3, [r7, #0]
 800dab0:	885b      	ldrh	r3, [r3, #2]
 800dab2:	2b01      	cmp	r3, #1
 800dab4:	d10c      	bne.n	800dad0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	2200      	movs	r2, #0
 800daba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800dabe:	6878      	ldr	r0, [r7, #4]
 800dac0:	f000 f910 	bl	800dce4 <USBD_CtlSendStatus>
      }
      break;
 800dac4:	e004      	b.n	800dad0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800dac6:	6839      	ldr	r1, [r7, #0]
 800dac8:	6878      	ldr	r0, [r7, #4]
 800daca:	f000 f840 	bl	800db4e <USBD_CtlError>
      break;
 800dace:	e000      	b.n	800dad2 <USBD_ClrFeature+0x3c>
      break;
 800dad0:	bf00      	nop
  }
}
 800dad2:	bf00      	nop
 800dad4:	3708      	adds	r7, #8
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd80      	pop	{r7, pc}

0800dada <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800dada:	b580      	push	{r7, lr}
 800dadc:	b084      	sub	sp, #16
 800dade:	af00      	add	r7, sp, #0
 800dae0:	6078      	str	r0, [r7, #4]
 800dae2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800dae4:	683b      	ldr	r3, [r7, #0]
 800dae6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	781a      	ldrb	r2, [r3, #0]
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800daf0:	68fb      	ldr	r3, [r7, #12]
 800daf2:	3301      	adds	r3, #1
 800daf4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	781a      	ldrb	r2, [r3, #0]
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	3301      	adds	r3, #1
 800db02:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800db04:	68f8      	ldr	r0, [r7, #12]
 800db06:	f7ff fa41 	bl	800cf8c <SWAPBYTE>
 800db0a:	4603      	mov	r3, r0
 800db0c:	461a      	mov	r2, r3
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	3301      	adds	r3, #1
 800db16:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800db18:	68fb      	ldr	r3, [r7, #12]
 800db1a:	3301      	adds	r3, #1
 800db1c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800db1e:	68f8      	ldr	r0, [r7, #12]
 800db20:	f7ff fa34 	bl	800cf8c <SWAPBYTE>
 800db24:	4603      	mov	r3, r0
 800db26:	461a      	mov	r2, r3
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	3301      	adds	r3, #1
 800db30:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	3301      	adds	r3, #1
 800db36:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800db38:	68f8      	ldr	r0, [r7, #12]
 800db3a:	f7ff fa27 	bl	800cf8c <SWAPBYTE>
 800db3e:	4603      	mov	r3, r0
 800db40:	461a      	mov	r2, r3
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	80da      	strh	r2, [r3, #6]
}
 800db46:	bf00      	nop
 800db48:	3710      	adds	r7, #16
 800db4a:	46bd      	mov	sp, r7
 800db4c:	bd80      	pop	{r7, pc}

0800db4e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800db4e:	b580      	push	{r7, lr}
 800db50:	b082      	sub	sp, #8
 800db52:	af00      	add	r7, sp, #0
 800db54:	6078      	str	r0, [r7, #4]
 800db56:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800db58:	2180      	movs	r1, #128	; 0x80
 800db5a:	6878      	ldr	r0, [r7, #4]
 800db5c:	f001 ff44 	bl	800f9e8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800db60:	2100      	movs	r1, #0
 800db62:	6878      	ldr	r0, [r7, #4]
 800db64:	f001 ff40 	bl	800f9e8 <USBD_LL_StallEP>
}
 800db68:	bf00      	nop
 800db6a:	3708      	adds	r7, #8
 800db6c:	46bd      	mov	sp, r7
 800db6e:	bd80      	pop	{r7, pc}

0800db70 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b086      	sub	sp, #24
 800db74:	af00      	add	r7, sp, #0
 800db76:	60f8      	str	r0, [r7, #12]
 800db78:	60b9      	str	r1, [r7, #8]
 800db7a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800db7c:	2300      	movs	r3, #0
 800db7e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d036      	beq.n	800dbf4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800db8a:	6938      	ldr	r0, [r7, #16]
 800db8c:	f000 f836 	bl	800dbfc <USBD_GetLen>
 800db90:	4603      	mov	r3, r0
 800db92:	3301      	adds	r3, #1
 800db94:	b29b      	uxth	r3, r3
 800db96:	005b      	lsls	r3, r3, #1
 800db98:	b29a      	uxth	r2, r3
 800db9a:	687b      	ldr	r3, [r7, #4]
 800db9c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800db9e:	7dfb      	ldrb	r3, [r7, #23]
 800dba0:	68ba      	ldr	r2, [r7, #8]
 800dba2:	4413      	add	r3, r2
 800dba4:	687a      	ldr	r2, [r7, #4]
 800dba6:	7812      	ldrb	r2, [r2, #0]
 800dba8:	701a      	strb	r2, [r3, #0]
  idx++;
 800dbaa:	7dfb      	ldrb	r3, [r7, #23]
 800dbac:	3301      	adds	r3, #1
 800dbae:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800dbb0:	7dfb      	ldrb	r3, [r7, #23]
 800dbb2:	68ba      	ldr	r2, [r7, #8]
 800dbb4:	4413      	add	r3, r2
 800dbb6:	2203      	movs	r2, #3
 800dbb8:	701a      	strb	r2, [r3, #0]
  idx++;
 800dbba:	7dfb      	ldrb	r3, [r7, #23]
 800dbbc:	3301      	adds	r3, #1
 800dbbe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800dbc0:	e013      	b.n	800dbea <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800dbc2:	7dfb      	ldrb	r3, [r7, #23]
 800dbc4:	68ba      	ldr	r2, [r7, #8]
 800dbc6:	4413      	add	r3, r2
 800dbc8:	693a      	ldr	r2, [r7, #16]
 800dbca:	7812      	ldrb	r2, [r2, #0]
 800dbcc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800dbce:	693b      	ldr	r3, [r7, #16]
 800dbd0:	3301      	adds	r3, #1
 800dbd2:	613b      	str	r3, [r7, #16]
    idx++;
 800dbd4:	7dfb      	ldrb	r3, [r7, #23]
 800dbd6:	3301      	adds	r3, #1
 800dbd8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800dbda:	7dfb      	ldrb	r3, [r7, #23]
 800dbdc:	68ba      	ldr	r2, [r7, #8]
 800dbde:	4413      	add	r3, r2
 800dbe0:	2200      	movs	r2, #0
 800dbe2:	701a      	strb	r2, [r3, #0]
    idx++;
 800dbe4:	7dfb      	ldrb	r3, [r7, #23]
 800dbe6:	3301      	adds	r3, #1
 800dbe8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800dbea:	693b      	ldr	r3, [r7, #16]
 800dbec:	781b      	ldrb	r3, [r3, #0]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d1e7      	bne.n	800dbc2 <USBD_GetString+0x52>
 800dbf2:	e000      	b.n	800dbf6 <USBD_GetString+0x86>
    return;
 800dbf4:	bf00      	nop
  }
}
 800dbf6:	3718      	adds	r7, #24
 800dbf8:	46bd      	mov	sp, r7
 800dbfa:	bd80      	pop	{r7, pc}

0800dbfc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800dbfc:	b480      	push	{r7}
 800dbfe:	b085      	sub	sp, #20
 800dc00:	af00      	add	r7, sp, #0
 800dc02:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800dc04:	2300      	movs	r3, #0
 800dc06:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800dc0c:	e005      	b.n	800dc1a <USBD_GetLen+0x1e>
  {
    len++;
 800dc0e:	7bfb      	ldrb	r3, [r7, #15]
 800dc10:	3301      	adds	r3, #1
 800dc12:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800dc14:	68bb      	ldr	r3, [r7, #8]
 800dc16:	3301      	adds	r3, #1
 800dc18:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800dc1a:	68bb      	ldr	r3, [r7, #8]
 800dc1c:	781b      	ldrb	r3, [r3, #0]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d1f5      	bne.n	800dc0e <USBD_GetLen+0x12>
  }

  return len;
 800dc22:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc24:	4618      	mov	r0, r3
 800dc26:	3714      	adds	r7, #20
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc2e:	4770      	bx	lr

0800dc30 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800dc30:	b580      	push	{r7, lr}
 800dc32:	b084      	sub	sp, #16
 800dc34:	af00      	add	r7, sp, #0
 800dc36:	60f8      	str	r0, [r7, #12]
 800dc38:	60b9      	str	r1, [r7, #8]
 800dc3a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	2202      	movs	r2, #2
 800dc40:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	687a      	ldr	r2, [r7, #4]
 800dc48:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	687a      	ldr	r2, [r7, #4]
 800dc4e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	68ba      	ldr	r2, [r7, #8]
 800dc54:	2100      	movs	r1, #0
 800dc56:	68f8      	ldr	r0, [r7, #12]
 800dc58:	f001 ff4f 	bl	800fafa <USBD_LL_Transmit>

  return USBD_OK;
 800dc5c:	2300      	movs	r3, #0
}
 800dc5e:	4618      	mov	r0, r3
 800dc60:	3710      	adds	r7, #16
 800dc62:	46bd      	mov	sp, r7
 800dc64:	bd80      	pop	{r7, pc}

0800dc66 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800dc66:	b580      	push	{r7, lr}
 800dc68:	b084      	sub	sp, #16
 800dc6a:	af00      	add	r7, sp, #0
 800dc6c:	60f8      	str	r0, [r7, #12]
 800dc6e:	60b9      	str	r1, [r7, #8]
 800dc70:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800dc72:	687b      	ldr	r3, [r7, #4]
 800dc74:	68ba      	ldr	r2, [r7, #8]
 800dc76:	2100      	movs	r1, #0
 800dc78:	68f8      	ldr	r0, [r7, #12]
 800dc7a:	f001 ff3e 	bl	800fafa <USBD_LL_Transmit>

  return USBD_OK;
 800dc7e:	2300      	movs	r3, #0
}
 800dc80:	4618      	mov	r0, r3
 800dc82:	3710      	adds	r7, #16
 800dc84:	46bd      	mov	sp, r7
 800dc86:	bd80      	pop	{r7, pc}

0800dc88 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b084      	sub	sp, #16
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	60f8      	str	r0, [r7, #12]
 800dc90:	60b9      	str	r1, [r7, #8]
 800dc92:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	2203      	movs	r2, #3
 800dc98:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	687a      	ldr	r2, [r7, #4]
 800dca0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	687a      	ldr	r2, [r7, #4]
 800dca8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	68ba      	ldr	r2, [r7, #8]
 800dcb0:	2100      	movs	r1, #0
 800dcb2:	68f8      	ldr	r0, [r7, #12]
 800dcb4:	f001 ff42 	bl	800fb3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dcb8:	2300      	movs	r3, #0
}
 800dcba:	4618      	mov	r0, r3
 800dcbc:	3710      	adds	r7, #16
 800dcbe:	46bd      	mov	sp, r7
 800dcc0:	bd80      	pop	{r7, pc}

0800dcc2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800dcc2:	b580      	push	{r7, lr}
 800dcc4:	b084      	sub	sp, #16
 800dcc6:	af00      	add	r7, sp, #0
 800dcc8:	60f8      	str	r0, [r7, #12]
 800dcca:	60b9      	str	r1, [r7, #8]
 800dccc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	68ba      	ldr	r2, [r7, #8]
 800dcd2:	2100      	movs	r1, #0
 800dcd4:	68f8      	ldr	r0, [r7, #12]
 800dcd6:	f001 ff31 	bl	800fb3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dcda:	2300      	movs	r3, #0
}
 800dcdc:	4618      	mov	r0, r3
 800dcde:	3710      	adds	r7, #16
 800dce0:	46bd      	mov	sp, r7
 800dce2:	bd80      	pop	{r7, pc}

0800dce4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b082      	sub	sp, #8
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	2204      	movs	r2, #4
 800dcf0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	2100      	movs	r1, #0
 800dcfa:	6878      	ldr	r0, [r7, #4]
 800dcfc:	f001 fefd 	bl	800fafa <USBD_LL_Transmit>

  return USBD_OK;
 800dd00:	2300      	movs	r3, #0
}
 800dd02:	4618      	mov	r0, r3
 800dd04:	3708      	adds	r7, #8
 800dd06:	46bd      	mov	sp, r7
 800dd08:	bd80      	pop	{r7, pc}

0800dd0a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800dd0a:	b580      	push	{r7, lr}
 800dd0c:	b082      	sub	sp, #8
 800dd0e:	af00      	add	r7, sp, #0
 800dd10:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	2205      	movs	r2, #5
 800dd16:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	2100      	movs	r1, #0
 800dd20:	6878      	ldr	r0, [r7, #4]
 800dd22:	f001 ff0b 	bl	800fb3c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dd26:	2300      	movs	r3, #0
}
 800dd28:	4618      	mov	r0, r3
 800dd2a:	3708      	adds	r7, #8
 800dd2c:	46bd      	mov	sp, r7
 800dd2e:	bd80      	pop	{r7, pc}

0800dd30 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800dd30:	b480      	push	{r7}
 800dd32:	b085      	sub	sp, #20
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	4603      	mov	r3, r0
 800dd38:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800dd3a:	2300      	movs	r3, #0
 800dd3c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800dd3e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800dd42:	2b84      	cmp	r3, #132	; 0x84
 800dd44:	d005      	beq.n	800dd52 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800dd46:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	4413      	add	r3, r2
 800dd4e:	3303      	adds	r3, #3
 800dd50:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800dd52:	68fb      	ldr	r3, [r7, #12]
}
 800dd54:	4618      	mov	r0, r3
 800dd56:	3714      	adds	r7, #20
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5e:	4770      	bx	lr

0800dd60 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800dd64:	f000 fade 	bl	800e324 <vTaskStartScheduler>
  
  return osOK;
 800dd68:	2300      	movs	r3, #0
}
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	bd80      	pop	{r7, pc}

0800dd6e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800dd6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800dd70:	b089      	sub	sp, #36	; 0x24
 800dd72:	af04      	add	r7, sp, #16
 800dd74:	6078      	str	r0, [r7, #4]
 800dd76:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	695b      	ldr	r3, [r3, #20]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d020      	beq.n	800ddc2 <osThreadCreate+0x54>
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	699b      	ldr	r3, [r3, #24]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d01c      	beq.n	800ddc2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	685c      	ldr	r4, [r3, #4]
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	691e      	ldr	r6, [r3, #16]
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800dd9a:	4618      	mov	r0, r3
 800dd9c:	f7ff ffc8 	bl	800dd30 <makeFreeRtosPriority>
 800dda0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	695b      	ldr	r3, [r3, #20]
 800dda6:	687a      	ldr	r2, [r7, #4]
 800dda8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ddaa:	9202      	str	r2, [sp, #8]
 800ddac:	9301      	str	r3, [sp, #4]
 800ddae:	9100      	str	r1, [sp, #0]
 800ddb0:	683b      	ldr	r3, [r7, #0]
 800ddb2:	4632      	mov	r2, r6
 800ddb4:	4629      	mov	r1, r5
 800ddb6:	4620      	mov	r0, r4
 800ddb8:	f000 f8ed 	bl	800df96 <xTaskCreateStatic>
 800ddbc:	4603      	mov	r3, r0
 800ddbe:	60fb      	str	r3, [r7, #12]
 800ddc0:	e01c      	b.n	800ddfc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	685c      	ldr	r4, [r3, #4]
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ddca:	687b      	ldr	r3, [r7, #4]
 800ddcc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ddce:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ddd6:	4618      	mov	r0, r3
 800ddd8:	f7ff ffaa 	bl	800dd30 <makeFreeRtosPriority>
 800dddc:	4602      	mov	r2, r0
 800ddde:	f107 030c 	add.w	r3, r7, #12
 800dde2:	9301      	str	r3, [sp, #4]
 800dde4:	9200      	str	r2, [sp, #0]
 800dde6:	683b      	ldr	r3, [r7, #0]
 800dde8:	4632      	mov	r2, r6
 800ddea:	4629      	mov	r1, r5
 800ddec:	4620      	mov	r0, r4
 800ddee:	f000 f92f 	bl	800e050 <xTaskCreate>
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	2b01      	cmp	r3, #1
 800ddf6:	d001      	beq.n	800ddfc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800ddf8:	2300      	movs	r3, #0
 800ddfa:	e000      	b.n	800ddfe <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800ddfc:	68fb      	ldr	r3, [r7, #12]
}
 800ddfe:	4618      	mov	r0, r3
 800de00:	3714      	adds	r7, #20
 800de02:	46bd      	mov	sp, r7
 800de04:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800de06 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800de06:	b580      	push	{r7, lr}
 800de08:	b084      	sub	sp, #16
 800de0a:	af00      	add	r7, sp, #0
 800de0c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	2b00      	cmp	r3, #0
 800de16:	d001      	beq.n	800de1c <osDelay+0x16>
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	e000      	b.n	800de1e <osDelay+0x18>
 800de1c:	2301      	movs	r3, #1
 800de1e:	4618      	mov	r0, r3
 800de20:	f000 fa4c 	bl	800e2bc <vTaskDelay>
  
  return osOK;
 800de24:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800de26:	4618      	mov	r0, r3
 800de28:	3710      	adds	r7, #16
 800de2a:	46bd      	mov	sp, r7
 800de2c:	bd80      	pop	{r7, pc}

0800de2e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800de2e:	b480      	push	{r7}
 800de30:	b083      	sub	sp, #12
 800de32:	af00      	add	r7, sp, #0
 800de34:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	f103 0208 	add.w	r2, r3, #8
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800de46:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	f103 0208 	add.w	r2, r3, #8
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	f103 0208 	add.w	r2, r3, #8
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	2200      	movs	r2, #0
 800de60:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800de62:	bf00      	nop
 800de64:	370c      	adds	r7, #12
 800de66:	46bd      	mov	sp, r7
 800de68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6c:	4770      	bx	lr

0800de6e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800de6e:	b480      	push	{r7}
 800de70:	b083      	sub	sp, #12
 800de72:	af00      	add	r7, sp, #0
 800de74:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	2200      	movs	r2, #0
 800de7a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800de7c:	bf00      	nop
 800de7e:	370c      	adds	r7, #12
 800de80:	46bd      	mov	sp, r7
 800de82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de86:	4770      	bx	lr

0800de88 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800de88:	b480      	push	{r7}
 800de8a:	b085      	sub	sp, #20
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
 800de90:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	685b      	ldr	r3, [r3, #4]
 800de96:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800de98:	683b      	ldr	r3, [r7, #0]
 800de9a:	68fa      	ldr	r2, [r7, #12]
 800de9c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	689a      	ldr	r2, [r3, #8]
 800dea2:	683b      	ldr	r3, [r7, #0]
 800dea4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	689b      	ldr	r3, [r3, #8]
 800deaa:	683a      	ldr	r2, [r7, #0]
 800deac:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	683a      	ldr	r2, [r7, #0]
 800deb2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800deb4:	683b      	ldr	r3, [r7, #0]
 800deb6:	687a      	ldr	r2, [r7, #4]
 800deb8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	1c5a      	adds	r2, r3, #1
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	601a      	str	r2, [r3, #0]
}
 800dec4:	bf00      	nop
 800dec6:	3714      	adds	r7, #20
 800dec8:	46bd      	mov	sp, r7
 800deca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dece:	4770      	bx	lr

0800ded0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ded0:	b480      	push	{r7}
 800ded2:	b085      	sub	sp, #20
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	6078      	str	r0, [r7, #4]
 800ded8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800deda:	683b      	ldr	r3, [r7, #0]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800dee0:	68bb      	ldr	r3, [r7, #8]
 800dee2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dee6:	d103      	bne.n	800def0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	691b      	ldr	r3, [r3, #16]
 800deec:	60fb      	str	r3, [r7, #12]
 800deee:	e00c      	b.n	800df0a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	3308      	adds	r3, #8
 800def4:	60fb      	str	r3, [r7, #12]
 800def6:	e002      	b.n	800defe <vListInsert+0x2e>
 800def8:	68fb      	ldr	r3, [r7, #12]
 800defa:	685b      	ldr	r3, [r3, #4]
 800defc:	60fb      	str	r3, [r7, #12]
 800defe:	68fb      	ldr	r3, [r7, #12]
 800df00:	685b      	ldr	r3, [r3, #4]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	68ba      	ldr	r2, [r7, #8]
 800df06:	429a      	cmp	r2, r3
 800df08:	d2f6      	bcs.n	800def8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	685a      	ldr	r2, [r3, #4]
 800df0e:	683b      	ldr	r3, [r7, #0]
 800df10:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800df12:	683b      	ldr	r3, [r7, #0]
 800df14:	685b      	ldr	r3, [r3, #4]
 800df16:	683a      	ldr	r2, [r7, #0]
 800df18:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800df1a:	683b      	ldr	r3, [r7, #0]
 800df1c:	68fa      	ldr	r2, [r7, #12]
 800df1e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	683a      	ldr	r2, [r7, #0]
 800df24:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800df26:	683b      	ldr	r3, [r7, #0]
 800df28:	687a      	ldr	r2, [r7, #4]
 800df2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	1c5a      	adds	r2, r3, #1
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	601a      	str	r2, [r3, #0]
}
 800df36:	bf00      	nop
 800df38:	3714      	adds	r7, #20
 800df3a:	46bd      	mov	sp, r7
 800df3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df40:	4770      	bx	lr

0800df42 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800df42:	b480      	push	{r7}
 800df44:	b085      	sub	sp, #20
 800df46:	af00      	add	r7, sp, #0
 800df48:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	691b      	ldr	r3, [r3, #16]
 800df4e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	685b      	ldr	r3, [r3, #4]
 800df54:	687a      	ldr	r2, [r7, #4]
 800df56:	6892      	ldr	r2, [r2, #8]
 800df58:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	689b      	ldr	r3, [r3, #8]
 800df5e:	687a      	ldr	r2, [r7, #4]
 800df60:	6852      	ldr	r2, [r2, #4]
 800df62:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	685b      	ldr	r3, [r3, #4]
 800df68:	687a      	ldr	r2, [r7, #4]
 800df6a:	429a      	cmp	r2, r3
 800df6c:	d103      	bne.n	800df76 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	689a      	ldr	r2, [r3, #8]
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	2200      	movs	r2, #0
 800df7a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	1e5a      	subs	r2, r3, #1
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	681b      	ldr	r3, [r3, #0]
}
 800df8a:	4618      	mov	r0, r3
 800df8c:	3714      	adds	r7, #20
 800df8e:	46bd      	mov	sp, r7
 800df90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df94:	4770      	bx	lr

0800df96 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800df96:	b580      	push	{r7, lr}
 800df98:	b08e      	sub	sp, #56	; 0x38
 800df9a:	af04      	add	r7, sp, #16
 800df9c:	60f8      	str	r0, [r7, #12]
 800df9e:	60b9      	str	r1, [r7, #8]
 800dfa0:	607a      	str	r2, [r7, #4]
 800dfa2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800dfa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d10a      	bne.n	800dfc0 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800dfaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfae:	f383 8811 	msr	BASEPRI, r3
 800dfb2:	f3bf 8f6f 	isb	sy
 800dfb6:	f3bf 8f4f 	dsb	sy
 800dfba:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800dfbc:	bf00      	nop
 800dfbe:	e7fe      	b.n	800dfbe <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800dfc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d10a      	bne.n	800dfdc <xTaskCreateStatic+0x46>
	__asm volatile
 800dfc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfca:	f383 8811 	msr	BASEPRI, r3
 800dfce:	f3bf 8f6f 	isb	sy
 800dfd2:	f3bf 8f4f 	dsb	sy
 800dfd6:	61fb      	str	r3, [r7, #28]
}
 800dfd8:	bf00      	nop
 800dfda:	e7fe      	b.n	800dfda <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800dfdc:	2354      	movs	r3, #84	; 0x54
 800dfde:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800dfe0:	693b      	ldr	r3, [r7, #16]
 800dfe2:	2b54      	cmp	r3, #84	; 0x54
 800dfe4:	d00a      	beq.n	800dffc <xTaskCreateStatic+0x66>
	__asm volatile
 800dfe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfea:	f383 8811 	msr	BASEPRI, r3
 800dfee:	f3bf 8f6f 	isb	sy
 800dff2:	f3bf 8f4f 	dsb	sy
 800dff6:	61bb      	str	r3, [r7, #24]
}
 800dff8:	bf00      	nop
 800dffa:	e7fe      	b.n	800dffa <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800dffc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800dffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e000:	2b00      	cmp	r3, #0
 800e002:	d01e      	beq.n	800e042 <xTaskCreateStatic+0xac>
 800e004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e006:	2b00      	cmp	r3, #0
 800e008:	d01b      	beq.n	800e042 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e00a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e00c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800e00e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e010:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e012:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800e014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e016:	2202      	movs	r2, #2
 800e018:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800e01c:	2300      	movs	r3, #0
 800e01e:	9303      	str	r3, [sp, #12]
 800e020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e022:	9302      	str	r3, [sp, #8]
 800e024:	f107 0314 	add.w	r3, r7, #20
 800e028:	9301      	str	r3, [sp, #4]
 800e02a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e02c:	9300      	str	r3, [sp, #0]
 800e02e:	683b      	ldr	r3, [r7, #0]
 800e030:	687a      	ldr	r2, [r7, #4]
 800e032:	68b9      	ldr	r1, [r7, #8]
 800e034:	68f8      	ldr	r0, [r7, #12]
 800e036:	f000 f850 	bl	800e0da <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e03a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e03c:	f000 f8d4 	bl	800e1e8 <prvAddNewTaskToReadyList>
 800e040:	e001      	b.n	800e046 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800e042:	2300      	movs	r3, #0
 800e044:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800e046:	697b      	ldr	r3, [r7, #20]
	}
 800e048:	4618      	mov	r0, r3
 800e04a:	3728      	adds	r7, #40	; 0x28
 800e04c:	46bd      	mov	sp, r7
 800e04e:	bd80      	pop	{r7, pc}

0800e050 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800e050:	b580      	push	{r7, lr}
 800e052:	b08c      	sub	sp, #48	; 0x30
 800e054:	af04      	add	r7, sp, #16
 800e056:	60f8      	str	r0, [r7, #12]
 800e058:	60b9      	str	r1, [r7, #8]
 800e05a:	603b      	str	r3, [r7, #0]
 800e05c:	4613      	mov	r3, r2
 800e05e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e060:	88fb      	ldrh	r3, [r7, #6]
 800e062:	009b      	lsls	r3, r3, #2
 800e064:	4618      	mov	r0, r3
 800e066:	f000 fec7 	bl	800edf8 <pvPortMalloc>
 800e06a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800e06c:	697b      	ldr	r3, [r7, #20]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d00e      	beq.n	800e090 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e072:	2054      	movs	r0, #84	; 0x54
 800e074:	f000 fec0 	bl	800edf8 <pvPortMalloc>
 800e078:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800e07a:	69fb      	ldr	r3, [r7, #28]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d003      	beq.n	800e088 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800e080:	69fb      	ldr	r3, [r7, #28]
 800e082:	697a      	ldr	r2, [r7, #20]
 800e084:	631a      	str	r2, [r3, #48]	; 0x30
 800e086:	e005      	b.n	800e094 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800e088:	6978      	ldr	r0, [r7, #20]
 800e08a:	f000 ff81 	bl	800ef90 <vPortFree>
 800e08e:	e001      	b.n	800e094 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800e090:	2300      	movs	r3, #0
 800e092:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800e094:	69fb      	ldr	r3, [r7, #28]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d017      	beq.n	800e0ca <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e09a:	69fb      	ldr	r3, [r7, #28]
 800e09c:	2200      	movs	r2, #0
 800e09e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e0a2:	88fa      	ldrh	r2, [r7, #6]
 800e0a4:	2300      	movs	r3, #0
 800e0a6:	9303      	str	r3, [sp, #12]
 800e0a8:	69fb      	ldr	r3, [r7, #28]
 800e0aa:	9302      	str	r3, [sp, #8]
 800e0ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e0ae:	9301      	str	r3, [sp, #4]
 800e0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0b2:	9300      	str	r3, [sp, #0]
 800e0b4:	683b      	ldr	r3, [r7, #0]
 800e0b6:	68b9      	ldr	r1, [r7, #8]
 800e0b8:	68f8      	ldr	r0, [r7, #12]
 800e0ba:	f000 f80e 	bl	800e0da <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e0be:	69f8      	ldr	r0, [r7, #28]
 800e0c0:	f000 f892 	bl	800e1e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e0c4:	2301      	movs	r3, #1
 800e0c6:	61bb      	str	r3, [r7, #24]
 800e0c8:	e002      	b.n	800e0d0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e0ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e0ce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800e0d0:	69bb      	ldr	r3, [r7, #24]
	}
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	3720      	adds	r7, #32
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	bd80      	pop	{r7, pc}

0800e0da <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800e0da:	b580      	push	{r7, lr}
 800e0dc:	b088      	sub	sp, #32
 800e0de:	af00      	add	r7, sp, #0
 800e0e0:	60f8      	str	r0, [r7, #12]
 800e0e2:	60b9      	str	r1, [r7, #8]
 800e0e4:	607a      	str	r2, [r7, #4]
 800e0e6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800e0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800e0f2:	3b01      	subs	r3, #1
 800e0f4:	009b      	lsls	r3, r3, #2
 800e0f6:	4413      	add	r3, r2
 800e0f8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800e0fa:	69bb      	ldr	r3, [r7, #24]
 800e0fc:	f023 0307 	bic.w	r3, r3, #7
 800e100:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800e102:	69bb      	ldr	r3, [r7, #24]
 800e104:	f003 0307 	and.w	r3, r3, #7
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d00a      	beq.n	800e122 <prvInitialiseNewTask+0x48>
	__asm volatile
 800e10c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e110:	f383 8811 	msr	BASEPRI, r3
 800e114:	f3bf 8f6f 	isb	sy
 800e118:	f3bf 8f4f 	dsb	sy
 800e11c:	617b      	str	r3, [r7, #20]
}
 800e11e:	bf00      	nop
 800e120:	e7fe      	b.n	800e120 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800e122:	68bb      	ldr	r3, [r7, #8]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d01f      	beq.n	800e168 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e128:	2300      	movs	r3, #0
 800e12a:	61fb      	str	r3, [r7, #28]
 800e12c:	e012      	b.n	800e154 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800e12e:	68ba      	ldr	r2, [r7, #8]
 800e130:	69fb      	ldr	r3, [r7, #28]
 800e132:	4413      	add	r3, r2
 800e134:	7819      	ldrb	r1, [r3, #0]
 800e136:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e138:	69fb      	ldr	r3, [r7, #28]
 800e13a:	4413      	add	r3, r2
 800e13c:	3334      	adds	r3, #52	; 0x34
 800e13e:	460a      	mov	r2, r1
 800e140:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800e142:	68ba      	ldr	r2, [r7, #8]
 800e144:	69fb      	ldr	r3, [r7, #28]
 800e146:	4413      	add	r3, r2
 800e148:	781b      	ldrb	r3, [r3, #0]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d006      	beq.n	800e15c <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800e14e:	69fb      	ldr	r3, [r7, #28]
 800e150:	3301      	adds	r3, #1
 800e152:	61fb      	str	r3, [r7, #28]
 800e154:	69fb      	ldr	r3, [r7, #28]
 800e156:	2b0f      	cmp	r3, #15
 800e158:	d9e9      	bls.n	800e12e <prvInitialiseNewTask+0x54>
 800e15a:	e000      	b.n	800e15e <prvInitialiseNewTask+0x84>
			{
				break;
 800e15c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800e15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e160:	2200      	movs	r2, #0
 800e162:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e166:	e003      	b.n	800e170 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800e168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e16a:	2200      	movs	r2, #0
 800e16c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800e170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e172:	2b06      	cmp	r3, #6
 800e174:	d901      	bls.n	800e17a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800e176:	2306      	movs	r3, #6
 800e178:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800e17a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e17c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e17e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800e180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e182:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e184:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800e186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e188:	2200      	movs	r2, #0
 800e18a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800e18c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e18e:	3304      	adds	r3, #4
 800e190:	4618      	mov	r0, r3
 800e192:	f7ff fe6c 	bl	800de6e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800e196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e198:	3318      	adds	r3, #24
 800e19a:	4618      	mov	r0, r3
 800e19c:	f7ff fe67 	bl	800de6e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800e1a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1a4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e1a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1a8:	f1c3 0207 	rsb	r2, r3, #7
 800e1ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1ae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e1b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1b4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e1b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1b8:	2200      	movs	r2, #0
 800e1ba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e1bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1be:	2200      	movs	r2, #0
 800e1c0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e1c4:	683a      	ldr	r2, [r7, #0]
 800e1c6:	68f9      	ldr	r1, [r7, #12]
 800e1c8:	69b8      	ldr	r0, [r7, #24]
 800e1ca:	f000 fc05 	bl	800e9d8 <pxPortInitialiseStack>
 800e1ce:	4602      	mov	r2, r0
 800e1d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e1d2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e1d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d002      	beq.n	800e1e0 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e1da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e1dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1de:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e1e0:	bf00      	nop
 800e1e2:	3720      	adds	r7, #32
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	bd80      	pop	{r7, pc}

0800e1e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e1e8:	b580      	push	{r7, lr}
 800e1ea:	b082      	sub	sp, #8
 800e1ec:	af00      	add	r7, sp, #0
 800e1ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e1f0:	f000 fd20 	bl	800ec34 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e1f4:	4b2a      	ldr	r3, [pc, #168]	; (800e2a0 <prvAddNewTaskToReadyList+0xb8>)
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	3301      	adds	r3, #1
 800e1fa:	4a29      	ldr	r2, [pc, #164]	; (800e2a0 <prvAddNewTaskToReadyList+0xb8>)
 800e1fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e1fe:	4b29      	ldr	r3, [pc, #164]	; (800e2a4 <prvAddNewTaskToReadyList+0xbc>)
 800e200:	681b      	ldr	r3, [r3, #0]
 800e202:	2b00      	cmp	r3, #0
 800e204:	d109      	bne.n	800e21a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e206:	4a27      	ldr	r2, [pc, #156]	; (800e2a4 <prvAddNewTaskToReadyList+0xbc>)
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e20c:	4b24      	ldr	r3, [pc, #144]	; (800e2a0 <prvAddNewTaskToReadyList+0xb8>)
 800e20e:	681b      	ldr	r3, [r3, #0]
 800e210:	2b01      	cmp	r3, #1
 800e212:	d110      	bne.n	800e236 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e214:	f000 fabc 	bl	800e790 <prvInitialiseTaskLists>
 800e218:	e00d      	b.n	800e236 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e21a:	4b23      	ldr	r3, [pc, #140]	; (800e2a8 <prvAddNewTaskToReadyList+0xc0>)
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d109      	bne.n	800e236 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e222:	4b20      	ldr	r3, [pc, #128]	; (800e2a4 <prvAddNewTaskToReadyList+0xbc>)
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e22c:	429a      	cmp	r2, r3
 800e22e:	d802      	bhi.n	800e236 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e230:	4a1c      	ldr	r2, [pc, #112]	; (800e2a4 <prvAddNewTaskToReadyList+0xbc>)
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e236:	4b1d      	ldr	r3, [pc, #116]	; (800e2ac <prvAddNewTaskToReadyList+0xc4>)
 800e238:	681b      	ldr	r3, [r3, #0]
 800e23a:	3301      	adds	r3, #1
 800e23c:	4a1b      	ldr	r2, [pc, #108]	; (800e2ac <prvAddNewTaskToReadyList+0xc4>)
 800e23e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e240:	687b      	ldr	r3, [r7, #4]
 800e242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e244:	2201      	movs	r2, #1
 800e246:	409a      	lsls	r2, r3
 800e248:	4b19      	ldr	r3, [pc, #100]	; (800e2b0 <prvAddNewTaskToReadyList+0xc8>)
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	4313      	orrs	r3, r2
 800e24e:	4a18      	ldr	r2, [pc, #96]	; (800e2b0 <prvAddNewTaskToReadyList+0xc8>)
 800e250:	6013      	str	r3, [r2, #0]
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e256:	4613      	mov	r3, r2
 800e258:	009b      	lsls	r3, r3, #2
 800e25a:	4413      	add	r3, r2
 800e25c:	009b      	lsls	r3, r3, #2
 800e25e:	4a15      	ldr	r2, [pc, #84]	; (800e2b4 <prvAddNewTaskToReadyList+0xcc>)
 800e260:	441a      	add	r2, r3
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	3304      	adds	r3, #4
 800e266:	4619      	mov	r1, r3
 800e268:	4610      	mov	r0, r2
 800e26a:	f7ff fe0d 	bl	800de88 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e26e:	f000 fd11 	bl	800ec94 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e272:	4b0d      	ldr	r3, [pc, #52]	; (800e2a8 <prvAddNewTaskToReadyList+0xc0>)
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	2b00      	cmp	r3, #0
 800e278:	d00e      	beq.n	800e298 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e27a:	4b0a      	ldr	r3, [pc, #40]	; (800e2a4 <prvAddNewTaskToReadyList+0xbc>)
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e284:	429a      	cmp	r2, r3
 800e286:	d207      	bcs.n	800e298 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e288:	4b0b      	ldr	r3, [pc, #44]	; (800e2b8 <prvAddNewTaskToReadyList+0xd0>)
 800e28a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e28e:	601a      	str	r2, [r3, #0]
 800e290:	f3bf 8f4f 	dsb	sy
 800e294:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e298:	bf00      	nop
 800e29a:	3708      	adds	r7, #8
 800e29c:	46bd      	mov	sp, r7
 800e29e:	bd80      	pop	{r7, pc}
 800e2a0:	20000cd0 	.word	0x20000cd0
 800e2a4:	20000bd0 	.word	0x20000bd0
 800e2a8:	20000cdc 	.word	0x20000cdc
 800e2ac:	20000cec 	.word	0x20000cec
 800e2b0:	20000cd8 	.word	0x20000cd8
 800e2b4:	20000bd4 	.word	0x20000bd4
 800e2b8:	e000ed04 	.word	0xe000ed04

0800e2bc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e2bc:	b580      	push	{r7, lr}
 800e2be:	b084      	sub	sp, #16
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	d017      	beq.n	800e2fe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e2ce:	4b13      	ldr	r3, [pc, #76]	; (800e31c <vTaskDelay+0x60>)
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d00a      	beq.n	800e2ec <vTaskDelay+0x30>
	__asm volatile
 800e2d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2da:	f383 8811 	msr	BASEPRI, r3
 800e2de:	f3bf 8f6f 	isb	sy
 800e2e2:	f3bf 8f4f 	dsb	sy
 800e2e6:	60bb      	str	r3, [r7, #8]
}
 800e2e8:	bf00      	nop
 800e2ea:	e7fe      	b.n	800e2ea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e2ec:	f000 f87a 	bl	800e3e4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e2f0:	2100      	movs	r1, #0
 800e2f2:	6878      	ldr	r0, [r7, #4]
 800e2f4:	f000 fb0a 	bl	800e90c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e2f8:	f000 f882 	bl	800e400 <xTaskResumeAll>
 800e2fc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e2fe:	68fb      	ldr	r3, [r7, #12]
 800e300:	2b00      	cmp	r3, #0
 800e302:	d107      	bne.n	800e314 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e304:	4b06      	ldr	r3, [pc, #24]	; (800e320 <vTaskDelay+0x64>)
 800e306:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e30a:	601a      	str	r2, [r3, #0]
 800e30c:	f3bf 8f4f 	dsb	sy
 800e310:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e314:	bf00      	nop
 800e316:	3710      	adds	r7, #16
 800e318:	46bd      	mov	sp, r7
 800e31a:	bd80      	pop	{r7, pc}
 800e31c:	20000cf8 	.word	0x20000cf8
 800e320:	e000ed04 	.word	0xe000ed04

0800e324 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e324:	b580      	push	{r7, lr}
 800e326:	b08a      	sub	sp, #40	; 0x28
 800e328:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e32a:	2300      	movs	r3, #0
 800e32c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e32e:	2300      	movs	r3, #0
 800e330:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e332:	463a      	mov	r2, r7
 800e334:	1d39      	adds	r1, r7, #4
 800e336:	f107 0308 	add.w	r3, r7, #8
 800e33a:	4618      	mov	r0, r3
 800e33c:	f7f2 feb0 	bl	80010a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e340:	6839      	ldr	r1, [r7, #0]
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	68ba      	ldr	r2, [r7, #8]
 800e346:	9202      	str	r2, [sp, #8]
 800e348:	9301      	str	r3, [sp, #4]
 800e34a:	2300      	movs	r3, #0
 800e34c:	9300      	str	r3, [sp, #0]
 800e34e:	2300      	movs	r3, #0
 800e350:	460a      	mov	r2, r1
 800e352:	491e      	ldr	r1, [pc, #120]	; (800e3cc <vTaskStartScheduler+0xa8>)
 800e354:	481e      	ldr	r0, [pc, #120]	; (800e3d0 <vTaskStartScheduler+0xac>)
 800e356:	f7ff fe1e 	bl	800df96 <xTaskCreateStatic>
 800e35a:	4603      	mov	r3, r0
 800e35c:	4a1d      	ldr	r2, [pc, #116]	; (800e3d4 <vTaskStartScheduler+0xb0>)
 800e35e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e360:	4b1c      	ldr	r3, [pc, #112]	; (800e3d4 <vTaskStartScheduler+0xb0>)
 800e362:	681b      	ldr	r3, [r3, #0]
 800e364:	2b00      	cmp	r3, #0
 800e366:	d002      	beq.n	800e36e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e368:	2301      	movs	r3, #1
 800e36a:	617b      	str	r3, [r7, #20]
 800e36c:	e001      	b.n	800e372 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e36e:	2300      	movs	r3, #0
 800e370:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e372:	697b      	ldr	r3, [r7, #20]
 800e374:	2b01      	cmp	r3, #1
 800e376:	d116      	bne.n	800e3a6 <vTaskStartScheduler+0x82>
	__asm volatile
 800e378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e37c:	f383 8811 	msr	BASEPRI, r3
 800e380:	f3bf 8f6f 	isb	sy
 800e384:	f3bf 8f4f 	dsb	sy
 800e388:	613b      	str	r3, [r7, #16]
}
 800e38a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e38c:	4b12      	ldr	r3, [pc, #72]	; (800e3d8 <vTaskStartScheduler+0xb4>)
 800e38e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e392:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e394:	4b11      	ldr	r3, [pc, #68]	; (800e3dc <vTaskStartScheduler+0xb8>)
 800e396:	2201      	movs	r2, #1
 800e398:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e39a:	4b11      	ldr	r3, [pc, #68]	; (800e3e0 <vTaskStartScheduler+0xbc>)
 800e39c:	2200      	movs	r2, #0
 800e39e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e3a0:	f000 fba6 	bl	800eaf0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e3a4:	e00e      	b.n	800e3c4 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e3a6:	697b      	ldr	r3, [r7, #20]
 800e3a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e3ac:	d10a      	bne.n	800e3c4 <vTaskStartScheduler+0xa0>
	__asm volatile
 800e3ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3b2:	f383 8811 	msr	BASEPRI, r3
 800e3b6:	f3bf 8f6f 	isb	sy
 800e3ba:	f3bf 8f4f 	dsb	sy
 800e3be:	60fb      	str	r3, [r7, #12]
}
 800e3c0:	bf00      	nop
 800e3c2:	e7fe      	b.n	800e3c2 <vTaskStartScheduler+0x9e>
}
 800e3c4:	bf00      	nop
 800e3c6:	3718      	adds	r7, #24
 800e3c8:	46bd      	mov	sp, r7
 800e3ca:	bd80      	pop	{r7, pc}
 800e3cc:	0800fefc 	.word	0x0800fefc
 800e3d0:	0800e761 	.word	0x0800e761
 800e3d4:	20000cf4 	.word	0x20000cf4
 800e3d8:	20000cf0 	.word	0x20000cf0
 800e3dc:	20000cdc 	.word	0x20000cdc
 800e3e0:	20000cd4 	.word	0x20000cd4

0800e3e4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e3e4:	b480      	push	{r7}
 800e3e6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e3e8:	4b04      	ldr	r3, [pc, #16]	; (800e3fc <vTaskSuspendAll+0x18>)
 800e3ea:	681b      	ldr	r3, [r3, #0]
 800e3ec:	3301      	adds	r3, #1
 800e3ee:	4a03      	ldr	r2, [pc, #12]	; (800e3fc <vTaskSuspendAll+0x18>)
 800e3f0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e3f2:	bf00      	nop
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3fa:	4770      	bx	lr
 800e3fc:	20000cf8 	.word	0x20000cf8

0800e400 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e400:	b580      	push	{r7, lr}
 800e402:	b084      	sub	sp, #16
 800e404:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e406:	2300      	movs	r3, #0
 800e408:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e40a:	2300      	movs	r3, #0
 800e40c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e40e:	4b41      	ldr	r3, [pc, #260]	; (800e514 <xTaskResumeAll+0x114>)
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	2b00      	cmp	r3, #0
 800e414:	d10a      	bne.n	800e42c <xTaskResumeAll+0x2c>
	__asm volatile
 800e416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e41a:	f383 8811 	msr	BASEPRI, r3
 800e41e:	f3bf 8f6f 	isb	sy
 800e422:	f3bf 8f4f 	dsb	sy
 800e426:	603b      	str	r3, [r7, #0]
}
 800e428:	bf00      	nop
 800e42a:	e7fe      	b.n	800e42a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e42c:	f000 fc02 	bl	800ec34 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e430:	4b38      	ldr	r3, [pc, #224]	; (800e514 <xTaskResumeAll+0x114>)
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	3b01      	subs	r3, #1
 800e436:	4a37      	ldr	r2, [pc, #220]	; (800e514 <xTaskResumeAll+0x114>)
 800e438:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e43a:	4b36      	ldr	r3, [pc, #216]	; (800e514 <xTaskResumeAll+0x114>)
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d161      	bne.n	800e506 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e442:	4b35      	ldr	r3, [pc, #212]	; (800e518 <xTaskResumeAll+0x118>)
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d05d      	beq.n	800e506 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e44a:	e02e      	b.n	800e4aa <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e44c:	4b33      	ldr	r3, [pc, #204]	; (800e51c <xTaskResumeAll+0x11c>)
 800e44e:	68db      	ldr	r3, [r3, #12]
 800e450:	68db      	ldr	r3, [r3, #12]
 800e452:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	3318      	adds	r3, #24
 800e458:	4618      	mov	r0, r3
 800e45a:	f7ff fd72 	bl	800df42 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	3304      	adds	r3, #4
 800e462:	4618      	mov	r0, r3
 800e464:	f7ff fd6d 	bl	800df42 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e46c:	2201      	movs	r2, #1
 800e46e:	409a      	lsls	r2, r3
 800e470:	4b2b      	ldr	r3, [pc, #172]	; (800e520 <xTaskResumeAll+0x120>)
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	4313      	orrs	r3, r2
 800e476:	4a2a      	ldr	r2, [pc, #168]	; (800e520 <xTaskResumeAll+0x120>)
 800e478:	6013      	str	r3, [r2, #0]
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e47e:	4613      	mov	r3, r2
 800e480:	009b      	lsls	r3, r3, #2
 800e482:	4413      	add	r3, r2
 800e484:	009b      	lsls	r3, r3, #2
 800e486:	4a27      	ldr	r2, [pc, #156]	; (800e524 <xTaskResumeAll+0x124>)
 800e488:	441a      	add	r2, r3
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	3304      	adds	r3, #4
 800e48e:	4619      	mov	r1, r3
 800e490:	4610      	mov	r0, r2
 800e492:	f7ff fcf9 	bl	800de88 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e496:	68fb      	ldr	r3, [r7, #12]
 800e498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e49a:	4b23      	ldr	r3, [pc, #140]	; (800e528 <xTaskResumeAll+0x128>)
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4a0:	429a      	cmp	r2, r3
 800e4a2:	d302      	bcc.n	800e4aa <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800e4a4:	4b21      	ldr	r3, [pc, #132]	; (800e52c <xTaskResumeAll+0x12c>)
 800e4a6:	2201      	movs	r2, #1
 800e4a8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e4aa:	4b1c      	ldr	r3, [pc, #112]	; (800e51c <xTaskResumeAll+0x11c>)
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d1cc      	bne.n	800e44c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e4b2:	68fb      	ldr	r3, [r7, #12]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d001      	beq.n	800e4bc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e4b8:	f000 fa08 	bl	800e8cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e4bc:	4b1c      	ldr	r3, [pc, #112]	; (800e530 <xTaskResumeAll+0x130>)
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e4c2:	687b      	ldr	r3, [r7, #4]
 800e4c4:	2b00      	cmp	r3, #0
 800e4c6:	d010      	beq.n	800e4ea <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e4c8:	f000 f836 	bl	800e538 <xTaskIncrementTick>
 800e4cc:	4603      	mov	r3, r0
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d002      	beq.n	800e4d8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800e4d2:	4b16      	ldr	r3, [pc, #88]	; (800e52c <xTaskResumeAll+0x12c>)
 800e4d4:	2201      	movs	r2, #1
 800e4d6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	3b01      	subs	r3, #1
 800e4dc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d1f1      	bne.n	800e4c8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800e4e4:	4b12      	ldr	r3, [pc, #72]	; (800e530 <xTaskResumeAll+0x130>)
 800e4e6:	2200      	movs	r2, #0
 800e4e8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e4ea:	4b10      	ldr	r3, [pc, #64]	; (800e52c <xTaskResumeAll+0x12c>)
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d009      	beq.n	800e506 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e4f2:	2301      	movs	r3, #1
 800e4f4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e4f6:	4b0f      	ldr	r3, [pc, #60]	; (800e534 <xTaskResumeAll+0x134>)
 800e4f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e4fc:	601a      	str	r2, [r3, #0]
 800e4fe:	f3bf 8f4f 	dsb	sy
 800e502:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e506:	f000 fbc5 	bl	800ec94 <vPortExitCritical>

	return xAlreadyYielded;
 800e50a:	68bb      	ldr	r3, [r7, #8]
}
 800e50c:	4618      	mov	r0, r3
 800e50e:	3710      	adds	r7, #16
 800e510:	46bd      	mov	sp, r7
 800e512:	bd80      	pop	{r7, pc}
 800e514:	20000cf8 	.word	0x20000cf8
 800e518:	20000cd0 	.word	0x20000cd0
 800e51c:	20000c90 	.word	0x20000c90
 800e520:	20000cd8 	.word	0x20000cd8
 800e524:	20000bd4 	.word	0x20000bd4
 800e528:	20000bd0 	.word	0x20000bd0
 800e52c:	20000ce4 	.word	0x20000ce4
 800e530:	20000ce0 	.word	0x20000ce0
 800e534:	e000ed04 	.word	0xe000ed04

0800e538 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e538:	b580      	push	{r7, lr}
 800e53a:	b086      	sub	sp, #24
 800e53c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e53e:	2300      	movs	r3, #0
 800e540:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e542:	4b4e      	ldr	r3, [pc, #312]	; (800e67c <xTaskIncrementTick+0x144>)
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	2b00      	cmp	r3, #0
 800e548:	f040 808e 	bne.w	800e668 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e54c:	4b4c      	ldr	r3, [pc, #304]	; (800e680 <xTaskIncrementTick+0x148>)
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	3301      	adds	r3, #1
 800e552:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e554:	4a4a      	ldr	r2, [pc, #296]	; (800e680 <xTaskIncrementTick+0x148>)
 800e556:	693b      	ldr	r3, [r7, #16]
 800e558:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e55a:	693b      	ldr	r3, [r7, #16]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d120      	bne.n	800e5a2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e560:	4b48      	ldr	r3, [pc, #288]	; (800e684 <xTaskIncrementTick+0x14c>)
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	2b00      	cmp	r3, #0
 800e568:	d00a      	beq.n	800e580 <xTaskIncrementTick+0x48>
	__asm volatile
 800e56a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e56e:	f383 8811 	msr	BASEPRI, r3
 800e572:	f3bf 8f6f 	isb	sy
 800e576:	f3bf 8f4f 	dsb	sy
 800e57a:	603b      	str	r3, [r7, #0]
}
 800e57c:	bf00      	nop
 800e57e:	e7fe      	b.n	800e57e <xTaskIncrementTick+0x46>
 800e580:	4b40      	ldr	r3, [pc, #256]	; (800e684 <xTaskIncrementTick+0x14c>)
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	60fb      	str	r3, [r7, #12]
 800e586:	4b40      	ldr	r3, [pc, #256]	; (800e688 <xTaskIncrementTick+0x150>)
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	4a3e      	ldr	r2, [pc, #248]	; (800e684 <xTaskIncrementTick+0x14c>)
 800e58c:	6013      	str	r3, [r2, #0]
 800e58e:	4a3e      	ldr	r2, [pc, #248]	; (800e688 <xTaskIncrementTick+0x150>)
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	6013      	str	r3, [r2, #0]
 800e594:	4b3d      	ldr	r3, [pc, #244]	; (800e68c <xTaskIncrementTick+0x154>)
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	3301      	adds	r3, #1
 800e59a:	4a3c      	ldr	r2, [pc, #240]	; (800e68c <xTaskIncrementTick+0x154>)
 800e59c:	6013      	str	r3, [r2, #0]
 800e59e:	f000 f995 	bl	800e8cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e5a2:	4b3b      	ldr	r3, [pc, #236]	; (800e690 <xTaskIncrementTick+0x158>)
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	693a      	ldr	r2, [r7, #16]
 800e5a8:	429a      	cmp	r2, r3
 800e5aa:	d348      	bcc.n	800e63e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e5ac:	4b35      	ldr	r3, [pc, #212]	; (800e684 <xTaskIncrementTick+0x14c>)
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	2b00      	cmp	r3, #0
 800e5b4:	d104      	bne.n	800e5c0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e5b6:	4b36      	ldr	r3, [pc, #216]	; (800e690 <xTaskIncrementTick+0x158>)
 800e5b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e5bc:	601a      	str	r2, [r3, #0]
					break;
 800e5be:	e03e      	b.n	800e63e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e5c0:	4b30      	ldr	r3, [pc, #192]	; (800e684 <xTaskIncrementTick+0x14c>)
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	68db      	ldr	r3, [r3, #12]
 800e5c6:	68db      	ldr	r3, [r3, #12]
 800e5c8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e5ca:	68bb      	ldr	r3, [r7, #8]
 800e5cc:	685b      	ldr	r3, [r3, #4]
 800e5ce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e5d0:	693a      	ldr	r2, [r7, #16]
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	429a      	cmp	r2, r3
 800e5d6:	d203      	bcs.n	800e5e0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e5d8:	4a2d      	ldr	r2, [pc, #180]	; (800e690 <xTaskIncrementTick+0x158>)
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e5de:	e02e      	b.n	800e63e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e5e0:	68bb      	ldr	r3, [r7, #8]
 800e5e2:	3304      	adds	r3, #4
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	f7ff fcac 	bl	800df42 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e5ea:	68bb      	ldr	r3, [r7, #8]
 800e5ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d004      	beq.n	800e5fc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e5f2:	68bb      	ldr	r3, [r7, #8]
 800e5f4:	3318      	adds	r3, #24
 800e5f6:	4618      	mov	r0, r3
 800e5f8:	f7ff fca3 	bl	800df42 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e5fc:	68bb      	ldr	r3, [r7, #8]
 800e5fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e600:	2201      	movs	r2, #1
 800e602:	409a      	lsls	r2, r3
 800e604:	4b23      	ldr	r3, [pc, #140]	; (800e694 <xTaskIncrementTick+0x15c>)
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	4313      	orrs	r3, r2
 800e60a:	4a22      	ldr	r2, [pc, #136]	; (800e694 <xTaskIncrementTick+0x15c>)
 800e60c:	6013      	str	r3, [r2, #0]
 800e60e:	68bb      	ldr	r3, [r7, #8]
 800e610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e612:	4613      	mov	r3, r2
 800e614:	009b      	lsls	r3, r3, #2
 800e616:	4413      	add	r3, r2
 800e618:	009b      	lsls	r3, r3, #2
 800e61a:	4a1f      	ldr	r2, [pc, #124]	; (800e698 <xTaskIncrementTick+0x160>)
 800e61c:	441a      	add	r2, r3
 800e61e:	68bb      	ldr	r3, [r7, #8]
 800e620:	3304      	adds	r3, #4
 800e622:	4619      	mov	r1, r3
 800e624:	4610      	mov	r0, r2
 800e626:	f7ff fc2f 	bl	800de88 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e62a:	68bb      	ldr	r3, [r7, #8]
 800e62c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e62e:	4b1b      	ldr	r3, [pc, #108]	; (800e69c <xTaskIncrementTick+0x164>)
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e634:	429a      	cmp	r2, r3
 800e636:	d3b9      	bcc.n	800e5ac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e638:	2301      	movs	r3, #1
 800e63a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e63c:	e7b6      	b.n	800e5ac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e63e:	4b17      	ldr	r3, [pc, #92]	; (800e69c <xTaskIncrementTick+0x164>)
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e644:	4914      	ldr	r1, [pc, #80]	; (800e698 <xTaskIncrementTick+0x160>)
 800e646:	4613      	mov	r3, r2
 800e648:	009b      	lsls	r3, r3, #2
 800e64a:	4413      	add	r3, r2
 800e64c:	009b      	lsls	r3, r3, #2
 800e64e:	440b      	add	r3, r1
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	2b01      	cmp	r3, #1
 800e654:	d901      	bls.n	800e65a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800e656:	2301      	movs	r3, #1
 800e658:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e65a:	4b11      	ldr	r3, [pc, #68]	; (800e6a0 <xTaskIncrementTick+0x168>)
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	d007      	beq.n	800e672 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800e662:	2301      	movs	r3, #1
 800e664:	617b      	str	r3, [r7, #20]
 800e666:	e004      	b.n	800e672 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e668:	4b0e      	ldr	r3, [pc, #56]	; (800e6a4 <xTaskIncrementTick+0x16c>)
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	3301      	adds	r3, #1
 800e66e:	4a0d      	ldr	r2, [pc, #52]	; (800e6a4 <xTaskIncrementTick+0x16c>)
 800e670:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e672:	697b      	ldr	r3, [r7, #20]
}
 800e674:	4618      	mov	r0, r3
 800e676:	3718      	adds	r7, #24
 800e678:	46bd      	mov	sp, r7
 800e67a:	bd80      	pop	{r7, pc}
 800e67c:	20000cf8 	.word	0x20000cf8
 800e680:	20000cd4 	.word	0x20000cd4
 800e684:	20000c88 	.word	0x20000c88
 800e688:	20000c8c 	.word	0x20000c8c
 800e68c:	20000ce8 	.word	0x20000ce8
 800e690:	20000cf0 	.word	0x20000cf0
 800e694:	20000cd8 	.word	0x20000cd8
 800e698:	20000bd4 	.word	0x20000bd4
 800e69c:	20000bd0 	.word	0x20000bd0
 800e6a0:	20000ce4 	.word	0x20000ce4
 800e6a4:	20000ce0 	.word	0x20000ce0

0800e6a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e6a8:	b480      	push	{r7}
 800e6aa:	b087      	sub	sp, #28
 800e6ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e6ae:	4b27      	ldr	r3, [pc, #156]	; (800e74c <vTaskSwitchContext+0xa4>)
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d003      	beq.n	800e6be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e6b6:	4b26      	ldr	r3, [pc, #152]	; (800e750 <vTaskSwitchContext+0xa8>)
 800e6b8:	2201      	movs	r2, #1
 800e6ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e6bc:	e03f      	b.n	800e73e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800e6be:	4b24      	ldr	r3, [pc, #144]	; (800e750 <vTaskSwitchContext+0xa8>)
 800e6c0:	2200      	movs	r2, #0
 800e6c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6c4:	4b23      	ldr	r3, [pc, #140]	; (800e754 <vTaskSwitchContext+0xac>)
 800e6c6:	681b      	ldr	r3, [r3, #0]
 800e6c8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	fab3 f383 	clz	r3, r3
 800e6d0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e6d2:	7afb      	ldrb	r3, [r7, #11]
 800e6d4:	f1c3 031f 	rsb	r3, r3, #31
 800e6d8:	617b      	str	r3, [r7, #20]
 800e6da:	491f      	ldr	r1, [pc, #124]	; (800e758 <vTaskSwitchContext+0xb0>)
 800e6dc:	697a      	ldr	r2, [r7, #20]
 800e6de:	4613      	mov	r3, r2
 800e6e0:	009b      	lsls	r3, r3, #2
 800e6e2:	4413      	add	r3, r2
 800e6e4:	009b      	lsls	r3, r3, #2
 800e6e6:	440b      	add	r3, r1
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d10a      	bne.n	800e704 <vTaskSwitchContext+0x5c>
	__asm volatile
 800e6ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6f2:	f383 8811 	msr	BASEPRI, r3
 800e6f6:	f3bf 8f6f 	isb	sy
 800e6fa:	f3bf 8f4f 	dsb	sy
 800e6fe:	607b      	str	r3, [r7, #4]
}
 800e700:	bf00      	nop
 800e702:	e7fe      	b.n	800e702 <vTaskSwitchContext+0x5a>
 800e704:	697a      	ldr	r2, [r7, #20]
 800e706:	4613      	mov	r3, r2
 800e708:	009b      	lsls	r3, r3, #2
 800e70a:	4413      	add	r3, r2
 800e70c:	009b      	lsls	r3, r3, #2
 800e70e:	4a12      	ldr	r2, [pc, #72]	; (800e758 <vTaskSwitchContext+0xb0>)
 800e710:	4413      	add	r3, r2
 800e712:	613b      	str	r3, [r7, #16]
 800e714:	693b      	ldr	r3, [r7, #16]
 800e716:	685b      	ldr	r3, [r3, #4]
 800e718:	685a      	ldr	r2, [r3, #4]
 800e71a:	693b      	ldr	r3, [r7, #16]
 800e71c:	605a      	str	r2, [r3, #4]
 800e71e:	693b      	ldr	r3, [r7, #16]
 800e720:	685a      	ldr	r2, [r3, #4]
 800e722:	693b      	ldr	r3, [r7, #16]
 800e724:	3308      	adds	r3, #8
 800e726:	429a      	cmp	r2, r3
 800e728:	d104      	bne.n	800e734 <vTaskSwitchContext+0x8c>
 800e72a:	693b      	ldr	r3, [r7, #16]
 800e72c:	685b      	ldr	r3, [r3, #4]
 800e72e:	685a      	ldr	r2, [r3, #4]
 800e730:	693b      	ldr	r3, [r7, #16]
 800e732:	605a      	str	r2, [r3, #4]
 800e734:	693b      	ldr	r3, [r7, #16]
 800e736:	685b      	ldr	r3, [r3, #4]
 800e738:	68db      	ldr	r3, [r3, #12]
 800e73a:	4a08      	ldr	r2, [pc, #32]	; (800e75c <vTaskSwitchContext+0xb4>)
 800e73c:	6013      	str	r3, [r2, #0]
}
 800e73e:	bf00      	nop
 800e740:	371c      	adds	r7, #28
 800e742:	46bd      	mov	sp, r7
 800e744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e748:	4770      	bx	lr
 800e74a:	bf00      	nop
 800e74c:	20000cf8 	.word	0x20000cf8
 800e750:	20000ce4 	.word	0x20000ce4
 800e754:	20000cd8 	.word	0x20000cd8
 800e758:	20000bd4 	.word	0x20000bd4
 800e75c:	20000bd0 	.word	0x20000bd0

0800e760 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e760:	b580      	push	{r7, lr}
 800e762:	b082      	sub	sp, #8
 800e764:	af00      	add	r7, sp, #0
 800e766:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e768:	f000 f852 	bl	800e810 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e76c:	4b06      	ldr	r3, [pc, #24]	; (800e788 <prvIdleTask+0x28>)
 800e76e:	681b      	ldr	r3, [r3, #0]
 800e770:	2b01      	cmp	r3, #1
 800e772:	d9f9      	bls.n	800e768 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e774:	4b05      	ldr	r3, [pc, #20]	; (800e78c <prvIdleTask+0x2c>)
 800e776:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e77a:	601a      	str	r2, [r3, #0]
 800e77c:	f3bf 8f4f 	dsb	sy
 800e780:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e784:	e7f0      	b.n	800e768 <prvIdleTask+0x8>
 800e786:	bf00      	nop
 800e788:	20000bd4 	.word	0x20000bd4
 800e78c:	e000ed04 	.word	0xe000ed04

0800e790 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e790:	b580      	push	{r7, lr}
 800e792:	b082      	sub	sp, #8
 800e794:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e796:	2300      	movs	r3, #0
 800e798:	607b      	str	r3, [r7, #4]
 800e79a:	e00c      	b.n	800e7b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e79c:	687a      	ldr	r2, [r7, #4]
 800e79e:	4613      	mov	r3, r2
 800e7a0:	009b      	lsls	r3, r3, #2
 800e7a2:	4413      	add	r3, r2
 800e7a4:	009b      	lsls	r3, r3, #2
 800e7a6:	4a12      	ldr	r2, [pc, #72]	; (800e7f0 <prvInitialiseTaskLists+0x60>)
 800e7a8:	4413      	add	r3, r2
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	f7ff fb3f 	bl	800de2e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e7b0:	687b      	ldr	r3, [r7, #4]
 800e7b2:	3301      	adds	r3, #1
 800e7b4:	607b      	str	r3, [r7, #4]
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	2b06      	cmp	r3, #6
 800e7ba:	d9ef      	bls.n	800e79c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e7bc:	480d      	ldr	r0, [pc, #52]	; (800e7f4 <prvInitialiseTaskLists+0x64>)
 800e7be:	f7ff fb36 	bl	800de2e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e7c2:	480d      	ldr	r0, [pc, #52]	; (800e7f8 <prvInitialiseTaskLists+0x68>)
 800e7c4:	f7ff fb33 	bl	800de2e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e7c8:	480c      	ldr	r0, [pc, #48]	; (800e7fc <prvInitialiseTaskLists+0x6c>)
 800e7ca:	f7ff fb30 	bl	800de2e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e7ce:	480c      	ldr	r0, [pc, #48]	; (800e800 <prvInitialiseTaskLists+0x70>)
 800e7d0:	f7ff fb2d 	bl	800de2e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e7d4:	480b      	ldr	r0, [pc, #44]	; (800e804 <prvInitialiseTaskLists+0x74>)
 800e7d6:	f7ff fb2a 	bl	800de2e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e7da:	4b0b      	ldr	r3, [pc, #44]	; (800e808 <prvInitialiseTaskLists+0x78>)
 800e7dc:	4a05      	ldr	r2, [pc, #20]	; (800e7f4 <prvInitialiseTaskLists+0x64>)
 800e7de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e7e0:	4b0a      	ldr	r3, [pc, #40]	; (800e80c <prvInitialiseTaskLists+0x7c>)
 800e7e2:	4a05      	ldr	r2, [pc, #20]	; (800e7f8 <prvInitialiseTaskLists+0x68>)
 800e7e4:	601a      	str	r2, [r3, #0]
}
 800e7e6:	bf00      	nop
 800e7e8:	3708      	adds	r7, #8
 800e7ea:	46bd      	mov	sp, r7
 800e7ec:	bd80      	pop	{r7, pc}
 800e7ee:	bf00      	nop
 800e7f0:	20000bd4 	.word	0x20000bd4
 800e7f4:	20000c60 	.word	0x20000c60
 800e7f8:	20000c74 	.word	0x20000c74
 800e7fc:	20000c90 	.word	0x20000c90
 800e800:	20000ca4 	.word	0x20000ca4
 800e804:	20000cbc 	.word	0x20000cbc
 800e808:	20000c88 	.word	0x20000c88
 800e80c:	20000c8c 	.word	0x20000c8c

0800e810 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e810:	b580      	push	{r7, lr}
 800e812:	b082      	sub	sp, #8
 800e814:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e816:	e019      	b.n	800e84c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e818:	f000 fa0c 	bl	800ec34 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e81c:	4b10      	ldr	r3, [pc, #64]	; (800e860 <prvCheckTasksWaitingTermination+0x50>)
 800e81e:	68db      	ldr	r3, [r3, #12]
 800e820:	68db      	ldr	r3, [r3, #12]
 800e822:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	3304      	adds	r3, #4
 800e828:	4618      	mov	r0, r3
 800e82a:	f7ff fb8a 	bl	800df42 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e82e:	4b0d      	ldr	r3, [pc, #52]	; (800e864 <prvCheckTasksWaitingTermination+0x54>)
 800e830:	681b      	ldr	r3, [r3, #0]
 800e832:	3b01      	subs	r3, #1
 800e834:	4a0b      	ldr	r2, [pc, #44]	; (800e864 <prvCheckTasksWaitingTermination+0x54>)
 800e836:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e838:	4b0b      	ldr	r3, [pc, #44]	; (800e868 <prvCheckTasksWaitingTermination+0x58>)
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	3b01      	subs	r3, #1
 800e83e:	4a0a      	ldr	r2, [pc, #40]	; (800e868 <prvCheckTasksWaitingTermination+0x58>)
 800e840:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e842:	f000 fa27 	bl	800ec94 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e846:	6878      	ldr	r0, [r7, #4]
 800e848:	f000 f810 	bl	800e86c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e84c:	4b06      	ldr	r3, [pc, #24]	; (800e868 <prvCheckTasksWaitingTermination+0x58>)
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d1e1      	bne.n	800e818 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e854:	bf00      	nop
 800e856:	bf00      	nop
 800e858:	3708      	adds	r7, #8
 800e85a:	46bd      	mov	sp, r7
 800e85c:	bd80      	pop	{r7, pc}
 800e85e:	bf00      	nop
 800e860:	20000ca4 	.word	0x20000ca4
 800e864:	20000cd0 	.word	0x20000cd0
 800e868:	20000cb8 	.word	0x20000cb8

0800e86c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b084      	sub	sp, #16
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d108      	bne.n	800e890 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e882:	4618      	mov	r0, r3
 800e884:	f000 fb84 	bl	800ef90 <vPortFree>
				vPortFree( pxTCB );
 800e888:	6878      	ldr	r0, [r7, #4]
 800e88a:	f000 fb81 	bl	800ef90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e88e:	e018      	b.n	800e8c2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e896:	2b01      	cmp	r3, #1
 800e898:	d103      	bne.n	800e8a2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e89a:	6878      	ldr	r0, [r7, #4]
 800e89c:	f000 fb78 	bl	800ef90 <vPortFree>
	}
 800e8a0:	e00f      	b.n	800e8c2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e8a2:	687b      	ldr	r3, [r7, #4]
 800e8a4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e8a8:	2b02      	cmp	r3, #2
 800e8aa:	d00a      	beq.n	800e8c2 <prvDeleteTCB+0x56>
	__asm volatile
 800e8ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8b0:	f383 8811 	msr	BASEPRI, r3
 800e8b4:	f3bf 8f6f 	isb	sy
 800e8b8:	f3bf 8f4f 	dsb	sy
 800e8bc:	60fb      	str	r3, [r7, #12]
}
 800e8be:	bf00      	nop
 800e8c0:	e7fe      	b.n	800e8c0 <prvDeleteTCB+0x54>
	}
 800e8c2:	bf00      	nop
 800e8c4:	3710      	adds	r7, #16
 800e8c6:	46bd      	mov	sp, r7
 800e8c8:	bd80      	pop	{r7, pc}
	...

0800e8cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e8cc:	b480      	push	{r7}
 800e8ce:	b083      	sub	sp, #12
 800e8d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e8d2:	4b0c      	ldr	r3, [pc, #48]	; (800e904 <prvResetNextTaskUnblockTime+0x38>)
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d104      	bne.n	800e8e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e8dc:	4b0a      	ldr	r3, [pc, #40]	; (800e908 <prvResetNextTaskUnblockTime+0x3c>)
 800e8de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e8e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e8e4:	e008      	b.n	800e8f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e8e6:	4b07      	ldr	r3, [pc, #28]	; (800e904 <prvResetNextTaskUnblockTime+0x38>)
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	68db      	ldr	r3, [r3, #12]
 800e8ec:	68db      	ldr	r3, [r3, #12]
 800e8ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	685b      	ldr	r3, [r3, #4]
 800e8f4:	4a04      	ldr	r2, [pc, #16]	; (800e908 <prvResetNextTaskUnblockTime+0x3c>)
 800e8f6:	6013      	str	r3, [r2, #0]
}
 800e8f8:	bf00      	nop
 800e8fa:	370c      	adds	r7, #12
 800e8fc:	46bd      	mov	sp, r7
 800e8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e902:	4770      	bx	lr
 800e904:	20000c88 	.word	0x20000c88
 800e908:	20000cf0 	.word	0x20000cf0

0800e90c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b084      	sub	sp, #16
 800e910:	af00      	add	r7, sp, #0
 800e912:	6078      	str	r0, [r7, #4]
 800e914:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e916:	4b29      	ldr	r3, [pc, #164]	; (800e9bc <prvAddCurrentTaskToDelayedList+0xb0>)
 800e918:	681b      	ldr	r3, [r3, #0]
 800e91a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e91c:	4b28      	ldr	r3, [pc, #160]	; (800e9c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	3304      	adds	r3, #4
 800e922:	4618      	mov	r0, r3
 800e924:	f7ff fb0d 	bl	800df42 <uxListRemove>
 800e928:	4603      	mov	r3, r0
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d10b      	bne.n	800e946 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e92e:	4b24      	ldr	r3, [pc, #144]	; (800e9c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e934:	2201      	movs	r2, #1
 800e936:	fa02 f303 	lsl.w	r3, r2, r3
 800e93a:	43da      	mvns	r2, r3
 800e93c:	4b21      	ldr	r3, [pc, #132]	; (800e9c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	4013      	ands	r3, r2
 800e942:	4a20      	ldr	r2, [pc, #128]	; (800e9c4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e944:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e94c:	d10a      	bne.n	800e964 <prvAddCurrentTaskToDelayedList+0x58>
 800e94e:	683b      	ldr	r3, [r7, #0]
 800e950:	2b00      	cmp	r3, #0
 800e952:	d007      	beq.n	800e964 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e954:	4b1a      	ldr	r3, [pc, #104]	; (800e9c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	3304      	adds	r3, #4
 800e95a:	4619      	mov	r1, r3
 800e95c:	481a      	ldr	r0, [pc, #104]	; (800e9c8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e95e:	f7ff fa93 	bl	800de88 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e962:	e026      	b.n	800e9b2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e964:	68fa      	ldr	r2, [r7, #12]
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	4413      	add	r3, r2
 800e96a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e96c:	4b14      	ldr	r3, [pc, #80]	; (800e9c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e96e:	681b      	ldr	r3, [r3, #0]
 800e970:	68ba      	ldr	r2, [r7, #8]
 800e972:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e974:	68ba      	ldr	r2, [r7, #8]
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	429a      	cmp	r2, r3
 800e97a:	d209      	bcs.n	800e990 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e97c:	4b13      	ldr	r3, [pc, #76]	; (800e9cc <prvAddCurrentTaskToDelayedList+0xc0>)
 800e97e:	681a      	ldr	r2, [r3, #0]
 800e980:	4b0f      	ldr	r3, [pc, #60]	; (800e9c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	3304      	adds	r3, #4
 800e986:	4619      	mov	r1, r3
 800e988:	4610      	mov	r0, r2
 800e98a:	f7ff faa1 	bl	800ded0 <vListInsert>
}
 800e98e:	e010      	b.n	800e9b2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e990:	4b0f      	ldr	r3, [pc, #60]	; (800e9d0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e992:	681a      	ldr	r2, [r3, #0]
 800e994:	4b0a      	ldr	r3, [pc, #40]	; (800e9c0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	3304      	adds	r3, #4
 800e99a:	4619      	mov	r1, r3
 800e99c:	4610      	mov	r0, r2
 800e99e:	f7ff fa97 	bl	800ded0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e9a2:	4b0c      	ldr	r3, [pc, #48]	; (800e9d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	68ba      	ldr	r2, [r7, #8]
 800e9a8:	429a      	cmp	r2, r3
 800e9aa:	d202      	bcs.n	800e9b2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e9ac:	4a09      	ldr	r2, [pc, #36]	; (800e9d4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e9ae:	68bb      	ldr	r3, [r7, #8]
 800e9b0:	6013      	str	r3, [r2, #0]
}
 800e9b2:	bf00      	nop
 800e9b4:	3710      	adds	r7, #16
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	bd80      	pop	{r7, pc}
 800e9ba:	bf00      	nop
 800e9bc:	20000cd4 	.word	0x20000cd4
 800e9c0:	20000bd0 	.word	0x20000bd0
 800e9c4:	20000cd8 	.word	0x20000cd8
 800e9c8:	20000cbc 	.word	0x20000cbc
 800e9cc:	20000c8c 	.word	0x20000c8c
 800e9d0:	20000c88 	.word	0x20000c88
 800e9d4:	20000cf0 	.word	0x20000cf0

0800e9d8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e9d8:	b480      	push	{r7}
 800e9da:	b085      	sub	sp, #20
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	60f8      	str	r0, [r7, #12]
 800e9e0:	60b9      	str	r1, [r7, #8]
 800e9e2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	3b04      	subs	r3, #4
 800e9e8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e9f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e9f2:	68fb      	ldr	r3, [r7, #12]
 800e9f4:	3b04      	subs	r3, #4
 800e9f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e9f8:	68bb      	ldr	r3, [r7, #8]
 800e9fa:	f023 0201 	bic.w	r2, r3, #1
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	3b04      	subs	r3, #4
 800ea06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ea08:	4a0c      	ldr	r2, [pc, #48]	; (800ea3c <pxPortInitialiseStack+0x64>)
 800ea0a:	68fb      	ldr	r3, [r7, #12]
 800ea0c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	3b14      	subs	r3, #20
 800ea12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ea14:	687a      	ldr	r2, [r7, #4]
 800ea16:	68fb      	ldr	r3, [r7, #12]
 800ea18:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	3b04      	subs	r3, #4
 800ea1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	f06f 0202 	mvn.w	r2, #2
 800ea26:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	3b20      	subs	r3, #32
 800ea2c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ea2e:	68fb      	ldr	r3, [r7, #12]
}
 800ea30:	4618      	mov	r0, r3
 800ea32:	3714      	adds	r7, #20
 800ea34:	46bd      	mov	sp, r7
 800ea36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea3a:	4770      	bx	lr
 800ea3c:	0800ea41 	.word	0x0800ea41

0800ea40 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ea40:	b480      	push	{r7}
 800ea42:	b085      	sub	sp, #20
 800ea44:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ea46:	2300      	movs	r3, #0
 800ea48:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ea4a:	4b12      	ldr	r3, [pc, #72]	; (800ea94 <prvTaskExitError+0x54>)
 800ea4c:	681b      	ldr	r3, [r3, #0]
 800ea4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ea52:	d00a      	beq.n	800ea6a <prvTaskExitError+0x2a>
	__asm volatile
 800ea54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea58:	f383 8811 	msr	BASEPRI, r3
 800ea5c:	f3bf 8f6f 	isb	sy
 800ea60:	f3bf 8f4f 	dsb	sy
 800ea64:	60fb      	str	r3, [r7, #12]
}
 800ea66:	bf00      	nop
 800ea68:	e7fe      	b.n	800ea68 <prvTaskExitError+0x28>
	__asm volatile
 800ea6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea6e:	f383 8811 	msr	BASEPRI, r3
 800ea72:	f3bf 8f6f 	isb	sy
 800ea76:	f3bf 8f4f 	dsb	sy
 800ea7a:	60bb      	str	r3, [r7, #8]
}
 800ea7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ea7e:	bf00      	nop
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d0fc      	beq.n	800ea80 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ea86:	bf00      	nop
 800ea88:	bf00      	nop
 800ea8a:	3714      	adds	r7, #20
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea92:	4770      	bx	lr
 800ea94:	200000e8 	.word	0x200000e8
	...

0800eaa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800eaa0:	4b07      	ldr	r3, [pc, #28]	; (800eac0 <pxCurrentTCBConst2>)
 800eaa2:	6819      	ldr	r1, [r3, #0]
 800eaa4:	6808      	ldr	r0, [r1, #0]
 800eaa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eaaa:	f380 8809 	msr	PSP, r0
 800eaae:	f3bf 8f6f 	isb	sy
 800eab2:	f04f 0000 	mov.w	r0, #0
 800eab6:	f380 8811 	msr	BASEPRI, r0
 800eaba:	4770      	bx	lr
 800eabc:	f3af 8000 	nop.w

0800eac0 <pxCurrentTCBConst2>:
 800eac0:	20000bd0 	.word	0x20000bd0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800eac4:	bf00      	nop
 800eac6:	bf00      	nop

0800eac8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800eac8:	4808      	ldr	r0, [pc, #32]	; (800eaec <prvPortStartFirstTask+0x24>)
 800eaca:	6800      	ldr	r0, [r0, #0]
 800eacc:	6800      	ldr	r0, [r0, #0]
 800eace:	f380 8808 	msr	MSP, r0
 800ead2:	f04f 0000 	mov.w	r0, #0
 800ead6:	f380 8814 	msr	CONTROL, r0
 800eada:	b662      	cpsie	i
 800eadc:	b661      	cpsie	f
 800eade:	f3bf 8f4f 	dsb	sy
 800eae2:	f3bf 8f6f 	isb	sy
 800eae6:	df00      	svc	0
 800eae8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800eaea:	bf00      	nop
 800eaec:	e000ed08 	.word	0xe000ed08

0800eaf0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b086      	sub	sp, #24
 800eaf4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800eaf6:	4b46      	ldr	r3, [pc, #280]	; (800ec10 <xPortStartScheduler+0x120>)
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	4a46      	ldr	r2, [pc, #280]	; (800ec14 <xPortStartScheduler+0x124>)
 800eafc:	4293      	cmp	r3, r2
 800eafe:	d10a      	bne.n	800eb16 <xPortStartScheduler+0x26>
	__asm volatile
 800eb00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb04:	f383 8811 	msr	BASEPRI, r3
 800eb08:	f3bf 8f6f 	isb	sy
 800eb0c:	f3bf 8f4f 	dsb	sy
 800eb10:	613b      	str	r3, [r7, #16]
}
 800eb12:	bf00      	nop
 800eb14:	e7fe      	b.n	800eb14 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800eb16:	4b3e      	ldr	r3, [pc, #248]	; (800ec10 <xPortStartScheduler+0x120>)
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	4a3f      	ldr	r2, [pc, #252]	; (800ec18 <xPortStartScheduler+0x128>)
 800eb1c:	4293      	cmp	r3, r2
 800eb1e:	d10a      	bne.n	800eb36 <xPortStartScheduler+0x46>
	__asm volatile
 800eb20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb24:	f383 8811 	msr	BASEPRI, r3
 800eb28:	f3bf 8f6f 	isb	sy
 800eb2c:	f3bf 8f4f 	dsb	sy
 800eb30:	60fb      	str	r3, [r7, #12]
}
 800eb32:	bf00      	nop
 800eb34:	e7fe      	b.n	800eb34 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800eb36:	4b39      	ldr	r3, [pc, #228]	; (800ec1c <xPortStartScheduler+0x12c>)
 800eb38:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800eb3a:	697b      	ldr	r3, [r7, #20]
 800eb3c:	781b      	ldrb	r3, [r3, #0]
 800eb3e:	b2db      	uxtb	r3, r3
 800eb40:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800eb42:	697b      	ldr	r3, [r7, #20]
 800eb44:	22ff      	movs	r2, #255	; 0xff
 800eb46:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800eb48:	697b      	ldr	r3, [r7, #20]
 800eb4a:	781b      	ldrb	r3, [r3, #0]
 800eb4c:	b2db      	uxtb	r3, r3
 800eb4e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800eb50:	78fb      	ldrb	r3, [r7, #3]
 800eb52:	b2db      	uxtb	r3, r3
 800eb54:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800eb58:	b2da      	uxtb	r2, r3
 800eb5a:	4b31      	ldr	r3, [pc, #196]	; (800ec20 <xPortStartScheduler+0x130>)
 800eb5c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800eb5e:	4b31      	ldr	r3, [pc, #196]	; (800ec24 <xPortStartScheduler+0x134>)
 800eb60:	2207      	movs	r2, #7
 800eb62:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800eb64:	e009      	b.n	800eb7a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800eb66:	4b2f      	ldr	r3, [pc, #188]	; (800ec24 <xPortStartScheduler+0x134>)
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	3b01      	subs	r3, #1
 800eb6c:	4a2d      	ldr	r2, [pc, #180]	; (800ec24 <xPortStartScheduler+0x134>)
 800eb6e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800eb70:	78fb      	ldrb	r3, [r7, #3]
 800eb72:	b2db      	uxtb	r3, r3
 800eb74:	005b      	lsls	r3, r3, #1
 800eb76:	b2db      	uxtb	r3, r3
 800eb78:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800eb7a:	78fb      	ldrb	r3, [r7, #3]
 800eb7c:	b2db      	uxtb	r3, r3
 800eb7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb82:	2b80      	cmp	r3, #128	; 0x80
 800eb84:	d0ef      	beq.n	800eb66 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800eb86:	4b27      	ldr	r3, [pc, #156]	; (800ec24 <xPortStartScheduler+0x134>)
 800eb88:	681b      	ldr	r3, [r3, #0]
 800eb8a:	f1c3 0307 	rsb	r3, r3, #7
 800eb8e:	2b04      	cmp	r3, #4
 800eb90:	d00a      	beq.n	800eba8 <xPortStartScheduler+0xb8>
	__asm volatile
 800eb92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb96:	f383 8811 	msr	BASEPRI, r3
 800eb9a:	f3bf 8f6f 	isb	sy
 800eb9e:	f3bf 8f4f 	dsb	sy
 800eba2:	60bb      	str	r3, [r7, #8]
}
 800eba4:	bf00      	nop
 800eba6:	e7fe      	b.n	800eba6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800eba8:	4b1e      	ldr	r3, [pc, #120]	; (800ec24 <xPortStartScheduler+0x134>)
 800ebaa:	681b      	ldr	r3, [r3, #0]
 800ebac:	021b      	lsls	r3, r3, #8
 800ebae:	4a1d      	ldr	r2, [pc, #116]	; (800ec24 <xPortStartScheduler+0x134>)
 800ebb0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ebb2:	4b1c      	ldr	r3, [pc, #112]	; (800ec24 <xPortStartScheduler+0x134>)
 800ebb4:	681b      	ldr	r3, [r3, #0]
 800ebb6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ebba:	4a1a      	ldr	r2, [pc, #104]	; (800ec24 <xPortStartScheduler+0x134>)
 800ebbc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	b2da      	uxtb	r2, r3
 800ebc2:	697b      	ldr	r3, [r7, #20]
 800ebc4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ebc6:	4b18      	ldr	r3, [pc, #96]	; (800ec28 <xPortStartScheduler+0x138>)
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	4a17      	ldr	r2, [pc, #92]	; (800ec28 <xPortStartScheduler+0x138>)
 800ebcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ebd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ebd2:	4b15      	ldr	r3, [pc, #84]	; (800ec28 <xPortStartScheduler+0x138>)
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	4a14      	ldr	r2, [pc, #80]	; (800ec28 <xPortStartScheduler+0x138>)
 800ebd8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ebdc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ebde:	f000 f8dd 	bl	800ed9c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ebe2:	4b12      	ldr	r3, [pc, #72]	; (800ec2c <xPortStartScheduler+0x13c>)
 800ebe4:	2200      	movs	r2, #0
 800ebe6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ebe8:	f000 f8fc 	bl	800ede4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ebec:	4b10      	ldr	r3, [pc, #64]	; (800ec30 <xPortStartScheduler+0x140>)
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	4a0f      	ldr	r2, [pc, #60]	; (800ec30 <xPortStartScheduler+0x140>)
 800ebf2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800ebf6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800ebf8:	f7ff ff66 	bl	800eac8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800ebfc:	f7ff fd54 	bl	800e6a8 <vTaskSwitchContext>
	prvTaskExitError();
 800ec00:	f7ff ff1e 	bl	800ea40 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800ec04:	2300      	movs	r3, #0
}
 800ec06:	4618      	mov	r0, r3
 800ec08:	3718      	adds	r7, #24
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	bd80      	pop	{r7, pc}
 800ec0e:	bf00      	nop
 800ec10:	e000ed00 	.word	0xe000ed00
 800ec14:	410fc271 	.word	0x410fc271
 800ec18:	410fc270 	.word	0x410fc270
 800ec1c:	e000e400 	.word	0xe000e400
 800ec20:	20000cfc 	.word	0x20000cfc
 800ec24:	20000d00 	.word	0x20000d00
 800ec28:	e000ed20 	.word	0xe000ed20
 800ec2c:	200000e8 	.word	0x200000e8
 800ec30:	e000ef34 	.word	0xe000ef34

0800ec34 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ec34:	b480      	push	{r7}
 800ec36:	b083      	sub	sp, #12
 800ec38:	af00      	add	r7, sp, #0
	__asm volatile
 800ec3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec3e:	f383 8811 	msr	BASEPRI, r3
 800ec42:	f3bf 8f6f 	isb	sy
 800ec46:	f3bf 8f4f 	dsb	sy
 800ec4a:	607b      	str	r3, [r7, #4]
}
 800ec4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ec4e:	4b0f      	ldr	r3, [pc, #60]	; (800ec8c <vPortEnterCritical+0x58>)
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	3301      	adds	r3, #1
 800ec54:	4a0d      	ldr	r2, [pc, #52]	; (800ec8c <vPortEnterCritical+0x58>)
 800ec56:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ec58:	4b0c      	ldr	r3, [pc, #48]	; (800ec8c <vPortEnterCritical+0x58>)
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	2b01      	cmp	r3, #1
 800ec5e:	d10f      	bne.n	800ec80 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ec60:	4b0b      	ldr	r3, [pc, #44]	; (800ec90 <vPortEnterCritical+0x5c>)
 800ec62:	681b      	ldr	r3, [r3, #0]
 800ec64:	b2db      	uxtb	r3, r3
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d00a      	beq.n	800ec80 <vPortEnterCritical+0x4c>
	__asm volatile
 800ec6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec6e:	f383 8811 	msr	BASEPRI, r3
 800ec72:	f3bf 8f6f 	isb	sy
 800ec76:	f3bf 8f4f 	dsb	sy
 800ec7a:	603b      	str	r3, [r7, #0]
}
 800ec7c:	bf00      	nop
 800ec7e:	e7fe      	b.n	800ec7e <vPortEnterCritical+0x4a>
	}
}
 800ec80:	bf00      	nop
 800ec82:	370c      	adds	r7, #12
 800ec84:	46bd      	mov	sp, r7
 800ec86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec8a:	4770      	bx	lr
 800ec8c:	200000e8 	.word	0x200000e8
 800ec90:	e000ed04 	.word	0xe000ed04

0800ec94 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800ec94:	b480      	push	{r7}
 800ec96:	b083      	sub	sp, #12
 800ec98:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800ec9a:	4b12      	ldr	r3, [pc, #72]	; (800ece4 <vPortExitCritical+0x50>)
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d10a      	bne.n	800ecb8 <vPortExitCritical+0x24>
	__asm volatile
 800eca2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eca6:	f383 8811 	msr	BASEPRI, r3
 800ecaa:	f3bf 8f6f 	isb	sy
 800ecae:	f3bf 8f4f 	dsb	sy
 800ecb2:	607b      	str	r3, [r7, #4]
}
 800ecb4:	bf00      	nop
 800ecb6:	e7fe      	b.n	800ecb6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800ecb8:	4b0a      	ldr	r3, [pc, #40]	; (800ece4 <vPortExitCritical+0x50>)
 800ecba:	681b      	ldr	r3, [r3, #0]
 800ecbc:	3b01      	subs	r3, #1
 800ecbe:	4a09      	ldr	r2, [pc, #36]	; (800ece4 <vPortExitCritical+0x50>)
 800ecc0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ecc2:	4b08      	ldr	r3, [pc, #32]	; (800ece4 <vPortExitCritical+0x50>)
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d105      	bne.n	800ecd6 <vPortExitCritical+0x42>
 800ecca:	2300      	movs	r3, #0
 800eccc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ecce:	683b      	ldr	r3, [r7, #0]
 800ecd0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ecd4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ecd6:	bf00      	nop
 800ecd8:	370c      	adds	r7, #12
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece0:	4770      	bx	lr
 800ece2:	bf00      	nop
 800ece4:	200000e8 	.word	0x200000e8
	...

0800ecf0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ecf0:	f3ef 8009 	mrs	r0, PSP
 800ecf4:	f3bf 8f6f 	isb	sy
 800ecf8:	4b15      	ldr	r3, [pc, #84]	; (800ed50 <pxCurrentTCBConst>)
 800ecfa:	681a      	ldr	r2, [r3, #0]
 800ecfc:	f01e 0f10 	tst.w	lr, #16
 800ed00:	bf08      	it	eq
 800ed02:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ed06:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed0a:	6010      	str	r0, [r2, #0]
 800ed0c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ed10:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ed14:	f380 8811 	msr	BASEPRI, r0
 800ed18:	f3bf 8f4f 	dsb	sy
 800ed1c:	f3bf 8f6f 	isb	sy
 800ed20:	f7ff fcc2 	bl	800e6a8 <vTaskSwitchContext>
 800ed24:	f04f 0000 	mov.w	r0, #0
 800ed28:	f380 8811 	msr	BASEPRI, r0
 800ed2c:	bc09      	pop	{r0, r3}
 800ed2e:	6819      	ldr	r1, [r3, #0]
 800ed30:	6808      	ldr	r0, [r1, #0]
 800ed32:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed36:	f01e 0f10 	tst.w	lr, #16
 800ed3a:	bf08      	it	eq
 800ed3c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ed40:	f380 8809 	msr	PSP, r0
 800ed44:	f3bf 8f6f 	isb	sy
 800ed48:	4770      	bx	lr
 800ed4a:	bf00      	nop
 800ed4c:	f3af 8000 	nop.w

0800ed50 <pxCurrentTCBConst>:
 800ed50:	20000bd0 	.word	0x20000bd0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ed54:	bf00      	nop
 800ed56:	bf00      	nop

0800ed58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b082      	sub	sp, #8
 800ed5c:	af00      	add	r7, sp, #0
	__asm volatile
 800ed5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed62:	f383 8811 	msr	BASEPRI, r3
 800ed66:	f3bf 8f6f 	isb	sy
 800ed6a:	f3bf 8f4f 	dsb	sy
 800ed6e:	607b      	str	r3, [r7, #4]
}
 800ed70:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ed72:	f7ff fbe1 	bl	800e538 <xTaskIncrementTick>
 800ed76:	4603      	mov	r3, r0
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d003      	beq.n	800ed84 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ed7c:	4b06      	ldr	r3, [pc, #24]	; (800ed98 <SysTick_Handler+0x40>)
 800ed7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ed82:	601a      	str	r2, [r3, #0]
 800ed84:	2300      	movs	r3, #0
 800ed86:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ed88:	683b      	ldr	r3, [r7, #0]
 800ed8a:	f383 8811 	msr	BASEPRI, r3
}
 800ed8e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ed90:	bf00      	nop
 800ed92:	3708      	adds	r7, #8
 800ed94:	46bd      	mov	sp, r7
 800ed96:	bd80      	pop	{r7, pc}
 800ed98:	e000ed04 	.word	0xe000ed04

0800ed9c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ed9c:	b480      	push	{r7}
 800ed9e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800eda0:	4b0b      	ldr	r3, [pc, #44]	; (800edd0 <vPortSetupTimerInterrupt+0x34>)
 800eda2:	2200      	movs	r2, #0
 800eda4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800eda6:	4b0b      	ldr	r3, [pc, #44]	; (800edd4 <vPortSetupTimerInterrupt+0x38>)
 800eda8:	2200      	movs	r2, #0
 800edaa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800edac:	4b0a      	ldr	r3, [pc, #40]	; (800edd8 <vPortSetupTimerInterrupt+0x3c>)
 800edae:	681b      	ldr	r3, [r3, #0]
 800edb0:	4a0a      	ldr	r2, [pc, #40]	; (800eddc <vPortSetupTimerInterrupt+0x40>)
 800edb2:	fba2 2303 	umull	r2, r3, r2, r3
 800edb6:	099b      	lsrs	r3, r3, #6
 800edb8:	4a09      	ldr	r2, [pc, #36]	; (800ede0 <vPortSetupTimerInterrupt+0x44>)
 800edba:	3b01      	subs	r3, #1
 800edbc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800edbe:	4b04      	ldr	r3, [pc, #16]	; (800edd0 <vPortSetupTimerInterrupt+0x34>)
 800edc0:	2207      	movs	r2, #7
 800edc2:	601a      	str	r2, [r3, #0]
}
 800edc4:	bf00      	nop
 800edc6:	46bd      	mov	sp, r7
 800edc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edcc:	4770      	bx	lr
 800edce:	bf00      	nop
 800edd0:	e000e010 	.word	0xe000e010
 800edd4:	e000e018 	.word	0xe000e018
 800edd8:	20000050 	.word	0x20000050
 800eddc:	10624dd3 	.word	0x10624dd3
 800ede0:	e000e014 	.word	0xe000e014

0800ede4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ede4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800edf4 <vPortEnableVFP+0x10>
 800ede8:	6801      	ldr	r1, [r0, #0]
 800edea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800edee:	6001      	str	r1, [r0, #0]
 800edf0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800edf2:	bf00      	nop
 800edf4:	e000ed88 	.word	0xe000ed88

0800edf8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800edf8:	b580      	push	{r7, lr}
 800edfa:	b08a      	sub	sp, #40	; 0x28
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ee00:	2300      	movs	r3, #0
 800ee02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ee04:	f7ff faee 	bl	800e3e4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ee08:	4b5b      	ldr	r3, [pc, #364]	; (800ef78 <pvPortMalloc+0x180>)
 800ee0a:	681b      	ldr	r3, [r3, #0]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d101      	bne.n	800ee14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ee10:	f000 f920 	bl	800f054 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ee14:	4b59      	ldr	r3, [pc, #356]	; (800ef7c <pvPortMalloc+0x184>)
 800ee16:	681a      	ldr	r2, [r3, #0]
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	4013      	ands	r3, r2
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	f040 8093 	bne.w	800ef48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d01d      	beq.n	800ee64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800ee28:	2208      	movs	r2, #8
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	4413      	add	r3, r2
 800ee2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	f003 0307 	and.w	r3, r3, #7
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d014      	beq.n	800ee64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	f023 0307 	bic.w	r3, r3, #7
 800ee40:	3308      	adds	r3, #8
 800ee42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	f003 0307 	and.w	r3, r3, #7
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d00a      	beq.n	800ee64 <pvPortMalloc+0x6c>
	__asm volatile
 800ee4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee52:	f383 8811 	msr	BASEPRI, r3
 800ee56:	f3bf 8f6f 	isb	sy
 800ee5a:	f3bf 8f4f 	dsb	sy
 800ee5e:	617b      	str	r3, [r7, #20]
}
 800ee60:	bf00      	nop
 800ee62:	e7fe      	b.n	800ee62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d06e      	beq.n	800ef48 <pvPortMalloc+0x150>
 800ee6a:	4b45      	ldr	r3, [pc, #276]	; (800ef80 <pvPortMalloc+0x188>)
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	687a      	ldr	r2, [r7, #4]
 800ee70:	429a      	cmp	r2, r3
 800ee72:	d869      	bhi.n	800ef48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ee74:	4b43      	ldr	r3, [pc, #268]	; (800ef84 <pvPortMalloc+0x18c>)
 800ee76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ee78:	4b42      	ldr	r3, [pc, #264]	; (800ef84 <pvPortMalloc+0x18c>)
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ee7e:	e004      	b.n	800ee8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ee80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ee84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ee8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee8c:	685b      	ldr	r3, [r3, #4]
 800ee8e:	687a      	ldr	r2, [r7, #4]
 800ee90:	429a      	cmp	r2, r3
 800ee92:	d903      	bls.n	800ee9c <pvPortMalloc+0xa4>
 800ee94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee96:	681b      	ldr	r3, [r3, #0]
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d1f1      	bne.n	800ee80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ee9c:	4b36      	ldr	r3, [pc, #216]	; (800ef78 <pvPortMalloc+0x180>)
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eea2:	429a      	cmp	r2, r3
 800eea4:	d050      	beq.n	800ef48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800eea6:	6a3b      	ldr	r3, [r7, #32]
 800eea8:	681b      	ldr	r3, [r3, #0]
 800eeaa:	2208      	movs	r2, #8
 800eeac:	4413      	add	r3, r2
 800eeae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800eeb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeb2:	681a      	ldr	r2, [r3, #0]
 800eeb4:	6a3b      	ldr	r3, [r7, #32]
 800eeb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800eeb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeba:	685a      	ldr	r2, [r3, #4]
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	1ad2      	subs	r2, r2, r3
 800eec0:	2308      	movs	r3, #8
 800eec2:	005b      	lsls	r3, r3, #1
 800eec4:	429a      	cmp	r2, r3
 800eec6:	d91f      	bls.n	800ef08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800eec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	4413      	add	r3, r2
 800eece:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800eed0:	69bb      	ldr	r3, [r7, #24]
 800eed2:	f003 0307 	and.w	r3, r3, #7
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d00a      	beq.n	800eef0 <pvPortMalloc+0xf8>
	__asm volatile
 800eeda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eede:	f383 8811 	msr	BASEPRI, r3
 800eee2:	f3bf 8f6f 	isb	sy
 800eee6:	f3bf 8f4f 	dsb	sy
 800eeea:	613b      	str	r3, [r7, #16]
}
 800eeec:	bf00      	nop
 800eeee:	e7fe      	b.n	800eeee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800eef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eef2:	685a      	ldr	r2, [r3, #4]
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	1ad2      	subs	r2, r2, r3
 800eef8:	69bb      	ldr	r3, [r7, #24]
 800eefa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800eefc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eefe:	687a      	ldr	r2, [r7, #4]
 800ef00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ef02:	69b8      	ldr	r0, [r7, #24]
 800ef04:	f000 f908 	bl	800f118 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ef08:	4b1d      	ldr	r3, [pc, #116]	; (800ef80 <pvPortMalloc+0x188>)
 800ef0a:	681a      	ldr	r2, [r3, #0]
 800ef0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef0e:	685b      	ldr	r3, [r3, #4]
 800ef10:	1ad3      	subs	r3, r2, r3
 800ef12:	4a1b      	ldr	r2, [pc, #108]	; (800ef80 <pvPortMalloc+0x188>)
 800ef14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ef16:	4b1a      	ldr	r3, [pc, #104]	; (800ef80 <pvPortMalloc+0x188>)
 800ef18:	681a      	ldr	r2, [r3, #0]
 800ef1a:	4b1b      	ldr	r3, [pc, #108]	; (800ef88 <pvPortMalloc+0x190>)
 800ef1c:	681b      	ldr	r3, [r3, #0]
 800ef1e:	429a      	cmp	r2, r3
 800ef20:	d203      	bcs.n	800ef2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ef22:	4b17      	ldr	r3, [pc, #92]	; (800ef80 <pvPortMalloc+0x188>)
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	4a18      	ldr	r2, [pc, #96]	; (800ef88 <pvPortMalloc+0x190>)
 800ef28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ef2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef2c:	685a      	ldr	r2, [r3, #4]
 800ef2e:	4b13      	ldr	r3, [pc, #76]	; (800ef7c <pvPortMalloc+0x184>)
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	431a      	orrs	r2, r3
 800ef34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ef38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef3a:	2200      	movs	r2, #0
 800ef3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800ef3e:	4b13      	ldr	r3, [pc, #76]	; (800ef8c <pvPortMalloc+0x194>)
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	3301      	adds	r3, #1
 800ef44:	4a11      	ldr	r2, [pc, #68]	; (800ef8c <pvPortMalloc+0x194>)
 800ef46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ef48:	f7ff fa5a 	bl	800e400 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ef4c:	69fb      	ldr	r3, [r7, #28]
 800ef4e:	f003 0307 	and.w	r3, r3, #7
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d00a      	beq.n	800ef6c <pvPortMalloc+0x174>
	__asm volatile
 800ef56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef5a:	f383 8811 	msr	BASEPRI, r3
 800ef5e:	f3bf 8f6f 	isb	sy
 800ef62:	f3bf 8f4f 	dsb	sy
 800ef66:	60fb      	str	r3, [r7, #12]
}
 800ef68:	bf00      	nop
 800ef6a:	e7fe      	b.n	800ef6a <pvPortMalloc+0x172>
	return pvReturn;
 800ef6c:	69fb      	ldr	r3, [r7, #28]
}
 800ef6e:	4618      	mov	r0, r3
 800ef70:	3728      	adds	r7, #40	; 0x28
 800ef72:	46bd      	mov	sp, r7
 800ef74:	bd80      	pop	{r7, pc}
 800ef76:	bf00      	nop
 800ef78:	2000490c 	.word	0x2000490c
 800ef7c:	20004920 	.word	0x20004920
 800ef80:	20004910 	.word	0x20004910
 800ef84:	20004904 	.word	0x20004904
 800ef88:	20004914 	.word	0x20004914
 800ef8c:	20004918 	.word	0x20004918

0800ef90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ef90:	b580      	push	{r7, lr}
 800ef92:	b086      	sub	sp, #24
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d04d      	beq.n	800f03e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800efa2:	2308      	movs	r3, #8
 800efa4:	425b      	negs	r3, r3
 800efa6:	697a      	ldr	r2, [r7, #20]
 800efa8:	4413      	add	r3, r2
 800efaa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800efac:	697b      	ldr	r3, [r7, #20]
 800efae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800efb0:	693b      	ldr	r3, [r7, #16]
 800efb2:	685a      	ldr	r2, [r3, #4]
 800efb4:	4b24      	ldr	r3, [pc, #144]	; (800f048 <vPortFree+0xb8>)
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	4013      	ands	r3, r2
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d10a      	bne.n	800efd4 <vPortFree+0x44>
	__asm volatile
 800efbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efc2:	f383 8811 	msr	BASEPRI, r3
 800efc6:	f3bf 8f6f 	isb	sy
 800efca:	f3bf 8f4f 	dsb	sy
 800efce:	60fb      	str	r3, [r7, #12]
}
 800efd0:	bf00      	nop
 800efd2:	e7fe      	b.n	800efd2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800efd4:	693b      	ldr	r3, [r7, #16]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d00a      	beq.n	800eff2 <vPortFree+0x62>
	__asm volatile
 800efdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efe0:	f383 8811 	msr	BASEPRI, r3
 800efe4:	f3bf 8f6f 	isb	sy
 800efe8:	f3bf 8f4f 	dsb	sy
 800efec:	60bb      	str	r3, [r7, #8]
}
 800efee:	bf00      	nop
 800eff0:	e7fe      	b.n	800eff0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800eff2:	693b      	ldr	r3, [r7, #16]
 800eff4:	685a      	ldr	r2, [r3, #4]
 800eff6:	4b14      	ldr	r3, [pc, #80]	; (800f048 <vPortFree+0xb8>)
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	4013      	ands	r3, r2
 800effc:	2b00      	cmp	r3, #0
 800effe:	d01e      	beq.n	800f03e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f000:	693b      	ldr	r3, [r7, #16]
 800f002:	681b      	ldr	r3, [r3, #0]
 800f004:	2b00      	cmp	r3, #0
 800f006:	d11a      	bne.n	800f03e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f008:	693b      	ldr	r3, [r7, #16]
 800f00a:	685a      	ldr	r2, [r3, #4]
 800f00c:	4b0e      	ldr	r3, [pc, #56]	; (800f048 <vPortFree+0xb8>)
 800f00e:	681b      	ldr	r3, [r3, #0]
 800f010:	43db      	mvns	r3, r3
 800f012:	401a      	ands	r2, r3
 800f014:	693b      	ldr	r3, [r7, #16]
 800f016:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f018:	f7ff f9e4 	bl	800e3e4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f01c:	693b      	ldr	r3, [r7, #16]
 800f01e:	685a      	ldr	r2, [r3, #4]
 800f020:	4b0a      	ldr	r3, [pc, #40]	; (800f04c <vPortFree+0xbc>)
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	4413      	add	r3, r2
 800f026:	4a09      	ldr	r2, [pc, #36]	; (800f04c <vPortFree+0xbc>)
 800f028:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f02a:	6938      	ldr	r0, [r7, #16]
 800f02c:	f000 f874 	bl	800f118 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800f030:	4b07      	ldr	r3, [pc, #28]	; (800f050 <vPortFree+0xc0>)
 800f032:	681b      	ldr	r3, [r3, #0]
 800f034:	3301      	adds	r3, #1
 800f036:	4a06      	ldr	r2, [pc, #24]	; (800f050 <vPortFree+0xc0>)
 800f038:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800f03a:	f7ff f9e1 	bl	800e400 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f03e:	bf00      	nop
 800f040:	3718      	adds	r7, #24
 800f042:	46bd      	mov	sp, r7
 800f044:	bd80      	pop	{r7, pc}
 800f046:	bf00      	nop
 800f048:	20004920 	.word	0x20004920
 800f04c:	20004910 	.word	0x20004910
 800f050:	2000491c 	.word	0x2000491c

0800f054 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f054:	b480      	push	{r7}
 800f056:	b085      	sub	sp, #20
 800f058:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f05a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800f05e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f060:	4b27      	ldr	r3, [pc, #156]	; (800f100 <prvHeapInit+0xac>)
 800f062:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	f003 0307 	and.w	r3, r3, #7
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d00c      	beq.n	800f088 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	3307      	adds	r3, #7
 800f072:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	f023 0307 	bic.w	r3, r3, #7
 800f07a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f07c:	68ba      	ldr	r2, [r7, #8]
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	1ad3      	subs	r3, r2, r3
 800f082:	4a1f      	ldr	r2, [pc, #124]	; (800f100 <prvHeapInit+0xac>)
 800f084:	4413      	add	r3, r2
 800f086:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f08c:	4a1d      	ldr	r2, [pc, #116]	; (800f104 <prvHeapInit+0xb0>)
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f092:	4b1c      	ldr	r3, [pc, #112]	; (800f104 <prvHeapInit+0xb0>)
 800f094:	2200      	movs	r2, #0
 800f096:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	68ba      	ldr	r2, [r7, #8]
 800f09c:	4413      	add	r3, r2
 800f09e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f0a0:	2208      	movs	r2, #8
 800f0a2:	68fb      	ldr	r3, [r7, #12]
 800f0a4:	1a9b      	subs	r3, r3, r2
 800f0a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f0a8:	68fb      	ldr	r3, [r7, #12]
 800f0aa:	f023 0307 	bic.w	r3, r3, #7
 800f0ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f0b0:	68fb      	ldr	r3, [r7, #12]
 800f0b2:	4a15      	ldr	r2, [pc, #84]	; (800f108 <prvHeapInit+0xb4>)
 800f0b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f0b6:	4b14      	ldr	r3, [pc, #80]	; (800f108 <prvHeapInit+0xb4>)
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	2200      	movs	r2, #0
 800f0bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f0be:	4b12      	ldr	r3, [pc, #72]	; (800f108 <prvHeapInit+0xb4>)
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	2200      	movs	r2, #0
 800f0c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f0ca:	683b      	ldr	r3, [r7, #0]
 800f0cc:	68fa      	ldr	r2, [r7, #12]
 800f0ce:	1ad2      	subs	r2, r2, r3
 800f0d0:	683b      	ldr	r3, [r7, #0]
 800f0d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f0d4:	4b0c      	ldr	r3, [pc, #48]	; (800f108 <prvHeapInit+0xb4>)
 800f0d6:	681a      	ldr	r2, [r3, #0]
 800f0d8:	683b      	ldr	r3, [r7, #0]
 800f0da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f0dc:	683b      	ldr	r3, [r7, #0]
 800f0de:	685b      	ldr	r3, [r3, #4]
 800f0e0:	4a0a      	ldr	r2, [pc, #40]	; (800f10c <prvHeapInit+0xb8>)
 800f0e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f0e4:	683b      	ldr	r3, [r7, #0]
 800f0e6:	685b      	ldr	r3, [r3, #4]
 800f0e8:	4a09      	ldr	r2, [pc, #36]	; (800f110 <prvHeapInit+0xbc>)
 800f0ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f0ec:	4b09      	ldr	r3, [pc, #36]	; (800f114 <prvHeapInit+0xc0>)
 800f0ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f0f2:	601a      	str	r2, [r3, #0]
}
 800f0f4:	bf00      	nop
 800f0f6:	3714      	adds	r7, #20
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fe:	4770      	bx	lr
 800f100:	20000d04 	.word	0x20000d04
 800f104:	20004904 	.word	0x20004904
 800f108:	2000490c 	.word	0x2000490c
 800f10c:	20004914 	.word	0x20004914
 800f110:	20004910 	.word	0x20004910
 800f114:	20004920 	.word	0x20004920

0800f118 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f118:	b480      	push	{r7}
 800f11a:	b085      	sub	sp, #20
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f120:	4b28      	ldr	r3, [pc, #160]	; (800f1c4 <prvInsertBlockIntoFreeList+0xac>)
 800f122:	60fb      	str	r3, [r7, #12]
 800f124:	e002      	b.n	800f12c <prvInsertBlockIntoFreeList+0x14>
 800f126:	68fb      	ldr	r3, [r7, #12]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	60fb      	str	r3, [r7, #12]
 800f12c:	68fb      	ldr	r3, [r7, #12]
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	687a      	ldr	r2, [r7, #4]
 800f132:	429a      	cmp	r2, r3
 800f134:	d8f7      	bhi.n	800f126 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	685b      	ldr	r3, [r3, #4]
 800f13e:	68ba      	ldr	r2, [r7, #8]
 800f140:	4413      	add	r3, r2
 800f142:	687a      	ldr	r2, [r7, #4]
 800f144:	429a      	cmp	r2, r3
 800f146:	d108      	bne.n	800f15a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	685a      	ldr	r2, [r3, #4]
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	685b      	ldr	r3, [r3, #4]
 800f150:	441a      	add	r2, r3
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	685b      	ldr	r3, [r3, #4]
 800f162:	68ba      	ldr	r2, [r7, #8]
 800f164:	441a      	add	r2, r3
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	429a      	cmp	r2, r3
 800f16c:	d118      	bne.n	800f1a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	681a      	ldr	r2, [r3, #0]
 800f172:	4b15      	ldr	r3, [pc, #84]	; (800f1c8 <prvInsertBlockIntoFreeList+0xb0>)
 800f174:	681b      	ldr	r3, [r3, #0]
 800f176:	429a      	cmp	r2, r3
 800f178:	d00d      	beq.n	800f196 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	685a      	ldr	r2, [r3, #4]
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	685b      	ldr	r3, [r3, #4]
 800f184:	441a      	add	r2, r3
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	681a      	ldr	r2, [r3, #0]
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	601a      	str	r2, [r3, #0]
 800f194:	e008      	b.n	800f1a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f196:	4b0c      	ldr	r3, [pc, #48]	; (800f1c8 <prvInsertBlockIntoFreeList+0xb0>)
 800f198:	681a      	ldr	r2, [r3, #0]
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	601a      	str	r2, [r3, #0]
 800f19e:	e003      	b.n	800f1a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	681a      	ldr	r2, [r3, #0]
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f1a8:	68fa      	ldr	r2, [r7, #12]
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	429a      	cmp	r2, r3
 800f1ae:	d002      	beq.n	800f1b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	687a      	ldr	r2, [r7, #4]
 800f1b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f1b6:	bf00      	nop
 800f1b8:	3714      	adds	r7, #20
 800f1ba:	46bd      	mov	sp, r7
 800f1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c0:	4770      	bx	lr
 800f1c2:	bf00      	nop
 800f1c4:	20004904 	.word	0x20004904
 800f1c8:	2000490c 	.word	0x2000490c

0800f1cc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f1cc:	b580      	push	{r7, lr}
 800f1ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f1d0:	2200      	movs	r2, #0
 800f1d2:	4912      	ldr	r1, [pc, #72]	; (800f21c <MX_USB_DEVICE_Init+0x50>)
 800f1d4:	4812      	ldr	r0, [pc, #72]	; (800f220 <MX_USB_DEVICE_Init+0x54>)
 800f1d6:	f7fd fab3 	bl	800c740 <USBD_Init>
 800f1da:	4603      	mov	r3, r0
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	d001      	beq.n	800f1e4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f1e0:	f7f3 ffd8 	bl	8003194 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800f1e4:	490f      	ldr	r1, [pc, #60]	; (800f224 <MX_USB_DEVICE_Init+0x58>)
 800f1e6:	480e      	ldr	r0, [pc, #56]	; (800f220 <MX_USB_DEVICE_Init+0x54>)
 800f1e8:	f7fd fada 	bl	800c7a0 <USBD_RegisterClass>
 800f1ec:	4603      	mov	r3, r0
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d001      	beq.n	800f1f6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f1f2:	f7f3 ffcf 	bl	8003194 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800f1f6:	490c      	ldr	r1, [pc, #48]	; (800f228 <MX_USB_DEVICE_Init+0x5c>)
 800f1f8:	4809      	ldr	r0, [pc, #36]	; (800f220 <MX_USB_DEVICE_Init+0x54>)
 800f1fa:	f7fd f9d1 	bl	800c5a0 <USBD_CDC_RegisterInterface>
 800f1fe:	4603      	mov	r3, r0
 800f200:	2b00      	cmp	r3, #0
 800f202:	d001      	beq.n	800f208 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f204:	f7f3 ffc6 	bl	8003194 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f208:	4805      	ldr	r0, [pc, #20]	; (800f220 <MX_USB_DEVICE_Init+0x54>)
 800f20a:	f7fd faff 	bl	800c80c <USBD_Start>
 800f20e:	4603      	mov	r3, r0
 800f210:	2b00      	cmp	r3, #0
 800f212:	d001      	beq.n	800f218 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f214:	f7f3 ffbe 	bl	8003194 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f218:	bf00      	nop
 800f21a:	bd80      	pop	{r7, pc}
 800f21c:	20000100 	.word	0x20000100
 800f220:	20004924 	.word	0x20004924
 800f224:	20000068 	.word	0x20000068
 800f228:	200000ec 	.word	0x200000ec

0800f22c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800f22c:	b580      	push	{r7, lr}
 800f22e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800f230:	2200      	movs	r2, #0
 800f232:	4905      	ldr	r1, [pc, #20]	; (800f248 <CDC_Init_FS+0x1c>)
 800f234:	4805      	ldr	r0, [pc, #20]	; (800f24c <CDC_Init_FS+0x20>)
 800f236:	f7fd f9cd 	bl	800c5d4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800f23a:	4905      	ldr	r1, [pc, #20]	; (800f250 <CDC_Init_FS+0x24>)
 800f23c:	4803      	ldr	r0, [pc, #12]	; (800f24c <CDC_Init_FS+0x20>)
 800f23e:	f7fd f9eb 	bl	800c618 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800f242:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800f244:	4618      	mov	r0, r3
 800f246:	bd80      	pop	{r7, pc}
 800f248:	20005400 	.word	0x20005400
 800f24c:	20004924 	.word	0x20004924
 800f250:	20004c00 	.word	0x20004c00

0800f254 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800f254:	b480      	push	{r7}
 800f256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800f258:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800f25a:	4618      	mov	r0, r3
 800f25c:	46bd      	mov	sp, r7
 800f25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f262:	4770      	bx	lr

0800f264 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800f264:	b480      	push	{r7}
 800f266:	b083      	sub	sp, #12
 800f268:	af00      	add	r7, sp, #0
 800f26a:	4603      	mov	r3, r0
 800f26c:	6039      	str	r1, [r7, #0]
 800f26e:	71fb      	strb	r3, [r7, #7]
 800f270:	4613      	mov	r3, r2
 800f272:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800f274:	79fb      	ldrb	r3, [r7, #7]
 800f276:	2b23      	cmp	r3, #35	; 0x23
 800f278:	d84a      	bhi.n	800f310 <CDC_Control_FS+0xac>
 800f27a:	a201      	add	r2, pc, #4	; (adr r2, 800f280 <CDC_Control_FS+0x1c>)
 800f27c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f280:	0800f311 	.word	0x0800f311
 800f284:	0800f311 	.word	0x0800f311
 800f288:	0800f311 	.word	0x0800f311
 800f28c:	0800f311 	.word	0x0800f311
 800f290:	0800f311 	.word	0x0800f311
 800f294:	0800f311 	.word	0x0800f311
 800f298:	0800f311 	.word	0x0800f311
 800f29c:	0800f311 	.word	0x0800f311
 800f2a0:	0800f311 	.word	0x0800f311
 800f2a4:	0800f311 	.word	0x0800f311
 800f2a8:	0800f311 	.word	0x0800f311
 800f2ac:	0800f311 	.word	0x0800f311
 800f2b0:	0800f311 	.word	0x0800f311
 800f2b4:	0800f311 	.word	0x0800f311
 800f2b8:	0800f311 	.word	0x0800f311
 800f2bc:	0800f311 	.word	0x0800f311
 800f2c0:	0800f311 	.word	0x0800f311
 800f2c4:	0800f311 	.word	0x0800f311
 800f2c8:	0800f311 	.word	0x0800f311
 800f2cc:	0800f311 	.word	0x0800f311
 800f2d0:	0800f311 	.word	0x0800f311
 800f2d4:	0800f311 	.word	0x0800f311
 800f2d8:	0800f311 	.word	0x0800f311
 800f2dc:	0800f311 	.word	0x0800f311
 800f2e0:	0800f311 	.word	0x0800f311
 800f2e4:	0800f311 	.word	0x0800f311
 800f2e8:	0800f311 	.word	0x0800f311
 800f2ec:	0800f311 	.word	0x0800f311
 800f2f0:	0800f311 	.word	0x0800f311
 800f2f4:	0800f311 	.word	0x0800f311
 800f2f8:	0800f311 	.word	0x0800f311
 800f2fc:	0800f311 	.word	0x0800f311
 800f300:	0800f311 	.word	0x0800f311
 800f304:	0800f311 	.word	0x0800f311
 800f308:	0800f311 	.word	0x0800f311
 800f30c:	0800f311 	.word	0x0800f311
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800f310:	bf00      	nop
  }

  return (USBD_OK);
 800f312:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800f314:	4618      	mov	r0, r3
 800f316:	370c      	adds	r7, #12
 800f318:	46bd      	mov	sp, r7
 800f31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f31e:	4770      	bx	lr

0800f320 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800f320:	b580      	push	{r7, lr}
 800f322:	b084      	sub	sp, #16
 800f324:	af00      	add	r7, sp, #0
 800f326:	6078      	str	r0, [r7, #4]
 800f328:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800f32a:	6879      	ldr	r1, [r7, #4]
 800f32c:	480e      	ldr	r0, [pc, #56]	; (800f368 <CDC_Receive_FS+0x48>)
 800f32e:	f7fd f973 	bl	800c618 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800f332:	480d      	ldr	r0, [pc, #52]	; (800f368 <CDC_Receive_FS+0x48>)
 800f334:	f7fd f9ce 	bl	800c6d4 <USBD_CDC_ReceivePacket>

	lastReceiveTime = HAL_GetTick(); //failsafe
 800f338:	f7f4 fe30 	bl	8003f9c <HAL_GetTick>
 800f33c:	4603      	mov	r3, r0
 800f33e:	4a0b      	ldr	r2, [pc, #44]	; (800f36c <CDC_Receive_FS+0x4c>)
 800f340:	6013      	str	r3, [r2, #0]

	uint8_t len = (uint8_t) *Len;
 800f342:	683b      	ldr	r3, [r7, #0]
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	73fb      	strb	r3, [r7, #15]
	memset(serialBuffer, '\0', 16);
 800f348:	2210      	movs	r2, #16
 800f34a:	2100      	movs	r1, #0
 800f34c:	4808      	ldr	r0, [pc, #32]	; (800f370 <CDC_Receive_FS+0x50>)
 800f34e:	f000 fc6d 	bl	800fc2c <memset>
	memcpy(serialBuffer, Buf, len);
 800f352:	7bfb      	ldrb	r3, [r7, #15]
 800f354:	461a      	mov	r2, r3
 800f356:	6879      	ldr	r1, [r7, #4]
 800f358:	4805      	ldr	r0, [pc, #20]	; (800f370 <CDC_Receive_FS+0x50>)
 800f35a:	f000 fc93 	bl	800fc84 <memcpy>
  return (USBD_OK);
 800f35e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800f360:	4618      	mov	r0, r3
 800f362:	3710      	adds	r7, #16
 800f364:	46bd      	mov	sp, r7
 800f366:	bd80      	pop	{r7, pc}
 800f368:	20004924 	.word	0x20004924
 800f36c:	20000a30 	.word	0x20000a30
 800f370:	2000093c 	.word	0x2000093c

0800f374 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800f374:	b580      	push	{r7, lr}
 800f376:	b084      	sub	sp, #16
 800f378:	af00      	add	r7, sp, #0
 800f37a:	6078      	str	r0, [r7, #4]
 800f37c:	460b      	mov	r3, r1
 800f37e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800f380:	2300      	movs	r3, #0
 800f382:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800f384:	4b0d      	ldr	r3, [pc, #52]	; (800f3bc <CDC_Transmit_FS+0x48>)
 800f386:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f38a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800f38c:	68bb      	ldr	r3, [r7, #8]
 800f38e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800f392:	2b00      	cmp	r3, #0
 800f394:	d001      	beq.n	800f39a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800f396:	2301      	movs	r3, #1
 800f398:	e00b      	b.n	800f3b2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800f39a:	887b      	ldrh	r3, [r7, #2]
 800f39c:	461a      	mov	r2, r3
 800f39e:	6879      	ldr	r1, [r7, #4]
 800f3a0:	4806      	ldr	r0, [pc, #24]	; (800f3bc <CDC_Transmit_FS+0x48>)
 800f3a2:	f7fd f917 	bl	800c5d4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800f3a6:	4805      	ldr	r0, [pc, #20]	; (800f3bc <CDC_Transmit_FS+0x48>)
 800f3a8:	f7fd f954 	bl	800c654 <USBD_CDC_TransmitPacket>
 800f3ac:	4603      	mov	r3, r0
 800f3ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800f3b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	3710      	adds	r7, #16
 800f3b6:	46bd      	mov	sp, r7
 800f3b8:	bd80      	pop	{r7, pc}
 800f3ba:	bf00      	nop
 800f3bc:	20004924 	.word	0x20004924

0800f3c0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800f3c0:	b480      	push	{r7}
 800f3c2:	b087      	sub	sp, #28
 800f3c4:	af00      	add	r7, sp, #0
 800f3c6:	60f8      	str	r0, [r7, #12]
 800f3c8:	60b9      	str	r1, [r7, #8]
 800f3ca:	4613      	mov	r3, r2
 800f3cc:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800f3ce:	2300      	movs	r3, #0
 800f3d0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800f3d2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	371c      	adds	r7, #28
 800f3da:	46bd      	mov	sp, r7
 800f3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3e0:	4770      	bx	lr
	...

0800f3e4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f3e4:	b480      	push	{r7}
 800f3e6:	b083      	sub	sp, #12
 800f3e8:	af00      	add	r7, sp, #0
 800f3ea:	4603      	mov	r3, r0
 800f3ec:	6039      	str	r1, [r7, #0]
 800f3ee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f3f0:	683b      	ldr	r3, [r7, #0]
 800f3f2:	2212      	movs	r2, #18
 800f3f4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f3f6:	4b03      	ldr	r3, [pc, #12]	; (800f404 <USBD_FS_DeviceDescriptor+0x20>)
}
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	370c      	adds	r7, #12
 800f3fc:	46bd      	mov	sp, r7
 800f3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f402:	4770      	bx	lr
 800f404:	2000011c 	.word	0x2000011c

0800f408 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f408:	b480      	push	{r7}
 800f40a:	b083      	sub	sp, #12
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	4603      	mov	r3, r0
 800f410:	6039      	str	r1, [r7, #0]
 800f412:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f414:	683b      	ldr	r3, [r7, #0]
 800f416:	2204      	movs	r2, #4
 800f418:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f41a:	4b03      	ldr	r3, [pc, #12]	; (800f428 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f41c:	4618      	mov	r0, r3
 800f41e:	370c      	adds	r7, #12
 800f420:	46bd      	mov	sp, r7
 800f422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f426:	4770      	bx	lr
 800f428:	20000130 	.word	0x20000130

0800f42c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f42c:	b580      	push	{r7, lr}
 800f42e:	b082      	sub	sp, #8
 800f430:	af00      	add	r7, sp, #0
 800f432:	4603      	mov	r3, r0
 800f434:	6039      	str	r1, [r7, #0]
 800f436:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f438:	79fb      	ldrb	r3, [r7, #7]
 800f43a:	2b00      	cmp	r3, #0
 800f43c:	d105      	bne.n	800f44a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f43e:	683a      	ldr	r2, [r7, #0]
 800f440:	4907      	ldr	r1, [pc, #28]	; (800f460 <USBD_FS_ProductStrDescriptor+0x34>)
 800f442:	4808      	ldr	r0, [pc, #32]	; (800f464 <USBD_FS_ProductStrDescriptor+0x38>)
 800f444:	f7fe fb94 	bl	800db70 <USBD_GetString>
 800f448:	e004      	b.n	800f454 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f44a:	683a      	ldr	r2, [r7, #0]
 800f44c:	4904      	ldr	r1, [pc, #16]	; (800f460 <USBD_FS_ProductStrDescriptor+0x34>)
 800f44e:	4805      	ldr	r0, [pc, #20]	; (800f464 <USBD_FS_ProductStrDescriptor+0x38>)
 800f450:	f7fe fb8e 	bl	800db70 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f454:	4b02      	ldr	r3, [pc, #8]	; (800f460 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f456:	4618      	mov	r0, r3
 800f458:	3708      	adds	r7, #8
 800f45a:	46bd      	mov	sp, r7
 800f45c:	bd80      	pop	{r7, pc}
 800f45e:	bf00      	nop
 800f460:	20005c00 	.word	0x20005c00
 800f464:	0800ff04 	.word	0x0800ff04

0800f468 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f468:	b580      	push	{r7, lr}
 800f46a:	b082      	sub	sp, #8
 800f46c:	af00      	add	r7, sp, #0
 800f46e:	4603      	mov	r3, r0
 800f470:	6039      	str	r1, [r7, #0]
 800f472:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f474:	683a      	ldr	r2, [r7, #0]
 800f476:	4904      	ldr	r1, [pc, #16]	; (800f488 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f478:	4804      	ldr	r0, [pc, #16]	; (800f48c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f47a:	f7fe fb79 	bl	800db70 <USBD_GetString>
  return USBD_StrDesc;
 800f47e:	4b02      	ldr	r3, [pc, #8]	; (800f488 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f480:	4618      	mov	r0, r3
 800f482:	3708      	adds	r7, #8
 800f484:	46bd      	mov	sp, r7
 800f486:	bd80      	pop	{r7, pc}
 800f488:	20005c00 	.word	0x20005c00
 800f48c:	0800ff1c 	.word	0x0800ff1c

0800f490 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f490:	b580      	push	{r7, lr}
 800f492:	b082      	sub	sp, #8
 800f494:	af00      	add	r7, sp, #0
 800f496:	4603      	mov	r3, r0
 800f498:	6039      	str	r1, [r7, #0]
 800f49a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f49c:	683b      	ldr	r3, [r7, #0]
 800f49e:	221a      	movs	r2, #26
 800f4a0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f4a2:	f000 f843 	bl	800f52c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f4a6:	4b02      	ldr	r3, [pc, #8]	; (800f4b0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	3708      	adds	r7, #8
 800f4ac:	46bd      	mov	sp, r7
 800f4ae:	bd80      	pop	{r7, pc}
 800f4b0:	20000134 	.word	0x20000134

0800f4b4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f4b4:	b580      	push	{r7, lr}
 800f4b6:	b082      	sub	sp, #8
 800f4b8:	af00      	add	r7, sp, #0
 800f4ba:	4603      	mov	r3, r0
 800f4bc:	6039      	str	r1, [r7, #0]
 800f4be:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f4c0:	79fb      	ldrb	r3, [r7, #7]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d105      	bne.n	800f4d2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f4c6:	683a      	ldr	r2, [r7, #0]
 800f4c8:	4907      	ldr	r1, [pc, #28]	; (800f4e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f4ca:	4808      	ldr	r0, [pc, #32]	; (800f4ec <USBD_FS_ConfigStrDescriptor+0x38>)
 800f4cc:	f7fe fb50 	bl	800db70 <USBD_GetString>
 800f4d0:	e004      	b.n	800f4dc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f4d2:	683a      	ldr	r2, [r7, #0]
 800f4d4:	4904      	ldr	r1, [pc, #16]	; (800f4e8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f4d6:	4805      	ldr	r0, [pc, #20]	; (800f4ec <USBD_FS_ConfigStrDescriptor+0x38>)
 800f4d8:	f7fe fb4a 	bl	800db70 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f4dc:	4b02      	ldr	r3, [pc, #8]	; (800f4e8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f4de:	4618      	mov	r0, r3
 800f4e0:	3708      	adds	r7, #8
 800f4e2:	46bd      	mov	sp, r7
 800f4e4:	bd80      	pop	{r7, pc}
 800f4e6:	bf00      	nop
 800f4e8:	20005c00 	.word	0x20005c00
 800f4ec:	0800ff30 	.word	0x0800ff30

0800f4f0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	b082      	sub	sp, #8
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	4603      	mov	r3, r0
 800f4f8:	6039      	str	r1, [r7, #0]
 800f4fa:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f4fc:	79fb      	ldrb	r3, [r7, #7]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d105      	bne.n	800f50e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f502:	683a      	ldr	r2, [r7, #0]
 800f504:	4907      	ldr	r1, [pc, #28]	; (800f524 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f506:	4808      	ldr	r0, [pc, #32]	; (800f528 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f508:	f7fe fb32 	bl	800db70 <USBD_GetString>
 800f50c:	e004      	b.n	800f518 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f50e:	683a      	ldr	r2, [r7, #0]
 800f510:	4904      	ldr	r1, [pc, #16]	; (800f524 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f512:	4805      	ldr	r0, [pc, #20]	; (800f528 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f514:	f7fe fb2c 	bl	800db70 <USBD_GetString>
  }
  return USBD_StrDesc;
 800f518:	4b02      	ldr	r3, [pc, #8]	; (800f524 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f51a:	4618      	mov	r0, r3
 800f51c:	3708      	adds	r7, #8
 800f51e:	46bd      	mov	sp, r7
 800f520:	bd80      	pop	{r7, pc}
 800f522:	bf00      	nop
 800f524:	20005c00 	.word	0x20005c00
 800f528:	0800ff3c 	.word	0x0800ff3c

0800f52c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f52c:	b580      	push	{r7, lr}
 800f52e:	b084      	sub	sp, #16
 800f530:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f532:	4b0f      	ldr	r3, [pc, #60]	; (800f570 <Get_SerialNum+0x44>)
 800f534:	681b      	ldr	r3, [r3, #0]
 800f536:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f538:	4b0e      	ldr	r3, [pc, #56]	; (800f574 <Get_SerialNum+0x48>)
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f53e:	4b0e      	ldr	r3, [pc, #56]	; (800f578 <Get_SerialNum+0x4c>)
 800f540:	681b      	ldr	r3, [r3, #0]
 800f542:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f544:	68fa      	ldr	r2, [r7, #12]
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	4413      	add	r3, r2
 800f54a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f54c:	68fb      	ldr	r3, [r7, #12]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d009      	beq.n	800f566 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f552:	2208      	movs	r2, #8
 800f554:	4909      	ldr	r1, [pc, #36]	; (800f57c <Get_SerialNum+0x50>)
 800f556:	68f8      	ldr	r0, [r7, #12]
 800f558:	f000 f814 	bl	800f584 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f55c:	2204      	movs	r2, #4
 800f55e:	4908      	ldr	r1, [pc, #32]	; (800f580 <Get_SerialNum+0x54>)
 800f560:	68b8      	ldr	r0, [r7, #8]
 800f562:	f000 f80f 	bl	800f584 <IntToUnicode>
  }
}
 800f566:	bf00      	nop
 800f568:	3710      	adds	r7, #16
 800f56a:	46bd      	mov	sp, r7
 800f56c:	bd80      	pop	{r7, pc}
 800f56e:	bf00      	nop
 800f570:	1fff7a10 	.word	0x1fff7a10
 800f574:	1fff7a14 	.word	0x1fff7a14
 800f578:	1fff7a18 	.word	0x1fff7a18
 800f57c:	20000136 	.word	0x20000136
 800f580:	20000146 	.word	0x20000146

0800f584 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f584:	b480      	push	{r7}
 800f586:	b087      	sub	sp, #28
 800f588:	af00      	add	r7, sp, #0
 800f58a:	60f8      	str	r0, [r7, #12]
 800f58c:	60b9      	str	r1, [r7, #8]
 800f58e:	4613      	mov	r3, r2
 800f590:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f592:	2300      	movs	r3, #0
 800f594:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f596:	2300      	movs	r3, #0
 800f598:	75fb      	strb	r3, [r7, #23]
 800f59a:	e027      	b.n	800f5ec <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	0f1b      	lsrs	r3, r3, #28
 800f5a0:	2b09      	cmp	r3, #9
 800f5a2:	d80b      	bhi.n	800f5bc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f5a4:	68fb      	ldr	r3, [r7, #12]
 800f5a6:	0f1b      	lsrs	r3, r3, #28
 800f5a8:	b2da      	uxtb	r2, r3
 800f5aa:	7dfb      	ldrb	r3, [r7, #23]
 800f5ac:	005b      	lsls	r3, r3, #1
 800f5ae:	4619      	mov	r1, r3
 800f5b0:	68bb      	ldr	r3, [r7, #8]
 800f5b2:	440b      	add	r3, r1
 800f5b4:	3230      	adds	r2, #48	; 0x30
 800f5b6:	b2d2      	uxtb	r2, r2
 800f5b8:	701a      	strb	r2, [r3, #0]
 800f5ba:	e00a      	b.n	800f5d2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	0f1b      	lsrs	r3, r3, #28
 800f5c0:	b2da      	uxtb	r2, r3
 800f5c2:	7dfb      	ldrb	r3, [r7, #23]
 800f5c4:	005b      	lsls	r3, r3, #1
 800f5c6:	4619      	mov	r1, r3
 800f5c8:	68bb      	ldr	r3, [r7, #8]
 800f5ca:	440b      	add	r3, r1
 800f5cc:	3237      	adds	r2, #55	; 0x37
 800f5ce:	b2d2      	uxtb	r2, r2
 800f5d0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	011b      	lsls	r3, r3, #4
 800f5d6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f5d8:	7dfb      	ldrb	r3, [r7, #23]
 800f5da:	005b      	lsls	r3, r3, #1
 800f5dc:	3301      	adds	r3, #1
 800f5de:	68ba      	ldr	r2, [r7, #8]
 800f5e0:	4413      	add	r3, r2
 800f5e2:	2200      	movs	r2, #0
 800f5e4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f5e6:	7dfb      	ldrb	r3, [r7, #23]
 800f5e8:	3301      	adds	r3, #1
 800f5ea:	75fb      	strb	r3, [r7, #23]
 800f5ec:	7dfa      	ldrb	r2, [r7, #23]
 800f5ee:	79fb      	ldrb	r3, [r7, #7]
 800f5f0:	429a      	cmp	r2, r3
 800f5f2:	d3d3      	bcc.n	800f59c <IntToUnicode+0x18>
  }
}
 800f5f4:	bf00      	nop
 800f5f6:	bf00      	nop
 800f5f8:	371c      	adds	r7, #28
 800f5fa:	46bd      	mov	sp, r7
 800f5fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f600:	4770      	bx	lr
	...

0800f604 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f604:	b580      	push	{r7, lr}
 800f606:	b08a      	sub	sp, #40	; 0x28
 800f608:	af00      	add	r7, sp, #0
 800f60a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f60c:	f107 0314 	add.w	r3, r7, #20
 800f610:	2200      	movs	r2, #0
 800f612:	601a      	str	r2, [r3, #0]
 800f614:	605a      	str	r2, [r3, #4]
 800f616:	609a      	str	r2, [r3, #8]
 800f618:	60da      	str	r2, [r3, #12]
 800f61a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f624:	d13a      	bne.n	800f69c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f626:	2300      	movs	r3, #0
 800f628:	613b      	str	r3, [r7, #16]
 800f62a:	4b1e      	ldr	r3, [pc, #120]	; (800f6a4 <HAL_PCD_MspInit+0xa0>)
 800f62c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f62e:	4a1d      	ldr	r2, [pc, #116]	; (800f6a4 <HAL_PCD_MspInit+0xa0>)
 800f630:	f043 0301 	orr.w	r3, r3, #1
 800f634:	6313      	str	r3, [r2, #48]	; 0x30
 800f636:	4b1b      	ldr	r3, [pc, #108]	; (800f6a4 <HAL_PCD_MspInit+0xa0>)
 800f638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f63a:	f003 0301 	and.w	r3, r3, #1
 800f63e:	613b      	str	r3, [r7, #16]
 800f640:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f642:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f646:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f648:	2302      	movs	r3, #2
 800f64a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f64c:	2300      	movs	r3, #0
 800f64e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f650:	2303      	movs	r3, #3
 800f652:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f654:	230a      	movs	r3, #10
 800f656:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f658:	f107 0314 	add.w	r3, r7, #20
 800f65c:	4619      	mov	r1, r3
 800f65e:	4812      	ldr	r0, [pc, #72]	; (800f6a8 <HAL_PCD_MspInit+0xa4>)
 800f660:	f7f5 fdc2 	bl	80051e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f664:	4b0f      	ldr	r3, [pc, #60]	; (800f6a4 <HAL_PCD_MspInit+0xa0>)
 800f666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f668:	4a0e      	ldr	r2, [pc, #56]	; (800f6a4 <HAL_PCD_MspInit+0xa0>)
 800f66a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f66e:	6353      	str	r3, [r2, #52]	; 0x34
 800f670:	2300      	movs	r3, #0
 800f672:	60fb      	str	r3, [r7, #12]
 800f674:	4b0b      	ldr	r3, [pc, #44]	; (800f6a4 <HAL_PCD_MspInit+0xa0>)
 800f676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f678:	4a0a      	ldr	r2, [pc, #40]	; (800f6a4 <HAL_PCD_MspInit+0xa0>)
 800f67a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f67e:	6453      	str	r3, [r2, #68]	; 0x44
 800f680:	4b08      	ldr	r3, [pc, #32]	; (800f6a4 <HAL_PCD_MspInit+0xa0>)
 800f682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f684:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f688:	60fb      	str	r3, [r7, #12]
 800f68a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800f68c:	2200      	movs	r2, #0
 800f68e:	2105      	movs	r1, #5
 800f690:	2043      	movs	r0, #67	; 0x43
 800f692:	f7f5 f97d 	bl	8004990 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f696:	2043      	movs	r0, #67	; 0x43
 800f698:	f7f5 f996 	bl	80049c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f69c:	bf00      	nop
 800f69e:	3728      	adds	r7, #40	; 0x28
 800f6a0:	46bd      	mov	sp, r7
 800f6a2:	bd80      	pop	{r7, pc}
 800f6a4:	40023800 	.word	0x40023800
 800f6a8:	40020000 	.word	0x40020000

0800f6ac <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f6ac:	b580      	push	{r7, lr}
 800f6ae:	b082      	sub	sp, #8
 800f6b0:	af00      	add	r7, sp, #0
 800f6b2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800f6ba:	687b      	ldr	r3, [r7, #4]
 800f6bc:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800f6c0:	4619      	mov	r1, r3
 800f6c2:	4610      	mov	r0, r2
 800f6c4:	f7fd f8ef 	bl	800c8a6 <USBD_LL_SetupStage>
}
 800f6c8:	bf00      	nop
 800f6ca:	3708      	adds	r7, #8
 800f6cc:	46bd      	mov	sp, r7
 800f6ce:	bd80      	pop	{r7, pc}

0800f6d0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f6d0:	b580      	push	{r7, lr}
 800f6d2:	b082      	sub	sp, #8
 800f6d4:	af00      	add	r7, sp, #0
 800f6d6:	6078      	str	r0, [r7, #4]
 800f6d8:	460b      	mov	r3, r1
 800f6da:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800f6e2:	78fa      	ldrb	r2, [r7, #3]
 800f6e4:	6879      	ldr	r1, [r7, #4]
 800f6e6:	4613      	mov	r3, r2
 800f6e8:	00db      	lsls	r3, r3, #3
 800f6ea:	4413      	add	r3, r2
 800f6ec:	009b      	lsls	r3, r3, #2
 800f6ee:	440b      	add	r3, r1
 800f6f0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800f6f4:	681a      	ldr	r2, [r3, #0]
 800f6f6:	78fb      	ldrb	r3, [r7, #3]
 800f6f8:	4619      	mov	r1, r3
 800f6fa:	f7fd f929 	bl	800c950 <USBD_LL_DataOutStage>
}
 800f6fe:	bf00      	nop
 800f700:	3708      	adds	r7, #8
 800f702:	46bd      	mov	sp, r7
 800f704:	bd80      	pop	{r7, pc}

0800f706 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f706:	b580      	push	{r7, lr}
 800f708:	b082      	sub	sp, #8
 800f70a:	af00      	add	r7, sp, #0
 800f70c:	6078      	str	r0, [r7, #4]
 800f70e:	460b      	mov	r3, r1
 800f710:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f712:	687b      	ldr	r3, [r7, #4]
 800f714:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800f718:	78fa      	ldrb	r2, [r7, #3]
 800f71a:	6879      	ldr	r1, [r7, #4]
 800f71c:	4613      	mov	r3, r2
 800f71e:	00db      	lsls	r3, r3, #3
 800f720:	4413      	add	r3, r2
 800f722:	009b      	lsls	r3, r3, #2
 800f724:	440b      	add	r3, r1
 800f726:	3320      	adds	r3, #32
 800f728:	681a      	ldr	r2, [r3, #0]
 800f72a:	78fb      	ldrb	r3, [r7, #3]
 800f72c:	4619      	mov	r1, r3
 800f72e:	f7fd f9c2 	bl	800cab6 <USBD_LL_DataInStage>
}
 800f732:	bf00      	nop
 800f734:	3708      	adds	r7, #8
 800f736:	46bd      	mov	sp, r7
 800f738:	bd80      	pop	{r7, pc}

0800f73a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f73a:	b580      	push	{r7, lr}
 800f73c:	b082      	sub	sp, #8
 800f73e:	af00      	add	r7, sp, #0
 800f740:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f748:	4618      	mov	r0, r3
 800f74a:	f7fd fafc 	bl	800cd46 <USBD_LL_SOF>
}
 800f74e:	bf00      	nop
 800f750:	3708      	adds	r7, #8
 800f752:	46bd      	mov	sp, r7
 800f754:	bd80      	pop	{r7, pc}

0800f756 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f756:	b580      	push	{r7, lr}
 800f758:	b084      	sub	sp, #16
 800f75a:	af00      	add	r7, sp, #0
 800f75c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f75e:	2301      	movs	r3, #1
 800f760:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	79db      	ldrb	r3, [r3, #7]
 800f766:	2b00      	cmp	r3, #0
 800f768:	d102      	bne.n	800f770 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800f76a:	2300      	movs	r3, #0
 800f76c:	73fb      	strb	r3, [r7, #15]
 800f76e:	e008      	b.n	800f782 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	79db      	ldrb	r3, [r3, #7]
 800f774:	2b02      	cmp	r3, #2
 800f776:	d102      	bne.n	800f77e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800f778:	2301      	movs	r3, #1
 800f77a:	73fb      	strb	r3, [r7, #15]
 800f77c:	e001      	b.n	800f782 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800f77e:	f7f3 fd09 	bl	8003194 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f788:	7bfa      	ldrb	r2, [r7, #15]
 800f78a:	4611      	mov	r1, r2
 800f78c:	4618      	mov	r0, r3
 800f78e:	f7fd fa96 	bl	800ccbe <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f792:	687b      	ldr	r3, [r7, #4]
 800f794:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f798:	4618      	mov	r0, r3
 800f79a:	f7fd fa3e 	bl	800cc1a <USBD_LL_Reset>
}
 800f79e:	bf00      	nop
 800f7a0:	3710      	adds	r7, #16
 800f7a2:	46bd      	mov	sp, r7
 800f7a4:	bd80      	pop	{r7, pc}
	...

0800f7a8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f7a8:	b580      	push	{r7, lr}
 800f7aa:	b082      	sub	sp, #8
 800f7ac:	af00      	add	r7, sp, #0
 800f7ae:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f7b6:	4618      	mov	r0, r3
 800f7b8:	f7fd fa91 	bl	800ccde <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	681b      	ldr	r3, [r3, #0]
 800f7c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	687a      	ldr	r2, [r7, #4]
 800f7c8:	6812      	ldr	r2, [r2, #0]
 800f7ca:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f7ce:	f043 0301 	orr.w	r3, r3, #1
 800f7d2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	7adb      	ldrb	r3, [r3, #11]
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	d005      	beq.n	800f7e8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f7dc:	4b04      	ldr	r3, [pc, #16]	; (800f7f0 <HAL_PCD_SuspendCallback+0x48>)
 800f7de:	691b      	ldr	r3, [r3, #16]
 800f7e0:	4a03      	ldr	r2, [pc, #12]	; (800f7f0 <HAL_PCD_SuspendCallback+0x48>)
 800f7e2:	f043 0306 	orr.w	r3, r3, #6
 800f7e6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f7e8:	bf00      	nop
 800f7ea:	3708      	adds	r7, #8
 800f7ec:	46bd      	mov	sp, r7
 800f7ee:	bd80      	pop	{r7, pc}
 800f7f0:	e000ed00 	.word	0xe000ed00

0800f7f4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f7f4:	b580      	push	{r7, lr}
 800f7f6:	b082      	sub	sp, #8
 800f7f8:	af00      	add	r7, sp, #0
 800f7fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f802:	4618      	mov	r0, r3
 800f804:	f7fd fa87 	bl	800cd16 <USBD_LL_Resume>
}
 800f808:	bf00      	nop
 800f80a:	3708      	adds	r7, #8
 800f80c:	46bd      	mov	sp, r7
 800f80e:	bd80      	pop	{r7, pc}

0800f810 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f810:	b580      	push	{r7, lr}
 800f812:	b082      	sub	sp, #8
 800f814:	af00      	add	r7, sp, #0
 800f816:	6078      	str	r0, [r7, #4]
 800f818:	460b      	mov	r3, r1
 800f81a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f822:	78fa      	ldrb	r2, [r7, #3]
 800f824:	4611      	mov	r1, r2
 800f826:	4618      	mov	r0, r3
 800f828:	f7fd fadf 	bl	800cdea <USBD_LL_IsoOUTIncomplete>
}
 800f82c:	bf00      	nop
 800f82e:	3708      	adds	r7, #8
 800f830:	46bd      	mov	sp, r7
 800f832:	bd80      	pop	{r7, pc}

0800f834 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f834:	b580      	push	{r7, lr}
 800f836:	b082      	sub	sp, #8
 800f838:	af00      	add	r7, sp, #0
 800f83a:	6078      	str	r0, [r7, #4]
 800f83c:	460b      	mov	r3, r1
 800f83e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f846:	78fa      	ldrb	r2, [r7, #3]
 800f848:	4611      	mov	r1, r2
 800f84a:	4618      	mov	r0, r3
 800f84c:	f7fd fa9b 	bl	800cd86 <USBD_LL_IsoINIncomplete>
}
 800f850:	bf00      	nop
 800f852:	3708      	adds	r7, #8
 800f854:	46bd      	mov	sp, r7
 800f856:	bd80      	pop	{r7, pc}

0800f858 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f858:	b580      	push	{r7, lr}
 800f85a:	b082      	sub	sp, #8
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f866:	4618      	mov	r0, r3
 800f868:	f7fd faf1 	bl	800ce4e <USBD_LL_DevConnected>
}
 800f86c:	bf00      	nop
 800f86e:	3708      	adds	r7, #8
 800f870:	46bd      	mov	sp, r7
 800f872:	bd80      	pop	{r7, pc}

0800f874 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f874:	b580      	push	{r7, lr}
 800f876:	b082      	sub	sp, #8
 800f878:	af00      	add	r7, sp, #0
 800f87a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f882:	4618      	mov	r0, r3
 800f884:	f7fd faee 	bl	800ce64 <USBD_LL_DevDisconnected>
}
 800f888:	bf00      	nop
 800f88a:	3708      	adds	r7, #8
 800f88c:	46bd      	mov	sp, r7
 800f88e:	bd80      	pop	{r7, pc}

0800f890 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f890:	b580      	push	{r7, lr}
 800f892:	b082      	sub	sp, #8
 800f894:	af00      	add	r7, sp, #0
 800f896:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	781b      	ldrb	r3, [r3, #0]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d13c      	bne.n	800f91a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f8a0:	4a20      	ldr	r2, [pc, #128]	; (800f924 <USBD_LL_Init+0x94>)
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800f8a8:	687b      	ldr	r3, [r7, #4]
 800f8aa:	4a1e      	ldr	r2, [pc, #120]	; (800f924 <USBD_LL_Init+0x94>)
 800f8ac:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f8b0:	4b1c      	ldr	r3, [pc, #112]	; (800f924 <USBD_LL_Init+0x94>)
 800f8b2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f8b6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800f8b8:	4b1a      	ldr	r3, [pc, #104]	; (800f924 <USBD_LL_Init+0x94>)
 800f8ba:	2204      	movs	r2, #4
 800f8bc:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f8be:	4b19      	ldr	r3, [pc, #100]	; (800f924 <USBD_LL_Init+0x94>)
 800f8c0:	2202      	movs	r2, #2
 800f8c2:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f8c4:	4b17      	ldr	r3, [pc, #92]	; (800f924 <USBD_LL_Init+0x94>)
 800f8c6:	2200      	movs	r2, #0
 800f8c8:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f8ca:	4b16      	ldr	r3, [pc, #88]	; (800f924 <USBD_LL_Init+0x94>)
 800f8cc:	2202      	movs	r2, #2
 800f8ce:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f8d0:	4b14      	ldr	r3, [pc, #80]	; (800f924 <USBD_LL_Init+0x94>)
 800f8d2:	2200      	movs	r2, #0
 800f8d4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f8d6:	4b13      	ldr	r3, [pc, #76]	; (800f924 <USBD_LL_Init+0x94>)
 800f8d8:	2200      	movs	r2, #0
 800f8da:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f8dc:	4b11      	ldr	r3, [pc, #68]	; (800f924 <USBD_LL_Init+0x94>)
 800f8de:	2200      	movs	r2, #0
 800f8e0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f8e2:	4b10      	ldr	r3, [pc, #64]	; (800f924 <USBD_LL_Init+0x94>)
 800f8e4:	2200      	movs	r2, #0
 800f8e6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f8e8:	4b0e      	ldr	r3, [pc, #56]	; (800f924 <USBD_LL_Init+0x94>)
 800f8ea:	2200      	movs	r2, #0
 800f8ec:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f8ee:	480d      	ldr	r0, [pc, #52]	; (800f924 <USBD_LL_Init+0x94>)
 800f8f0:	f7f6 fe42 	bl	8006578 <HAL_PCD_Init>
 800f8f4:	4603      	mov	r3, r0
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d001      	beq.n	800f8fe <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800f8fa:	f7f3 fc4b 	bl	8003194 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f8fe:	2180      	movs	r1, #128	; 0x80
 800f900:	4808      	ldr	r0, [pc, #32]	; (800f924 <USBD_LL_Init+0x94>)
 800f902:	f7f8 f86c 	bl	80079de <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f906:	2240      	movs	r2, #64	; 0x40
 800f908:	2100      	movs	r1, #0
 800f90a:	4806      	ldr	r0, [pc, #24]	; (800f924 <USBD_LL_Init+0x94>)
 800f90c:	f7f8 f820 	bl	8007950 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f910:	2280      	movs	r2, #128	; 0x80
 800f912:	2101      	movs	r1, #1
 800f914:	4803      	ldr	r0, [pc, #12]	; (800f924 <USBD_LL_Init+0x94>)
 800f916:	f7f8 f81b 	bl	8007950 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f91a:	2300      	movs	r3, #0
}
 800f91c:	4618      	mov	r0, r3
 800f91e:	3708      	adds	r7, #8
 800f920:	46bd      	mov	sp, r7
 800f922:	bd80      	pop	{r7, pc}
 800f924:	20005e00 	.word	0x20005e00

0800f928 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f928:	b580      	push	{r7, lr}
 800f92a:	b084      	sub	sp, #16
 800f92c:	af00      	add	r7, sp, #0
 800f92e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f930:	2300      	movs	r3, #0
 800f932:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f934:	2300      	movs	r3, #0
 800f936:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f93e:	4618      	mov	r0, r3
 800f940:	f7f6 ff29 	bl	8006796 <HAL_PCD_Start>
 800f944:	4603      	mov	r3, r0
 800f946:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f948:	7bfb      	ldrb	r3, [r7, #15]
 800f94a:	4618      	mov	r0, r3
 800f94c:	f000 f942 	bl	800fbd4 <USBD_Get_USB_Status>
 800f950:	4603      	mov	r3, r0
 800f952:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f954:	7bbb      	ldrb	r3, [r7, #14]
}
 800f956:	4618      	mov	r0, r3
 800f958:	3710      	adds	r7, #16
 800f95a:	46bd      	mov	sp, r7
 800f95c:	bd80      	pop	{r7, pc}

0800f95e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f95e:	b580      	push	{r7, lr}
 800f960:	b084      	sub	sp, #16
 800f962:	af00      	add	r7, sp, #0
 800f964:	6078      	str	r0, [r7, #4]
 800f966:	4608      	mov	r0, r1
 800f968:	4611      	mov	r1, r2
 800f96a:	461a      	mov	r2, r3
 800f96c:	4603      	mov	r3, r0
 800f96e:	70fb      	strb	r3, [r7, #3]
 800f970:	460b      	mov	r3, r1
 800f972:	70bb      	strb	r3, [r7, #2]
 800f974:	4613      	mov	r3, r2
 800f976:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f978:	2300      	movs	r3, #0
 800f97a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f97c:	2300      	movs	r3, #0
 800f97e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f986:	78bb      	ldrb	r3, [r7, #2]
 800f988:	883a      	ldrh	r2, [r7, #0]
 800f98a:	78f9      	ldrb	r1, [r7, #3]
 800f98c:	f7f7 fbfd 	bl	800718a <HAL_PCD_EP_Open>
 800f990:	4603      	mov	r3, r0
 800f992:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f994:	7bfb      	ldrb	r3, [r7, #15]
 800f996:	4618      	mov	r0, r3
 800f998:	f000 f91c 	bl	800fbd4 <USBD_Get_USB_Status>
 800f99c:	4603      	mov	r3, r0
 800f99e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f9a0:	7bbb      	ldrb	r3, [r7, #14]
}
 800f9a2:	4618      	mov	r0, r3
 800f9a4:	3710      	adds	r7, #16
 800f9a6:	46bd      	mov	sp, r7
 800f9a8:	bd80      	pop	{r7, pc}

0800f9aa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f9aa:	b580      	push	{r7, lr}
 800f9ac:	b084      	sub	sp, #16
 800f9ae:	af00      	add	r7, sp, #0
 800f9b0:	6078      	str	r0, [r7, #4]
 800f9b2:	460b      	mov	r3, r1
 800f9b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f9b6:	2300      	movs	r3, #0
 800f9b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f9ba:	2300      	movs	r3, #0
 800f9bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f9c4:	78fa      	ldrb	r2, [r7, #3]
 800f9c6:	4611      	mov	r1, r2
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	f7f7 fc46 	bl	800725a <HAL_PCD_EP_Close>
 800f9ce:	4603      	mov	r3, r0
 800f9d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f9d2:	7bfb      	ldrb	r3, [r7, #15]
 800f9d4:	4618      	mov	r0, r3
 800f9d6:	f000 f8fd 	bl	800fbd4 <USBD_Get_USB_Status>
 800f9da:	4603      	mov	r3, r0
 800f9dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f9de:	7bbb      	ldrb	r3, [r7, #14]
}
 800f9e0:	4618      	mov	r0, r3
 800f9e2:	3710      	adds	r7, #16
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	bd80      	pop	{r7, pc}

0800f9e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b084      	sub	sp, #16
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	6078      	str	r0, [r7, #4]
 800f9f0:	460b      	mov	r3, r1
 800f9f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f9f4:	2300      	movs	r3, #0
 800f9f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f9f8:	2300      	movs	r3, #0
 800f9fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fa02:	78fa      	ldrb	r2, [r7, #3]
 800fa04:	4611      	mov	r1, r2
 800fa06:	4618      	mov	r0, r3
 800fa08:	f7f7 fcfe 	bl	8007408 <HAL_PCD_EP_SetStall>
 800fa0c:	4603      	mov	r3, r0
 800fa0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fa10:	7bfb      	ldrb	r3, [r7, #15]
 800fa12:	4618      	mov	r0, r3
 800fa14:	f000 f8de 	bl	800fbd4 <USBD_Get_USB_Status>
 800fa18:	4603      	mov	r3, r0
 800fa1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fa1c:	7bbb      	ldrb	r3, [r7, #14]
}
 800fa1e:	4618      	mov	r0, r3
 800fa20:	3710      	adds	r7, #16
 800fa22:	46bd      	mov	sp, r7
 800fa24:	bd80      	pop	{r7, pc}

0800fa26 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fa26:	b580      	push	{r7, lr}
 800fa28:	b084      	sub	sp, #16
 800fa2a:	af00      	add	r7, sp, #0
 800fa2c:	6078      	str	r0, [r7, #4]
 800fa2e:	460b      	mov	r3, r1
 800fa30:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fa32:	2300      	movs	r3, #0
 800fa34:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fa36:	2300      	movs	r3, #0
 800fa38:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fa40:	78fa      	ldrb	r2, [r7, #3]
 800fa42:	4611      	mov	r1, r2
 800fa44:	4618      	mov	r0, r3
 800fa46:	f7f7 fd42 	bl	80074ce <HAL_PCD_EP_ClrStall>
 800fa4a:	4603      	mov	r3, r0
 800fa4c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fa4e:	7bfb      	ldrb	r3, [r7, #15]
 800fa50:	4618      	mov	r0, r3
 800fa52:	f000 f8bf 	bl	800fbd4 <USBD_Get_USB_Status>
 800fa56:	4603      	mov	r3, r0
 800fa58:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800fa5a:	7bbb      	ldrb	r3, [r7, #14]
}
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	3710      	adds	r7, #16
 800fa60:	46bd      	mov	sp, r7
 800fa62:	bd80      	pop	{r7, pc}

0800fa64 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fa64:	b480      	push	{r7}
 800fa66:	b085      	sub	sp, #20
 800fa68:	af00      	add	r7, sp, #0
 800fa6a:	6078      	str	r0, [r7, #4]
 800fa6c:	460b      	mov	r3, r1
 800fa6e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800fa70:	687b      	ldr	r3, [r7, #4]
 800fa72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fa76:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800fa78:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	da0b      	bge.n	800fa98 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800fa80:	78fb      	ldrb	r3, [r7, #3]
 800fa82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fa86:	68f9      	ldr	r1, [r7, #12]
 800fa88:	4613      	mov	r3, r2
 800fa8a:	00db      	lsls	r3, r3, #3
 800fa8c:	4413      	add	r3, r2
 800fa8e:	009b      	lsls	r3, r3, #2
 800fa90:	440b      	add	r3, r1
 800fa92:	3316      	adds	r3, #22
 800fa94:	781b      	ldrb	r3, [r3, #0]
 800fa96:	e00b      	b.n	800fab0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800fa98:	78fb      	ldrb	r3, [r7, #3]
 800fa9a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fa9e:	68f9      	ldr	r1, [r7, #12]
 800faa0:	4613      	mov	r3, r2
 800faa2:	00db      	lsls	r3, r3, #3
 800faa4:	4413      	add	r3, r2
 800faa6:	009b      	lsls	r3, r3, #2
 800faa8:	440b      	add	r3, r1
 800faaa:	f203 2356 	addw	r3, r3, #598	; 0x256
 800faae:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fab0:	4618      	mov	r0, r3
 800fab2:	3714      	adds	r7, #20
 800fab4:	46bd      	mov	sp, r7
 800fab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faba:	4770      	bx	lr

0800fabc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800fabc:	b580      	push	{r7, lr}
 800fabe:	b084      	sub	sp, #16
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	6078      	str	r0, [r7, #4]
 800fac4:	460b      	mov	r3, r1
 800fac6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fac8:	2300      	movs	r3, #0
 800faca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800facc:	2300      	movs	r3, #0
 800face:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fad6:	78fa      	ldrb	r2, [r7, #3]
 800fad8:	4611      	mov	r1, r2
 800fada:	4618      	mov	r0, r3
 800fadc:	f7f7 fb31 	bl	8007142 <HAL_PCD_SetAddress>
 800fae0:	4603      	mov	r3, r0
 800fae2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fae4:	7bfb      	ldrb	r3, [r7, #15]
 800fae6:	4618      	mov	r0, r3
 800fae8:	f000 f874 	bl	800fbd4 <USBD_Get_USB_Status>
 800faec:	4603      	mov	r3, r0
 800faee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800faf0:	7bbb      	ldrb	r3, [r7, #14]
}
 800faf2:	4618      	mov	r0, r3
 800faf4:	3710      	adds	r7, #16
 800faf6:	46bd      	mov	sp, r7
 800faf8:	bd80      	pop	{r7, pc}

0800fafa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fafa:	b580      	push	{r7, lr}
 800fafc:	b086      	sub	sp, #24
 800fafe:	af00      	add	r7, sp, #0
 800fb00:	60f8      	str	r0, [r7, #12]
 800fb02:	607a      	str	r2, [r7, #4]
 800fb04:	603b      	str	r3, [r7, #0]
 800fb06:	460b      	mov	r3, r1
 800fb08:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb0a:	2300      	movs	r3, #0
 800fb0c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb0e:	2300      	movs	r3, #0
 800fb10:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800fb12:	68fb      	ldr	r3, [r7, #12]
 800fb14:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fb18:	7af9      	ldrb	r1, [r7, #11]
 800fb1a:	683b      	ldr	r3, [r7, #0]
 800fb1c:	687a      	ldr	r2, [r7, #4]
 800fb1e:	f7f7 fc39 	bl	8007394 <HAL_PCD_EP_Transmit>
 800fb22:	4603      	mov	r3, r0
 800fb24:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fb26:	7dfb      	ldrb	r3, [r7, #23]
 800fb28:	4618      	mov	r0, r3
 800fb2a:	f000 f853 	bl	800fbd4 <USBD_Get_USB_Status>
 800fb2e:	4603      	mov	r3, r0
 800fb30:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fb32:	7dbb      	ldrb	r3, [r7, #22]
}
 800fb34:	4618      	mov	r0, r3
 800fb36:	3718      	adds	r7, #24
 800fb38:	46bd      	mov	sp, r7
 800fb3a:	bd80      	pop	{r7, pc}

0800fb3c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800fb3c:	b580      	push	{r7, lr}
 800fb3e:	b086      	sub	sp, #24
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	60f8      	str	r0, [r7, #12]
 800fb44:	607a      	str	r2, [r7, #4]
 800fb46:	603b      	str	r3, [r7, #0]
 800fb48:	460b      	mov	r3, r1
 800fb4a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800fb4c:	2300      	movs	r3, #0
 800fb4e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fb50:	2300      	movs	r3, #0
 800fb52:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800fb5a:	7af9      	ldrb	r1, [r7, #11]
 800fb5c:	683b      	ldr	r3, [r7, #0]
 800fb5e:	687a      	ldr	r2, [r7, #4]
 800fb60:	f7f7 fbc5 	bl	80072ee <HAL_PCD_EP_Receive>
 800fb64:	4603      	mov	r3, r0
 800fb66:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fb68:	7dfb      	ldrb	r3, [r7, #23]
 800fb6a:	4618      	mov	r0, r3
 800fb6c:	f000 f832 	bl	800fbd4 <USBD_Get_USB_Status>
 800fb70:	4603      	mov	r3, r0
 800fb72:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800fb74:	7dbb      	ldrb	r3, [r7, #22]
}
 800fb76:	4618      	mov	r0, r3
 800fb78:	3718      	adds	r7, #24
 800fb7a:	46bd      	mov	sp, r7
 800fb7c:	bd80      	pop	{r7, pc}

0800fb7e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800fb7e:	b580      	push	{r7, lr}
 800fb80:	b082      	sub	sp, #8
 800fb82:	af00      	add	r7, sp, #0
 800fb84:	6078      	str	r0, [r7, #4]
 800fb86:	460b      	mov	r3, r1
 800fb88:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800fb90:	78fa      	ldrb	r2, [r7, #3]
 800fb92:	4611      	mov	r1, r2
 800fb94:	4618      	mov	r0, r3
 800fb96:	f7f7 fbe5 	bl	8007364 <HAL_PCD_EP_GetRxCount>
 800fb9a:	4603      	mov	r3, r0
}
 800fb9c:	4618      	mov	r0, r3
 800fb9e:	3708      	adds	r7, #8
 800fba0:	46bd      	mov	sp, r7
 800fba2:	bd80      	pop	{r7, pc}

0800fba4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800fba4:	b480      	push	{r7}
 800fba6:	b083      	sub	sp, #12
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800fbac:	4b03      	ldr	r3, [pc, #12]	; (800fbbc <USBD_static_malloc+0x18>)
}
 800fbae:	4618      	mov	r0, r3
 800fbb0:	370c      	adds	r7, #12
 800fbb2:	46bd      	mov	sp, r7
 800fbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb8:	4770      	bx	lr
 800fbba:	bf00      	nop
 800fbbc:	200062e4 	.word	0x200062e4

0800fbc0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800fbc0:	b480      	push	{r7}
 800fbc2:	b083      	sub	sp, #12
 800fbc4:	af00      	add	r7, sp, #0
 800fbc6:	6078      	str	r0, [r7, #4]

}
 800fbc8:	bf00      	nop
 800fbca:	370c      	adds	r7, #12
 800fbcc:	46bd      	mov	sp, r7
 800fbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd2:	4770      	bx	lr

0800fbd4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800fbd4:	b480      	push	{r7}
 800fbd6:	b085      	sub	sp, #20
 800fbd8:	af00      	add	r7, sp, #0
 800fbda:	4603      	mov	r3, r0
 800fbdc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800fbde:	2300      	movs	r3, #0
 800fbe0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800fbe2:	79fb      	ldrb	r3, [r7, #7]
 800fbe4:	2b03      	cmp	r3, #3
 800fbe6:	d817      	bhi.n	800fc18 <USBD_Get_USB_Status+0x44>
 800fbe8:	a201      	add	r2, pc, #4	; (adr r2, 800fbf0 <USBD_Get_USB_Status+0x1c>)
 800fbea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fbee:	bf00      	nop
 800fbf0:	0800fc01 	.word	0x0800fc01
 800fbf4:	0800fc07 	.word	0x0800fc07
 800fbf8:	0800fc0d 	.word	0x0800fc0d
 800fbfc:	0800fc13 	.word	0x0800fc13
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800fc00:	2300      	movs	r3, #0
 800fc02:	73fb      	strb	r3, [r7, #15]
    break;
 800fc04:	e00b      	b.n	800fc1e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800fc06:	2303      	movs	r3, #3
 800fc08:	73fb      	strb	r3, [r7, #15]
    break;
 800fc0a:	e008      	b.n	800fc1e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800fc0c:	2301      	movs	r3, #1
 800fc0e:	73fb      	strb	r3, [r7, #15]
    break;
 800fc10:	e005      	b.n	800fc1e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800fc12:	2303      	movs	r3, #3
 800fc14:	73fb      	strb	r3, [r7, #15]
    break;
 800fc16:	e002      	b.n	800fc1e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800fc18:	2303      	movs	r3, #3
 800fc1a:	73fb      	strb	r3, [r7, #15]
    break;
 800fc1c:	bf00      	nop
  }
  return usb_status;
 800fc1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc20:	4618      	mov	r0, r3
 800fc22:	3714      	adds	r7, #20
 800fc24:	46bd      	mov	sp, r7
 800fc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc2a:	4770      	bx	lr

0800fc2c <memset>:
 800fc2c:	4402      	add	r2, r0
 800fc2e:	4603      	mov	r3, r0
 800fc30:	4293      	cmp	r3, r2
 800fc32:	d100      	bne.n	800fc36 <memset+0xa>
 800fc34:	4770      	bx	lr
 800fc36:	f803 1b01 	strb.w	r1, [r3], #1
 800fc3a:	e7f9      	b.n	800fc30 <memset+0x4>

0800fc3c <__libc_init_array>:
 800fc3c:	b570      	push	{r4, r5, r6, lr}
 800fc3e:	4d0d      	ldr	r5, [pc, #52]	; (800fc74 <__libc_init_array+0x38>)
 800fc40:	4c0d      	ldr	r4, [pc, #52]	; (800fc78 <__libc_init_array+0x3c>)
 800fc42:	1b64      	subs	r4, r4, r5
 800fc44:	10a4      	asrs	r4, r4, #2
 800fc46:	2600      	movs	r6, #0
 800fc48:	42a6      	cmp	r6, r4
 800fc4a:	d109      	bne.n	800fc60 <__libc_init_array+0x24>
 800fc4c:	4d0b      	ldr	r5, [pc, #44]	; (800fc7c <__libc_init_array+0x40>)
 800fc4e:	4c0c      	ldr	r4, [pc, #48]	; (800fc80 <__libc_init_array+0x44>)
 800fc50:	f000 f8c0 	bl	800fdd4 <_init>
 800fc54:	1b64      	subs	r4, r4, r5
 800fc56:	10a4      	asrs	r4, r4, #2
 800fc58:	2600      	movs	r6, #0
 800fc5a:	42a6      	cmp	r6, r4
 800fc5c:	d105      	bne.n	800fc6a <__libc_init_array+0x2e>
 800fc5e:	bd70      	pop	{r4, r5, r6, pc}
 800fc60:	f855 3b04 	ldr.w	r3, [r5], #4
 800fc64:	4798      	blx	r3
 800fc66:	3601      	adds	r6, #1
 800fc68:	e7ee      	b.n	800fc48 <__libc_init_array+0xc>
 800fc6a:	f855 3b04 	ldr.w	r3, [r5], #4
 800fc6e:	4798      	blx	r3
 800fc70:	3601      	adds	r6, #1
 800fc72:	e7f2      	b.n	800fc5a <__libc_init_array+0x1e>
 800fc74:	0800ff74 	.word	0x0800ff74
 800fc78:	0800ff74 	.word	0x0800ff74
 800fc7c:	0800ff74 	.word	0x0800ff74
 800fc80:	0800ff78 	.word	0x0800ff78

0800fc84 <memcpy>:
 800fc84:	440a      	add	r2, r1
 800fc86:	4291      	cmp	r1, r2
 800fc88:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800fc8c:	d100      	bne.n	800fc90 <memcpy+0xc>
 800fc8e:	4770      	bx	lr
 800fc90:	b510      	push	{r4, lr}
 800fc92:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fc96:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fc9a:	4291      	cmp	r1, r2
 800fc9c:	d1f9      	bne.n	800fc92 <memcpy+0xe>
 800fc9e:	bd10      	pop	{r4, pc}

0800fca0 <fmax>:
 800fca0:	b508      	push	{r3, lr}
 800fca2:	ed2d 8b04 	vpush	{d8-d9}
 800fca6:	eeb0 8a40 	vmov.f32	s16, s0
 800fcaa:	eef0 8a60 	vmov.f32	s17, s1
 800fcae:	eeb0 9a41 	vmov.f32	s18, s2
 800fcb2:	eef0 9a61 	vmov.f32	s19, s3
 800fcb6:	f000 f81b 	bl	800fcf0 <__fpclassifyd>
 800fcba:	b168      	cbz	r0, 800fcd8 <fmax+0x38>
 800fcbc:	eeb0 0a49 	vmov.f32	s0, s18
 800fcc0:	eef0 0a69 	vmov.f32	s1, s19
 800fcc4:	f000 f814 	bl	800fcf0 <__fpclassifyd>
 800fcc8:	b150      	cbz	r0, 800fce0 <fmax+0x40>
 800fcca:	ec53 2b19 	vmov	r2, r3, d9
 800fcce:	ec51 0b18 	vmov	r0, r1, d8
 800fcd2:	f7f0 fec9 	bl	8000a68 <__aeabi_dcmpgt>
 800fcd6:	b918      	cbnz	r0, 800fce0 <fmax+0x40>
 800fcd8:	eeb0 8a49 	vmov.f32	s16, s18
 800fcdc:	eef0 8a69 	vmov.f32	s17, s19
 800fce0:	eeb0 0a48 	vmov.f32	s0, s16
 800fce4:	eef0 0a68 	vmov.f32	s1, s17
 800fce8:	ecbd 8b04 	vpop	{d8-d9}
 800fcec:	bd08      	pop	{r3, pc}
	...

0800fcf0 <__fpclassifyd>:
 800fcf0:	ec51 0b10 	vmov	r0, r1, d0
 800fcf4:	b510      	push	{r4, lr}
 800fcf6:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 800fcfa:	460b      	mov	r3, r1
 800fcfc:	d019      	beq.n	800fd32 <__fpclassifyd+0x42>
 800fcfe:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 800fd02:	490e      	ldr	r1, [pc, #56]	; (800fd3c <__fpclassifyd+0x4c>)
 800fd04:	428a      	cmp	r2, r1
 800fd06:	d90e      	bls.n	800fd26 <__fpclassifyd+0x36>
 800fd08:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 800fd0c:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 800fd10:	428a      	cmp	r2, r1
 800fd12:	d908      	bls.n	800fd26 <__fpclassifyd+0x36>
 800fd14:	4a0a      	ldr	r2, [pc, #40]	; (800fd40 <__fpclassifyd+0x50>)
 800fd16:	4213      	tst	r3, r2
 800fd18:	d007      	beq.n	800fd2a <__fpclassifyd+0x3a>
 800fd1a:	4294      	cmp	r4, r2
 800fd1c:	d107      	bne.n	800fd2e <__fpclassifyd+0x3e>
 800fd1e:	fab0 f080 	clz	r0, r0
 800fd22:	0940      	lsrs	r0, r0, #5
 800fd24:	bd10      	pop	{r4, pc}
 800fd26:	2004      	movs	r0, #4
 800fd28:	e7fc      	b.n	800fd24 <__fpclassifyd+0x34>
 800fd2a:	2003      	movs	r0, #3
 800fd2c:	e7fa      	b.n	800fd24 <__fpclassifyd+0x34>
 800fd2e:	2000      	movs	r0, #0
 800fd30:	e7f8      	b.n	800fd24 <__fpclassifyd+0x34>
 800fd32:	2800      	cmp	r0, #0
 800fd34:	d1ee      	bne.n	800fd14 <__fpclassifyd+0x24>
 800fd36:	2002      	movs	r0, #2
 800fd38:	e7f4      	b.n	800fd24 <__fpclassifyd+0x34>
 800fd3a:	bf00      	nop
 800fd3c:	7fdfffff 	.word	0x7fdfffff
 800fd40:	7ff00000 	.word	0x7ff00000

0800fd44 <round>:
 800fd44:	ec53 2b10 	vmov	r2, r3, d0
 800fd48:	b570      	push	{r4, r5, r6, lr}
 800fd4a:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800fd4e:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 800fd52:	2813      	cmp	r0, #19
 800fd54:	ee10 5a10 	vmov	r5, s0
 800fd58:	4619      	mov	r1, r3
 800fd5a:	dc18      	bgt.n	800fd8e <round+0x4a>
 800fd5c:	2800      	cmp	r0, #0
 800fd5e:	da09      	bge.n	800fd74 <round+0x30>
 800fd60:	3001      	adds	r0, #1
 800fd62:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 800fd66:	d103      	bne.n	800fd70 <round+0x2c>
 800fd68:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800fd6c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800fd70:	2300      	movs	r3, #0
 800fd72:	e02a      	b.n	800fdca <round+0x86>
 800fd74:	4c16      	ldr	r4, [pc, #88]	; (800fdd0 <round+0x8c>)
 800fd76:	4104      	asrs	r4, r0
 800fd78:	ea03 0604 	and.w	r6, r3, r4
 800fd7c:	4316      	orrs	r6, r2
 800fd7e:	d011      	beq.n	800fda4 <round+0x60>
 800fd80:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800fd84:	4103      	asrs	r3, r0
 800fd86:	440b      	add	r3, r1
 800fd88:	ea23 0104 	bic.w	r1, r3, r4
 800fd8c:	e7f0      	b.n	800fd70 <round+0x2c>
 800fd8e:	2833      	cmp	r0, #51	; 0x33
 800fd90:	dd0b      	ble.n	800fdaa <round+0x66>
 800fd92:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800fd96:	d105      	bne.n	800fda4 <round+0x60>
 800fd98:	ee10 0a10 	vmov	r0, s0
 800fd9c:	f7f0 fa1e 	bl	80001dc <__adddf3>
 800fda0:	4602      	mov	r2, r0
 800fda2:	460b      	mov	r3, r1
 800fda4:	ec43 2b10 	vmov	d0, r2, r3
 800fda8:	bd70      	pop	{r4, r5, r6, pc}
 800fdaa:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800fdae:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800fdb2:	40f4      	lsrs	r4, r6
 800fdb4:	4214      	tst	r4, r2
 800fdb6:	d0f5      	beq.n	800fda4 <round+0x60>
 800fdb8:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 800fdbc:	2301      	movs	r3, #1
 800fdbe:	4083      	lsls	r3, r0
 800fdc0:	195b      	adds	r3, r3, r5
 800fdc2:	bf28      	it	cs
 800fdc4:	3101      	addcs	r1, #1
 800fdc6:	ea23 0304 	bic.w	r3, r3, r4
 800fdca:	461a      	mov	r2, r3
 800fdcc:	460b      	mov	r3, r1
 800fdce:	e7e9      	b.n	800fda4 <round+0x60>
 800fdd0:	000fffff 	.word	0x000fffff

0800fdd4 <_init>:
 800fdd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fdd6:	bf00      	nop
 800fdd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fdda:	bc08      	pop	{r3}
 800fddc:	469e      	mov	lr, r3
 800fdde:	4770      	bx	lr

0800fde0 <_fini>:
 800fde0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fde2:	bf00      	nop
 800fde4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fde6:	bc08      	pop	{r3}
 800fde8:	469e      	mov	lr, r3
 800fdea:	4770      	bx	lr
