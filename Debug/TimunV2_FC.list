
TimunV2_FC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f82c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  0800f9bc  0800f9bc  0001f9bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fb18  0800fb18  00020150  2**0
                  CONTENTS
  4 .ARM          00000008  0800fb18  0800fb18  0001fb18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fb20  0800fb20  00020150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fb20  0800fb20  0001fb20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fb24  0800fb24  0001fb24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000150  20000000  0800fb28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020150  2**0
                  CONTENTS
 10 .bss          00006390  20000150  20000150  00020150  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200064e0  200064e0  00020150  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY
 14 .debug_info   00022479  00000000  00000000  000201c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000505f  00000000  00000000  0004263c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001d28  00000000  00000000  000476a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000169d  00000000  00000000  000493c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00028281  00000000  00000000  0004aa65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00024a89  00000000  00000000  00072ce6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e7cdd  00000000  00000000  0009776f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007d40  00000000  00000000  0017f44c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  0018718c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000150 	.word	0x20000150
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f9a4 	.word	0x0800f9a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000154 	.word	0x20000154
 80001cc:	0800f9a4 	.word	0x0800f9a4

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	; 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__aeabi_dmul>:
 8000548:	b570      	push	{r4, r5, r6, lr}
 800054a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800054e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000552:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000556:	bf1d      	ittte	ne
 8000558:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800055c:	ea94 0f0c 	teqne	r4, ip
 8000560:	ea95 0f0c 	teqne	r5, ip
 8000564:	f000 f8de 	bleq	8000724 <__aeabi_dmul+0x1dc>
 8000568:	442c      	add	r4, r5
 800056a:	ea81 0603 	eor.w	r6, r1, r3
 800056e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000572:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000576:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800057a:	bf18      	it	ne
 800057c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000580:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000584:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000588:	d038      	beq.n	80005fc <__aeabi_dmul+0xb4>
 800058a:	fba0 ce02 	umull	ip, lr, r0, r2
 800058e:	f04f 0500 	mov.w	r5, #0
 8000592:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000596:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800059a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800059e:	f04f 0600 	mov.w	r6, #0
 80005a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005a6:	f09c 0f00 	teq	ip, #0
 80005aa:	bf18      	it	ne
 80005ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005bc:	d204      	bcs.n	80005c8 <__aeabi_dmul+0x80>
 80005be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005c2:	416d      	adcs	r5, r5
 80005c4:	eb46 0606 	adc.w	r6, r6, r6
 80005c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e0:	bf88      	it	hi
 80005e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005e6:	d81e      	bhi.n	8000626 <__aeabi_dmul+0xde>
 80005e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ec:	bf08      	it	eq
 80005ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005f2:	f150 0000 	adcs.w	r0, r0, #0
 80005f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000600:	ea46 0101 	orr.w	r1, r6, r1
 8000604:	ea40 0002 	orr.w	r0, r0, r2
 8000608:	ea81 0103 	eor.w	r1, r1, r3
 800060c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000610:	bfc2      	ittt	gt
 8000612:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000616:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800061a:	bd70      	popgt	{r4, r5, r6, pc}
 800061c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000620:	f04f 0e00 	mov.w	lr, #0
 8000624:	3c01      	subs	r4, #1
 8000626:	f300 80ab 	bgt.w	8000780 <__aeabi_dmul+0x238>
 800062a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800062e:	bfde      	ittt	le
 8000630:	2000      	movle	r0, #0
 8000632:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000636:	bd70      	pople	{r4, r5, r6, pc}
 8000638:	f1c4 0400 	rsb	r4, r4, #0
 800063c:	3c20      	subs	r4, #32
 800063e:	da35      	bge.n	80006ac <__aeabi_dmul+0x164>
 8000640:	340c      	adds	r4, #12
 8000642:	dc1b      	bgt.n	800067c <__aeabi_dmul+0x134>
 8000644:	f104 0414 	add.w	r4, r4, #20
 8000648:	f1c4 0520 	rsb	r5, r4, #32
 800064c:	fa00 f305 	lsl.w	r3, r0, r5
 8000650:	fa20 f004 	lsr.w	r0, r0, r4
 8000654:	fa01 f205 	lsl.w	r2, r1, r5
 8000658:	ea40 0002 	orr.w	r0, r0, r2
 800065c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000660:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000664:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000668:	fa21 f604 	lsr.w	r6, r1, r4
 800066c:	eb42 0106 	adc.w	r1, r2, r6
 8000670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000674:	bf08      	it	eq
 8000676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800067a:	bd70      	pop	{r4, r5, r6, pc}
 800067c:	f1c4 040c 	rsb	r4, r4, #12
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f304 	lsl.w	r3, r0, r4
 8000688:	fa20 f005 	lsr.w	r0, r0, r5
 800068c:	fa01 f204 	lsl.w	r2, r1, r4
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	f141 0100 	adc.w	r1, r1, #0
 80006a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a4:	bf08      	it	eq
 80006a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f1c4 0520 	rsb	r5, r4, #32
 80006b0:	fa00 f205 	lsl.w	r2, r0, r5
 80006b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b8:	fa20 f304 	lsr.w	r3, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea43 0302 	orr.w	r3, r3, r2
 80006c4:	fa21 f004 	lsr.w	r0, r1, r4
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	fa21 f204 	lsr.w	r2, r1, r4
 80006d0:	ea20 0002 	bic.w	r0, r0, r2
 80006d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f094 0f00 	teq	r4, #0
 80006e8:	d10f      	bne.n	800070a <__aeabi_dmul+0x1c2>
 80006ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ee:	0040      	lsls	r0, r0, #1
 80006f0:	eb41 0101 	adc.w	r1, r1, r1
 80006f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f8:	bf08      	it	eq
 80006fa:	3c01      	subeq	r4, #1
 80006fc:	d0f7      	beq.n	80006ee <__aeabi_dmul+0x1a6>
 80006fe:	ea41 0106 	orr.w	r1, r1, r6
 8000702:	f095 0f00 	teq	r5, #0
 8000706:	bf18      	it	ne
 8000708:	4770      	bxne	lr
 800070a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800070e:	0052      	lsls	r2, r2, #1
 8000710:	eb43 0303 	adc.w	r3, r3, r3
 8000714:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3d01      	subeq	r5, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1c6>
 800071e:	ea43 0306 	orr.w	r3, r3, r6
 8000722:	4770      	bx	lr
 8000724:	ea94 0f0c 	teq	r4, ip
 8000728:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800072c:	bf18      	it	ne
 800072e:	ea95 0f0c 	teqne	r5, ip
 8000732:	d00c      	beq.n	800074e <__aeabi_dmul+0x206>
 8000734:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000738:	bf18      	it	ne
 800073a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800073e:	d1d1      	bne.n	80006e4 <__aeabi_dmul+0x19c>
 8000740:	ea81 0103 	eor.w	r1, r1, r3
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000752:	bf06      	itte	eq
 8000754:	4610      	moveq	r0, r2
 8000756:	4619      	moveq	r1, r3
 8000758:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075c:	d019      	beq.n	8000792 <__aeabi_dmul+0x24a>
 800075e:	ea94 0f0c 	teq	r4, ip
 8000762:	d102      	bne.n	800076a <__aeabi_dmul+0x222>
 8000764:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000768:	d113      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800076a:	ea95 0f0c 	teq	r5, ip
 800076e:	d105      	bne.n	800077c <__aeabi_dmul+0x234>
 8000770:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000774:	bf1c      	itt	ne
 8000776:	4610      	movne	r0, r2
 8000778:	4619      	movne	r1, r3
 800077a:	d10a      	bne.n	8000792 <__aeabi_dmul+0x24a>
 800077c:	ea81 0103 	eor.w	r1, r1, r3
 8000780:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000784:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000788:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800078c:	f04f 0000 	mov.w	r0, #0
 8000790:	bd70      	pop	{r4, r5, r6, pc}
 8000792:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000796:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800079a:	bd70      	pop	{r4, r5, r6, pc}

0800079c <__aeabi_ddiv>:
 800079c:	b570      	push	{r4, r5, r6, lr}
 800079e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007aa:	bf1d      	ittte	ne
 80007ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b0:	ea94 0f0c 	teqne	r4, ip
 80007b4:	ea95 0f0c 	teqne	r5, ip
 80007b8:	f000 f8a7 	bleq	800090a <__aeabi_ddiv+0x16e>
 80007bc:	eba4 0405 	sub.w	r4, r4, r5
 80007c0:	ea81 0e03 	eor.w	lr, r1, r3
 80007c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007cc:	f000 8088 	beq.w	80008e0 <__aeabi_ddiv+0x144>
 80007d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007f4:	429d      	cmp	r5, r3
 80007f6:	bf08      	it	eq
 80007f8:	4296      	cmpeq	r6, r2
 80007fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000802:	d202      	bcs.n	800080a <__aeabi_ddiv+0x6e>
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	1ab6      	subs	r6, r6, r2
 800080c:	eb65 0503 	sbc.w	r5, r5, r3
 8000810:	085b      	lsrs	r3, r3, #1
 8000812:	ea4f 0232 	mov.w	r2, r2, rrx
 8000816:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800081a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800081e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000822:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000826:	bf22      	ittt	cs
 8000828:	1ab6      	subcs	r6, r6, r2
 800082a:	4675      	movcs	r5, lr
 800082c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	ebb6 0e02 	subs.w	lr, r6, r2
 800083a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800083e:	bf22      	ittt	cs
 8000840:	1ab6      	subcs	r6, r6, r2
 8000842:	4675      	movcs	r5, lr
 8000844:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000852:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000856:	bf22      	ittt	cs
 8000858:	1ab6      	subcs	r6, r6, r2
 800085a:	4675      	movcs	r5, lr
 800085c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000878:	ea55 0e06 	orrs.w	lr, r5, r6
 800087c:	d018      	beq.n	80008b0 <__aeabi_ddiv+0x114>
 800087e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000882:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000886:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800088a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800088e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000892:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000896:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800089a:	d1c0      	bne.n	800081e <__aeabi_ddiv+0x82>
 800089c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a0:	d10b      	bne.n	80008ba <__aeabi_ddiv+0x11e>
 80008a2:	ea41 0100 	orr.w	r1, r1, r0
 80008a6:	f04f 0000 	mov.w	r0, #0
 80008aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ae:	e7b6      	b.n	800081e <__aeabi_ddiv+0x82>
 80008b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b4:	bf04      	itt	eq
 80008b6:	4301      	orreq	r1, r0
 80008b8:	2000      	moveq	r0, #0
 80008ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008be:	bf88      	it	hi
 80008c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008c4:	f63f aeaf 	bhi.w	8000626 <__aeabi_dmul+0xde>
 80008c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008cc:	bf04      	itt	eq
 80008ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008d6:	f150 0000 	adcs.w	r0, r0, #0
 80008da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008de:	bd70      	pop	{r4, r5, r6, pc}
 80008e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ec:	bfc2      	ittt	gt
 80008ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008f6:	bd70      	popgt	{r4, r5, r6, pc}
 80008f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008fc:	f04f 0e00 	mov.w	lr, #0
 8000900:	3c01      	subs	r4, #1
 8000902:	e690      	b.n	8000626 <__aeabi_dmul+0xde>
 8000904:	ea45 0e06 	orr.w	lr, r5, r6
 8000908:	e68d      	b.n	8000626 <__aeabi_dmul+0xde>
 800090a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	bf08      	it	eq
 8000914:	ea95 0f0c 	teqeq	r5, ip
 8000918:	f43f af3b 	beq.w	8000792 <__aeabi_dmul+0x24a>
 800091c:	ea94 0f0c 	teq	r4, ip
 8000920:	d10a      	bne.n	8000938 <__aeabi_ddiv+0x19c>
 8000922:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000926:	f47f af34 	bne.w	8000792 <__aeabi_dmul+0x24a>
 800092a:	ea95 0f0c 	teq	r5, ip
 800092e:	f47f af25 	bne.w	800077c <__aeabi_dmul+0x234>
 8000932:	4610      	mov	r0, r2
 8000934:	4619      	mov	r1, r3
 8000936:	e72c      	b.n	8000792 <__aeabi_dmul+0x24a>
 8000938:	ea95 0f0c 	teq	r5, ip
 800093c:	d106      	bne.n	800094c <__aeabi_ddiv+0x1b0>
 800093e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000942:	f43f aefd 	beq.w	8000740 <__aeabi_dmul+0x1f8>
 8000946:	4610      	mov	r0, r2
 8000948:	4619      	mov	r1, r3
 800094a:	e722      	b.n	8000792 <__aeabi_dmul+0x24a>
 800094c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000956:	f47f aec5 	bne.w	80006e4 <__aeabi_dmul+0x19c>
 800095a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800095e:	f47f af0d 	bne.w	800077c <__aeabi_dmul+0x234>
 8000962:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000966:	f47f aeeb 	bne.w	8000740 <__aeabi_dmul+0x1f8>
 800096a:	e712      	b.n	8000792 <__aeabi_dmul+0x24a>

0800096c <__gedf2>:
 800096c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000970:	e006      	b.n	8000980 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__ledf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	e002      	b.n	8000980 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__cmpdf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000984:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000990:	bf18      	it	ne
 8000992:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000996:	d01b      	beq.n	80009d0 <__cmpdf2+0x54>
 8000998:	b001      	add	sp, #4
 800099a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800099e:	bf0c      	ite	eq
 80009a0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009a4:	ea91 0f03 	teqne	r1, r3
 80009a8:	bf02      	ittt	eq
 80009aa:	ea90 0f02 	teqeq	r0, r2
 80009ae:	2000      	moveq	r0, #0
 80009b0:	4770      	bxeq	lr
 80009b2:	f110 0f00 	cmn.w	r0, #0
 80009b6:	ea91 0f03 	teq	r1, r3
 80009ba:	bf58      	it	pl
 80009bc:	4299      	cmppl	r1, r3
 80009be:	bf08      	it	eq
 80009c0:	4290      	cmpeq	r0, r2
 80009c2:	bf2c      	ite	cs
 80009c4:	17d8      	asrcs	r0, r3, #31
 80009c6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ca:	f040 0001 	orr.w	r0, r0, #1
 80009ce:	4770      	bx	lr
 80009d0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d102      	bne.n	80009e0 <__cmpdf2+0x64>
 80009da:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009de:	d107      	bne.n	80009f0 <__cmpdf2+0x74>
 80009e0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d1d6      	bne.n	8000998 <__cmpdf2+0x1c>
 80009ea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ee:	d0d3      	beq.n	8000998 <__cmpdf2+0x1c>
 80009f0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdrcmple>:
 80009f8:	4684      	mov	ip, r0
 80009fa:	4610      	mov	r0, r2
 80009fc:	4662      	mov	r2, ip
 80009fe:	468c      	mov	ip, r1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4663      	mov	r3, ip
 8000a04:	e000      	b.n	8000a08 <__aeabi_cdcmpeq>
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdcmpeq>:
 8000a08:	b501      	push	{r0, lr}
 8000a0a:	f7ff ffb7 	bl	800097c <__cmpdf2>
 8000a0e:	2800      	cmp	r0, #0
 8000a10:	bf48      	it	mi
 8000a12:	f110 0f00 	cmnmi.w	r0, #0
 8000a16:	bd01      	pop	{r0, pc}

08000a18 <__aeabi_dcmpeq>:
 8000a18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a1c:	f7ff fff4 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a20:	bf0c      	ite	eq
 8000a22:	2001      	moveq	r0, #1
 8000a24:	2000      	movne	r0, #0
 8000a26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2a:	bf00      	nop

08000a2c <__aeabi_dcmplt>:
 8000a2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a30:	f7ff ffea 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a34:	bf34      	ite	cc
 8000a36:	2001      	movcc	r0, #1
 8000a38:	2000      	movcs	r0, #0
 8000a3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3e:	bf00      	nop

08000a40 <__aeabi_dcmple>:
 8000a40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a44:	f7ff ffe0 	bl	8000a08 <__aeabi_cdcmpeq>
 8000a48:	bf94      	ite	ls
 8000a4a:	2001      	movls	r0, #1
 8000a4c:	2000      	movhi	r0, #0
 8000a4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a52:	bf00      	nop

08000a54 <__aeabi_dcmpge>:
 8000a54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a58:	f7ff ffce 	bl	80009f8 <__aeabi_cdrcmple>
 8000a5c:	bf94      	ite	ls
 8000a5e:	2001      	movls	r0, #1
 8000a60:	2000      	movhi	r0, #0
 8000a62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a66:	bf00      	nop

08000a68 <__aeabi_dcmpgt>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff ffc4 	bl	80009f8 <__aeabi_cdrcmple>
 8000a70:	bf34      	ite	cc
 8000a72:	2001      	movcc	r0, #1
 8000a74:	2000      	movcs	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_d2iz>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a84:	d215      	bcs.n	8000ab2 <__aeabi_d2iz+0x36>
 8000a86:	d511      	bpl.n	8000aac <__aeabi_d2iz+0x30>
 8000a88:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a8c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a90:	d912      	bls.n	8000ab8 <__aeabi_d2iz+0x3c>
 8000a92:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a96:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a9a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aa2:	fa23 f002 	lsr.w	r0, r3, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	4240      	negne	r0, r0
 8000aaa:	4770      	bx	lr
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ab6:	d105      	bne.n	8000ac4 <__aeabi_d2iz+0x48>
 8000ab8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	bf08      	it	eq
 8000abe:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ac2:	4770      	bx	lr
 8000ac4:	f04f 0000 	mov.w	r0, #0
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <__aeabi_d2f>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad4:	bf24      	itt	cs
 8000ad6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ada:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ade:	d90d      	bls.n	8000afc <__aeabi_d2f+0x30>
 8000ae0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af4:	bf08      	it	eq
 8000af6:	f020 0001 	biceq.w	r0, r0, #1
 8000afa:	4770      	bx	lr
 8000afc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b00:	d121      	bne.n	8000b46 <__aeabi_d2f+0x7a>
 8000b02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b06:	bfbc      	itt	lt
 8000b08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	4770      	bxlt	lr
 8000b0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b12:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b16:	f1c2 0218 	rsb	r2, r2, #24
 8000b1a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b22:	fa20 f002 	lsr.w	r0, r0, r2
 8000b26:	bf18      	it	ne
 8000b28:	f040 0001 	orrne.w	r0, r0, #1
 8000b2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b34:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b38:	ea40 000c 	orr.w	r0, r0, ip
 8000b3c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b40:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b44:	e7cc      	b.n	8000ae0 <__aeabi_d2f+0x14>
 8000b46:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b4a:	d107      	bne.n	8000b5c <__aeabi_d2f+0x90>
 8000b4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b50:	bf1e      	ittt	ne
 8000b52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b5a:	4770      	bxne	lr
 8000b5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_uldivmod>:
 8000b6c:	b953      	cbnz	r3, 8000b84 <__aeabi_uldivmod+0x18>
 8000b6e:	b94a      	cbnz	r2, 8000b84 <__aeabi_uldivmod+0x18>
 8000b70:	2900      	cmp	r1, #0
 8000b72:	bf08      	it	eq
 8000b74:	2800      	cmpeq	r0, #0
 8000b76:	bf1c      	itt	ne
 8000b78:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000b7c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000b80:	f000 b970 	b.w	8000e64 <__aeabi_idiv0>
 8000b84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b8c:	f000 f806 	bl	8000b9c <__udivmoddi4>
 8000b90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b98:	b004      	add	sp, #16
 8000b9a:	4770      	bx	lr

08000b9c <__udivmoddi4>:
 8000b9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba0:	9e08      	ldr	r6, [sp, #32]
 8000ba2:	460d      	mov	r5, r1
 8000ba4:	4604      	mov	r4, r0
 8000ba6:	460f      	mov	r7, r1
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d14a      	bne.n	8000c42 <__udivmoddi4+0xa6>
 8000bac:	428a      	cmp	r2, r1
 8000bae:	4694      	mov	ip, r2
 8000bb0:	d965      	bls.n	8000c7e <__udivmoddi4+0xe2>
 8000bb2:	fab2 f382 	clz	r3, r2
 8000bb6:	b143      	cbz	r3, 8000bca <__udivmoddi4+0x2e>
 8000bb8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bbc:	f1c3 0220 	rsb	r2, r3, #32
 8000bc0:	409f      	lsls	r7, r3
 8000bc2:	fa20 f202 	lsr.w	r2, r0, r2
 8000bc6:	4317      	orrs	r7, r2
 8000bc8:	409c      	lsls	r4, r3
 8000bca:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bce:	fa1f f58c 	uxth.w	r5, ip
 8000bd2:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bd6:	0c22      	lsrs	r2, r4, #16
 8000bd8:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bdc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000be0:	fb01 f005 	mul.w	r0, r1, r5
 8000be4:	4290      	cmp	r0, r2
 8000be6:	d90a      	bls.n	8000bfe <__udivmoddi4+0x62>
 8000be8:	eb1c 0202 	adds.w	r2, ip, r2
 8000bec:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000bf0:	f080 811c 	bcs.w	8000e2c <__udivmoddi4+0x290>
 8000bf4:	4290      	cmp	r0, r2
 8000bf6:	f240 8119 	bls.w	8000e2c <__udivmoddi4+0x290>
 8000bfa:	3902      	subs	r1, #2
 8000bfc:	4462      	add	r2, ip
 8000bfe:	1a12      	subs	r2, r2, r0
 8000c00:	b2a4      	uxth	r4, r4
 8000c02:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c06:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c0a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c0e:	fb00 f505 	mul.w	r5, r0, r5
 8000c12:	42a5      	cmp	r5, r4
 8000c14:	d90a      	bls.n	8000c2c <__udivmoddi4+0x90>
 8000c16:	eb1c 0404 	adds.w	r4, ip, r4
 8000c1a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000c1e:	f080 8107 	bcs.w	8000e30 <__udivmoddi4+0x294>
 8000c22:	42a5      	cmp	r5, r4
 8000c24:	f240 8104 	bls.w	8000e30 <__udivmoddi4+0x294>
 8000c28:	4464      	add	r4, ip
 8000c2a:	3802      	subs	r0, #2
 8000c2c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c30:	1b64      	subs	r4, r4, r5
 8000c32:	2100      	movs	r1, #0
 8000c34:	b11e      	cbz	r6, 8000c3e <__udivmoddi4+0xa2>
 8000c36:	40dc      	lsrs	r4, r3
 8000c38:	2300      	movs	r3, #0
 8000c3a:	e9c6 4300 	strd	r4, r3, [r6]
 8000c3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c42:	428b      	cmp	r3, r1
 8000c44:	d908      	bls.n	8000c58 <__udivmoddi4+0xbc>
 8000c46:	2e00      	cmp	r6, #0
 8000c48:	f000 80ed 	beq.w	8000e26 <__udivmoddi4+0x28a>
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	e9c6 0500 	strd	r0, r5, [r6]
 8000c52:	4608      	mov	r0, r1
 8000c54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c58:	fab3 f183 	clz	r1, r3
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	d149      	bne.n	8000cf4 <__udivmoddi4+0x158>
 8000c60:	42ab      	cmp	r3, r5
 8000c62:	d302      	bcc.n	8000c6a <__udivmoddi4+0xce>
 8000c64:	4282      	cmp	r2, r0
 8000c66:	f200 80f8 	bhi.w	8000e5a <__udivmoddi4+0x2be>
 8000c6a:	1a84      	subs	r4, r0, r2
 8000c6c:	eb65 0203 	sbc.w	r2, r5, r3
 8000c70:	2001      	movs	r0, #1
 8000c72:	4617      	mov	r7, r2
 8000c74:	2e00      	cmp	r6, #0
 8000c76:	d0e2      	beq.n	8000c3e <__udivmoddi4+0xa2>
 8000c78:	e9c6 4700 	strd	r4, r7, [r6]
 8000c7c:	e7df      	b.n	8000c3e <__udivmoddi4+0xa2>
 8000c7e:	b902      	cbnz	r2, 8000c82 <__udivmoddi4+0xe6>
 8000c80:	deff      	udf	#255	; 0xff
 8000c82:	fab2 f382 	clz	r3, r2
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	f040 8090 	bne.w	8000dac <__udivmoddi4+0x210>
 8000c8c:	1a8a      	subs	r2, r1, r2
 8000c8e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c92:	fa1f fe8c 	uxth.w	lr, ip
 8000c96:	2101      	movs	r1, #1
 8000c98:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c9c:	fb07 2015 	mls	r0, r7, r5, r2
 8000ca0:	0c22      	lsrs	r2, r4, #16
 8000ca2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ca6:	fb0e f005 	mul.w	r0, lr, r5
 8000caa:	4290      	cmp	r0, r2
 8000cac:	d908      	bls.n	8000cc0 <__udivmoddi4+0x124>
 8000cae:	eb1c 0202 	adds.w	r2, ip, r2
 8000cb2:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000cb6:	d202      	bcs.n	8000cbe <__udivmoddi4+0x122>
 8000cb8:	4290      	cmp	r0, r2
 8000cba:	f200 80cb 	bhi.w	8000e54 <__udivmoddi4+0x2b8>
 8000cbe:	4645      	mov	r5, r8
 8000cc0:	1a12      	subs	r2, r2, r0
 8000cc2:	b2a4      	uxth	r4, r4
 8000cc4:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cc8:	fb07 2210 	mls	r2, r7, r0, r2
 8000ccc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cd0:	fb0e fe00 	mul.w	lr, lr, r0
 8000cd4:	45a6      	cmp	lr, r4
 8000cd6:	d908      	bls.n	8000cea <__udivmoddi4+0x14e>
 8000cd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cdc:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000ce0:	d202      	bcs.n	8000ce8 <__udivmoddi4+0x14c>
 8000ce2:	45a6      	cmp	lr, r4
 8000ce4:	f200 80bb 	bhi.w	8000e5e <__udivmoddi4+0x2c2>
 8000ce8:	4610      	mov	r0, r2
 8000cea:	eba4 040e 	sub.w	r4, r4, lr
 8000cee:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cf2:	e79f      	b.n	8000c34 <__udivmoddi4+0x98>
 8000cf4:	f1c1 0720 	rsb	r7, r1, #32
 8000cf8:	408b      	lsls	r3, r1
 8000cfa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cfe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d02:	fa05 f401 	lsl.w	r4, r5, r1
 8000d06:	fa20 f307 	lsr.w	r3, r0, r7
 8000d0a:	40fd      	lsrs	r5, r7
 8000d0c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d10:	4323      	orrs	r3, r4
 8000d12:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	fb09 5518 	mls	r5, r9, r8, r5
 8000d1e:	0c1c      	lsrs	r4, r3, #16
 8000d20:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d24:	fb08 f50e 	mul.w	r5, r8, lr
 8000d28:	42a5      	cmp	r5, r4
 8000d2a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d2e:	fa00 f001 	lsl.w	r0, r0, r1
 8000d32:	d90b      	bls.n	8000d4c <__udivmoddi4+0x1b0>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d3c:	f080 8088 	bcs.w	8000e50 <__udivmoddi4+0x2b4>
 8000d40:	42a5      	cmp	r5, r4
 8000d42:	f240 8085 	bls.w	8000e50 <__udivmoddi4+0x2b4>
 8000d46:	f1a8 0802 	sub.w	r8, r8, #2
 8000d4a:	4464      	add	r4, ip
 8000d4c:	1b64      	subs	r4, r4, r5
 8000d4e:	b29d      	uxth	r5, r3
 8000d50:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d54:	fb09 4413 	mls	r4, r9, r3, r4
 8000d58:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d5c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d60:	45a6      	cmp	lr, r4
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x1da>
 8000d64:	eb1c 0404 	adds.w	r4, ip, r4
 8000d68:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000d6c:	d26c      	bcs.n	8000e48 <__udivmoddi4+0x2ac>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	d96a      	bls.n	8000e48 <__udivmoddi4+0x2ac>
 8000d72:	3b02      	subs	r3, #2
 8000d74:	4464      	add	r4, ip
 8000d76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d7a:	fba3 9502 	umull	r9, r5, r3, r2
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	42ac      	cmp	r4, r5
 8000d84:	46c8      	mov	r8, r9
 8000d86:	46ae      	mov	lr, r5
 8000d88:	d356      	bcc.n	8000e38 <__udivmoddi4+0x29c>
 8000d8a:	d053      	beq.n	8000e34 <__udivmoddi4+0x298>
 8000d8c:	b156      	cbz	r6, 8000da4 <__udivmoddi4+0x208>
 8000d8e:	ebb0 0208 	subs.w	r2, r0, r8
 8000d92:	eb64 040e 	sbc.w	r4, r4, lr
 8000d96:	fa04 f707 	lsl.w	r7, r4, r7
 8000d9a:	40ca      	lsrs	r2, r1
 8000d9c:	40cc      	lsrs	r4, r1
 8000d9e:	4317      	orrs	r7, r2
 8000da0:	e9c6 7400 	strd	r7, r4, [r6]
 8000da4:	4618      	mov	r0, r3
 8000da6:	2100      	movs	r1, #0
 8000da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dac:	f1c3 0120 	rsb	r1, r3, #32
 8000db0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000db4:	fa20 f201 	lsr.w	r2, r0, r1
 8000db8:	fa25 f101 	lsr.w	r1, r5, r1
 8000dbc:	409d      	lsls	r5, r3
 8000dbe:	432a      	orrs	r2, r5
 8000dc0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dc4:	fa1f fe8c 	uxth.w	lr, ip
 8000dc8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dcc:	fb07 1510 	mls	r5, r7, r0, r1
 8000dd0:	0c11      	lsrs	r1, r2, #16
 8000dd2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dd6:	fb00 f50e 	mul.w	r5, r0, lr
 8000dda:	428d      	cmp	r5, r1
 8000ddc:	fa04 f403 	lsl.w	r4, r4, r3
 8000de0:	d908      	bls.n	8000df4 <__udivmoddi4+0x258>
 8000de2:	eb1c 0101 	adds.w	r1, ip, r1
 8000de6:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000dea:	d22f      	bcs.n	8000e4c <__udivmoddi4+0x2b0>
 8000dec:	428d      	cmp	r5, r1
 8000dee:	d92d      	bls.n	8000e4c <__udivmoddi4+0x2b0>
 8000df0:	3802      	subs	r0, #2
 8000df2:	4461      	add	r1, ip
 8000df4:	1b49      	subs	r1, r1, r5
 8000df6:	b292      	uxth	r2, r2
 8000df8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000dfc:	fb07 1115 	mls	r1, r7, r5, r1
 8000e00:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e04:	fb05 f10e 	mul.w	r1, r5, lr
 8000e08:	4291      	cmp	r1, r2
 8000e0a:	d908      	bls.n	8000e1e <__udivmoddi4+0x282>
 8000e0c:	eb1c 0202 	adds.w	r2, ip, r2
 8000e10:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000e14:	d216      	bcs.n	8000e44 <__udivmoddi4+0x2a8>
 8000e16:	4291      	cmp	r1, r2
 8000e18:	d914      	bls.n	8000e44 <__udivmoddi4+0x2a8>
 8000e1a:	3d02      	subs	r5, #2
 8000e1c:	4462      	add	r2, ip
 8000e1e:	1a52      	subs	r2, r2, r1
 8000e20:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e24:	e738      	b.n	8000c98 <__udivmoddi4+0xfc>
 8000e26:	4631      	mov	r1, r6
 8000e28:	4630      	mov	r0, r6
 8000e2a:	e708      	b.n	8000c3e <__udivmoddi4+0xa2>
 8000e2c:	4639      	mov	r1, r7
 8000e2e:	e6e6      	b.n	8000bfe <__udivmoddi4+0x62>
 8000e30:	4610      	mov	r0, r2
 8000e32:	e6fb      	b.n	8000c2c <__udivmoddi4+0x90>
 8000e34:	4548      	cmp	r0, r9
 8000e36:	d2a9      	bcs.n	8000d8c <__udivmoddi4+0x1f0>
 8000e38:	ebb9 0802 	subs.w	r8, r9, r2
 8000e3c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e40:	3b01      	subs	r3, #1
 8000e42:	e7a3      	b.n	8000d8c <__udivmoddi4+0x1f0>
 8000e44:	4645      	mov	r5, r8
 8000e46:	e7ea      	b.n	8000e1e <__udivmoddi4+0x282>
 8000e48:	462b      	mov	r3, r5
 8000e4a:	e794      	b.n	8000d76 <__udivmoddi4+0x1da>
 8000e4c:	4640      	mov	r0, r8
 8000e4e:	e7d1      	b.n	8000df4 <__udivmoddi4+0x258>
 8000e50:	46d0      	mov	r8, sl
 8000e52:	e77b      	b.n	8000d4c <__udivmoddi4+0x1b0>
 8000e54:	3d02      	subs	r5, #2
 8000e56:	4462      	add	r2, ip
 8000e58:	e732      	b.n	8000cc0 <__udivmoddi4+0x124>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e70a      	b.n	8000c74 <__udivmoddi4+0xd8>
 8000e5e:	4464      	add	r4, ip
 8000e60:	3802      	subs	r0, #2
 8000e62:	e742      	b.n	8000cea <__udivmoddi4+0x14e>

08000e64 <__aeabi_idiv0>:
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop

08000e68 <bit16ToInt>:
void intTo16Bit(int num, int ind, uint8_t* buffer) {
  buffer[ind] = (num >> 8) & 0xFF;  // Byte pertama
  buffer[ind+1] = num & 0xFF;         // Byte kedua
}

int bit16ToInt(int ind, uint8_t* buffer) {
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
  int num = ((int) buffer[ind] << 8) | (int) buffer[ind+1];
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	683a      	ldr	r2, [r7, #0]
 8000e76:	4413      	add	r3, r2
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	021b      	lsls	r3, r3, #8
 8000e7c:	687a      	ldr	r2, [r7, #4]
 8000e7e:	3201      	adds	r2, #1
 8000e80:	6839      	ldr	r1, [r7, #0]
 8000e82:	440a      	add	r2, r1
 8000e84:	7812      	ldrb	r2, [r2, #0]
 8000e86:	4313      	orrs	r3, r2
 8000e88:	60fb      	str	r3, [r7, #12]
  if (num > 32767) {
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000e90:	db03      	blt.n	8000e9a <bit16ToInt+0x32>
    num -= 65536;
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8000e98:	60fb      	str	r3, [r7, #12]
  }
  return num;
 8000e9a:	68fb      	ldr	r3, [r7, #12]
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3714      	adds	r7, #20
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr

08000ea8 <merge16>:

void merge16(int16_t *values, uint8_t *merged_data, size_t num_values) {
 8000ea8:	b480      	push	{r7}
 8000eaa:	b087      	sub	sp, #28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
    for (size_t i = 0; i < num_values; i++) {
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]
 8000eb8:	e01d      	b.n	8000ef6 <merge16+0x4e>
        merged_data[i * 2] = (uint8_t)(values[i] & 0xFF);
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	68fa      	ldr	r2, [r7, #12]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	f9b3 1000 	ldrsh.w	r1, [r3]
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	68ba      	ldr	r2, [r7, #8]
 8000ecc:	4413      	add	r3, r2
 8000ece:	b2ca      	uxtb	r2, r1
 8000ed0:	701a      	strb	r2, [r3, #0]
        merged_data[i * 2 + 1] = (uint8_t)((values[i] >> 8) & 0xFF);
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	005b      	lsls	r3, r3, #1
 8000ed6:	68fa      	ldr	r2, [r7, #12]
 8000ed8:	4413      	add	r3, r2
 8000eda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ede:	121b      	asrs	r3, r3, #8
 8000ee0:	b219      	sxth	r1, r3
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	68ba      	ldr	r2, [r7, #8]
 8000eea:	4413      	add	r3, r2
 8000eec:	b2ca      	uxtb	r2, r1
 8000eee:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < num_values; i++) {
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	617b      	str	r3, [r7, #20]
 8000ef6:	697a      	ldr	r2, [r7, #20]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	429a      	cmp	r2, r3
 8000efc:	d3dd      	bcc.n	8000eba <merge16+0x12>
    }
}
 8000efe:	bf00      	nop
 8000f00:	bf00      	nop
 8000f02:	371c      	adds	r7, #28
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr

08000f0c <Set_LED>:
uint8_t LED_Data[MAX_LED][4];
uint8_t LED_Mod[MAX_LED][4];
uint16_t pwmData[(24 * MAX_LED) + 50];

// Function definitions
void Set_LED(int LEDnum, int Red, int Green, int Blue) {
 8000f0c:	b480      	push	{r7}
 8000f0e:	b085      	sub	sp, #20
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	60f8      	str	r0, [r7, #12]
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
 8000f18:	603b      	str	r3, [r7, #0]
    LED_Data[LEDnum][0] = LEDnum;
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	b2d9      	uxtb	r1, r3
 8000f1e:	4a11      	ldr	r2, [pc, #68]	; (8000f64 <Set_LED+0x58>)
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
    LED_Data[LEDnum][1] = Green;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	b2d9      	uxtb	r1, r3
 8000f2a:	4a0e      	ldr	r2, [pc, #56]	; (8000f64 <Set_LED+0x58>)
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	4413      	add	r3, r2
 8000f32:	460a      	mov	r2, r1
 8000f34:	705a      	strb	r2, [r3, #1]
    LED_Data[LEDnum][2] = Red;
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	b2d9      	uxtb	r1, r3
 8000f3a:	4a0a      	ldr	r2, [pc, #40]	; (8000f64 <Set_LED+0x58>)
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	009b      	lsls	r3, r3, #2
 8000f40:	4413      	add	r3, r2
 8000f42:	460a      	mov	r2, r1
 8000f44:	709a      	strb	r2, [r3, #2]
    LED_Data[LEDnum][3] = Blue;
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	b2d9      	uxtb	r1, r3
 8000f4a:	4a06      	ldr	r2, [pc, #24]	; (8000f64 <Set_LED+0x58>)
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	4413      	add	r3, r2
 8000f52:	460a      	mov	r2, r1
 8000f54:	70da      	strb	r2, [r3, #3]
}
 8000f56:	bf00      	nop
 8000f58:	3714      	adds	r7, #20
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	2000016c 	.word	0x2000016c

08000f68 <WS2812_Send>:
        }
    }
#endif
}

void WS2812_Send(TIM_HandleTypeDef *htim, uint32_t channel, int timer_arr) {
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b08c      	sub	sp, #48	; 0x30
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	60f8      	str	r0, [r7, #12]
 8000f70:	60b9      	str	r1, [r7, #8]
 8000f72:	607a      	str	r2, [r7, #4]
    uint32_t indx = 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint32_t color;
    float twothird = (2.0 / 3.0) * timer_arr;
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f7ff fa7b 	bl	8000474 <__aeabi_i2d>
 8000f7e:	a344      	add	r3, pc, #272	; (adr r3, 8001090 <WS2812_Send+0x128>)
 8000f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f84:	f7ff fae0 	bl	8000548 <__aeabi_dmul>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	4610      	mov	r0, r2
 8000f8e:	4619      	mov	r1, r3
 8000f90:	f7ff fd9c 	bl	8000acc <__aeabi_d2f>
 8000f94:	4603      	mov	r3, r0
 8000f96:	61fb      	str	r3, [r7, #28]
    float onethird = (1.0 / 3.0) * timer_arr;
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f7ff fa6b 	bl	8000474 <__aeabi_i2d>
 8000f9e:	a33e      	add	r3, pc, #248	; (adr r3, 8001098 <WS2812_Send+0x130>)
 8000fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa4:	f7ff fad0 	bl	8000548 <__aeabi_dmul>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	460b      	mov	r3, r1
 8000fac:	4610      	mov	r0, r2
 8000fae:	4619      	mov	r1, r3
 8000fb0:	f7ff fd8c 	bl	8000acc <__aeabi_d2f>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	61bb      	str	r3, [r7, #24]

    for (int i = 0; i < MAX_LED; i++) {
 8000fb8:	2300      	movs	r3, #0
 8000fba:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fbc:	e042      	b.n	8001044 <WS2812_Send+0xdc>
#if USE_BRIGHTNESS
        color = ((LED_Mod[i][1] << 16) | (LED_Mod[i][2] << 8) | (LED_Mod[i][3]));
#else
        color = ((LED_Data[i][1] << 16) | (LED_Data[i][2] << 8) | (LED_Data[i][3]));
 8000fbe:	4a32      	ldr	r2, [pc, #200]	; (8001088 <WS2812_Send+0x120>)
 8000fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	4413      	add	r3, r2
 8000fc6:	785b      	ldrb	r3, [r3, #1]
 8000fc8:	041a      	lsls	r2, r3, #16
 8000fca:	492f      	ldr	r1, [pc, #188]	; (8001088 <WS2812_Send+0x120>)
 8000fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fce:	009b      	lsls	r3, r3, #2
 8000fd0:	440b      	add	r3, r1
 8000fd2:	789b      	ldrb	r3, [r3, #2]
 8000fd4:	021b      	lsls	r3, r3, #8
 8000fd6:	431a      	orrs	r2, r3
 8000fd8:	492b      	ldr	r1, [pc, #172]	; (8001088 <WS2812_Send+0x120>)
 8000fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	440b      	add	r3, r1
 8000fe0:	78db      	ldrb	r3, [r3, #3]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	617b      	str	r3, [r7, #20]
#endif

        for (int i = 23; i >= 0; i--) {
 8000fe6:	2317      	movs	r3, #23
 8000fe8:	627b      	str	r3, [r7, #36]	; 0x24
 8000fea:	e025      	b.n	8001038 <WS2812_Send+0xd0>
            if (color & (1 << i)) {
 8000fec:	2201      	movs	r2, #1
 8000fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d00b      	beq.n	8001016 <WS2812_Send+0xae>
                pwmData[indx] = (uint16_t)twothird;  // 2/3 of arr
 8000ffe:	edd7 7a07 	vldr	s15, [r7, #28]
 8001002:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001006:	ee17 3a90 	vmov	r3, s15
 800100a:	b299      	uxth	r1, r3
 800100c:	4a1f      	ldr	r2, [pc, #124]	; (800108c <WS2812_Send+0x124>)
 800100e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001010:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001014:	e00a      	b.n	800102c <WS2812_Send+0xc4>
            } else {
                pwmData[indx] = (uint16_t)onethird;  // 1/3 of arr
 8001016:	edd7 7a06 	vldr	s15, [r7, #24]
 800101a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800101e:	ee17 3a90 	vmov	r3, s15
 8001022:	b299      	uxth	r1, r3
 8001024:	4a19      	ldr	r2, [pc, #100]	; (800108c <WS2812_Send+0x124>)
 8001026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001028:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            }
            indx++;
 800102c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800102e:	3301      	adds	r3, #1
 8001030:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (int i = 23; i >= 0; i--) {
 8001032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001034:	3b01      	subs	r3, #1
 8001036:	627b      	str	r3, [r7, #36]	; 0x24
 8001038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800103a:	2b00      	cmp	r3, #0
 800103c:	dad6      	bge.n	8000fec <WS2812_Send+0x84>
    for (int i = 0; i < MAX_LED; i++) {
 800103e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001040:	3301      	adds	r3, #1
 8001042:	62bb      	str	r3, [r7, #40]	; 0x28
 8001044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001046:	2b0a      	cmp	r3, #10
 8001048:	ddb9      	ble.n	8000fbe <WS2812_Send+0x56>
        }
    }

    for (int i = 0; i < 50; i++) {
 800104a:	2300      	movs	r3, #0
 800104c:	623b      	str	r3, [r7, #32]
 800104e:	e00a      	b.n	8001066 <WS2812_Send+0xfe>
        pwmData[indx] = 0;
 8001050:	4a0e      	ldr	r2, [pc, #56]	; (800108c <WS2812_Send+0x124>)
 8001052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001054:	2100      	movs	r1, #0
 8001056:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        indx++;
 800105a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800105c:	3301      	adds	r3, #1
 800105e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (int i = 0; i < 50; i++) {
 8001060:	6a3b      	ldr	r3, [r7, #32]
 8001062:	3301      	adds	r3, #1
 8001064:	623b      	str	r3, [r7, #32]
 8001066:	6a3b      	ldr	r3, [r7, #32]
 8001068:	2b31      	cmp	r3, #49	; 0x31
 800106a:	ddf1      	ble.n	8001050 <WS2812_Send+0xe8>
    }

    HAL_TIM_PWM_Start_DMA(htim, channel, (uint32_t *)pwmData, indx);
 800106c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800106e:	b29b      	uxth	r3, r3
 8001070:	4a06      	ldr	r2, [pc, #24]	; (800108c <WS2812_Send+0x124>)
 8001072:	68b9      	ldr	r1, [r7, #8]
 8001074:	68f8      	ldr	r0, [r7, #12]
 8001076:	f007 f961 	bl	800833c <HAL_TIM_PWM_Start_DMA>
}
 800107a:	bf00      	nop
 800107c:	3730      	adds	r7, #48	; 0x30
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	f3af 8000 	nop.w
 8001088:	2000016c 	.word	0x2000016c
 800108c:	20000198 	.word	0x20000198
 8001090:	55555555 	.word	0x55555555
 8001094:	3fe55555 	.word	0x3fe55555
 8001098:	55555555 	.word	0x55555555
 800109c:	3fd55555 	.word	0x3fd55555

080010a0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	4a07      	ldr	r2, [pc, #28]	; (80010cc <vApplicationGetIdleTaskMemory+0x2c>)
 80010b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	4a06      	ldr	r2, [pc, #24]	; (80010d0 <vApplicationGetIdleTaskMemory+0x30>)
 80010b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2280      	movs	r2, #128	; 0x80
 80010bc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80010be:	bf00      	nop
 80010c0:	3714      	adds	r7, #20
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	2000040c 	.word	0x2000040c
 80010d0:	20000460 	.word	0x20000460

080010d4 <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
//	HAL_UART_Receive_IT(&huart2, atmega_buffer, 1);
	if (huart->Instance == USART2) {
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	4a78      	ldr	r2, [pc, #480]	; (80012c4 <HAL_UART_RxCpltCallback+0x1f0>)
 80010e2:	4293      	cmp	r3, r2
 80010e4:	f040 80e9 	bne.w	80012ba <HAL_UART_RxCpltCallback+0x1e6>
		if (atmega_buffer[0] == 0xAA && status_rx_atmega == 0) {
 80010e8:	4b77      	ldr	r3, [pc, #476]	; (80012c8 <HAL_UART_RxCpltCallback+0x1f4>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	2baa      	cmp	r3, #170	; 0xaa
 80010ee:	d10d      	bne.n	800110c <HAL_UART_RxCpltCallback+0x38>
 80010f0:	4b76      	ldr	r3, [pc, #472]	; (80012cc <HAL_UART_RxCpltCallback+0x1f8>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d109      	bne.n	800110c <HAL_UART_RxCpltCallback+0x38>
			status_rx_atmega = 1;
 80010f8:	4b74      	ldr	r3, [pc, #464]	; (80012cc <HAL_UART_RxCpltCallback+0x1f8>)
 80010fa:	2201      	movs	r2, #1
 80010fc:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart2, atmega_buffer + 1, 1);
 80010fe:	4b74      	ldr	r3, [pc, #464]	; (80012d0 <HAL_UART_RxCpltCallback+0x1fc>)
 8001100:	2201      	movs	r2, #1
 8001102:	4619      	mov	r1, r3
 8001104:	4873      	ldr	r0, [pc, #460]	; (80012d4 <HAL_UART_RxCpltCallback+0x200>)
 8001106:	f008 f9cb 	bl	80094a0 <HAL_UART_Receive_IT>
 800110a:	e0d6      	b.n	80012ba <HAL_UART_RxCpltCallback+0x1e6>
		} else if (atmega_buffer[1] == 0xBB && status_rx_atmega == 1){
 800110c:	4b6e      	ldr	r3, [pc, #440]	; (80012c8 <HAL_UART_RxCpltCallback+0x1f4>)
 800110e:	785b      	ldrb	r3, [r3, #1]
 8001110:	2bbb      	cmp	r3, #187	; 0xbb
 8001112:	d10d      	bne.n	8001130 <HAL_UART_RxCpltCallback+0x5c>
 8001114:	4b6d      	ldr	r3, [pc, #436]	; (80012cc <HAL_UART_RxCpltCallback+0x1f8>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	2b01      	cmp	r3, #1
 800111a:	d109      	bne.n	8001130 <HAL_UART_RxCpltCallback+0x5c>
			status_rx_atmega = 2;
 800111c:	4b6b      	ldr	r3, [pc, #428]	; (80012cc <HAL_UART_RxCpltCallback+0x1f8>)
 800111e:	2202      	movs	r2, #2
 8001120:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart2, atmega_buffer + 2, 11);
 8001122:	4b6d      	ldr	r3, [pc, #436]	; (80012d8 <HAL_UART_RxCpltCallback+0x204>)
 8001124:	220b      	movs	r2, #11
 8001126:	4619      	mov	r1, r3
 8001128:	486a      	ldr	r0, [pc, #424]	; (80012d4 <HAL_UART_RxCpltCallback+0x200>)
 800112a:	f008 f9b9 	bl	80094a0 <HAL_UART_Receive_IT>
 800112e:	e0c4      	b.n	80012ba <HAL_UART_RxCpltCallback+0x1e6>
		} else if ( status_rx_atmega == 2) {
 8001130:	4b66      	ldr	r3, [pc, #408]	; (80012cc <HAL_UART_RxCpltCallback+0x1f8>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b02      	cmp	r3, #2
 8001136:	f040 80b7 	bne.w	80012a8 <HAL_UART_RxCpltCallback+0x1d4>
			raw_bno055_yaw = (atmega_buffer[4] << 16) | (atmega_buffer[3] << 8) | atmega_buffer[2];
 800113a:	4b63      	ldr	r3, [pc, #396]	; (80012c8 <HAL_UART_RxCpltCallback+0x1f4>)
 800113c:	791b      	ldrb	r3, [r3, #4]
 800113e:	041a      	lsls	r2, r3, #16
 8001140:	4b61      	ldr	r3, [pc, #388]	; (80012c8 <HAL_UART_RxCpltCallback+0x1f4>)
 8001142:	78db      	ldrb	r3, [r3, #3]
 8001144:	021b      	lsls	r3, r3, #8
 8001146:	4313      	orrs	r3, r2
 8001148:	4a5f      	ldr	r2, [pc, #380]	; (80012c8 <HAL_UART_RxCpltCallback+0x1f4>)
 800114a:	7892      	ldrb	r2, [r2, #2]
 800114c:	4313      	orrs	r3, r2
 800114e:	4a63      	ldr	r2, [pc, #396]	; (80012dc <HAL_UART_RxCpltCallback+0x208>)
 8001150:	6013      	str	r3, [r2, #0]
			raw_bno055_pitch = (atmega_buffer[7] << 16) | (atmega_buffer[6] << 8) | atmega_buffer[5];
 8001152:	4b5d      	ldr	r3, [pc, #372]	; (80012c8 <HAL_UART_RxCpltCallback+0x1f4>)
 8001154:	79db      	ldrb	r3, [r3, #7]
 8001156:	041a      	lsls	r2, r3, #16
 8001158:	4b5b      	ldr	r3, [pc, #364]	; (80012c8 <HAL_UART_RxCpltCallback+0x1f4>)
 800115a:	799b      	ldrb	r3, [r3, #6]
 800115c:	021b      	lsls	r3, r3, #8
 800115e:	4313      	orrs	r3, r2
 8001160:	4a59      	ldr	r2, [pc, #356]	; (80012c8 <HAL_UART_RxCpltCallback+0x1f4>)
 8001162:	7952      	ldrb	r2, [r2, #5]
 8001164:	4313      	orrs	r3, r2
 8001166:	4a5e      	ldr	r2, [pc, #376]	; (80012e0 <HAL_UART_RxCpltCallback+0x20c>)
 8001168:	6013      	str	r3, [r2, #0]
			raw_bno055_roll = (atmega_buffer[10] << 16) | (atmega_buffer[9] << 8) | atmega_buffer[8];
 800116a:	4b57      	ldr	r3, [pc, #348]	; (80012c8 <HAL_UART_RxCpltCallback+0x1f4>)
 800116c:	7a9b      	ldrb	r3, [r3, #10]
 800116e:	041a      	lsls	r2, r3, #16
 8001170:	4b55      	ldr	r3, [pc, #340]	; (80012c8 <HAL_UART_RxCpltCallback+0x1f4>)
 8001172:	7a5b      	ldrb	r3, [r3, #9]
 8001174:	021b      	lsls	r3, r3, #8
 8001176:	4313      	orrs	r3, r2
 8001178:	4a53      	ldr	r2, [pc, #332]	; (80012c8 <HAL_UART_RxCpltCallback+0x1f4>)
 800117a:	7a12      	ldrb	r2, [r2, #8]
 800117c:	4313      	orrs	r3, r2
 800117e:	4a59      	ldr	r2, [pc, #356]	; (80012e4 <HAL_UART_RxCpltCallback+0x210>)
 8001180:	6013      	str	r3, [r2, #0]

			if (raw_bno055_yaw > 8388607) {
 8001182:	4b56      	ldr	r3, [pc, #344]	; (80012dc <HAL_UART_RxCpltCallback+0x208>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800118a:	db15      	blt.n	80011b8 <HAL_UART_RxCpltCallback+0xe4>
				bno055_yaw = ((raw_bno055_yaw - 16777216) / 100.0);
 800118c:	4b53      	ldr	r3, [pc, #332]	; (80012dc <HAL_UART_RxCpltCallback+0x208>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 8001194:	4618      	mov	r0, r3
 8001196:	f7ff f96d 	bl	8000474 <__aeabi_i2d>
 800119a:	f04f 0200 	mov.w	r2, #0
 800119e:	4b52      	ldr	r3, [pc, #328]	; (80012e8 <HAL_UART_RxCpltCallback+0x214>)
 80011a0:	f7ff fafc 	bl	800079c <__aeabi_ddiv>
 80011a4:	4602      	mov	r2, r0
 80011a6:	460b      	mov	r3, r1
 80011a8:	4610      	mov	r0, r2
 80011aa:	4619      	mov	r1, r3
 80011ac:	f7ff fc8e 	bl	8000acc <__aeabi_d2f>
 80011b0:	4603      	mov	r3, r0
 80011b2:	4a4e      	ldr	r2, [pc, #312]	; (80012ec <HAL_UART_RxCpltCallback+0x218>)
 80011b4:	6013      	str	r3, [r2, #0]
 80011b6:	e012      	b.n	80011de <HAL_UART_RxCpltCallback+0x10a>
			} else {
				bno055_yaw = (raw_bno055_yaw / 100.0);
 80011b8:	4b48      	ldr	r3, [pc, #288]	; (80012dc <HAL_UART_RxCpltCallback+0x208>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff f959 	bl	8000474 <__aeabi_i2d>
 80011c2:	f04f 0200 	mov.w	r2, #0
 80011c6:	4b48      	ldr	r3, [pc, #288]	; (80012e8 <HAL_UART_RxCpltCallback+0x214>)
 80011c8:	f7ff fae8 	bl	800079c <__aeabi_ddiv>
 80011cc:	4602      	mov	r2, r0
 80011ce:	460b      	mov	r3, r1
 80011d0:	4610      	mov	r0, r2
 80011d2:	4619      	mov	r1, r3
 80011d4:	f7ff fc7a 	bl	8000acc <__aeabi_d2f>
 80011d8:	4603      	mov	r3, r0
 80011da:	4a44      	ldr	r2, [pc, #272]	; (80012ec <HAL_UART_RxCpltCallback+0x218>)
 80011dc:	6013      	str	r3, [r2, #0]
			}

			if (raw_bno055_pitch > 8388607) {
 80011de:	4b40      	ldr	r3, [pc, #256]	; (80012e0 <HAL_UART_RxCpltCallback+0x20c>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80011e6:	db15      	blt.n	8001214 <HAL_UART_RxCpltCallback+0x140>
				bno055_pitch = ((raw_bno055_pitch - 16777216) / 100.0);
 80011e8:	4b3d      	ldr	r3, [pc, #244]	; (80012e0 <HAL_UART_RxCpltCallback+0x20c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff f93f 	bl	8000474 <__aeabi_i2d>
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	4b3b      	ldr	r3, [pc, #236]	; (80012e8 <HAL_UART_RxCpltCallback+0x214>)
 80011fc:	f7ff face 	bl	800079c <__aeabi_ddiv>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	4610      	mov	r0, r2
 8001206:	4619      	mov	r1, r3
 8001208:	f7ff fc60 	bl	8000acc <__aeabi_d2f>
 800120c:	4603      	mov	r3, r0
 800120e:	4a38      	ldr	r2, [pc, #224]	; (80012f0 <HAL_UART_RxCpltCallback+0x21c>)
 8001210:	6013      	str	r3, [r2, #0]
 8001212:	e012      	b.n	800123a <HAL_UART_RxCpltCallback+0x166>
			} else {
				bno055_pitch = (raw_bno055_pitch / 100.0);
 8001214:	4b32      	ldr	r3, [pc, #200]	; (80012e0 <HAL_UART_RxCpltCallback+0x20c>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff f92b 	bl	8000474 <__aeabi_i2d>
 800121e:	f04f 0200 	mov.w	r2, #0
 8001222:	4b31      	ldr	r3, [pc, #196]	; (80012e8 <HAL_UART_RxCpltCallback+0x214>)
 8001224:	f7ff faba 	bl	800079c <__aeabi_ddiv>
 8001228:	4602      	mov	r2, r0
 800122a:	460b      	mov	r3, r1
 800122c:	4610      	mov	r0, r2
 800122e:	4619      	mov	r1, r3
 8001230:	f7ff fc4c 	bl	8000acc <__aeabi_d2f>
 8001234:	4603      	mov	r3, r0
 8001236:	4a2e      	ldr	r2, [pc, #184]	; (80012f0 <HAL_UART_RxCpltCallback+0x21c>)
 8001238:	6013      	str	r3, [r2, #0]
			}

			if (raw_bno055_roll > 8388607) {
 800123a:	4b2a      	ldr	r3, [pc, #168]	; (80012e4 <HAL_UART_RxCpltCallback+0x210>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001242:	db15      	blt.n	8001270 <HAL_UART_RxCpltCallback+0x19c>
				bno055_roll = ((raw_bno055_roll - 16777216) / 100.0);
 8001244:	4b27      	ldr	r3, [pc, #156]	; (80012e4 <HAL_UART_RxCpltCallback+0x210>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff f911 	bl	8000474 <__aeabi_i2d>
 8001252:	f04f 0200 	mov.w	r2, #0
 8001256:	4b24      	ldr	r3, [pc, #144]	; (80012e8 <HAL_UART_RxCpltCallback+0x214>)
 8001258:	f7ff faa0 	bl	800079c <__aeabi_ddiv>
 800125c:	4602      	mov	r2, r0
 800125e:	460b      	mov	r3, r1
 8001260:	4610      	mov	r0, r2
 8001262:	4619      	mov	r1, r3
 8001264:	f7ff fc32 	bl	8000acc <__aeabi_d2f>
 8001268:	4603      	mov	r3, r0
 800126a:	4a22      	ldr	r2, [pc, #136]	; (80012f4 <HAL_UART_RxCpltCallback+0x220>)
 800126c:	6013      	str	r3, [r2, #0]
 800126e:	e012      	b.n	8001296 <HAL_UART_RxCpltCallback+0x1c2>
			} else {
				bno055_roll = (raw_bno055_roll / 100.0);
 8001270:	4b1c      	ldr	r3, [pc, #112]	; (80012e4 <HAL_UART_RxCpltCallback+0x210>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff f8fd 	bl	8000474 <__aeabi_i2d>
 800127a:	f04f 0200 	mov.w	r2, #0
 800127e:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <HAL_UART_RxCpltCallback+0x214>)
 8001280:	f7ff fa8c 	bl	800079c <__aeabi_ddiv>
 8001284:	4602      	mov	r2, r0
 8001286:	460b      	mov	r3, r1
 8001288:	4610      	mov	r0, r2
 800128a:	4619      	mov	r1, r3
 800128c:	f7ff fc1e 	bl	8000acc <__aeabi_d2f>
 8001290:	4603      	mov	r3, r0
 8001292:	4a18      	ldr	r2, [pc, #96]	; (80012f4 <HAL_UART_RxCpltCallback+0x220>)
 8001294:	6013      	str	r3, [r2, #0]
			}

			status_rx_atmega = 0;
 8001296:	4b0d      	ldr	r3, [pc, #52]	; (80012cc <HAL_UART_RxCpltCallback+0x1f8>)
 8001298:	2200      	movs	r2, #0
 800129a:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart2, atmega_buffer, 1);
 800129c:	2201      	movs	r2, #1
 800129e:	490a      	ldr	r1, [pc, #40]	; (80012c8 <HAL_UART_RxCpltCallback+0x1f4>)
 80012a0:	480c      	ldr	r0, [pc, #48]	; (80012d4 <HAL_UART_RxCpltCallback+0x200>)
 80012a2:	f008 f8fd 	bl	80094a0 <HAL_UART_Receive_IT>
		} else {
			status_rx_atmega = 0;
			HAL_UART_Receive_IT(&huart2, atmega_buffer, 1);
		}
	}
}
 80012a6:	e008      	b.n	80012ba <HAL_UART_RxCpltCallback+0x1e6>
			status_rx_atmega = 0;
 80012a8:	4b08      	ldr	r3, [pc, #32]	; (80012cc <HAL_UART_RxCpltCallback+0x1f8>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart2, atmega_buffer, 1);
 80012ae:	2201      	movs	r2, #1
 80012b0:	4905      	ldr	r1, [pc, #20]	; (80012c8 <HAL_UART_RxCpltCallback+0x1f4>)
 80012b2:	4808      	ldr	r0, [pc, #32]	; (80012d4 <HAL_UART_RxCpltCallback+0x200>)
 80012b4:	f008 f8f4 	bl	80094a0 <HAL_UART_Receive_IT>
}
 80012b8:	e7ff      	b.n	80012ba <HAL_UART_RxCpltCallback+0x1e6>
 80012ba:	bf00      	nop
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40004400 	.word	0x40004400
 80012c8:	20000a10 	.word	0x20000a10
 80012cc:	20000a1d 	.word	0x20000a1d
 80012d0:	20000a11 	.word	0x20000a11
 80012d4:	200008dc 	.word	0x200008dc
 80012d8:	20000a12 	.word	0x20000a12
 80012dc:	20000a20 	.word	0x20000a20
 80012e0:	20000a24 	.word	0x20000a24
 80012e4:	20000a28 	.word	0x20000a28
 80012e8:	40590000 	.word	0x40590000
 80012ec:	20000a2c 	.word	0x20000a2c
 80012f0:	20000a30 	.word	0x20000a30
 80012f4:	20000a34 	.word	0x20000a34

080012f8 <convertADCtoVoltage>:

float convertADCtoVoltage(uint16_t adc_value, uint16_t min_adc, uint16_t max_adc, float min_voltage, float max_voltage) {
 80012f8:	b480      	push	{r7}
 80012fa:	b087      	sub	sp, #28
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	ed87 0a01 	vstr	s0, [r7, #4]
 8001304:	edc7 0a00 	vstr	s1, [r7]
 8001308:	81fb      	strh	r3, [r7, #14]
 800130a:	460b      	mov	r3, r1
 800130c:	81bb      	strh	r3, [r7, #12]
 800130e:	4613      	mov	r3, r2
 8001310:	817b      	strh	r3, [r7, #10]
    float a = (max_voltage - min_voltage) / (float)(max_adc - min_adc);
 8001312:	ed97 7a00 	vldr	s14, [r7]
 8001316:	edd7 7a01 	vldr	s15, [r7, #4]
 800131a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800131e:	897a      	ldrh	r2, [r7, #10]
 8001320:	89bb      	ldrh	r3, [r7, #12]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	ee07 3a90 	vmov	s15, r3
 8001328:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800132c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001330:	edc7 7a05 	vstr	s15, [r7, #20]
    float b = min_voltage - a * min_adc;
 8001334:	89bb      	ldrh	r3, [r7, #12]
 8001336:	ee07 3a90 	vmov	s15, r3
 800133a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800133e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001346:	ed97 7a01 	vldr	s14, [r7, #4]
 800134a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800134e:	edc7 7a04 	vstr	s15, [r7, #16]
    return a * adc_value + b;
 8001352:	89fb      	ldrh	r3, [r7, #14]
 8001354:	ee07 3a90 	vmov	s15, r3
 8001358:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800135c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001360:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001364:	edd7 7a04 	vldr	s15, [r7, #16]
 8001368:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 800136c:	eeb0 0a67 	vmov.f32	s0, s15
 8001370:	371c      	adds	r7, #28
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
	...

0800137c <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim3, TIM_CHANNEL_2);
 8001384:	2104      	movs	r1, #4
 8001386:	4805      	ldr	r0, [pc, #20]	; (800139c <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8001388:	f007 f9a0 	bl	80086cc <HAL_TIM_PWM_Stop_DMA>
	datasentflag=1;
 800138c:	4b04      	ldr	r3, [pc, #16]	; (80013a0 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 800138e:	2201      	movs	r2, #1
 8001390:	601a      	str	r2, [r3, #0]
}
 8001392:	bf00      	nop
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	2000075c 	.word	0x2000075c
 80013a0:	20000b50 	.word	0x20000b50

080013a4 <map>:

int map(int x, int in_min, int in_max, int out_min, int out_max) {
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	60f8      	str	r0, [r7, #12]
 80013ac:	60b9      	str	r1, [r7, #8]
 80013ae:	607a      	str	r2, [r7, #4]
 80013b0:	603b      	str	r3, [r7, #0]
    return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	69b9      	ldr	r1, [r7, #24]
 80013ba:	683a      	ldr	r2, [r7, #0]
 80013bc:	1a8a      	subs	r2, r1, r2
 80013be:	fb03 f202 	mul.w	r2, r3, r2
 80013c2:	6879      	ldr	r1, [r7, #4]
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	1acb      	subs	r3, r1, r3
 80013c8:	fb92 f2f3 	sdiv	r2, r2, r3
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	4413      	add	r3, r2
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3714      	adds	r7, #20
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80013dc:	b5b0      	push	{r4, r5, r7, lr}
 80013de:	b0a4      	sub	sp, #144	; 0x90
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013e2:	f002 fb8b 	bl	8003afc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013e6:	f000 f8b9 	bl	800155c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013ea:	f000 fba5 	bl	8001b38 <MX_GPIO_Init>
  MX_DMA_Init();
 80013ee:	f000 fb6d 	bl	8001acc <MX_DMA_Init>
  MX_TIM4_Init();
 80013f2:	f000 fa01 	bl	80017f8 <MX_TIM4_Init>
  MX_TIM5_Init();
 80013f6:	f000 fa79 	bl	80018ec <MX_TIM5_Init>
  MX_TIM9_Init();
 80013fa:	f000 faf1 	bl	80019e0 <MX_TIM9_Init>
  MX_USART2_UART_Init();
 80013fe:	f000 fb35 	bl	8001a6c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001402:	f000 f973 	bl	80016ec <MX_I2C1_Init>
  MX_ADC1_Init();
 8001406:	f000 f913 	bl	8001630 <MX_ADC1_Init>
  MX_TIM3_Init();
 800140a:	f000 f99d 	bl	8001748 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  //ESC PWM Timer Init
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800140e:	2100      	movs	r1, #0
 8001410:	4843      	ldr	r0, [pc, #268]	; (8001520 <main+0x144>)
 8001412:	f006 fecb 	bl	80081ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001416:	2104      	movs	r1, #4
 8001418:	4841      	ldr	r0, [pc, #260]	; (8001520 <main+0x144>)
 800141a:	f006 fec7 	bl	80081ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800141e:	2108      	movs	r1, #8
 8001420:	483f      	ldr	r0, [pc, #252]	; (8001520 <main+0x144>)
 8001422:	f006 fec3 	bl	80081ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001426:	210c      	movs	r1, #12
 8001428:	483d      	ldr	r0, [pc, #244]	; (8001520 <main+0x144>)
 800142a:	f006 febf 	bl	80081ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 800142e:	2100      	movs	r1, #0
 8001430:	483c      	ldr	r0, [pc, #240]	; (8001524 <main+0x148>)
 8001432:	f006 febb 	bl	80081ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_2);
 8001436:	2104      	movs	r1, #4
 8001438:	483a      	ldr	r0, [pc, #232]	; (8001524 <main+0x148>)
 800143a:	f006 feb7 	bl	80081ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_3);
 800143e:	2108      	movs	r1, #8
 8001440:	4838      	ldr	r0, [pc, #224]	; (8001524 <main+0x148>)
 8001442:	f006 feb3 	bl	80081ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 8001446:	210c      	movs	r1, #12
 8001448:	4836      	ldr	r0, [pc, #216]	; (8001524 <main+0x148>)
 800144a:	f006 feaf 	bl	80081ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 800144e:	2100      	movs	r1, #0
 8001450:	4835      	ldr	r0, [pc, #212]	; (8001528 <main+0x14c>)
 8001452:	f006 feab 	bl	80081ac <HAL_TIM_PWM_Start>

  //ADC
  HAL_ADC_Start_DMA(&hadc1, adc1_value, 2);
 8001456:	2202      	movs	r2, #2
 8001458:	4934      	ldr	r1, [pc, #208]	; (800152c <main+0x150>)
 800145a:	4835      	ldr	r0, [pc, #212]	; (8001530 <main+0x154>)
 800145c:	f002 fbf8 	bl	8003c50 <HAL_ADC_Start_DMA>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of cdcSerialTask */
  osThreadDef(cdcSerialTask, StartCdcSerialTask, osPriorityNormal, 0, 128);
 8001460:	4b34      	ldr	r3, [pc, #208]	; (8001534 <main+0x158>)
 8001462:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8001466:	461d      	mov	r5, r3
 8001468:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800146a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800146c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001470:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  cdcSerialTaskHandle = osThreadCreate(osThread(cdcSerialTask), NULL);
 8001474:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001478:	2100      	movs	r1, #0
 800147a:	4618      	mov	r0, r3
 800147c:	f00c fa5d 	bl	800d93a <osThreadCreate>
 8001480:	4603      	mov	r3, r0
 8001482:	4a2d      	ldr	r2, [pc, #180]	; (8001538 <main+0x15c>)
 8001484:	6013      	str	r3, [r2, #0]

  /* definition and creation of movementTask */
  osThreadDef(movementTask, StartMovementTask, osPriorityNormal, 0, 128);
 8001486:	4b2d      	ldr	r3, [pc, #180]	; (800153c <main+0x160>)
 8001488:	f107 0458 	add.w	r4, r7, #88	; 0x58
 800148c:	461d      	mov	r5, r3
 800148e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001490:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001492:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001496:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  movementTaskHandle = osThreadCreate(osThread(movementTask), NULL);
 800149a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800149e:	2100      	movs	r1, #0
 80014a0:	4618      	mov	r0, r3
 80014a2:	f00c fa4a 	bl	800d93a <osThreadCreate>
 80014a6:	4603      	mov	r3, r0
 80014a8:	4a25      	ldr	r2, [pc, #148]	; (8001540 <main+0x164>)
 80014aa:	6013      	str	r3, [r2, #0]

  /* definition and creation of getPressureTask */
  osThreadDef(getPressureTask, StartGetPressureTask, osPriorityHigh, 0, 128);
 80014ac:	4b25      	ldr	r3, [pc, #148]	; (8001544 <main+0x168>)
 80014ae:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 80014b2:	461d      	mov	r5, r3
 80014b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014b8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  getPressureTaskHandle = osThreadCreate(osThread(getPressureTask), NULL);
 80014c0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80014c4:	2100      	movs	r1, #0
 80014c6:	4618      	mov	r0, r3
 80014c8:	f00c fa37 	bl	800d93a <osThreadCreate>
 80014cc:	4603      	mov	r3, r0
 80014ce:	4a1e      	ldr	r2, [pc, #120]	; (8001548 <main+0x16c>)
 80014d0:	6013      	str	r3, [r2, #0]

  /* definition and creation of stroboTask */
  osThreadDef(stroboTask, StartStroboTask, osPriorityBelowNormal, 0, 128);
 80014d2:	4b1e      	ldr	r3, [pc, #120]	; (800154c <main+0x170>)
 80014d4:	f107 0420 	add.w	r4, r7, #32
 80014d8:	461d      	mov	r5, r3
 80014da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014e2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  stroboTaskHandle = osThreadCreate(osThread(stroboTask), NULL);
 80014e6:	f107 0320 	add.w	r3, r7, #32
 80014ea:	2100      	movs	r1, #0
 80014ec:	4618      	mov	r0, r3
 80014ee:	f00c fa24 	bl	800d93a <osThreadCreate>
 80014f2:	4603      	mov	r3, r0
 80014f4:	4a16      	ldr	r2, [pc, #88]	; (8001550 <main+0x174>)
 80014f6:	6013      	str	r3, [r2, #0]

  /* definition and creation of otherTask */
  osThreadDef(otherTask, StartOtherTask, osPriorityIdle, 0, 128);
 80014f8:	4b16      	ldr	r3, [pc, #88]	; (8001554 <main+0x178>)
 80014fa:	1d3c      	adds	r4, r7, #4
 80014fc:	461d      	mov	r5, r3
 80014fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001500:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001502:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001506:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  otherTaskHandle = osThreadCreate(osThread(otherTask), NULL);
 800150a:	1d3b      	adds	r3, r7, #4
 800150c:	2100      	movs	r1, #0
 800150e:	4618      	mov	r0, r3
 8001510:	f00c fa13 	bl	800d93a <osThreadCreate>
 8001514:	4603      	mov	r3, r0
 8001516:	4a10      	ldr	r2, [pc, #64]	; (8001558 <main+0x17c>)
 8001518:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800151a:	f00c fa07 	bl	800d92c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800151e:	e7fe      	b.n	800151e <main+0x142>
 8001520:	200007a4 	.word	0x200007a4
 8001524:	200007ec 	.word	0x200007ec
 8001528:	20000834 	.word	0x20000834
 800152c:	20000b3c 	.word	0x20000b3c
 8001530:	20000660 	.word	0x20000660
 8001534:	0800f9d8 	.word	0x0800f9d8
 8001538:	20000924 	.word	0x20000924
 800153c:	0800fa04 	.word	0x0800fa04
 8001540:	20000928 	.word	0x20000928
 8001544:	0800fa30 	.word	0x0800fa30
 8001548:	2000092c 	.word	0x2000092c
 800154c:	0800fa58 	.word	0x0800fa58
 8001550:	20000930 	.word	0x20000930
 8001554:	0800fa80 	.word	0x0800fa80
 8001558:	20000934 	.word	0x20000934

0800155c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b094      	sub	sp, #80	; 0x50
 8001560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001562:	f107 0320 	add.w	r3, r7, #32
 8001566:	2230      	movs	r2, #48	; 0x30
 8001568:	2100      	movs	r1, #0
 800156a:	4618      	mov	r0, r3
 800156c:	f00e f946 	bl	800f7fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001570:	f107 030c 	add.w	r3, r7, #12
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]
 8001578:	605a      	str	r2, [r3, #4]
 800157a:	609a      	str	r2, [r3, #8]
 800157c:	60da      	str	r2, [r3, #12]
 800157e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001580:	2300      	movs	r3, #0
 8001582:	60bb      	str	r3, [r7, #8]
 8001584:	4b28      	ldr	r3, [pc, #160]	; (8001628 <SystemClock_Config+0xcc>)
 8001586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001588:	4a27      	ldr	r2, [pc, #156]	; (8001628 <SystemClock_Config+0xcc>)
 800158a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800158e:	6413      	str	r3, [r2, #64]	; 0x40
 8001590:	4b25      	ldr	r3, [pc, #148]	; (8001628 <SystemClock_Config+0xcc>)
 8001592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001594:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001598:	60bb      	str	r3, [r7, #8]
 800159a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800159c:	2300      	movs	r3, #0
 800159e:	607b      	str	r3, [r7, #4]
 80015a0:	4b22      	ldr	r3, [pc, #136]	; (800162c <SystemClock_Config+0xd0>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a21      	ldr	r2, [pc, #132]	; (800162c <SystemClock_Config+0xd0>)
 80015a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015aa:	6013      	str	r3, [r2, #0]
 80015ac:	4b1f      	ldr	r3, [pc, #124]	; (800162c <SystemClock_Config+0xd0>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015b4:	607b      	str	r3, [r7, #4]
 80015b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015b8:	2301      	movs	r3, #1
 80015ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015c2:	2302      	movs	r3, #2
 80015c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80015cc:	2304      	movs	r3, #4
 80015ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80015d0:	23a8      	movs	r3, #168	; 0xa8
 80015d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015d4:	2302      	movs	r3, #2
 80015d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80015d8:	2307      	movs	r3, #7
 80015da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015dc:	f107 0320 	add.w	r3, r7, #32
 80015e0:	4618      	mov	r0, r3
 80015e2:	f005 ffff 	bl	80075e4 <HAL_RCC_OscConfig>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015ec:	f001 fcc4 	bl	8002f78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015f0:	230f      	movs	r3, #15
 80015f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015f4:	2302      	movs	r3, #2
 80015f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015f8:	2300      	movs	r3, #0
 80015fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015fc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001600:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001602:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001606:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001608:	f107 030c 	add.w	r3, r7, #12
 800160c:	2105      	movs	r1, #5
 800160e:	4618      	mov	r0, r3
 8001610:	f006 fa60 	bl	8007ad4 <HAL_RCC_ClockConfig>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800161a:	f001 fcad 	bl	8002f78 <Error_Handler>
  }
}
 800161e:	bf00      	nop
 8001620:	3750      	adds	r7, #80	; 0x50
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	40023800 	.word	0x40023800
 800162c:	40007000 	.word	0x40007000

08001630 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001636:	463b      	mov	r3, r7
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	609a      	str	r2, [r3, #8]
 8001640:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001642:	4b27      	ldr	r3, [pc, #156]	; (80016e0 <MX_ADC1_Init+0xb0>)
 8001644:	4a27      	ldr	r2, [pc, #156]	; (80016e4 <MX_ADC1_Init+0xb4>)
 8001646:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001648:	4b25      	ldr	r3, [pc, #148]	; (80016e0 <MX_ADC1_Init+0xb0>)
 800164a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800164e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001650:	4b23      	ldr	r3, [pc, #140]	; (80016e0 <MX_ADC1_Init+0xb0>)
 8001652:	2200      	movs	r2, #0
 8001654:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001656:	4b22      	ldr	r3, [pc, #136]	; (80016e0 <MX_ADC1_Init+0xb0>)
 8001658:	2201      	movs	r2, #1
 800165a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800165c:	4b20      	ldr	r3, [pc, #128]	; (80016e0 <MX_ADC1_Init+0xb0>)
 800165e:	2201      	movs	r2, #1
 8001660:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001662:	4b1f      	ldr	r3, [pc, #124]	; (80016e0 <MX_ADC1_Init+0xb0>)
 8001664:	2200      	movs	r2, #0
 8001666:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800166a:	4b1d      	ldr	r3, [pc, #116]	; (80016e0 <MX_ADC1_Init+0xb0>)
 800166c:	2200      	movs	r2, #0
 800166e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001670:	4b1b      	ldr	r3, [pc, #108]	; (80016e0 <MX_ADC1_Init+0xb0>)
 8001672:	4a1d      	ldr	r2, [pc, #116]	; (80016e8 <MX_ADC1_Init+0xb8>)
 8001674:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001676:	4b1a      	ldr	r3, [pc, #104]	; (80016e0 <MX_ADC1_Init+0xb0>)
 8001678:	2200      	movs	r2, #0
 800167a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800167c:	4b18      	ldr	r3, [pc, #96]	; (80016e0 <MX_ADC1_Init+0xb0>)
 800167e:	2202      	movs	r2, #2
 8001680:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001682:	4b17      	ldr	r3, [pc, #92]	; (80016e0 <MX_ADC1_Init+0xb0>)
 8001684:	2201      	movs	r2, #1
 8001686:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800168a:	4b15      	ldr	r3, [pc, #84]	; (80016e0 <MX_ADC1_Init+0xb0>)
 800168c:	2201      	movs	r2, #1
 800168e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001690:	4813      	ldr	r0, [pc, #76]	; (80016e0 <MX_ADC1_Init+0xb0>)
 8001692:	f002 fa99 	bl	8003bc8 <HAL_ADC_Init>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800169c:	f001 fc6c 	bl	8002f78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80016a0:	2304      	movs	r3, #4
 80016a2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80016a4:	2301      	movs	r3, #1
 80016a6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80016a8:	2300      	movs	r3, #0
 80016aa:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016ac:	463b      	mov	r3, r7
 80016ae:	4619      	mov	r1, r3
 80016b0:	480b      	ldr	r0, [pc, #44]	; (80016e0 <MX_ADC1_Init+0xb0>)
 80016b2:	f002 fbfb 	bl	8003eac <HAL_ADC_ConfigChannel>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80016bc:	f001 fc5c 	bl	8002f78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Rank = 2;
 80016c0:	2302      	movs	r3, #2
 80016c2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016c4:	463b      	mov	r3, r7
 80016c6:	4619      	mov	r1, r3
 80016c8:	4805      	ldr	r0, [pc, #20]	; (80016e0 <MX_ADC1_Init+0xb0>)
 80016ca:	f002 fbef 	bl	8003eac <HAL_ADC_ConfigChannel>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 80016d4:	f001 fc50 	bl	8002f78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016d8:	bf00      	nop
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	20000660 	.word	0x20000660
 80016e4:	40012000 	.word	0x40012000
 80016e8:	0f000001 	.word	0x0f000001

080016ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016f0:	4b12      	ldr	r3, [pc, #72]	; (800173c <MX_I2C1_Init+0x50>)
 80016f2:	4a13      	ldr	r2, [pc, #76]	; (8001740 <MX_I2C1_Init+0x54>)
 80016f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80016f6:	4b11      	ldr	r3, [pc, #68]	; (800173c <MX_I2C1_Init+0x50>)
 80016f8:	4a12      	ldr	r2, [pc, #72]	; (8001744 <MX_I2C1_Init+0x58>)
 80016fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016fc:	4b0f      	ldr	r3, [pc, #60]	; (800173c <MX_I2C1_Init+0x50>)
 80016fe:	2200      	movs	r2, #0
 8001700:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001702:	4b0e      	ldr	r3, [pc, #56]	; (800173c <MX_I2C1_Init+0x50>)
 8001704:	2200      	movs	r2, #0
 8001706:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001708:	4b0c      	ldr	r3, [pc, #48]	; (800173c <MX_I2C1_Init+0x50>)
 800170a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800170e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001710:	4b0a      	ldr	r3, [pc, #40]	; (800173c <MX_I2C1_Init+0x50>)
 8001712:	2200      	movs	r2, #0
 8001714:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001716:	4b09      	ldr	r3, [pc, #36]	; (800173c <MX_I2C1_Init+0x50>)
 8001718:	2200      	movs	r2, #0
 800171a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800171c:	4b07      	ldr	r3, [pc, #28]	; (800173c <MX_I2C1_Init+0x50>)
 800171e:	2200      	movs	r2, #0
 8001720:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001722:	4b06      	ldr	r3, [pc, #24]	; (800173c <MX_I2C1_Init+0x50>)
 8001724:	2200      	movs	r2, #0
 8001726:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001728:	4804      	ldr	r0, [pc, #16]	; (800173c <MX_I2C1_Init+0x50>)
 800172a:	f003 fd11 	bl	8005150 <HAL_I2C_Init>
 800172e:	4603      	mov	r3, r0
 8001730:	2b00      	cmp	r3, #0
 8001732:	d001      	beq.n	8001738 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001734:	f001 fc20 	bl	8002f78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001738:	bf00      	nop
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20000708 	.word	0x20000708
 8001740:	40005400 	.word	0x40005400
 8001744:	00061a80 	.word	0x00061a80

08001748 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b08a      	sub	sp, #40	; 0x28
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800174e:	f107 0320 	add.w	r3, r7, #32
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001758:	1d3b      	adds	r3, r7, #4
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	605a      	str	r2, [r3, #4]
 8001760:	609a      	str	r2, [r3, #8]
 8001762:	60da      	str	r2, [r3, #12]
 8001764:	611a      	str	r2, [r3, #16]
 8001766:	615a      	str	r2, [r3, #20]
 8001768:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800176a:	4b21      	ldr	r3, [pc, #132]	; (80017f0 <MX_TIM3_Init+0xa8>)
 800176c:	4a21      	ldr	r2, [pc, #132]	; (80017f4 <MX_TIM3_Init+0xac>)
 800176e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001770:	4b1f      	ldr	r3, [pc, #124]	; (80017f0 <MX_TIM3_Init+0xa8>)
 8001772:	2200      	movs	r2, #0
 8001774:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001776:	4b1e      	ldr	r3, [pc, #120]	; (80017f0 <MX_TIM3_Init+0xa8>)
 8001778:	2200      	movs	r2, #0
 800177a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 105-1;
 800177c:	4b1c      	ldr	r3, [pc, #112]	; (80017f0 <MX_TIM3_Init+0xa8>)
 800177e:	2268      	movs	r2, #104	; 0x68
 8001780:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001782:	4b1b      	ldr	r3, [pc, #108]	; (80017f0 <MX_TIM3_Init+0xa8>)
 8001784:	2200      	movs	r2, #0
 8001786:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001788:	4b19      	ldr	r3, [pc, #100]	; (80017f0 <MX_TIM3_Init+0xa8>)
 800178a:	2200      	movs	r2, #0
 800178c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800178e:	4818      	ldr	r0, [pc, #96]	; (80017f0 <MX_TIM3_Init+0xa8>)
 8001790:	f006 fcbc 	bl	800810c <HAL_TIM_PWM_Init>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d001      	beq.n	800179e <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 800179a:	f001 fbed 	bl	8002f78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800179e:	2300      	movs	r3, #0
 80017a0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017a2:	2300      	movs	r3, #0
 80017a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017a6:	f107 0320 	add.w	r3, r7, #32
 80017aa:	4619      	mov	r1, r3
 80017ac:	4810      	ldr	r0, [pc, #64]	; (80017f0 <MX_TIM3_Init+0xa8>)
 80017ae:	f007 fd97 	bl	80092e0 <HAL_TIMEx_MasterConfigSynchronization>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_TIM3_Init+0x74>
  {
    Error_Handler();
 80017b8:	f001 fbde 	bl	8002f78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017bc:	2360      	movs	r3, #96	; 0x60
 80017be:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017c0:	2300      	movs	r3, #0
 80017c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017c4:	2300      	movs	r3, #0
 80017c6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017cc:	1d3b      	adds	r3, r7, #4
 80017ce:	2204      	movs	r2, #4
 80017d0:	4619      	mov	r1, r3
 80017d2:	4807      	ldr	r0, [pc, #28]	; (80017f0 <MX_TIM3_Init+0xa8>)
 80017d4:	f007 f93c 	bl	8008a50 <HAL_TIM_PWM_ConfigChannel>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80017de:	f001 fbcb 	bl	8002f78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80017e2:	4803      	ldr	r0, [pc, #12]	; (80017f0 <MX_TIM3_Init+0xa8>)
 80017e4:	f001 ff8a 	bl	80036fc <HAL_TIM_MspPostInit>

}
 80017e8:	bf00      	nop
 80017ea:	3728      	adds	r7, #40	; 0x28
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	2000075c 	.word	0x2000075c
 80017f4:	40000400 	.word	0x40000400

080017f8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08a      	sub	sp, #40	; 0x28
 80017fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017fe:	f107 0320 	add.w	r3, r7, #32
 8001802:	2200      	movs	r2, #0
 8001804:	601a      	str	r2, [r3, #0]
 8001806:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001808:	1d3b      	adds	r3, r7, #4
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	605a      	str	r2, [r3, #4]
 8001810:	609a      	str	r2, [r3, #8]
 8001812:	60da      	str	r2, [r3, #12]
 8001814:	611a      	str	r2, [r3, #16]
 8001816:	615a      	str	r2, [r3, #20]
 8001818:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800181a:	4b32      	ldr	r3, [pc, #200]	; (80018e4 <MX_TIM4_Init+0xec>)
 800181c:	4a32      	ldr	r2, [pc, #200]	; (80018e8 <MX_TIM4_Init+0xf0>)
 800181e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84;
 8001820:	4b30      	ldr	r3, [pc, #192]	; (80018e4 <MX_TIM4_Init+0xec>)
 8001822:	2254      	movs	r2, #84	; 0x54
 8001824:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001826:	4b2f      	ldr	r3, [pc, #188]	; (80018e4 <MX_TIM4_Init+0xec>)
 8001828:	2200      	movs	r2, #0
 800182a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000;
 800182c:	4b2d      	ldr	r3, [pc, #180]	; (80018e4 <MX_TIM4_Init+0xec>)
 800182e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001832:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001834:	4b2b      	ldr	r3, [pc, #172]	; (80018e4 <MX_TIM4_Init+0xec>)
 8001836:	2200      	movs	r2, #0
 8001838:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800183a:	4b2a      	ldr	r3, [pc, #168]	; (80018e4 <MX_TIM4_Init+0xec>)
 800183c:	2200      	movs	r2, #0
 800183e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001840:	4828      	ldr	r0, [pc, #160]	; (80018e4 <MX_TIM4_Init+0xec>)
 8001842:	f006 fc63 	bl	800810c <HAL_TIM_PWM_Init>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_TIM4_Init+0x58>
  {
    Error_Handler();
 800184c:	f001 fb94 	bl	8002f78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001850:	2300      	movs	r3, #0
 8001852:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001854:	2300      	movs	r3, #0
 8001856:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001858:	f107 0320 	add.w	r3, r7, #32
 800185c:	4619      	mov	r1, r3
 800185e:	4821      	ldr	r0, [pc, #132]	; (80018e4 <MX_TIM4_Init+0xec>)
 8001860:	f007 fd3e 	bl	80092e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001864:	4603      	mov	r3, r0
 8001866:	2b00      	cmp	r3, #0
 8001868:	d001      	beq.n	800186e <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 800186a:	f001 fb85 	bl	8002f78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800186e:	2360      	movs	r3, #96	; 0x60
 8001870:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001872:	2300      	movs	r3, #0
 8001874:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001876:	2300      	movs	r3, #0
 8001878:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800187a:	2300      	movs	r3, #0
 800187c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800187e:	1d3b      	adds	r3, r7, #4
 8001880:	2200      	movs	r2, #0
 8001882:	4619      	mov	r1, r3
 8001884:	4817      	ldr	r0, [pc, #92]	; (80018e4 <MX_TIM4_Init+0xec>)
 8001886:	f007 f8e3 	bl	8008a50 <HAL_TIM_PWM_ConfigChannel>
 800188a:	4603      	mov	r3, r0
 800188c:	2b00      	cmp	r3, #0
 800188e:	d001      	beq.n	8001894 <MX_TIM4_Init+0x9c>
  {
    Error_Handler();
 8001890:	f001 fb72 	bl	8002f78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001894:	1d3b      	adds	r3, r7, #4
 8001896:	2204      	movs	r2, #4
 8001898:	4619      	mov	r1, r3
 800189a:	4812      	ldr	r0, [pc, #72]	; (80018e4 <MX_TIM4_Init+0xec>)
 800189c:	f007 f8d8 	bl	8008a50 <HAL_TIM_PWM_ConfigChannel>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80018a6:	f001 fb67 	bl	8002f78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80018aa:	1d3b      	adds	r3, r7, #4
 80018ac:	2208      	movs	r2, #8
 80018ae:	4619      	mov	r1, r3
 80018b0:	480c      	ldr	r0, [pc, #48]	; (80018e4 <MX_TIM4_Init+0xec>)
 80018b2:	f007 f8cd 	bl	8008a50 <HAL_TIM_PWM_ConfigChannel>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_TIM4_Init+0xc8>
  {
    Error_Handler();
 80018bc:	f001 fb5c 	bl	8002f78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80018c0:	1d3b      	adds	r3, r7, #4
 80018c2:	220c      	movs	r2, #12
 80018c4:	4619      	mov	r1, r3
 80018c6:	4807      	ldr	r0, [pc, #28]	; (80018e4 <MX_TIM4_Init+0xec>)
 80018c8:	f007 f8c2 	bl	8008a50 <HAL_TIM_PWM_ConfigChannel>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d001      	beq.n	80018d6 <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 80018d2:	f001 fb51 	bl	8002f78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80018d6:	4803      	ldr	r0, [pc, #12]	; (80018e4 <MX_TIM4_Init+0xec>)
 80018d8:	f001 ff10 	bl	80036fc <HAL_TIM_MspPostInit>

}
 80018dc:	bf00      	nop
 80018de:	3728      	adds	r7, #40	; 0x28
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	200007a4 	.word	0x200007a4
 80018e8:	40000800 	.word	0x40000800

080018ec <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08a      	sub	sp, #40	; 0x28
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018f2:	f107 0320 	add.w	r3, r7, #32
 80018f6:	2200      	movs	r2, #0
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018fc:	1d3b      	adds	r3, r7, #4
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	605a      	str	r2, [r3, #4]
 8001904:	609a      	str	r2, [r3, #8]
 8001906:	60da      	str	r2, [r3, #12]
 8001908:	611a      	str	r2, [r3, #16]
 800190a:	615a      	str	r2, [r3, #20]
 800190c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800190e:	4b32      	ldr	r3, [pc, #200]	; (80019d8 <MX_TIM5_Init+0xec>)
 8001910:	4a32      	ldr	r2, [pc, #200]	; (80019dc <MX_TIM5_Init+0xf0>)
 8001912:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84;
 8001914:	4b30      	ldr	r3, [pc, #192]	; (80019d8 <MX_TIM5_Init+0xec>)
 8001916:	2254      	movs	r2, #84	; 0x54
 8001918:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800191a:	4b2f      	ldr	r3, [pc, #188]	; (80019d8 <MX_TIM5_Init+0xec>)
 800191c:	2200      	movs	r2, #0
 800191e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 20000;
 8001920:	4b2d      	ldr	r3, [pc, #180]	; (80019d8 <MX_TIM5_Init+0xec>)
 8001922:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001926:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001928:	4b2b      	ldr	r3, [pc, #172]	; (80019d8 <MX_TIM5_Init+0xec>)
 800192a:	2200      	movs	r2, #0
 800192c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800192e:	4b2a      	ldr	r3, [pc, #168]	; (80019d8 <MX_TIM5_Init+0xec>)
 8001930:	2200      	movs	r2, #0
 8001932:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001934:	4828      	ldr	r0, [pc, #160]	; (80019d8 <MX_TIM5_Init+0xec>)
 8001936:	f006 fbe9 	bl	800810c <HAL_TIM_PWM_Init>
 800193a:	4603      	mov	r3, r0
 800193c:	2b00      	cmp	r3, #0
 800193e:	d001      	beq.n	8001944 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8001940:	f001 fb1a 	bl	8002f78 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001944:	2300      	movs	r3, #0
 8001946:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001948:	2300      	movs	r3, #0
 800194a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800194c:	f107 0320 	add.w	r3, r7, #32
 8001950:	4619      	mov	r1, r3
 8001952:	4821      	ldr	r0, [pc, #132]	; (80019d8 <MX_TIM5_Init+0xec>)
 8001954:	f007 fcc4 	bl	80092e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 800195e:	f001 fb0b 	bl	8002f78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001962:	2360      	movs	r3, #96	; 0x60
 8001964:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001966:	2300      	movs	r3, #0
 8001968:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800196a:	2300      	movs	r3, #0
 800196c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800196e:	2300      	movs	r3, #0
 8001970:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001972:	1d3b      	adds	r3, r7, #4
 8001974:	2200      	movs	r2, #0
 8001976:	4619      	mov	r1, r3
 8001978:	4817      	ldr	r0, [pc, #92]	; (80019d8 <MX_TIM5_Init+0xec>)
 800197a:	f007 f869 	bl	8008a50 <HAL_TIM_PWM_ConfigChannel>
 800197e:	4603      	mov	r3, r0
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001984:	f001 faf8 	bl	8002f78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001988:	1d3b      	adds	r3, r7, #4
 800198a:	2204      	movs	r2, #4
 800198c:	4619      	mov	r1, r3
 800198e:	4812      	ldr	r0, [pc, #72]	; (80019d8 <MX_TIM5_Init+0xec>)
 8001990:	f007 f85e 	bl	8008a50 <HAL_TIM_PWM_ConfigChannel>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 800199a:	f001 faed 	bl	8002f78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800199e:	1d3b      	adds	r3, r7, #4
 80019a0:	2208      	movs	r2, #8
 80019a2:	4619      	mov	r1, r3
 80019a4:	480c      	ldr	r0, [pc, #48]	; (80019d8 <MX_TIM5_Init+0xec>)
 80019a6:	f007 f853 	bl	8008a50 <HAL_TIM_PWM_ConfigChannel>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d001      	beq.n	80019b4 <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 80019b0:	f001 fae2 	bl	8002f78 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019b4:	1d3b      	adds	r3, r7, #4
 80019b6:	220c      	movs	r2, #12
 80019b8:	4619      	mov	r1, r3
 80019ba:	4807      	ldr	r0, [pc, #28]	; (80019d8 <MX_TIM5_Init+0xec>)
 80019bc:	f007 f848 	bl	8008a50 <HAL_TIM_PWM_ConfigChannel>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_TIM5_Init+0xde>
  {
    Error_Handler();
 80019c6:	f001 fad7 	bl	8002f78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80019ca:	4803      	ldr	r0, [pc, #12]	; (80019d8 <MX_TIM5_Init+0xec>)
 80019cc:	f001 fe96 	bl	80036fc <HAL_TIM_MspPostInit>

}
 80019d0:	bf00      	nop
 80019d2:	3728      	adds	r7, #40	; 0x28
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	200007ec 	.word	0x200007ec
 80019dc:	40000c00 	.word	0x40000c00

080019e0 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b088      	sub	sp, #32
 80019e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80019e6:	1d3b      	adds	r3, r7, #4
 80019e8:	2200      	movs	r2, #0
 80019ea:	601a      	str	r2, [r3, #0]
 80019ec:	605a      	str	r2, [r3, #4]
 80019ee:	609a      	str	r2, [r3, #8]
 80019f0:	60da      	str	r2, [r3, #12]
 80019f2:	611a      	str	r2, [r3, #16]
 80019f4:	615a      	str	r2, [r3, #20]
 80019f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80019f8:	4b1a      	ldr	r3, [pc, #104]	; (8001a64 <MX_TIM9_Init+0x84>)
 80019fa:	4a1b      	ldr	r2, [pc, #108]	; (8001a68 <MX_TIM9_Init+0x88>)
 80019fc:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 84;
 80019fe:	4b19      	ldr	r3, [pc, #100]	; (8001a64 <MX_TIM9_Init+0x84>)
 8001a00:	2254      	movs	r2, #84	; 0x54
 8001a02:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a04:	4b17      	ldr	r3, [pc, #92]	; (8001a64 <MX_TIM9_Init+0x84>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 20000;
 8001a0a:	4b16      	ldr	r3, [pc, #88]	; (8001a64 <MX_TIM9_Init+0x84>)
 8001a0c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001a10:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a12:	4b14      	ldr	r3, [pc, #80]	; (8001a64 <MX_TIM9_Init+0x84>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a18:	4b12      	ldr	r3, [pc, #72]	; (8001a64 <MX_TIM9_Init+0x84>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001a1e:	4811      	ldr	r0, [pc, #68]	; (8001a64 <MX_TIM9_Init+0x84>)
 8001a20:	f006 fb74 	bl	800810c <HAL_TIM_PWM_Init>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8001a2a:	f001 faa5 	bl	8002f78 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a2e:	2360      	movs	r3, #96	; 0x60
 8001a30:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a32:	2300      	movs	r3, #0
 8001a34:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a36:	2300      	movs	r3, #0
 8001a38:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a3e:	1d3b      	adds	r3, r7, #4
 8001a40:	2200      	movs	r2, #0
 8001a42:	4619      	mov	r1, r3
 8001a44:	4807      	ldr	r0, [pc, #28]	; (8001a64 <MX_TIM9_Init+0x84>)
 8001a46:	f007 f803 	bl	8008a50 <HAL_TIM_PWM_ConfigChannel>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8001a50:	f001 fa92 	bl	8002f78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001a54:	4803      	ldr	r0, [pc, #12]	; (8001a64 <MX_TIM9_Init+0x84>)
 8001a56:	f001 fe51 	bl	80036fc <HAL_TIM_MspPostInit>

}
 8001a5a:	bf00      	nop
 8001a5c:	3720      	adds	r7, #32
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
 8001a62:	bf00      	nop
 8001a64:	20000834 	.word	0x20000834
 8001a68:	40014000 	.word	0x40014000

08001a6c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a70:	4b13      	ldr	r3, [pc, #76]	; (8001ac0 <MX_USART2_UART_Init+0x54>)
 8001a72:	4a14      	ldr	r2, [pc, #80]	; (8001ac4 <MX_USART2_UART_Init+0x58>)
 8001a74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a76:	4b12      	ldr	r3, [pc, #72]	; (8001ac0 <MX_USART2_UART_Init+0x54>)
 8001a78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a7e:	4b10      	ldr	r3, [pc, #64]	; (8001ac0 <MX_USART2_UART_Init+0x54>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a84:	4b0e      	ldr	r3, [pc, #56]	; (8001ac0 <MX_USART2_UART_Init+0x54>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a8a:	4b0d      	ldr	r3, [pc, #52]	; (8001ac0 <MX_USART2_UART_Init+0x54>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a90:	4b0b      	ldr	r3, [pc, #44]	; (8001ac0 <MX_USART2_UART_Init+0x54>)
 8001a92:	220c      	movs	r2, #12
 8001a94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a96:	4b0a      	ldr	r3, [pc, #40]	; (8001ac0 <MX_USART2_UART_Init+0x54>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a9c:	4b08      	ldr	r3, [pc, #32]	; (8001ac0 <MX_USART2_UART_Init+0x54>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001aa2:	4807      	ldr	r0, [pc, #28]	; (8001ac0 <MX_USART2_UART_Init+0x54>)
 8001aa4:	f007 fcac 	bl	8009400 <HAL_UART_Init>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d001      	beq.n	8001ab2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001aae:	f001 fa63 	bl	8002f78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  HAL_UART_Receive_IT(&huart2, atmega_buffer, 1);
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	4904      	ldr	r1, [pc, #16]	; (8001ac8 <MX_USART2_UART_Init+0x5c>)
 8001ab6:	4802      	ldr	r0, [pc, #8]	; (8001ac0 <MX_USART2_UART_Init+0x54>)
 8001ab8:	f007 fcf2 	bl	80094a0 <HAL_UART_Receive_IT>
  /* USER CODE END USART2_Init 2 */

}
 8001abc:	bf00      	nop
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	200008dc 	.word	0x200008dc
 8001ac4:	40004400 	.word	0x40004400
 8001ac8:	20000a10 	.word	0x20000a10

08001acc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b082      	sub	sp, #8
 8001ad0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	607b      	str	r3, [r7, #4]
 8001ad6:	4b17      	ldr	r3, [pc, #92]	; (8001b34 <MX_DMA_Init+0x68>)
 8001ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ada:	4a16      	ldr	r2, [pc, #88]	; (8001b34 <MX_DMA_Init+0x68>)
 8001adc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ae2:	4b14      	ldr	r3, [pc, #80]	; (8001b34 <MX_DMA_Init+0x68>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aea:	607b      	str	r3, [r7, #4]
 8001aec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	603b      	str	r3, [r7, #0]
 8001af2:	4b10      	ldr	r3, [pc, #64]	; (8001b34 <MX_DMA_Init+0x68>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	4a0f      	ldr	r2, [pc, #60]	; (8001b34 <MX_DMA_Init+0x68>)
 8001af8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001afc:	6313      	str	r3, [r2, #48]	; 0x30
 8001afe:	4b0d      	ldr	r3, [pc, #52]	; (8001b34 <MX_DMA_Init+0x68>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b06:	603b      	str	r3, [r7, #0]
 8001b08:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	2105      	movs	r1, #5
 8001b0e:	2010      	movs	r0, #16
 8001b10:	f002 fd24 	bl	800455c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001b14:	2010      	movs	r0, #16
 8001b16:	f002 fd3d 	bl	8004594 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	2105      	movs	r1, #5
 8001b1e:	2038      	movs	r0, #56	; 0x38
 8001b20:	f002 fd1c 	bl	800455c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001b24:	2038      	movs	r0, #56	; 0x38
 8001b26:	f002 fd35 	bl	8004594 <HAL_NVIC_EnableIRQ>

}
 8001b2a:	bf00      	nop
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40023800 	.word	0x40023800

08001b38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b08c      	sub	sp, #48	; 0x30
 8001b3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b3e:	f107 031c 	add.w	r3, r7, #28
 8001b42:	2200      	movs	r2, #0
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	605a      	str	r2, [r3, #4]
 8001b48:	609a      	str	r2, [r3, #8]
 8001b4a:	60da      	str	r2, [r3, #12]
 8001b4c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001b4e:	2300      	movs	r3, #0
 8001b50:	61bb      	str	r3, [r7, #24]
 8001b52:	4b44      	ldr	r3, [pc, #272]	; (8001c64 <MX_GPIO_Init+0x12c>)
 8001b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b56:	4a43      	ldr	r2, [pc, #268]	; (8001c64 <MX_GPIO_Init+0x12c>)
 8001b58:	f043 0310 	orr.w	r3, r3, #16
 8001b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b5e:	4b41      	ldr	r3, [pc, #260]	; (8001c64 <MX_GPIO_Init+0x12c>)
 8001b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b62:	f003 0310 	and.w	r3, r3, #16
 8001b66:	61bb      	str	r3, [r7, #24]
 8001b68:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	617b      	str	r3, [r7, #20]
 8001b6e:	4b3d      	ldr	r3, [pc, #244]	; (8001c64 <MX_GPIO_Init+0x12c>)
 8001b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b72:	4a3c      	ldr	r2, [pc, #240]	; (8001c64 <MX_GPIO_Init+0x12c>)
 8001b74:	f043 0304 	orr.w	r3, r3, #4
 8001b78:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7a:	4b3a      	ldr	r3, [pc, #232]	; (8001c64 <MX_GPIO_Init+0x12c>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	f003 0304 	and.w	r3, r3, #4
 8001b82:	617b      	str	r3, [r7, #20]
 8001b84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	613b      	str	r3, [r7, #16]
 8001b8a:	4b36      	ldr	r3, [pc, #216]	; (8001c64 <MX_GPIO_Init+0x12c>)
 8001b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8e:	4a35      	ldr	r2, [pc, #212]	; (8001c64 <MX_GPIO_Init+0x12c>)
 8001b90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b94:	6313      	str	r3, [r2, #48]	; 0x30
 8001b96:	4b33      	ldr	r3, [pc, #204]	; (8001c64 <MX_GPIO_Init+0x12c>)
 8001b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b9e:	613b      	str	r3, [r7, #16]
 8001ba0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	4b2f      	ldr	r3, [pc, #188]	; (8001c64 <MX_GPIO_Init+0x12c>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	4a2e      	ldr	r2, [pc, #184]	; (8001c64 <MX_GPIO_Init+0x12c>)
 8001bac:	f043 0301 	orr.w	r3, r3, #1
 8001bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb2:	4b2c      	ldr	r3, [pc, #176]	; (8001c64 <MX_GPIO_Init+0x12c>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	f003 0301 	and.w	r3, r3, #1
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60bb      	str	r3, [r7, #8]
 8001bc2:	4b28      	ldr	r3, [pc, #160]	; (8001c64 <MX_GPIO_Init+0x12c>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	4a27      	ldr	r2, [pc, #156]	; (8001c64 <MX_GPIO_Init+0x12c>)
 8001bc8:	f043 0308 	orr.w	r3, r3, #8
 8001bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bce:	4b25      	ldr	r3, [pc, #148]	; (8001c64 <MX_GPIO_Init+0x12c>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	f003 0308 	and.w	r3, r3, #8
 8001bd6:	60bb      	str	r3, [r7, #8]
 8001bd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bda:	2300      	movs	r3, #0
 8001bdc:	607b      	str	r3, [r7, #4]
 8001bde:	4b21      	ldr	r3, [pc, #132]	; (8001c64 <MX_GPIO_Init+0x12c>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	4a20      	ldr	r2, [pc, #128]	; (8001c64 <MX_GPIO_Init+0x12c>)
 8001be4:	f043 0302 	orr.w	r3, r3, #2
 8001be8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bea:	4b1e      	ldr	r3, [pc, #120]	; (8001c64 <MX_GPIO_Init+0x12c>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	f003 0302 	and.w	r3, r3, #2
 8001bf2:	607b      	str	r3, [r7, #4]
 8001bf4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	2104      	movs	r1, #4
 8001bfa:	481b      	ldr	r0, [pc, #108]	; (8001c68 <MX_GPIO_Init+0x130>)
 8001bfc:	f003 fa8e 	bl	800511c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001c00:	2200      	movs	r2, #0
 8001c02:	2140      	movs	r1, #64	; 0x40
 8001c04:	4819      	ldr	r0, [pc, #100]	; (8001c6c <MX_GPIO_Init+0x134>)
 8001c06:	f003 fa89 	bl	800511c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c0a:	2304      	movs	r3, #4
 8001c0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c12:	2301      	movs	r3, #1
 8001c14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c16:	2300      	movs	r3, #0
 8001c18:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c1a:	f107 031c 	add.w	r3, r7, #28
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4811      	ldr	r0, [pc, #68]	; (8001c68 <MX_GPIO_Init+0x130>)
 8001c22:	f003 f8c7 	bl	8004db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c26:	2340      	movs	r3, #64	; 0x40
 8001c28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c32:	2300      	movs	r3, #0
 8001c34:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c36:	f107 031c 	add.w	r3, r7, #28
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	480b      	ldr	r0, [pc, #44]	; (8001c6c <MX_GPIO_Init+0x134>)
 8001c3e:	f003 f8b9 	bl	8004db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c42:	2320      	movs	r3, #32
 8001c44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c46:	2300      	movs	r3, #0
 8001c48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c4e:	f107 031c 	add.w	r3, r7, #28
 8001c52:	4619      	mov	r1, r3
 8001c54:	4804      	ldr	r0, [pc, #16]	; (8001c68 <MX_GPIO_Init+0x130>)
 8001c56:	f003 f8ad 	bl	8004db4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001c5a:	bf00      	nop
 8001c5c:	3730      	adds	r7, #48	; 0x30
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40023800 	.word	0x40023800
 8001c68:	40020800 	.word	0x40020800
 8001c6c:	40020000 	.word	0x40020000

08001c70 <StartCdcSerialTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartCdcSerialTask */
void StartCdcSerialTask(void const * argument)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b088      	sub	sp, #32
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8001c78:	f00d f890 	bl	800ed9c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  //Receive
		int i = 0;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	61fb      	str	r3, [r7, #28]
		vel_linear[0] = bit16ToInt(i, serialBuffer); //linear x
 8001c80:	4984      	ldr	r1, [pc, #528]	; (8001e94 <StartCdcSerialTask+0x224>)
 8001c82:	69f8      	ldr	r0, [r7, #28]
 8001c84:	f7ff f8f0 	bl	8000e68 <bit16ToInt>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	4a83      	ldr	r2, [pc, #524]	; (8001e98 <StartCdcSerialTask+0x228>)
 8001c8c:	6013      	str	r3, [r2, #0]
		vel_linear[1] = bit16ToInt(i + 2, serialBuffer); //linear y
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	3302      	adds	r3, #2
 8001c92:	4980      	ldr	r1, [pc, #512]	; (8001e94 <StartCdcSerialTask+0x224>)
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7ff f8e7 	bl	8000e68 <bit16ToInt>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	4a7e      	ldr	r2, [pc, #504]	; (8001e98 <StartCdcSerialTask+0x228>)
 8001c9e:	6053      	str	r3, [r2, #4]
		vel_linear[2] = bit16ToInt(i + 4, serialBuffer); //linear z
 8001ca0:	69fb      	ldr	r3, [r7, #28]
 8001ca2:	3304      	adds	r3, #4
 8001ca4:	497b      	ldr	r1, [pc, #492]	; (8001e94 <StartCdcSerialTask+0x224>)
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff f8de 	bl	8000e68 <bit16ToInt>
 8001cac:	4603      	mov	r3, r0
 8001cae:	4a7a      	ldr	r2, [pc, #488]	; (8001e98 <StartCdcSerialTask+0x228>)
 8001cb0:	6093      	str	r3, [r2, #8]
		vel_angular[0] = bit16ToInt(i + 6, serialBuffer); //angular z
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	3306      	adds	r3, #6
 8001cb6:	4977      	ldr	r1, [pc, #476]	; (8001e94 <StartCdcSerialTask+0x224>)
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f7ff f8d5 	bl	8000e68 <bit16ToInt>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	4a76      	ldr	r2, [pc, #472]	; (8001e9c <StartCdcSerialTask+0x22c>)
 8001cc2:	6013      	str	r3, [r2, #0]
		vel_angular[1] = bit16ToInt(i + 8, serialBuffer); //angular y
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	3308      	adds	r3, #8
 8001cc8:	4972      	ldr	r1, [pc, #456]	; (8001e94 <StartCdcSerialTask+0x224>)
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff f8cc 	bl	8000e68 <bit16ToInt>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	4a72      	ldr	r2, [pc, #456]	; (8001e9c <StartCdcSerialTask+0x22c>)
 8001cd4:	6053      	str	r3, [r2, #4]
		vel_angular[2] = bit16ToInt(i + 10, serialBuffer); //angular z
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	330a      	adds	r3, #10
 8001cda:	496e      	ldr	r1, [pc, #440]	; (8001e94 <StartCdcSerialTask+0x224>)
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff f8c3 	bl	8000e68 <bit16ToInt>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	4a6d      	ldr	r2, [pc, #436]	; (8001e9c <StartCdcSerialTask+0x22c>)
 8001ce6:	6093      	str	r3, [r2, #8]

		i = 12;
 8001ce8:	230c      	movs	r3, #12
 8001cea:	61fb      	str	r3, [r7, #28]
		throtle_scale = bit16ToInt(i, serialBuffer);
 8001cec:	4969      	ldr	r1, [pc, #420]	; (8001e94 <StartCdcSerialTask+0x224>)
 8001cee:	69f8      	ldr	r0, [r7, #28]
 8001cf0:	f7ff f8ba 	bl	8000e68 <bit16ToInt>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	4a6a      	ldr	r2, [pc, #424]	; (8001ea0 <StartCdcSerialTask+0x230>)
 8001cf8:	6013      	str	r3, [r2, #0]

		i = 14;
 8001cfa:	230e      	movs	r3, #14
 8001cfc:	61fb      	str	r3, [r7, #28]
		set_point[0] = bit16ToInt(i, serialBuffer);
 8001cfe:	4965      	ldr	r1, [pc, #404]	; (8001e94 <StartCdcSerialTask+0x224>)
 8001d00:	69f8      	ldr	r0, [r7, #28]
 8001d02:	f7ff f8b1 	bl	8000e68 <bit16ToInt>
 8001d06:	4603      	mov	r3, r0
 8001d08:	4a66      	ldr	r2, [pc, #408]	; (8001ea4 <StartCdcSerialTask+0x234>)
 8001d0a:	6013      	str	r3, [r2, #0]
		set_point[1] = bit16ToInt(i + 2, serialBuffer);
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	3302      	adds	r3, #2
 8001d10:	4960      	ldr	r1, [pc, #384]	; (8001e94 <StartCdcSerialTask+0x224>)
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff f8a8 	bl	8000e68 <bit16ToInt>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	4a62      	ldr	r2, [pc, #392]	; (8001ea4 <StartCdcSerialTask+0x234>)
 8001d1c:	6053      	str	r3, [r2, #4]
		set_point[2] = bit16ToInt(i + 4, serialBuffer);
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	3304      	adds	r3, #4
 8001d22:	495c      	ldr	r1, [pc, #368]	; (8001e94 <StartCdcSerialTask+0x224>)
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7ff f89f 	bl	8000e68 <bit16ToInt>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	4a5d      	ldr	r2, [pc, #372]	; (8001ea4 <StartCdcSerialTask+0x234>)
 8001d2e:	6093      	str	r3, [r2, #8]
		set_point[3] = bit16ToInt(i + 6, serialBuffer);
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	3306      	adds	r3, #6
 8001d34:	4957      	ldr	r1, [pc, #348]	; (8001e94 <StartCdcSerialTask+0x224>)
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff f896 	bl	8000e68 <bit16ToInt>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	4a59      	ldr	r2, [pc, #356]	; (8001ea4 <StartCdcSerialTask+0x234>)
 8001d40:	60d3      	str	r3, [r2, #12]

		i = 22;
 8001d42:	2316      	movs	r3, #22
 8001d44:	61fb      	str	r3, [r7, #28]
		c_yaw[0] = bit16ToInt(i, serialBuffer);
 8001d46:	4953      	ldr	r1, [pc, #332]	; (8001e94 <StartCdcSerialTask+0x224>)
 8001d48:	69f8      	ldr	r0, [r7, #28]
 8001d4a:	f7ff f88d 	bl	8000e68 <bit16ToInt>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	4a55      	ldr	r2, [pc, #340]	; (8001ea8 <StartCdcSerialTask+0x238>)
 8001d52:	6013      	str	r3, [r2, #0]
		c_yaw[1] = bit16ToInt(i + 2, serialBuffer);
 8001d54:	69fb      	ldr	r3, [r7, #28]
 8001d56:	3302      	adds	r3, #2
 8001d58:	494e      	ldr	r1, [pc, #312]	; (8001e94 <StartCdcSerialTask+0x224>)
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff f884 	bl	8000e68 <bit16ToInt>
 8001d60:	4603      	mov	r3, r0
 8001d62:	4a51      	ldr	r2, [pc, #324]	; (8001ea8 <StartCdcSerialTask+0x238>)
 8001d64:	6053      	str	r3, [r2, #4]
		c_yaw[2] = bit16ToInt(i + 4, serialBuffer);
 8001d66:	69fb      	ldr	r3, [r7, #28]
 8001d68:	3304      	adds	r3, #4
 8001d6a:	494a      	ldr	r1, [pc, #296]	; (8001e94 <StartCdcSerialTask+0x224>)
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7ff f87b 	bl	8000e68 <bit16ToInt>
 8001d72:	4603      	mov	r3, r0
 8001d74:	4a4c      	ldr	r2, [pc, #304]	; (8001ea8 <StartCdcSerialTask+0x238>)
 8001d76:	6093      	str	r3, [r2, #8]
		c_pitch[0] = bit16ToInt(i + 6, serialBuffer);
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	3306      	adds	r3, #6
 8001d7c:	4945      	ldr	r1, [pc, #276]	; (8001e94 <StartCdcSerialTask+0x224>)
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f7ff f872 	bl	8000e68 <bit16ToInt>
 8001d84:	4603      	mov	r3, r0
 8001d86:	4a49      	ldr	r2, [pc, #292]	; (8001eac <StartCdcSerialTask+0x23c>)
 8001d88:	6013      	str	r3, [r2, #0]
		c_pitch[1] = bit16ToInt(i + 8, serialBuffer);
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	3308      	adds	r3, #8
 8001d8e:	4941      	ldr	r1, [pc, #260]	; (8001e94 <StartCdcSerialTask+0x224>)
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff f869 	bl	8000e68 <bit16ToInt>
 8001d96:	4603      	mov	r3, r0
 8001d98:	4a44      	ldr	r2, [pc, #272]	; (8001eac <StartCdcSerialTask+0x23c>)
 8001d9a:	6053      	str	r3, [r2, #4]
		c_pitch[2] = bit16ToInt(i + 10, serialBuffer);
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	330a      	adds	r3, #10
 8001da0:	493c      	ldr	r1, [pc, #240]	; (8001e94 <StartCdcSerialTask+0x224>)
 8001da2:	4618      	mov	r0, r3
 8001da4:	f7ff f860 	bl	8000e68 <bit16ToInt>
 8001da8:	4603      	mov	r3, r0
 8001daa:	4a40      	ldr	r2, [pc, #256]	; (8001eac <StartCdcSerialTask+0x23c>)
 8001dac:	6093      	str	r3, [r2, #8]
		c_roll[0] = bit16ToInt(i + 12, serialBuffer);
 8001dae:	69fb      	ldr	r3, [r7, #28]
 8001db0:	330c      	adds	r3, #12
 8001db2:	4938      	ldr	r1, [pc, #224]	; (8001e94 <StartCdcSerialTask+0x224>)
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff f857 	bl	8000e68 <bit16ToInt>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	4a3c      	ldr	r2, [pc, #240]	; (8001eb0 <StartCdcSerialTask+0x240>)
 8001dbe:	6013      	str	r3, [r2, #0]
		c_roll[1] = bit16ToInt(i + 14, serialBuffer);
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	330e      	adds	r3, #14
 8001dc4:	4933      	ldr	r1, [pc, #204]	; (8001e94 <StartCdcSerialTask+0x224>)
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff f84e 	bl	8000e68 <bit16ToInt>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	4a38      	ldr	r2, [pc, #224]	; (8001eb0 <StartCdcSerialTask+0x240>)
 8001dd0:	6053      	str	r3, [r2, #4]
		c_roll[2] = bit16ToInt(i + 16, serialBuffer);
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	3310      	adds	r3, #16
 8001dd6:	492f      	ldr	r1, [pc, #188]	; (8001e94 <StartCdcSerialTask+0x224>)
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff f845 	bl	8000e68 <bit16ToInt>
 8001dde:	4603      	mov	r3, r0
 8001de0:	4a33      	ldr	r2, [pc, #204]	; (8001eb0 <StartCdcSerialTask+0x240>)
 8001de2:	6093      	str	r3, [r2, #8]
		c_depth[0] = bit16ToInt(i + 18, serialBuffer);
 8001de4:	69fb      	ldr	r3, [r7, #28]
 8001de6:	3312      	adds	r3, #18
 8001de8:	492a      	ldr	r1, [pc, #168]	; (8001e94 <StartCdcSerialTask+0x224>)
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7ff f83c 	bl	8000e68 <bit16ToInt>
 8001df0:	4603      	mov	r3, r0
 8001df2:	4a30      	ldr	r2, [pc, #192]	; (8001eb4 <StartCdcSerialTask+0x244>)
 8001df4:	6013      	str	r3, [r2, #0]
		c_depth[1] = bit16ToInt(i + 20, serialBuffer);
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	3314      	adds	r3, #20
 8001dfa:	4926      	ldr	r1, [pc, #152]	; (8001e94 <StartCdcSerialTask+0x224>)
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff f833 	bl	8000e68 <bit16ToInt>
 8001e02:	4603      	mov	r3, r0
 8001e04:	4a2b      	ldr	r2, [pc, #172]	; (8001eb4 <StartCdcSerialTask+0x244>)
 8001e06:	6053      	str	r3, [r2, #4]
		c_depth[2] = bit16ToInt(i + 22, serialBuffer);
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	3316      	adds	r3, #22
 8001e0c:	4921      	ldr	r1, [pc, #132]	; (8001e94 <StartCdcSerialTask+0x224>)
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f7ff f82a 	bl	8000e68 <bit16ToInt>
 8001e14:	4603      	mov	r3, r0
 8001e16:	4a27      	ldr	r2, [pc, #156]	; (8001eb4 <StartCdcSerialTask+0x244>)
 8001e18:	6093      	str	r3, [r2, #8]

		i = 46;
 8001e1a:	232e      	movs	r3, #46	; 0x2e
 8001e1c:	61fb      	str	r3, [r7, #28]
		lumen_power = bit16ToInt(i, serialBuffer);
 8001e1e:	491d      	ldr	r1, [pc, #116]	; (8001e94 <StartCdcSerialTask+0x224>)
 8001e20:	69f8      	ldr	r0, [r7, #28]
 8001e22:	f7ff f821 	bl	8000e68 <bit16ToInt>
 8001e26:	4603      	mov	r3, r0
 8001e28:	4a23      	ldr	r2, [pc, #140]	; (8001eb8 <StartCdcSerialTask+0x248>)
 8001e2a:	6013      	str	r3, [r2, #0]

		i = 48;
 8001e2c:	2330      	movs	r3, #48	; 0x30
 8001e2e:	61fb      	str	r3, [r7, #28]
		movement_mode = serialBuffer[i];
 8001e30:	4a18      	ldr	r2, [pc, #96]	; (8001e94 <StartCdcSerialTask+0x224>)
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	4413      	add	r3, r2
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4b20      	ldr	r3, [pc, #128]	; (8001ebc <StartCdcSerialTask+0x24c>)
 8001e3c:	601a      	str	r2, [r3, #0]
		operation_mode = serialBuffer[i + 1];
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	3301      	adds	r3, #1
 8001e42:	4a14      	ldr	r2, [pc, #80]	; (8001e94 <StartCdcSerialTask+0x224>)
 8001e44:	5cd3      	ldrb	r3, [r2, r3]
 8001e46:	461a      	mov	r2, r3
 8001e48:	4b1d      	ldr	r3, [pc, #116]	; (8001ec0 <StartCdcSerialTask+0x250>)
 8001e4a:	601a      	str	r2, [r3, #0]
		arm_hw = serialBuffer[i + 2];
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	3302      	adds	r3, #2
 8001e50:	4a10      	ldr	r2, [pc, #64]	; (8001e94 <StartCdcSerialTask+0x224>)
 8001e52:	5cd3      	ldrb	r3, [r2, r3]
 8001e54:	461a      	mov	r2, r3
 8001e56:	4b1b      	ldr	r3, [pc, #108]	; (8001ec4 <StartCdcSerialTask+0x254>)
 8001e58:	601a      	str	r2, [r3, #0]
		arm_sw = serialBuffer[i + 3];
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	3303      	adds	r3, #3
 8001e5e:	4a0d      	ldr	r2, [pc, #52]	; (8001e94 <StartCdcSerialTask+0x224>)
 8001e60:	5cd3      	ldrb	r3, [r2, r3]
 8001e62:	461a      	mov	r2, r3
 8001e64:	4b18      	ldr	r3, [pc, #96]	; (8001ec8 <StartCdcSerialTask+0x258>)
 8001e66:	601a      	str	r2, [r3, #0]
		imu_reset = serialBuffer[i + 4];
 8001e68:	69fb      	ldr	r3, [r7, #28]
 8001e6a:	3304      	adds	r3, #4
 8001e6c:	4a09      	ldr	r2, [pc, #36]	; (8001e94 <StartCdcSerialTask+0x224>)
 8001e6e:	5cd3      	ldrb	r3, [r2, r3]
 8001e70:	461a      	mov	r2, r3
 8001e72:	4b16      	ldr	r3, [pc, #88]	; (8001ecc <StartCdcSerialTask+0x25c>)
 8001e74:	601a      	str	r2, [r3, #0]

		if (HAL_GetTick() - lastReceiveTime > cdcTimeOut) {
 8001e76:	f001 fe77 	bl	8003b68 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	4b14      	ldr	r3, [pc, #80]	; (8001ed0 <StartCdcSerialTask+0x260>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	4a14      	ldr	r2, [pc, #80]	; (8001ed4 <StartCdcSerialTask+0x264>)
 8001e84:	6812      	ldr	r2, [r2, #0]
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d928      	bls.n	8001edc <StartCdcSerialTask+0x26c>
			cdcHeartBeat = 0;
 8001e8a:	4b13      	ldr	r3, [pc, #76]	; (8001ed8 <StartCdcSerialTask+0x268>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	601a      	str	r2, [r3, #0]
 8001e90:	e027      	b.n	8001ee2 <StartCdcSerialTask+0x272>
 8001e92:	bf00      	nop
 8001e94:	20000938 	.word	0x20000938
 8001e98:	20000978 	.word	0x20000978
 8001e9c:	20000984 	.word	0x20000984
 8001ea0:	20000990 	.word	0x20000990
 8001ea4:	20000994 	.word	0x20000994
 8001ea8:	200009bc 	.word	0x200009bc
 8001eac:	200009c8 	.word	0x200009c8
 8001eb0:	200009d4 	.word	0x200009d4
 8001eb4:	200009e0 	.word	0x200009e0
 8001eb8:	200009a4 	.word	0x200009a4
 8001ebc:	200009a8 	.word	0x200009a8
 8001ec0:	200009ac 	.word	0x200009ac
 8001ec4:	200009b0 	.word	0x200009b0
 8001ec8:	200009b4 	.word	0x200009b4
 8001ecc:	200009b8 	.word	0x200009b8
 8001ed0:	20000a0c 	.word	0x20000a0c
 8001ed4:	20000004 	.word	0x20000004
 8001ed8:	20000000 	.word	0x20000000
		} else {
			cdcHeartBeat = 1;
 8001edc:	4b5b      	ldr	r3, [pc, #364]	; (800204c <StartCdcSerialTask+0x3dc>)
 8001ede:	2201      	movs	r2, #1
 8001ee0:	601a      	str	r2, [r3, #0]
		}

		if (cdcHeartBeat == 0) {
 8001ee2:	4b5a      	ldr	r3, [pc, #360]	; (800204c <StartCdcSerialTask+0x3dc>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d123      	bne.n	8001f32 <StartCdcSerialTask+0x2c2>
			vel_linear[0] = 0; vel_linear[1] = 0; vel_linear[2] = 0;
 8001eea:	4b59      	ldr	r3, [pc, #356]	; (8002050 <StartCdcSerialTask+0x3e0>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
 8001ef0:	4b57      	ldr	r3, [pc, #348]	; (8002050 <StartCdcSerialTask+0x3e0>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	4b56      	ldr	r3, [pc, #344]	; (8002050 <StartCdcSerialTask+0x3e0>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	609a      	str	r2, [r3, #8]
			vel_angular[0] = 0; vel_angular[1] = 0; vel_angular[2] = 0;
 8001efc:	4b55      	ldr	r3, [pc, #340]	; (8002054 <StartCdcSerialTask+0x3e4>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]
 8001f02:	4b54      	ldr	r3, [pc, #336]	; (8002054 <StartCdcSerialTask+0x3e4>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	605a      	str	r2, [r3, #4]
 8001f08:	4b52      	ldr	r3, [pc, #328]	; (8002054 <StartCdcSerialTask+0x3e4>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	609a      	str	r2, [r3, #8]
			set_point[0] = 0; set_point[1] = 0; set_point[2] = 0; set_point[3] = 0;
 8001f0e:	4b52      	ldr	r3, [pc, #328]	; (8002058 <StartCdcSerialTask+0x3e8>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	4b50      	ldr	r3, [pc, #320]	; (8002058 <StartCdcSerialTask+0x3e8>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	605a      	str	r2, [r3, #4]
 8001f1a:	4b4f      	ldr	r3, [pc, #316]	; (8002058 <StartCdcSerialTask+0x3e8>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	609a      	str	r2, [r3, #8]
 8001f20:	4b4d      	ldr	r3, [pc, #308]	; (8002058 <StartCdcSerialTask+0x3e8>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	60da      	str	r2, [r3, #12]
			movement_mode = 0;
 8001f26:	4b4d      	ldr	r3, [pc, #308]	; (800205c <StartCdcSerialTask+0x3ec>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
			operation_mode = 0;
 8001f2c:	4b4c      	ldr	r3, [pc, #304]	; (8002060 <StartCdcSerialTask+0x3f0>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	601a      	str	r2, [r3, #0]
		}

	//Transmit
		Message_IMU[0] = bno055_yaw * 10;
 8001f32:	4b4c      	ldr	r3, [pc, #304]	; (8002064 <StartCdcSerialTask+0x3f4>)
 8001f34:	edd3 7a00 	vldr	s15, [r3]
 8001f38:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001f3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f40:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f44:	ee17 3a90 	vmov	r3, s15
 8001f48:	b21a      	sxth	r2, r3
 8001f4a:	4b47      	ldr	r3, [pc, #284]	; (8002068 <StartCdcSerialTask+0x3f8>)
 8001f4c:	801a      	strh	r2, [r3, #0]
		Message_IMU[1] = bno055_pitch * 10;
 8001f4e:	4b47      	ldr	r3, [pc, #284]	; (800206c <StartCdcSerialTask+0x3fc>)
 8001f50:	edd3 7a00 	vldr	s15, [r3]
 8001f54:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001f58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f5c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f60:	ee17 3a90 	vmov	r3, s15
 8001f64:	b21a      	sxth	r2, r3
 8001f66:	4b40      	ldr	r3, [pc, #256]	; (8002068 <StartCdcSerialTask+0x3f8>)
 8001f68:	805a      	strh	r2, [r3, #2]
		Message_IMU[2] = bno055_roll * 10;
 8001f6a:	4b41      	ldr	r3, [pc, #260]	; (8002070 <StartCdcSerialTask+0x400>)
 8001f6c:	edd3 7a00 	vldr	s15, [r3]
 8001f70:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001f74:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f78:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f7c:	ee17 3a90 	vmov	r3, s15
 8001f80:	b21a      	sxth	r2, r3
 8001f82:	4b39      	ldr	r3, [pc, #228]	; (8002068 <StartCdcSerialTask+0x3f8>)
 8001f84:	809a      	strh	r2, [r3, #4]

		Message_depth = depthValue * 100;
 8001f86:	4b3b      	ldr	r3, [pc, #236]	; (8002074 <StartCdcSerialTask+0x404>)
 8001f88:	edd3 7a00 	vldr	s15, [r3]
 8001f8c:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8002078 <StartCdcSerialTask+0x408>
 8001f90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f94:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f98:	ee17 3a90 	vmov	r3, s15
 8001f9c:	b21a      	sxth	r2, r3
 8001f9e:	4b37      	ldr	r3, [pc, #220]	; (800207c <StartCdcSerialTask+0x40c>)
 8001fa0:	801a      	strh	r2, [r3, #0]
		Message_inPressure = pressureInside * 100;
 8001fa2:	4b37      	ldr	r3, [pc, #220]	; (8002080 <StartCdcSerialTask+0x410>)
 8001fa4:	edd3 7a00 	vldr	s15, [r3]
 8001fa8:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8002078 <StartCdcSerialTask+0x408>
 8001fac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fb0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fb4:	ee17 3a90 	vmov	r3, s15
 8001fb8:	b21a      	sxth	r2, r3
 8001fba:	4b32      	ldr	r3, [pc, #200]	; (8002084 <StartCdcSerialTask+0x414>)
 8001fbc:	801a      	strh	r2, [r3, #0]

		Message_batt1 = batt1_volt * 100;
 8001fbe:	4b32      	ldr	r3, [pc, #200]	; (8002088 <StartCdcSerialTask+0x418>)
 8001fc0:	edd3 7a00 	vldr	s15, [r3]
 8001fc4:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8002078 <StartCdcSerialTask+0x408>
 8001fc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fcc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fd0:	ee17 3a90 	vmov	r3, s15
 8001fd4:	b21a      	sxth	r2, r3
 8001fd6:	4b2d      	ldr	r3, [pc, #180]	; (800208c <StartCdcSerialTask+0x41c>)
 8001fd8:	801a      	strh	r2, [r3, #0]
		Message_batt2 = batt2_volt * 100;
 8001fda:	4b2d      	ldr	r3, [pc, #180]	; (8002090 <StartCdcSerialTask+0x420>)
 8001fdc:	edd3 7a00 	vldr	s15, [r3]
 8001fe0:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8002078 <StartCdcSerialTask+0x408>
 8001fe4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fe8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fec:	ee17 3a90 	vmov	r3, s15
 8001ff0:	b21a      	sxth	r2, r3
 8001ff2:	4b28      	ldr	r3, [pc, #160]	; (8002094 <StartCdcSerialTask+0x424>)
 8001ff4:	801a      	strh	r2, [r3, #0]

//		Message_ranges = scan_ranges;
//		Message_confidence = confidence;

		int16_t Message_Values[] = { Message_IMU[0],Message_IMU[1], Message_IMU[2], Message_depth, Message_inPressure,
 8001ff6:	4b1c      	ldr	r3, [pc, #112]	; (8002068 <StartCdcSerialTask+0x3f8>)
 8001ff8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ffc:	81bb      	strh	r3, [r7, #12]
 8001ffe:	4b1a      	ldr	r3, [pc, #104]	; (8002068 <StartCdcSerialTask+0x3f8>)
 8002000:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002004:	81fb      	strh	r3, [r7, #14]
 8002006:	4b18      	ldr	r3, [pc, #96]	; (8002068 <StartCdcSerialTask+0x3f8>)
 8002008:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800200c:	823b      	strh	r3, [r7, #16]
 800200e:	4b1b      	ldr	r3, [pc, #108]	; (800207c <StartCdcSerialTask+0x40c>)
 8002010:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002014:	827b      	strh	r3, [r7, #18]
 8002016:	4b1b      	ldr	r3, [pc, #108]	; (8002084 <StartCdcSerialTask+0x414>)
 8002018:	f9b3 3000 	ldrsh.w	r3, [r3]
 800201c:	82bb      	strh	r3, [r7, #20]
 800201e:	4b1b      	ldr	r3, [pc, #108]	; (800208c <StartCdcSerialTask+0x41c>)
 8002020:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002024:	82fb      	strh	r3, [r7, #22]
 8002026:	4b1b      	ldr	r3, [pc, #108]	; (8002094 <StartCdcSerialTask+0x424>)
 8002028:	f9b3 3000 	ldrsh.w	r3, [r3]
 800202c:	833b      	strh	r3, [r7, #24]
				Message_batt1, Message_batt2 };


		merge16(Message_Values, transmitBuffer,
 800202e:	f107 030c 	add.w	r3, r7, #12
 8002032:	2207      	movs	r2, #7
 8002034:	4918      	ldr	r1, [pc, #96]	; (8002098 <StartCdcSerialTask+0x428>)
 8002036:	4618      	mov	r0, r3
 8002038:	f7fe ff36 	bl	8000ea8 <merge16>
				sizeof(Message_Values) / sizeof(Message_Values[0]));

		CDC_Transmit_FS(transmitBuffer, sizeof(transmitBuffer));
 800203c:	210e      	movs	r1, #14
 800203e:	4816      	ldr	r0, [pc, #88]	; (8002098 <StartCdcSerialTask+0x428>)
 8002040:	f00c ff80 	bl	800ef44 <CDC_Transmit_FS>

    osDelay(1);
 8002044:	2001      	movs	r0, #1
 8002046:	f00b fcc4 	bl	800d9d2 <osDelay>
  {
 800204a:	e617      	b.n	8001c7c <StartCdcSerialTask+0xc>
 800204c:	20000000 	.word	0x20000000
 8002050:	20000978 	.word	0x20000978
 8002054:	20000984 	.word	0x20000984
 8002058:	20000994 	.word	0x20000994
 800205c:	200009a8 	.word	0x200009a8
 8002060:	200009ac 	.word	0x200009ac
 8002064:	20000a2c 	.word	0x20000a2c
 8002068:	200009fc 	.word	0x200009fc
 800206c:	20000a30 	.word	0x20000a30
 8002070:	20000a34 	.word	0x20000a34
 8002074:	20000a70 	.word	0x20000a70
 8002078:	42c80000 	.word	0x42c80000
 800207c:	20000a04 	.word	0x20000a04
 8002080:	20000a6c 	.word	0x20000a6c
 8002084:	20000a02 	.word	0x20000a02
 8002088:	20000b44 	.word	0x20000b44
 800208c:	20000a06 	.word	0x20000a06
 8002090:	20000b48 	.word	0x20000b48
 8002094:	20000a08 	.word	0x20000a08
 8002098:	200009ec 	.word	0x200009ec

0800209c <StartMovementTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMovementTask */
void StartMovementTask(void const * argument)
{
 800209c:	b5b0      	push	{r4, r5, r7, lr}
 800209e:	ed2d 8b02 	vpush	{d8}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af02      	add	r7, sp, #8
 80020a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMovementTask */
  /* Infinite loop */
  for(;;)
  {
		//Movement Calculation
		if (movement_mode == 0) { // Fully Manual
 80020a8:	4b85      	ldr	r3, [pc, #532]	; (80022c0 <StartMovementTask+0x224>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d153      	bne.n	8002158 <StartMovementTask+0xbc>
			//Horizontal Thruster  Forwaed  |||   Lateral   |||    Yaw
			H_FR = +vel_linear[0] - vel_linear[1] + vel_angular[2];
 80020b0:	4b84      	ldr	r3, [pc, #528]	; (80022c4 <StartMovementTask+0x228>)
 80020b2:	681a      	ldr	r2, [r3, #0]
 80020b4:	4b83      	ldr	r3, [pc, #524]	; (80022c4 <StartMovementTask+0x228>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	1ad2      	subs	r2, r2, r3
 80020ba:	4b83      	ldr	r3, [pc, #524]	; (80022c8 <StartMovementTask+0x22c>)
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	4413      	add	r3, r2
 80020c0:	4a82      	ldr	r2, [pc, #520]	; (80022cc <StartMovementTask+0x230>)
 80020c2:	6013      	str	r3, [r2, #0]
			H_FL = -vel_linear[0] - vel_linear[1] - vel_angular[2];
 80020c4:	4b7f      	ldr	r3, [pc, #508]	; (80022c4 <StartMovementTask+0x228>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	425a      	negs	r2, r3
 80020ca:	4b7e      	ldr	r3, [pc, #504]	; (80022c4 <StartMovementTask+0x228>)
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	1ad2      	subs	r2, r2, r3
 80020d0:	4b7d      	ldr	r3, [pc, #500]	; (80022c8 <StartMovementTask+0x22c>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	4a7e      	ldr	r2, [pc, #504]	; (80022d0 <StartMovementTask+0x234>)
 80020d8:	6013      	str	r3, [r2, #0]
			H_BR = +vel_linear[0] + vel_linear[1] - vel_angular[2];
 80020da:	4b7a      	ldr	r3, [pc, #488]	; (80022c4 <StartMovementTask+0x228>)
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	4b79      	ldr	r3, [pc, #484]	; (80022c4 <StartMovementTask+0x228>)
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	441a      	add	r2, r3
 80020e4:	4b78      	ldr	r3, [pc, #480]	; (80022c8 <StartMovementTask+0x22c>)
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	4a7a      	ldr	r2, [pc, #488]	; (80022d4 <StartMovementTask+0x238>)
 80020ec:	6013      	str	r3, [r2, #0]
			H_BL = -vel_linear[0] + vel_linear[1] + vel_angular[2];
 80020ee:	4b75      	ldr	r3, [pc, #468]	; (80022c4 <StartMovementTask+0x228>)
 80020f0:	685a      	ldr	r2, [r3, #4]
 80020f2:	4b74      	ldr	r3, [pc, #464]	; (80022c4 <StartMovementTask+0x228>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	1ad2      	subs	r2, r2, r3
 80020f8:	4b73      	ldr	r3, [pc, #460]	; (80022c8 <StartMovementTask+0x22c>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	4413      	add	r3, r2
 80020fe:	4a76      	ldr	r2, [pc, #472]	; (80022d8 <StartMovementTask+0x23c>)
 8002100:	6013      	str	r3, [r2, #0]

			//Vertical Thruster    Up/Down  |||   Pitch     |||   Roll
			V_FR = -vel_linear[2] - vel_angular[0] + vel_angular[1];
 8002102:	4b70      	ldr	r3, [pc, #448]	; (80022c4 <StartMovementTask+0x228>)
 8002104:	689b      	ldr	r3, [r3, #8]
 8002106:	425a      	negs	r2, r3
 8002108:	4b6f      	ldr	r3, [pc, #444]	; (80022c8 <StartMovementTask+0x22c>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	1ad2      	subs	r2, r2, r3
 800210e:	4b6e      	ldr	r3, [pc, #440]	; (80022c8 <StartMovementTask+0x22c>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	4413      	add	r3, r2
 8002114:	4a71      	ldr	r2, [pc, #452]	; (80022dc <StartMovementTask+0x240>)
 8002116:	6013      	str	r3, [r2, #0]
			V_FL = -vel_linear[2] - vel_angular[0] - vel_angular[1];
 8002118:	4b6a      	ldr	r3, [pc, #424]	; (80022c4 <StartMovementTask+0x228>)
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	425a      	negs	r2, r3
 800211e:	4b6a      	ldr	r3, [pc, #424]	; (80022c8 <StartMovementTask+0x22c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	1ad2      	subs	r2, r2, r3
 8002124:	4b68      	ldr	r3, [pc, #416]	; (80022c8 <StartMovementTask+0x22c>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	1ad3      	subs	r3, r2, r3
 800212a:	4a6d      	ldr	r2, [pc, #436]	; (80022e0 <StartMovementTask+0x244>)
 800212c:	6013      	str	r3, [r2, #0]
			V_BR = -vel_linear[2] + vel_angular[0] + vel_angular[1];
 800212e:	4b66      	ldr	r3, [pc, #408]	; (80022c8 <StartMovementTask+0x22c>)
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	4b64      	ldr	r3, [pc, #400]	; (80022c4 <StartMovementTask+0x228>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	1ad2      	subs	r2, r2, r3
 8002138:	4b63      	ldr	r3, [pc, #396]	; (80022c8 <StartMovementTask+0x22c>)
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	4413      	add	r3, r2
 800213e:	4a69      	ldr	r2, [pc, #420]	; (80022e4 <StartMovementTask+0x248>)
 8002140:	6013      	str	r3, [r2, #0]
			V_BL = -vel_linear[2] + vel_angular[0] - vel_angular[1];
 8002142:	4b61      	ldr	r3, [pc, #388]	; (80022c8 <StartMovementTask+0x22c>)
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	4b5f      	ldr	r3, [pc, #380]	; (80022c4 <StartMovementTask+0x228>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	1ad2      	subs	r2, r2, r3
 800214c:	4b5e      	ldr	r3, [pc, #376]	; (80022c8 <StartMovementTask+0x22c>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	4a65      	ldr	r2, [pc, #404]	; (80022e8 <StartMovementTask+0x24c>)
 8002154:	6013      	str	r3, [r2, #0]
 8002156:	e21d      	b.n	8002594 <StartMovementTask+0x4f8>
		}

		else if (movement_mode == 1) { // Stabilize
 8002158:	4b59      	ldr	r3, [pc, #356]	; (80022c0 <StartMovementTask+0x224>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2b01      	cmp	r3, #1
 800215e:	f040 80cb 	bne.w	80022f8 <StartMovementTask+0x25c>
			//Horizontal Thruster  Forwaed  |||   Lateral   |||    Yaw
			H_FR = +vel_linear[0] - vel_linear[1] + yaw.output;
 8002162:	4b58      	ldr	r3, [pc, #352]	; (80022c4 <StartMovementTask+0x228>)
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	4b57      	ldr	r3, [pc, #348]	; (80022c4 <StartMovementTask+0x228>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	ee07 3a90 	vmov	s15, r3
 8002170:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002174:	4b5d      	ldr	r3, [pc, #372]	; (80022ec <StartMovementTask+0x250>)
 8002176:	edd3 7a04 	vldr	s15, [r3, #16]
 800217a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800217e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002182:	ee17 2a90 	vmov	r2, s15
 8002186:	4b51      	ldr	r3, [pc, #324]	; (80022cc <StartMovementTask+0x230>)
 8002188:	601a      	str	r2, [r3, #0]
			H_FL = -vel_linear[0] - vel_linear[1] - yaw.output;
 800218a:	4b4e      	ldr	r3, [pc, #312]	; (80022c4 <StartMovementTask+0x228>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	425a      	negs	r2, r3
 8002190:	4b4c      	ldr	r3, [pc, #304]	; (80022c4 <StartMovementTask+0x228>)
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	ee07 3a90 	vmov	s15, r3
 800219a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800219e:	4b53      	ldr	r3, [pc, #332]	; (80022ec <StartMovementTask+0x250>)
 80021a0:	edd3 7a04 	vldr	s15, [r3, #16]
 80021a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021ac:	ee17 2a90 	vmov	r2, s15
 80021b0:	4b47      	ldr	r3, [pc, #284]	; (80022d0 <StartMovementTask+0x234>)
 80021b2:	601a      	str	r2, [r3, #0]
			H_BR = +vel_linear[0] + vel_linear[1] - yaw.output;
 80021b4:	4b43      	ldr	r3, [pc, #268]	; (80022c4 <StartMovementTask+0x228>)
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	4b42      	ldr	r3, [pc, #264]	; (80022c4 <StartMovementTask+0x228>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	4413      	add	r3, r2
 80021be:	ee07 3a90 	vmov	s15, r3
 80021c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021c6:	4b49      	ldr	r3, [pc, #292]	; (80022ec <StartMovementTask+0x250>)
 80021c8:	edd3 7a04 	vldr	s15, [r3, #16]
 80021cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80021d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021d4:	ee17 2a90 	vmov	r2, s15
 80021d8:	4b3e      	ldr	r3, [pc, #248]	; (80022d4 <StartMovementTask+0x238>)
 80021da:	601a      	str	r2, [r3, #0]
			H_BL = -vel_linear[0] + vel_linear[1] + yaw.output;
 80021dc:	4b39      	ldr	r3, [pc, #228]	; (80022c4 <StartMovementTask+0x228>)
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	4b38      	ldr	r3, [pc, #224]	; (80022c4 <StartMovementTask+0x228>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	1ad3      	subs	r3, r2, r3
 80021e6:	ee07 3a90 	vmov	s15, r3
 80021ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021ee:	4b3f      	ldr	r3, [pc, #252]	; (80022ec <StartMovementTask+0x250>)
 80021f0:	edd3 7a04 	vldr	s15, [r3, #16]
 80021f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021fc:	ee17 2a90 	vmov	r2, s15
 8002200:	4b35      	ldr	r3, [pc, #212]	; (80022d8 <StartMovementTask+0x23c>)
 8002202:	601a      	str	r2, [r3, #0]

			//Vertical Thruster    Up/Down  |||   Pitch     |||   Roll
			V_FR = -vel_linear[2] - pitch.output - roll.output;
 8002204:	4b2f      	ldr	r3, [pc, #188]	; (80022c4 <StartMovementTask+0x228>)
 8002206:	689b      	ldr	r3, [r3, #8]
 8002208:	425b      	negs	r3, r3
 800220a:	ee07 3a90 	vmov	s15, r3
 800220e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002212:	4b37      	ldr	r3, [pc, #220]	; (80022f0 <StartMovementTask+0x254>)
 8002214:	edd3 7a04 	vldr	s15, [r3, #16]
 8002218:	ee37 7a67 	vsub.f32	s14, s14, s15
 800221c:	4b35      	ldr	r3, [pc, #212]	; (80022f4 <StartMovementTask+0x258>)
 800221e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002222:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002226:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800222a:	ee17 2a90 	vmov	r2, s15
 800222e:	4b2b      	ldr	r3, [pc, #172]	; (80022dc <StartMovementTask+0x240>)
 8002230:	601a      	str	r2, [r3, #0]
			V_FL = -vel_linear[2] - pitch.output + roll.output;
 8002232:	4b24      	ldr	r3, [pc, #144]	; (80022c4 <StartMovementTask+0x228>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	425b      	negs	r3, r3
 8002238:	ee07 3a90 	vmov	s15, r3
 800223c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002240:	4b2b      	ldr	r3, [pc, #172]	; (80022f0 <StartMovementTask+0x254>)
 8002242:	edd3 7a04 	vldr	s15, [r3, #16]
 8002246:	ee37 7a67 	vsub.f32	s14, s14, s15
 800224a:	4b2a      	ldr	r3, [pc, #168]	; (80022f4 <StartMovementTask+0x258>)
 800224c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002250:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002254:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002258:	ee17 2a90 	vmov	r2, s15
 800225c:	4b20      	ldr	r3, [pc, #128]	; (80022e0 <StartMovementTask+0x244>)
 800225e:	601a      	str	r2, [r3, #0]
			V_BR = -vel_linear[2] + pitch.output - roll.output;
 8002260:	4b18      	ldr	r3, [pc, #96]	; (80022c4 <StartMovementTask+0x228>)
 8002262:	689b      	ldr	r3, [r3, #8]
 8002264:	425b      	negs	r3, r3
 8002266:	ee07 3a90 	vmov	s15, r3
 800226a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800226e:	4b20      	ldr	r3, [pc, #128]	; (80022f0 <StartMovementTask+0x254>)
 8002270:	edd3 7a04 	vldr	s15, [r3, #16]
 8002274:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002278:	4b1e      	ldr	r3, [pc, #120]	; (80022f4 <StartMovementTask+0x258>)
 800227a:	edd3 7a04 	vldr	s15, [r3, #16]
 800227e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002282:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002286:	ee17 2a90 	vmov	r2, s15
 800228a:	4b16      	ldr	r3, [pc, #88]	; (80022e4 <StartMovementTask+0x248>)
 800228c:	601a      	str	r2, [r3, #0]
			V_BL = -vel_linear[2] + pitch.output + roll.output;
 800228e:	4b0d      	ldr	r3, [pc, #52]	; (80022c4 <StartMovementTask+0x228>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	425b      	negs	r3, r3
 8002294:	ee07 3a90 	vmov	s15, r3
 8002298:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800229c:	4b14      	ldr	r3, [pc, #80]	; (80022f0 <StartMovementTask+0x254>)
 800229e:	edd3 7a04 	vldr	s15, [r3, #16]
 80022a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80022a6:	4b13      	ldr	r3, [pc, #76]	; (80022f4 <StartMovementTask+0x258>)
 80022a8:	edd3 7a04 	vldr	s15, [r3, #16]
 80022ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022b4:	ee17 2a90 	vmov	r2, s15
 80022b8:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <StartMovementTask+0x24c>)
 80022ba:	601a      	str	r2, [r3, #0]
 80022bc:	e16a      	b.n	8002594 <StartMovementTask+0x4f8>
 80022be:	bf00      	nop
 80022c0:	200009a8 	.word	0x200009a8
 80022c4:	20000978 	.word	0x20000978
 80022c8:	20000984 	.word	0x20000984
 80022cc:	20000b1c 	.word	0x20000b1c
 80022d0:	20000b20 	.word	0x20000b20
 80022d4:	20000b24 	.word	0x20000b24
 80022d8:	20000b28 	.word	0x20000b28
 80022dc:	20000b2c 	.word	0x20000b2c
 80022e0:	20000b30 	.word	0x20000b30
 80022e4:	20000b34 	.word	0x20000b34
 80022e8:	20000b38 	.word	0x20000b38
 80022ec:	20000a74 	.word	0x20000a74
 80022f0:	20000a9c 	.word	0x20000a9c
 80022f4:	20000ac4 	.word	0x20000ac4
		}

		else if (movement_mode == 2) { // Depthhold
 80022f8:	4b49      	ldr	r3, [pc, #292]	; (8002420 <StartMovementTask+0x384>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2b02      	cmp	r3, #2
 80022fe:	f040 80a7 	bne.w	8002450 <StartMovementTask+0x3b4>
			//Horizontal Thruster  Forwaed  |||   Lateral   |||    Yaw
			H_FR = +vel_linear[0] - vel_linear[1] + vel_angular[2];
 8002302:	4b48      	ldr	r3, [pc, #288]	; (8002424 <StartMovementTask+0x388>)
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	4b47      	ldr	r3, [pc, #284]	; (8002424 <StartMovementTask+0x388>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	1ad2      	subs	r2, r2, r3
 800230c:	4b46      	ldr	r3, [pc, #280]	; (8002428 <StartMovementTask+0x38c>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	4413      	add	r3, r2
 8002312:	4a46      	ldr	r2, [pc, #280]	; (800242c <StartMovementTask+0x390>)
 8002314:	6013      	str	r3, [r2, #0]
			H_FL = -vel_linear[0] - vel_linear[1] - vel_angular[2];
 8002316:	4b43      	ldr	r3, [pc, #268]	; (8002424 <StartMovementTask+0x388>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	425a      	negs	r2, r3
 800231c:	4b41      	ldr	r3, [pc, #260]	; (8002424 <StartMovementTask+0x388>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	1ad2      	subs	r2, r2, r3
 8002322:	4b41      	ldr	r3, [pc, #260]	; (8002428 <StartMovementTask+0x38c>)
 8002324:	689b      	ldr	r3, [r3, #8]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	4a41      	ldr	r2, [pc, #260]	; (8002430 <StartMovementTask+0x394>)
 800232a:	6013      	str	r3, [r2, #0]
			H_BR = +vel_linear[0] + vel_linear[1] - vel_angular[2];
 800232c:	4b3d      	ldr	r3, [pc, #244]	; (8002424 <StartMovementTask+0x388>)
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	4b3c      	ldr	r3, [pc, #240]	; (8002424 <StartMovementTask+0x388>)
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	441a      	add	r2, r3
 8002336:	4b3c      	ldr	r3, [pc, #240]	; (8002428 <StartMovementTask+0x38c>)
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	4a3d      	ldr	r2, [pc, #244]	; (8002434 <StartMovementTask+0x398>)
 800233e:	6013      	str	r3, [r2, #0]
			H_BL = -vel_linear[0] + vel_linear[1] + vel_angular[2];
 8002340:	4b38      	ldr	r3, [pc, #224]	; (8002424 <StartMovementTask+0x388>)
 8002342:	685a      	ldr	r2, [r3, #4]
 8002344:	4b37      	ldr	r3, [pc, #220]	; (8002424 <StartMovementTask+0x388>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	1ad2      	subs	r2, r2, r3
 800234a:	4b37      	ldr	r3, [pc, #220]	; (8002428 <StartMovementTask+0x38c>)
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	4413      	add	r3, r2
 8002350:	4a39      	ldr	r2, [pc, #228]	; (8002438 <StartMovementTask+0x39c>)
 8002352:	6013      	str	r3, [r2, #0]

			//Vertical Thruster    Up/Down  |||   Pitch     |||   Roll
			V_FR = +depth.output - vel_angular[0] + vel_angular[1];
 8002354:	4b39      	ldr	r3, [pc, #228]	; (800243c <StartMovementTask+0x3a0>)
 8002356:	ed93 7a04 	vldr	s14, [r3, #16]
 800235a:	4b33      	ldr	r3, [pc, #204]	; (8002428 <StartMovementTask+0x38c>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	ee07 3a90 	vmov	s15, r3
 8002362:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002366:	ee37 7a67 	vsub.f32	s14, s14, s15
 800236a:	4b2f      	ldr	r3, [pc, #188]	; (8002428 <StartMovementTask+0x38c>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	ee07 3a90 	vmov	s15, r3
 8002372:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002376:	ee77 7a27 	vadd.f32	s15, s14, s15
 800237a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800237e:	ee17 2a90 	vmov	r2, s15
 8002382:	4b2f      	ldr	r3, [pc, #188]	; (8002440 <StartMovementTask+0x3a4>)
 8002384:	601a      	str	r2, [r3, #0]
			V_FL = +depth.output - vel_angular[0] - vel_angular[1];
 8002386:	4b2d      	ldr	r3, [pc, #180]	; (800243c <StartMovementTask+0x3a0>)
 8002388:	ed93 7a04 	vldr	s14, [r3, #16]
 800238c:	4b26      	ldr	r3, [pc, #152]	; (8002428 <StartMovementTask+0x38c>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	ee07 3a90 	vmov	s15, r3
 8002394:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002398:	ee37 7a67 	vsub.f32	s14, s14, s15
 800239c:	4b22      	ldr	r3, [pc, #136]	; (8002428 <StartMovementTask+0x38c>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	ee07 3a90 	vmov	s15, r3
 80023a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023b0:	ee17 2a90 	vmov	r2, s15
 80023b4:	4b23      	ldr	r3, [pc, #140]	; (8002444 <StartMovementTask+0x3a8>)
 80023b6:	601a      	str	r2, [r3, #0]
			V_BR = +depth.output + vel_angular[0] + vel_angular[1];
 80023b8:	4b20      	ldr	r3, [pc, #128]	; (800243c <StartMovementTask+0x3a0>)
 80023ba:	ed93 7a04 	vldr	s14, [r3, #16]
 80023be:	4b1a      	ldr	r3, [pc, #104]	; (8002428 <StartMovementTask+0x38c>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	ee07 3a90 	vmov	s15, r3
 80023c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023ce:	4b16      	ldr	r3, [pc, #88]	; (8002428 <StartMovementTask+0x38c>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	ee07 3a90 	vmov	s15, r3
 80023d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023e2:	ee17 2a90 	vmov	r2, s15
 80023e6:	4b18      	ldr	r3, [pc, #96]	; (8002448 <StartMovementTask+0x3ac>)
 80023e8:	601a      	str	r2, [r3, #0]
			V_BL = +depth.output + vel_angular[0] - vel_angular[1];
 80023ea:	4b14      	ldr	r3, [pc, #80]	; (800243c <StartMovementTask+0x3a0>)
 80023ec:	ed93 7a04 	vldr	s14, [r3, #16]
 80023f0:	4b0d      	ldr	r3, [pc, #52]	; (8002428 <StartMovementTask+0x38c>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	ee07 3a90 	vmov	s15, r3
 80023f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002400:	4b09      	ldr	r3, [pc, #36]	; (8002428 <StartMovementTask+0x38c>)
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	ee07 3a90 	vmov	s15, r3
 8002408:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800240c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002410:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002414:	ee17 2a90 	vmov	r2, s15
 8002418:	4b0c      	ldr	r3, [pc, #48]	; (800244c <StartMovementTask+0x3b0>)
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	e0ba      	b.n	8002594 <StartMovementTask+0x4f8>
 800241e:	bf00      	nop
 8002420:	200009a8 	.word	0x200009a8
 8002424:	20000978 	.word	0x20000978
 8002428:	20000984 	.word	0x20000984
 800242c:	20000b1c 	.word	0x20000b1c
 8002430:	20000b20 	.word	0x20000b20
 8002434:	20000b24 	.word	0x20000b24
 8002438:	20000b28 	.word	0x20000b28
 800243c:	20000aec 	.word	0x20000aec
 8002440:	20000b2c 	.word	0x20000b2c
 8002444:	20000b30 	.word	0x20000b30
 8002448:	20000b34 	.word	0x20000b34
 800244c:	20000b38 	.word	0x20000b38
		}

		else if (movement_mode == 3) { // Fully Assisted
 8002450:	4bbe      	ldr	r3, [pc, #760]	; (800274c <StartMovementTask+0x6b0>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2b03      	cmp	r3, #3
 8002456:	f040 809d 	bne.w	8002594 <StartMovementTask+0x4f8>
			//Horizontal Thruster  Forwaed  |||   Lateral   |||    Yaw
			H_FR = +vel_linear[0] - vel_linear[1] + yaw.output;
 800245a:	4bbd      	ldr	r3, [pc, #756]	; (8002750 <StartMovementTask+0x6b4>)
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	4bbc      	ldr	r3, [pc, #752]	; (8002750 <StartMovementTask+0x6b4>)
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	1ad3      	subs	r3, r2, r3
 8002464:	ee07 3a90 	vmov	s15, r3
 8002468:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800246c:	4bb9      	ldr	r3, [pc, #740]	; (8002754 <StartMovementTask+0x6b8>)
 800246e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002472:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002476:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800247a:	ee17 2a90 	vmov	r2, s15
 800247e:	4bb6      	ldr	r3, [pc, #728]	; (8002758 <StartMovementTask+0x6bc>)
 8002480:	601a      	str	r2, [r3, #0]
			H_FL = -vel_linear[0] - vel_linear[1] - yaw.output;
 8002482:	4bb3      	ldr	r3, [pc, #716]	; (8002750 <StartMovementTask+0x6b4>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	425a      	negs	r2, r3
 8002488:	4bb1      	ldr	r3, [pc, #708]	; (8002750 <StartMovementTask+0x6b4>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	ee07 3a90 	vmov	s15, r3
 8002492:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002496:	4baf      	ldr	r3, [pc, #700]	; (8002754 <StartMovementTask+0x6b8>)
 8002498:	edd3 7a04 	vldr	s15, [r3, #16]
 800249c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024a4:	ee17 2a90 	vmov	r2, s15
 80024a8:	4bac      	ldr	r3, [pc, #688]	; (800275c <StartMovementTask+0x6c0>)
 80024aa:	601a      	str	r2, [r3, #0]
			H_BR = +vel_linear[0] + vel_linear[1] - yaw.output;
 80024ac:	4ba8      	ldr	r3, [pc, #672]	; (8002750 <StartMovementTask+0x6b4>)
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	4ba7      	ldr	r3, [pc, #668]	; (8002750 <StartMovementTask+0x6b4>)
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	4413      	add	r3, r2
 80024b6:	ee07 3a90 	vmov	s15, r3
 80024ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024be:	4ba5      	ldr	r3, [pc, #660]	; (8002754 <StartMovementTask+0x6b8>)
 80024c0:	edd3 7a04 	vldr	s15, [r3, #16]
 80024c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024cc:	ee17 2a90 	vmov	r2, s15
 80024d0:	4ba3      	ldr	r3, [pc, #652]	; (8002760 <StartMovementTask+0x6c4>)
 80024d2:	601a      	str	r2, [r3, #0]
			H_BL = -vel_linear[0] + vel_linear[1] + yaw.output;
 80024d4:	4b9e      	ldr	r3, [pc, #632]	; (8002750 <StartMovementTask+0x6b4>)
 80024d6:	685a      	ldr	r2, [r3, #4]
 80024d8:	4b9d      	ldr	r3, [pc, #628]	; (8002750 <StartMovementTask+0x6b4>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	ee07 3a90 	vmov	s15, r3
 80024e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024e6:	4b9b      	ldr	r3, [pc, #620]	; (8002754 <StartMovementTask+0x6b8>)
 80024e8:	edd3 7a04 	vldr	s15, [r3, #16]
 80024ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024f4:	ee17 2a90 	vmov	r2, s15
 80024f8:	4b9a      	ldr	r3, [pc, #616]	; (8002764 <StartMovementTask+0x6c8>)
 80024fa:	601a      	str	r2, [r3, #0]

			//Vertical Thruster    Up/Down  |||   Pitch     |||   Roll
			V_FR = +depth.output - pitch.output - roll.output;
 80024fc:	4b9a      	ldr	r3, [pc, #616]	; (8002768 <StartMovementTask+0x6cc>)
 80024fe:	ed93 7a04 	vldr	s14, [r3, #16]
 8002502:	4b9a      	ldr	r3, [pc, #616]	; (800276c <StartMovementTask+0x6d0>)
 8002504:	edd3 7a04 	vldr	s15, [r3, #16]
 8002508:	ee37 7a67 	vsub.f32	s14, s14, s15
 800250c:	4b98      	ldr	r3, [pc, #608]	; (8002770 <StartMovementTask+0x6d4>)
 800250e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002512:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002516:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800251a:	ee17 2a90 	vmov	r2, s15
 800251e:	4b95      	ldr	r3, [pc, #596]	; (8002774 <StartMovementTask+0x6d8>)
 8002520:	601a      	str	r2, [r3, #0]
			V_FL = +depth.output - pitch.output + roll.output;
 8002522:	4b91      	ldr	r3, [pc, #580]	; (8002768 <StartMovementTask+0x6cc>)
 8002524:	ed93 7a04 	vldr	s14, [r3, #16]
 8002528:	4b90      	ldr	r3, [pc, #576]	; (800276c <StartMovementTask+0x6d0>)
 800252a:	edd3 7a04 	vldr	s15, [r3, #16]
 800252e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002532:	4b8f      	ldr	r3, [pc, #572]	; (8002770 <StartMovementTask+0x6d4>)
 8002534:	edd3 7a04 	vldr	s15, [r3, #16]
 8002538:	ee77 7a27 	vadd.f32	s15, s14, s15
 800253c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002540:	ee17 2a90 	vmov	r2, s15
 8002544:	4b8c      	ldr	r3, [pc, #560]	; (8002778 <StartMovementTask+0x6dc>)
 8002546:	601a      	str	r2, [r3, #0]
			V_BR = +depth.output + pitch.output - roll.output;
 8002548:	4b87      	ldr	r3, [pc, #540]	; (8002768 <StartMovementTask+0x6cc>)
 800254a:	ed93 7a04 	vldr	s14, [r3, #16]
 800254e:	4b87      	ldr	r3, [pc, #540]	; (800276c <StartMovementTask+0x6d0>)
 8002550:	edd3 7a04 	vldr	s15, [r3, #16]
 8002554:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002558:	4b85      	ldr	r3, [pc, #532]	; (8002770 <StartMovementTask+0x6d4>)
 800255a:	edd3 7a04 	vldr	s15, [r3, #16]
 800255e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002562:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002566:	ee17 2a90 	vmov	r2, s15
 800256a:	4b84      	ldr	r3, [pc, #528]	; (800277c <StartMovementTask+0x6e0>)
 800256c:	601a      	str	r2, [r3, #0]
			V_BL = +depth.output + pitch.output + roll.output;
 800256e:	4b7e      	ldr	r3, [pc, #504]	; (8002768 <StartMovementTask+0x6cc>)
 8002570:	ed93 7a04 	vldr	s14, [r3, #16]
 8002574:	4b7d      	ldr	r3, [pc, #500]	; (800276c <StartMovementTask+0x6d0>)
 8002576:	edd3 7a04 	vldr	s15, [r3, #16]
 800257a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800257e:	4b7c      	ldr	r3, [pc, #496]	; (8002770 <StartMovementTask+0x6d4>)
 8002580:	edd3 7a04 	vldr	s15, [r3, #16]
 8002584:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002588:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800258c:	ee17 2a90 	vmov	r2, s15
 8002590:	4b7b      	ldr	r3, [pc, #492]	; (8002780 <StartMovementTask+0x6e4>)
 8002592:	601a      	str	r2, [r3, #0]
		}

		HorizontalMax = fmax(fmax(abs(H_FR), abs(H_FL)),fmax(abs(H_BR), abs(H_BL)));
 8002594:	4b70      	ldr	r3, [pc, #448]	; (8002758 <StartMovementTask+0x6bc>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2b00      	cmp	r3, #0
 800259a:	bfb8      	it	lt
 800259c:	425b      	neglt	r3, r3
 800259e:	4618      	mov	r0, r3
 80025a0:	f7fd ff68 	bl	8000474 <__aeabi_i2d>
 80025a4:	4604      	mov	r4, r0
 80025a6:	460d      	mov	r5, r1
 80025a8:	4b6c      	ldr	r3, [pc, #432]	; (800275c <StartMovementTask+0x6c0>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	bfb8      	it	lt
 80025b0:	425b      	neglt	r3, r3
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7fd ff5e 	bl	8000474 <__aeabi_i2d>
 80025b8:	4602      	mov	r2, r0
 80025ba:	460b      	mov	r3, r1
 80025bc:	ec43 2b11 	vmov	d1, r2, r3
 80025c0:	ec45 4b10 	vmov	d0, r4, r5
 80025c4:	f00d f954 	bl	800f870 <fmax>
 80025c8:	eeb0 8a40 	vmov.f32	s16, s0
 80025cc:	eef0 8a60 	vmov.f32	s17, s1
 80025d0:	4b63      	ldr	r3, [pc, #396]	; (8002760 <StartMovementTask+0x6c4>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	bfb8      	it	lt
 80025d8:	425b      	neglt	r3, r3
 80025da:	4618      	mov	r0, r3
 80025dc:	f7fd ff4a 	bl	8000474 <__aeabi_i2d>
 80025e0:	4604      	mov	r4, r0
 80025e2:	460d      	mov	r5, r1
 80025e4:	4b5f      	ldr	r3, [pc, #380]	; (8002764 <StartMovementTask+0x6c8>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	bfb8      	it	lt
 80025ec:	425b      	neglt	r3, r3
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7fd ff40 	bl	8000474 <__aeabi_i2d>
 80025f4:	4602      	mov	r2, r0
 80025f6:	460b      	mov	r3, r1
 80025f8:	ec43 2b11 	vmov	d1, r2, r3
 80025fc:	ec45 4b10 	vmov	d0, r4, r5
 8002600:	f00d f936 	bl	800f870 <fmax>
 8002604:	eeb0 7a40 	vmov.f32	s14, s0
 8002608:	eef0 7a60 	vmov.f32	s15, s1
 800260c:	eeb0 1a47 	vmov.f32	s2, s14
 8002610:	eef0 1a67 	vmov.f32	s3, s15
 8002614:	eeb0 0a48 	vmov.f32	s0, s16
 8002618:	eef0 0a68 	vmov.f32	s1, s17
 800261c:	f00d f928 	bl	800f870 <fmax>
 8002620:	ec53 2b10 	vmov	r2, r3, d0
 8002624:	4610      	mov	r0, r2
 8002626:	4619      	mov	r1, r3
 8002628:	f7fe fa28 	bl	8000a7c <__aeabi_d2iz>
 800262c:	4603      	mov	r3, r0
 800262e:	4a55      	ldr	r2, [pc, #340]	; (8002784 <StartMovementTask+0x6e8>)
 8002630:	6013      	str	r3, [r2, #0]
		VerticalMax = fmax(fmax(abs(V_FR), abs(V_FL)),fmax(abs(V_BR), abs(V_BL)));
 8002632:	4b50      	ldr	r3, [pc, #320]	; (8002774 <StartMovementTask+0x6d8>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	2b00      	cmp	r3, #0
 8002638:	bfb8      	it	lt
 800263a:	425b      	neglt	r3, r3
 800263c:	4618      	mov	r0, r3
 800263e:	f7fd ff19 	bl	8000474 <__aeabi_i2d>
 8002642:	4604      	mov	r4, r0
 8002644:	460d      	mov	r5, r1
 8002646:	4b4c      	ldr	r3, [pc, #304]	; (8002778 <StartMovementTask+0x6dc>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2b00      	cmp	r3, #0
 800264c:	bfb8      	it	lt
 800264e:	425b      	neglt	r3, r3
 8002650:	4618      	mov	r0, r3
 8002652:	f7fd ff0f 	bl	8000474 <__aeabi_i2d>
 8002656:	4602      	mov	r2, r0
 8002658:	460b      	mov	r3, r1
 800265a:	ec43 2b11 	vmov	d1, r2, r3
 800265e:	ec45 4b10 	vmov	d0, r4, r5
 8002662:	f00d f905 	bl	800f870 <fmax>
 8002666:	eeb0 8a40 	vmov.f32	s16, s0
 800266a:	eef0 8a60 	vmov.f32	s17, s1
 800266e:	4b43      	ldr	r3, [pc, #268]	; (800277c <StartMovementTask+0x6e0>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2b00      	cmp	r3, #0
 8002674:	bfb8      	it	lt
 8002676:	425b      	neglt	r3, r3
 8002678:	4618      	mov	r0, r3
 800267a:	f7fd fefb 	bl	8000474 <__aeabi_i2d>
 800267e:	4604      	mov	r4, r0
 8002680:	460d      	mov	r5, r1
 8002682:	4b3f      	ldr	r3, [pc, #252]	; (8002780 <StartMovementTask+0x6e4>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2b00      	cmp	r3, #0
 8002688:	bfb8      	it	lt
 800268a:	425b      	neglt	r3, r3
 800268c:	4618      	mov	r0, r3
 800268e:	f7fd fef1 	bl	8000474 <__aeabi_i2d>
 8002692:	4602      	mov	r2, r0
 8002694:	460b      	mov	r3, r1
 8002696:	ec43 2b11 	vmov	d1, r2, r3
 800269a:	ec45 4b10 	vmov	d0, r4, r5
 800269e:	f00d f8e7 	bl	800f870 <fmax>
 80026a2:	eeb0 7a40 	vmov.f32	s14, s0
 80026a6:	eef0 7a60 	vmov.f32	s15, s1
 80026aa:	eeb0 1a47 	vmov.f32	s2, s14
 80026ae:	eef0 1a67 	vmov.f32	s3, s15
 80026b2:	eeb0 0a48 	vmov.f32	s0, s16
 80026b6:	eef0 0a68 	vmov.f32	s1, s17
 80026ba:	f00d f8d9 	bl	800f870 <fmax>
 80026be:	ec53 2b10 	vmov	r2, r3, d0
 80026c2:	4610      	mov	r0, r2
 80026c4:	4619      	mov	r1, r3
 80026c6:	f7fe f9d9 	bl	8000a7c <__aeabi_d2iz>
 80026ca:	4603      	mov	r3, r0
 80026cc:	4a2e      	ldr	r2, [pc, #184]	; (8002788 <StartMovementTask+0x6ec>)
 80026ce:	6013      	str	r3, [r2, #0]

		if (HorizontalMax > 500) {
 80026d0:	4b2c      	ldr	r3, [pc, #176]	; (8002784 <StartMovementTask+0x6e8>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80026d8:	dd1f      	ble.n	800271a <StartMovementTask+0x67e>
			H_FR = H_FR / HorizontalMax;
 80026da:	4b1f      	ldr	r3, [pc, #124]	; (8002758 <StartMovementTask+0x6bc>)
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	4b29      	ldr	r3, [pc, #164]	; (8002784 <StartMovementTask+0x6e8>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80026e6:	4a1c      	ldr	r2, [pc, #112]	; (8002758 <StartMovementTask+0x6bc>)
 80026e8:	6013      	str	r3, [r2, #0]
			H_FL = H_FL / HorizontalMax;
 80026ea:	4b1c      	ldr	r3, [pc, #112]	; (800275c <StartMovementTask+0x6c0>)
 80026ec:	681a      	ldr	r2, [r3, #0]
 80026ee:	4b25      	ldr	r3, [pc, #148]	; (8002784 <StartMovementTask+0x6e8>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	fb92 f3f3 	sdiv	r3, r2, r3
 80026f6:	4a19      	ldr	r2, [pc, #100]	; (800275c <StartMovementTask+0x6c0>)
 80026f8:	6013      	str	r3, [r2, #0]
			H_BR = H_BR / HorizontalMax;
 80026fa:	4b19      	ldr	r3, [pc, #100]	; (8002760 <StartMovementTask+0x6c4>)
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	4b21      	ldr	r3, [pc, #132]	; (8002784 <StartMovementTask+0x6e8>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	fb92 f3f3 	sdiv	r3, r2, r3
 8002706:	4a16      	ldr	r2, [pc, #88]	; (8002760 <StartMovementTask+0x6c4>)
 8002708:	6013      	str	r3, [r2, #0]
			H_BL = H_BL / HorizontalMax;
 800270a:	4b16      	ldr	r3, [pc, #88]	; (8002764 <StartMovementTask+0x6c8>)
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	4b1d      	ldr	r3, [pc, #116]	; (8002784 <StartMovementTask+0x6e8>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	fb92 f3f3 	sdiv	r3, r2, r3
 8002716:	4a13      	ldr	r2, [pc, #76]	; (8002764 <StartMovementTask+0x6c8>)
 8002718:	6013      	str	r3, [r2, #0]
		}

		if (VerticalMax > 500) {
 800271a:	4b1b      	ldr	r3, [pc, #108]	; (8002788 <StartMovementTask+0x6ec>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002722:	dd41      	ble.n	80027a8 <StartMovementTask+0x70c>
			V_FR = V_FR / VerticalMax;
 8002724:	4b13      	ldr	r3, [pc, #76]	; (8002774 <StartMovementTask+0x6d8>)
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	4b17      	ldr	r3, [pc, #92]	; (8002788 <StartMovementTask+0x6ec>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002730:	4a10      	ldr	r2, [pc, #64]	; (8002774 <StartMovementTask+0x6d8>)
 8002732:	6013      	str	r3, [r2, #0]
			V_FL = V_FL / VerticalMax;
 8002734:	4b10      	ldr	r3, [pc, #64]	; (8002778 <StartMovementTask+0x6dc>)
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	4b13      	ldr	r3, [pc, #76]	; (8002788 <StartMovementTask+0x6ec>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002740:	4a0d      	ldr	r2, [pc, #52]	; (8002778 <StartMovementTask+0x6dc>)
 8002742:	6013      	str	r3, [r2, #0]
			V_BR = V_BR / VerticalMax;
 8002744:	4b0d      	ldr	r3, [pc, #52]	; (800277c <StartMovementTask+0x6e0>)
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	e020      	b.n	800278c <StartMovementTask+0x6f0>
 800274a:	bf00      	nop
 800274c:	200009a8 	.word	0x200009a8
 8002750:	20000978 	.word	0x20000978
 8002754:	20000a74 	.word	0x20000a74
 8002758:	20000b1c 	.word	0x20000b1c
 800275c:	20000b20 	.word	0x20000b20
 8002760:	20000b24 	.word	0x20000b24
 8002764:	20000b28 	.word	0x20000b28
 8002768:	20000aec 	.word	0x20000aec
 800276c:	20000a9c 	.word	0x20000a9c
 8002770:	20000ac4 	.word	0x20000ac4
 8002774:	20000b2c 	.word	0x20000b2c
 8002778:	20000b30 	.word	0x20000b30
 800277c:	20000b34 	.word	0x20000b34
 8002780:	20000b38 	.word	0x20000b38
 8002784:	20000b14 	.word	0x20000b14
 8002788:	20000b18 	.word	0x20000b18
 800278c:	4b5d      	ldr	r3, [pc, #372]	; (8002904 <StartMovementTask+0x868>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	fb92 f3f3 	sdiv	r3, r2, r3
 8002794:	4a5c      	ldr	r2, [pc, #368]	; (8002908 <StartMovementTask+0x86c>)
 8002796:	6013      	str	r3, [r2, #0]
			V_BL = V_BL / VerticalMax;
 8002798:	4b5c      	ldr	r3, [pc, #368]	; (800290c <StartMovementTask+0x870>)
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	4b59      	ldr	r3, [pc, #356]	; (8002904 <StartMovementTask+0x868>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	fb92 f3f3 	sdiv	r3, r2, r3
 80027a4:	4a59      	ldr	r2, [pc, #356]	; (800290c <StartMovementTask+0x870>)
 80027a6:	6013      	str	r3, [r2, #0]
		}

		H_FR = H_FR + pwmCenter + H_FRoffset;
 80027a8:	4b59      	ldr	r3, [pc, #356]	; (8002910 <StartMovementTask+0x874>)
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	4b59      	ldr	r3, [pc, #356]	; (8002914 <StartMovementTask+0x878>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	441a      	add	r2, r3
 80027b2:	4b59      	ldr	r3, [pc, #356]	; (8002918 <StartMovementTask+0x87c>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4413      	add	r3, r2
 80027b8:	4a55      	ldr	r2, [pc, #340]	; (8002910 <StartMovementTask+0x874>)
 80027ba:	6013      	str	r3, [r2, #0]
		H_FL = H_FL + pwmCenter + H_FLoffset;
 80027bc:	4b57      	ldr	r3, [pc, #348]	; (800291c <StartMovementTask+0x880>)
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	4b54      	ldr	r3, [pc, #336]	; (8002914 <StartMovementTask+0x878>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	441a      	add	r2, r3
 80027c6:	4b56      	ldr	r3, [pc, #344]	; (8002920 <StartMovementTask+0x884>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4413      	add	r3, r2
 80027cc:	4a53      	ldr	r2, [pc, #332]	; (800291c <StartMovementTask+0x880>)
 80027ce:	6013      	str	r3, [r2, #0]
		H_BR = H_BR + pwmCenter + H_FRoffset;
 80027d0:	4b54      	ldr	r3, [pc, #336]	; (8002924 <StartMovementTask+0x888>)
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	4b4f      	ldr	r3, [pc, #316]	; (8002914 <StartMovementTask+0x878>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	441a      	add	r2, r3
 80027da:	4b4f      	ldr	r3, [pc, #316]	; (8002918 <StartMovementTask+0x87c>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4413      	add	r3, r2
 80027e0:	4a50      	ldr	r2, [pc, #320]	; (8002924 <StartMovementTask+0x888>)
 80027e2:	6013      	str	r3, [r2, #0]
		H_BL = H_BL + pwmCenter + H_BLoffset;
 80027e4:	4b50      	ldr	r3, [pc, #320]	; (8002928 <StartMovementTask+0x88c>)
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	4b4a      	ldr	r3, [pc, #296]	; (8002914 <StartMovementTask+0x878>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	441a      	add	r2, r3
 80027ee:	4b4f      	ldr	r3, [pc, #316]	; (800292c <StartMovementTask+0x890>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4413      	add	r3, r2
 80027f4:	4a4c      	ldr	r2, [pc, #304]	; (8002928 <StartMovementTask+0x88c>)
 80027f6:	6013      	str	r3, [r2, #0]
		V_FR = V_FR + pwmCenter + V_FRoffset;
 80027f8:	4b4d      	ldr	r3, [pc, #308]	; (8002930 <StartMovementTask+0x894>)
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	4b45      	ldr	r3, [pc, #276]	; (8002914 <StartMovementTask+0x878>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	441a      	add	r2, r3
 8002802:	4b4c      	ldr	r3, [pc, #304]	; (8002934 <StartMovementTask+0x898>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4413      	add	r3, r2
 8002808:	4a49      	ldr	r2, [pc, #292]	; (8002930 <StartMovementTask+0x894>)
 800280a:	6013      	str	r3, [r2, #0]
		V_FL = V_FL + pwmCenter + V_FLoffset;
 800280c:	4b4a      	ldr	r3, [pc, #296]	; (8002938 <StartMovementTask+0x89c>)
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	4b40      	ldr	r3, [pc, #256]	; (8002914 <StartMovementTask+0x878>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	441a      	add	r2, r3
 8002816:	4b49      	ldr	r3, [pc, #292]	; (800293c <StartMovementTask+0x8a0>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4413      	add	r3, r2
 800281c:	4a46      	ldr	r2, [pc, #280]	; (8002938 <StartMovementTask+0x89c>)
 800281e:	6013      	str	r3, [r2, #0]
		V_BR = V_BR + pwmCenter + V_BRoffset;
 8002820:	4b39      	ldr	r3, [pc, #228]	; (8002908 <StartMovementTask+0x86c>)
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	4b3b      	ldr	r3, [pc, #236]	; (8002914 <StartMovementTask+0x878>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	441a      	add	r2, r3
 800282a:	4b45      	ldr	r3, [pc, #276]	; (8002940 <StartMovementTask+0x8a4>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4413      	add	r3, r2
 8002830:	4a35      	ldr	r2, [pc, #212]	; (8002908 <StartMovementTask+0x86c>)
 8002832:	6013      	str	r3, [r2, #0]
		V_BL = V_BL + pwmCenter + V_BLoffset;
 8002834:	4b35      	ldr	r3, [pc, #212]	; (800290c <StartMovementTask+0x870>)
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	4b36      	ldr	r3, [pc, #216]	; (8002914 <StartMovementTask+0x878>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	441a      	add	r2, r3
 800283e:	4b41      	ldr	r3, [pc, #260]	; (8002944 <StartMovementTask+0x8a8>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4413      	add	r3, r2
 8002844:	4a31      	ldr	r2, [pc, #196]	; (800290c <StartMovementTask+0x870>)
 8002846:	6013      	str	r3, [r2, #0]

		//Send to ESC
		send_H_FR = H_FR;
 8002848:	4b31      	ldr	r3, [pc, #196]	; (8002910 <StartMovementTask+0x874>)
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	4b3e      	ldr	r3, [pc, #248]	; (8002948 <StartMovementTask+0x8ac>)
 800284e:	635a      	str	r2, [r3, #52]	; 0x34
		send_H_FL = H_FL;
 8002850:	4b32      	ldr	r3, [pc, #200]	; (800291c <StartMovementTask+0x880>)
 8002852:	681a      	ldr	r2, [r3, #0]
 8002854:	4b3c      	ldr	r3, [pc, #240]	; (8002948 <StartMovementTask+0x8ac>)
 8002856:	641a      	str	r2, [r3, #64]	; 0x40
		send_H_BR = H_BR;
 8002858:	4b32      	ldr	r3, [pc, #200]	; (8002924 <StartMovementTask+0x888>)
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	4b3a      	ldr	r3, [pc, #232]	; (8002948 <StartMovementTask+0x8ac>)
 800285e:	639a      	str	r2, [r3, #56]	; 0x38
		send_H_BL = H_BL;
 8002860:	4b31      	ldr	r3, [pc, #196]	; (8002928 <StartMovementTask+0x88c>)
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	4b38      	ldr	r3, [pc, #224]	; (8002948 <StartMovementTask+0x8ac>)
 8002866:	63da      	str	r2, [r3, #60]	; 0x3c
		send_V_FR = V_FR;
 8002868:	4b31      	ldr	r3, [pc, #196]	; (8002930 <StartMovementTask+0x894>)
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	4b37      	ldr	r3, [pc, #220]	; (800294c <StartMovementTask+0x8b0>)
 800286e:	635a      	str	r2, [r3, #52]	; 0x34
		send_V_FL = V_FL;
 8002870:	4b31      	ldr	r3, [pc, #196]	; (8002938 <StartMovementTask+0x89c>)
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	4b35      	ldr	r3, [pc, #212]	; (800294c <StartMovementTask+0x8b0>)
 8002876:	641a      	str	r2, [r3, #64]	; 0x40
		send_V_BR = V_BR;
 8002878:	4b23      	ldr	r3, [pc, #140]	; (8002908 <StartMovementTask+0x86c>)
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	4b33      	ldr	r3, [pc, #204]	; (800294c <StartMovementTask+0x8b0>)
 800287e:	63da      	str	r2, [r3, #60]	; 0x3c
		send_V_BL = V_BL;
 8002880:	4b22      	ldr	r3, [pc, #136]	; (800290c <StartMovementTask+0x870>)
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	4b31      	ldr	r3, [pc, #196]	; (800294c <StartMovementTask+0x8b0>)
 8002886:	639a      	str	r2, [r3, #56]	; 0x38

		//Lumen
		lumen_pwm = map(lumen_power, 0, 100, 1000, 2000);
 8002888:	4b31      	ldr	r3, [pc, #196]	; (8002950 <StartMovementTask+0x8b4>)
 800288a:	6818      	ldr	r0, [r3, #0]
 800288c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002896:	2264      	movs	r2, #100	; 0x64
 8002898:	2100      	movs	r1, #0
 800289a:	f7fe fd83 	bl	80013a4 <map>
 800289e:	4603      	mov	r3, r0
 80028a0:	4a2c      	ldr	r2, [pc, #176]	; (8002954 <StartMovementTask+0x8b8>)
 80028a2:	6013      	str	r3, [r2, #0]
		send_Lumen = lumen_pwm;
 80028a4:	4b2b      	ldr	r3, [pc, #172]	; (8002954 <StartMovementTask+0x8b8>)
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	4b2b      	ldr	r3, [pc, #172]	; (8002958 <StartMovementTask+0x8bc>)
 80028aa:	635a      	str	r2, [r3, #52]	; 0x34

		//Reset IMU
		IMU_resetStatus_new = imu_reset;
 80028ac:	4b2b      	ldr	r3, [pc, #172]	; (800295c <StartMovementTask+0x8c0>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a2b      	ldr	r2, [pc, #172]	; (8002960 <StartMovementTask+0x8c4>)
 80028b2:	6013      	str	r3, [r2, #0]
		if (IMU_resetStatus_new == 1 && IMU_resetStatus_old == 0) {
 80028b4:	4b2a      	ldr	r3, [pc, #168]	; (8002960 <StartMovementTask+0x8c4>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d119      	bne.n	80028f0 <StartMovementTask+0x854>
 80028bc:	4b29      	ldr	r3, [pc, #164]	; (8002964 <StartMovementTask+0x8c8>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d115      	bne.n	80028f0 <StartMovementTask+0x854>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, RESET);
 80028c4:	2200      	movs	r2, #0
 80028c6:	2104      	movs	r1, #4
 80028c8:	4827      	ldr	r0, [pc, #156]	; (8002968 <StartMovementTask+0x8cc>)
 80028ca:	f002 fc27 	bl	800511c <HAL_GPIO_WritePin>
			IMUStatus = "Resetting..";
 80028ce:	4b27      	ldr	r3, [pc, #156]	; (800296c <StartMovementTask+0x8d0>)
 80028d0:	4a27      	ldr	r2, [pc, #156]	; (8002970 <StartMovementTask+0x8d4>)
 80028d2:	601a      	str	r2, [r3, #0]
			led_status = 1;
 80028d4:	4b27      	ldr	r3, [pc, #156]	; (8002974 <StartMovementTask+0x8d8>)
 80028d6:	2201      	movs	r2, #1
 80028d8:	701a      	strb	r2, [r3, #0]
			osDelay(200);
 80028da:	20c8      	movs	r0, #200	; 0xc8
 80028dc:	f00b f879 	bl	800d9d2 <osDelay>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, SET);
 80028e0:	2201      	movs	r2, #1
 80028e2:	2104      	movs	r1, #4
 80028e4:	4820      	ldr	r0, [pc, #128]	; (8002968 <StartMovementTask+0x8cc>)
 80028e6:	f002 fc19 	bl	800511c <HAL_GPIO_WritePin>
			IMUStatus = "Running..";
 80028ea:	4b20      	ldr	r3, [pc, #128]	; (800296c <StartMovementTask+0x8d0>)
 80028ec:	4a22      	ldr	r2, [pc, #136]	; (8002978 <StartMovementTask+0x8dc>)
 80028ee:	601a      	str	r2, [r3, #0]
		}
		IMU_resetStatus_old = IMU_resetStatus_new;
 80028f0:	4b1b      	ldr	r3, [pc, #108]	; (8002960 <StartMovementTask+0x8c4>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a1b      	ldr	r2, [pc, #108]	; (8002964 <StartMovementTask+0x8c8>)
 80028f6:	6013      	str	r3, [r2, #0]

    osDelay(1);
 80028f8:	2001      	movs	r0, #1
 80028fa:	f00b f86a 	bl	800d9d2 <osDelay>
		if (movement_mode == 0) { // Fully Manual
 80028fe:	f7ff bbd3 	b.w	80020a8 <StartMovementTask+0xc>
 8002902:	bf00      	nop
 8002904:	20000b18 	.word	0x20000b18
 8002908:	20000b34 	.word	0x20000b34
 800290c:	20000b38 	.word	0x20000b38
 8002910:	20000b1c 	.word	0x20000b1c
 8002914:	20000010 	.word	0x20000010
 8002918:	20000014 	.word	0x20000014
 800291c:	20000b20 	.word	0x20000b20
 8002920:	20000018 	.word	0x20000018
 8002924:	20000b24 	.word	0x20000b24
 8002928:	20000b28 	.word	0x20000b28
 800292c:	2000001c 	.word	0x2000001c
 8002930:	20000b2c 	.word	0x20000b2c
 8002934:	20000020 	.word	0x20000020
 8002938:	20000b30 	.word	0x20000b30
 800293c:	20000024 	.word	0x20000024
 8002940:	20000028 	.word	0x20000028
 8002944:	2000002c 	.word	0x2000002c
 8002948:	40000800 	.word	0x40000800
 800294c:	40000c00 	.word	0x40000c00
 8002950:	200009a4 	.word	0x200009a4
 8002954:	20000b4c 	.word	0x20000b4c
 8002958:	40014000 	.word	0x40014000
 800295c:	200009b8 	.word	0x200009b8
 8002960:	20000a38 	.word	0x20000a38
 8002964:	20000a3c 	.word	0x20000a3c
 8002968:	40020800 	.word	0x40020800
 800296c:	20000008 	.word	0x20000008
 8002970:	0800fa9c 	.word	0x0800fa9c
 8002974:	20000b54 	.word	0x20000b54
 8002978:	0800f9bc 	.word	0x0800f9bc
 800297c:	00000000 	.word	0x00000000

08002980 <StartGetPressureTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartGetPressureTask */
void StartGetPressureTask(void const * argument)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b088      	sub	sp, #32
 8002984:	af04      	add	r7, sp, #16
 8002986:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartGetPressureTask */

	// check sensor status
	MS5803_status = MS58xx_reset(&hi2c1, MS5803_address);
 8002988:	4b4f      	ldr	r3, [pc, #316]	; (8002ac8 <StartGetPressureTask+0x148>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	4619      	mov	r1, r3
 800298e:	484f      	ldr	r0, [pc, #316]	; (8002acc <StartGetPressureTask+0x14c>)
 8002990:	f000 fb2d 	bl	8002fee <MS58xx_reset>
 8002994:	4603      	mov	r3, r0
 8002996:	461a      	mov	r2, r3
 8002998:	4b4d      	ldr	r3, [pc, #308]	; (8002ad0 <StartGetPressureTask+0x150>)
 800299a:	701a      	strb	r2, [r3, #0]
	MS5837_status = MS58xx_reset(&hi2c1, MS5837_address);
 800299c:	4b4d      	ldr	r3, [pc, #308]	; (8002ad4 <StartGetPressureTask+0x154>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	4619      	mov	r1, r3
 80029a2:	484a      	ldr	r0, [pc, #296]	; (8002acc <StartGetPressureTask+0x14c>)
 80029a4:	f000 fb23 	bl	8002fee <MS58xx_reset>
 80029a8:	4603      	mov	r3, r0
 80029aa:	461a      	mov	r2, r3
 80029ac:	4b4a      	ldr	r3, [pc, #296]	; (8002ad8 <StartGetPressureTask+0x158>)
 80029ae:	701a      	strb	r2, [r3, #0]

	// Initialize MS5803 sensor if attached
	if (MS5803_status == HAL_OK) {
 80029b0:	4b47      	ldr	r3, [pc, #284]	; (8002ad0 <StartGetPressureTask+0x150>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d115      	bne.n	80029e4 <StartGetPressureTask+0x64>
		for (int i = 0; i < 6; i++) {
 80029b8:	2300      	movs	r3, #0
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	e00f      	b.n	80029de <StartGetPressureTask+0x5e>
			MS58xx_coeff(&hi2c1, &MS5803_coefficient[i], MS5803_address, i + 1);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	4a46      	ldr	r2, [pc, #280]	; (8002adc <StartGetPressureTask+0x15c>)
 80029c4:	1899      	adds	r1, r3, r2
 80029c6:	4b40      	ldr	r3, [pc, #256]	; (8002ac8 <StartGetPressureTask+0x148>)
 80029c8:	781a      	ldrb	r2, [r3, #0]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	b2db      	uxtb	r3, r3
 80029ce:	3301      	adds	r3, #1
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	483e      	ldr	r0, [pc, #248]	; (8002acc <StartGetPressureTask+0x14c>)
 80029d4:	f000 fb2a 	bl	800302c <MS58xx_coeff>
		for (int i = 0; i < 6; i++) {
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	3301      	adds	r3, #1
 80029dc:	60fb      	str	r3, [r7, #12]
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	2b05      	cmp	r3, #5
 80029e2:	ddec      	ble.n	80029be <StartGetPressureTask+0x3e>
		}
	}

	// Initialize MS5837 sensor if attached
	if (MS5837_status == HAL_OK) {
 80029e4:	4b3c      	ldr	r3, [pc, #240]	; (8002ad8 <StartGetPressureTask+0x158>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d115      	bne.n	8002a18 <StartGetPressureTask+0x98>
		for (int i = 0; i < 6; i++) {
 80029ec:	2300      	movs	r3, #0
 80029ee:	60bb      	str	r3, [r7, #8]
 80029f0:	e00f      	b.n	8002a12 <StartGetPressureTask+0x92>
			MS58xx_coeff(&hi2c1, &MS5837_coefficient[i], MS5837_address, i + 1);
 80029f2:	68bb      	ldr	r3, [r7, #8]
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	4a3a      	ldr	r2, [pc, #232]	; (8002ae0 <StartGetPressureTask+0x160>)
 80029f8:	1899      	adds	r1, r3, r2
 80029fa:	4b36      	ldr	r3, [pc, #216]	; (8002ad4 <StartGetPressureTask+0x154>)
 80029fc:	781a      	ldrb	r2, [r3, #0]
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	3301      	adds	r3, #1
 8002a04:	b2db      	uxtb	r3, r3
 8002a06:	4831      	ldr	r0, [pc, #196]	; (8002acc <StartGetPressureTask+0x14c>)
 8002a08:	f000 fb10 	bl	800302c <MS58xx_coeff>
		for (int i = 0; i < 6; i++) {
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	3301      	adds	r3, #1
 8002a10:	60bb      	str	r3, [r7, #8]
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	2b05      	cmp	r3, #5
 8002a16:	ddec      	ble.n	80029f2 <StartGetPressureTask+0x72>
	}

  /* Infinite loop */
  for(;;)
  {
		if (MS5803_status  == HAL_OK ) {
 8002a18:	4b2d      	ldr	r3, [pc, #180]	; (8002ad0 <StartGetPressureTask+0x150>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d10c      	bne.n	8002a3a <StartGetPressureTask+0xba>
			MS58xx_get_values(&hi2c1, ADC_4096, MS5803_coefficient,
 8002a20:	4b29      	ldr	r3, [pc, #164]	; (8002ac8 <StartGetPressureTask+0x148>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	2201      	movs	r2, #1
 8002a26:	9202      	str	r2, [sp, #8]
 8002a28:	9301      	str	r3, [sp, #4]
 8002a2a:	4b2e      	ldr	r3, [pc, #184]	; (8002ae4 <StartGetPressureTask+0x164>)
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	4b2e      	ldr	r3, [pc, #184]	; (8002ae8 <StartGetPressureTask+0x168>)
 8002a30:	4a2a      	ldr	r2, [pc, #168]	; (8002adc <StartGetPressureTask+0x15c>)
 8002a32:	2108      	movs	r1, #8
 8002a34:	4825      	ldr	r0, [pc, #148]	; (8002acc <StartGetPressureTask+0x14c>)
 8002a36:	f000 fb9b 	bl	8003170 <MS58xx_get_values>
					&MS5803_temperature, &MS5803_pressure, MS5803_address, MS5803);
		}

		if (MS5837_status  == HAL_OK ) {
 8002a3a:	4b27      	ldr	r3, [pc, #156]	; (8002ad8 <StartGetPressureTask+0x158>)
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d10c      	bne.n	8002a5c <StartGetPressureTask+0xdc>
			MS58xx_get_values(&hi2c1, ADC_4096, MS5837_coefficient,
 8002a42:	4b24      	ldr	r3, [pc, #144]	; (8002ad4 <StartGetPressureTask+0x154>)
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	2202      	movs	r2, #2
 8002a48:	9202      	str	r2, [sp, #8]
 8002a4a:	9301      	str	r3, [sp, #4]
 8002a4c:	4b27      	ldr	r3, [pc, #156]	; (8002aec <StartGetPressureTask+0x16c>)
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	4b27      	ldr	r3, [pc, #156]	; (8002af0 <StartGetPressureTask+0x170>)
 8002a52:	4a23      	ldr	r2, [pc, #140]	; (8002ae0 <StartGetPressureTask+0x160>)
 8002a54:	2108      	movs	r1, #8
 8002a56:	481d      	ldr	r0, [pc, #116]	; (8002acc <StartGetPressureTask+0x14c>)
 8002a58:	f000 fb8a 	bl	8003170 <MS58xx_get_values>
					&MS5837_temperature, &MS5837_pressure, MS5837_address,MS5837);
		}

		//pressure(Bar)
		pressureInside = MS5803_pressure / 1000;
 8002a5c:	4b21      	ldr	r3, [pc, #132]	; (8002ae4 <StartGetPressureTask+0x164>)
 8002a5e:	ed93 7a00 	vldr	s14, [r3]
 8002a62:	eddf 6a24 	vldr	s13, [pc, #144]	; 8002af4 <StartGetPressureTask+0x174>
 8002a66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a6a:	4b23      	ldr	r3, [pc, #140]	; (8002af8 <StartGetPressureTask+0x178>)
 8002a6c:	edc3 7a00 	vstr	s15, [r3]
		//depth(cm) = pressure(mbar) / (water density(kg/m3) * gravity(m/s2) * 10)
		depthValue = round(MS5837_pressure / (9.81 * 100.0)) / 100.0;;
 8002a70:	4b1e      	ldr	r3, [pc, #120]	; (8002aec <StartGetPressureTask+0x16c>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4618      	mov	r0, r3
 8002a76:	f7fd fd0f 	bl	8000498 <__aeabi_f2d>
 8002a7a:	a311      	add	r3, pc, #68	; (adr r3, 8002ac0 <StartGetPressureTask+0x140>)
 8002a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a80:	f7fd fe8c 	bl	800079c <__aeabi_ddiv>
 8002a84:	4602      	mov	r2, r0
 8002a86:	460b      	mov	r3, r1
 8002a88:	ec43 2b17 	vmov	d7, r2, r3
 8002a8c:	eeb0 0a47 	vmov.f32	s0, s14
 8002a90:	eef0 0a67 	vmov.f32	s1, s15
 8002a94:	f00c ff3e 	bl	800f914 <round>
 8002a98:	ec51 0b10 	vmov	r0, r1, d0
 8002a9c:	f04f 0200 	mov.w	r2, #0
 8002aa0:	4b16      	ldr	r3, [pc, #88]	; (8002afc <StartGetPressureTask+0x17c>)
 8002aa2:	f7fd fe7b 	bl	800079c <__aeabi_ddiv>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	460b      	mov	r3, r1
 8002aaa:	4610      	mov	r0, r2
 8002aac:	4619      	mov	r1, r3
 8002aae:	f7fe f80d 	bl	8000acc <__aeabi_d2f>
 8002ab2:	4603      	mov	r3, r0
 8002ab4:	4a12      	ldr	r2, [pc, #72]	; (8002b00 <StartGetPressureTask+0x180>)
 8002ab6:	6013      	str	r3, [r2, #0]

    osDelay(1);
 8002ab8:	2001      	movs	r0, #1
 8002aba:	f00a ff8a 	bl	800d9d2 <osDelay>
		if (MS5803_status  == HAL_OK ) {
 8002abe:	e7ab      	b.n	8002a18 <StartGetPressureTask+0x98>
 8002ac0:	00000000 	.word	0x00000000
 8002ac4:	408ea800 	.word	0x408ea800
 8002ac8:	2000000c 	.word	0x2000000c
 8002acc:	20000708 	.word	0x20000708
 8002ad0:	20000a40 	.word	0x20000a40
 8002ad4:	2000000d 	.word	0x2000000d
 8002ad8:	20000a41 	.word	0x20000a41
 8002adc:	20000a44 	.word	0x20000a44
 8002ae0:	20000a50 	.word	0x20000a50
 8002ae4:	20000a5c 	.word	0x20000a5c
 8002ae8:	20000a60 	.word	0x20000a60
 8002aec:	20000a64 	.word	0x20000a64
 8002af0:	20000a68 	.word	0x20000a68
 8002af4:	447a0000 	.word	0x447a0000
 8002af8:	20000a6c 	.word	0x20000a6c
 8002afc:	40590000 	.word	0x40590000
 8002b00:	20000a70 	.word	0x20000a70

08002b04 <StartStroboTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartStroboTask */
void StartStroboTask(void const * argument)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartStroboTask */
  /* Infinite loop */
  for(;;)
  {
		if (led_status == 0) {
 8002b0c:	4bd8      	ldr	r3, [pc, #864]	; (8002e70 <StartStroboTask+0x36c>)
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	f040 8175 	bne.w	8002e00 <StartStroboTask+0x2fc>
			if (movement_mode == 0) {
 8002b16:	4bd7      	ldr	r3, [pc, #860]	; (8002e74 <StartStroboTask+0x370>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d158      	bne.n	8002bd0 <StartStroboTask+0xcc>
				Set_LED(0, 0, 0, 45);
 8002b1e:	232d      	movs	r3, #45	; 0x2d
 8002b20:	2200      	movs	r2, #0
 8002b22:	2100      	movs	r1, #0
 8002b24:	2000      	movs	r0, #0
 8002b26:	f7fe f9f1 	bl	8000f0c <Set_LED>
				Set_LED(1, 0, 0, 105);
 8002b2a:	2369      	movs	r3, #105	; 0x69
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	2100      	movs	r1, #0
 8002b30:	2001      	movs	r0, #1
 8002b32:	f7fe f9eb 	bl	8000f0c <Set_LED>
				Set_LED(2, 0, 0, 105);
 8002b36:	2369      	movs	r3, #105	; 0x69
 8002b38:	2200      	movs	r2, #0
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	2002      	movs	r0, #2
 8002b3e:	f7fe f9e5 	bl	8000f0c <Set_LED>
				Set_LED(3, 0, 0, 105);
 8002b42:	2369      	movs	r3, #105	; 0x69
 8002b44:	2200      	movs	r2, #0
 8002b46:	2100      	movs	r1, #0
 8002b48:	2003      	movs	r0, #3
 8002b4a:	f7fe f9df 	bl	8000f0c <Set_LED>
				Set_LED(4, 0, 0, 105);
 8002b4e:	2369      	movs	r3, #105	; 0x69
 8002b50:	2200      	movs	r2, #0
 8002b52:	2100      	movs	r1, #0
 8002b54:	2004      	movs	r0, #4
 8002b56:	f7fe f9d9 	bl	8000f0c <Set_LED>
				Set_LED(5, 0, 0, 105);
 8002b5a:	2369      	movs	r3, #105	; 0x69
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	2100      	movs	r1, #0
 8002b60:	2005      	movs	r0, #5
 8002b62:	f7fe f9d3 	bl	8000f0c <Set_LED>
				WS2812_Send(&htim3, TIM_CHANNEL_2, 105);
 8002b66:	2269      	movs	r2, #105	; 0x69
 8002b68:	2104      	movs	r1, #4
 8002b6a:	48c3      	ldr	r0, [pc, #780]	; (8002e78 <StartStroboTask+0x374>)
 8002b6c:	f7fe f9fc 	bl	8000f68 <WS2812_Send>
				osDelay(150);
 8002b70:	2096      	movs	r0, #150	; 0x96
 8002b72:	f00a ff2e 	bl	800d9d2 <osDelay>
				Set_LED(0, 0, 0, 0);
 8002b76:	2300      	movs	r3, #0
 8002b78:	2200      	movs	r2, #0
 8002b7a:	2100      	movs	r1, #0
 8002b7c:	2000      	movs	r0, #0
 8002b7e:	f7fe f9c5 	bl	8000f0c <Set_LED>
				Set_LED(1, 0, 0, 0);
 8002b82:	2300      	movs	r3, #0
 8002b84:	2200      	movs	r2, #0
 8002b86:	2100      	movs	r1, #0
 8002b88:	2001      	movs	r0, #1
 8002b8a:	f7fe f9bf 	bl	8000f0c <Set_LED>
				Set_LED(2, 0, 0, 0);
 8002b8e:	2300      	movs	r3, #0
 8002b90:	2200      	movs	r2, #0
 8002b92:	2100      	movs	r1, #0
 8002b94:	2002      	movs	r0, #2
 8002b96:	f7fe f9b9 	bl	8000f0c <Set_LED>
				Set_LED(3, 0, 0, 0);
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	2003      	movs	r0, #3
 8002ba2:	f7fe f9b3 	bl	8000f0c <Set_LED>
				Set_LED(4, 0, 0, 0);
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	2200      	movs	r2, #0
 8002baa:	2100      	movs	r1, #0
 8002bac:	2004      	movs	r0, #4
 8002bae:	f7fe f9ad 	bl	8000f0c <Set_LED>
				Set_LED(5, 0, 0, 0);
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	2100      	movs	r1, #0
 8002bb8:	2005      	movs	r0, #5
 8002bba:	f7fe f9a7 	bl	8000f0c <Set_LED>
				WS2812_Send(&htim3, TIM_CHANNEL_2, 105);
 8002bbe:	2269      	movs	r2, #105	; 0x69
 8002bc0:	2104      	movs	r1, #4
 8002bc2:	48ad      	ldr	r0, [pc, #692]	; (8002e78 <StartStroboTask+0x374>)
 8002bc4:	f7fe f9d0 	bl	8000f68 <WS2812_Send>
				osDelay(150);
 8002bc8:	2096      	movs	r0, #150	; 0x96
 8002bca:	f00a ff02 	bl	800d9d2 <osDelay>
 8002bce:	e14b      	b.n	8002e68 <StartStroboTask+0x364>
			} else if (movement_mode == 1) {
 8002bd0:	4ba8      	ldr	r3, [pc, #672]	; (8002e74 <StartStroboTask+0x370>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d158      	bne.n	8002c8a <StartStroboTask+0x186>
				Set_LED(0, 30, 0, 30);
 8002bd8:	231e      	movs	r3, #30
 8002bda:	2200      	movs	r2, #0
 8002bdc:	211e      	movs	r1, #30
 8002bde:	2000      	movs	r0, #0
 8002be0:	f7fe f994 	bl	8000f0c <Set_LED>
				Set_LED(1, 255, 0, 255);
 8002be4:	23ff      	movs	r3, #255	; 0xff
 8002be6:	2200      	movs	r2, #0
 8002be8:	21ff      	movs	r1, #255	; 0xff
 8002bea:	2001      	movs	r0, #1
 8002bec:	f7fe f98e 	bl	8000f0c <Set_LED>
				Set_LED(2, 255, 0, 255);
 8002bf0:	23ff      	movs	r3, #255	; 0xff
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	21ff      	movs	r1, #255	; 0xff
 8002bf6:	2002      	movs	r0, #2
 8002bf8:	f7fe f988 	bl	8000f0c <Set_LED>
				Set_LED(3, 255, 0, 255);
 8002bfc:	23ff      	movs	r3, #255	; 0xff
 8002bfe:	2200      	movs	r2, #0
 8002c00:	21ff      	movs	r1, #255	; 0xff
 8002c02:	2003      	movs	r0, #3
 8002c04:	f7fe f982 	bl	8000f0c <Set_LED>
				Set_LED(4, 255, 0, 255);
 8002c08:	23ff      	movs	r3, #255	; 0xff
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	21ff      	movs	r1, #255	; 0xff
 8002c0e:	2004      	movs	r0, #4
 8002c10:	f7fe f97c 	bl	8000f0c <Set_LED>
				Set_LED(5, 255, 0, 255);
 8002c14:	23ff      	movs	r3, #255	; 0xff
 8002c16:	2200      	movs	r2, #0
 8002c18:	21ff      	movs	r1, #255	; 0xff
 8002c1a:	2005      	movs	r0, #5
 8002c1c:	f7fe f976 	bl	8000f0c <Set_LED>
				WS2812_Send(&htim3, TIM_CHANNEL_2, 105);
 8002c20:	2269      	movs	r2, #105	; 0x69
 8002c22:	2104      	movs	r1, #4
 8002c24:	4894      	ldr	r0, [pc, #592]	; (8002e78 <StartStroboTask+0x374>)
 8002c26:	f7fe f99f 	bl	8000f68 <WS2812_Send>
				osDelay(150);
 8002c2a:	2096      	movs	r0, #150	; 0x96
 8002c2c:	f00a fed1 	bl	800d9d2 <osDelay>
				Set_LED(0, 0, 0, 0);
 8002c30:	2300      	movs	r3, #0
 8002c32:	2200      	movs	r2, #0
 8002c34:	2100      	movs	r1, #0
 8002c36:	2000      	movs	r0, #0
 8002c38:	f7fe f968 	bl	8000f0c <Set_LED>
				Set_LED(1, 0, 0, 0);
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	2200      	movs	r2, #0
 8002c40:	2100      	movs	r1, #0
 8002c42:	2001      	movs	r0, #1
 8002c44:	f7fe f962 	bl	8000f0c <Set_LED>
				Set_LED(2, 0, 0, 0);
 8002c48:	2300      	movs	r3, #0
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	2002      	movs	r0, #2
 8002c50:	f7fe f95c 	bl	8000f0c <Set_LED>
				Set_LED(3, 0, 0, 0);
 8002c54:	2300      	movs	r3, #0
 8002c56:	2200      	movs	r2, #0
 8002c58:	2100      	movs	r1, #0
 8002c5a:	2003      	movs	r0, #3
 8002c5c:	f7fe f956 	bl	8000f0c <Set_LED>
				Set_LED(4, 0, 0, 0);
 8002c60:	2300      	movs	r3, #0
 8002c62:	2200      	movs	r2, #0
 8002c64:	2100      	movs	r1, #0
 8002c66:	2004      	movs	r0, #4
 8002c68:	f7fe f950 	bl	8000f0c <Set_LED>
				Set_LED(5, 0, 0, 0);
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	2200      	movs	r2, #0
 8002c70:	2100      	movs	r1, #0
 8002c72:	2005      	movs	r0, #5
 8002c74:	f7fe f94a 	bl	8000f0c <Set_LED>
				WS2812_Send(&htim3, TIM_CHANNEL_2, 105);
 8002c78:	2269      	movs	r2, #105	; 0x69
 8002c7a:	2104      	movs	r1, #4
 8002c7c:	487e      	ldr	r0, [pc, #504]	; (8002e78 <StartStroboTask+0x374>)
 8002c7e:	f7fe f973 	bl	8000f68 <WS2812_Send>
				osDelay(150);
 8002c82:	2096      	movs	r0, #150	; 0x96
 8002c84:	f00a fea5 	bl	800d9d2 <osDelay>
 8002c88:	e0ee      	b.n	8002e68 <StartStroboTask+0x364>
			} else if (movement_mode == 2) {
 8002c8a:	4b7a      	ldr	r3, [pc, #488]	; (8002e74 <StartStroboTask+0x370>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d158      	bne.n	8002d44 <StartStroboTask+0x240>
				Set_LED(0, 30, 30, 0);
 8002c92:	2300      	movs	r3, #0
 8002c94:	221e      	movs	r2, #30
 8002c96:	211e      	movs	r1, #30
 8002c98:	2000      	movs	r0, #0
 8002c9a:	f7fe f937 	bl	8000f0c <Set_LED>
				Set_LED(1, 255, 255, 0);
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	22ff      	movs	r2, #255	; 0xff
 8002ca2:	21ff      	movs	r1, #255	; 0xff
 8002ca4:	2001      	movs	r0, #1
 8002ca6:	f7fe f931 	bl	8000f0c <Set_LED>
				Set_LED(2, 255, 255, 0);
 8002caa:	2300      	movs	r3, #0
 8002cac:	22ff      	movs	r2, #255	; 0xff
 8002cae:	21ff      	movs	r1, #255	; 0xff
 8002cb0:	2002      	movs	r0, #2
 8002cb2:	f7fe f92b 	bl	8000f0c <Set_LED>
				Set_LED(3, 255, 255, 0);
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	22ff      	movs	r2, #255	; 0xff
 8002cba:	21ff      	movs	r1, #255	; 0xff
 8002cbc:	2003      	movs	r0, #3
 8002cbe:	f7fe f925 	bl	8000f0c <Set_LED>
				Set_LED(4, 255, 255, 0);
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	22ff      	movs	r2, #255	; 0xff
 8002cc6:	21ff      	movs	r1, #255	; 0xff
 8002cc8:	2004      	movs	r0, #4
 8002cca:	f7fe f91f 	bl	8000f0c <Set_LED>
				Set_LED(5, 255, 255, 0);
 8002cce:	2300      	movs	r3, #0
 8002cd0:	22ff      	movs	r2, #255	; 0xff
 8002cd2:	21ff      	movs	r1, #255	; 0xff
 8002cd4:	2005      	movs	r0, #5
 8002cd6:	f7fe f919 	bl	8000f0c <Set_LED>
				WS2812_Send(&htim3, TIM_CHANNEL_2, 105);
 8002cda:	2269      	movs	r2, #105	; 0x69
 8002cdc:	2104      	movs	r1, #4
 8002cde:	4866      	ldr	r0, [pc, #408]	; (8002e78 <StartStroboTask+0x374>)
 8002ce0:	f7fe f942 	bl	8000f68 <WS2812_Send>
				osDelay(150);
 8002ce4:	2096      	movs	r0, #150	; 0x96
 8002ce6:	f00a fe74 	bl	800d9d2 <osDelay>
				Set_LED(0, 0, 0, 0);
 8002cea:	2300      	movs	r3, #0
 8002cec:	2200      	movs	r2, #0
 8002cee:	2100      	movs	r1, #0
 8002cf0:	2000      	movs	r0, #0
 8002cf2:	f7fe f90b 	bl	8000f0c <Set_LED>
				Set_LED(1, 0, 0, 0);
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	2001      	movs	r0, #1
 8002cfe:	f7fe f905 	bl	8000f0c <Set_LED>
				Set_LED(2, 0, 0, 0);
 8002d02:	2300      	movs	r3, #0
 8002d04:	2200      	movs	r2, #0
 8002d06:	2100      	movs	r1, #0
 8002d08:	2002      	movs	r0, #2
 8002d0a:	f7fe f8ff 	bl	8000f0c <Set_LED>
				Set_LED(3, 0, 0, 0);
 8002d0e:	2300      	movs	r3, #0
 8002d10:	2200      	movs	r2, #0
 8002d12:	2100      	movs	r1, #0
 8002d14:	2003      	movs	r0, #3
 8002d16:	f7fe f8f9 	bl	8000f0c <Set_LED>
				Set_LED(4, 0, 0, 0);
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	2100      	movs	r1, #0
 8002d20:	2004      	movs	r0, #4
 8002d22:	f7fe f8f3 	bl	8000f0c <Set_LED>
				Set_LED(5, 0, 0, 0);
 8002d26:	2300      	movs	r3, #0
 8002d28:	2200      	movs	r2, #0
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	2005      	movs	r0, #5
 8002d2e:	f7fe f8ed 	bl	8000f0c <Set_LED>
				WS2812_Send(&htim3, TIM_CHANNEL_2, 105);
 8002d32:	2269      	movs	r2, #105	; 0x69
 8002d34:	2104      	movs	r1, #4
 8002d36:	4850      	ldr	r0, [pc, #320]	; (8002e78 <StartStroboTask+0x374>)
 8002d38:	f7fe f916 	bl	8000f68 <WS2812_Send>
				osDelay(150);
 8002d3c:	2096      	movs	r0, #150	; 0x96
 8002d3e:	f00a fe48 	bl	800d9d2 <osDelay>
 8002d42:	e091      	b.n	8002e68 <StartStroboTask+0x364>
			} else if (movement_mode == 3) {
 8002d44:	4b4b      	ldr	r3, [pc, #300]	; (8002e74 <StartStroboTask+0x370>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2b03      	cmp	r3, #3
 8002d4a:	f040 808d 	bne.w	8002e68 <StartStroboTask+0x364>
				Set_LED(0, 45, 0, 0);
 8002d4e:	2300      	movs	r3, #0
 8002d50:	2200      	movs	r2, #0
 8002d52:	212d      	movs	r1, #45	; 0x2d
 8002d54:	2000      	movs	r0, #0
 8002d56:	f7fe f8d9 	bl	8000f0c <Set_LED>
				Set_LED(1, 255, 0, 0);
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	21ff      	movs	r1, #255	; 0xff
 8002d60:	2001      	movs	r0, #1
 8002d62:	f7fe f8d3 	bl	8000f0c <Set_LED>
				Set_LED(2, 255, 0, 0);
 8002d66:	2300      	movs	r3, #0
 8002d68:	2200      	movs	r2, #0
 8002d6a:	21ff      	movs	r1, #255	; 0xff
 8002d6c:	2002      	movs	r0, #2
 8002d6e:	f7fe f8cd 	bl	8000f0c <Set_LED>
				Set_LED(3, 255, 0, 0);
 8002d72:	2300      	movs	r3, #0
 8002d74:	2200      	movs	r2, #0
 8002d76:	21ff      	movs	r1, #255	; 0xff
 8002d78:	2003      	movs	r0, #3
 8002d7a:	f7fe f8c7 	bl	8000f0c <Set_LED>
				Set_LED(4, 255, 0, 0);
 8002d7e:	2300      	movs	r3, #0
 8002d80:	2200      	movs	r2, #0
 8002d82:	21ff      	movs	r1, #255	; 0xff
 8002d84:	2004      	movs	r0, #4
 8002d86:	f7fe f8c1 	bl	8000f0c <Set_LED>
				Set_LED(5, 255, 0, 0);
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	21ff      	movs	r1, #255	; 0xff
 8002d90:	2005      	movs	r0, #5
 8002d92:	f7fe f8bb 	bl	8000f0c <Set_LED>
				WS2812_Send(&htim3, TIM_CHANNEL_2, 105);
 8002d96:	2269      	movs	r2, #105	; 0x69
 8002d98:	2104      	movs	r1, #4
 8002d9a:	4837      	ldr	r0, [pc, #220]	; (8002e78 <StartStroboTask+0x374>)
 8002d9c:	f7fe f8e4 	bl	8000f68 <WS2812_Send>
				osDelay(150);
 8002da0:	2096      	movs	r0, #150	; 0x96
 8002da2:	f00a fe16 	bl	800d9d2 <osDelay>
				Set_LED(0, 0, 0, 0);
 8002da6:	2300      	movs	r3, #0
 8002da8:	2200      	movs	r2, #0
 8002daa:	2100      	movs	r1, #0
 8002dac:	2000      	movs	r0, #0
 8002dae:	f7fe f8ad 	bl	8000f0c <Set_LED>
				Set_LED(1, 0, 0, 0);
 8002db2:	2300      	movs	r3, #0
 8002db4:	2200      	movs	r2, #0
 8002db6:	2100      	movs	r1, #0
 8002db8:	2001      	movs	r0, #1
 8002dba:	f7fe f8a7 	bl	8000f0c <Set_LED>
				Set_LED(2, 0, 0, 0);
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	2002      	movs	r0, #2
 8002dc6:	f7fe f8a1 	bl	8000f0c <Set_LED>
				Set_LED(3, 0, 0, 0);
 8002dca:	2300      	movs	r3, #0
 8002dcc:	2200      	movs	r2, #0
 8002dce:	2100      	movs	r1, #0
 8002dd0:	2003      	movs	r0, #3
 8002dd2:	f7fe f89b 	bl	8000f0c <Set_LED>
				Set_LED(4, 0, 0, 0);
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	2200      	movs	r2, #0
 8002dda:	2100      	movs	r1, #0
 8002ddc:	2004      	movs	r0, #4
 8002dde:	f7fe f895 	bl	8000f0c <Set_LED>
				Set_LED(5, 0, 0, 0);
 8002de2:	2300      	movs	r3, #0
 8002de4:	2200      	movs	r2, #0
 8002de6:	2100      	movs	r1, #0
 8002de8:	2005      	movs	r0, #5
 8002dea:	f7fe f88f 	bl	8000f0c <Set_LED>
				WS2812_Send(&htim3, TIM_CHANNEL_2, 105);
 8002dee:	2269      	movs	r2, #105	; 0x69
 8002df0:	2104      	movs	r1, #4
 8002df2:	4821      	ldr	r0, [pc, #132]	; (8002e78 <StartStroboTask+0x374>)
 8002df4:	f7fe f8b8 	bl	8000f68 <WS2812_Send>
				osDelay(150);
 8002df8:	2096      	movs	r0, #150	; 0x96
 8002dfa:	f00a fdea 	bl	800d9d2 <osDelay>
 8002dfe:	e033      	b.n	8002e68 <StartStroboTask+0x364>
			}
		}

		else {
			// Loop through each LED and light it up progressively
			    for (int i = 0; i < 11; i++) {
 8002e00:	2300      	movs	r3, #0
 8002e02:	617b      	str	r3, [r7, #20]
 8002e04:	e02a      	b.n	8002e5c <StartStroboTask+0x358>
			        // Clear all LEDs
			        for (int j = 0; j < 11; j++) {
 8002e06:	2300      	movs	r3, #0
 8002e08:	613b      	str	r3, [r7, #16]
 8002e0a:	e008      	b.n	8002e1e <StartStroboTask+0x31a>
			            Set_LED(j, 0, 0, 0); // Turn off LED
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	2200      	movs	r2, #0
 8002e10:	2100      	movs	r1, #0
 8002e12:	6938      	ldr	r0, [r7, #16]
 8002e14:	f7fe f87a 	bl	8000f0c <Set_LED>
			        for (int j = 0; j < 11; j++) {
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	613b      	str	r3, [r7, #16]
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	2b0a      	cmp	r3, #10
 8002e22:	ddf3      	ble.n	8002e0c <StartStroboTask+0x308>
			        }
			        // Light up LEDs from index 0 to i
			        for (int j = 0; j <= i; j++) {
 8002e24:	2300      	movs	r3, #0
 8002e26:	60fb      	str	r3, [r7, #12]
 8002e28:	e008      	b.n	8002e3c <StartStroboTask+0x338>
			            Set_LED(j, 255, 0, 0); // Set LED color to red
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	21ff      	movs	r1, #255	; 0xff
 8002e30:	68f8      	ldr	r0, [r7, #12]
 8002e32:	f7fe f86b 	bl	8000f0c <Set_LED>
			        for (int j = 0; j <= i; j++) {
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	3301      	adds	r3, #1
 8002e3a:	60fb      	str	r3, [r7, #12]
 8002e3c:	68fa      	ldr	r2, [r7, #12]
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	ddf2      	ble.n	8002e2a <StartStroboTask+0x326>
			        }
			        // Send data to LEDs
			        WS2812_Send(&htim3, TIM_CHANNEL_2, 105); // Assuming you're sending 105 bits of data
 8002e44:	2269      	movs	r2, #105	; 0x69
 8002e46:	2104      	movs	r1, #4
 8002e48:	480b      	ldr	r0, [pc, #44]	; (8002e78 <StartStroboTask+0x374>)
 8002e4a:	f7fe f88d 	bl	8000f68 <WS2812_Send>
			        osDelay(350); // Delay for 500 ms (adjust as needed for desired speed)
 8002e4e:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8002e52:	f00a fdbe 	bl	800d9d2 <osDelay>
			    for (int i = 0; i < 11; i++) {
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	3301      	adds	r3, #1
 8002e5a:	617b      	str	r3, [r7, #20]
 8002e5c:	697b      	ldr	r3, [r7, #20]
 8002e5e:	2b0a      	cmp	r3, #10
 8002e60:	ddd1      	ble.n	8002e06 <StartStroboTask+0x302>
			    }
			led_status = 0;
 8002e62:	4b03      	ldr	r3, [pc, #12]	; (8002e70 <StartStroboTask+0x36c>)
 8002e64:	2200      	movs	r2, #0
 8002e66:	701a      	strb	r2, [r3, #0]
		}

    osDelay(1);
 8002e68:	2001      	movs	r0, #1
 8002e6a:	f00a fdb2 	bl	800d9d2 <osDelay>
		if (led_status == 0) {
 8002e6e:	e64d      	b.n	8002b0c <StartStroboTask+0x8>
 8002e70:	20000b54 	.word	0x20000b54
 8002e74:	200009a8 	.word	0x200009a8
 8002e78:	2000075c 	.word	0x2000075c

08002e7c <StartOtherTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOtherTask */
void StartOtherTask(void const * argument)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b082      	sub	sp, #8
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOtherTask */
  /* Infinite loop */
  for(;;)
  {
		//Switch Actuator Power
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, arm_hw);
 8002e84:	4b24      	ldr	r3, [pc, #144]	; (8002f18 <StartOtherTask+0x9c>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	2140      	movs	r1, #64	; 0x40
 8002e8e:	4823      	ldr	r0, [pc, #140]	; (8002f1c <StartOtherTask+0xa0>)
 8002e90:	f002 f944 	bl	800511c <HAL_GPIO_WritePin>

		//Leaks Sensor
		leaks = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_5);
 8002e94:	2120      	movs	r1, #32
 8002e96:	4822      	ldr	r0, [pc, #136]	; (8002f20 <StartOtherTask+0xa4>)
 8002e98:	f002 f928 	bl	80050ec <HAL_GPIO_ReadPin>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	461a      	mov	r2, r3
 8002ea0:	4b20      	ldr	r3, [pc, #128]	; (8002f24 <StartOtherTask+0xa8>)
 8002ea2:	601a      	str	r2, [r3, #0]

		//Volt Meter Battery
		batt1_volt = convertADCtoVoltage(adc1_value[0], batt1adc_min, batt1adc_max, batt1_min, batt1_max);
 8002ea4:	4b20      	ldr	r3, [pc, #128]	; (8002f28 <StartOtherTask+0xac>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	b29b      	uxth	r3, r3
 8002eaa:	4a20      	ldr	r2, [pc, #128]	; (8002f2c <StartOtherTask+0xb0>)
 8002eac:	6812      	ldr	r2, [r2, #0]
 8002eae:	b291      	uxth	r1, r2
 8002eb0:	4a1f      	ldr	r2, [pc, #124]	; (8002f30 <StartOtherTask+0xb4>)
 8002eb2:	6812      	ldr	r2, [r2, #0]
 8002eb4:	b292      	uxth	r2, r2
 8002eb6:	481f      	ldr	r0, [pc, #124]	; (8002f34 <StartOtherTask+0xb8>)
 8002eb8:	edd0 7a00 	vldr	s15, [r0]
 8002ebc:	481e      	ldr	r0, [pc, #120]	; (8002f38 <StartOtherTask+0xbc>)
 8002ebe:	ed90 7a00 	vldr	s14, [r0]
 8002ec2:	eef0 0a47 	vmov.f32	s1, s14
 8002ec6:	eeb0 0a67 	vmov.f32	s0, s15
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7fe fa14 	bl	80012f8 <convertADCtoVoltage>
 8002ed0:	eef0 7a40 	vmov.f32	s15, s0
 8002ed4:	4b19      	ldr	r3, [pc, #100]	; (8002f3c <StartOtherTask+0xc0>)
 8002ed6:	edc3 7a00 	vstr	s15, [r3]
		batt2_volt = convertADCtoVoltage(adc1_value[1], batt2adc_min, batt2adc_max, batt2_min, batt2_max);
 8002eda:	4b13      	ldr	r3, [pc, #76]	; (8002f28 <StartOtherTask+0xac>)
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	b29b      	uxth	r3, r3
 8002ee0:	4a17      	ldr	r2, [pc, #92]	; (8002f40 <StartOtherTask+0xc4>)
 8002ee2:	6812      	ldr	r2, [r2, #0]
 8002ee4:	b291      	uxth	r1, r2
 8002ee6:	4a17      	ldr	r2, [pc, #92]	; (8002f44 <StartOtherTask+0xc8>)
 8002ee8:	6812      	ldr	r2, [r2, #0]
 8002eea:	b292      	uxth	r2, r2
 8002eec:	4816      	ldr	r0, [pc, #88]	; (8002f48 <StartOtherTask+0xcc>)
 8002eee:	edd0 7a00 	vldr	s15, [r0]
 8002ef2:	4816      	ldr	r0, [pc, #88]	; (8002f4c <StartOtherTask+0xd0>)
 8002ef4:	ed90 7a00 	vldr	s14, [r0]
 8002ef8:	eef0 0a47 	vmov.f32	s1, s14
 8002efc:	eeb0 0a67 	vmov.f32	s0, s15
 8002f00:	4618      	mov	r0, r3
 8002f02:	f7fe f9f9 	bl	80012f8 <convertADCtoVoltage>
 8002f06:	eef0 7a40 	vmov.f32	s15, s0
 8002f0a:	4b11      	ldr	r3, [pc, #68]	; (8002f50 <StartOtherTask+0xd4>)
 8002f0c:	edc3 7a00 	vstr	s15, [r3]
		//IMU Calibration
//		if(IMUStatus == "Resetting.."){
//
//		}

    osDelay(1);
 8002f10:	2001      	movs	r0, #1
 8002f12:	f00a fd5e 	bl	800d9d2 <osDelay>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, arm_hw);
 8002f16:	e7b5      	b.n	8002e84 <StartOtherTask+0x8>
 8002f18:	200009b0 	.word	0x200009b0
 8002f1c:	40020000 	.word	0x40020000
 8002f20:	40020800 	.word	0x40020800
 8002f24:	20000b58 	.word	0x20000b58
 8002f28:	20000b3c 	.word	0x20000b3c
 8002f2c:	20000030 	.word	0x20000030
 8002f30:	20000034 	.word	0x20000034
 8002f34:	20000040 	.word	0x20000040
 8002f38:	20000044 	.word	0x20000044
 8002f3c:	20000b44 	.word	0x20000b44
 8002f40:	20000038 	.word	0x20000038
 8002f44:	2000003c 	.word	0x2000003c
 8002f48:	20000048 	.word	0x20000048
 8002f4c:	2000004c 	.word	0x2000004c
 8002f50:	20000b48 	.word	0x20000b48

08002f54 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a04      	ldr	r2, [pc, #16]	; (8002f74 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d101      	bne.n	8002f6a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002f66:	f000 fdeb 	bl	8003b40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002f6a:	bf00      	nop
 8002f6c:	3708      	adds	r7, #8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	40002000 	.word	0x40002000

08002f78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f7c:	b672      	cpsid	i
}
 8002f7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002f80:	e7fe      	b.n	8002f80 <Error_Handler+0x8>

08002f82 <MS58xx_read>:
 * @param handle The I2C handle being used
 * @param bufp The buffer to be read into
 * @param len The length of the buffer in 8-bit increments
 * @retval HAL Status
 */
HAL_StatusTypeDef MS58xx_read(void *handle, uint8_t *bufp, uint16_t len, uint8_t address) {
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b086      	sub	sp, #24
 8002f86:	af02      	add	r7, sp, #8
 8002f88:	60f8      	str	r0, [r7, #12]
 8002f8a:	60b9      	str	r1, [r7, #8]
 8002f8c:	4611      	mov	r1, r2
 8002f8e:	461a      	mov	r2, r3
 8002f90:	460b      	mov	r3, r1
 8002f92:	80fb      	strh	r3, [r7, #6]
 8002f94:	4613      	mov	r3, r2
 8002f96:	717b      	strb	r3, [r7, #5]
    return HAL_I2C_Master_Receive(handle, MS58xx_I2C_ADDRESS(address), bufp, len, 100);
 8002f98:	797b      	ldrb	r3, [r7, #5]
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	b299      	uxth	r1, r3
 8002fa0:	88fb      	ldrh	r3, [r7, #6]
 8002fa2:	2264      	movs	r2, #100	; 0x64
 8002fa4:	9200      	str	r2, [sp, #0]
 8002fa6:	68ba      	ldr	r2, [r7, #8]
 8002fa8:	68f8      	ldr	r0, [r7, #12]
 8002faa:	f002 fb13 	bl	80055d4 <HAL_I2C_Master_Receive>
 8002fae:	4603      	mov	r3, r0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3710      	adds	r7, #16
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <MS58xx_write>:
 * @param handle The I2C handle being used
 * @param bufp The buffer to read from
 * @param len The length of the buffer in 8-bit increments
 * @retval HAL Status
 */
HAL_StatusTypeDef MS58xx_write(void *handle, uint8_t *bufp, uint16_t len, uint8_t address) {
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af02      	add	r7, sp, #8
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	4611      	mov	r1, r2
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	80fb      	strh	r3, [r7, #6]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	717b      	strb	r3, [r7, #5]
    return HAL_I2C_Master_Transmit(handle, MS58xx_I2C_ADDRESS(address), bufp, len, 100);
 8002fce:	797b      	ldrb	r3, [r7, #5]
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	b299      	uxth	r1, r3
 8002fd6:	88fb      	ldrh	r3, [r7, #6]
 8002fd8:	2264      	movs	r2, #100	; 0x64
 8002fda:	9200      	str	r2, [sp, #0]
 8002fdc:	68ba      	ldr	r2, [r7, #8]
 8002fde:	68f8      	ldr	r0, [r7, #12]
 8002fe0:	f002 f9fa 	bl	80053d8 <HAL_I2C_Master_Transmit>
 8002fe4:	4603      	mov	r3, r0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3710      	adds	r7, #16
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <MS58xx_reset>:
 * @brief Resets the MS58xx
 * @param handle The I2C Handle being used
 * @retval HAL Status
 */

HAL_StatusTypeDef MS58xx_reset(void *handle, uint8_t address) {
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b088      	sub	sp, #32
 8002ff2:	af02      	add	r7, sp, #8
 8002ff4:	6078      	str	r0, [r7, #4]
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	70fb      	strb	r3, [r7, #3]
    uint8_t buf[12];
    buf[0] = MS58xx_RESET;
 8002ffa:	231e      	movs	r3, #30
 8002ffc:	723b      	strb	r3, [r7, #8]
    HAL_StatusTypeDef ret = HAL_I2C_Master_Transmit(handle, MS58xx_I2C_ADDRESS(address), buf, 1, 1000);
 8002ffe:	78fb      	ldrb	r3, [r7, #3]
 8003000:	b29b      	uxth	r3, r3
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	b299      	uxth	r1, r3
 8003006:	f107 0208 	add.w	r2, r7, #8
 800300a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800300e:	9300      	str	r3, [sp, #0]
 8003010:	2301      	movs	r3, #1
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f002 f9e0 	bl	80053d8 <HAL_I2C_Master_Transmit>
 8003018:	4603      	mov	r3, r0
 800301a:	75fb      	strb	r3, [r7, #23]
    osDelay(3);
 800301c:	2003      	movs	r0, #3
 800301e:	f00a fcd8 	bl	800d9d2 <osDelay>
    return ret;
 8003022:	7dfb      	ldrb	r3, [r7, #23]
}
 8003024:	4618      	mov	r0, r3
 8003026:	3718      	adds	r7, #24
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <MS58xx_coeff>:
 * @param coeff The pointer to the coefficient being read in to
 * @param value The coefficient number
 * @return HAL Status
 */

HAL_StatusTypeDef MS58xx_coeff(void *handle, uint16_t *coeff, uint8_t address, uint8_t value) {
 800302c:	b580      	push	{r7, lr}
 800302e:	b08a      	sub	sp, #40	; 0x28
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	4611      	mov	r1, r2
 8003038:	461a      	mov	r2, r3
 800303a:	460b      	mov	r3, r1
 800303c:	71fb      	strb	r3, [r7, #7]
 800303e:	4613      	mov	r3, r2
 8003040:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[12];
    buf[0] = MS58xx_PROM + (value << 1);
 8003042:	79bb      	ldrb	r3, [r7, #6]
 8003044:	005b      	lsls	r3, r3, #1
 8003046:	b2db      	uxtb	r3, r3
 8003048:	3b60      	subs	r3, #96	; 0x60
 800304a:	b2db      	uxtb	r3, r3
 800304c:	763b      	strb	r3, [r7, #24]
    HAL_StatusTypeDef x = MS58xx_write(handle, buf, 1, address);
 800304e:	79fb      	ldrb	r3, [r7, #7]
 8003050:	f107 0118 	add.w	r1, r7, #24
 8003054:	2201      	movs	r2, #1
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f7ff ffae 	bl	8002fb8 <MS58xx_write>
 800305c:	4603      	mov	r3, r0
 800305e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    osDelay(2);
 8003062:	2002      	movs	r0, #2
 8003064:	f00a fcb5 	bl	800d9d2 <osDelay>
    uint8_t c[2];
    x = MS58xx_read(handle, c, 2, address);
 8003068:	79fb      	ldrb	r3, [r7, #7]
 800306a:	f107 0114 	add.w	r1, r7, #20
 800306e:	2202      	movs	r2, #2
 8003070:	68f8      	ldr	r0, [r7, #12]
 8003072:	f7ff ff86 	bl	8002f82 <MS58xx_read>
 8003076:	4603      	mov	r3, r0
 8003078:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    *coeff = (c[0] << 8) + c[1];
 800307c:	7d3b      	ldrb	r3, [r7, #20]
 800307e:	b29b      	uxth	r3, r3
 8003080:	021b      	lsls	r3, r3, #8
 8003082:	b29a      	uxth	r2, r3
 8003084:	7d7b      	ldrb	r3, [r7, #21]
 8003086:	b29b      	uxth	r3, r3
 8003088:	4413      	add	r3, r2
 800308a:	b29a      	uxth	r2, r3
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	801a      	strh	r2, [r3, #0]
    return x;
 8003090:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003094:	4618      	mov	r0, r3
 8003096:	3728      	adds	r7, #40	; 0x28
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <MS58xx_ADC>:
 * @param handle The I2C Handle being used
 * @param type The measurement type, chosen from measurement enum
 * @param prec The precision to use, chosen from precision enum
 * @retval Raw 24-bit data from the ADC
 */
uint32_t MS58xx_ADC(void *handle, measurement type, precision prec, uint8_t address) {
 800309c:	b580      	push	{r7, lr}
 800309e:	b088      	sub	sp, #32
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	4608      	mov	r0, r1
 80030a6:	4611      	mov	r1, r2
 80030a8:	461a      	mov	r2, r3
 80030aa:	4603      	mov	r3, r0
 80030ac:	70fb      	strb	r3, [r7, #3]
 80030ae:	460b      	mov	r3, r1
 80030b0:	70bb      	strb	r3, [r7, #2]
 80030b2:	4613      	mov	r3, r2
 80030b4:	707b      	strb	r3, [r7, #1]
    uint32_t result;
    uint8_t buf[12];
    buf[0] = MS58xx_ADC_CONV + type + prec; // Tell the ADC to convert along with the precision and type
 80030b6:	78fa      	ldrb	r2, [r7, #3]
 80030b8:	78bb      	ldrb	r3, [r7, #2]
 80030ba:	4413      	add	r3, r2
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	3340      	adds	r3, #64	; 0x40
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	743b      	strb	r3, [r7, #16]
    MS58xx_write(handle, buf, 1, address);
 80030c4:	787b      	ldrb	r3, [r7, #1]
 80030c6:	f107 0110 	add.w	r1, r7, #16
 80030ca:	2201      	movs	r2, #1
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	f7ff ff73 	bl	8002fb8 <MS58xx_write>
    osDelay(2);
 80030d2:	2002      	movs	r0, #2
 80030d4:	f00a fc7d 	bl	800d9d2 <osDelay>

    switch (prec) {
 80030d8:	78bb      	ldrb	r3, [r7, #2]
 80030da:	2b08      	cmp	r3, #8
 80030dc:	d828      	bhi.n	8003130 <MS58xx_ADC+0x94>
 80030de:	a201      	add	r2, pc, #4	; (adr r2, 80030e4 <MS58xx_ADC+0x48>)
 80030e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030e4:	08003109 	.word	0x08003109
 80030e8:	08003131 	.word	0x08003131
 80030ec:	08003111 	.word	0x08003111
 80030f0:	08003131 	.word	0x08003131
 80030f4:	08003119 	.word	0x08003119
 80030f8:	08003131 	.word	0x08003131
 80030fc:	08003121 	.word	0x08003121
 8003100:	08003131 	.word	0x08003131
 8003104:	08003129 	.word	0x08003129
        case ADC_256: osDelay(1); break;
 8003108:	2001      	movs	r0, #1
 800310a:	f00a fc62 	bl	800d9d2 <osDelay>
 800310e:	e00f      	b.n	8003130 <MS58xx_ADC+0x94>
        case ADC_512: osDelay(3); break;
 8003110:	2003      	movs	r0, #3
 8003112:	f00a fc5e 	bl	800d9d2 <osDelay>
 8003116:	e00b      	b.n	8003130 <MS58xx_ADC+0x94>
        case ADC_1024: osDelay(4); break;
 8003118:	2004      	movs	r0, #4
 800311a:	f00a fc5a 	bl	800d9d2 <osDelay>
 800311e:	e007      	b.n	8003130 <MS58xx_ADC+0x94>
        case ADC_2048: osDelay(6); break;
 8003120:	2006      	movs	r0, #6
 8003122:	f00a fc56 	bl	800d9d2 <osDelay>
 8003126:	e003      	b.n	8003130 <MS58xx_ADC+0x94>
        case ADC_4096: osDelay(10); break;  // Delay longer if higher precision, as conversion takes longer.
 8003128:	200a      	movs	r0, #10
 800312a:	f00a fc52 	bl	800d9d2 <osDelay>
 800312e:	bf00      	nop
    }

    buf[0] = MS58xx_ADC_READ; // Tell the MS58xx that we want to read the ADC
 8003130:	2300      	movs	r3, #0
 8003132:	743b      	strb	r3, [r7, #16]
    MS58xx_write(handle, buf, 1, address);
 8003134:	787b      	ldrb	r3, [r7, #1]
 8003136:	f107 0110 	add.w	r1, r7, #16
 800313a:	2201      	movs	r2, #1
 800313c:	6878      	ldr	r0, [r7, #4]
 800313e:	f7ff ff3b 	bl	8002fb8 <MS58xx_write>
    osDelay(2);
 8003142:	2002      	movs	r0, #2
 8003144:	f00a fc45 	bl	800d9d2 <osDelay>

    uint8_t c[3];
    MS58xx_read(handle, c, 3, address); // Read out the ADC
 8003148:	787b      	ldrb	r3, [r7, #1]
 800314a:	f107 010c 	add.w	r1, r7, #12
 800314e:	2203      	movs	r2, #3
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f7ff ff16 	bl	8002f82 <MS58xx_read>
    result = (c[0] << 16) + (c[1] << 8) + c[2]; // Convert the three 8-bit values into one value.
 8003156:	7b3b      	ldrb	r3, [r7, #12]
 8003158:	041a      	lsls	r2, r3, #16
 800315a:	7b7b      	ldrb	r3, [r7, #13]
 800315c:	021b      	lsls	r3, r3, #8
 800315e:	4413      	add	r3, r2
 8003160:	7bba      	ldrb	r2, [r7, #14]
 8003162:	4413      	add	r3, r2
 8003164:	61fb      	str	r3, [r7, #28]
    return result;
 8003166:	69fb      	ldr	r3, [r7, #28]
}
 8003168:	4618      	mov	r0, r3
 800316a:	3720      	adds	r7, #32
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <MS58xx_get_values>:
 * @param handle The I2C Handle being used
 * @param prec The precision to be used
 * @param temperature The pointer to the temperature variable being read in to.
 * @param pressure The pointer to the pressure variable being read in to.
 */
void MS58xx_get_values(void *handle, precision prec, uint16_t coeff[6], float *temperature, float *pressure, uint8_t address, MS58xx_type sensor_type) {
 8003170:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003174:	b0a8      	sub	sp, #160	; 0xa0
 8003176:	af00      	add	r7, sp, #0
 8003178:	6678      	str	r0, [r7, #100]	; 0x64
 800317a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800317c:	65bb      	str	r3, [r7, #88]	; 0x58
 800317e:	460b      	mov	r3, r1
 8003180:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
    uint32_t temperature_raw = MS58xx_ADC(handle, TEMPERATURE, prec, address);
 8003184:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 8003188:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 800318c:	2110      	movs	r1, #16
 800318e:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8003190:	f7ff ff84 	bl	800309c <MS58xx_ADC>
 8003194:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
    uint32_t pressure_raw = MS58xx_ADC(handle, PRESSURE, prec, address); // get temperature and pressure raw values
 8003198:	f897 30c4 	ldrb.w	r3, [r7, #196]	; 0xc4
 800319c:	f897 2063 	ldrb.w	r2, [r7, #99]	; 0x63
 80031a0:	2100      	movs	r1, #0
 80031a2:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80031a4:	f7ff ff7a 	bl	800309c <MS58xx_ADC>
 80031a8:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94

    int32_t sub = coeff[4] * 256;
 80031ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031ae:	3308      	adds	r3, #8
 80031b0:	881b      	ldrh	r3, [r3, #0]
 80031b2:	021b      	lsls	r3, r3, #8
 80031b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    int32_t dT = temperature_raw - sub;
 80031b8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80031bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80031c0:	1a9b      	subs	r3, r3, r2
 80031c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    int64_t add = ((int64_t)coeff[4])*((int64_t)dT)/128;
 80031c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031c8:	3308      	adds	r3, #8
 80031ca:	881b      	ldrh	r3, [r3, #0]
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	2200      	movs	r2, #0
 80031d0:	4698      	mov	r8, r3
 80031d2:	4691      	mov	r9, r2
 80031d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80031d8:	17da      	asrs	r2, r3, #31
 80031da:	461c      	mov	r4, r3
 80031dc:	4615      	mov	r5, r2
 80031de:	fb04 f209 	mul.w	r2, r4, r9
 80031e2:	fb08 f305 	mul.w	r3, r8, r5
 80031e6:	4413      	add	r3, r2
 80031e8:	fba8 ab04 	umull	sl, fp, r8, r4
 80031ec:	445b      	add	r3, fp
 80031ee:	469b      	mov	fp, r3
 80031f0:	4652      	mov	r2, sl
 80031f2:	465b      	mov	r3, fp
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	da07      	bge.n	8003208 <MS58xx_get_values+0x98>
 80031f8:	f112 017f 	adds.w	r1, r2, #127	; 0x7f
 80031fc:	62b9      	str	r1, [r7, #40]	; 0x28
 80031fe:	f143 0300 	adc.w	r3, r3, #0
 8003202:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003204:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003208:	f04f 0000 	mov.w	r0, #0
 800320c:	f04f 0100 	mov.w	r1, #0
 8003210:	09d0      	lsrs	r0, r2, #7
 8003212:	ea40 6043 	orr.w	r0, r0, r3, lsl #25
 8003216:	11d9      	asrs	r1, r3, #7
 8003218:	e9c7 0120 	strd	r0, r1, [r7, #128]	; 0x80
    int64_t OFF = ((int64_t)coeff[2])*65536+add;
 800321c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800321e:	3304      	adds	r3, #4
 8003220:	881b      	ldrh	r3, [r3, #0]
 8003222:	b29b      	uxth	r3, r3
 8003224:	2200      	movs	r2, #0
 8003226:	64bb      	str	r3, [r7, #72]	; 0x48
 8003228:	64fa      	str	r2, [r7, #76]	; 0x4c
 800322a:	f04f 0000 	mov.w	r0, #0
 800322e:	f04f 0100 	mov.w	r1, #0
 8003232:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 8003236:	462b      	mov	r3, r5
 8003238:	0419      	lsls	r1, r3, #16
 800323a:	4623      	mov	r3, r4
 800323c:	ea41 4113 	orr.w	r1, r1, r3, lsr #16
 8003240:	4623      	mov	r3, r4
 8003242:	0418      	lsls	r0, r3, #16
 8003244:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8003248:	1814      	adds	r4, r2, r0
 800324a:	623c      	str	r4, [r7, #32]
 800324c:	414b      	adcs	r3, r1
 800324e:	627b      	str	r3, [r7, #36]	; 0x24
 8003250:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8003254:	e9c7 341e 	strd	r3, r4, [r7, #120]	; 0x78
    int64_t SENS = coeff[1] * (32768) + (coeff[3]*dT)/(256);
 8003258:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800325a:	3302      	adds	r3, #2
 800325c:	881b      	ldrh	r3, [r3, #0]
 800325e:	03d9      	lsls	r1, r3, #15
 8003260:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003262:	3306      	adds	r3, #6
 8003264:	881b      	ldrh	r3, [r3, #0]
 8003266:	461a      	mov	r2, r3
 8003268:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800326c:	fb02 f303 	mul.w	r3, r2, r3
 8003270:	2b00      	cmp	r3, #0
 8003272:	da00      	bge.n	8003276 <MS58xx_get_values+0x106>
 8003274:	33ff      	adds	r3, #255	; 0xff
 8003276:	121b      	asrs	r3, r3, #8
 8003278:	440b      	add	r3, r1
 800327a:	17da      	asrs	r2, r3, #31
 800327c:	61bb      	str	r3, [r7, #24]
 800327e:	61fa      	str	r2, [r7, #28]
 8003280:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003284:	e9c7 341c 	strd	r3, r4, [r7, #112]	; 0x70
    int64_t mult = pressure_raw*SENS/2097152;
 8003288:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800328c:	2200      	movs	r2, #0
 800328e:	643b      	str	r3, [r7, #64]	; 0x40
 8003290:	647a      	str	r2, [r7, #68]	; 0x44
 8003292:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003294:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	; 0x40
 8003298:	462a      	mov	r2, r5
 800329a:	fb02 f203 	mul.w	r2, r2, r3
 800329e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032a0:	4621      	mov	r1, r4
 80032a2:	fb01 f303 	mul.w	r3, r1, r3
 80032a6:	441a      	add	r2, r3
 80032a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032aa:	4621      	mov	r1, r4
 80032ac:	fba3 1301 	umull	r1, r3, r3, r1
 80032b0:	657b      	str	r3, [r7, #84]	; 0x54
 80032b2:	460b      	mov	r3, r1
 80032b4:	653b      	str	r3, [r7, #80]	; 0x50
 80032b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032b8:	18d3      	adds	r3, r2, r3
 80032ba:	657b      	str	r3, [r7, #84]	; 0x54
 80032bc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	da07      	bge.n	80032d4 <MS58xx_get_values+0x164>
 80032c4:	4949      	ldr	r1, [pc, #292]	; (80033ec <MS58xx_get_values+0x27c>)
 80032c6:	1851      	adds	r1, r2, r1
 80032c8:	6139      	str	r1, [r7, #16]
 80032ca:	f143 0300 	adc.w	r3, r3, #0
 80032ce:	617b      	str	r3, [r7, #20]
 80032d0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80032d4:	f04f 0000 	mov.w	r0, #0
 80032d8:	f04f 0100 	mov.w	r1, #0
 80032dc:	0d50      	lsrs	r0, r2, #21
 80032de:	ea40 20c3 	orr.w	r0, r0, r3, lsl #11
 80032e2:	1559      	asrs	r1, r3, #21
 80032e4:	e9c7 011a 	strd	r0, r1, [r7, #104]	; 0x68

    int32_t pres;
    if (sensor_type == MS5803) {
 80032e8:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d123      	bne.n	8003338 <MS58xx_get_values+0x1c8>
        pres = (mult-OFF)/32768;
 80032f0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80032f4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80032f8:	1a84      	subs	r4, r0, r2
 80032fa:	63bc      	str	r4, [r7, #56]	; 0x38
 80032fc:	eb61 0303 	sbc.w	r3, r1, r3
 8003300:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003302:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003306:	2b00      	cmp	r3, #0
 8003308:	da08      	bge.n	800331c <MS58xx_get_values+0x1ac>
 800330a:	f647 71ff 	movw	r1, #32767	; 0x7fff
 800330e:	1851      	adds	r1, r2, r1
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	f143 0300 	adc.w	r3, r3, #0
 8003316:	60fb      	str	r3, [r7, #12]
 8003318:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800331c:	f04f 0000 	mov.w	r0, #0
 8003320:	f04f 0100 	mov.w	r1, #0
 8003324:	0bd0      	lsrs	r0, r2, #15
 8003326:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
 800332a:	13d9      	asrs	r1, r3, #15
 800332c:	4602      	mov	r2, r0
 800332e:	460b      	mov	r3, r1
 8003330:	4613      	mov	r3, r2
 8003332:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003336:	e02a      	b.n	800338e <MS58xx_get_values+0x21e>
    } else if (sensor_type == MS5837) {
 8003338:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
 800333c:	2b02      	cmp	r3, #2
 800333e:	d123      	bne.n	8003388 <MS58xx_get_values+0x218>
        pres = (mult-OFF)/8192;
 8003340:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003344:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8003348:	1a84      	subs	r4, r0, r2
 800334a:	633c      	str	r4, [r7, #48]	; 0x30
 800334c:	eb61 0303 	sbc.w	r3, r1, r3
 8003350:	637b      	str	r3, [r7, #52]	; 0x34
 8003352:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003356:	2b00      	cmp	r3, #0
 8003358:	da08      	bge.n	800336c <MS58xx_get_values+0x1fc>
 800335a:	f641 71ff 	movw	r1, #8191	; 0x1fff
 800335e:	1851      	adds	r1, r2, r1
 8003360:	6039      	str	r1, [r7, #0]
 8003362:	f143 0300 	adc.w	r3, r3, #0
 8003366:	607b      	str	r3, [r7, #4]
 8003368:	e9d7 2300 	ldrd	r2, r3, [r7]
 800336c:	f04f 0000 	mov.w	r0, #0
 8003370:	f04f 0100 	mov.w	r1, #0
 8003374:	0b50      	lsrs	r0, r2, #13
 8003376:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 800337a:	1359      	asrs	r1, r3, #13
 800337c:	4602      	mov	r2, r0
 800337e:	460b      	mov	r3, r1
 8003380:	4613      	mov	r3, r2
 8003382:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003386:	e002      	b.n	800338e <MS58xx_get_values+0x21e>
    } else {
        // Handle unknown sensor type
        pres = 0; // Set a default value or handle the case appropriately
 8003388:	2300      	movs	r3, #0
 800338a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    }

    // determine pressure according to datasheet
    if (sensor_type == MS5803) {
 800338e:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
 8003392:	2b01      	cmp	r3, #1
 8003394:	d112      	bne.n	80033bc <MS58xx_get_values+0x24c>
        *pressure = (pres/100.f) + 819;
 8003396:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800339a:	ee07 3a90 	vmov	s15, r3
 800339e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033a2:	eddf 6a13 	vldr	s13, [pc, #76]	; 80033f0 <MS58xx_get_values+0x280>
 80033a6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033aa:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80033f4 <MS58xx_get_values+0x284>
 80033ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80033b2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80033b6:	edc3 7a00 	vstr	s15, [r3]
    } else if (sensor_type == MS5837) {
        *pressure = (pres/100.f);
    }
}
 80033ba:	e011      	b.n	80033e0 <MS58xx_get_values+0x270>
    } else if (sensor_type == MS5837) {
 80033bc:	f897 30c8 	ldrb.w	r3, [r7, #200]	; 0xc8
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	d10d      	bne.n	80033e0 <MS58xx_get_values+0x270>
        *pressure = (pres/100.f);
 80033c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80033c8:	ee07 3a90 	vmov	s15, r3
 80033cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033d0:	eddf 6a07 	vldr	s13, [pc, #28]	; 80033f0 <MS58xx_get_values+0x280>
 80033d4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80033d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80033dc:	edc3 7a00 	vstr	s15, [r3]
}
 80033e0:	bf00      	nop
 80033e2:	37a0      	adds	r7, #160	; 0xa0
 80033e4:	46bd      	mov	sp, r7
 80033e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033ea:	bf00      	nop
 80033ec:	001fffff 	.word	0x001fffff
 80033f0:	42c80000 	.word	0x42c80000
 80033f4:	444cc000 	.word	0x444cc000

080033f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b082      	sub	sp, #8
 80033fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033fe:	2300      	movs	r3, #0
 8003400:	607b      	str	r3, [r7, #4]
 8003402:	4b12      	ldr	r3, [pc, #72]	; (800344c <HAL_MspInit+0x54>)
 8003404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003406:	4a11      	ldr	r2, [pc, #68]	; (800344c <HAL_MspInit+0x54>)
 8003408:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800340c:	6453      	str	r3, [r2, #68]	; 0x44
 800340e:	4b0f      	ldr	r3, [pc, #60]	; (800344c <HAL_MspInit+0x54>)
 8003410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003412:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003416:	607b      	str	r3, [r7, #4]
 8003418:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800341a:	2300      	movs	r3, #0
 800341c:	603b      	str	r3, [r7, #0]
 800341e:	4b0b      	ldr	r3, [pc, #44]	; (800344c <HAL_MspInit+0x54>)
 8003420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003422:	4a0a      	ldr	r2, [pc, #40]	; (800344c <HAL_MspInit+0x54>)
 8003424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003428:	6413      	str	r3, [r2, #64]	; 0x40
 800342a:	4b08      	ldr	r3, [pc, #32]	; (800344c <HAL_MspInit+0x54>)
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003432:	603b      	str	r3, [r7, #0]
 8003434:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003436:	2200      	movs	r2, #0
 8003438:	210f      	movs	r1, #15
 800343a:	f06f 0001 	mvn.w	r0, #1
 800343e:	f001 f88d 	bl	800455c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003442:	bf00      	nop
 8003444:	3708      	adds	r7, #8
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	40023800 	.word	0x40023800

08003450 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b08a      	sub	sp, #40	; 0x28
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003458:	f107 0314 	add.w	r3, r7, #20
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]
 8003460:	605a      	str	r2, [r3, #4]
 8003462:	609a      	str	r2, [r3, #8]
 8003464:	60da      	str	r2, [r3, #12]
 8003466:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a2f      	ldr	r2, [pc, #188]	; (800352c <HAL_ADC_MspInit+0xdc>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d157      	bne.n	8003522 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003472:	2300      	movs	r3, #0
 8003474:	613b      	str	r3, [r7, #16]
 8003476:	4b2e      	ldr	r3, [pc, #184]	; (8003530 <HAL_ADC_MspInit+0xe0>)
 8003478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347a:	4a2d      	ldr	r2, [pc, #180]	; (8003530 <HAL_ADC_MspInit+0xe0>)
 800347c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003480:	6453      	str	r3, [r2, #68]	; 0x44
 8003482:	4b2b      	ldr	r3, [pc, #172]	; (8003530 <HAL_ADC_MspInit+0xe0>)
 8003484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800348a:	613b      	str	r3, [r7, #16]
 800348c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800348e:	2300      	movs	r3, #0
 8003490:	60fb      	str	r3, [r7, #12]
 8003492:	4b27      	ldr	r3, [pc, #156]	; (8003530 <HAL_ADC_MspInit+0xe0>)
 8003494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003496:	4a26      	ldr	r2, [pc, #152]	; (8003530 <HAL_ADC_MspInit+0xe0>)
 8003498:	f043 0301 	orr.w	r3, r3, #1
 800349c:	6313      	str	r3, [r2, #48]	; 0x30
 800349e:	4b24      	ldr	r3, [pc, #144]	; (8003530 <HAL_ADC_MspInit+0xe0>)
 80034a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	60fb      	str	r3, [r7, #12]
 80034a8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80034aa:	2330      	movs	r3, #48	; 0x30
 80034ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034ae:	2303      	movs	r3, #3
 80034b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b2:	2300      	movs	r3, #0
 80034b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034b6:	f107 0314 	add.w	r3, r7, #20
 80034ba:	4619      	mov	r1, r3
 80034bc:	481d      	ldr	r0, [pc, #116]	; (8003534 <HAL_ADC_MspInit+0xe4>)
 80034be:	f001 fc79 	bl	8004db4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80034c2:	4b1d      	ldr	r3, [pc, #116]	; (8003538 <HAL_ADC_MspInit+0xe8>)
 80034c4:	4a1d      	ldr	r2, [pc, #116]	; (800353c <HAL_ADC_MspInit+0xec>)
 80034c6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80034c8:	4b1b      	ldr	r3, [pc, #108]	; (8003538 <HAL_ADC_MspInit+0xe8>)
 80034ca:	2200      	movs	r2, #0
 80034cc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80034ce:	4b1a      	ldr	r3, [pc, #104]	; (8003538 <HAL_ADC_MspInit+0xe8>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80034d4:	4b18      	ldr	r3, [pc, #96]	; (8003538 <HAL_ADC_MspInit+0xe8>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80034da:	4b17      	ldr	r3, [pc, #92]	; (8003538 <HAL_ADC_MspInit+0xe8>)
 80034dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80034e0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80034e2:	4b15      	ldr	r3, [pc, #84]	; (8003538 <HAL_ADC_MspInit+0xe8>)
 80034e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80034e8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80034ea:	4b13      	ldr	r3, [pc, #76]	; (8003538 <HAL_ADC_MspInit+0xe8>)
 80034ec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80034f0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80034f2:	4b11      	ldr	r3, [pc, #68]	; (8003538 <HAL_ADC_MspInit+0xe8>)
 80034f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034f8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80034fa:	4b0f      	ldr	r3, [pc, #60]	; (8003538 <HAL_ADC_MspInit+0xe8>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003500:	4b0d      	ldr	r3, [pc, #52]	; (8003538 <HAL_ADC_MspInit+0xe8>)
 8003502:	2200      	movs	r2, #0
 8003504:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003506:	480c      	ldr	r0, [pc, #48]	; (8003538 <HAL_ADC_MspInit+0xe8>)
 8003508:	f001 f852 	bl	80045b0 <HAL_DMA_Init>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8003512:	f7ff fd31 	bl	8002f78 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a07      	ldr	r2, [pc, #28]	; (8003538 <HAL_ADC_MspInit+0xe8>)
 800351a:	639a      	str	r2, [r3, #56]	; 0x38
 800351c:	4a06      	ldr	r2, [pc, #24]	; (8003538 <HAL_ADC_MspInit+0xe8>)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003522:	bf00      	nop
 8003524:	3728      	adds	r7, #40	; 0x28
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	40012000 	.word	0x40012000
 8003530:	40023800 	.word	0x40023800
 8003534:	40020000 	.word	0x40020000
 8003538:	200006a8 	.word	0x200006a8
 800353c:	40026410 	.word	0x40026410

08003540 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b08a      	sub	sp, #40	; 0x28
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003548:	f107 0314 	add.w	r3, r7, #20
 800354c:	2200      	movs	r2, #0
 800354e:	601a      	str	r2, [r3, #0]
 8003550:	605a      	str	r2, [r3, #4]
 8003552:	609a      	str	r2, [r3, #8]
 8003554:	60da      	str	r2, [r3, #12]
 8003556:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a19      	ldr	r2, [pc, #100]	; (80035c4 <HAL_I2C_MspInit+0x84>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d12b      	bne.n	80035ba <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003562:	2300      	movs	r3, #0
 8003564:	613b      	str	r3, [r7, #16]
 8003566:	4b18      	ldr	r3, [pc, #96]	; (80035c8 <HAL_I2C_MspInit+0x88>)
 8003568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356a:	4a17      	ldr	r2, [pc, #92]	; (80035c8 <HAL_I2C_MspInit+0x88>)
 800356c:	f043 0302 	orr.w	r3, r3, #2
 8003570:	6313      	str	r3, [r2, #48]	; 0x30
 8003572:	4b15      	ldr	r3, [pc, #84]	; (80035c8 <HAL_I2C_MspInit+0x88>)
 8003574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	613b      	str	r3, [r7, #16]
 800357c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800357e:	23c0      	movs	r3, #192	; 0xc0
 8003580:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003582:	2312      	movs	r3, #18
 8003584:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003586:	2300      	movs	r3, #0
 8003588:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800358a:	2303      	movs	r3, #3
 800358c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800358e:	2304      	movs	r3, #4
 8003590:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003592:	f107 0314 	add.w	r3, r7, #20
 8003596:	4619      	mov	r1, r3
 8003598:	480c      	ldr	r0, [pc, #48]	; (80035cc <HAL_I2C_MspInit+0x8c>)
 800359a:	f001 fc0b 	bl	8004db4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800359e:	2300      	movs	r3, #0
 80035a0:	60fb      	str	r3, [r7, #12]
 80035a2:	4b09      	ldr	r3, [pc, #36]	; (80035c8 <HAL_I2C_MspInit+0x88>)
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	4a08      	ldr	r2, [pc, #32]	; (80035c8 <HAL_I2C_MspInit+0x88>)
 80035a8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80035ac:	6413      	str	r3, [r2, #64]	; 0x40
 80035ae:	4b06      	ldr	r3, [pc, #24]	; (80035c8 <HAL_I2C_MspInit+0x88>)
 80035b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035b6:	60fb      	str	r3, [r7, #12]
 80035b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80035ba:	bf00      	nop
 80035bc:	3728      	adds	r7, #40	; 0x28
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	40005400 	.word	0x40005400
 80035c8:	40023800 	.word	0x40023800
 80035cc:	40020400 	.word	0x40020400

080035d0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b086      	sub	sp, #24
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM3)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a40      	ldr	r2, [pc, #256]	; (80036e0 <HAL_TIM_PWM_MspInit+0x110>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d13e      	bne.n	8003660 <HAL_TIM_PWM_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80035e2:	2300      	movs	r3, #0
 80035e4:	617b      	str	r3, [r7, #20]
 80035e6:	4b3f      	ldr	r3, [pc, #252]	; (80036e4 <HAL_TIM_PWM_MspInit+0x114>)
 80035e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ea:	4a3e      	ldr	r2, [pc, #248]	; (80036e4 <HAL_TIM_PWM_MspInit+0x114>)
 80035ec:	f043 0302 	orr.w	r3, r3, #2
 80035f0:	6413      	str	r3, [r2, #64]	; 0x40
 80035f2:	4b3c      	ldr	r3, [pc, #240]	; (80036e4 <HAL_TIM_PWM_MspInit+0x114>)
 80035f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	617b      	str	r3, [r7, #20]
 80035fc:	697b      	ldr	r3, [r7, #20]

    /* TIM3 DMA Init */
    /* TIM3_CH2 Init */
    hdma_tim3_ch2.Instance = DMA1_Stream5;
 80035fe:	4b3a      	ldr	r3, [pc, #232]	; (80036e8 <HAL_TIM_PWM_MspInit+0x118>)
 8003600:	4a3a      	ldr	r2, [pc, #232]	; (80036ec <HAL_TIM_PWM_MspInit+0x11c>)
 8003602:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch2.Init.Channel = DMA_CHANNEL_5;
 8003604:	4b38      	ldr	r3, [pc, #224]	; (80036e8 <HAL_TIM_PWM_MspInit+0x118>)
 8003606:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800360a:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800360c:	4b36      	ldr	r3, [pc, #216]	; (80036e8 <HAL_TIM_PWM_MspInit+0x118>)
 800360e:	2240      	movs	r2, #64	; 0x40
 8003610:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8003612:	4b35      	ldr	r3, [pc, #212]	; (80036e8 <HAL_TIM_PWM_MspInit+0x118>)
 8003614:	2200      	movs	r2, #0
 8003616:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8003618:	4b33      	ldr	r3, [pc, #204]	; (80036e8 <HAL_TIM_PWM_MspInit+0x118>)
 800361a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800361e:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003620:	4b31      	ldr	r3, [pc, #196]	; (80036e8 <HAL_TIM_PWM_MspInit+0x118>)
 8003622:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003626:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003628:	4b2f      	ldr	r3, [pc, #188]	; (80036e8 <HAL_TIM_PWM_MspInit+0x118>)
 800362a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800362e:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch2.Init.Mode = DMA_NORMAL;
 8003630:	4b2d      	ldr	r3, [pc, #180]	; (80036e8 <HAL_TIM_PWM_MspInit+0x118>)
 8003632:	2200      	movs	r2, #0
 8003634:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch2.Init.Priority = DMA_PRIORITY_LOW;
 8003636:	4b2c      	ldr	r3, [pc, #176]	; (80036e8 <HAL_TIM_PWM_MspInit+0x118>)
 8003638:	2200      	movs	r2, #0
 800363a:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800363c:	4b2a      	ldr	r3, [pc, #168]	; (80036e8 <HAL_TIM_PWM_MspInit+0x118>)
 800363e:	2200      	movs	r2, #0
 8003640:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch2) != HAL_OK)
 8003642:	4829      	ldr	r0, [pc, #164]	; (80036e8 <HAL_TIM_PWM_MspInit+0x118>)
 8003644:	f000 ffb4 	bl	80045b0 <HAL_DMA_Init>
 8003648:	4603      	mov	r3, r0
 800364a:	2b00      	cmp	r3, #0
 800364c:	d001      	beq.n	8003652 <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 800364e:	f7ff fc93 	bl	8002f78 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim3_ch2);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a24      	ldr	r2, [pc, #144]	; (80036e8 <HAL_TIM_PWM_MspInit+0x118>)
 8003656:	629a      	str	r2, [r3, #40]	; 0x28
 8003658:	4a23      	ldr	r2, [pc, #140]	; (80036e8 <HAL_TIM_PWM_MspInit+0x118>)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 800365e:	e03a      	b.n	80036d6 <HAL_TIM_PWM_MspInit+0x106>
  else if(htim_pwm->Instance==TIM4)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a22      	ldr	r2, [pc, #136]	; (80036f0 <HAL_TIM_PWM_MspInit+0x120>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d10e      	bne.n	8003688 <HAL_TIM_PWM_MspInit+0xb8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800366a:	2300      	movs	r3, #0
 800366c:	613b      	str	r3, [r7, #16]
 800366e:	4b1d      	ldr	r3, [pc, #116]	; (80036e4 <HAL_TIM_PWM_MspInit+0x114>)
 8003670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003672:	4a1c      	ldr	r2, [pc, #112]	; (80036e4 <HAL_TIM_PWM_MspInit+0x114>)
 8003674:	f043 0304 	orr.w	r3, r3, #4
 8003678:	6413      	str	r3, [r2, #64]	; 0x40
 800367a:	4b1a      	ldr	r3, [pc, #104]	; (80036e4 <HAL_TIM_PWM_MspInit+0x114>)
 800367c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367e:	f003 0304 	and.w	r3, r3, #4
 8003682:	613b      	str	r3, [r7, #16]
 8003684:	693b      	ldr	r3, [r7, #16]
}
 8003686:	e026      	b.n	80036d6 <HAL_TIM_PWM_MspInit+0x106>
  else if(htim_pwm->Instance==TIM5)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a19      	ldr	r2, [pc, #100]	; (80036f4 <HAL_TIM_PWM_MspInit+0x124>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d10e      	bne.n	80036b0 <HAL_TIM_PWM_MspInit+0xe0>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003692:	2300      	movs	r3, #0
 8003694:	60fb      	str	r3, [r7, #12]
 8003696:	4b13      	ldr	r3, [pc, #76]	; (80036e4 <HAL_TIM_PWM_MspInit+0x114>)
 8003698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369a:	4a12      	ldr	r2, [pc, #72]	; (80036e4 <HAL_TIM_PWM_MspInit+0x114>)
 800369c:	f043 0308 	orr.w	r3, r3, #8
 80036a0:	6413      	str	r3, [r2, #64]	; 0x40
 80036a2:	4b10      	ldr	r3, [pc, #64]	; (80036e4 <HAL_TIM_PWM_MspInit+0x114>)
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	f003 0308 	and.w	r3, r3, #8
 80036aa:	60fb      	str	r3, [r7, #12]
 80036ac:	68fb      	ldr	r3, [r7, #12]
}
 80036ae:	e012      	b.n	80036d6 <HAL_TIM_PWM_MspInit+0x106>
  else if(htim_pwm->Instance==TIM9)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a10      	ldr	r2, [pc, #64]	; (80036f8 <HAL_TIM_PWM_MspInit+0x128>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d10d      	bne.n	80036d6 <HAL_TIM_PWM_MspInit+0x106>
    __HAL_RCC_TIM9_CLK_ENABLE();
 80036ba:	2300      	movs	r3, #0
 80036bc:	60bb      	str	r3, [r7, #8]
 80036be:	4b09      	ldr	r3, [pc, #36]	; (80036e4 <HAL_TIM_PWM_MspInit+0x114>)
 80036c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c2:	4a08      	ldr	r2, [pc, #32]	; (80036e4 <HAL_TIM_PWM_MspInit+0x114>)
 80036c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036c8:	6453      	str	r3, [r2, #68]	; 0x44
 80036ca:	4b06      	ldr	r3, [pc, #24]	; (80036e4 <HAL_TIM_PWM_MspInit+0x114>)
 80036cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036d2:	60bb      	str	r3, [r7, #8]
 80036d4:	68bb      	ldr	r3, [r7, #8]
}
 80036d6:	bf00      	nop
 80036d8:	3718      	adds	r7, #24
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	40000400 	.word	0x40000400
 80036e4:	40023800 	.word	0x40023800
 80036e8:	2000087c 	.word	0x2000087c
 80036ec:	40026088 	.word	0x40026088
 80036f0:	40000800 	.word	0x40000800
 80036f4:	40000c00 	.word	0x40000c00
 80036f8:	40014000 	.word	0x40014000

080036fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b08c      	sub	sp, #48	; 0x30
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003704:	f107 031c 	add.w	r3, r7, #28
 8003708:	2200      	movs	r2, #0
 800370a:	601a      	str	r2, [r3, #0]
 800370c:	605a      	str	r2, [r3, #4]
 800370e:	609a      	str	r2, [r3, #8]
 8003710:	60da      	str	r2, [r3, #12]
 8003712:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a48      	ldr	r2, [pc, #288]	; (800383c <HAL_TIM_MspPostInit+0x140>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d11e      	bne.n	800375c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800371e:	2300      	movs	r3, #0
 8003720:	61bb      	str	r3, [r7, #24]
 8003722:	4b47      	ldr	r3, [pc, #284]	; (8003840 <HAL_TIM_MspPostInit+0x144>)
 8003724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003726:	4a46      	ldr	r2, [pc, #280]	; (8003840 <HAL_TIM_MspPostInit+0x144>)
 8003728:	f043 0301 	orr.w	r3, r3, #1
 800372c:	6313      	str	r3, [r2, #48]	; 0x30
 800372e:	4b44      	ldr	r3, [pc, #272]	; (8003840 <HAL_TIM_MspPostInit+0x144>)
 8003730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	61bb      	str	r3, [r7, #24]
 8003738:	69bb      	ldr	r3, [r7, #24]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800373a:	2380      	movs	r3, #128	; 0x80
 800373c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800373e:	2302      	movs	r3, #2
 8003740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003742:	2300      	movs	r3, #0
 8003744:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003746:	2300      	movs	r3, #0
 8003748:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800374a:	2302      	movs	r3, #2
 800374c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800374e:	f107 031c 	add.w	r3, r7, #28
 8003752:	4619      	mov	r1, r3
 8003754:	483b      	ldr	r0, [pc, #236]	; (8003844 <HAL_TIM_MspPostInit+0x148>)
 8003756:	f001 fb2d 	bl	8004db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 800375a:	e06b      	b.n	8003834 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM4)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a39      	ldr	r2, [pc, #228]	; (8003848 <HAL_TIM_MspPostInit+0x14c>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d11f      	bne.n	80037a6 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003766:	2300      	movs	r3, #0
 8003768:	617b      	str	r3, [r7, #20]
 800376a:	4b35      	ldr	r3, [pc, #212]	; (8003840 <HAL_TIM_MspPostInit+0x144>)
 800376c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376e:	4a34      	ldr	r2, [pc, #208]	; (8003840 <HAL_TIM_MspPostInit+0x144>)
 8003770:	f043 0308 	orr.w	r3, r3, #8
 8003774:	6313      	str	r3, [r2, #48]	; 0x30
 8003776:	4b32      	ldr	r3, [pc, #200]	; (8003840 <HAL_TIM_MspPostInit+0x144>)
 8003778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377a:	f003 0308 	and.w	r3, r3, #8
 800377e:	617b      	str	r3, [r7, #20]
 8003780:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003782:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8003786:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003788:	2302      	movs	r3, #2
 800378a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800378c:	2300      	movs	r3, #0
 800378e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003790:	2300      	movs	r3, #0
 8003792:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003794:	2302      	movs	r3, #2
 8003796:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003798:	f107 031c 	add.w	r3, r7, #28
 800379c:	4619      	mov	r1, r3
 800379e:	482b      	ldr	r0, [pc, #172]	; (800384c <HAL_TIM_MspPostInit+0x150>)
 80037a0:	f001 fb08 	bl	8004db4 <HAL_GPIO_Init>
}
 80037a4:	e046      	b.n	8003834 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM5)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a29      	ldr	r2, [pc, #164]	; (8003850 <HAL_TIM_MspPostInit+0x154>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d11e      	bne.n	80037ee <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037b0:	2300      	movs	r3, #0
 80037b2:	613b      	str	r3, [r7, #16]
 80037b4:	4b22      	ldr	r3, [pc, #136]	; (8003840 <HAL_TIM_MspPostInit+0x144>)
 80037b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b8:	4a21      	ldr	r2, [pc, #132]	; (8003840 <HAL_TIM_MspPostInit+0x144>)
 80037ba:	f043 0301 	orr.w	r3, r3, #1
 80037be:	6313      	str	r3, [r2, #48]	; 0x30
 80037c0:	4b1f      	ldr	r3, [pc, #124]	; (8003840 <HAL_TIM_MspPostInit+0x144>)
 80037c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c4:	f003 0301 	and.w	r3, r3, #1
 80037c8:	613b      	str	r3, [r7, #16]
 80037ca:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80037cc:	230f      	movs	r3, #15
 80037ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037d0:	2302      	movs	r3, #2
 80037d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037d4:	2300      	movs	r3, #0
 80037d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037d8:	2300      	movs	r3, #0
 80037da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80037dc:	2302      	movs	r3, #2
 80037de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037e0:	f107 031c 	add.w	r3, r7, #28
 80037e4:	4619      	mov	r1, r3
 80037e6:	4817      	ldr	r0, [pc, #92]	; (8003844 <HAL_TIM_MspPostInit+0x148>)
 80037e8:	f001 fae4 	bl	8004db4 <HAL_GPIO_Init>
}
 80037ec:	e022      	b.n	8003834 <HAL_TIM_MspPostInit+0x138>
  else if(htim->Instance==TIM9)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a18      	ldr	r2, [pc, #96]	; (8003854 <HAL_TIM_MspPostInit+0x158>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d11d      	bne.n	8003834 <HAL_TIM_MspPostInit+0x138>
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80037f8:	2300      	movs	r3, #0
 80037fa:	60fb      	str	r3, [r7, #12]
 80037fc:	4b10      	ldr	r3, [pc, #64]	; (8003840 <HAL_TIM_MspPostInit+0x144>)
 80037fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003800:	4a0f      	ldr	r2, [pc, #60]	; (8003840 <HAL_TIM_MspPostInit+0x144>)
 8003802:	f043 0310 	orr.w	r3, r3, #16
 8003806:	6313      	str	r3, [r2, #48]	; 0x30
 8003808:	4b0d      	ldr	r3, [pc, #52]	; (8003840 <HAL_TIM_MspPostInit+0x144>)
 800380a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380c:	f003 0310 	and.w	r3, r3, #16
 8003810:	60fb      	str	r3, [r7, #12]
 8003812:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8003814:	2320      	movs	r3, #32
 8003816:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003818:	2302      	movs	r3, #2
 800381a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800381c:	2300      	movs	r3, #0
 800381e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003820:	2300      	movs	r3, #0
 8003822:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8003824:	2303      	movs	r3, #3
 8003826:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003828:	f107 031c 	add.w	r3, r7, #28
 800382c:	4619      	mov	r1, r3
 800382e:	480a      	ldr	r0, [pc, #40]	; (8003858 <HAL_TIM_MspPostInit+0x15c>)
 8003830:	f001 fac0 	bl	8004db4 <HAL_GPIO_Init>
}
 8003834:	bf00      	nop
 8003836:	3730      	adds	r7, #48	; 0x30
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	40000400 	.word	0x40000400
 8003840:	40023800 	.word	0x40023800
 8003844:	40020000 	.word	0x40020000
 8003848:	40000800 	.word	0x40000800
 800384c:	40020c00 	.word	0x40020c00
 8003850:	40000c00 	.word	0x40000c00
 8003854:	40014000 	.word	0x40014000
 8003858:	40021000 	.word	0x40021000

0800385c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b08a      	sub	sp, #40	; 0x28
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003864:	f107 0314 	add.w	r3, r7, #20
 8003868:	2200      	movs	r2, #0
 800386a:	601a      	str	r2, [r3, #0]
 800386c:	605a      	str	r2, [r3, #4]
 800386e:	609a      	str	r2, [r3, #8]
 8003870:	60da      	str	r2, [r3, #12]
 8003872:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a1d      	ldr	r2, [pc, #116]	; (80038f0 <HAL_UART_MspInit+0x94>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d133      	bne.n	80038e6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800387e:	2300      	movs	r3, #0
 8003880:	613b      	str	r3, [r7, #16]
 8003882:	4b1c      	ldr	r3, [pc, #112]	; (80038f4 <HAL_UART_MspInit+0x98>)
 8003884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003886:	4a1b      	ldr	r2, [pc, #108]	; (80038f4 <HAL_UART_MspInit+0x98>)
 8003888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800388c:	6413      	str	r3, [r2, #64]	; 0x40
 800388e:	4b19      	ldr	r3, [pc, #100]	; (80038f4 <HAL_UART_MspInit+0x98>)
 8003890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003896:	613b      	str	r3, [r7, #16]
 8003898:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800389a:	2300      	movs	r3, #0
 800389c:	60fb      	str	r3, [r7, #12]
 800389e:	4b15      	ldr	r3, [pc, #84]	; (80038f4 <HAL_UART_MspInit+0x98>)
 80038a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a2:	4a14      	ldr	r2, [pc, #80]	; (80038f4 <HAL_UART_MspInit+0x98>)
 80038a4:	f043 0308 	orr.w	r3, r3, #8
 80038a8:	6313      	str	r3, [r2, #48]	; 0x30
 80038aa:	4b12      	ldr	r3, [pc, #72]	; (80038f4 <HAL_UART_MspInit+0x98>)
 80038ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ae:	f003 0308 	and.w	r3, r3, #8
 80038b2:	60fb      	str	r3, [r7, #12]
 80038b4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80038b6:	2360      	movs	r3, #96	; 0x60
 80038b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038ba:	2302      	movs	r3, #2
 80038bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038be:	2300      	movs	r3, #0
 80038c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038c2:	2303      	movs	r3, #3
 80038c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80038c6:	2307      	movs	r3, #7
 80038c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80038ca:	f107 0314 	add.w	r3, r7, #20
 80038ce:	4619      	mov	r1, r3
 80038d0:	4809      	ldr	r0, [pc, #36]	; (80038f8 <HAL_UART_MspInit+0x9c>)
 80038d2:	f001 fa6f 	bl	8004db4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80038d6:	2200      	movs	r2, #0
 80038d8:	2105      	movs	r1, #5
 80038da:	2026      	movs	r0, #38	; 0x26
 80038dc:	f000 fe3e 	bl	800455c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80038e0:	2026      	movs	r0, #38	; 0x26
 80038e2:	f000 fe57 	bl	8004594 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80038e6:	bf00      	nop
 80038e8:	3728      	adds	r7, #40	; 0x28
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	40004400 	.word	0x40004400
 80038f4:	40023800 	.word	0x40023800
 80038f8:	40020c00 	.word	0x40020c00

080038fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b08e      	sub	sp, #56	; 0x38
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003904:	2300      	movs	r3, #0
 8003906:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003908:	2300      	movs	r3, #0
 800390a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 800390c:	2300      	movs	r3, #0
 800390e:	60fb      	str	r3, [r7, #12]
 8003910:	4b33      	ldr	r3, [pc, #204]	; (80039e0 <HAL_InitTick+0xe4>)
 8003912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003914:	4a32      	ldr	r2, [pc, #200]	; (80039e0 <HAL_InitTick+0xe4>)
 8003916:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800391a:	6413      	str	r3, [r2, #64]	; 0x40
 800391c:	4b30      	ldr	r3, [pc, #192]	; (80039e0 <HAL_InitTick+0xe4>)
 800391e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003920:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003924:	60fb      	str	r3, [r7, #12]
 8003926:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003928:	f107 0210 	add.w	r2, r7, #16
 800392c:	f107 0314 	add.w	r3, r7, #20
 8003930:	4611      	mov	r1, r2
 8003932:	4618      	mov	r0, r3
 8003934:	f004 faee 	bl	8007f14 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003938:	6a3b      	ldr	r3, [r7, #32]
 800393a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800393c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800393e:	2b00      	cmp	r3, #0
 8003940:	d103      	bne.n	800394a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003942:	f004 fabf 	bl	8007ec4 <HAL_RCC_GetPCLK1Freq>
 8003946:	6378      	str	r0, [r7, #52]	; 0x34
 8003948:	e004      	b.n	8003954 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800394a:	f004 fabb 	bl	8007ec4 <HAL_RCC_GetPCLK1Freq>
 800394e:	4603      	mov	r3, r0
 8003950:	005b      	lsls	r3, r3, #1
 8003952:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003956:	4a23      	ldr	r2, [pc, #140]	; (80039e4 <HAL_InitTick+0xe8>)
 8003958:	fba2 2303 	umull	r2, r3, r2, r3
 800395c:	0c9b      	lsrs	r3, r3, #18
 800395e:	3b01      	subs	r3, #1
 8003960:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8003962:	4b21      	ldr	r3, [pc, #132]	; (80039e8 <HAL_InitTick+0xec>)
 8003964:	4a21      	ldr	r2, [pc, #132]	; (80039ec <HAL_InitTick+0xf0>)
 8003966:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8003968:	4b1f      	ldr	r3, [pc, #124]	; (80039e8 <HAL_InitTick+0xec>)
 800396a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800396e:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8003970:	4a1d      	ldr	r2, [pc, #116]	; (80039e8 <HAL_InitTick+0xec>)
 8003972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003974:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8003976:	4b1c      	ldr	r3, [pc, #112]	; (80039e8 <HAL_InitTick+0xec>)
 8003978:	2200      	movs	r2, #0
 800397a:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800397c:	4b1a      	ldr	r3, [pc, #104]	; (80039e8 <HAL_InitTick+0xec>)
 800397e:	2200      	movs	r2, #0
 8003980:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003982:	4b19      	ldr	r3, [pc, #100]	; (80039e8 <HAL_InitTick+0xec>)
 8003984:	2200      	movs	r2, #0
 8003986:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8003988:	4817      	ldr	r0, [pc, #92]	; (80039e8 <HAL_InitTick+0xec>)
 800398a:	f004 faf5 	bl	8007f78 <HAL_TIM_Base_Init>
 800398e:	4603      	mov	r3, r0
 8003990:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003994:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003998:	2b00      	cmp	r3, #0
 800399a:	d11b      	bne.n	80039d4 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 800399c:	4812      	ldr	r0, [pc, #72]	; (80039e8 <HAL_InitTick+0xec>)
 800399e:	f004 fb45 	bl	800802c <HAL_TIM_Base_Start_IT>
 80039a2:	4603      	mov	r3, r0
 80039a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80039a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d111      	bne.n	80039d4 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80039b0:	202d      	movs	r0, #45	; 0x2d
 80039b2:	f000 fdef 	bl	8004594 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2b0f      	cmp	r3, #15
 80039ba:	d808      	bhi.n	80039ce <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 80039bc:	2200      	movs	r2, #0
 80039be:	6879      	ldr	r1, [r7, #4]
 80039c0:	202d      	movs	r0, #45	; 0x2d
 80039c2:	f000 fdcb 	bl	800455c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80039c6:	4a0a      	ldr	r2, [pc, #40]	; (80039f0 <HAL_InitTick+0xf4>)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6013      	str	r3, [r2, #0]
 80039cc:	e002      	b.n	80039d4 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80039d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3738      	adds	r7, #56	; 0x38
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	40023800 	.word	0x40023800
 80039e4:	431bde83 	.word	0x431bde83
 80039e8:	20000b5c 	.word	0x20000b5c
 80039ec:	40002000 	.word	0x40002000
 80039f0:	20000054 	.word	0x20000054

080039f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039f4:	b480      	push	{r7}
 80039f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80039f8:	e7fe      	b.n	80039f8 <NMI_Handler+0x4>

080039fa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039fa:	b480      	push	{r7}
 80039fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039fe:	e7fe      	b.n	80039fe <HardFault_Handler+0x4>

08003a00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a00:	b480      	push	{r7}
 8003a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a04:	e7fe      	b.n	8003a04 <MemManage_Handler+0x4>

08003a06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a06:	b480      	push	{r7}
 8003a08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a0a:	e7fe      	b.n	8003a0a <BusFault_Handler+0x4>

08003a0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a10:	e7fe      	b.n	8003a10 <UsageFault_Handler+0x4>

08003a12 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a12:	b480      	push	{r7}
 8003a14:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a16:	bf00      	nop
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch2);
 8003a24:	4802      	ldr	r0, [pc, #8]	; (8003a30 <DMA1_Stream5_IRQHandler+0x10>)
 8003a26:	f000 ff5b 	bl	80048e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003a2a:	bf00      	nop
 8003a2c:	bd80      	pop	{r7, pc}
 8003a2e:	bf00      	nop
 8003a30:	2000087c 	.word	0x2000087c

08003a34 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003a38:	4802      	ldr	r0, [pc, #8]	; (8003a44 <USART2_IRQHandler+0x10>)
 8003a3a:	f005 fd57 	bl	80094ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003a3e:	bf00      	nop
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	200008dc 	.word	0x200008dc

08003a48 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8003a4c:	4802      	ldr	r0, [pc, #8]	; (8003a58 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8003a4e:	f004 ff0f 	bl	8008870 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8003a52:	bf00      	nop
 8003a54:	bd80      	pop	{r7, pc}
 8003a56:	bf00      	nop
 8003a58:	20000b5c 	.word	0x20000b5c

08003a5c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003a60:	4802      	ldr	r0, [pc, #8]	; (8003a6c <DMA2_Stream0_IRQHandler+0x10>)
 8003a62:	f000 ff3d 	bl	80048e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8003a66:	bf00      	nop
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	200006a8 	.word	0x200006a8

08003a70 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003a74:	4802      	ldr	r0, [pc, #8]	; (8003a80 <OTG_FS_IRQHandler+0x10>)
 8003a76:	f002 fca9 	bl	80063cc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003a7a:	bf00      	nop
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	20005ddc 	.word	0x20005ddc

08003a84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003a84:	b480      	push	{r7}
 8003a86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003a88:	4b06      	ldr	r3, [pc, #24]	; (8003aa4 <SystemInit+0x20>)
 8003a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a8e:	4a05      	ldr	r2, [pc, #20]	; (8003aa4 <SystemInit+0x20>)
 8003a90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003a94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003a98:	bf00      	nop
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr
 8003aa2:	bf00      	nop
 8003aa4:	e000ed00 	.word	0xe000ed00

08003aa8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003aa8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ae0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003aac:	f7ff ffea 	bl	8003a84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003ab0:	480c      	ldr	r0, [pc, #48]	; (8003ae4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003ab2:	490d      	ldr	r1, [pc, #52]	; (8003ae8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003ab4:	4a0d      	ldr	r2, [pc, #52]	; (8003aec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003ab6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ab8:	e002      	b.n	8003ac0 <LoopCopyDataInit>

08003aba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003aba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003abc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003abe:	3304      	adds	r3, #4

08003ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ac0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ac2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ac4:	d3f9      	bcc.n	8003aba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ac6:	4a0a      	ldr	r2, [pc, #40]	; (8003af0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003ac8:	4c0a      	ldr	r4, [pc, #40]	; (8003af4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003aca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003acc:	e001      	b.n	8003ad2 <LoopFillZerobss>

08003ace <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ace:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ad0:	3204      	adds	r2, #4

08003ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ad2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ad4:	d3fb      	bcc.n	8003ace <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003ad6:	f00b fe99 	bl	800f80c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ada:	f7fd fc7f 	bl	80013dc <main>
  bx  lr    
 8003ade:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003ae0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003ae4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ae8:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 8003aec:	0800fb28 	.word	0x0800fb28
  ldr r2, =_sbss
 8003af0:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8003af4:	200064e0 	.word	0x200064e0

08003af8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003af8:	e7fe      	b.n	8003af8 <ADC_IRQHandler>
	...

08003afc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b00:	4b0e      	ldr	r3, [pc, #56]	; (8003b3c <HAL_Init+0x40>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a0d      	ldr	r2, [pc, #52]	; (8003b3c <HAL_Init+0x40>)
 8003b06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b0c:	4b0b      	ldr	r3, [pc, #44]	; (8003b3c <HAL_Init+0x40>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a0a      	ldr	r2, [pc, #40]	; (8003b3c <HAL_Init+0x40>)
 8003b12:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003b18:	4b08      	ldr	r3, [pc, #32]	; (8003b3c <HAL_Init+0x40>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a07      	ldr	r2, [pc, #28]	; (8003b3c <HAL_Init+0x40>)
 8003b1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003b24:	2003      	movs	r0, #3
 8003b26:	f000 fd0e 	bl	8004546 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003b2a:	200f      	movs	r0, #15
 8003b2c:	f7ff fee6 	bl	80038fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003b30:	f7ff fc62 	bl	80033f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	bd80      	pop	{r7, pc}
 8003b3a:	bf00      	nop
 8003b3c:	40023c00 	.word	0x40023c00

08003b40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003b40:	b480      	push	{r7}
 8003b42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003b44:	4b06      	ldr	r3, [pc, #24]	; (8003b60 <HAL_IncTick+0x20>)
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	461a      	mov	r2, r3
 8003b4a:	4b06      	ldr	r3, [pc, #24]	; (8003b64 <HAL_IncTick+0x24>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4413      	add	r3, r2
 8003b50:	4a04      	ldr	r2, [pc, #16]	; (8003b64 <HAL_IncTick+0x24>)
 8003b52:	6013      	str	r3, [r2, #0]
}
 8003b54:	bf00      	nop
 8003b56:	46bd      	mov	sp, r7
 8003b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5c:	4770      	bx	lr
 8003b5e:	bf00      	nop
 8003b60:	20000058 	.word	0x20000058
 8003b64:	20000ba4 	.word	0x20000ba4

08003b68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003b68:	b480      	push	{r7}
 8003b6a:	af00      	add	r7, sp, #0
  return uwTick;
 8003b6c:	4b03      	ldr	r3, [pc, #12]	; (8003b7c <HAL_GetTick+0x14>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
}
 8003b70:	4618      	mov	r0, r3
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	20000ba4 	.word	0x20000ba4

08003b80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b084      	sub	sp, #16
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b88:	f7ff ffee 	bl	8003b68 <HAL_GetTick>
 8003b8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b98:	d005      	beq.n	8003ba6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b9a:	4b0a      	ldr	r3, [pc, #40]	; (8003bc4 <HAL_Delay+0x44>)
 8003b9c:	781b      	ldrb	r3, [r3, #0]
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	4413      	add	r3, r2
 8003ba4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003ba6:	bf00      	nop
 8003ba8:	f7ff ffde 	bl	8003b68 <HAL_GetTick>
 8003bac:	4602      	mov	r2, r0
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	68fa      	ldr	r2, [r7, #12]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d8f7      	bhi.n	8003ba8 <HAL_Delay+0x28>
  {
  }
}
 8003bb8:	bf00      	nop
 8003bba:	bf00      	nop
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	20000058 	.word	0x20000058

08003bc8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d101      	bne.n	8003bde <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	e033      	b.n	8003c46 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d109      	bne.n	8003bfa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f7ff fc32 	bl	8003450 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfe:	f003 0310 	and.w	r3, r3, #16
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d118      	bne.n	8003c38 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003c0e:	f023 0302 	bic.w	r3, r3, #2
 8003c12:	f043 0202 	orr.w	r2, r3, #2
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 fa68 	bl	80040f0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2a:	f023 0303 	bic.w	r3, r3, #3
 8003c2e:	f043 0201 	orr.w	r2, r3, #1
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	641a      	str	r2, [r3, #64]	; 0x40
 8003c36:	e001      	b.n	8003c3c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
	...

08003c50 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b086      	sub	sp, #24
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d101      	bne.n	8003c6e <HAL_ADC_Start_DMA+0x1e>
 8003c6a:	2302      	movs	r3, #2
 8003c6c:	e0e9      	b.n	8003e42 <HAL_ADC_Start_DMA+0x1f2>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2201      	movs	r2, #1
 8003c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	f003 0301 	and.w	r3, r3, #1
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d018      	beq.n	8003cb6 <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	689a      	ldr	r2, [r3, #8]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f042 0201 	orr.w	r2, r2, #1
 8003c92:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003c94:	4b6d      	ldr	r3, [pc, #436]	; (8003e4c <HAL_ADC_Start_DMA+0x1fc>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a6d      	ldr	r2, [pc, #436]	; (8003e50 <HAL_ADC_Start_DMA+0x200>)
 8003c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c9e:	0c9a      	lsrs	r2, r3, #18
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	005b      	lsls	r3, r3, #1
 8003ca4:	4413      	add	r3, r2
 8003ca6:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003ca8:	e002      	b.n	8003cb0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	3b01      	subs	r3, #1
 8003cae:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d1f9      	bne.n	8003caa <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cc4:	d107      	bne.n	8003cd6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	689a      	ldr	r2, [r3, #8]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003cd4:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	f003 0301 	and.w	r3, r3, #1
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	f040 80a1 	bne.w	8003e28 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cea:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003cee:	f023 0301 	bic.w	r3, r3, #1
 8003cf2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d007      	beq.n	8003d18 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003d10:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d24:	d106      	bne.n	8003d34 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d2a:	f023 0206 	bic.w	r2, r3, #6
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	645a      	str	r2, [r3, #68]	; 0x44
 8003d32:	e002      	b.n	8003d3a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003d42:	4b44      	ldr	r3, [pc, #272]	; (8003e54 <HAL_ADC_Start_DMA+0x204>)
 8003d44:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4a:	4a43      	ldr	r2, [pc, #268]	; (8003e58 <HAL_ADC_Start_DMA+0x208>)
 8003d4c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d52:	4a42      	ldr	r2, [pc, #264]	; (8003e5c <HAL_ADC_Start_DMA+0x20c>)
 8003d54:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d5a:	4a41      	ldr	r2, [pc, #260]	; (8003e60 <HAL_ADC_Start_DMA+0x210>)
 8003d5c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003d66:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	685a      	ldr	r2, [r3, #4]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8003d76:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	689a      	ldr	r2, [r3, #8]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d86:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	334c      	adds	r3, #76	; 0x4c
 8003d92:	4619      	mov	r1, r3
 8003d94:	68ba      	ldr	r2, [r7, #8]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f000 fcb8 	bl	800470c <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f003 031f 	and.w	r3, r3, #31
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d12a      	bne.n	8003dfe <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a2d      	ldr	r2, [pc, #180]	; (8003e64 <HAL_ADC_Start_DMA+0x214>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d015      	beq.n	8003dde <HAL_ADC_Start_DMA+0x18e>
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a2c      	ldr	r2, [pc, #176]	; (8003e68 <HAL_ADC_Start_DMA+0x218>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d105      	bne.n	8003dc8 <HAL_ADC_Start_DMA+0x178>
 8003dbc:	4b25      	ldr	r3, [pc, #148]	; (8003e54 <HAL_ADC_Start_DMA+0x204>)
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f003 031f 	and.w	r3, r3, #31
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00a      	beq.n	8003dde <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a27      	ldr	r2, [pc, #156]	; (8003e6c <HAL_ADC_Start_DMA+0x21c>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d136      	bne.n	8003e40 <HAL_ADC_Start_DMA+0x1f0>
 8003dd2:	4b20      	ldr	r3, [pc, #128]	; (8003e54 <HAL_ADC_Start_DMA+0x204>)
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f003 0310 	and.w	r3, r3, #16
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d130      	bne.n	8003e40 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	689b      	ldr	r3, [r3, #8]
 8003de4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d129      	bne.n	8003e40 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	689a      	ldr	r2, [r3, #8]
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003dfa:	609a      	str	r2, [r3, #8]
 8003dfc:	e020      	b.n	8003e40 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a18      	ldr	r2, [pc, #96]	; (8003e64 <HAL_ADC_Start_DMA+0x214>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d11b      	bne.n	8003e40 <HAL_ADC_Start_DMA+0x1f0>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d114      	bne.n	8003e40 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	689a      	ldr	r2, [r3, #8]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003e24:	609a      	str	r2, [r3, #8]
 8003e26:	e00b      	b.n	8003e40 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2c:	f043 0210 	orr.w	r2, r3, #16
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e38:	f043 0201 	orr.w	r2, r3, #1
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3718      	adds	r7, #24
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	20000050 	.word	0x20000050
 8003e50:	431bde83 	.word	0x431bde83
 8003e54:	40012300 	.word	0x40012300
 8003e58:	080042e9 	.word	0x080042e9
 8003e5c:	080043a3 	.word	0x080043a3
 8003e60:	080043bf 	.word	0x080043bf
 8003e64:	40012000 	.word	0x40012000
 8003e68:	40012100 	.word	0x40012100
 8003e6c:	40012200 	.word	0x40012200

08003e70 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b083      	sub	sp, #12
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003e78:	bf00      	nop
 8003e7a:	370c      	adds	r7, #12
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e82:	4770      	bx	lr

08003e84 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr

08003e98 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b083      	sub	sp, #12
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr

08003eac <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d101      	bne.n	8003ec8 <HAL_ADC_ConfigChannel+0x1c>
 8003ec4:	2302      	movs	r3, #2
 8003ec6:	e105      	b.n	80040d4 <HAL_ADC_ConfigChannel+0x228>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2b09      	cmp	r3, #9
 8003ed6:	d925      	bls.n	8003f24 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68d9      	ldr	r1, [r3, #12]
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	461a      	mov	r2, r3
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	005b      	lsls	r3, r3, #1
 8003eea:	4413      	add	r3, r2
 8003eec:	3b1e      	subs	r3, #30
 8003eee:	2207      	movs	r2, #7
 8003ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ef4:	43da      	mvns	r2, r3
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	400a      	ands	r2, r1
 8003efc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68d9      	ldr	r1, [r3, #12]
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	689a      	ldr	r2, [r3, #8]
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	4618      	mov	r0, r3
 8003f10:	4603      	mov	r3, r0
 8003f12:	005b      	lsls	r3, r3, #1
 8003f14:	4403      	add	r3, r0
 8003f16:	3b1e      	subs	r3, #30
 8003f18:	409a      	lsls	r2, r3
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	60da      	str	r2, [r3, #12]
 8003f22:	e022      	b.n	8003f6a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	6919      	ldr	r1, [r3, #16]
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	b29b      	uxth	r3, r3
 8003f30:	461a      	mov	r2, r3
 8003f32:	4613      	mov	r3, r2
 8003f34:	005b      	lsls	r3, r3, #1
 8003f36:	4413      	add	r3, r2
 8003f38:	2207      	movs	r2, #7
 8003f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3e:	43da      	mvns	r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	400a      	ands	r2, r1
 8003f46:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6919      	ldr	r1, [r3, #16]
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	689a      	ldr	r2, [r3, #8]
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	4618      	mov	r0, r3
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	005b      	lsls	r3, r3, #1
 8003f5e:	4403      	add	r3, r0
 8003f60:	409a      	lsls	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	430a      	orrs	r2, r1
 8003f68:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	2b06      	cmp	r3, #6
 8003f70:	d824      	bhi.n	8003fbc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	685a      	ldr	r2, [r3, #4]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	4413      	add	r3, r2
 8003f82:	3b05      	subs	r3, #5
 8003f84:	221f      	movs	r2, #31
 8003f86:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8a:	43da      	mvns	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	400a      	ands	r2, r1
 8003f92:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	685a      	ldr	r2, [r3, #4]
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	4413      	add	r3, r2
 8003fac:	3b05      	subs	r3, #5
 8003fae:	fa00 f203 	lsl.w	r2, r0, r3
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	635a      	str	r2, [r3, #52]	; 0x34
 8003fba:	e04c      	b.n	8004056 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	2b0c      	cmp	r3, #12
 8003fc2:	d824      	bhi.n	800400e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	685a      	ldr	r2, [r3, #4]
 8003fce:	4613      	mov	r3, r2
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	4413      	add	r3, r2
 8003fd4:	3b23      	subs	r3, #35	; 0x23
 8003fd6:	221f      	movs	r2, #31
 8003fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fdc:	43da      	mvns	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	400a      	ands	r2, r1
 8003fe4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	b29b      	uxth	r3, r3
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	685a      	ldr	r2, [r3, #4]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	4413      	add	r3, r2
 8003ffe:	3b23      	subs	r3, #35	; 0x23
 8004000:	fa00 f203 	lsl.w	r2, r0, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	430a      	orrs	r2, r1
 800400a:	631a      	str	r2, [r3, #48]	; 0x30
 800400c:	e023      	b.n	8004056 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	685a      	ldr	r2, [r3, #4]
 8004018:	4613      	mov	r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	4413      	add	r3, r2
 800401e:	3b41      	subs	r3, #65	; 0x41
 8004020:	221f      	movs	r2, #31
 8004022:	fa02 f303 	lsl.w	r3, r2, r3
 8004026:	43da      	mvns	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	400a      	ands	r2, r1
 800402e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	b29b      	uxth	r3, r3
 800403c:	4618      	mov	r0, r3
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	685a      	ldr	r2, [r3, #4]
 8004042:	4613      	mov	r3, r2
 8004044:	009b      	lsls	r3, r3, #2
 8004046:	4413      	add	r3, r2
 8004048:	3b41      	subs	r3, #65	; 0x41
 800404a:	fa00 f203 	lsl.w	r2, r0, r3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	430a      	orrs	r2, r1
 8004054:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004056:	4b22      	ldr	r3, [pc, #136]	; (80040e0 <HAL_ADC_ConfigChannel+0x234>)
 8004058:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a21      	ldr	r2, [pc, #132]	; (80040e4 <HAL_ADC_ConfigChannel+0x238>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d109      	bne.n	8004078 <HAL_ADC_ConfigChannel+0x1cc>
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2b12      	cmp	r3, #18
 800406a:	d105      	bne.n	8004078 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a19      	ldr	r2, [pc, #100]	; (80040e4 <HAL_ADC_ConfigChannel+0x238>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d123      	bne.n	80040ca <HAL_ADC_ConfigChannel+0x21e>
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	2b10      	cmp	r3, #16
 8004088:	d003      	beq.n	8004092 <HAL_ADC_ConfigChannel+0x1e6>
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2b11      	cmp	r3, #17
 8004090:	d11b      	bne.n	80040ca <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2b10      	cmp	r3, #16
 80040a4:	d111      	bne.n	80040ca <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80040a6:	4b10      	ldr	r3, [pc, #64]	; (80040e8 <HAL_ADC_ConfigChannel+0x23c>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a10      	ldr	r2, [pc, #64]	; (80040ec <HAL_ADC_ConfigChannel+0x240>)
 80040ac:	fba2 2303 	umull	r2, r3, r2, r3
 80040b0:	0c9a      	lsrs	r2, r3, #18
 80040b2:	4613      	mov	r3, r2
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	4413      	add	r3, r2
 80040b8:	005b      	lsls	r3, r3, #1
 80040ba:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80040bc:	e002      	b.n	80040c4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80040be:	68bb      	ldr	r3, [r7, #8]
 80040c0:	3b01      	subs	r3, #1
 80040c2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d1f9      	bne.n	80040be <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3714      	adds	r7, #20
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr
 80040e0:	40012300 	.word	0x40012300
 80040e4:	40012000 	.word	0x40012000
 80040e8:	20000050 	.word	0x20000050
 80040ec:	431bde83 	.word	0x431bde83

080040f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80040f8:	4b79      	ldr	r3, [pc, #484]	; (80042e0 <ADC_Init+0x1f0>)
 80040fa:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	685a      	ldr	r2, [r3, #4]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	431a      	orrs	r2, r3
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	685a      	ldr	r2, [r3, #4]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004124:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	6859      	ldr	r1, [r3, #4]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	691b      	ldr	r3, [r3, #16]
 8004130:	021a      	lsls	r2, r3, #8
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	430a      	orrs	r2, r1
 8004138:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	685a      	ldr	r2, [r3, #4]
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004148:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	6859      	ldr	r1, [r3, #4]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	689a      	ldr	r2, [r3, #8]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	430a      	orrs	r2, r1
 800415a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	689a      	ldr	r2, [r3, #8]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800416a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	6899      	ldr	r1, [r3, #8]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	68da      	ldr	r2, [r3, #12]
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	430a      	orrs	r2, r1
 800417c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004182:	4a58      	ldr	r2, [pc, #352]	; (80042e4 <ADC_Init+0x1f4>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d022      	beq.n	80041ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	689a      	ldr	r2, [r3, #8]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004196:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	6899      	ldr	r1, [r3, #8]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	430a      	orrs	r2, r1
 80041a8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	689a      	ldr	r2, [r3, #8]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80041b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	6899      	ldr	r1, [r3, #8]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	430a      	orrs	r2, r1
 80041ca:	609a      	str	r2, [r3, #8]
 80041cc:	e00f      	b.n	80041ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	689a      	ldr	r2, [r3, #8]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80041dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	689a      	ldr	r2, [r3, #8]
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80041ec:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	689a      	ldr	r2, [r3, #8]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f022 0202 	bic.w	r2, r2, #2
 80041fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	6899      	ldr	r1, [r3, #8]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	7e1b      	ldrb	r3, [r3, #24]
 8004208:	005a      	lsls	r2, r3, #1
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	430a      	orrs	r2, r1
 8004210:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d01b      	beq.n	8004254 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	685a      	ldr	r2, [r3, #4]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800422a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	685a      	ldr	r2, [r3, #4]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800423a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	6859      	ldr	r1, [r3, #4]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004246:	3b01      	subs	r3, #1
 8004248:	035a      	lsls	r2, r3, #13
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	430a      	orrs	r2, r1
 8004250:	605a      	str	r2, [r3, #4]
 8004252:	e007      	b.n	8004264 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	685a      	ldr	r2, [r3, #4]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004262:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004272:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	69db      	ldr	r3, [r3, #28]
 800427e:	3b01      	subs	r3, #1
 8004280:	051a      	lsls	r2, r3, #20
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	430a      	orrs	r2, r1
 8004288:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	689a      	ldr	r2, [r3, #8]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004298:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	6899      	ldr	r1, [r3, #8]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80042a6:	025a      	lsls	r2, r3, #9
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	430a      	orrs	r2, r1
 80042ae:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	689a      	ldr	r2, [r3, #8]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	6899      	ldr	r1, [r3, #8]
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	029a      	lsls	r2, r3, #10
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	430a      	orrs	r2, r1
 80042d2:	609a      	str	r2, [r3, #8]
}
 80042d4:	bf00      	nop
 80042d6:	3714      	adds	r7, #20
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr
 80042e0:	40012300 	.word	0x40012300
 80042e4:	0f000001 	.word	0x0f000001

080042e8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fa:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d13c      	bne.n	800437c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004306:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004318:	2b00      	cmp	r3, #0
 800431a:	d12b      	bne.n	8004374 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004320:	2b00      	cmp	r3, #0
 8004322:	d127      	bne.n	8004374 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800432e:	2b00      	cmp	r3, #0
 8004330:	d006      	beq.n	8004340 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800433c:	2b00      	cmp	r3, #0
 800433e:	d119      	bne.n	8004374 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	685a      	ldr	r2, [r3, #4]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f022 0220 	bic.w	r2, r2, #32
 800434e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004354:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004360:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d105      	bne.n	8004374 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436c:	f043 0201 	orr.w	r2, r3, #1
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004374:	68f8      	ldr	r0, [r7, #12]
 8004376:	f7ff fd7b 	bl	8003e70 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800437a:	e00e      	b.n	800439a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004380:	f003 0310 	and.w	r3, r3, #16
 8004384:	2b00      	cmp	r3, #0
 8004386:	d003      	beq.n	8004390 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004388:	68f8      	ldr	r0, [r7, #12]
 800438a:	f7ff fd85 	bl	8003e98 <HAL_ADC_ErrorCallback>
}
 800438e:	e004      	b.n	800439a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	4798      	blx	r3
}
 800439a:	bf00      	nop
 800439c:	3710      	adds	r7, #16
 800439e:	46bd      	mov	sp, r7
 80043a0:	bd80      	pop	{r7, pc}

080043a2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b084      	sub	sp, #16
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ae:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80043b0:	68f8      	ldr	r0, [r7, #12]
 80043b2:	f7ff fd67 	bl	8003e84 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80043b6:	bf00      	nop
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	b084      	sub	sp, #16
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ca:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2240      	movs	r2, #64	; 0x40
 80043d0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043d6:	f043 0204 	orr.w	r2, r3, #4
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80043de:	68f8      	ldr	r0, [r7, #12]
 80043e0:	f7ff fd5a 	bl	8003e98 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80043e4:	bf00      	nop
 80043e6:	3710      	adds	r7, #16
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b085      	sub	sp, #20
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f003 0307 	and.w	r3, r3, #7
 80043fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043fc:	4b0c      	ldr	r3, [pc, #48]	; (8004430 <__NVIC_SetPriorityGrouping+0x44>)
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004402:	68ba      	ldr	r2, [r7, #8]
 8004404:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004408:	4013      	ands	r3, r2
 800440a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004414:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004418:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800441c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800441e:	4a04      	ldr	r2, [pc, #16]	; (8004430 <__NVIC_SetPriorityGrouping+0x44>)
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	60d3      	str	r3, [r2, #12]
}
 8004424:	bf00      	nop
 8004426:	3714      	adds	r7, #20
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr
 8004430:	e000ed00 	.word	0xe000ed00

08004434 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004434:	b480      	push	{r7}
 8004436:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004438:	4b04      	ldr	r3, [pc, #16]	; (800444c <__NVIC_GetPriorityGrouping+0x18>)
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	0a1b      	lsrs	r3, r3, #8
 800443e:	f003 0307 	and.w	r3, r3, #7
}
 8004442:	4618      	mov	r0, r3
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr
 800444c:	e000ed00 	.word	0xe000ed00

08004450 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004450:	b480      	push	{r7}
 8004452:	b083      	sub	sp, #12
 8004454:	af00      	add	r7, sp, #0
 8004456:	4603      	mov	r3, r0
 8004458:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800445a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800445e:	2b00      	cmp	r3, #0
 8004460:	db0b      	blt.n	800447a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004462:	79fb      	ldrb	r3, [r7, #7]
 8004464:	f003 021f 	and.w	r2, r3, #31
 8004468:	4907      	ldr	r1, [pc, #28]	; (8004488 <__NVIC_EnableIRQ+0x38>)
 800446a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800446e:	095b      	lsrs	r3, r3, #5
 8004470:	2001      	movs	r0, #1
 8004472:	fa00 f202 	lsl.w	r2, r0, r2
 8004476:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800447a:	bf00      	nop
 800447c:	370c      	adds	r7, #12
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	e000e100 	.word	0xe000e100

0800448c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800448c:	b480      	push	{r7}
 800448e:	b083      	sub	sp, #12
 8004490:	af00      	add	r7, sp, #0
 8004492:	4603      	mov	r3, r0
 8004494:	6039      	str	r1, [r7, #0]
 8004496:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004498:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800449c:	2b00      	cmp	r3, #0
 800449e:	db0a      	blt.n	80044b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	b2da      	uxtb	r2, r3
 80044a4:	490c      	ldr	r1, [pc, #48]	; (80044d8 <__NVIC_SetPriority+0x4c>)
 80044a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044aa:	0112      	lsls	r2, r2, #4
 80044ac:	b2d2      	uxtb	r2, r2
 80044ae:	440b      	add	r3, r1
 80044b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80044b4:	e00a      	b.n	80044cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	b2da      	uxtb	r2, r3
 80044ba:	4908      	ldr	r1, [pc, #32]	; (80044dc <__NVIC_SetPriority+0x50>)
 80044bc:	79fb      	ldrb	r3, [r7, #7]
 80044be:	f003 030f 	and.w	r3, r3, #15
 80044c2:	3b04      	subs	r3, #4
 80044c4:	0112      	lsls	r2, r2, #4
 80044c6:	b2d2      	uxtb	r2, r2
 80044c8:	440b      	add	r3, r1
 80044ca:	761a      	strb	r2, [r3, #24]
}
 80044cc:	bf00      	nop
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr
 80044d8:	e000e100 	.word	0xe000e100
 80044dc:	e000ed00 	.word	0xe000ed00

080044e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b089      	sub	sp, #36	; 0x24
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f003 0307 	and.w	r3, r3, #7
 80044f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80044f4:	69fb      	ldr	r3, [r7, #28]
 80044f6:	f1c3 0307 	rsb	r3, r3, #7
 80044fa:	2b04      	cmp	r3, #4
 80044fc:	bf28      	it	cs
 80044fe:	2304      	movcs	r3, #4
 8004500:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	3304      	adds	r3, #4
 8004506:	2b06      	cmp	r3, #6
 8004508:	d902      	bls.n	8004510 <NVIC_EncodePriority+0x30>
 800450a:	69fb      	ldr	r3, [r7, #28]
 800450c:	3b03      	subs	r3, #3
 800450e:	e000      	b.n	8004512 <NVIC_EncodePriority+0x32>
 8004510:	2300      	movs	r3, #0
 8004512:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004514:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	fa02 f303 	lsl.w	r3, r2, r3
 800451e:	43da      	mvns	r2, r3
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	401a      	ands	r2, r3
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004528:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	fa01 f303 	lsl.w	r3, r1, r3
 8004532:	43d9      	mvns	r1, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004538:	4313      	orrs	r3, r2
         );
}
 800453a:	4618      	mov	r0, r3
 800453c:	3724      	adds	r7, #36	; 0x24
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr

08004546 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b082      	sub	sp, #8
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f7ff ff4c 	bl	80043ec <__NVIC_SetPriorityGrouping>
}
 8004554:	bf00      	nop
 8004556:	3708      	adds	r7, #8
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800455c:	b580      	push	{r7, lr}
 800455e:	b086      	sub	sp, #24
 8004560:	af00      	add	r7, sp, #0
 8004562:	4603      	mov	r3, r0
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	607a      	str	r2, [r7, #4]
 8004568:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800456a:	2300      	movs	r3, #0
 800456c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800456e:	f7ff ff61 	bl	8004434 <__NVIC_GetPriorityGrouping>
 8004572:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	68b9      	ldr	r1, [r7, #8]
 8004578:	6978      	ldr	r0, [r7, #20]
 800457a:	f7ff ffb1 	bl	80044e0 <NVIC_EncodePriority>
 800457e:	4602      	mov	r2, r0
 8004580:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004584:	4611      	mov	r1, r2
 8004586:	4618      	mov	r0, r3
 8004588:	f7ff ff80 	bl	800448c <__NVIC_SetPriority>
}
 800458c:	bf00      	nop
 800458e:	3718      	adds	r7, #24
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b082      	sub	sp, #8
 8004598:	af00      	add	r7, sp, #0
 800459a:	4603      	mov	r3, r0
 800459c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800459e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045a2:	4618      	mov	r0, r3
 80045a4:	f7ff ff54 	bl	8004450 <__NVIC_EnableIRQ>
}
 80045a8:	bf00      	nop
 80045aa:	3708      	adds	r7, #8
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b086      	sub	sp, #24
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80045b8:	2300      	movs	r3, #0
 80045ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80045bc:	f7ff fad4 	bl	8003b68 <HAL_GetTick>
 80045c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d101      	bne.n	80045cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e099      	b.n	8004700 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2202      	movs	r2, #2
 80045d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f022 0201 	bic.w	r2, r2, #1
 80045ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80045ec:	e00f      	b.n	800460e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80045ee:	f7ff fabb 	bl	8003b68 <HAL_GetTick>
 80045f2:	4602      	mov	r2, r0
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	1ad3      	subs	r3, r2, r3
 80045f8:	2b05      	cmp	r3, #5
 80045fa:	d908      	bls.n	800460e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2220      	movs	r2, #32
 8004600:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2203      	movs	r2, #3
 8004606:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e078      	b.n	8004700 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f003 0301 	and.w	r3, r3, #1
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1e8      	bne.n	80045ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004624:	697a      	ldr	r2, [r7, #20]
 8004626:	4b38      	ldr	r3, [pc, #224]	; (8004708 <HAL_DMA_Init+0x158>)
 8004628:	4013      	ands	r3, r2
 800462a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	685a      	ldr	r2, [r3, #4]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	689b      	ldr	r3, [r3, #8]
 8004634:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800463a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004646:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004652:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6a1b      	ldr	r3, [r3, #32]
 8004658:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800465a:	697a      	ldr	r2, [r7, #20]
 800465c:	4313      	orrs	r3, r2
 800465e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004664:	2b04      	cmp	r3, #4
 8004666:	d107      	bne.n	8004678 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004670:	4313      	orrs	r3, r2
 8004672:	697a      	ldr	r2, [r7, #20]
 8004674:	4313      	orrs	r3, r2
 8004676:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	697a      	ldr	r2, [r7, #20]
 800467e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	f023 0307 	bic.w	r3, r3, #7
 800468e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004694:	697a      	ldr	r2, [r7, #20]
 8004696:	4313      	orrs	r3, r2
 8004698:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469e:	2b04      	cmp	r3, #4
 80046a0:	d117      	bne.n	80046d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00e      	beq.n	80046d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f000 fb01 	bl	8004cbc <DMA_CheckFifoParam>
 80046ba:	4603      	mov	r3, r0
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d008      	beq.n	80046d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2240      	movs	r2, #64	; 0x40
 80046c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2201      	movs	r2, #1
 80046ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80046ce:	2301      	movs	r3, #1
 80046d0:	e016      	b.n	8004700 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f000 fab8 	bl	8004c50 <DMA_CalcBaseAndBitshift>
 80046e0:	4603      	mov	r3, r0
 80046e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046e8:	223f      	movs	r2, #63	; 0x3f
 80046ea:	409a      	lsls	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2200      	movs	r2, #0
 80046f4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2201      	movs	r2, #1
 80046fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80046fe:	2300      	movs	r3, #0
}
 8004700:	4618      	mov	r0, r3
 8004702:	3718      	adds	r7, #24
 8004704:	46bd      	mov	sp, r7
 8004706:	bd80      	pop	{r7, pc}
 8004708:	f010803f 	.word	0xf010803f

0800470c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b086      	sub	sp, #24
 8004710:	af00      	add	r7, sp, #0
 8004712:	60f8      	str	r0, [r7, #12]
 8004714:	60b9      	str	r1, [r7, #8]
 8004716:	607a      	str	r2, [r7, #4]
 8004718:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800471a:	2300      	movs	r3, #0
 800471c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004722:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800472a:	2b01      	cmp	r3, #1
 800472c:	d101      	bne.n	8004732 <HAL_DMA_Start_IT+0x26>
 800472e:	2302      	movs	r3, #2
 8004730:	e040      	b.n	80047b4 <HAL_DMA_Start_IT+0xa8>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2201      	movs	r2, #1
 8004736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004740:	b2db      	uxtb	r3, r3
 8004742:	2b01      	cmp	r3, #1
 8004744:	d12f      	bne.n	80047a6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	2202      	movs	r2, #2
 800474a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2200      	movs	r2, #0
 8004752:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	68b9      	ldr	r1, [r7, #8]
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f000 fa4a 	bl	8004bf4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004764:	223f      	movs	r2, #63	; 0x3f
 8004766:	409a      	lsls	r2, r3
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f042 0216 	orr.w	r2, r2, #22
 800477a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004780:	2b00      	cmp	r3, #0
 8004782:	d007      	beq.n	8004794 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681a      	ldr	r2, [r3, #0]
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f042 0208 	orr.w	r2, r2, #8
 8004792:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f042 0201 	orr.w	r2, r2, #1
 80047a2:	601a      	str	r2, [r3, #0]
 80047a4:	e005      	b.n	80047b2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2200      	movs	r2, #0
 80047aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80047ae:	2302      	movs	r3, #2
 80047b0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80047b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80047b4:	4618      	mov	r0, r3
 80047b6:	3718      	adds	r7, #24
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047c8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80047ca:	f7ff f9cd 	bl	8003b68 <HAL_GetTick>
 80047ce:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d008      	beq.n	80047ee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2280      	movs	r2, #128	; 0x80
 80047e0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e052      	b.n	8004894 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f022 0216 	bic.w	r2, r2, #22
 80047fc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	695a      	ldr	r2, [r3, #20]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800480c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004812:	2b00      	cmp	r3, #0
 8004814:	d103      	bne.n	800481e <HAL_DMA_Abort+0x62>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800481a:	2b00      	cmp	r3, #0
 800481c:	d007      	beq.n	800482e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f022 0208 	bic.w	r2, r2, #8
 800482c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f022 0201 	bic.w	r2, r2, #1
 800483c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800483e:	e013      	b.n	8004868 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004840:	f7ff f992 	bl	8003b68 <HAL_GetTick>
 8004844:	4602      	mov	r2, r0
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	1ad3      	subs	r3, r2, r3
 800484a:	2b05      	cmp	r3, #5
 800484c:	d90c      	bls.n	8004868 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2220      	movs	r2, #32
 8004852:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	2203      	movs	r2, #3
 8004858:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004864:	2303      	movs	r3, #3
 8004866:	e015      	b.n	8004894 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	2b00      	cmp	r3, #0
 8004874:	d1e4      	bne.n	8004840 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800487a:	223f      	movs	r2, #63	; 0x3f
 800487c:	409a      	lsls	r2, r3
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004892:	2300      	movs	r3, #0
}
 8004894:	4618      	mov	r0, r3
 8004896:	3710      	adds	r7, #16
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80048aa:	b2db      	uxtb	r3, r3
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d004      	beq.n	80048ba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2280      	movs	r2, #128	; 0x80
 80048b4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e00c      	b.n	80048d4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2205      	movs	r2, #5
 80048be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f022 0201 	bic.w	r2, r2, #1
 80048d0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b086      	sub	sp, #24
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80048e8:	2300      	movs	r3, #0
 80048ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80048ec:	4b8e      	ldr	r3, [pc, #568]	; (8004b28 <HAL_DMA_IRQHandler+0x248>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4a8e      	ldr	r2, [pc, #568]	; (8004b2c <HAL_DMA_IRQHandler+0x24c>)
 80048f2:	fba2 2303 	umull	r2, r3, r2, r3
 80048f6:	0a9b      	lsrs	r3, r3, #10
 80048f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800490a:	2208      	movs	r2, #8
 800490c:	409a      	lsls	r2, r3
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	4013      	ands	r3, r2
 8004912:	2b00      	cmp	r3, #0
 8004914:	d01a      	beq.n	800494c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0304 	and.w	r3, r3, #4
 8004920:	2b00      	cmp	r3, #0
 8004922:	d013      	beq.n	800494c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f022 0204 	bic.w	r2, r2, #4
 8004932:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004938:	2208      	movs	r2, #8
 800493a:	409a      	lsls	r2, r3
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004944:	f043 0201 	orr.w	r2, r3, #1
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004950:	2201      	movs	r2, #1
 8004952:	409a      	lsls	r2, r3
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	4013      	ands	r3, r2
 8004958:	2b00      	cmp	r3, #0
 800495a:	d012      	beq.n	8004982 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004966:	2b00      	cmp	r3, #0
 8004968:	d00b      	beq.n	8004982 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800496e:	2201      	movs	r2, #1
 8004970:	409a      	lsls	r2, r3
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800497a:	f043 0202 	orr.w	r2, r3, #2
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004986:	2204      	movs	r2, #4
 8004988:	409a      	lsls	r2, r3
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	4013      	ands	r3, r2
 800498e:	2b00      	cmp	r3, #0
 8004990:	d012      	beq.n	80049b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0302 	and.w	r3, r3, #2
 800499c:	2b00      	cmp	r3, #0
 800499e:	d00b      	beq.n	80049b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049a4:	2204      	movs	r2, #4
 80049a6:	409a      	lsls	r2, r3
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049b0:	f043 0204 	orr.w	r2, r3, #4
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049bc:	2210      	movs	r2, #16
 80049be:	409a      	lsls	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	4013      	ands	r3, r2
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d043      	beq.n	8004a50 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0308 	and.w	r3, r3, #8
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d03c      	beq.n	8004a50 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049da:	2210      	movs	r2, #16
 80049dc:	409a      	lsls	r2, r3
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d018      	beq.n	8004a22 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d108      	bne.n	8004a10 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d024      	beq.n	8004a50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	4798      	blx	r3
 8004a0e:	e01f      	b.n	8004a50 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d01b      	beq.n	8004a50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a1c:	6878      	ldr	r0, [r7, #4]
 8004a1e:	4798      	blx	r3
 8004a20:	e016      	b.n	8004a50 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d107      	bne.n	8004a40 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f022 0208 	bic.w	r2, r2, #8
 8004a3e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d003      	beq.n	8004a50 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4c:	6878      	ldr	r0, [r7, #4]
 8004a4e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a54:	2220      	movs	r2, #32
 8004a56:	409a      	lsls	r2, r3
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	f000 808f 	beq.w	8004b80 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0310 	and.w	r3, r3, #16
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	f000 8087 	beq.w	8004b80 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a76:	2220      	movs	r2, #32
 8004a78:	409a      	lsls	r2, r3
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	2b05      	cmp	r3, #5
 8004a88:	d136      	bne.n	8004af8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681a      	ldr	r2, [r3, #0]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f022 0216 	bic.w	r2, r2, #22
 8004a98:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	695a      	ldr	r2, [r3, #20]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004aa8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d103      	bne.n	8004aba <HAL_DMA_IRQHandler+0x1da>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d007      	beq.n	8004aca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	681a      	ldr	r2, [r3, #0]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f022 0208 	bic.w	r2, r2, #8
 8004ac8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ace:	223f      	movs	r2, #63	; 0x3f
 8004ad0:	409a      	lsls	r2, r3
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d07e      	beq.n	8004bec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	4798      	blx	r3
        }
        return;
 8004af6:	e079      	b.n	8004bec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d01d      	beq.n	8004b42 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d10d      	bne.n	8004b30 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d031      	beq.n	8004b80 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	4798      	blx	r3
 8004b24:	e02c      	b.n	8004b80 <HAL_DMA_IRQHandler+0x2a0>
 8004b26:	bf00      	nop
 8004b28:	20000050 	.word	0x20000050
 8004b2c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d023      	beq.n	8004b80 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	4798      	blx	r3
 8004b40:	e01e      	b.n	8004b80 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d10f      	bne.n	8004b70 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f022 0210 	bic.w	r2, r2, #16
 8004b5e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d003      	beq.n	8004b80 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d032      	beq.n	8004bee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b8c:	f003 0301 	and.w	r3, r3, #1
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d022      	beq.n	8004bda <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2205      	movs	r2, #5
 8004b98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f022 0201 	bic.w	r2, r2, #1
 8004baa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	3301      	adds	r3, #1
 8004bb0:	60bb      	str	r3, [r7, #8]
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d307      	bcc.n	8004bc8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0301 	and.w	r3, r3, #1
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1f2      	bne.n	8004bac <HAL_DMA_IRQHandler+0x2cc>
 8004bc6:	e000      	b.n	8004bca <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004bc8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2201      	movs	r2, #1
 8004bce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d005      	beq.n	8004bee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	4798      	blx	r3
 8004bea:	e000      	b.n	8004bee <HAL_DMA_IRQHandler+0x30e>
        return;
 8004bec:	bf00      	nop
    }
  }
}
 8004bee:	3718      	adds	r7, #24
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}

08004bf4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	60f8      	str	r0, [r7, #12]
 8004bfc:	60b9      	str	r1, [r7, #8]
 8004bfe:	607a      	str	r2, [r7, #4]
 8004c00:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004c10:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	683a      	ldr	r2, [r7, #0]
 8004c18:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	2b40      	cmp	r3, #64	; 0x40
 8004c20:	d108      	bne.n	8004c34 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68ba      	ldr	r2, [r7, #8]
 8004c30:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004c32:	e007      	b.n	8004c44 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68ba      	ldr	r2, [r7, #8]
 8004c3a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	60da      	str	r2, [r3, #12]
}
 8004c44:	bf00      	nop
 8004c46:	3714      	adds	r7, #20
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4e:	4770      	bx	lr

08004c50 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b085      	sub	sp, #20
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	3b10      	subs	r3, #16
 8004c60:	4a14      	ldr	r2, [pc, #80]	; (8004cb4 <DMA_CalcBaseAndBitshift+0x64>)
 8004c62:	fba2 2303 	umull	r2, r3, r2, r3
 8004c66:	091b      	lsrs	r3, r3, #4
 8004c68:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004c6a:	4a13      	ldr	r2, [pc, #76]	; (8004cb8 <DMA_CalcBaseAndBitshift+0x68>)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	4413      	add	r3, r2
 8004c70:	781b      	ldrb	r3, [r3, #0]
 8004c72:	461a      	mov	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	2b03      	cmp	r3, #3
 8004c7c:	d909      	bls.n	8004c92 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004c86:	f023 0303 	bic.w	r3, r3, #3
 8004c8a:	1d1a      	adds	r2, r3, #4
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	659a      	str	r2, [r3, #88]	; 0x58
 8004c90:	e007      	b.n	8004ca2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004c9a:	f023 0303 	bic.w	r3, r3, #3
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	3714      	adds	r7, #20
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	aaaaaaab 	.word	0xaaaaaaab
 8004cb8:	0800fb10 	.word	0x0800fb10

08004cbc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ccc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d11f      	bne.n	8004d16 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004cd6:	68bb      	ldr	r3, [r7, #8]
 8004cd8:	2b03      	cmp	r3, #3
 8004cda:	d856      	bhi.n	8004d8a <DMA_CheckFifoParam+0xce>
 8004cdc:	a201      	add	r2, pc, #4	; (adr r2, 8004ce4 <DMA_CheckFifoParam+0x28>)
 8004cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce2:	bf00      	nop
 8004ce4:	08004cf5 	.word	0x08004cf5
 8004ce8:	08004d07 	.word	0x08004d07
 8004cec:	08004cf5 	.word	0x08004cf5
 8004cf0:	08004d8b 	.word	0x08004d8b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d046      	beq.n	8004d8e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d04:	e043      	b.n	8004d8e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d0e:	d140      	bne.n	8004d92 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004d10:	2301      	movs	r3, #1
 8004d12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d14:	e03d      	b.n	8004d92 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d1e:	d121      	bne.n	8004d64 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	2b03      	cmp	r3, #3
 8004d24:	d837      	bhi.n	8004d96 <DMA_CheckFifoParam+0xda>
 8004d26:	a201      	add	r2, pc, #4	; (adr r2, 8004d2c <DMA_CheckFifoParam+0x70>)
 8004d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d2c:	08004d3d 	.word	0x08004d3d
 8004d30:	08004d43 	.word	0x08004d43
 8004d34:	08004d3d 	.word	0x08004d3d
 8004d38:	08004d55 	.word	0x08004d55
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	73fb      	strb	r3, [r7, #15]
      break;
 8004d40:	e030      	b.n	8004da4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d025      	beq.n	8004d9a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004d4e:	2301      	movs	r3, #1
 8004d50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d52:	e022      	b.n	8004d9a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d58:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004d5c:	d11f      	bne.n	8004d9e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004d62:	e01c      	b.n	8004d9e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	2b02      	cmp	r3, #2
 8004d68:	d903      	bls.n	8004d72 <DMA_CheckFifoParam+0xb6>
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	2b03      	cmp	r3, #3
 8004d6e:	d003      	beq.n	8004d78 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004d70:	e018      	b.n	8004da4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	73fb      	strb	r3, [r7, #15]
      break;
 8004d76:	e015      	b.n	8004da4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d00e      	beq.n	8004da2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	73fb      	strb	r3, [r7, #15]
      break;
 8004d88:	e00b      	b.n	8004da2 <DMA_CheckFifoParam+0xe6>
      break;
 8004d8a:	bf00      	nop
 8004d8c:	e00a      	b.n	8004da4 <DMA_CheckFifoParam+0xe8>
      break;
 8004d8e:	bf00      	nop
 8004d90:	e008      	b.n	8004da4 <DMA_CheckFifoParam+0xe8>
      break;
 8004d92:	bf00      	nop
 8004d94:	e006      	b.n	8004da4 <DMA_CheckFifoParam+0xe8>
      break;
 8004d96:	bf00      	nop
 8004d98:	e004      	b.n	8004da4 <DMA_CheckFifoParam+0xe8>
      break;
 8004d9a:	bf00      	nop
 8004d9c:	e002      	b.n	8004da4 <DMA_CheckFifoParam+0xe8>
      break;   
 8004d9e:	bf00      	nop
 8004da0:	e000      	b.n	8004da4 <DMA_CheckFifoParam+0xe8>
      break;
 8004da2:	bf00      	nop
    }
  } 
  
  return status; 
 8004da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3714      	adds	r7, #20
 8004daa:	46bd      	mov	sp, r7
 8004dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db0:	4770      	bx	lr
 8004db2:	bf00      	nop

08004db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b089      	sub	sp, #36	; 0x24
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004dca:	2300      	movs	r3, #0
 8004dcc:	61fb      	str	r3, [r7, #28]
 8004dce:	e16b      	b.n	80050a8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	697a      	ldr	r2, [r7, #20]
 8004de0:	4013      	ands	r3, r2
 8004de2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	f040 815a 	bne.w	80050a2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	f003 0303 	and.w	r3, r3, #3
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d005      	beq.n	8004e06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e02:	2b02      	cmp	r3, #2
 8004e04:	d130      	bne.n	8004e68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	005b      	lsls	r3, r3, #1
 8004e10:	2203      	movs	r2, #3
 8004e12:	fa02 f303 	lsl.w	r3, r2, r3
 8004e16:	43db      	mvns	r3, r3
 8004e18:	69ba      	ldr	r2, [r7, #24]
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	68da      	ldr	r2, [r3, #12]
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	005b      	lsls	r3, r3, #1
 8004e26:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2a:	69ba      	ldr	r2, [r7, #24]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	69ba      	ldr	r2, [r7, #24]
 8004e34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	fa02 f303 	lsl.w	r3, r2, r3
 8004e44:	43db      	mvns	r3, r3
 8004e46:	69ba      	ldr	r2, [r7, #24]
 8004e48:	4013      	ands	r3, r2
 8004e4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	091b      	lsrs	r3, r3, #4
 8004e52:	f003 0201 	and.w	r2, r3, #1
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5c:	69ba      	ldr	r2, [r7, #24]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	69ba      	ldr	r2, [r7, #24]
 8004e66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f003 0303 	and.w	r3, r3, #3
 8004e70:	2b03      	cmp	r3, #3
 8004e72:	d017      	beq.n	8004ea4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	68db      	ldr	r3, [r3, #12]
 8004e78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	005b      	lsls	r3, r3, #1
 8004e7e:	2203      	movs	r2, #3
 8004e80:	fa02 f303 	lsl.w	r3, r2, r3
 8004e84:	43db      	mvns	r3, r3
 8004e86:	69ba      	ldr	r2, [r7, #24]
 8004e88:	4013      	ands	r3, r2
 8004e8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	689a      	ldr	r2, [r3, #8]
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	005b      	lsls	r3, r3, #1
 8004e94:	fa02 f303 	lsl.w	r3, r2, r3
 8004e98:	69ba      	ldr	r2, [r7, #24]
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	69ba      	ldr	r2, [r7, #24]
 8004ea2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f003 0303 	and.w	r3, r3, #3
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d123      	bne.n	8004ef8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	08da      	lsrs	r2, r3, #3
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	3208      	adds	r2, #8
 8004eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	f003 0307 	and.w	r3, r3, #7
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	220f      	movs	r2, #15
 8004ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ecc:	43db      	mvns	r3, r3
 8004ece:	69ba      	ldr	r2, [r7, #24]
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	691a      	ldr	r2, [r3, #16]
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	f003 0307 	and.w	r3, r3, #7
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee4:	69ba      	ldr	r2, [r7, #24]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	08da      	lsrs	r2, r3, #3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	3208      	adds	r2, #8
 8004ef2:	69b9      	ldr	r1, [r7, #24]
 8004ef4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	005b      	lsls	r3, r3, #1
 8004f02:	2203      	movs	r2, #3
 8004f04:	fa02 f303 	lsl.w	r3, r2, r3
 8004f08:	43db      	mvns	r3, r3
 8004f0a:	69ba      	ldr	r2, [r7, #24]
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f003 0203 	and.w	r2, r3, #3
 8004f18:	69fb      	ldr	r3, [r7, #28]
 8004f1a:	005b      	lsls	r3, r3, #1
 8004f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f20:	69ba      	ldr	r2, [r7, #24]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	69ba      	ldr	r2, [r7, #24]
 8004f2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f000 80b4 	beq.w	80050a2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	60fb      	str	r3, [r7, #12]
 8004f3e:	4b60      	ldr	r3, [pc, #384]	; (80050c0 <HAL_GPIO_Init+0x30c>)
 8004f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f42:	4a5f      	ldr	r2, [pc, #380]	; (80050c0 <HAL_GPIO_Init+0x30c>)
 8004f44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f48:	6453      	str	r3, [r2, #68]	; 0x44
 8004f4a:	4b5d      	ldr	r3, [pc, #372]	; (80050c0 <HAL_GPIO_Init+0x30c>)
 8004f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f52:	60fb      	str	r3, [r7, #12]
 8004f54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f56:	4a5b      	ldr	r2, [pc, #364]	; (80050c4 <HAL_GPIO_Init+0x310>)
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	089b      	lsrs	r3, r3, #2
 8004f5c:	3302      	adds	r3, #2
 8004f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	f003 0303 	and.w	r3, r3, #3
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	220f      	movs	r2, #15
 8004f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f72:	43db      	mvns	r3, r3
 8004f74:	69ba      	ldr	r2, [r7, #24]
 8004f76:	4013      	ands	r3, r2
 8004f78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a52      	ldr	r2, [pc, #328]	; (80050c8 <HAL_GPIO_Init+0x314>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d02b      	beq.n	8004fda <HAL_GPIO_Init+0x226>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a51      	ldr	r2, [pc, #324]	; (80050cc <HAL_GPIO_Init+0x318>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d025      	beq.n	8004fd6 <HAL_GPIO_Init+0x222>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	4a50      	ldr	r2, [pc, #320]	; (80050d0 <HAL_GPIO_Init+0x31c>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d01f      	beq.n	8004fd2 <HAL_GPIO_Init+0x21e>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	4a4f      	ldr	r2, [pc, #316]	; (80050d4 <HAL_GPIO_Init+0x320>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d019      	beq.n	8004fce <HAL_GPIO_Init+0x21a>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a4e      	ldr	r2, [pc, #312]	; (80050d8 <HAL_GPIO_Init+0x324>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d013      	beq.n	8004fca <HAL_GPIO_Init+0x216>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a4d      	ldr	r2, [pc, #308]	; (80050dc <HAL_GPIO_Init+0x328>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d00d      	beq.n	8004fc6 <HAL_GPIO_Init+0x212>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a4c      	ldr	r2, [pc, #304]	; (80050e0 <HAL_GPIO_Init+0x32c>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d007      	beq.n	8004fc2 <HAL_GPIO_Init+0x20e>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a4b      	ldr	r2, [pc, #300]	; (80050e4 <HAL_GPIO_Init+0x330>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d101      	bne.n	8004fbe <HAL_GPIO_Init+0x20a>
 8004fba:	2307      	movs	r3, #7
 8004fbc:	e00e      	b.n	8004fdc <HAL_GPIO_Init+0x228>
 8004fbe:	2308      	movs	r3, #8
 8004fc0:	e00c      	b.n	8004fdc <HAL_GPIO_Init+0x228>
 8004fc2:	2306      	movs	r3, #6
 8004fc4:	e00a      	b.n	8004fdc <HAL_GPIO_Init+0x228>
 8004fc6:	2305      	movs	r3, #5
 8004fc8:	e008      	b.n	8004fdc <HAL_GPIO_Init+0x228>
 8004fca:	2304      	movs	r3, #4
 8004fcc:	e006      	b.n	8004fdc <HAL_GPIO_Init+0x228>
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e004      	b.n	8004fdc <HAL_GPIO_Init+0x228>
 8004fd2:	2302      	movs	r3, #2
 8004fd4:	e002      	b.n	8004fdc <HAL_GPIO_Init+0x228>
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e000      	b.n	8004fdc <HAL_GPIO_Init+0x228>
 8004fda:	2300      	movs	r3, #0
 8004fdc:	69fa      	ldr	r2, [r7, #28]
 8004fde:	f002 0203 	and.w	r2, r2, #3
 8004fe2:	0092      	lsls	r2, r2, #2
 8004fe4:	4093      	lsls	r3, r2
 8004fe6:	69ba      	ldr	r2, [r7, #24]
 8004fe8:	4313      	orrs	r3, r2
 8004fea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004fec:	4935      	ldr	r1, [pc, #212]	; (80050c4 <HAL_GPIO_Init+0x310>)
 8004fee:	69fb      	ldr	r3, [r7, #28]
 8004ff0:	089b      	lsrs	r3, r3, #2
 8004ff2:	3302      	adds	r3, #2
 8004ff4:	69ba      	ldr	r2, [r7, #24]
 8004ff6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004ffa:	4b3b      	ldr	r3, [pc, #236]	; (80050e8 <HAL_GPIO_Init+0x334>)
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	43db      	mvns	r3, r3
 8005004:	69ba      	ldr	r2, [r7, #24]
 8005006:	4013      	ands	r3, r2
 8005008:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005012:	2b00      	cmp	r3, #0
 8005014:	d003      	beq.n	800501e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005016:	69ba      	ldr	r2, [r7, #24]
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	4313      	orrs	r3, r2
 800501c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800501e:	4a32      	ldr	r2, [pc, #200]	; (80050e8 <HAL_GPIO_Init+0x334>)
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005024:	4b30      	ldr	r3, [pc, #192]	; (80050e8 <HAL_GPIO_Init+0x334>)
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	43db      	mvns	r3, r3
 800502e:	69ba      	ldr	r2, [r7, #24]
 8005030:	4013      	ands	r3, r2
 8005032:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800503c:	2b00      	cmp	r3, #0
 800503e:	d003      	beq.n	8005048 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005040:	69ba      	ldr	r2, [r7, #24]
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	4313      	orrs	r3, r2
 8005046:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005048:	4a27      	ldr	r2, [pc, #156]	; (80050e8 <HAL_GPIO_Init+0x334>)
 800504a:	69bb      	ldr	r3, [r7, #24]
 800504c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800504e:	4b26      	ldr	r3, [pc, #152]	; (80050e8 <HAL_GPIO_Init+0x334>)
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	43db      	mvns	r3, r3
 8005058:	69ba      	ldr	r2, [r7, #24]
 800505a:	4013      	ands	r3, r2
 800505c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d003      	beq.n	8005072 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800506a:	69ba      	ldr	r2, [r7, #24]
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	4313      	orrs	r3, r2
 8005070:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005072:	4a1d      	ldr	r2, [pc, #116]	; (80050e8 <HAL_GPIO_Init+0x334>)
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005078:	4b1b      	ldr	r3, [pc, #108]	; (80050e8 <HAL_GPIO_Init+0x334>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	43db      	mvns	r3, r3
 8005082:	69ba      	ldr	r2, [r7, #24]
 8005084:	4013      	ands	r3, r2
 8005086:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005088:	683b      	ldr	r3, [r7, #0]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005090:	2b00      	cmp	r3, #0
 8005092:	d003      	beq.n	800509c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005094:	69ba      	ldr	r2, [r7, #24]
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	4313      	orrs	r3, r2
 800509a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800509c:	4a12      	ldr	r2, [pc, #72]	; (80050e8 <HAL_GPIO_Init+0x334>)
 800509e:	69bb      	ldr	r3, [r7, #24]
 80050a0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	3301      	adds	r3, #1
 80050a6:	61fb      	str	r3, [r7, #28]
 80050a8:	69fb      	ldr	r3, [r7, #28]
 80050aa:	2b0f      	cmp	r3, #15
 80050ac:	f67f ae90 	bls.w	8004dd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80050b0:	bf00      	nop
 80050b2:	bf00      	nop
 80050b4:	3724      	adds	r7, #36	; 0x24
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	40023800 	.word	0x40023800
 80050c4:	40013800 	.word	0x40013800
 80050c8:	40020000 	.word	0x40020000
 80050cc:	40020400 	.word	0x40020400
 80050d0:	40020800 	.word	0x40020800
 80050d4:	40020c00 	.word	0x40020c00
 80050d8:	40021000 	.word	0x40021000
 80050dc:	40021400 	.word	0x40021400
 80050e0:	40021800 	.word	0x40021800
 80050e4:	40021c00 	.word	0x40021c00
 80050e8:	40013c00 	.word	0x40013c00

080050ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b085      	sub	sp, #20
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	460b      	mov	r3, r1
 80050f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	691a      	ldr	r2, [r3, #16]
 80050fc:	887b      	ldrh	r3, [r7, #2]
 80050fe:	4013      	ands	r3, r2
 8005100:	2b00      	cmp	r3, #0
 8005102:	d002      	beq.n	800510a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005104:	2301      	movs	r3, #1
 8005106:	73fb      	strb	r3, [r7, #15]
 8005108:	e001      	b.n	800510e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800510a:	2300      	movs	r3, #0
 800510c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800510e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005110:	4618      	mov	r0, r3
 8005112:	3714      	adds	r7, #20
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	460b      	mov	r3, r1
 8005126:	807b      	strh	r3, [r7, #2]
 8005128:	4613      	mov	r3, r2
 800512a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800512c:	787b      	ldrb	r3, [r7, #1]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d003      	beq.n	800513a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005132:	887a      	ldrh	r2, [r7, #2]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005138:	e003      	b.n	8005142 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800513a:	887b      	ldrh	r3, [r7, #2]
 800513c:	041a      	lsls	r2, r3, #16
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	619a      	str	r2, [r3, #24]
}
 8005142:	bf00      	nop
 8005144:	370c      	adds	r7, #12
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
	...

08005150 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e12b      	b.n	80053ba <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d106      	bne.n	800517c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f7fe f9e2 	bl	8003540 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2224      	movs	r2, #36	; 0x24
 8005180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f022 0201 	bic.w	r2, r2, #1
 8005192:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80051a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80051b2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80051b4:	f002 fe86 	bl	8007ec4 <HAL_RCC_GetPCLK1Freq>
 80051b8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	4a81      	ldr	r2, [pc, #516]	; (80053c4 <HAL_I2C_Init+0x274>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d807      	bhi.n	80051d4 <HAL_I2C_Init+0x84>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	4a80      	ldr	r2, [pc, #512]	; (80053c8 <HAL_I2C_Init+0x278>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	bf94      	ite	ls
 80051cc:	2301      	movls	r3, #1
 80051ce:	2300      	movhi	r3, #0
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	e006      	b.n	80051e2 <HAL_I2C_Init+0x92>
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	4a7d      	ldr	r2, [pc, #500]	; (80053cc <HAL_I2C_Init+0x27c>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	bf94      	ite	ls
 80051dc:	2301      	movls	r3, #1
 80051de:	2300      	movhi	r3, #0
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d001      	beq.n	80051ea <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80051e6:	2301      	movs	r3, #1
 80051e8:	e0e7      	b.n	80053ba <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	4a78      	ldr	r2, [pc, #480]	; (80053d0 <HAL_I2C_Init+0x280>)
 80051ee:	fba2 2303 	umull	r2, r3, r2, r3
 80051f2:	0c9b      	lsrs	r3, r3, #18
 80051f4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68ba      	ldr	r2, [r7, #8]
 8005206:	430a      	orrs	r2, r1
 8005208:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	6a1b      	ldr	r3, [r3, #32]
 8005210:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	685b      	ldr	r3, [r3, #4]
 8005218:	4a6a      	ldr	r2, [pc, #424]	; (80053c4 <HAL_I2C_Init+0x274>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d802      	bhi.n	8005224 <HAL_I2C_Init+0xd4>
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	3301      	adds	r3, #1
 8005222:	e009      	b.n	8005238 <HAL_I2C_Init+0xe8>
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800522a:	fb02 f303 	mul.w	r3, r2, r3
 800522e:	4a69      	ldr	r2, [pc, #420]	; (80053d4 <HAL_I2C_Init+0x284>)
 8005230:	fba2 2303 	umull	r2, r3, r2, r3
 8005234:	099b      	lsrs	r3, r3, #6
 8005236:	3301      	adds	r3, #1
 8005238:	687a      	ldr	r2, [r7, #4]
 800523a:	6812      	ldr	r2, [r2, #0]
 800523c:	430b      	orrs	r3, r1
 800523e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	69db      	ldr	r3, [r3, #28]
 8005246:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800524a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	495c      	ldr	r1, [pc, #368]	; (80053c4 <HAL_I2C_Init+0x274>)
 8005254:	428b      	cmp	r3, r1
 8005256:	d819      	bhi.n	800528c <HAL_I2C_Init+0x13c>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	1e59      	subs	r1, r3, #1
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	005b      	lsls	r3, r3, #1
 8005262:	fbb1 f3f3 	udiv	r3, r1, r3
 8005266:	1c59      	adds	r1, r3, #1
 8005268:	f640 73fc 	movw	r3, #4092	; 0xffc
 800526c:	400b      	ands	r3, r1
 800526e:	2b00      	cmp	r3, #0
 8005270:	d00a      	beq.n	8005288 <HAL_I2C_Init+0x138>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	1e59      	subs	r1, r3, #1
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	005b      	lsls	r3, r3, #1
 800527c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005280:	3301      	adds	r3, #1
 8005282:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005286:	e051      	b.n	800532c <HAL_I2C_Init+0x1dc>
 8005288:	2304      	movs	r3, #4
 800528a:	e04f      	b.n	800532c <HAL_I2C_Init+0x1dc>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d111      	bne.n	80052b8 <HAL_I2C_Init+0x168>
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	1e58      	subs	r0, r3, #1
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6859      	ldr	r1, [r3, #4]
 800529c:	460b      	mov	r3, r1
 800529e:	005b      	lsls	r3, r3, #1
 80052a0:	440b      	add	r3, r1
 80052a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80052a6:	3301      	adds	r3, #1
 80052a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	bf0c      	ite	eq
 80052b0:	2301      	moveq	r3, #1
 80052b2:	2300      	movne	r3, #0
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	e012      	b.n	80052de <HAL_I2C_Init+0x18e>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	1e58      	subs	r0, r3, #1
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6859      	ldr	r1, [r3, #4]
 80052c0:	460b      	mov	r3, r1
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	440b      	add	r3, r1
 80052c6:	0099      	lsls	r1, r3, #2
 80052c8:	440b      	add	r3, r1
 80052ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80052ce:	3301      	adds	r3, #1
 80052d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	bf0c      	ite	eq
 80052d8:	2301      	moveq	r3, #1
 80052da:	2300      	movne	r3, #0
 80052dc:	b2db      	uxtb	r3, r3
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d001      	beq.n	80052e6 <HAL_I2C_Init+0x196>
 80052e2:	2301      	movs	r3, #1
 80052e4:	e022      	b.n	800532c <HAL_I2C_Init+0x1dc>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	689b      	ldr	r3, [r3, #8]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d10e      	bne.n	800530c <HAL_I2C_Init+0x1bc>
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	1e58      	subs	r0, r3, #1
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6859      	ldr	r1, [r3, #4]
 80052f6:	460b      	mov	r3, r1
 80052f8:	005b      	lsls	r3, r3, #1
 80052fa:	440b      	add	r3, r1
 80052fc:	fbb0 f3f3 	udiv	r3, r0, r3
 8005300:	3301      	adds	r3, #1
 8005302:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005306:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800530a:	e00f      	b.n	800532c <HAL_I2C_Init+0x1dc>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	1e58      	subs	r0, r3, #1
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	6859      	ldr	r1, [r3, #4]
 8005314:	460b      	mov	r3, r1
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	440b      	add	r3, r1
 800531a:	0099      	lsls	r1, r3, #2
 800531c:	440b      	add	r3, r1
 800531e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005322:	3301      	adds	r3, #1
 8005324:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005328:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800532c:	6879      	ldr	r1, [r7, #4]
 800532e:	6809      	ldr	r1, [r1, #0]
 8005330:	4313      	orrs	r3, r2
 8005332:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	69da      	ldr	r2, [r3, #28]
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	431a      	orrs	r2, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	430a      	orrs	r2, r1
 800534e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800535a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800535e:	687a      	ldr	r2, [r7, #4]
 8005360:	6911      	ldr	r1, [r2, #16]
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	68d2      	ldr	r2, [r2, #12]
 8005366:	4311      	orrs	r1, r2
 8005368:	687a      	ldr	r2, [r7, #4]
 800536a:	6812      	ldr	r2, [r2, #0]
 800536c:	430b      	orrs	r3, r1
 800536e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	695a      	ldr	r2, [r3, #20]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	699b      	ldr	r3, [r3, #24]
 8005382:	431a      	orrs	r2, r3
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	430a      	orrs	r2, r1
 800538a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f042 0201 	orr.w	r2, r2, #1
 800539a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2220      	movs	r2, #32
 80053a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2200      	movs	r2, #0
 80053ae:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2200      	movs	r2, #0
 80053b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3710      	adds	r7, #16
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	000186a0 	.word	0x000186a0
 80053c8:	001e847f 	.word	0x001e847f
 80053cc:	003d08ff 	.word	0x003d08ff
 80053d0:	431bde83 	.word	0x431bde83
 80053d4:	10624dd3 	.word	0x10624dd3

080053d8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b088      	sub	sp, #32
 80053dc:	af02      	add	r7, sp, #8
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	607a      	str	r2, [r7, #4]
 80053e2:	461a      	mov	r2, r3
 80053e4:	460b      	mov	r3, r1
 80053e6:	817b      	strh	r3, [r7, #10]
 80053e8:	4613      	mov	r3, r2
 80053ea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80053ec:	f7fe fbbc 	bl	8003b68 <HAL_GetTick>
 80053f0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	2b20      	cmp	r3, #32
 80053fc:	f040 80e0 	bne.w	80055c0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	9300      	str	r3, [sp, #0]
 8005404:	2319      	movs	r3, #25
 8005406:	2201      	movs	r2, #1
 8005408:	4970      	ldr	r1, [pc, #448]	; (80055cc <HAL_I2C_Master_Transmit+0x1f4>)
 800540a:	68f8      	ldr	r0, [r7, #12]
 800540c:	f000 fc64 	bl	8005cd8 <I2C_WaitOnFlagUntilTimeout>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d001      	beq.n	800541a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005416:	2302      	movs	r3, #2
 8005418:	e0d3      	b.n	80055c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005420:	2b01      	cmp	r3, #1
 8005422:	d101      	bne.n	8005428 <HAL_I2C_Master_Transmit+0x50>
 8005424:	2302      	movs	r3, #2
 8005426:	e0cc      	b.n	80055c2 <HAL_I2C_Master_Transmit+0x1ea>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2201      	movs	r2, #1
 800542c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 0301 	and.w	r3, r3, #1
 800543a:	2b01      	cmp	r3, #1
 800543c:	d007      	beq.n	800544e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	681a      	ldr	r2, [r3, #0]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f042 0201 	orr.w	r2, r2, #1
 800544c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800545c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2221      	movs	r2, #33	; 0x21
 8005462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2210      	movs	r2, #16
 800546a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2200      	movs	r2, #0
 8005472:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	687a      	ldr	r2, [r7, #4]
 8005478:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	893a      	ldrh	r2, [r7, #8]
 800547e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005484:	b29a      	uxth	r2, r3
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	4a50      	ldr	r2, [pc, #320]	; (80055d0 <HAL_I2C_Master_Transmit+0x1f8>)
 800548e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005490:	8979      	ldrh	r1, [r7, #10]
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	6a3a      	ldr	r2, [r7, #32]
 8005496:	68f8      	ldr	r0, [r7, #12]
 8005498:	f000 face 	bl	8005a38 <I2C_MasterRequestWrite>
 800549c:	4603      	mov	r3, r0
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d001      	beq.n	80054a6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e08d      	b.n	80055c2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054a6:	2300      	movs	r3, #0
 80054a8:	613b      	str	r3, [r7, #16]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	695b      	ldr	r3, [r3, #20]
 80054b0:	613b      	str	r3, [r7, #16]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	699b      	ldr	r3, [r3, #24]
 80054b8:	613b      	str	r3, [r7, #16]
 80054ba:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80054bc:	e066      	b.n	800558c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	6a39      	ldr	r1, [r7, #32]
 80054c2:	68f8      	ldr	r0, [r7, #12]
 80054c4:	f000 fd22 	bl	8005f0c <I2C_WaitOnTXEFlagUntilTimeout>
 80054c8:	4603      	mov	r3, r0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00d      	beq.n	80054ea <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d2:	2b04      	cmp	r3, #4
 80054d4:	d107      	bne.n	80054e6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054e4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e06b      	b.n	80055c2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054ee:	781a      	ldrb	r2, [r3, #0]
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054fa:	1c5a      	adds	r2, r3, #1
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005504:	b29b      	uxth	r3, r3
 8005506:	3b01      	subs	r3, #1
 8005508:	b29a      	uxth	r2, r3
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005512:	3b01      	subs	r3, #1
 8005514:	b29a      	uxth	r2, r3
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	695b      	ldr	r3, [r3, #20]
 8005520:	f003 0304 	and.w	r3, r3, #4
 8005524:	2b04      	cmp	r3, #4
 8005526:	d11b      	bne.n	8005560 <HAL_I2C_Master_Transmit+0x188>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800552c:	2b00      	cmp	r3, #0
 800552e:	d017      	beq.n	8005560 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005534:	781a      	ldrb	r2, [r3, #0]
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005540:	1c5a      	adds	r2, r3, #1
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800554a:	b29b      	uxth	r3, r3
 800554c:	3b01      	subs	r3, #1
 800554e:	b29a      	uxth	r2, r3
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005558:	3b01      	subs	r3, #1
 800555a:	b29a      	uxth	r2, r3
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005560:	697a      	ldr	r2, [r7, #20]
 8005562:	6a39      	ldr	r1, [r7, #32]
 8005564:	68f8      	ldr	r0, [r7, #12]
 8005566:	f000 fd19 	bl	8005f9c <I2C_WaitOnBTFFlagUntilTimeout>
 800556a:	4603      	mov	r3, r0
 800556c:	2b00      	cmp	r3, #0
 800556e:	d00d      	beq.n	800558c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005574:	2b04      	cmp	r3, #4
 8005576:	d107      	bne.n	8005588 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005586:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005588:	2301      	movs	r3, #1
 800558a:	e01a      	b.n	80055c2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005590:	2b00      	cmp	r3, #0
 8005592:	d194      	bne.n	80054be <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80055a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2220      	movs	r2, #32
 80055a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	2200      	movs	r2, #0
 80055b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2200      	movs	r2, #0
 80055b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80055bc:	2300      	movs	r3, #0
 80055be:	e000      	b.n	80055c2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80055c0:	2302      	movs	r3, #2
  }
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3718      	adds	r7, #24
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	00100002 	.word	0x00100002
 80055d0:	ffff0000 	.word	0xffff0000

080055d4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b08c      	sub	sp, #48	; 0x30
 80055d8:	af02      	add	r7, sp, #8
 80055da:	60f8      	str	r0, [r7, #12]
 80055dc:	607a      	str	r2, [r7, #4]
 80055de:	461a      	mov	r2, r3
 80055e0:	460b      	mov	r3, r1
 80055e2:	817b      	strh	r3, [r7, #10]
 80055e4:	4613      	mov	r3, r2
 80055e6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80055e8:	f7fe fabe 	bl	8003b68 <HAL_GetTick>
 80055ec:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055f4:	b2db      	uxtb	r3, r3
 80055f6:	2b20      	cmp	r3, #32
 80055f8:	f040 8217 	bne.w	8005a2a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80055fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055fe:	9300      	str	r3, [sp, #0]
 8005600:	2319      	movs	r3, #25
 8005602:	2201      	movs	r2, #1
 8005604:	497c      	ldr	r1, [pc, #496]	; (80057f8 <HAL_I2C_Master_Receive+0x224>)
 8005606:	68f8      	ldr	r0, [r7, #12]
 8005608:	f000 fb66 	bl	8005cd8 <I2C_WaitOnFlagUntilTimeout>
 800560c:	4603      	mov	r3, r0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d001      	beq.n	8005616 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005612:	2302      	movs	r3, #2
 8005614:	e20a      	b.n	8005a2c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800561c:	2b01      	cmp	r3, #1
 800561e:	d101      	bne.n	8005624 <HAL_I2C_Master_Receive+0x50>
 8005620:	2302      	movs	r3, #2
 8005622:	e203      	b.n	8005a2c <HAL_I2C_Master_Receive+0x458>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 0301 	and.w	r3, r3, #1
 8005636:	2b01      	cmp	r3, #1
 8005638:	d007      	beq.n	800564a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	681a      	ldr	r2, [r3, #0]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f042 0201 	orr.w	r2, r2, #1
 8005648:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005658:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2222      	movs	r2, #34	; 0x22
 800565e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2210      	movs	r2, #16
 8005666:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2200      	movs	r2, #0
 800566e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	893a      	ldrh	r2, [r7, #8]
 800567a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005680:	b29a      	uxth	r2, r3
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	4a5c      	ldr	r2, [pc, #368]	; (80057fc <HAL_I2C_Master_Receive+0x228>)
 800568a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800568c:	8979      	ldrh	r1, [r7, #10]
 800568e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005690:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005692:	68f8      	ldr	r0, [r7, #12]
 8005694:	f000 fa52 	bl	8005b3c <I2C_MasterRequestRead>
 8005698:	4603      	mov	r3, r0
 800569a:	2b00      	cmp	r3, #0
 800569c:	d001      	beq.n	80056a2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	e1c4      	b.n	8005a2c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d113      	bne.n	80056d2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056aa:	2300      	movs	r3, #0
 80056ac:	623b      	str	r3, [r7, #32]
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	695b      	ldr	r3, [r3, #20]
 80056b4:	623b      	str	r3, [r7, #32]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	699b      	ldr	r3, [r3, #24]
 80056bc:	623b      	str	r3, [r7, #32]
 80056be:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056ce:	601a      	str	r2, [r3, #0]
 80056d0:	e198      	b.n	8005a04 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80056d6:	2b01      	cmp	r3, #1
 80056d8:	d11b      	bne.n	8005712 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056e8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056ea:	2300      	movs	r3, #0
 80056ec:	61fb      	str	r3, [r7, #28]
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	695b      	ldr	r3, [r3, #20]
 80056f4:	61fb      	str	r3, [r7, #28]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	699b      	ldr	r3, [r3, #24]
 80056fc:	61fb      	str	r3, [r7, #28]
 80056fe:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800570e:	601a      	str	r2, [r3, #0]
 8005710:	e178      	b.n	8005a04 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005716:	2b02      	cmp	r3, #2
 8005718:	d11b      	bne.n	8005752 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	681a      	ldr	r2, [r3, #0]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005728:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005738:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800573a:	2300      	movs	r3, #0
 800573c:	61bb      	str	r3, [r7, #24]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	695b      	ldr	r3, [r3, #20]
 8005744:	61bb      	str	r3, [r7, #24]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	699b      	ldr	r3, [r3, #24]
 800574c:	61bb      	str	r3, [r7, #24]
 800574e:	69bb      	ldr	r3, [r7, #24]
 8005750:	e158      	b.n	8005a04 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005760:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005762:	2300      	movs	r3, #0
 8005764:	617b      	str	r3, [r7, #20]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	695b      	ldr	r3, [r3, #20]
 800576c:	617b      	str	r3, [r7, #20]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	699b      	ldr	r3, [r3, #24]
 8005774:	617b      	str	r3, [r7, #20]
 8005776:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005778:	e144      	b.n	8005a04 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800577e:	2b03      	cmp	r3, #3
 8005780:	f200 80f1 	bhi.w	8005966 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005788:	2b01      	cmp	r3, #1
 800578a:	d123      	bne.n	80057d4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800578c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800578e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005790:	68f8      	ldr	r0, [r7, #12]
 8005792:	f000 fc4b 	bl	800602c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005796:	4603      	mov	r3, r0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d001      	beq.n	80057a0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	e145      	b.n	8005a2c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	691a      	ldr	r2, [r3, #16]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057aa:	b2d2      	uxtb	r2, r2
 80057ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b2:	1c5a      	adds	r2, r3, #1
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057bc:	3b01      	subs	r3, #1
 80057be:	b29a      	uxth	r2, r3
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057c8:	b29b      	uxth	r3, r3
 80057ca:	3b01      	subs	r3, #1
 80057cc:	b29a      	uxth	r2, r3
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80057d2:	e117      	b.n	8005a04 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d14e      	bne.n	800587a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80057dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057de:	9300      	str	r3, [sp, #0]
 80057e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e2:	2200      	movs	r2, #0
 80057e4:	4906      	ldr	r1, [pc, #24]	; (8005800 <HAL_I2C_Master_Receive+0x22c>)
 80057e6:	68f8      	ldr	r0, [r7, #12]
 80057e8:	f000 fa76 	bl	8005cd8 <I2C_WaitOnFlagUntilTimeout>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d008      	beq.n	8005804 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e11a      	b.n	8005a2c <HAL_I2C_Master_Receive+0x458>
 80057f6:	bf00      	nop
 80057f8:	00100002 	.word	0x00100002
 80057fc:	ffff0000 	.word	0xffff0000
 8005800:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005812:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	691a      	ldr	r2, [r3, #16]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800581e:	b2d2      	uxtb	r2, r2
 8005820:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005826:	1c5a      	adds	r2, r3, #1
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005830:	3b01      	subs	r3, #1
 8005832:	b29a      	uxth	r2, r3
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800583c:	b29b      	uxth	r3, r3
 800583e:	3b01      	subs	r3, #1
 8005840:	b29a      	uxth	r2, r3
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	691a      	ldr	r2, [r3, #16]
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005850:	b2d2      	uxtb	r2, r2
 8005852:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005858:	1c5a      	adds	r2, r3, #1
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005862:	3b01      	subs	r3, #1
 8005864:	b29a      	uxth	r2, r3
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800586e:	b29b      	uxth	r3, r3
 8005870:	3b01      	subs	r3, #1
 8005872:	b29a      	uxth	r2, r3
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005878:	e0c4      	b.n	8005a04 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800587a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587c:	9300      	str	r3, [sp, #0]
 800587e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005880:	2200      	movs	r2, #0
 8005882:	496c      	ldr	r1, [pc, #432]	; (8005a34 <HAL_I2C_Master_Receive+0x460>)
 8005884:	68f8      	ldr	r0, [r7, #12]
 8005886:	f000 fa27 	bl	8005cd8 <I2C_WaitOnFlagUntilTimeout>
 800588a:	4603      	mov	r3, r0
 800588c:	2b00      	cmp	r3, #0
 800588e:	d001      	beq.n	8005894 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	e0cb      	b.n	8005a2c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	691a      	ldr	r2, [r3, #16]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ae:	b2d2      	uxtb	r2, r2
 80058b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b6:	1c5a      	adds	r2, r3, #1
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058c0:	3b01      	subs	r3, #1
 80058c2:	b29a      	uxth	r2, r3
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058cc:	b29b      	uxth	r3, r3
 80058ce:	3b01      	subs	r3, #1
 80058d0:	b29a      	uxth	r2, r3
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80058d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d8:	9300      	str	r3, [sp, #0]
 80058da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058dc:	2200      	movs	r2, #0
 80058de:	4955      	ldr	r1, [pc, #340]	; (8005a34 <HAL_I2C_Master_Receive+0x460>)
 80058e0:	68f8      	ldr	r0, [r7, #12]
 80058e2:	f000 f9f9 	bl	8005cd8 <I2C_WaitOnFlagUntilTimeout>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d001      	beq.n	80058f0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	e09d      	b.n	8005a2c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	681a      	ldr	r2, [r3, #0]
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	691a      	ldr	r2, [r3, #16]
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590a:	b2d2      	uxtb	r2, r2
 800590c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005912:	1c5a      	adds	r2, r3, #1
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800591c:	3b01      	subs	r3, #1
 800591e:	b29a      	uxth	r2, r3
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005928:	b29b      	uxth	r3, r3
 800592a:	3b01      	subs	r3, #1
 800592c:	b29a      	uxth	r2, r3
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	691a      	ldr	r2, [r3, #16]
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800593c:	b2d2      	uxtb	r2, r2
 800593e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005944:	1c5a      	adds	r2, r3, #1
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800594e:	3b01      	subs	r3, #1
 8005950:	b29a      	uxth	r2, r3
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800595a:	b29b      	uxth	r3, r3
 800595c:	3b01      	subs	r3, #1
 800595e:	b29a      	uxth	r2, r3
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005964:	e04e      	b.n	8005a04 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005968:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800596a:	68f8      	ldr	r0, [r7, #12]
 800596c:	f000 fb5e 	bl	800602c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d001      	beq.n	800597a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005976:	2301      	movs	r3, #1
 8005978:	e058      	b.n	8005a2c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	691a      	ldr	r2, [r3, #16]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005984:	b2d2      	uxtb	r2, r2
 8005986:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598c:	1c5a      	adds	r2, r3, #1
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005996:	3b01      	subs	r3, #1
 8005998:	b29a      	uxth	r2, r3
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059a2:	b29b      	uxth	r3, r3
 80059a4:	3b01      	subs	r3, #1
 80059a6:	b29a      	uxth	r2, r3
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	695b      	ldr	r3, [r3, #20]
 80059b2:	f003 0304 	and.w	r3, r3, #4
 80059b6:	2b04      	cmp	r3, #4
 80059b8:	d124      	bne.n	8005a04 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059be:	2b03      	cmp	r3, #3
 80059c0:	d107      	bne.n	80059d2 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059d0:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	691a      	ldr	r2, [r3, #16]
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059dc:	b2d2      	uxtb	r2, r2
 80059de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e4:	1c5a      	adds	r2, r3, #1
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059ee:	3b01      	subs	r3, #1
 80059f0:	b29a      	uxth	r2, r3
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	3b01      	subs	r3, #1
 80059fe:	b29a      	uxth	r2, r3
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	f47f aeb6 	bne.w	800577a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	2220      	movs	r2, #32
 8005a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2200      	movs	r2, #0
 8005a22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005a26:	2300      	movs	r3, #0
 8005a28:	e000      	b.n	8005a2c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005a2a:	2302      	movs	r3, #2
  }
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3728      	adds	r7, #40	; 0x28
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	00010004 	.word	0x00010004

08005a38 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b088      	sub	sp, #32
 8005a3c:	af02      	add	r7, sp, #8
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	607a      	str	r2, [r7, #4]
 8005a42:	603b      	str	r3, [r7, #0]
 8005a44:	460b      	mov	r3, r1
 8005a46:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	2b08      	cmp	r3, #8
 8005a52:	d006      	beq.n	8005a62 <I2C_MasterRequestWrite+0x2a>
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	2b01      	cmp	r3, #1
 8005a58:	d003      	beq.n	8005a62 <I2C_MasterRequestWrite+0x2a>
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a60:	d108      	bne.n	8005a74 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a70:	601a      	str	r2, [r3, #0]
 8005a72:	e00b      	b.n	8005a8c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a78:	2b12      	cmp	r3, #18
 8005a7a:	d107      	bne.n	8005a8c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	681a      	ldr	r2, [r3, #0]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a8a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	9300      	str	r3, [sp, #0]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2200      	movs	r2, #0
 8005a94:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005a98:	68f8      	ldr	r0, [r7, #12]
 8005a9a:	f000 f91d 	bl	8005cd8 <I2C_WaitOnFlagUntilTimeout>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d00d      	beq.n	8005ac0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ab2:	d103      	bne.n	8005abc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005aba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005abc:	2303      	movs	r3, #3
 8005abe:	e035      	b.n	8005b2c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005ac8:	d108      	bne.n	8005adc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005aca:	897b      	ldrh	r3, [r7, #10]
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	461a      	mov	r2, r3
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005ad8:	611a      	str	r2, [r3, #16]
 8005ada:	e01b      	b.n	8005b14 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005adc:	897b      	ldrh	r3, [r7, #10]
 8005ade:	11db      	asrs	r3, r3, #7
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	f003 0306 	and.w	r3, r3, #6
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	f063 030f 	orn	r3, r3, #15
 8005aec:	b2da      	uxtb	r2, r3
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	490e      	ldr	r1, [pc, #56]	; (8005b34 <I2C_MasterRequestWrite+0xfc>)
 8005afa:	68f8      	ldr	r0, [r7, #12]
 8005afc:	f000 f966 	bl	8005dcc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b00:	4603      	mov	r3, r0
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d001      	beq.n	8005b0a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e010      	b.n	8005b2c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005b0a:	897b      	ldrh	r3, [r7, #10]
 8005b0c:	b2da      	uxtb	r2, r3
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	687a      	ldr	r2, [r7, #4]
 8005b18:	4907      	ldr	r1, [pc, #28]	; (8005b38 <I2C_MasterRequestWrite+0x100>)
 8005b1a:	68f8      	ldr	r0, [r7, #12]
 8005b1c:	f000 f956 	bl	8005dcc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b20:	4603      	mov	r3, r0
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d001      	beq.n	8005b2a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	e000      	b.n	8005b2c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005b2a:	2300      	movs	r3, #0
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3718      	adds	r7, #24
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	00010008 	.word	0x00010008
 8005b38:	00010002 	.word	0x00010002

08005b3c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	b088      	sub	sp, #32
 8005b40:	af02      	add	r7, sp, #8
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	607a      	str	r2, [r7, #4]
 8005b46:	603b      	str	r3, [r7, #0]
 8005b48:	460b      	mov	r3, r1
 8005b4a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b50:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b60:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005b62:	697b      	ldr	r3, [r7, #20]
 8005b64:	2b08      	cmp	r3, #8
 8005b66:	d006      	beq.n	8005b76 <I2C_MasterRequestRead+0x3a>
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	2b01      	cmp	r3, #1
 8005b6c:	d003      	beq.n	8005b76 <I2C_MasterRequestRead+0x3a>
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005b74:	d108      	bne.n	8005b88 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b84:	601a      	str	r2, [r3, #0]
 8005b86:	e00b      	b.n	8005ba0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b8c:	2b11      	cmp	r3, #17
 8005b8e:	d107      	bne.n	8005ba0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681a      	ldr	r2, [r3, #0]
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b9e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	9300      	str	r3, [sp, #0]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005bac:	68f8      	ldr	r0, [r7, #12]
 8005bae:	f000 f893 	bl	8005cd8 <I2C_WaitOnFlagUntilTimeout>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d00d      	beq.n	8005bd4 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bc6:	d103      	bne.n	8005bd0 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005bd0:	2303      	movs	r3, #3
 8005bd2:	e079      	b.n	8005cc8 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005bdc:	d108      	bne.n	8005bf0 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005bde:	897b      	ldrh	r3, [r7, #10]
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	f043 0301 	orr.w	r3, r3, #1
 8005be6:	b2da      	uxtb	r2, r3
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	611a      	str	r2, [r3, #16]
 8005bee:	e05f      	b.n	8005cb0 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005bf0:	897b      	ldrh	r3, [r7, #10]
 8005bf2:	11db      	asrs	r3, r3, #7
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	f003 0306 	and.w	r3, r3, #6
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	f063 030f 	orn	r3, r3, #15
 8005c00:	b2da      	uxtb	r2, r3
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	687a      	ldr	r2, [r7, #4]
 8005c0c:	4930      	ldr	r1, [pc, #192]	; (8005cd0 <I2C_MasterRequestRead+0x194>)
 8005c0e:	68f8      	ldr	r0, [r7, #12]
 8005c10:	f000 f8dc 	bl	8005dcc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c14:	4603      	mov	r3, r0
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d001      	beq.n	8005c1e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e054      	b.n	8005cc8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005c1e:	897b      	ldrh	r3, [r7, #10]
 8005c20:	b2da      	uxtb	r2, r3
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	687a      	ldr	r2, [r7, #4]
 8005c2c:	4929      	ldr	r1, [pc, #164]	; (8005cd4 <I2C_MasterRequestRead+0x198>)
 8005c2e:	68f8      	ldr	r0, [r7, #12]
 8005c30:	f000 f8cc 	bl	8005dcc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d001      	beq.n	8005c3e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	e044      	b.n	8005cc8 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c3e:	2300      	movs	r3, #0
 8005c40:	613b      	str	r3, [r7, #16]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	695b      	ldr	r3, [r3, #20]
 8005c48:	613b      	str	r3, [r7, #16]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	699b      	ldr	r3, [r3, #24]
 8005c50:	613b      	str	r3, [r7, #16]
 8005c52:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c62:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	9300      	str	r3, [sp, #0]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005c70:	68f8      	ldr	r0, [r7, #12]
 8005c72:	f000 f831 	bl	8005cd8 <I2C_WaitOnFlagUntilTimeout>
 8005c76:	4603      	mov	r3, r0
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d00d      	beq.n	8005c98 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c8a:	d103      	bne.n	8005c94 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c92:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8005c94:	2303      	movs	r3, #3
 8005c96:	e017      	b.n	8005cc8 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005c98:	897b      	ldrh	r3, [r7, #10]
 8005c9a:	11db      	asrs	r3, r3, #7
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	f003 0306 	and.w	r3, r3, #6
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	f063 030e 	orn	r3, r3, #14
 8005ca8:	b2da      	uxtb	r2, r3
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	4907      	ldr	r1, [pc, #28]	; (8005cd4 <I2C_MasterRequestRead+0x198>)
 8005cb6:	68f8      	ldr	r0, [r7, #12]
 8005cb8:	f000 f888 	bl	8005dcc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d001      	beq.n	8005cc6 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e000      	b.n	8005cc8 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005cc6:	2300      	movs	r3, #0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3718      	adds	r7, #24
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	00010008 	.word	0x00010008
 8005cd4:	00010002 	.word	0x00010002

08005cd8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	603b      	str	r3, [r7, #0]
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ce8:	e048      	b.n	8005d7c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005cf0:	d044      	beq.n	8005d7c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cf2:	f7fd ff39 	bl	8003b68 <HAL_GetTick>
 8005cf6:	4602      	mov	r2, r0
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	1ad3      	subs	r3, r2, r3
 8005cfc:	683a      	ldr	r2, [r7, #0]
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d302      	bcc.n	8005d08 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d139      	bne.n	8005d7c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005d08:	68bb      	ldr	r3, [r7, #8]
 8005d0a:	0c1b      	lsrs	r3, r3, #16
 8005d0c:	b2db      	uxtb	r3, r3
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d10d      	bne.n	8005d2e <I2C_WaitOnFlagUntilTimeout+0x56>
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	695b      	ldr	r3, [r3, #20]
 8005d18:	43da      	mvns	r2, r3
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	4013      	ands	r3, r2
 8005d1e:	b29b      	uxth	r3, r3
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	bf0c      	ite	eq
 8005d24:	2301      	moveq	r3, #1
 8005d26:	2300      	movne	r3, #0
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	e00c      	b.n	8005d48 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	699b      	ldr	r3, [r3, #24]
 8005d34:	43da      	mvns	r2, r3
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	4013      	ands	r3, r2
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	bf0c      	ite	eq
 8005d40:	2301      	moveq	r3, #1
 8005d42:	2300      	movne	r3, #0
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	461a      	mov	r2, r3
 8005d48:	79fb      	ldrb	r3, [r7, #7]
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d116      	bne.n	8005d7c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2220      	movs	r2, #32
 8005d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2200      	movs	r2, #0
 8005d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d68:	f043 0220 	orr.w	r2, r3, #32
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2200      	movs	r2, #0
 8005d74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005d78:	2301      	movs	r3, #1
 8005d7a:	e023      	b.n	8005dc4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	0c1b      	lsrs	r3, r3, #16
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	2b01      	cmp	r3, #1
 8005d84:	d10d      	bne.n	8005da2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	695b      	ldr	r3, [r3, #20]
 8005d8c:	43da      	mvns	r2, r3
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	4013      	ands	r3, r2
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	bf0c      	ite	eq
 8005d98:	2301      	moveq	r3, #1
 8005d9a:	2300      	movne	r3, #0
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	461a      	mov	r2, r3
 8005da0:	e00c      	b.n	8005dbc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	699b      	ldr	r3, [r3, #24]
 8005da8:	43da      	mvns	r2, r3
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	4013      	ands	r3, r2
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	bf0c      	ite	eq
 8005db4:	2301      	moveq	r3, #1
 8005db6:	2300      	movne	r3, #0
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	461a      	mov	r2, r3
 8005dbc:	79fb      	ldrb	r3, [r7, #7]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d093      	beq.n	8005cea <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005dc2:	2300      	movs	r3, #0
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	3710      	adds	r7, #16
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	bd80      	pop	{r7, pc}

08005dcc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	607a      	str	r2, [r7, #4]
 8005dd8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005dda:	e071      	b.n	8005ec0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	695b      	ldr	r3, [r3, #20]
 8005de2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005de6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dea:	d123      	bne.n	8005e34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dfa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e04:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2220      	movs	r2, #32
 8005e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2200      	movs	r2, #0
 8005e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e20:	f043 0204 	orr.w	r2, r3, #4
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	e067      	b.n	8005f04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e3a:	d041      	beq.n	8005ec0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e3c:	f7fd fe94 	bl	8003b68 <HAL_GetTick>
 8005e40:	4602      	mov	r2, r0
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	1ad3      	subs	r3, r2, r3
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d302      	bcc.n	8005e52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d136      	bne.n	8005ec0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	0c1b      	lsrs	r3, r3, #16
 8005e56:	b2db      	uxtb	r3, r3
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d10c      	bne.n	8005e76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	695b      	ldr	r3, [r3, #20]
 8005e62:	43da      	mvns	r2, r3
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	4013      	ands	r3, r2
 8005e68:	b29b      	uxth	r3, r3
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	bf14      	ite	ne
 8005e6e:	2301      	movne	r3, #1
 8005e70:	2300      	moveq	r3, #0
 8005e72:	b2db      	uxtb	r3, r3
 8005e74:	e00b      	b.n	8005e8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	699b      	ldr	r3, [r3, #24]
 8005e7c:	43da      	mvns	r2, r3
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	4013      	ands	r3, r2
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	bf14      	ite	ne
 8005e88:	2301      	movne	r3, #1
 8005e8a:	2300      	moveq	r3, #0
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d016      	beq.n	8005ec0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2200      	movs	r2, #0
 8005e96:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2220      	movs	r2, #32
 8005e9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eac:	f043 0220 	orr.w	r2, r3, #32
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005ebc:	2301      	movs	r3, #1
 8005ebe:	e021      	b.n	8005f04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	0c1b      	lsrs	r3, r3, #16
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d10c      	bne.n	8005ee4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	695b      	ldr	r3, [r3, #20]
 8005ed0:	43da      	mvns	r2, r3
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	4013      	ands	r3, r2
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	bf14      	ite	ne
 8005edc:	2301      	movne	r3, #1
 8005ede:	2300      	moveq	r3, #0
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	e00b      	b.n	8005efc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	699b      	ldr	r3, [r3, #24]
 8005eea:	43da      	mvns	r2, r3
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	4013      	ands	r3, r2
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	bf14      	ite	ne
 8005ef6:	2301      	movne	r3, #1
 8005ef8:	2300      	moveq	r3, #0
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	f47f af6d 	bne.w	8005ddc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005f02:	2300      	movs	r3, #0
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3710      	adds	r7, #16
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	60f8      	str	r0, [r7, #12]
 8005f14:	60b9      	str	r1, [r7, #8]
 8005f16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f18:	e034      	b.n	8005f84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005f1a:	68f8      	ldr	r0, [r7, #12]
 8005f1c:	f000 f8e3 	bl	80060e6 <I2C_IsAcknowledgeFailed>
 8005f20:	4603      	mov	r3, r0
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d001      	beq.n	8005f2a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	e034      	b.n	8005f94 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f2a:	68bb      	ldr	r3, [r7, #8]
 8005f2c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f30:	d028      	beq.n	8005f84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f32:	f7fd fe19 	bl	8003b68 <HAL_GetTick>
 8005f36:	4602      	mov	r2, r0
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	1ad3      	subs	r3, r2, r3
 8005f3c:	68ba      	ldr	r2, [r7, #8]
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d302      	bcc.n	8005f48 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005f42:	68bb      	ldr	r3, [r7, #8]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d11d      	bne.n	8005f84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	695b      	ldr	r3, [r3, #20]
 8005f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f52:	2b80      	cmp	r3, #128	; 0x80
 8005f54:	d016      	beq.n	8005f84 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2220      	movs	r2, #32
 8005f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2200      	movs	r2, #0
 8005f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f70:	f043 0220 	orr.w	r2, r3, #32
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8005f80:	2301      	movs	r3, #1
 8005f82:	e007      	b.n	8005f94 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	695b      	ldr	r3, [r3, #20]
 8005f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f8e:	2b80      	cmp	r3, #128	; 0x80
 8005f90:	d1c3      	bne.n	8005f1a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005f92:	2300      	movs	r3, #0
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3710      	adds	r7, #16
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005fa8:	e034      	b.n	8006014 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005faa:	68f8      	ldr	r0, [r7, #12]
 8005fac:	f000 f89b 	bl	80060e6 <I2C_IsAcknowledgeFailed>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d001      	beq.n	8005fba <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005fb6:	2301      	movs	r3, #1
 8005fb8:	e034      	b.n	8006024 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fc0:	d028      	beq.n	8006014 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005fc2:	f7fd fdd1 	bl	8003b68 <HAL_GetTick>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	1ad3      	subs	r3, r2, r3
 8005fcc:	68ba      	ldr	r2, [r7, #8]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d302      	bcc.n	8005fd8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d11d      	bne.n	8006014 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	695b      	ldr	r3, [r3, #20]
 8005fde:	f003 0304 	and.w	r3, r3, #4
 8005fe2:	2b04      	cmp	r3, #4
 8005fe4:	d016      	beq.n	8006014 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2220      	movs	r2, #32
 8005ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006000:	f043 0220 	orr.w	r2, r3, #32
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	2200      	movs	r2, #0
 800600c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8006010:	2301      	movs	r3, #1
 8006012:	e007      	b.n	8006024 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	695b      	ldr	r3, [r3, #20]
 800601a:	f003 0304 	and.w	r3, r3, #4
 800601e:	2b04      	cmp	r3, #4
 8006020:	d1c3      	bne.n	8005faa <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006022:	2300      	movs	r3, #0
}
 8006024:	4618      	mov	r0, r3
 8006026:	3710      	adds	r7, #16
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	60f8      	str	r0, [r7, #12]
 8006034:	60b9      	str	r1, [r7, #8]
 8006036:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006038:	e049      	b.n	80060ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	695b      	ldr	r3, [r3, #20]
 8006040:	f003 0310 	and.w	r3, r3, #16
 8006044:	2b10      	cmp	r3, #16
 8006046:	d119      	bne.n	800607c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f06f 0210 	mvn.w	r2, #16
 8006050:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2200      	movs	r2, #0
 8006056:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2220      	movs	r2, #32
 800605c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2200      	movs	r2, #0
 8006064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2200      	movs	r2, #0
 8006074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	e030      	b.n	80060de <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800607c:	f7fd fd74 	bl	8003b68 <HAL_GetTick>
 8006080:	4602      	mov	r2, r0
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	1ad3      	subs	r3, r2, r3
 8006086:	68ba      	ldr	r2, [r7, #8]
 8006088:	429a      	cmp	r2, r3
 800608a:	d302      	bcc.n	8006092 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800608c:	68bb      	ldr	r3, [r7, #8]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d11d      	bne.n	80060ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	695b      	ldr	r3, [r3, #20]
 8006098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800609c:	2b40      	cmp	r3, #64	; 0x40
 800609e:	d016      	beq.n	80060ce <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2200      	movs	r2, #0
 80060a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2220      	movs	r2, #32
 80060aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2200      	movs	r2, #0
 80060b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ba:	f043 0220 	orr.w	r2, r3, #32
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80060ca:	2301      	movs	r3, #1
 80060cc:	e007      	b.n	80060de <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	695b      	ldr	r3, [r3, #20]
 80060d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060d8:	2b40      	cmp	r3, #64	; 0x40
 80060da:	d1ae      	bne.n	800603a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80060dc:	2300      	movs	r3, #0
}
 80060de:	4618      	mov	r0, r3
 80060e0:	3710      	adds	r7, #16
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd80      	pop	{r7, pc}

080060e6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80060e6:	b480      	push	{r7}
 80060e8:	b083      	sub	sp, #12
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	695b      	ldr	r3, [r3, #20]
 80060f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060fc:	d11b      	bne.n	8006136 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006106:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2200      	movs	r2, #0
 800610c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2220      	movs	r2, #32
 8006112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2200      	movs	r2, #0
 800611a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006122:	f043 0204 	orr.w	r2, r3, #4
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e000      	b.n	8006138 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006136:	2300      	movs	r3, #0
}
 8006138:	4618      	mov	r0, r3
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b086      	sub	sp, #24
 8006148:	af02      	add	r7, sp, #8
 800614a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d101      	bne.n	8006156 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	e101      	b.n	800635a <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8006162:	b2db      	uxtb	r3, r3
 8006164:	2b00      	cmp	r3, #0
 8006166:	d106      	bne.n	8006176 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f009 f82f 	bl	800f1d4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2203      	movs	r2, #3
 800617a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006184:	d102      	bne.n	800618c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2200      	movs	r2, #0
 800618a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4618      	mov	r0, r3
 8006192:	f004 f9c0 	bl	800a516 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6818      	ldr	r0, [r3, #0]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	7c1a      	ldrb	r2, [r3, #16]
 800619e:	f88d 2000 	strb.w	r2, [sp]
 80061a2:	3304      	adds	r3, #4
 80061a4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80061a6:	f004 f89f 	bl	800a2e8 <USB_CoreInit>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d005      	beq.n	80061bc <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2202      	movs	r2, #2
 80061b4:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80061b8:	2301      	movs	r3, #1
 80061ba:	e0ce      	b.n	800635a <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	2100      	movs	r1, #0
 80061c2:	4618      	mov	r0, r3
 80061c4:	f004 f9b8 	bl	800a538 <USB_SetCurrentMode>
 80061c8:	4603      	mov	r3, r0
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d005      	beq.n	80061da <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2202      	movs	r2, #2
 80061d2:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	e0bf      	b.n	800635a <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80061da:	2300      	movs	r3, #0
 80061dc:	73fb      	strb	r3, [r7, #15]
 80061de:	e04a      	b.n	8006276 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80061e0:	7bfa      	ldrb	r2, [r7, #15]
 80061e2:	6879      	ldr	r1, [r7, #4]
 80061e4:	4613      	mov	r3, r2
 80061e6:	00db      	lsls	r3, r3, #3
 80061e8:	4413      	add	r3, r2
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	440b      	add	r3, r1
 80061ee:	3315      	adds	r3, #21
 80061f0:	2201      	movs	r2, #1
 80061f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80061f4:	7bfa      	ldrb	r2, [r7, #15]
 80061f6:	6879      	ldr	r1, [r7, #4]
 80061f8:	4613      	mov	r3, r2
 80061fa:	00db      	lsls	r3, r3, #3
 80061fc:	4413      	add	r3, r2
 80061fe:	009b      	lsls	r3, r3, #2
 8006200:	440b      	add	r3, r1
 8006202:	3314      	adds	r3, #20
 8006204:	7bfa      	ldrb	r2, [r7, #15]
 8006206:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006208:	7bfa      	ldrb	r2, [r7, #15]
 800620a:	7bfb      	ldrb	r3, [r7, #15]
 800620c:	b298      	uxth	r0, r3
 800620e:	6879      	ldr	r1, [r7, #4]
 8006210:	4613      	mov	r3, r2
 8006212:	00db      	lsls	r3, r3, #3
 8006214:	4413      	add	r3, r2
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	440b      	add	r3, r1
 800621a:	332e      	adds	r3, #46	; 0x2e
 800621c:	4602      	mov	r2, r0
 800621e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006220:	7bfa      	ldrb	r2, [r7, #15]
 8006222:	6879      	ldr	r1, [r7, #4]
 8006224:	4613      	mov	r3, r2
 8006226:	00db      	lsls	r3, r3, #3
 8006228:	4413      	add	r3, r2
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	440b      	add	r3, r1
 800622e:	3318      	adds	r3, #24
 8006230:	2200      	movs	r2, #0
 8006232:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006234:	7bfa      	ldrb	r2, [r7, #15]
 8006236:	6879      	ldr	r1, [r7, #4]
 8006238:	4613      	mov	r3, r2
 800623a:	00db      	lsls	r3, r3, #3
 800623c:	4413      	add	r3, r2
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	440b      	add	r3, r1
 8006242:	331c      	adds	r3, #28
 8006244:	2200      	movs	r2, #0
 8006246:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006248:	7bfa      	ldrb	r2, [r7, #15]
 800624a:	6879      	ldr	r1, [r7, #4]
 800624c:	4613      	mov	r3, r2
 800624e:	00db      	lsls	r3, r3, #3
 8006250:	4413      	add	r3, r2
 8006252:	009b      	lsls	r3, r3, #2
 8006254:	440b      	add	r3, r1
 8006256:	3320      	adds	r3, #32
 8006258:	2200      	movs	r2, #0
 800625a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800625c:	7bfa      	ldrb	r2, [r7, #15]
 800625e:	6879      	ldr	r1, [r7, #4]
 8006260:	4613      	mov	r3, r2
 8006262:	00db      	lsls	r3, r3, #3
 8006264:	4413      	add	r3, r2
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	440b      	add	r3, r1
 800626a:	3324      	adds	r3, #36	; 0x24
 800626c:	2200      	movs	r2, #0
 800626e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006270:	7bfb      	ldrb	r3, [r7, #15]
 8006272:	3301      	adds	r3, #1
 8006274:	73fb      	strb	r3, [r7, #15]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	791b      	ldrb	r3, [r3, #4]
 800627a:	7bfa      	ldrb	r2, [r7, #15]
 800627c:	429a      	cmp	r2, r3
 800627e:	d3af      	bcc.n	80061e0 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006280:	2300      	movs	r3, #0
 8006282:	73fb      	strb	r3, [r7, #15]
 8006284:	e044      	b.n	8006310 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006286:	7bfa      	ldrb	r2, [r7, #15]
 8006288:	6879      	ldr	r1, [r7, #4]
 800628a:	4613      	mov	r3, r2
 800628c:	00db      	lsls	r3, r3, #3
 800628e:	4413      	add	r3, r2
 8006290:	009b      	lsls	r3, r3, #2
 8006292:	440b      	add	r3, r1
 8006294:	f203 2355 	addw	r3, r3, #597	; 0x255
 8006298:	2200      	movs	r2, #0
 800629a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800629c:	7bfa      	ldrb	r2, [r7, #15]
 800629e:	6879      	ldr	r1, [r7, #4]
 80062a0:	4613      	mov	r3, r2
 80062a2:	00db      	lsls	r3, r3, #3
 80062a4:	4413      	add	r3, r2
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	440b      	add	r3, r1
 80062aa:	f503 7315 	add.w	r3, r3, #596	; 0x254
 80062ae:	7bfa      	ldrb	r2, [r7, #15]
 80062b0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80062b2:	7bfa      	ldrb	r2, [r7, #15]
 80062b4:	6879      	ldr	r1, [r7, #4]
 80062b6:	4613      	mov	r3, r2
 80062b8:	00db      	lsls	r3, r3, #3
 80062ba:	4413      	add	r3, r2
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	440b      	add	r3, r1
 80062c0:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80062c4:	2200      	movs	r2, #0
 80062c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80062c8:	7bfa      	ldrb	r2, [r7, #15]
 80062ca:	6879      	ldr	r1, [r7, #4]
 80062cc:	4613      	mov	r3, r2
 80062ce:	00db      	lsls	r3, r3, #3
 80062d0:	4413      	add	r3, r2
 80062d2:	009b      	lsls	r3, r3, #2
 80062d4:	440b      	add	r3, r1
 80062d6:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 80062da:	2200      	movs	r2, #0
 80062dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80062de:	7bfa      	ldrb	r2, [r7, #15]
 80062e0:	6879      	ldr	r1, [r7, #4]
 80062e2:	4613      	mov	r3, r2
 80062e4:	00db      	lsls	r3, r3, #3
 80062e6:	4413      	add	r3, r2
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	440b      	add	r3, r1
 80062ec:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80062f0:	2200      	movs	r2, #0
 80062f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80062f4:	7bfa      	ldrb	r2, [r7, #15]
 80062f6:	6879      	ldr	r1, [r7, #4]
 80062f8:	4613      	mov	r3, r2
 80062fa:	00db      	lsls	r3, r3, #3
 80062fc:	4413      	add	r3, r2
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	440b      	add	r3, r1
 8006302:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8006306:	2200      	movs	r2, #0
 8006308:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800630a:	7bfb      	ldrb	r3, [r7, #15]
 800630c:	3301      	adds	r3, #1
 800630e:	73fb      	strb	r3, [r7, #15]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	791b      	ldrb	r3, [r3, #4]
 8006314:	7bfa      	ldrb	r2, [r7, #15]
 8006316:	429a      	cmp	r2, r3
 8006318:	d3b5      	bcc.n	8006286 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6818      	ldr	r0, [r3, #0]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	7c1a      	ldrb	r2, [r3, #16]
 8006322:	f88d 2000 	strb.w	r2, [sp]
 8006326:	3304      	adds	r3, #4
 8006328:	cb0e      	ldmia	r3, {r1, r2, r3}
 800632a:	f004 f951 	bl	800a5d0 <USB_DevInit>
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	d005      	beq.n	8006340 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2202      	movs	r2, #2
 8006338:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	e00c      	b.n	800635a <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2201      	movs	r2, #1
 800634a:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4618      	mov	r0, r3
 8006354:	f005 f995 	bl	800b682 <USB_DevDisconnect>

  return HAL_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3710      	adds	r7, #16
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}

08006362 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006362:	b580      	push	{r7, lr}
 8006364:	b084      	sub	sp, #16
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8006376:	2b01      	cmp	r3, #1
 8006378:	d101      	bne.n	800637e <HAL_PCD_Start+0x1c>
 800637a:	2302      	movs	r3, #2
 800637c:	e022      	b.n	80063c4 <HAL_PCD_Start+0x62>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	2201      	movs	r2, #1
 8006382:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800638e:	2b00      	cmp	r3, #0
 8006390:	d009      	beq.n	80063a6 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8006396:	2b01      	cmp	r3, #1
 8006398:	d105      	bne.n	80063a6 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800639e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4618      	mov	r0, r3
 80063ac:	f004 f8a2 	bl	800a4f4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4618      	mov	r0, r3
 80063b6:	f005 f943 	bl	800b640 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 80063c2:	2300      	movs	r3, #0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3710      	adds	r7, #16
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80063cc:	b590      	push	{r4, r7, lr}
 80063ce:	b08d      	sub	sp, #52	; 0x34
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063da:	6a3b      	ldr	r3, [r7, #32]
 80063dc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	4618      	mov	r0, r3
 80063e4:	f005 fa01 	bl	800b7ea <USB_GetMode>
 80063e8:	4603      	mov	r3, r0
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	f040 848c 	bne.w	8006d08 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	4618      	mov	r0, r3
 80063f6:	f005 f965 	bl	800b6c4 <USB_ReadInterrupts>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	f000 8482 	beq.w	8006d06 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	0a1b      	lsrs	r3, r3, #8
 800640c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f8c3 24d4 	str.w	r2, [r3, #1236]	; 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4618      	mov	r0, r3
 800641c:	f005 f952 	bl	800b6c4 <USB_ReadInterrupts>
 8006420:	4603      	mov	r3, r0
 8006422:	f003 0302 	and.w	r3, r3, #2
 8006426:	2b02      	cmp	r3, #2
 8006428:	d107      	bne.n	800643a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	695a      	ldr	r2, [r3, #20]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f002 0202 	and.w	r2, r2, #2
 8006438:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4618      	mov	r0, r3
 8006440:	f005 f940 	bl	800b6c4 <USB_ReadInterrupts>
 8006444:	4603      	mov	r3, r0
 8006446:	f003 0310 	and.w	r3, r3, #16
 800644a:	2b10      	cmp	r3, #16
 800644c:	d161      	bne.n	8006512 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	699a      	ldr	r2, [r3, #24]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f022 0210 	bic.w	r2, r2, #16
 800645c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800645e:	6a3b      	ldr	r3, [r7, #32]
 8006460:	6a1b      	ldr	r3, [r3, #32]
 8006462:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006464:	69bb      	ldr	r3, [r7, #24]
 8006466:	f003 020f 	and.w	r2, r3, #15
 800646a:	4613      	mov	r3, r2
 800646c:	00db      	lsls	r3, r3, #3
 800646e:	4413      	add	r3, r2
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	4413      	add	r3, r2
 800647a:	3304      	adds	r3, #4
 800647c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	0c5b      	lsrs	r3, r3, #17
 8006482:	f003 030f 	and.w	r3, r3, #15
 8006486:	2b02      	cmp	r3, #2
 8006488:	d124      	bne.n	80064d4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800648a:	69ba      	ldr	r2, [r7, #24]
 800648c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8006490:	4013      	ands	r3, r2
 8006492:	2b00      	cmp	r3, #0
 8006494:	d035      	beq.n	8006502 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	091b      	lsrs	r3, r3, #4
 800649e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80064a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	461a      	mov	r2, r3
 80064a8:	6a38      	ldr	r0, [r7, #32]
 80064aa:	f004 ff77 	bl	800b39c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	68da      	ldr	r2, [r3, #12]
 80064b2:	69bb      	ldr	r3, [r7, #24]
 80064b4:	091b      	lsrs	r3, r3, #4
 80064b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80064ba:	441a      	add	r2, r3
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	695a      	ldr	r2, [r3, #20]
 80064c4:	69bb      	ldr	r3, [r7, #24]
 80064c6:	091b      	lsrs	r3, r3, #4
 80064c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80064cc:	441a      	add	r2, r3
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	615a      	str	r2, [r3, #20]
 80064d2:	e016      	b.n	8006502 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80064d4:	69bb      	ldr	r3, [r7, #24]
 80064d6:	0c5b      	lsrs	r3, r3, #17
 80064d8:	f003 030f 	and.w	r3, r3, #15
 80064dc:	2b06      	cmp	r3, #6
 80064de:	d110      	bne.n	8006502 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80064e6:	2208      	movs	r2, #8
 80064e8:	4619      	mov	r1, r3
 80064ea:	6a38      	ldr	r0, [r7, #32]
 80064ec:	f004 ff56 	bl	800b39c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	695a      	ldr	r2, [r3, #20]
 80064f4:	69bb      	ldr	r3, [r7, #24]
 80064f6:	091b      	lsrs	r3, r3, #4
 80064f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80064fc:	441a      	add	r2, r3
 80064fe:	697b      	ldr	r3, [r7, #20]
 8006500:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	699a      	ldr	r2, [r3, #24]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f042 0210 	orr.w	r2, r2, #16
 8006510:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4618      	mov	r0, r3
 8006518:	f005 f8d4 	bl	800b6c4 <USB_ReadInterrupts>
 800651c:	4603      	mov	r3, r0
 800651e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006522:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006526:	f040 80a7 	bne.w	8006678 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800652a:	2300      	movs	r3, #0
 800652c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4618      	mov	r0, r3
 8006534:	f005 f8d9 	bl	800b6ea <USB_ReadDevAllOutEpInterrupt>
 8006538:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800653a:	e099      	b.n	8006670 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800653c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800653e:	f003 0301 	and.w	r3, r3, #1
 8006542:	2b00      	cmp	r3, #0
 8006544:	f000 808e 	beq.w	8006664 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800654e:	b2d2      	uxtb	r2, r2
 8006550:	4611      	mov	r1, r2
 8006552:	4618      	mov	r0, r3
 8006554:	f005 f8fd 	bl	800b752 <USB_ReadDevOutEPInterrupt>
 8006558:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800655a:	693b      	ldr	r3, [r7, #16]
 800655c:	f003 0301 	and.w	r3, r3, #1
 8006560:	2b00      	cmp	r3, #0
 8006562:	d00c      	beq.n	800657e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006566:	015a      	lsls	r2, r3, #5
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	4413      	add	r3, r2
 800656c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006570:	461a      	mov	r2, r3
 8006572:	2301      	movs	r3, #1
 8006574:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8006576:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006578:	6878      	ldr	r0, [r7, #4]
 800657a:	f000 fea1 	bl	80072c0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	f003 0308 	and.w	r3, r3, #8
 8006584:	2b00      	cmp	r3, #0
 8006586:	d00c      	beq.n	80065a2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8006588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800658a:	015a      	lsls	r2, r3, #5
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	4413      	add	r3, r2
 8006590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006594:	461a      	mov	r2, r3
 8006596:	2308      	movs	r3, #8
 8006598:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800659a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 ff77 	bl	8007490 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	f003 0310 	and.w	r3, r3, #16
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d008      	beq.n	80065be <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80065ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ae:	015a      	lsls	r2, r3, #5
 80065b0:	69fb      	ldr	r3, [r7, #28]
 80065b2:	4413      	add	r3, r2
 80065b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065b8:	461a      	mov	r2, r3
 80065ba:	2310      	movs	r3, #16
 80065bc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	f003 0302 	and.w	r3, r3, #2
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d030      	beq.n	800662a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80065c8:	6a3b      	ldr	r3, [r7, #32]
 80065ca:	695b      	ldr	r3, [r3, #20]
 80065cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065d0:	2b80      	cmp	r3, #128	; 0x80
 80065d2:	d109      	bne.n	80065e8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	69fa      	ldr	r2, [r7, #28]
 80065de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80065e6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80065e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065ea:	4613      	mov	r3, r2
 80065ec:	00db      	lsls	r3, r3, #3
 80065ee:	4413      	add	r3, r2
 80065f0:	009b      	lsls	r3, r3, #2
 80065f2:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80065f6:	687a      	ldr	r2, [r7, #4]
 80065f8:	4413      	add	r3, r2
 80065fa:	3304      	adds	r3, #4
 80065fc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	78db      	ldrb	r3, [r3, #3]
 8006602:	2b01      	cmp	r3, #1
 8006604:	d108      	bne.n	8006618 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	2200      	movs	r2, #0
 800660a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800660c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660e:	b2db      	uxtb	r3, r3
 8006610:	4619      	mov	r1, r3
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f008 fee4 	bl	800f3e0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8006618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800661a:	015a      	lsls	r2, r3, #5
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	4413      	add	r3, r2
 8006620:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006624:	461a      	mov	r2, r3
 8006626:	2302      	movs	r3, #2
 8006628:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	f003 0320 	and.w	r3, r3, #32
 8006630:	2b00      	cmp	r3, #0
 8006632:	d008      	beq.n	8006646 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006636:	015a      	lsls	r2, r3, #5
 8006638:	69fb      	ldr	r3, [r7, #28]
 800663a:	4413      	add	r3, r2
 800663c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006640:	461a      	mov	r2, r3
 8006642:	2320      	movs	r3, #32
 8006644:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800664c:	2b00      	cmp	r3, #0
 800664e:	d009      	beq.n	8006664 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006652:	015a      	lsls	r2, r3, #5
 8006654:	69fb      	ldr	r3, [r7, #28]
 8006656:	4413      	add	r3, r2
 8006658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800665c:	461a      	mov	r2, r3
 800665e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006662:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006666:	3301      	adds	r3, #1
 8006668:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800666a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666c:	085b      	lsrs	r3, r3, #1
 800666e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006672:	2b00      	cmp	r3, #0
 8006674:	f47f af62 	bne.w	800653c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4618      	mov	r0, r3
 800667e:	f005 f821 	bl	800b6c4 <USB_ReadInterrupts>
 8006682:	4603      	mov	r3, r0
 8006684:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006688:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800668c:	f040 80db 	bne.w	8006846 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	4618      	mov	r0, r3
 8006696:	f005 f842 	bl	800b71e <USB_ReadDevAllInEpInterrupt>
 800669a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800669c:	2300      	movs	r3, #0
 800669e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80066a0:	e0cd      	b.n	800683e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80066a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a4:	f003 0301 	and.w	r3, r3, #1
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	f000 80c2 	beq.w	8006832 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066b4:	b2d2      	uxtb	r2, r2
 80066b6:	4611      	mov	r1, r2
 80066b8:	4618      	mov	r0, r3
 80066ba:	f005 f868 	bl	800b78e <USB_ReadDevInEPInterrupt>
 80066be:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	f003 0301 	and.w	r3, r3, #1
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d057      	beq.n	800677a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80066ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066cc:	f003 030f 	and.w	r3, r3, #15
 80066d0:	2201      	movs	r2, #1
 80066d2:	fa02 f303 	lsl.w	r3, r2, r3
 80066d6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80066d8:	69fb      	ldr	r3, [r7, #28]
 80066da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	43db      	mvns	r3, r3
 80066e4:	69f9      	ldr	r1, [r7, #28]
 80066e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066ea:	4013      	ands	r3, r2
 80066ec:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80066ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f0:	015a      	lsls	r2, r3, #5
 80066f2:	69fb      	ldr	r3, [r7, #28]
 80066f4:	4413      	add	r3, r2
 80066f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066fa:	461a      	mov	r2, r3
 80066fc:	2301      	movs	r3, #1
 80066fe:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	799b      	ldrb	r3, [r3, #6]
 8006704:	2b01      	cmp	r3, #1
 8006706:	d132      	bne.n	800676e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8006708:	6879      	ldr	r1, [r7, #4]
 800670a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800670c:	4613      	mov	r3, r2
 800670e:	00db      	lsls	r3, r3, #3
 8006710:	4413      	add	r3, r2
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	440b      	add	r3, r1
 8006716:	3320      	adds	r3, #32
 8006718:	6819      	ldr	r1, [r3, #0]
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800671e:	4613      	mov	r3, r2
 8006720:	00db      	lsls	r3, r3, #3
 8006722:	4413      	add	r3, r2
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	4403      	add	r3, r0
 8006728:	331c      	adds	r3, #28
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4419      	add	r1, r3
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006732:	4613      	mov	r3, r2
 8006734:	00db      	lsls	r3, r3, #3
 8006736:	4413      	add	r3, r2
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	4403      	add	r3, r0
 800673c:	3320      	adds	r3, #32
 800673e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006742:	2b00      	cmp	r3, #0
 8006744:	d113      	bne.n	800676e <HAL_PCD_IRQHandler+0x3a2>
 8006746:	6879      	ldr	r1, [r7, #4]
 8006748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800674a:	4613      	mov	r3, r2
 800674c:	00db      	lsls	r3, r3, #3
 800674e:	4413      	add	r3, r2
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	440b      	add	r3, r1
 8006754:	3324      	adds	r3, #36	; 0x24
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d108      	bne.n	800676e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6818      	ldr	r0, [r3, #0]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8006766:	461a      	mov	r2, r3
 8006768:	2101      	movs	r1, #1
 800676a:	f005 f86f 	bl	800b84c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800676e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006770:	b2db      	uxtb	r3, r3
 8006772:	4619      	mov	r1, r3
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f008 fdae 	bl	800f2d6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800677a:	693b      	ldr	r3, [r7, #16]
 800677c:	f003 0308 	and.w	r3, r3, #8
 8006780:	2b00      	cmp	r3, #0
 8006782:	d008      	beq.n	8006796 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8006784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006786:	015a      	lsls	r2, r3, #5
 8006788:	69fb      	ldr	r3, [r7, #28]
 800678a:	4413      	add	r3, r2
 800678c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006790:	461a      	mov	r2, r3
 8006792:	2308      	movs	r3, #8
 8006794:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8006796:	693b      	ldr	r3, [r7, #16]
 8006798:	f003 0310 	and.w	r3, r3, #16
 800679c:	2b00      	cmp	r3, #0
 800679e:	d008      	beq.n	80067b2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80067a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a2:	015a      	lsls	r2, r3, #5
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	4413      	add	r3, r2
 80067a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067ac:	461a      	mov	r2, r3
 80067ae:	2310      	movs	r3, #16
 80067b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d008      	beq.n	80067ce <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80067bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067be:	015a      	lsls	r2, r3, #5
 80067c0:	69fb      	ldr	r3, [r7, #28]
 80067c2:	4413      	add	r3, r2
 80067c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067c8:	461a      	mov	r2, r3
 80067ca:	2340      	movs	r3, #64	; 0x40
 80067cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	f003 0302 	and.w	r3, r3, #2
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d023      	beq.n	8006820 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80067d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80067da:	6a38      	ldr	r0, [r7, #32]
 80067dc:	f004 f85c 	bl	800a898 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80067e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067e2:	4613      	mov	r3, r2
 80067e4:	00db      	lsls	r3, r3, #3
 80067e6:	4413      	add	r3, r2
 80067e8:	009b      	lsls	r3, r3, #2
 80067ea:	3310      	adds	r3, #16
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	4413      	add	r3, r2
 80067f0:	3304      	adds	r3, #4
 80067f2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	78db      	ldrb	r3, [r3, #3]
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d108      	bne.n	800680e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	2200      	movs	r2, #0
 8006800:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006804:	b2db      	uxtb	r3, r3
 8006806:	4619      	mov	r1, r3
 8006808:	6878      	ldr	r0, [r7, #4]
 800680a:	f008 fdfb 	bl	800f404 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800680e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006810:	015a      	lsls	r2, r3, #5
 8006812:	69fb      	ldr	r3, [r7, #28]
 8006814:	4413      	add	r3, r2
 8006816:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800681a:	461a      	mov	r2, r3
 800681c:	2302      	movs	r3, #2
 800681e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006826:	2b00      	cmp	r3, #0
 8006828:	d003      	beq.n	8006832 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800682a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f000 fcbb 	bl	80071a8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006834:	3301      	adds	r3, #1
 8006836:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800683a:	085b      	lsrs	r3, r3, #1
 800683c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800683e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006840:	2b00      	cmp	r3, #0
 8006842:	f47f af2e 	bne.w	80066a2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4618      	mov	r0, r3
 800684c:	f004 ff3a 	bl	800b6c4 <USB_ReadInterrupts>
 8006850:	4603      	mov	r3, r0
 8006852:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006856:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800685a:	d122      	bne.n	80068a2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	69fa      	ldr	r2, [r7, #28]
 8006866:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800686a:	f023 0301 	bic.w	r3, r3, #1
 800686e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f893 34cc 	ldrb.w	r3, [r3, #1228]	; 0x4cc
 8006876:	2b01      	cmp	r3, #1
 8006878:	d108      	bne.n	800688c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006882:	2100      	movs	r1, #0
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	f000 fea1 	bl	80075cc <HAL_PCDEx_LPM_Callback>
 800688a:	e002      	b.n	8006892 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f008 fd99 	bl	800f3c4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	695a      	ldr	r2, [r3, #20]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80068a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4618      	mov	r0, r3
 80068a8:	f004 ff0c 	bl	800b6c4 <USB_ReadInterrupts>
 80068ac:	4603      	mov	r3, r0
 80068ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068b6:	d112      	bne.n	80068de <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068be:	689b      	ldr	r3, [r3, #8]
 80068c0:	f003 0301 	and.w	r3, r3, #1
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d102      	bne.n	80068ce <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f008 fd55 	bl	800f378 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	695a      	ldr	r2, [r3, #20]
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80068dc:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4618      	mov	r0, r3
 80068e4:	f004 feee 	bl	800b6c4 <USB_ReadInterrupts>
 80068e8:	4603      	mov	r3, r0
 80068ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80068ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068f2:	f040 80b7 	bne.w	8006a64 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068fc:	685b      	ldr	r3, [r3, #4]
 80068fe:	69fa      	ldr	r2, [r7, #28]
 8006900:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006904:	f023 0301 	bic.w	r3, r3, #1
 8006908:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	2110      	movs	r1, #16
 8006910:	4618      	mov	r0, r3
 8006912:	f003 ffc1 	bl	800a898 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006916:	2300      	movs	r3, #0
 8006918:	62fb      	str	r3, [r7, #44]	; 0x2c
 800691a:	e046      	b.n	80069aa <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800691c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800691e:	015a      	lsls	r2, r3, #5
 8006920:	69fb      	ldr	r3, [r7, #28]
 8006922:	4413      	add	r3, r2
 8006924:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006928:	461a      	mov	r2, r3
 800692a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800692e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006932:	015a      	lsls	r2, r3, #5
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	4413      	add	r3, r2
 8006938:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006940:	0151      	lsls	r1, r2, #5
 8006942:	69fa      	ldr	r2, [r7, #28]
 8006944:	440a      	add	r2, r1
 8006946:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800694a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800694e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006952:	015a      	lsls	r2, r3, #5
 8006954:	69fb      	ldr	r3, [r7, #28]
 8006956:	4413      	add	r3, r2
 8006958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800695c:	461a      	mov	r2, r3
 800695e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006962:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006966:	015a      	lsls	r2, r3, #5
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	4413      	add	r3, r2
 800696c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006974:	0151      	lsls	r1, r2, #5
 8006976:	69fa      	ldr	r2, [r7, #28]
 8006978:	440a      	add	r2, r1
 800697a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800697e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006982:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006986:	015a      	lsls	r2, r3, #5
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	4413      	add	r3, r2
 800698c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006994:	0151      	lsls	r1, r2, #5
 8006996:	69fa      	ldr	r2, [r7, #28]
 8006998:	440a      	add	r2, r1
 800699a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800699e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80069a2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80069a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a6:	3301      	adds	r3, #1
 80069a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	791b      	ldrb	r3, [r3, #4]
 80069ae:	461a      	mov	r2, r3
 80069b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d3b2      	bcc.n	800691c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80069b6:	69fb      	ldr	r3, [r7, #28]
 80069b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069bc:	69db      	ldr	r3, [r3, #28]
 80069be:	69fa      	ldr	r2, [r7, #28]
 80069c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069c4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80069c8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	7bdb      	ldrb	r3, [r3, #15]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d016      	beq.n	8006a00 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069dc:	69fa      	ldr	r2, [r7, #28]
 80069de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069e2:	f043 030b 	orr.w	r3, r3, #11
 80069e6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80069ea:	69fb      	ldr	r3, [r7, #28]
 80069ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069f2:	69fa      	ldr	r2, [r7, #28]
 80069f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80069f8:	f043 030b 	orr.w	r3, r3, #11
 80069fc:	6453      	str	r3, [r2, #68]	; 0x44
 80069fe:	e015      	b.n	8006a2c <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006a00:	69fb      	ldr	r3, [r7, #28]
 8006a02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a06:	695b      	ldr	r3, [r3, #20]
 8006a08:	69fa      	ldr	r2, [r7, #28]
 8006a0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a0e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006a12:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8006a16:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a1e:	691b      	ldr	r3, [r3, #16]
 8006a20:	69fa      	ldr	r2, [r7, #28]
 8006a22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a26:	f043 030b 	orr.w	r3, r3, #11
 8006a2a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	69fa      	ldr	r2, [r7, #28]
 8006a36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a3a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006a3e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6818      	ldr	r0, [r3, #0]
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	f203 439c 	addw	r3, r3, #1180	; 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006a4e:	461a      	mov	r2, r3
 8006a50:	f004 fefc 	bl	800b84c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	695a      	ldr	r2, [r3, #20]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006a62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f004 fe2b 	bl	800b6c4 <USB_ReadInterrupts>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006a74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a78:	d123      	bne.n	8006ac2 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f004 fec1 	bl	800b806 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4618      	mov	r0, r3
 8006a8a:	f003 ff7e 	bl	800a98a <USB_GetDevSpeed>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	461a      	mov	r2, r3
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681c      	ldr	r4, [r3, #0]
 8006a9a:	f001 fa07 	bl	8007eac <HAL_RCC_GetHCLKFreq>
 8006a9e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	4620      	mov	r0, r4
 8006aa8:	f003 fc82 	bl	800a3b0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006aac:	6878      	ldr	r0, [r7, #4]
 8006aae:	f008 fc3a 	bl	800f326 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	695a      	ldr	r2, [r3, #20]
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006ac0:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f004 fdfc 	bl	800b6c4 <USB_ReadInterrupts>
 8006acc:	4603      	mov	r3, r0
 8006ace:	f003 0308 	and.w	r3, r3, #8
 8006ad2:	2b08      	cmp	r3, #8
 8006ad4:	d10a      	bne.n	8006aec <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f008 fc17 	bl	800f30a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	695a      	ldr	r2, [r3, #20]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	f002 0208 	and.w	r2, r2, #8
 8006aea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4618      	mov	r0, r3
 8006af2:	f004 fde7 	bl	800b6c4 <USB_ReadInterrupts>
 8006af6:	4603      	mov	r3, r0
 8006af8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006afc:	2b80      	cmp	r3, #128	; 0x80
 8006afe:	d123      	bne.n	8006b48 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006b00:	6a3b      	ldr	r3, [r7, #32]
 8006b02:	699b      	ldr	r3, [r3, #24]
 8006b04:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006b08:	6a3b      	ldr	r3, [r7, #32]
 8006b0a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	627b      	str	r3, [r7, #36]	; 0x24
 8006b10:	e014      	b.n	8006b3c <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006b12:	6879      	ldr	r1, [r7, #4]
 8006b14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b16:	4613      	mov	r3, r2
 8006b18:	00db      	lsls	r3, r3, #3
 8006b1a:	4413      	add	r3, r2
 8006b1c:	009b      	lsls	r3, r3, #2
 8006b1e:	440b      	add	r3, r1
 8006b20:	f203 2357 	addw	r3, r3, #599	; 0x257
 8006b24:	781b      	ldrb	r3, [r3, #0]
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d105      	bne.n	8006b36 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	4619      	mov	r1, r3
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f000 fb08 	bl	8007146 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b38:	3301      	adds	r3, #1
 8006b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	791b      	ldrb	r3, [r3, #4]
 8006b40:	461a      	mov	r2, r3
 8006b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d3e4      	bcc.n	8006b12 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f004 fdb9 	bl	800b6c4 <USB_ReadInterrupts>
 8006b52:	4603      	mov	r3, r0
 8006b54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006b5c:	d13c      	bne.n	8006bd8 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006b5e:	2301      	movs	r3, #1
 8006b60:	627b      	str	r3, [r7, #36]	; 0x24
 8006b62:	e02b      	b.n	8006bbc <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b66:	015a      	lsls	r2, r3, #5
 8006b68:	69fb      	ldr	r3, [r7, #28]
 8006b6a:	4413      	add	r3, r2
 8006b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006b74:	6879      	ldr	r1, [r7, #4]
 8006b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b78:	4613      	mov	r3, r2
 8006b7a:	00db      	lsls	r3, r3, #3
 8006b7c:	4413      	add	r3, r2
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	440b      	add	r3, r1
 8006b82:	3318      	adds	r3, #24
 8006b84:	781b      	ldrb	r3, [r3, #0]
 8006b86:	2b01      	cmp	r3, #1
 8006b88:	d115      	bne.n	8006bb6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006b8a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	da12      	bge.n	8006bb6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006b90:	6879      	ldr	r1, [r7, #4]
 8006b92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b94:	4613      	mov	r3, r2
 8006b96:	00db      	lsls	r3, r3, #3
 8006b98:	4413      	add	r3, r2
 8006b9a:	009b      	lsls	r3, r3, #2
 8006b9c:	440b      	add	r3, r1
 8006b9e:	3317      	adds	r3, #23
 8006ba0:	2201      	movs	r2, #1
 8006ba2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	4619      	mov	r1, r3
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f000 fac8 	bl	8007146 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bb8:	3301      	adds	r3, #1
 8006bba:	627b      	str	r3, [r7, #36]	; 0x24
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	791b      	ldrb	r3, [r3, #4]
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc4:	4293      	cmp	r3, r2
 8006bc6:	d3cd      	bcc.n	8006b64 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	695a      	ldr	r2, [r3, #20]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006bd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f004 fd71 	bl	800b6c4 <USB_ReadInterrupts>
 8006be2:	4603      	mov	r3, r0
 8006be4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006be8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006bec:	d156      	bne.n	8006c9c <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006bee:	2301      	movs	r3, #1
 8006bf0:	627b      	str	r3, [r7, #36]	; 0x24
 8006bf2:	e045      	b.n	8006c80 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf6:	015a      	lsls	r2, r3, #5
 8006bf8:	69fb      	ldr	r3, [r7, #28]
 8006bfa:	4413      	add	r3, r2
 8006bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006c04:	6879      	ldr	r1, [r7, #4]
 8006c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c08:	4613      	mov	r3, r2
 8006c0a:	00db      	lsls	r3, r3, #3
 8006c0c:	4413      	add	r3, r2
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	440b      	add	r3, r1
 8006c12:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d12e      	bne.n	8006c7a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006c1c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	da2b      	bge.n	8006c7a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	; 0x4d4
 8006c2e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d121      	bne.n	8006c7a <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006c36:	6879      	ldr	r1, [r7, #4]
 8006c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c3a:	4613      	mov	r3, r2
 8006c3c:	00db      	lsls	r3, r3, #3
 8006c3e:	4413      	add	r3, r2
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	440b      	add	r3, r1
 8006c44:	f203 2357 	addw	r3, r3, #599	; 0x257
 8006c48:	2201      	movs	r2, #1
 8006c4a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006c4c:	6a3b      	ldr	r3, [r7, #32]
 8006c4e:	699b      	ldr	r3, [r3, #24]
 8006c50:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006c54:	6a3b      	ldr	r3, [r7, #32]
 8006c56:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006c58:	6a3b      	ldr	r3, [r7, #32]
 8006c5a:	695b      	ldr	r3, [r3, #20]
 8006c5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d10a      	bne.n	8006c7a <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006c64:	69fb      	ldr	r3, [r7, #28]
 8006c66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	69fa      	ldr	r2, [r7, #28]
 8006c6e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c76:	6053      	str	r3, [r2, #4]
            break;
 8006c78:	e008      	b.n	8006c8c <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7c:	3301      	adds	r3, #1
 8006c7e:	627b      	str	r3, [r7, #36]	; 0x24
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	791b      	ldrb	r3, [r3, #4]
 8006c84:	461a      	mov	r2, r3
 8006c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d3b3      	bcc.n	8006bf4 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	695a      	ldr	r2, [r3, #20]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006c9a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f004 fd0f 	bl	800b6c4 <USB_ReadInterrupts>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006cac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cb0:	d10a      	bne.n	8006cc8 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f008 fbb8 	bl	800f428 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	695a      	ldr	r2, [r3, #20]
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006cc6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4618      	mov	r0, r3
 8006cce:	f004 fcf9 	bl	800b6c4 <USB_ReadInterrupts>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	f003 0304 	and.w	r3, r3, #4
 8006cd8:	2b04      	cmp	r3, #4
 8006cda:	d115      	bne.n	8006d08 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	685b      	ldr	r3, [r3, #4]
 8006ce2:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006ce4:	69bb      	ldr	r3, [r7, #24]
 8006ce6:	f003 0304 	and.w	r3, r3, #4
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d002      	beq.n	8006cf4 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f008 fba8 	bl	800f444 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	6859      	ldr	r1, [r3, #4]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	69ba      	ldr	r2, [r7, #24]
 8006d00:	430a      	orrs	r2, r1
 8006d02:	605a      	str	r2, [r3, #4]
 8006d04:	e000      	b.n	8006d08 <HAL_PCD_IRQHandler+0x93c>
      return;
 8006d06:	bf00      	nop
    }
  }
}
 8006d08:	3734      	adds	r7, #52	; 0x34
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd90      	pop	{r4, r7, pc}

08006d0e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006d0e:	b580      	push	{r7, lr}
 8006d10:	b082      	sub	sp, #8
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	6078      	str	r0, [r7, #4]
 8006d16:	460b      	mov	r3, r1
 8006d18:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d101      	bne.n	8006d28 <HAL_PCD_SetAddress+0x1a>
 8006d24:	2302      	movs	r3, #2
 8006d26:	e012      	b.n	8006d4e <HAL_PCD_SetAddress+0x40>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  hpcd->USB_Address = address;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	78fa      	ldrb	r2, [r7, #3]
 8006d34:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	78fa      	ldrb	r2, [r7, #3]
 8006d3c:	4611      	mov	r1, r2
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f004 fc58 	bl	800b5f4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2200      	movs	r2, #0
 8006d48:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3708      	adds	r7, #8
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}

08006d56 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006d56:	b580      	push	{r7, lr}
 8006d58:	b084      	sub	sp, #16
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
 8006d5e:	4608      	mov	r0, r1
 8006d60:	4611      	mov	r1, r2
 8006d62:	461a      	mov	r2, r3
 8006d64:	4603      	mov	r3, r0
 8006d66:	70fb      	strb	r3, [r7, #3]
 8006d68:	460b      	mov	r3, r1
 8006d6a:	803b      	strh	r3, [r7, #0]
 8006d6c:	4613      	mov	r3, r2
 8006d6e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006d70:	2300      	movs	r3, #0
 8006d72:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006d74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	da0f      	bge.n	8006d9c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d7c:	78fb      	ldrb	r3, [r7, #3]
 8006d7e:	f003 020f 	and.w	r2, r3, #15
 8006d82:	4613      	mov	r3, r2
 8006d84:	00db      	lsls	r3, r3, #3
 8006d86:	4413      	add	r3, r2
 8006d88:	009b      	lsls	r3, r3, #2
 8006d8a:	3310      	adds	r3, #16
 8006d8c:	687a      	ldr	r2, [r7, #4]
 8006d8e:	4413      	add	r3, r2
 8006d90:	3304      	adds	r3, #4
 8006d92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2201      	movs	r2, #1
 8006d98:	705a      	strb	r2, [r3, #1]
 8006d9a:	e00f      	b.n	8006dbc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006d9c:	78fb      	ldrb	r3, [r7, #3]
 8006d9e:	f003 020f 	and.w	r2, r3, #15
 8006da2:	4613      	mov	r3, r2
 8006da4:	00db      	lsls	r3, r3, #3
 8006da6:	4413      	add	r3, r2
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8006dae:	687a      	ldr	r2, [r7, #4]
 8006db0:	4413      	add	r3, r2
 8006db2:	3304      	adds	r3, #4
 8006db4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2200      	movs	r2, #0
 8006dba:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006dbc:	78fb      	ldrb	r3, [r7, #3]
 8006dbe:	f003 030f 	and.w	r3, r3, #15
 8006dc2:	b2da      	uxtb	r2, r3
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006dc8:	883a      	ldrh	r2, [r7, #0]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	78ba      	ldrb	r2, [r7, #2]
 8006dd2:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	785b      	ldrb	r3, [r3, #1]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d004      	beq.n	8006de6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	b29a      	uxth	r2, r3
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006de6:	78bb      	ldrb	r3, [r7, #2]
 8006de8:	2b02      	cmp	r3, #2
 8006dea:	d102      	bne.n	8006df2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2200      	movs	r2, #0
 8006df0:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d101      	bne.n	8006e00 <HAL_PCD_EP_Open+0xaa>
 8006dfc:	2302      	movs	r3, #2
 8006dfe:	e00e      	b.n	8006e1e <HAL_PCD_EP_Open+0xc8>
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2201      	movs	r2, #1
 8006e04:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	68f9      	ldr	r1, [r7, #12]
 8006e0e:	4618      	mov	r0, r3
 8006e10:	f003 fde0 	bl	800a9d4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	2200      	movs	r2, #0
 8006e18:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return ret;
 8006e1c:	7afb      	ldrb	r3, [r7, #11]
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}

08006e26 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006e26:	b580      	push	{r7, lr}
 8006e28:	b084      	sub	sp, #16
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
 8006e2e:	460b      	mov	r3, r1
 8006e30:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006e32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	da0f      	bge.n	8006e5a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006e3a:	78fb      	ldrb	r3, [r7, #3]
 8006e3c:	f003 020f 	and.w	r2, r3, #15
 8006e40:	4613      	mov	r3, r2
 8006e42:	00db      	lsls	r3, r3, #3
 8006e44:	4413      	add	r3, r2
 8006e46:	009b      	lsls	r3, r3, #2
 8006e48:	3310      	adds	r3, #16
 8006e4a:	687a      	ldr	r2, [r7, #4]
 8006e4c:	4413      	add	r3, r2
 8006e4e:	3304      	adds	r3, #4
 8006e50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2201      	movs	r2, #1
 8006e56:	705a      	strb	r2, [r3, #1]
 8006e58:	e00f      	b.n	8006e7a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006e5a:	78fb      	ldrb	r3, [r7, #3]
 8006e5c:	f003 020f 	and.w	r2, r3, #15
 8006e60:	4613      	mov	r3, r2
 8006e62:	00db      	lsls	r3, r3, #3
 8006e64:	4413      	add	r3, r2
 8006e66:	009b      	lsls	r3, r3, #2
 8006e68:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	4413      	add	r3, r2
 8006e70:	3304      	adds	r3, #4
 8006e72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2200      	movs	r2, #0
 8006e78:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006e7a:	78fb      	ldrb	r3, [r7, #3]
 8006e7c:	f003 030f 	and.w	r3, r3, #15
 8006e80:	b2da      	uxtb	r2, r3
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d101      	bne.n	8006e94 <HAL_PCD_EP_Close+0x6e>
 8006e90:	2302      	movs	r3, #2
 8006e92:	e00e      	b.n	8006eb2 <HAL_PCD_EP_Close+0x8c>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2201      	movs	r2, #1
 8006e98:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	68f9      	ldr	r1, [r7, #12]
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	f003 fe1e 	bl	800aae4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  return HAL_OK;
 8006eb0:	2300      	movs	r3, #0
}
 8006eb2:	4618      	mov	r0, r3
 8006eb4:	3710      	adds	r7, #16
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}

08006eba <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006eba:	b580      	push	{r7, lr}
 8006ebc:	b086      	sub	sp, #24
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	60f8      	str	r0, [r7, #12]
 8006ec2:	607a      	str	r2, [r7, #4]
 8006ec4:	603b      	str	r3, [r7, #0]
 8006ec6:	460b      	mov	r3, r1
 8006ec8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006eca:	7afb      	ldrb	r3, [r7, #11]
 8006ecc:	f003 020f 	and.w	r2, r3, #15
 8006ed0:	4613      	mov	r3, r2
 8006ed2:	00db      	lsls	r3, r3, #3
 8006ed4:	4413      	add	r3, r2
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8006edc:	68fa      	ldr	r2, [r7, #12]
 8006ede:	4413      	add	r3, r2
 8006ee0:	3304      	adds	r3, #4
 8006ee2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	683a      	ldr	r2, [r7, #0]
 8006eee:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006efc:	7afb      	ldrb	r3, [r7, #11]
 8006efe:	f003 030f 	and.w	r3, r3, #15
 8006f02:	b2da      	uxtb	r2, r3
 8006f04:	697b      	ldr	r3, [r7, #20]
 8006f06:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	799b      	ldrb	r3, [r3, #6]
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d102      	bne.n	8006f16 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6818      	ldr	r0, [r3, #0]
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	799b      	ldrb	r3, [r3, #6]
 8006f1e:	461a      	mov	r2, r3
 8006f20:	6979      	ldr	r1, [r7, #20]
 8006f22:	f003 febb 	bl	800ac9c <USB_EPStartXfer>

  return HAL_OK;
 8006f26:	2300      	movs	r3, #0
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3718      	adds	r7, #24
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8006f30:	b480      	push	{r7}
 8006f32:	b083      	sub	sp, #12
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	460b      	mov	r3, r1
 8006f3a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006f3c:	78fb      	ldrb	r3, [r7, #3]
 8006f3e:	f003 020f 	and.w	r2, r3, #15
 8006f42:	6879      	ldr	r1, [r7, #4]
 8006f44:	4613      	mov	r3, r2
 8006f46:	00db      	lsls	r3, r3, #3
 8006f48:	4413      	add	r3, r2
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	440b      	add	r3, r1
 8006f4e:	f503 731a 	add.w	r3, r3, #616	; 0x268
 8006f52:	681b      	ldr	r3, [r3, #0]
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	370c      	adds	r7, #12
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr

08006f60 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006f60:	b580      	push	{r7, lr}
 8006f62:	b086      	sub	sp, #24
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	60f8      	str	r0, [r7, #12]
 8006f68:	607a      	str	r2, [r7, #4]
 8006f6a:	603b      	str	r3, [r7, #0]
 8006f6c:	460b      	mov	r3, r1
 8006f6e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006f70:	7afb      	ldrb	r3, [r7, #11]
 8006f72:	f003 020f 	and.w	r2, r3, #15
 8006f76:	4613      	mov	r3, r2
 8006f78:	00db      	lsls	r3, r3, #3
 8006f7a:	4413      	add	r3, r2
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	3310      	adds	r3, #16
 8006f80:	68fa      	ldr	r2, [r7, #12]
 8006f82:	4413      	add	r3, r2
 8006f84:	3304      	adds	r3, #4
 8006f86:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	687a      	ldr	r2, [r7, #4]
 8006f8c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	683a      	ldr	r2, [r7, #0]
 8006f92:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	2200      	movs	r2, #0
 8006f98:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006fa0:	7afb      	ldrb	r3, [r7, #11]
 8006fa2:	f003 030f 	and.w	r3, r3, #15
 8006fa6:	b2da      	uxtb	r2, r3
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	799b      	ldrb	r3, [r3, #6]
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d102      	bne.n	8006fba <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006fb4:	687a      	ldr	r2, [r7, #4]
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	6818      	ldr	r0, [r3, #0]
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	799b      	ldrb	r3, [r3, #6]
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	6979      	ldr	r1, [r7, #20]
 8006fc6:	f003 fe69 	bl	800ac9c <USB_EPStartXfer>

  return HAL_OK;
 8006fca:	2300      	movs	r3, #0
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3718      	adds	r7, #24
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}

08006fd4 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006fd4:	b580      	push	{r7, lr}
 8006fd6:	b084      	sub	sp, #16
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	460b      	mov	r3, r1
 8006fde:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006fe0:	78fb      	ldrb	r3, [r7, #3]
 8006fe2:	f003 030f 	and.w	r3, r3, #15
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	7912      	ldrb	r2, [r2, #4]
 8006fea:	4293      	cmp	r3, r2
 8006fec:	d901      	bls.n	8006ff2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006fee:	2301      	movs	r3, #1
 8006ff0:	e04f      	b.n	8007092 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006ff2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	da0f      	bge.n	800701a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ffa:	78fb      	ldrb	r3, [r7, #3]
 8006ffc:	f003 020f 	and.w	r2, r3, #15
 8007000:	4613      	mov	r3, r2
 8007002:	00db      	lsls	r3, r3, #3
 8007004:	4413      	add	r3, r2
 8007006:	009b      	lsls	r3, r3, #2
 8007008:	3310      	adds	r3, #16
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	4413      	add	r3, r2
 800700e:	3304      	adds	r3, #4
 8007010:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2201      	movs	r2, #1
 8007016:	705a      	strb	r2, [r3, #1]
 8007018:	e00d      	b.n	8007036 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800701a:	78fa      	ldrb	r2, [r7, #3]
 800701c:	4613      	mov	r3, r2
 800701e:	00db      	lsls	r3, r3, #3
 8007020:	4413      	add	r3, r2
 8007022:	009b      	lsls	r3, r3, #2
 8007024:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8007028:	687a      	ldr	r2, [r7, #4]
 800702a:	4413      	add	r3, r2
 800702c:	3304      	adds	r3, #4
 800702e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2200      	movs	r2, #0
 8007034:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2201      	movs	r2, #1
 800703a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800703c:	78fb      	ldrb	r3, [r7, #3]
 800703e:	f003 030f 	and.w	r3, r3, #15
 8007042:	b2da      	uxtb	r2, r3
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 800704e:	2b01      	cmp	r3, #1
 8007050:	d101      	bne.n	8007056 <HAL_PCD_EP_SetStall+0x82>
 8007052:	2302      	movs	r3, #2
 8007054:	e01d      	b.n	8007092 <HAL_PCD_EP_SetStall+0xbe>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2201      	movs	r2, #1
 800705a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	68f9      	ldr	r1, [r7, #12]
 8007064:	4618      	mov	r0, r3
 8007066:	f004 f9f1 	bl	800b44c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800706a:	78fb      	ldrb	r3, [r7, #3]
 800706c:	f003 030f 	and.w	r3, r3, #15
 8007070:	2b00      	cmp	r3, #0
 8007072:	d109      	bne.n	8007088 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6818      	ldr	r0, [r3, #0]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	7999      	ldrb	r1, [r3, #6]
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8007082:	461a      	mov	r2, r3
 8007084:	f004 fbe2 	bl	800b84c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 8007090:	2300      	movs	r3, #0
}
 8007092:	4618      	mov	r0, r3
 8007094:	3710      	adds	r7, #16
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}

0800709a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800709a:	b580      	push	{r7, lr}
 800709c:	b084      	sub	sp, #16
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
 80070a2:	460b      	mov	r3, r1
 80070a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80070a6:	78fb      	ldrb	r3, [r7, #3]
 80070a8:	f003 030f 	and.w	r3, r3, #15
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	7912      	ldrb	r2, [r2, #4]
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d901      	bls.n	80070b8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	e042      	b.n	800713e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80070b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	da0f      	bge.n	80070e0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80070c0:	78fb      	ldrb	r3, [r7, #3]
 80070c2:	f003 020f 	and.w	r2, r3, #15
 80070c6:	4613      	mov	r3, r2
 80070c8:	00db      	lsls	r3, r3, #3
 80070ca:	4413      	add	r3, r2
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	3310      	adds	r3, #16
 80070d0:	687a      	ldr	r2, [r7, #4]
 80070d2:	4413      	add	r3, r2
 80070d4:	3304      	adds	r3, #4
 80070d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2201      	movs	r2, #1
 80070dc:	705a      	strb	r2, [r3, #1]
 80070de:	e00f      	b.n	8007100 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80070e0:	78fb      	ldrb	r3, [r7, #3]
 80070e2:	f003 020f 	and.w	r2, r3, #15
 80070e6:	4613      	mov	r3, r2
 80070e8:	00db      	lsls	r3, r3, #3
 80070ea:	4413      	add	r3, r2
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	f503 7314 	add.w	r3, r3, #592	; 0x250
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	4413      	add	r3, r2
 80070f6:	3304      	adds	r3, #4
 80070f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	2200      	movs	r2, #0
 80070fe:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	2200      	movs	r2, #0
 8007104:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007106:	78fb      	ldrb	r3, [r7, #3]
 8007108:	f003 030f 	and.w	r3, r3, #15
 800710c:	b2da      	uxtb	r2, r3
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f893 3494 	ldrb.w	r3, [r3, #1172]	; 0x494
 8007118:	2b01      	cmp	r3, #1
 800711a:	d101      	bne.n	8007120 <HAL_PCD_EP_ClrStall+0x86>
 800711c:	2302      	movs	r3, #2
 800711e:	e00e      	b.n	800713e <HAL_PCD_EP_ClrStall+0xa4>
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2201      	movs	r2, #1
 8007124:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	68f9      	ldr	r1, [r7, #12]
 800712e:	4618      	mov	r0, r3
 8007130:	f004 f9fa 	bl	800b528 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2200      	movs	r2, #0
 8007138:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

  return HAL_OK;
 800713c:	2300      	movs	r3, #0
}
 800713e:	4618      	mov	r0, r3
 8007140:	3710      	adds	r7, #16
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}

08007146 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007146:	b580      	push	{r7, lr}
 8007148:	b084      	sub	sp, #16
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]
 800714e:	460b      	mov	r3, r1
 8007150:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8007152:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007156:	2b00      	cmp	r3, #0
 8007158:	da0c      	bge.n	8007174 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800715a:	78fb      	ldrb	r3, [r7, #3]
 800715c:	f003 020f 	and.w	r2, r3, #15
 8007160:	4613      	mov	r3, r2
 8007162:	00db      	lsls	r3, r3, #3
 8007164:	4413      	add	r3, r2
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	3310      	adds	r3, #16
 800716a:	687a      	ldr	r2, [r7, #4]
 800716c:	4413      	add	r3, r2
 800716e:	3304      	adds	r3, #4
 8007170:	60fb      	str	r3, [r7, #12]
 8007172:	e00c      	b.n	800718e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007174:	78fb      	ldrb	r3, [r7, #3]
 8007176:	f003 020f 	and.w	r2, r3, #15
 800717a:	4613      	mov	r3, r2
 800717c:	00db      	lsls	r3, r3, #3
 800717e:	4413      	add	r3, r2
 8007180:	009b      	lsls	r3, r3, #2
 8007182:	f503 7314 	add.w	r3, r3, #592	; 0x250
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	4413      	add	r3, r2
 800718a:	3304      	adds	r3, #4
 800718c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	68f9      	ldr	r1, [r7, #12]
 8007194:	4618      	mov	r0, r3
 8007196:	f004 f819 	bl	800b1cc <USB_EPStopXfer>
 800719a:	4603      	mov	r3, r0
 800719c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800719e:	7afb      	ldrb	r3, [r7, #11]
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3710      	adds	r7, #16
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b08a      	sub	sp, #40	; 0x28
 80071ac:	af02      	add	r7, sp, #8
 80071ae:	6078      	str	r0, [r7, #4]
 80071b0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071b8:	697b      	ldr	r3, [r7, #20]
 80071ba:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80071bc:	683a      	ldr	r2, [r7, #0]
 80071be:	4613      	mov	r3, r2
 80071c0:	00db      	lsls	r3, r3, #3
 80071c2:	4413      	add	r3, r2
 80071c4:	009b      	lsls	r3, r3, #2
 80071c6:	3310      	adds	r3, #16
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	4413      	add	r3, r2
 80071cc:	3304      	adds	r3, #4
 80071ce:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	695a      	ldr	r2, [r3, #20]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	691b      	ldr	r3, [r3, #16]
 80071d8:	429a      	cmp	r2, r3
 80071da:	d901      	bls.n	80071e0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80071dc:	2301      	movs	r3, #1
 80071de:	e06b      	b.n	80072b8 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	691a      	ldr	r2, [r3, #16]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	695b      	ldr	r3, [r3, #20]
 80071e8:	1ad3      	subs	r3, r2, r3
 80071ea:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	69fa      	ldr	r2, [r7, #28]
 80071f2:	429a      	cmp	r2, r3
 80071f4:	d902      	bls.n	80071fc <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	3303      	adds	r3, #3
 8007200:	089b      	lsrs	r3, r3, #2
 8007202:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007204:	e02a      	b.n	800725c <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	691a      	ldr	r2, [r3, #16]
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	695b      	ldr	r3, [r3, #20]
 800720e:	1ad3      	subs	r3, r2, r3
 8007210:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	689b      	ldr	r3, [r3, #8]
 8007216:	69fa      	ldr	r2, [r7, #28]
 8007218:	429a      	cmp	r2, r3
 800721a:	d902      	bls.n	8007222 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8007222:	69fb      	ldr	r3, [r7, #28]
 8007224:	3303      	adds	r3, #3
 8007226:	089b      	lsrs	r3, r3, #2
 8007228:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	68d9      	ldr	r1, [r3, #12]
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	b2da      	uxtb	r2, r3
 8007232:	69fb      	ldr	r3, [r7, #28]
 8007234:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800723a:	9300      	str	r3, [sp, #0]
 800723c:	4603      	mov	r3, r0
 800723e:	6978      	ldr	r0, [r7, #20]
 8007240:	f004 f86e 	bl	800b320 <USB_WritePacket>

    ep->xfer_buff  += len;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	68da      	ldr	r2, [r3, #12]
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	441a      	add	r2, r3
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	695a      	ldr	r2, [r3, #20]
 8007254:	69fb      	ldr	r3, [r7, #28]
 8007256:	441a      	add	r2, r3
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	015a      	lsls	r2, r3, #5
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	4413      	add	r3, r2
 8007264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007268:	699b      	ldr	r3, [r3, #24]
 800726a:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800726c:	69ba      	ldr	r2, [r7, #24]
 800726e:	429a      	cmp	r2, r3
 8007270:	d809      	bhi.n	8007286 <PCD_WriteEmptyTxFifo+0xde>
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	695a      	ldr	r2, [r3, #20]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800727a:	429a      	cmp	r2, r3
 800727c:	d203      	bcs.n	8007286 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	691b      	ldr	r3, [r3, #16]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d1bf      	bne.n	8007206 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	691a      	ldr	r2, [r3, #16]
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	695b      	ldr	r3, [r3, #20]
 800728e:	429a      	cmp	r2, r3
 8007290:	d811      	bhi.n	80072b6 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	f003 030f 	and.w	r3, r3, #15
 8007298:	2201      	movs	r2, #1
 800729a:	fa02 f303 	lsl.w	r3, r2, r3
 800729e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	43db      	mvns	r3, r3
 80072ac:	6939      	ldr	r1, [r7, #16]
 80072ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80072b2:	4013      	ands	r3, r2
 80072b4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80072b6:	2300      	movs	r3, #0
}
 80072b8:	4618      	mov	r0, r3
 80072ba:	3720      	adds	r7, #32
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}

080072c0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b088      	sub	sp, #32
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072d0:	69fb      	ldr	r3, [r7, #28]
 80072d2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80072d4:	69fb      	ldr	r3, [r7, #28]
 80072d6:	333c      	adds	r3, #60	; 0x3c
 80072d8:	3304      	adds	r3, #4
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	015a      	lsls	r2, r3, #5
 80072e2:	69bb      	ldr	r3, [r7, #24]
 80072e4:	4413      	add	r3, r2
 80072e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072ea:	689b      	ldr	r3, [r3, #8]
 80072ec:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	799b      	ldrb	r3, [r3, #6]
 80072f2:	2b01      	cmp	r3, #1
 80072f4:	d17b      	bne.n	80073ee <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80072f6:	693b      	ldr	r3, [r7, #16]
 80072f8:	f003 0308 	and.w	r3, r3, #8
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d015      	beq.n	800732c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007300:	697b      	ldr	r3, [r7, #20]
 8007302:	4a61      	ldr	r2, [pc, #388]	; (8007488 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007304:	4293      	cmp	r3, r2
 8007306:	f240 80b9 	bls.w	800747c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007310:	2b00      	cmp	r3, #0
 8007312:	f000 80b3 	beq.w	800747c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	015a      	lsls	r2, r3, #5
 800731a:	69bb      	ldr	r3, [r7, #24]
 800731c:	4413      	add	r3, r2
 800731e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007322:	461a      	mov	r2, r3
 8007324:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007328:	6093      	str	r3, [r2, #8]
 800732a:	e0a7      	b.n	800747c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	f003 0320 	and.w	r3, r3, #32
 8007332:	2b00      	cmp	r3, #0
 8007334:	d009      	beq.n	800734a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	015a      	lsls	r2, r3, #5
 800733a:	69bb      	ldr	r3, [r7, #24]
 800733c:	4413      	add	r3, r2
 800733e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007342:	461a      	mov	r2, r3
 8007344:	2320      	movs	r3, #32
 8007346:	6093      	str	r3, [r2, #8]
 8007348:	e098      	b.n	800747c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007350:	2b00      	cmp	r3, #0
 8007352:	f040 8093 	bne.w	800747c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	4a4b      	ldr	r2, [pc, #300]	; (8007488 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d90f      	bls.n	800737e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007364:	2b00      	cmp	r3, #0
 8007366:	d00a      	beq.n	800737e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	015a      	lsls	r2, r3, #5
 800736c:	69bb      	ldr	r3, [r7, #24]
 800736e:	4413      	add	r3, r2
 8007370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007374:	461a      	mov	r2, r3
 8007376:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800737a:	6093      	str	r3, [r2, #8]
 800737c:	e07e      	b.n	800747c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800737e:	683a      	ldr	r2, [r7, #0]
 8007380:	4613      	mov	r3, r2
 8007382:	00db      	lsls	r3, r3, #3
 8007384:	4413      	add	r3, r2
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	f503 7314 	add.w	r3, r3, #592	; 0x250
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	4413      	add	r3, r2
 8007390:	3304      	adds	r3, #4
 8007392:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	6a1a      	ldr	r2, [r3, #32]
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	0159      	lsls	r1, r3, #5
 800739c:	69bb      	ldr	r3, [r7, #24]
 800739e:	440b      	add	r3, r1
 80073a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073a4:	691b      	ldr	r3, [r3, #16]
 80073a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80073aa:	1ad2      	subs	r2, r2, r3
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d114      	bne.n	80073e0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	691b      	ldr	r3, [r3, #16]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d109      	bne.n	80073d2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6818      	ldr	r0, [r3, #0]
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 80073c8:	461a      	mov	r2, r3
 80073ca:	2101      	movs	r1, #1
 80073cc:	f004 fa3e 	bl	800b84c <USB_EP0_OutStart>
 80073d0:	e006      	b.n	80073e0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	68da      	ldr	r2, [r3, #12]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	695b      	ldr	r3, [r3, #20]
 80073da:	441a      	add	r2, r3
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	b2db      	uxtb	r3, r3
 80073e4:	4619      	mov	r1, r3
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f007 ff5a 	bl	800f2a0 <HAL_PCD_DataOutStageCallback>
 80073ec:	e046      	b.n	800747c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	4a26      	ldr	r2, [pc, #152]	; (800748c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d124      	bne.n	8007440 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d00a      	beq.n	8007416 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	015a      	lsls	r2, r3, #5
 8007404:	69bb      	ldr	r3, [r7, #24]
 8007406:	4413      	add	r3, r2
 8007408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800740c:	461a      	mov	r2, r3
 800740e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007412:	6093      	str	r3, [r2, #8]
 8007414:	e032      	b.n	800747c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	f003 0320 	and.w	r3, r3, #32
 800741c:	2b00      	cmp	r3, #0
 800741e:	d008      	beq.n	8007432 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8007420:	683b      	ldr	r3, [r7, #0]
 8007422:	015a      	lsls	r2, r3, #5
 8007424:	69bb      	ldr	r3, [r7, #24]
 8007426:	4413      	add	r3, r2
 8007428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800742c:	461a      	mov	r2, r3
 800742e:	2320      	movs	r3, #32
 8007430:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	b2db      	uxtb	r3, r3
 8007436:	4619      	mov	r1, r3
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f007 ff31 	bl	800f2a0 <HAL_PCD_DataOutStageCallback>
 800743e:	e01d      	b.n	800747c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d114      	bne.n	8007470 <PCD_EP_OutXfrComplete_int+0x1b0>
 8007446:	6879      	ldr	r1, [r7, #4]
 8007448:	683a      	ldr	r2, [r7, #0]
 800744a:	4613      	mov	r3, r2
 800744c:	00db      	lsls	r3, r3, #3
 800744e:	4413      	add	r3, r2
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	440b      	add	r3, r1
 8007454:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d108      	bne.n	8007470 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6818      	ldr	r0, [r3, #0]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8007468:	461a      	mov	r2, r3
 800746a:	2100      	movs	r1, #0
 800746c:	f004 f9ee 	bl	800b84c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	b2db      	uxtb	r3, r3
 8007474:	4619      	mov	r1, r3
 8007476:	6878      	ldr	r0, [r7, #4]
 8007478:	f007 ff12 	bl	800f2a0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	3720      	adds	r7, #32
 8007482:	46bd      	mov	sp, r7
 8007484:	bd80      	pop	{r7, pc}
 8007486:	bf00      	nop
 8007488:	4f54300a 	.word	0x4f54300a
 800748c:	4f54310a 	.word	0x4f54310a

08007490 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b086      	sub	sp, #24
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074a0:	697b      	ldr	r3, [r7, #20]
 80074a2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	333c      	adds	r3, #60	; 0x3c
 80074a8:	3304      	adds	r3, #4
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	015a      	lsls	r2, r3, #5
 80074b2:	693b      	ldr	r3, [r7, #16]
 80074b4:	4413      	add	r3, r2
 80074b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	4a15      	ldr	r2, [pc, #84]	; (8007518 <PCD_EP_OutSetupPacket_int+0x88>)
 80074c2:	4293      	cmp	r3, r2
 80074c4:	d90e      	bls.n	80074e4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d009      	beq.n	80074e4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	015a      	lsls	r2, r3, #5
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	4413      	add	r3, r2
 80074d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074dc:	461a      	mov	r2, r3
 80074de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80074e2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f007 fec9 	bl	800f27c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	4a0a      	ldr	r2, [pc, #40]	; (8007518 <PCD_EP_OutSetupPacket_int+0x88>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d90c      	bls.n	800750c <PCD_EP_OutSetupPacket_int+0x7c>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	799b      	ldrb	r3, [r3, #6]
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d108      	bne.n	800750c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6818      	ldr	r0, [r3, #0]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 8007504:	461a      	mov	r2, r3
 8007506:	2101      	movs	r1, #1
 8007508:	f004 f9a0 	bl	800b84c <USB_EP0_OutStart>
  }

  return HAL_OK;
 800750c:	2300      	movs	r3, #0
}
 800750e:	4618      	mov	r0, r3
 8007510:	3718      	adds	r7, #24
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}
 8007516:	bf00      	nop
 8007518:	4f54300a 	.word	0x4f54300a

0800751c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800751c:	b480      	push	{r7}
 800751e:	b085      	sub	sp, #20
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	460b      	mov	r3, r1
 8007526:	70fb      	strb	r3, [r7, #3]
 8007528:	4613      	mov	r3, r2
 800752a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007532:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8007534:	78fb      	ldrb	r3, [r7, #3]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d107      	bne.n	800754a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800753a:	883b      	ldrh	r3, [r7, #0]
 800753c:	0419      	lsls	r1, r3, #16
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	68ba      	ldr	r2, [r7, #8]
 8007544:	430a      	orrs	r2, r1
 8007546:	629a      	str	r2, [r3, #40]	; 0x28
 8007548:	e028      	b.n	800759c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007550:	0c1b      	lsrs	r3, r3, #16
 8007552:	68ba      	ldr	r2, [r7, #8]
 8007554:	4413      	add	r3, r2
 8007556:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007558:	2300      	movs	r3, #0
 800755a:	73fb      	strb	r3, [r7, #15]
 800755c:	e00d      	b.n	800757a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681a      	ldr	r2, [r3, #0]
 8007562:	7bfb      	ldrb	r3, [r7, #15]
 8007564:	3340      	adds	r3, #64	; 0x40
 8007566:	009b      	lsls	r3, r3, #2
 8007568:	4413      	add	r3, r2
 800756a:	685b      	ldr	r3, [r3, #4]
 800756c:	0c1b      	lsrs	r3, r3, #16
 800756e:	68ba      	ldr	r2, [r7, #8]
 8007570:	4413      	add	r3, r2
 8007572:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007574:	7bfb      	ldrb	r3, [r7, #15]
 8007576:	3301      	adds	r3, #1
 8007578:	73fb      	strb	r3, [r7, #15]
 800757a:	7bfa      	ldrb	r2, [r7, #15]
 800757c:	78fb      	ldrb	r3, [r7, #3]
 800757e:	3b01      	subs	r3, #1
 8007580:	429a      	cmp	r2, r3
 8007582:	d3ec      	bcc.n	800755e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007584:	883b      	ldrh	r3, [r7, #0]
 8007586:	0418      	lsls	r0, r3, #16
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6819      	ldr	r1, [r3, #0]
 800758c:	78fb      	ldrb	r3, [r7, #3]
 800758e:	3b01      	subs	r3, #1
 8007590:	68ba      	ldr	r2, [r7, #8]
 8007592:	4302      	orrs	r2, r0
 8007594:	3340      	adds	r3, #64	; 0x40
 8007596:	009b      	lsls	r3, r3, #2
 8007598:	440b      	add	r3, r1
 800759a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800759c:	2300      	movs	r3, #0
}
 800759e:	4618      	mov	r0, r3
 80075a0:	3714      	adds	r7, #20
 80075a2:	46bd      	mov	sp, r7
 80075a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a8:	4770      	bx	lr

080075aa <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80075aa:	b480      	push	{r7}
 80075ac:	b083      	sub	sp, #12
 80075ae:	af00      	add	r7, sp, #0
 80075b0:	6078      	str	r0, [r7, #4]
 80075b2:	460b      	mov	r3, r1
 80075b4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	887a      	ldrh	r2, [r7, #2]
 80075bc:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80075be:	2300      	movs	r3, #0
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	370c      	adds	r7, #12
 80075c4:	46bd      	mov	sp, r7
 80075c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ca:	4770      	bx	lr

080075cc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	460b      	mov	r3, r1
 80075d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80075d8:	bf00      	nop
 80075da:	370c      	adds	r7, #12
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr

080075e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b086      	sub	sp, #24
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d101      	bne.n	80075f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80075f2:	2301      	movs	r3, #1
 80075f4:	e267      	b.n	8007ac6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	f003 0301 	and.w	r3, r3, #1
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d075      	beq.n	80076ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007602:	4b88      	ldr	r3, [pc, #544]	; (8007824 <HAL_RCC_OscConfig+0x240>)
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	f003 030c 	and.w	r3, r3, #12
 800760a:	2b04      	cmp	r3, #4
 800760c:	d00c      	beq.n	8007628 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800760e:	4b85      	ldr	r3, [pc, #532]	; (8007824 <HAL_RCC_OscConfig+0x240>)
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007616:	2b08      	cmp	r3, #8
 8007618:	d112      	bne.n	8007640 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800761a:	4b82      	ldr	r3, [pc, #520]	; (8007824 <HAL_RCC_OscConfig+0x240>)
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007622:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007626:	d10b      	bne.n	8007640 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007628:	4b7e      	ldr	r3, [pc, #504]	; (8007824 <HAL_RCC_OscConfig+0x240>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007630:	2b00      	cmp	r3, #0
 8007632:	d05b      	beq.n	80076ec <HAL_RCC_OscConfig+0x108>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d157      	bne.n	80076ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	e242      	b.n	8007ac6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007648:	d106      	bne.n	8007658 <HAL_RCC_OscConfig+0x74>
 800764a:	4b76      	ldr	r3, [pc, #472]	; (8007824 <HAL_RCC_OscConfig+0x240>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a75      	ldr	r2, [pc, #468]	; (8007824 <HAL_RCC_OscConfig+0x240>)
 8007650:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007654:	6013      	str	r3, [r2, #0]
 8007656:	e01d      	b.n	8007694 <HAL_RCC_OscConfig+0xb0>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007660:	d10c      	bne.n	800767c <HAL_RCC_OscConfig+0x98>
 8007662:	4b70      	ldr	r3, [pc, #448]	; (8007824 <HAL_RCC_OscConfig+0x240>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a6f      	ldr	r2, [pc, #444]	; (8007824 <HAL_RCC_OscConfig+0x240>)
 8007668:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800766c:	6013      	str	r3, [r2, #0]
 800766e:	4b6d      	ldr	r3, [pc, #436]	; (8007824 <HAL_RCC_OscConfig+0x240>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	4a6c      	ldr	r2, [pc, #432]	; (8007824 <HAL_RCC_OscConfig+0x240>)
 8007674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007678:	6013      	str	r3, [r2, #0]
 800767a:	e00b      	b.n	8007694 <HAL_RCC_OscConfig+0xb0>
 800767c:	4b69      	ldr	r3, [pc, #420]	; (8007824 <HAL_RCC_OscConfig+0x240>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	4a68      	ldr	r2, [pc, #416]	; (8007824 <HAL_RCC_OscConfig+0x240>)
 8007682:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007686:	6013      	str	r3, [r2, #0]
 8007688:	4b66      	ldr	r3, [pc, #408]	; (8007824 <HAL_RCC_OscConfig+0x240>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4a65      	ldr	r2, [pc, #404]	; (8007824 <HAL_RCC_OscConfig+0x240>)
 800768e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007692:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	685b      	ldr	r3, [r3, #4]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d013      	beq.n	80076c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800769c:	f7fc fa64 	bl	8003b68 <HAL_GetTick>
 80076a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076a2:	e008      	b.n	80076b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80076a4:	f7fc fa60 	bl	8003b68 <HAL_GetTick>
 80076a8:	4602      	mov	r2, r0
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	1ad3      	subs	r3, r2, r3
 80076ae:	2b64      	cmp	r3, #100	; 0x64
 80076b0:	d901      	bls.n	80076b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80076b2:	2303      	movs	r3, #3
 80076b4:	e207      	b.n	8007ac6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80076b6:	4b5b      	ldr	r3, [pc, #364]	; (8007824 <HAL_RCC_OscConfig+0x240>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d0f0      	beq.n	80076a4 <HAL_RCC_OscConfig+0xc0>
 80076c2:	e014      	b.n	80076ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80076c4:	f7fc fa50 	bl	8003b68 <HAL_GetTick>
 80076c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80076ca:	e008      	b.n	80076de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80076cc:	f7fc fa4c 	bl	8003b68 <HAL_GetTick>
 80076d0:	4602      	mov	r2, r0
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	1ad3      	subs	r3, r2, r3
 80076d6:	2b64      	cmp	r3, #100	; 0x64
 80076d8:	d901      	bls.n	80076de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80076da:	2303      	movs	r3, #3
 80076dc:	e1f3      	b.n	8007ac6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80076de:	4b51      	ldr	r3, [pc, #324]	; (8007824 <HAL_RCC_OscConfig+0x240>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d1f0      	bne.n	80076cc <HAL_RCC_OscConfig+0xe8>
 80076ea:	e000      	b.n	80076ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80076ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f003 0302 	and.w	r3, r3, #2
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d063      	beq.n	80077c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80076fa:	4b4a      	ldr	r3, [pc, #296]	; (8007824 <HAL_RCC_OscConfig+0x240>)
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	f003 030c 	and.w	r3, r3, #12
 8007702:	2b00      	cmp	r3, #0
 8007704:	d00b      	beq.n	800771e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007706:	4b47      	ldr	r3, [pc, #284]	; (8007824 <HAL_RCC_OscConfig+0x240>)
 8007708:	689b      	ldr	r3, [r3, #8]
 800770a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800770e:	2b08      	cmp	r3, #8
 8007710:	d11c      	bne.n	800774c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007712:	4b44      	ldr	r3, [pc, #272]	; (8007824 <HAL_RCC_OscConfig+0x240>)
 8007714:	685b      	ldr	r3, [r3, #4]
 8007716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800771a:	2b00      	cmp	r3, #0
 800771c:	d116      	bne.n	800774c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800771e:	4b41      	ldr	r3, [pc, #260]	; (8007824 <HAL_RCC_OscConfig+0x240>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f003 0302 	and.w	r3, r3, #2
 8007726:	2b00      	cmp	r3, #0
 8007728:	d005      	beq.n	8007736 <HAL_RCC_OscConfig+0x152>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	68db      	ldr	r3, [r3, #12]
 800772e:	2b01      	cmp	r3, #1
 8007730:	d001      	beq.n	8007736 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007732:	2301      	movs	r3, #1
 8007734:	e1c7      	b.n	8007ac6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007736:	4b3b      	ldr	r3, [pc, #236]	; (8007824 <HAL_RCC_OscConfig+0x240>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	00db      	lsls	r3, r3, #3
 8007744:	4937      	ldr	r1, [pc, #220]	; (8007824 <HAL_RCC_OscConfig+0x240>)
 8007746:	4313      	orrs	r3, r2
 8007748:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800774a:	e03a      	b.n	80077c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d020      	beq.n	8007796 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007754:	4b34      	ldr	r3, [pc, #208]	; (8007828 <HAL_RCC_OscConfig+0x244>)
 8007756:	2201      	movs	r2, #1
 8007758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800775a:	f7fc fa05 	bl	8003b68 <HAL_GetTick>
 800775e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007760:	e008      	b.n	8007774 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007762:	f7fc fa01 	bl	8003b68 <HAL_GetTick>
 8007766:	4602      	mov	r2, r0
 8007768:	693b      	ldr	r3, [r7, #16]
 800776a:	1ad3      	subs	r3, r2, r3
 800776c:	2b02      	cmp	r3, #2
 800776e:	d901      	bls.n	8007774 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007770:	2303      	movs	r3, #3
 8007772:	e1a8      	b.n	8007ac6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007774:	4b2b      	ldr	r3, [pc, #172]	; (8007824 <HAL_RCC_OscConfig+0x240>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f003 0302 	and.w	r3, r3, #2
 800777c:	2b00      	cmp	r3, #0
 800777e:	d0f0      	beq.n	8007762 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007780:	4b28      	ldr	r3, [pc, #160]	; (8007824 <HAL_RCC_OscConfig+0x240>)
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	691b      	ldr	r3, [r3, #16]
 800778c:	00db      	lsls	r3, r3, #3
 800778e:	4925      	ldr	r1, [pc, #148]	; (8007824 <HAL_RCC_OscConfig+0x240>)
 8007790:	4313      	orrs	r3, r2
 8007792:	600b      	str	r3, [r1, #0]
 8007794:	e015      	b.n	80077c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007796:	4b24      	ldr	r3, [pc, #144]	; (8007828 <HAL_RCC_OscConfig+0x244>)
 8007798:	2200      	movs	r2, #0
 800779a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800779c:	f7fc f9e4 	bl	8003b68 <HAL_GetTick>
 80077a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80077a2:	e008      	b.n	80077b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80077a4:	f7fc f9e0 	bl	8003b68 <HAL_GetTick>
 80077a8:	4602      	mov	r2, r0
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	1ad3      	subs	r3, r2, r3
 80077ae:	2b02      	cmp	r3, #2
 80077b0:	d901      	bls.n	80077b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80077b2:	2303      	movs	r3, #3
 80077b4:	e187      	b.n	8007ac6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80077b6:	4b1b      	ldr	r3, [pc, #108]	; (8007824 <HAL_RCC_OscConfig+0x240>)
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	f003 0302 	and.w	r3, r3, #2
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d1f0      	bne.n	80077a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f003 0308 	and.w	r3, r3, #8
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d036      	beq.n	800783c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	695b      	ldr	r3, [r3, #20]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d016      	beq.n	8007804 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80077d6:	4b15      	ldr	r3, [pc, #84]	; (800782c <HAL_RCC_OscConfig+0x248>)
 80077d8:	2201      	movs	r2, #1
 80077da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80077dc:	f7fc f9c4 	bl	8003b68 <HAL_GetTick>
 80077e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80077e2:	e008      	b.n	80077f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80077e4:	f7fc f9c0 	bl	8003b68 <HAL_GetTick>
 80077e8:	4602      	mov	r2, r0
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	1ad3      	subs	r3, r2, r3
 80077ee:	2b02      	cmp	r3, #2
 80077f0:	d901      	bls.n	80077f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80077f2:	2303      	movs	r3, #3
 80077f4:	e167      	b.n	8007ac6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80077f6:	4b0b      	ldr	r3, [pc, #44]	; (8007824 <HAL_RCC_OscConfig+0x240>)
 80077f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077fa:	f003 0302 	and.w	r3, r3, #2
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d0f0      	beq.n	80077e4 <HAL_RCC_OscConfig+0x200>
 8007802:	e01b      	b.n	800783c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007804:	4b09      	ldr	r3, [pc, #36]	; (800782c <HAL_RCC_OscConfig+0x248>)
 8007806:	2200      	movs	r2, #0
 8007808:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800780a:	f7fc f9ad 	bl	8003b68 <HAL_GetTick>
 800780e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007810:	e00e      	b.n	8007830 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007812:	f7fc f9a9 	bl	8003b68 <HAL_GetTick>
 8007816:	4602      	mov	r2, r0
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	1ad3      	subs	r3, r2, r3
 800781c:	2b02      	cmp	r3, #2
 800781e:	d907      	bls.n	8007830 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007820:	2303      	movs	r3, #3
 8007822:	e150      	b.n	8007ac6 <HAL_RCC_OscConfig+0x4e2>
 8007824:	40023800 	.word	0x40023800
 8007828:	42470000 	.word	0x42470000
 800782c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007830:	4b88      	ldr	r3, [pc, #544]	; (8007a54 <HAL_RCC_OscConfig+0x470>)
 8007832:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007834:	f003 0302 	and.w	r3, r3, #2
 8007838:	2b00      	cmp	r3, #0
 800783a:	d1ea      	bne.n	8007812 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f003 0304 	and.w	r3, r3, #4
 8007844:	2b00      	cmp	r3, #0
 8007846:	f000 8097 	beq.w	8007978 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800784a:	2300      	movs	r3, #0
 800784c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800784e:	4b81      	ldr	r3, [pc, #516]	; (8007a54 <HAL_RCC_OscConfig+0x470>)
 8007850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007856:	2b00      	cmp	r3, #0
 8007858:	d10f      	bne.n	800787a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800785a:	2300      	movs	r3, #0
 800785c:	60bb      	str	r3, [r7, #8]
 800785e:	4b7d      	ldr	r3, [pc, #500]	; (8007a54 <HAL_RCC_OscConfig+0x470>)
 8007860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007862:	4a7c      	ldr	r2, [pc, #496]	; (8007a54 <HAL_RCC_OscConfig+0x470>)
 8007864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007868:	6413      	str	r3, [r2, #64]	; 0x40
 800786a:	4b7a      	ldr	r3, [pc, #488]	; (8007a54 <HAL_RCC_OscConfig+0x470>)
 800786c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800786e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007872:	60bb      	str	r3, [r7, #8]
 8007874:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007876:	2301      	movs	r3, #1
 8007878:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800787a:	4b77      	ldr	r3, [pc, #476]	; (8007a58 <HAL_RCC_OscConfig+0x474>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007882:	2b00      	cmp	r3, #0
 8007884:	d118      	bne.n	80078b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007886:	4b74      	ldr	r3, [pc, #464]	; (8007a58 <HAL_RCC_OscConfig+0x474>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a73      	ldr	r2, [pc, #460]	; (8007a58 <HAL_RCC_OscConfig+0x474>)
 800788c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007890:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007892:	f7fc f969 	bl	8003b68 <HAL_GetTick>
 8007896:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007898:	e008      	b.n	80078ac <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800789a:	f7fc f965 	bl	8003b68 <HAL_GetTick>
 800789e:	4602      	mov	r2, r0
 80078a0:	693b      	ldr	r3, [r7, #16]
 80078a2:	1ad3      	subs	r3, r2, r3
 80078a4:	2b02      	cmp	r3, #2
 80078a6:	d901      	bls.n	80078ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80078a8:	2303      	movs	r3, #3
 80078aa:	e10c      	b.n	8007ac6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078ac:	4b6a      	ldr	r3, [pc, #424]	; (8007a58 <HAL_RCC_OscConfig+0x474>)
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d0f0      	beq.n	800789a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d106      	bne.n	80078ce <HAL_RCC_OscConfig+0x2ea>
 80078c0:	4b64      	ldr	r3, [pc, #400]	; (8007a54 <HAL_RCC_OscConfig+0x470>)
 80078c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078c4:	4a63      	ldr	r2, [pc, #396]	; (8007a54 <HAL_RCC_OscConfig+0x470>)
 80078c6:	f043 0301 	orr.w	r3, r3, #1
 80078ca:	6713      	str	r3, [r2, #112]	; 0x70
 80078cc:	e01c      	b.n	8007908 <HAL_RCC_OscConfig+0x324>
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	2b05      	cmp	r3, #5
 80078d4:	d10c      	bne.n	80078f0 <HAL_RCC_OscConfig+0x30c>
 80078d6:	4b5f      	ldr	r3, [pc, #380]	; (8007a54 <HAL_RCC_OscConfig+0x470>)
 80078d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078da:	4a5e      	ldr	r2, [pc, #376]	; (8007a54 <HAL_RCC_OscConfig+0x470>)
 80078dc:	f043 0304 	orr.w	r3, r3, #4
 80078e0:	6713      	str	r3, [r2, #112]	; 0x70
 80078e2:	4b5c      	ldr	r3, [pc, #368]	; (8007a54 <HAL_RCC_OscConfig+0x470>)
 80078e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078e6:	4a5b      	ldr	r2, [pc, #364]	; (8007a54 <HAL_RCC_OscConfig+0x470>)
 80078e8:	f043 0301 	orr.w	r3, r3, #1
 80078ec:	6713      	str	r3, [r2, #112]	; 0x70
 80078ee:	e00b      	b.n	8007908 <HAL_RCC_OscConfig+0x324>
 80078f0:	4b58      	ldr	r3, [pc, #352]	; (8007a54 <HAL_RCC_OscConfig+0x470>)
 80078f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80078f4:	4a57      	ldr	r2, [pc, #348]	; (8007a54 <HAL_RCC_OscConfig+0x470>)
 80078f6:	f023 0301 	bic.w	r3, r3, #1
 80078fa:	6713      	str	r3, [r2, #112]	; 0x70
 80078fc:	4b55      	ldr	r3, [pc, #340]	; (8007a54 <HAL_RCC_OscConfig+0x470>)
 80078fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007900:	4a54      	ldr	r2, [pc, #336]	; (8007a54 <HAL_RCC_OscConfig+0x470>)
 8007902:	f023 0304 	bic.w	r3, r3, #4
 8007906:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d015      	beq.n	800793c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007910:	f7fc f92a 	bl	8003b68 <HAL_GetTick>
 8007914:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007916:	e00a      	b.n	800792e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007918:	f7fc f926 	bl	8003b68 <HAL_GetTick>
 800791c:	4602      	mov	r2, r0
 800791e:	693b      	ldr	r3, [r7, #16]
 8007920:	1ad3      	subs	r3, r2, r3
 8007922:	f241 3288 	movw	r2, #5000	; 0x1388
 8007926:	4293      	cmp	r3, r2
 8007928:	d901      	bls.n	800792e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800792a:	2303      	movs	r3, #3
 800792c:	e0cb      	b.n	8007ac6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800792e:	4b49      	ldr	r3, [pc, #292]	; (8007a54 <HAL_RCC_OscConfig+0x470>)
 8007930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007932:	f003 0302 	and.w	r3, r3, #2
 8007936:	2b00      	cmp	r3, #0
 8007938:	d0ee      	beq.n	8007918 <HAL_RCC_OscConfig+0x334>
 800793a:	e014      	b.n	8007966 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800793c:	f7fc f914 	bl	8003b68 <HAL_GetTick>
 8007940:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007942:	e00a      	b.n	800795a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007944:	f7fc f910 	bl	8003b68 <HAL_GetTick>
 8007948:	4602      	mov	r2, r0
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	1ad3      	subs	r3, r2, r3
 800794e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007952:	4293      	cmp	r3, r2
 8007954:	d901      	bls.n	800795a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007956:	2303      	movs	r3, #3
 8007958:	e0b5      	b.n	8007ac6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800795a:	4b3e      	ldr	r3, [pc, #248]	; (8007a54 <HAL_RCC_OscConfig+0x470>)
 800795c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800795e:	f003 0302 	and.w	r3, r3, #2
 8007962:	2b00      	cmp	r3, #0
 8007964:	d1ee      	bne.n	8007944 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007966:	7dfb      	ldrb	r3, [r7, #23]
 8007968:	2b01      	cmp	r3, #1
 800796a:	d105      	bne.n	8007978 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800796c:	4b39      	ldr	r3, [pc, #228]	; (8007a54 <HAL_RCC_OscConfig+0x470>)
 800796e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007970:	4a38      	ldr	r2, [pc, #224]	; (8007a54 <HAL_RCC_OscConfig+0x470>)
 8007972:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007976:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	699b      	ldr	r3, [r3, #24]
 800797c:	2b00      	cmp	r3, #0
 800797e:	f000 80a1 	beq.w	8007ac4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007982:	4b34      	ldr	r3, [pc, #208]	; (8007a54 <HAL_RCC_OscConfig+0x470>)
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	f003 030c 	and.w	r3, r3, #12
 800798a:	2b08      	cmp	r3, #8
 800798c:	d05c      	beq.n	8007a48 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	699b      	ldr	r3, [r3, #24]
 8007992:	2b02      	cmp	r3, #2
 8007994:	d141      	bne.n	8007a1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007996:	4b31      	ldr	r3, [pc, #196]	; (8007a5c <HAL_RCC_OscConfig+0x478>)
 8007998:	2200      	movs	r2, #0
 800799a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800799c:	f7fc f8e4 	bl	8003b68 <HAL_GetTick>
 80079a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079a2:	e008      	b.n	80079b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80079a4:	f7fc f8e0 	bl	8003b68 <HAL_GetTick>
 80079a8:	4602      	mov	r2, r0
 80079aa:	693b      	ldr	r3, [r7, #16]
 80079ac:	1ad3      	subs	r3, r2, r3
 80079ae:	2b02      	cmp	r3, #2
 80079b0:	d901      	bls.n	80079b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80079b2:	2303      	movs	r3, #3
 80079b4:	e087      	b.n	8007ac6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079b6:	4b27      	ldr	r3, [pc, #156]	; (8007a54 <HAL_RCC_OscConfig+0x470>)
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d1f0      	bne.n	80079a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	69da      	ldr	r2, [r3, #28]
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6a1b      	ldr	r3, [r3, #32]
 80079ca:	431a      	orrs	r2, r3
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d0:	019b      	lsls	r3, r3, #6
 80079d2:	431a      	orrs	r2, r3
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079d8:	085b      	lsrs	r3, r3, #1
 80079da:	3b01      	subs	r3, #1
 80079dc:	041b      	lsls	r3, r3, #16
 80079de:	431a      	orrs	r2, r3
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e4:	061b      	lsls	r3, r3, #24
 80079e6:	491b      	ldr	r1, [pc, #108]	; (8007a54 <HAL_RCC_OscConfig+0x470>)
 80079e8:	4313      	orrs	r3, r2
 80079ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80079ec:	4b1b      	ldr	r3, [pc, #108]	; (8007a5c <HAL_RCC_OscConfig+0x478>)
 80079ee:	2201      	movs	r2, #1
 80079f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079f2:	f7fc f8b9 	bl	8003b68 <HAL_GetTick>
 80079f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079f8:	e008      	b.n	8007a0c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80079fa:	f7fc f8b5 	bl	8003b68 <HAL_GetTick>
 80079fe:	4602      	mov	r2, r0
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	1ad3      	subs	r3, r2, r3
 8007a04:	2b02      	cmp	r3, #2
 8007a06:	d901      	bls.n	8007a0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007a08:	2303      	movs	r3, #3
 8007a0a:	e05c      	b.n	8007ac6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007a0c:	4b11      	ldr	r3, [pc, #68]	; (8007a54 <HAL_RCC_OscConfig+0x470>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d0f0      	beq.n	80079fa <HAL_RCC_OscConfig+0x416>
 8007a18:	e054      	b.n	8007ac4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a1a:	4b10      	ldr	r3, [pc, #64]	; (8007a5c <HAL_RCC_OscConfig+0x478>)
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a20:	f7fc f8a2 	bl	8003b68 <HAL_GetTick>
 8007a24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a26:	e008      	b.n	8007a3a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a28:	f7fc f89e 	bl	8003b68 <HAL_GetTick>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	693b      	ldr	r3, [r7, #16]
 8007a30:	1ad3      	subs	r3, r2, r3
 8007a32:	2b02      	cmp	r3, #2
 8007a34:	d901      	bls.n	8007a3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007a36:	2303      	movs	r3, #3
 8007a38:	e045      	b.n	8007ac6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a3a:	4b06      	ldr	r3, [pc, #24]	; (8007a54 <HAL_RCC_OscConfig+0x470>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d1f0      	bne.n	8007a28 <HAL_RCC_OscConfig+0x444>
 8007a46:	e03d      	b.n	8007ac4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	699b      	ldr	r3, [r3, #24]
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d107      	bne.n	8007a60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007a50:	2301      	movs	r3, #1
 8007a52:	e038      	b.n	8007ac6 <HAL_RCC_OscConfig+0x4e2>
 8007a54:	40023800 	.word	0x40023800
 8007a58:	40007000 	.word	0x40007000
 8007a5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007a60:	4b1b      	ldr	r3, [pc, #108]	; (8007ad0 <HAL_RCC_OscConfig+0x4ec>)
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	699b      	ldr	r3, [r3, #24]
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d028      	beq.n	8007ac0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d121      	bne.n	8007ac0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a86:	429a      	cmp	r2, r3
 8007a88:	d11a      	bne.n	8007ac0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007a8a:	68fa      	ldr	r2, [r7, #12]
 8007a8c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007a90:	4013      	ands	r3, r2
 8007a92:	687a      	ldr	r2, [r7, #4]
 8007a94:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007a96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d111      	bne.n	8007ac0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aa6:	085b      	lsrs	r3, r3, #1
 8007aa8:	3b01      	subs	r3, #1
 8007aaa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d107      	bne.n	8007ac0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d001      	beq.n	8007ac4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007ac0:	2301      	movs	r3, #1
 8007ac2:	e000      	b.n	8007ac6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007ac4:	2300      	movs	r3, #0
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3718      	adds	r7, #24
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	40023800 	.word	0x40023800

08007ad4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	b084      	sub	sp, #16
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]
 8007adc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d101      	bne.n	8007ae8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007ae4:	2301      	movs	r3, #1
 8007ae6:	e0cc      	b.n	8007c82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007ae8:	4b68      	ldr	r3, [pc, #416]	; (8007c8c <HAL_RCC_ClockConfig+0x1b8>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	f003 0307 	and.w	r3, r3, #7
 8007af0:	683a      	ldr	r2, [r7, #0]
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d90c      	bls.n	8007b10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007af6:	4b65      	ldr	r3, [pc, #404]	; (8007c8c <HAL_RCC_ClockConfig+0x1b8>)
 8007af8:	683a      	ldr	r2, [r7, #0]
 8007afa:	b2d2      	uxtb	r2, r2
 8007afc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007afe:	4b63      	ldr	r3, [pc, #396]	; (8007c8c <HAL_RCC_ClockConfig+0x1b8>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f003 0307 	and.w	r3, r3, #7
 8007b06:	683a      	ldr	r2, [r7, #0]
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d001      	beq.n	8007b10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007b0c:	2301      	movs	r3, #1
 8007b0e:	e0b8      	b.n	8007c82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f003 0302 	and.w	r3, r3, #2
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d020      	beq.n	8007b5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f003 0304 	and.w	r3, r3, #4
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d005      	beq.n	8007b34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007b28:	4b59      	ldr	r3, [pc, #356]	; (8007c90 <HAL_RCC_ClockConfig+0x1bc>)
 8007b2a:	689b      	ldr	r3, [r3, #8]
 8007b2c:	4a58      	ldr	r2, [pc, #352]	; (8007c90 <HAL_RCC_ClockConfig+0x1bc>)
 8007b2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007b32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	f003 0308 	and.w	r3, r3, #8
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d005      	beq.n	8007b4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007b40:	4b53      	ldr	r3, [pc, #332]	; (8007c90 <HAL_RCC_ClockConfig+0x1bc>)
 8007b42:	689b      	ldr	r3, [r3, #8]
 8007b44:	4a52      	ldr	r2, [pc, #328]	; (8007c90 <HAL_RCC_ClockConfig+0x1bc>)
 8007b46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007b4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b4c:	4b50      	ldr	r3, [pc, #320]	; (8007c90 <HAL_RCC_ClockConfig+0x1bc>)
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	494d      	ldr	r1, [pc, #308]	; (8007c90 <HAL_RCC_ClockConfig+0x1bc>)
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	f003 0301 	and.w	r3, r3, #1
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d044      	beq.n	8007bf4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	d107      	bne.n	8007b82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b72:	4b47      	ldr	r3, [pc, #284]	; (8007c90 <HAL_RCC_ClockConfig+0x1bc>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d119      	bne.n	8007bb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	e07f      	b.n	8007c82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	2b02      	cmp	r3, #2
 8007b88:	d003      	beq.n	8007b92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007b8e:	2b03      	cmp	r3, #3
 8007b90:	d107      	bne.n	8007ba2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b92:	4b3f      	ldr	r3, [pc, #252]	; (8007c90 <HAL_RCC_ClockConfig+0x1bc>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d109      	bne.n	8007bb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	e06f      	b.n	8007c82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007ba2:	4b3b      	ldr	r3, [pc, #236]	; (8007c90 <HAL_RCC_ClockConfig+0x1bc>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f003 0302 	and.w	r3, r3, #2
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d101      	bne.n	8007bb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e067      	b.n	8007c82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007bb2:	4b37      	ldr	r3, [pc, #220]	; (8007c90 <HAL_RCC_ClockConfig+0x1bc>)
 8007bb4:	689b      	ldr	r3, [r3, #8]
 8007bb6:	f023 0203 	bic.w	r2, r3, #3
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	685b      	ldr	r3, [r3, #4]
 8007bbe:	4934      	ldr	r1, [pc, #208]	; (8007c90 <HAL_RCC_ClockConfig+0x1bc>)
 8007bc0:	4313      	orrs	r3, r2
 8007bc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007bc4:	f7fb ffd0 	bl	8003b68 <HAL_GetTick>
 8007bc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007bca:	e00a      	b.n	8007be2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007bcc:	f7fb ffcc 	bl	8003b68 <HAL_GetTick>
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	1ad3      	subs	r3, r2, r3
 8007bd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d901      	bls.n	8007be2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007bde:	2303      	movs	r3, #3
 8007be0:	e04f      	b.n	8007c82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007be2:	4b2b      	ldr	r3, [pc, #172]	; (8007c90 <HAL_RCC_ClockConfig+0x1bc>)
 8007be4:	689b      	ldr	r3, [r3, #8]
 8007be6:	f003 020c 	and.w	r2, r3, #12
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	009b      	lsls	r3, r3, #2
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	d1eb      	bne.n	8007bcc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007bf4:	4b25      	ldr	r3, [pc, #148]	; (8007c8c <HAL_RCC_ClockConfig+0x1b8>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f003 0307 	and.w	r3, r3, #7
 8007bfc:	683a      	ldr	r2, [r7, #0]
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d20c      	bcs.n	8007c1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c02:	4b22      	ldr	r3, [pc, #136]	; (8007c8c <HAL_RCC_ClockConfig+0x1b8>)
 8007c04:	683a      	ldr	r2, [r7, #0]
 8007c06:	b2d2      	uxtb	r2, r2
 8007c08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c0a:	4b20      	ldr	r3, [pc, #128]	; (8007c8c <HAL_RCC_ClockConfig+0x1b8>)
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f003 0307 	and.w	r3, r3, #7
 8007c12:	683a      	ldr	r2, [r7, #0]
 8007c14:	429a      	cmp	r2, r3
 8007c16:	d001      	beq.n	8007c1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	e032      	b.n	8007c82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f003 0304 	and.w	r3, r3, #4
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d008      	beq.n	8007c3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007c28:	4b19      	ldr	r3, [pc, #100]	; (8007c90 <HAL_RCC_ClockConfig+0x1bc>)
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	68db      	ldr	r3, [r3, #12]
 8007c34:	4916      	ldr	r1, [pc, #88]	; (8007c90 <HAL_RCC_ClockConfig+0x1bc>)
 8007c36:	4313      	orrs	r3, r2
 8007c38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f003 0308 	and.w	r3, r3, #8
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d009      	beq.n	8007c5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007c46:	4b12      	ldr	r3, [pc, #72]	; (8007c90 <HAL_RCC_ClockConfig+0x1bc>)
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	691b      	ldr	r3, [r3, #16]
 8007c52:	00db      	lsls	r3, r3, #3
 8007c54:	490e      	ldr	r1, [pc, #56]	; (8007c90 <HAL_RCC_ClockConfig+0x1bc>)
 8007c56:	4313      	orrs	r3, r2
 8007c58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007c5a:	f000 f821 	bl	8007ca0 <HAL_RCC_GetSysClockFreq>
 8007c5e:	4602      	mov	r2, r0
 8007c60:	4b0b      	ldr	r3, [pc, #44]	; (8007c90 <HAL_RCC_ClockConfig+0x1bc>)
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	091b      	lsrs	r3, r3, #4
 8007c66:	f003 030f 	and.w	r3, r3, #15
 8007c6a:	490a      	ldr	r1, [pc, #40]	; (8007c94 <HAL_RCC_ClockConfig+0x1c0>)
 8007c6c:	5ccb      	ldrb	r3, [r1, r3]
 8007c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8007c72:	4a09      	ldr	r2, [pc, #36]	; (8007c98 <HAL_RCC_ClockConfig+0x1c4>)
 8007c74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007c76:	4b09      	ldr	r3, [pc, #36]	; (8007c9c <HAL_RCC_ClockConfig+0x1c8>)
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f7fb fe3e 	bl	80038fc <HAL_InitTick>

  return HAL_OK;
 8007c80:	2300      	movs	r3, #0
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3710      	adds	r7, #16
 8007c86:	46bd      	mov	sp, r7
 8007c88:	bd80      	pop	{r7, pc}
 8007c8a:	bf00      	nop
 8007c8c:	40023c00 	.word	0x40023c00
 8007c90:	40023800 	.word	0x40023800
 8007c94:	0800faf8 	.word	0x0800faf8
 8007c98:	20000050 	.word	0x20000050
 8007c9c:	20000054 	.word	0x20000054

08007ca0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007ca0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ca4:	b094      	sub	sp, #80	; 0x50
 8007ca6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	647b      	str	r3, [r7, #68]	; 0x44
 8007cac:	2300      	movs	r3, #0
 8007cae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007cb8:	4b79      	ldr	r3, [pc, #484]	; (8007ea0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	f003 030c 	and.w	r3, r3, #12
 8007cc0:	2b08      	cmp	r3, #8
 8007cc2:	d00d      	beq.n	8007ce0 <HAL_RCC_GetSysClockFreq+0x40>
 8007cc4:	2b08      	cmp	r3, #8
 8007cc6:	f200 80e1 	bhi.w	8007e8c <HAL_RCC_GetSysClockFreq+0x1ec>
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d002      	beq.n	8007cd4 <HAL_RCC_GetSysClockFreq+0x34>
 8007cce:	2b04      	cmp	r3, #4
 8007cd0:	d003      	beq.n	8007cda <HAL_RCC_GetSysClockFreq+0x3a>
 8007cd2:	e0db      	b.n	8007e8c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007cd4:	4b73      	ldr	r3, [pc, #460]	; (8007ea4 <HAL_RCC_GetSysClockFreq+0x204>)
 8007cd6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8007cd8:	e0db      	b.n	8007e92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007cda:	4b73      	ldr	r3, [pc, #460]	; (8007ea8 <HAL_RCC_GetSysClockFreq+0x208>)
 8007cdc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007cde:	e0d8      	b.n	8007e92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007ce0:	4b6f      	ldr	r3, [pc, #444]	; (8007ea0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007ce2:	685b      	ldr	r3, [r3, #4]
 8007ce4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ce8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007cea:	4b6d      	ldr	r3, [pc, #436]	; (8007ea0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d063      	beq.n	8007dbe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007cf6:	4b6a      	ldr	r3, [pc, #424]	; (8007ea0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	099b      	lsrs	r3, r3, #6
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	63bb      	str	r3, [r7, #56]	; 0x38
 8007d00:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007d02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d08:	633b      	str	r3, [r7, #48]	; 0x30
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	637b      	str	r3, [r7, #52]	; 0x34
 8007d0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007d12:	4622      	mov	r2, r4
 8007d14:	462b      	mov	r3, r5
 8007d16:	f04f 0000 	mov.w	r0, #0
 8007d1a:	f04f 0100 	mov.w	r1, #0
 8007d1e:	0159      	lsls	r1, r3, #5
 8007d20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007d24:	0150      	lsls	r0, r2, #5
 8007d26:	4602      	mov	r2, r0
 8007d28:	460b      	mov	r3, r1
 8007d2a:	4621      	mov	r1, r4
 8007d2c:	1a51      	subs	r1, r2, r1
 8007d2e:	6139      	str	r1, [r7, #16]
 8007d30:	4629      	mov	r1, r5
 8007d32:	eb63 0301 	sbc.w	r3, r3, r1
 8007d36:	617b      	str	r3, [r7, #20]
 8007d38:	f04f 0200 	mov.w	r2, #0
 8007d3c:	f04f 0300 	mov.w	r3, #0
 8007d40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007d44:	4659      	mov	r1, fp
 8007d46:	018b      	lsls	r3, r1, #6
 8007d48:	4651      	mov	r1, sl
 8007d4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007d4e:	4651      	mov	r1, sl
 8007d50:	018a      	lsls	r2, r1, #6
 8007d52:	4651      	mov	r1, sl
 8007d54:	ebb2 0801 	subs.w	r8, r2, r1
 8007d58:	4659      	mov	r1, fp
 8007d5a:	eb63 0901 	sbc.w	r9, r3, r1
 8007d5e:	f04f 0200 	mov.w	r2, #0
 8007d62:	f04f 0300 	mov.w	r3, #0
 8007d66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007d6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007d6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007d72:	4690      	mov	r8, r2
 8007d74:	4699      	mov	r9, r3
 8007d76:	4623      	mov	r3, r4
 8007d78:	eb18 0303 	adds.w	r3, r8, r3
 8007d7c:	60bb      	str	r3, [r7, #8]
 8007d7e:	462b      	mov	r3, r5
 8007d80:	eb49 0303 	adc.w	r3, r9, r3
 8007d84:	60fb      	str	r3, [r7, #12]
 8007d86:	f04f 0200 	mov.w	r2, #0
 8007d8a:	f04f 0300 	mov.w	r3, #0
 8007d8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007d92:	4629      	mov	r1, r5
 8007d94:	024b      	lsls	r3, r1, #9
 8007d96:	4621      	mov	r1, r4
 8007d98:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8007d9c:	4621      	mov	r1, r4
 8007d9e:	024a      	lsls	r2, r1, #9
 8007da0:	4610      	mov	r0, r2
 8007da2:	4619      	mov	r1, r3
 8007da4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007da6:	2200      	movs	r2, #0
 8007da8:	62bb      	str	r3, [r7, #40]	; 0x28
 8007daa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007dac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007db0:	f7f8 fedc 	bl	8000b6c <__aeabi_uldivmod>
 8007db4:	4602      	mov	r2, r0
 8007db6:	460b      	mov	r3, r1
 8007db8:	4613      	mov	r3, r2
 8007dba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007dbc:	e058      	b.n	8007e70 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007dbe:	4b38      	ldr	r3, [pc, #224]	; (8007ea0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	099b      	lsrs	r3, r3, #6
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	4611      	mov	r1, r2
 8007dca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007dce:	623b      	str	r3, [r7, #32]
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	627b      	str	r3, [r7, #36]	; 0x24
 8007dd4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007dd8:	4642      	mov	r2, r8
 8007dda:	464b      	mov	r3, r9
 8007ddc:	f04f 0000 	mov.w	r0, #0
 8007de0:	f04f 0100 	mov.w	r1, #0
 8007de4:	0159      	lsls	r1, r3, #5
 8007de6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007dea:	0150      	lsls	r0, r2, #5
 8007dec:	4602      	mov	r2, r0
 8007dee:	460b      	mov	r3, r1
 8007df0:	4641      	mov	r1, r8
 8007df2:	ebb2 0a01 	subs.w	sl, r2, r1
 8007df6:	4649      	mov	r1, r9
 8007df8:	eb63 0b01 	sbc.w	fp, r3, r1
 8007dfc:	f04f 0200 	mov.w	r2, #0
 8007e00:	f04f 0300 	mov.w	r3, #0
 8007e04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007e08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007e0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007e10:	ebb2 040a 	subs.w	r4, r2, sl
 8007e14:	eb63 050b 	sbc.w	r5, r3, fp
 8007e18:	f04f 0200 	mov.w	r2, #0
 8007e1c:	f04f 0300 	mov.w	r3, #0
 8007e20:	00eb      	lsls	r3, r5, #3
 8007e22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007e26:	00e2      	lsls	r2, r4, #3
 8007e28:	4614      	mov	r4, r2
 8007e2a:	461d      	mov	r5, r3
 8007e2c:	4643      	mov	r3, r8
 8007e2e:	18e3      	adds	r3, r4, r3
 8007e30:	603b      	str	r3, [r7, #0]
 8007e32:	464b      	mov	r3, r9
 8007e34:	eb45 0303 	adc.w	r3, r5, r3
 8007e38:	607b      	str	r3, [r7, #4]
 8007e3a:	f04f 0200 	mov.w	r2, #0
 8007e3e:	f04f 0300 	mov.w	r3, #0
 8007e42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007e46:	4629      	mov	r1, r5
 8007e48:	028b      	lsls	r3, r1, #10
 8007e4a:	4621      	mov	r1, r4
 8007e4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007e50:	4621      	mov	r1, r4
 8007e52:	028a      	lsls	r2, r1, #10
 8007e54:	4610      	mov	r0, r2
 8007e56:	4619      	mov	r1, r3
 8007e58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	61bb      	str	r3, [r7, #24]
 8007e5e:	61fa      	str	r2, [r7, #28]
 8007e60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e64:	f7f8 fe82 	bl	8000b6c <__aeabi_uldivmod>
 8007e68:	4602      	mov	r2, r0
 8007e6a:	460b      	mov	r3, r1
 8007e6c:	4613      	mov	r3, r2
 8007e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007e70:	4b0b      	ldr	r3, [pc, #44]	; (8007ea0 <HAL_RCC_GetSysClockFreq+0x200>)
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	0c1b      	lsrs	r3, r3, #16
 8007e76:	f003 0303 	and.w	r3, r3, #3
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	005b      	lsls	r3, r3, #1
 8007e7e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8007e80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007e82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007e8a:	e002      	b.n	8007e92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007e8c:	4b05      	ldr	r3, [pc, #20]	; (8007ea4 <HAL_RCC_GetSysClockFreq+0x204>)
 8007e8e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007e90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007e92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3750      	adds	r7, #80	; 0x50
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e9e:	bf00      	nop
 8007ea0:	40023800 	.word	0x40023800
 8007ea4:	00f42400 	.word	0x00f42400
 8007ea8:	007a1200 	.word	0x007a1200

08007eac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007eac:	b480      	push	{r7}
 8007eae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007eb0:	4b03      	ldr	r3, [pc, #12]	; (8007ec0 <HAL_RCC_GetHCLKFreq+0x14>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ebc:	4770      	bx	lr
 8007ebe:	bf00      	nop
 8007ec0:	20000050 	.word	0x20000050

08007ec4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007ec8:	f7ff fff0 	bl	8007eac <HAL_RCC_GetHCLKFreq>
 8007ecc:	4602      	mov	r2, r0
 8007ece:	4b05      	ldr	r3, [pc, #20]	; (8007ee4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007ed0:	689b      	ldr	r3, [r3, #8]
 8007ed2:	0a9b      	lsrs	r3, r3, #10
 8007ed4:	f003 0307 	and.w	r3, r3, #7
 8007ed8:	4903      	ldr	r1, [pc, #12]	; (8007ee8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007eda:	5ccb      	ldrb	r3, [r1, r3]
 8007edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	bd80      	pop	{r7, pc}
 8007ee4:	40023800 	.word	0x40023800
 8007ee8:	0800fb08 	.word	0x0800fb08

08007eec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007ef0:	f7ff ffdc 	bl	8007eac <HAL_RCC_GetHCLKFreq>
 8007ef4:	4602      	mov	r2, r0
 8007ef6:	4b05      	ldr	r3, [pc, #20]	; (8007f0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007ef8:	689b      	ldr	r3, [r3, #8]
 8007efa:	0b5b      	lsrs	r3, r3, #13
 8007efc:	f003 0307 	and.w	r3, r3, #7
 8007f00:	4903      	ldr	r1, [pc, #12]	; (8007f10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007f02:	5ccb      	ldrb	r3, [r1, r3]
 8007f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	bd80      	pop	{r7, pc}
 8007f0c:	40023800 	.word	0x40023800
 8007f10:	0800fb08 	.word	0x0800fb08

08007f14 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b083      	sub	sp, #12
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	220f      	movs	r2, #15
 8007f22:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007f24:	4b12      	ldr	r3, [pc, #72]	; (8007f70 <HAL_RCC_GetClockConfig+0x5c>)
 8007f26:	689b      	ldr	r3, [r3, #8]
 8007f28:	f003 0203 	and.w	r2, r3, #3
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007f30:	4b0f      	ldr	r3, [pc, #60]	; (8007f70 <HAL_RCC_GetClockConfig+0x5c>)
 8007f32:	689b      	ldr	r3, [r3, #8]
 8007f34:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007f3c:	4b0c      	ldr	r3, [pc, #48]	; (8007f70 <HAL_RCC_GetClockConfig+0x5c>)
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8007f48:	4b09      	ldr	r3, [pc, #36]	; (8007f70 <HAL_RCC_GetClockConfig+0x5c>)
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	08db      	lsrs	r3, r3, #3
 8007f4e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007f56:	4b07      	ldr	r3, [pc, #28]	; (8007f74 <HAL_RCC_GetClockConfig+0x60>)
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f003 0207 	and.w	r2, r3, #7
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	601a      	str	r2, [r3, #0]
}
 8007f62:	bf00      	nop
 8007f64:	370c      	adds	r7, #12
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr
 8007f6e:	bf00      	nop
 8007f70:	40023800 	.word	0x40023800
 8007f74:	40023c00 	.word	0x40023c00

08007f78 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d101      	bne.n	8007f8a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f86:	2301      	movs	r3, #1
 8007f88:	e041      	b.n	800800e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f90:	b2db      	uxtb	r3, r3
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d106      	bne.n	8007fa4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2200      	movs	r2, #0
 8007f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 f839 	bl	8008016 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2202      	movs	r2, #2
 8007fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681a      	ldr	r2, [r3, #0]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	3304      	adds	r3, #4
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	4610      	mov	r0, r2
 8007fb8:	f000 ff10 	bl	8008ddc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2201      	movs	r2, #1
 8007ff0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2201      	movs	r2, #1
 8008000:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2201      	movs	r2, #1
 8008008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800800c:	2300      	movs	r3, #0
}
 800800e:	4618      	mov	r0, r3
 8008010:	3708      	adds	r7, #8
 8008012:	46bd      	mov	sp, r7
 8008014:	bd80      	pop	{r7, pc}

08008016 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008016:	b480      	push	{r7}
 8008018:	b083      	sub	sp, #12
 800801a:	af00      	add	r7, sp, #0
 800801c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800801e:	bf00      	nop
 8008020:	370c      	adds	r7, #12
 8008022:	46bd      	mov	sp, r7
 8008024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008028:	4770      	bx	lr
	...

0800802c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800802c:	b480      	push	{r7}
 800802e:	b085      	sub	sp, #20
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800803a:	b2db      	uxtb	r3, r3
 800803c:	2b01      	cmp	r3, #1
 800803e:	d001      	beq.n	8008044 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008040:	2301      	movs	r3, #1
 8008042:	e04e      	b.n	80080e2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2202      	movs	r2, #2
 8008048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	68da      	ldr	r2, [r3, #12]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f042 0201 	orr.w	r2, r2, #1
 800805a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a23      	ldr	r2, [pc, #140]	; (80080f0 <HAL_TIM_Base_Start_IT+0xc4>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d022      	beq.n	80080ac <HAL_TIM_Base_Start_IT+0x80>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800806e:	d01d      	beq.n	80080ac <HAL_TIM_Base_Start_IT+0x80>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a1f      	ldr	r2, [pc, #124]	; (80080f4 <HAL_TIM_Base_Start_IT+0xc8>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d018      	beq.n	80080ac <HAL_TIM_Base_Start_IT+0x80>
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4a1e      	ldr	r2, [pc, #120]	; (80080f8 <HAL_TIM_Base_Start_IT+0xcc>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d013      	beq.n	80080ac <HAL_TIM_Base_Start_IT+0x80>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a1c      	ldr	r2, [pc, #112]	; (80080fc <HAL_TIM_Base_Start_IT+0xd0>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d00e      	beq.n	80080ac <HAL_TIM_Base_Start_IT+0x80>
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4a1b      	ldr	r2, [pc, #108]	; (8008100 <HAL_TIM_Base_Start_IT+0xd4>)
 8008094:	4293      	cmp	r3, r2
 8008096:	d009      	beq.n	80080ac <HAL_TIM_Base_Start_IT+0x80>
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a19      	ldr	r2, [pc, #100]	; (8008104 <HAL_TIM_Base_Start_IT+0xd8>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d004      	beq.n	80080ac <HAL_TIM_Base_Start_IT+0x80>
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	4a18      	ldr	r2, [pc, #96]	; (8008108 <HAL_TIM_Base_Start_IT+0xdc>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d111      	bne.n	80080d0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	689b      	ldr	r3, [r3, #8]
 80080b2:	f003 0307 	and.w	r3, r3, #7
 80080b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2b06      	cmp	r3, #6
 80080bc:	d010      	beq.n	80080e0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f042 0201 	orr.w	r2, r2, #1
 80080cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080ce:	e007      	b.n	80080e0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f042 0201 	orr.w	r2, r2, #1
 80080de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80080e0:	2300      	movs	r3, #0
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3714      	adds	r7, #20
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr
 80080ee:	bf00      	nop
 80080f0:	40010000 	.word	0x40010000
 80080f4:	40000400 	.word	0x40000400
 80080f8:	40000800 	.word	0x40000800
 80080fc:	40000c00 	.word	0x40000c00
 8008100:	40010400 	.word	0x40010400
 8008104:	40014000 	.word	0x40014000
 8008108:	40001800 	.word	0x40001800

0800810c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b082      	sub	sp, #8
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d101      	bne.n	800811e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800811a:	2301      	movs	r3, #1
 800811c:	e041      	b.n	80081a2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008124:	b2db      	uxtb	r3, r3
 8008126:	2b00      	cmp	r3, #0
 8008128:	d106      	bne.n	8008138 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	2200      	movs	r2, #0
 800812e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008132:	6878      	ldr	r0, [r7, #4]
 8008134:	f7fb fa4c 	bl	80035d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2202      	movs	r2, #2
 800813c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681a      	ldr	r2, [r3, #0]
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	3304      	adds	r3, #4
 8008148:	4619      	mov	r1, r3
 800814a:	4610      	mov	r0, r2
 800814c:	f000 fe46 	bl	8008ddc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2201      	movs	r2, #1
 8008154:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2201      	movs	r2, #1
 800815c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2201      	movs	r2, #1
 8008164:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2201      	movs	r2, #1
 800816c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2201      	movs	r2, #1
 8008174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2201      	movs	r2, #1
 800817c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2201      	movs	r2, #1
 8008184:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2201      	movs	r2, #1
 800818c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2201      	movs	r2, #1
 8008194:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2201      	movs	r2, #1
 800819c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80081a0:	2300      	movs	r3, #0
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3708      	adds	r7, #8
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
	...

080081ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b084      	sub	sp, #16
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d109      	bne.n	80081d0 <HAL_TIM_PWM_Start+0x24>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80081c2:	b2db      	uxtb	r3, r3
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	bf14      	ite	ne
 80081c8:	2301      	movne	r3, #1
 80081ca:	2300      	moveq	r3, #0
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	e022      	b.n	8008216 <HAL_TIM_PWM_Start+0x6a>
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	2b04      	cmp	r3, #4
 80081d4:	d109      	bne.n	80081ea <HAL_TIM_PWM_Start+0x3e>
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80081dc:	b2db      	uxtb	r3, r3
 80081de:	2b01      	cmp	r3, #1
 80081e0:	bf14      	ite	ne
 80081e2:	2301      	movne	r3, #1
 80081e4:	2300      	moveq	r3, #0
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	e015      	b.n	8008216 <HAL_TIM_PWM_Start+0x6a>
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	2b08      	cmp	r3, #8
 80081ee:	d109      	bne.n	8008204 <HAL_TIM_PWM_Start+0x58>
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80081f6:	b2db      	uxtb	r3, r3
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	bf14      	ite	ne
 80081fc:	2301      	movne	r3, #1
 80081fe:	2300      	moveq	r3, #0
 8008200:	b2db      	uxtb	r3, r3
 8008202:	e008      	b.n	8008216 <HAL_TIM_PWM_Start+0x6a>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800820a:	b2db      	uxtb	r3, r3
 800820c:	2b01      	cmp	r3, #1
 800820e:	bf14      	ite	ne
 8008210:	2301      	movne	r3, #1
 8008212:	2300      	moveq	r3, #0
 8008214:	b2db      	uxtb	r3, r3
 8008216:	2b00      	cmp	r3, #0
 8008218:	d001      	beq.n	800821e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800821a:	2301      	movs	r3, #1
 800821c:	e07c      	b.n	8008318 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800821e:	683b      	ldr	r3, [r7, #0]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d104      	bne.n	800822e <HAL_TIM_PWM_Start+0x82>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2202      	movs	r2, #2
 8008228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800822c:	e013      	b.n	8008256 <HAL_TIM_PWM_Start+0xaa>
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	2b04      	cmp	r3, #4
 8008232:	d104      	bne.n	800823e <HAL_TIM_PWM_Start+0x92>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2202      	movs	r2, #2
 8008238:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800823c:	e00b      	b.n	8008256 <HAL_TIM_PWM_Start+0xaa>
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	2b08      	cmp	r3, #8
 8008242:	d104      	bne.n	800824e <HAL_TIM_PWM_Start+0xa2>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2202      	movs	r2, #2
 8008248:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800824c:	e003      	b.n	8008256 <HAL_TIM_PWM_Start+0xaa>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2202      	movs	r2, #2
 8008252:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	2201      	movs	r2, #1
 800825c:	6839      	ldr	r1, [r7, #0]
 800825e:	4618      	mov	r0, r3
 8008260:	f001 f818 	bl	8009294 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a2d      	ldr	r2, [pc, #180]	; (8008320 <HAL_TIM_PWM_Start+0x174>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d004      	beq.n	8008278 <HAL_TIM_PWM_Start+0xcc>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a2c      	ldr	r2, [pc, #176]	; (8008324 <HAL_TIM_PWM_Start+0x178>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d101      	bne.n	800827c <HAL_TIM_PWM_Start+0xd0>
 8008278:	2301      	movs	r3, #1
 800827a:	e000      	b.n	800827e <HAL_TIM_PWM_Start+0xd2>
 800827c:	2300      	movs	r3, #0
 800827e:	2b00      	cmp	r3, #0
 8008280:	d007      	beq.n	8008292 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008290:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	4a22      	ldr	r2, [pc, #136]	; (8008320 <HAL_TIM_PWM_Start+0x174>)
 8008298:	4293      	cmp	r3, r2
 800829a:	d022      	beq.n	80082e2 <HAL_TIM_PWM_Start+0x136>
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082a4:	d01d      	beq.n	80082e2 <HAL_TIM_PWM_Start+0x136>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a1f      	ldr	r2, [pc, #124]	; (8008328 <HAL_TIM_PWM_Start+0x17c>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d018      	beq.n	80082e2 <HAL_TIM_PWM_Start+0x136>
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	4a1d      	ldr	r2, [pc, #116]	; (800832c <HAL_TIM_PWM_Start+0x180>)
 80082b6:	4293      	cmp	r3, r2
 80082b8:	d013      	beq.n	80082e2 <HAL_TIM_PWM_Start+0x136>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	4a1c      	ldr	r2, [pc, #112]	; (8008330 <HAL_TIM_PWM_Start+0x184>)
 80082c0:	4293      	cmp	r3, r2
 80082c2:	d00e      	beq.n	80082e2 <HAL_TIM_PWM_Start+0x136>
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	4a16      	ldr	r2, [pc, #88]	; (8008324 <HAL_TIM_PWM_Start+0x178>)
 80082ca:	4293      	cmp	r3, r2
 80082cc:	d009      	beq.n	80082e2 <HAL_TIM_PWM_Start+0x136>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	4a18      	ldr	r2, [pc, #96]	; (8008334 <HAL_TIM_PWM_Start+0x188>)
 80082d4:	4293      	cmp	r3, r2
 80082d6:	d004      	beq.n	80082e2 <HAL_TIM_PWM_Start+0x136>
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a16      	ldr	r2, [pc, #88]	; (8008338 <HAL_TIM_PWM_Start+0x18c>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d111      	bne.n	8008306 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	689b      	ldr	r3, [r3, #8]
 80082e8:	f003 0307 	and.w	r3, r3, #7
 80082ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	2b06      	cmp	r3, #6
 80082f2:	d010      	beq.n	8008316 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	681a      	ldr	r2, [r3, #0]
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f042 0201 	orr.w	r2, r2, #1
 8008302:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008304:	e007      	b.n	8008316 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f042 0201 	orr.w	r2, r2, #1
 8008314:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008316:	2300      	movs	r3, #0
}
 8008318:	4618      	mov	r0, r3
 800831a:	3710      	adds	r7, #16
 800831c:	46bd      	mov	sp, r7
 800831e:	bd80      	pop	{r7, pc}
 8008320:	40010000 	.word	0x40010000
 8008324:	40010400 	.word	0x40010400
 8008328:	40000400 	.word	0x40000400
 800832c:	40000800 	.word	0x40000800
 8008330:	40000c00 	.word	0x40000c00
 8008334:	40014000 	.word	0x40014000
 8008338:	40001800 	.word	0x40001800

0800833c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b086      	sub	sp, #24
 8008340:	af00      	add	r7, sp, #0
 8008342:	60f8      	str	r0, [r7, #12]
 8008344:	60b9      	str	r1, [r7, #8]
 8008346:	607a      	str	r2, [r7, #4]
 8008348:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 800834a:	2300      	movs	r3, #0
 800834c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 800834e:	68bb      	ldr	r3, [r7, #8]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d109      	bne.n	8008368 <HAL_TIM_PWM_Start_DMA+0x2c>
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800835a:	b2db      	uxtb	r3, r3
 800835c:	2b02      	cmp	r3, #2
 800835e:	bf0c      	ite	eq
 8008360:	2301      	moveq	r3, #1
 8008362:	2300      	movne	r3, #0
 8008364:	b2db      	uxtb	r3, r3
 8008366:	e022      	b.n	80083ae <HAL_TIM_PWM_Start_DMA+0x72>
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	2b04      	cmp	r3, #4
 800836c:	d109      	bne.n	8008382 <HAL_TIM_PWM_Start_DMA+0x46>
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008374:	b2db      	uxtb	r3, r3
 8008376:	2b02      	cmp	r3, #2
 8008378:	bf0c      	ite	eq
 800837a:	2301      	moveq	r3, #1
 800837c:	2300      	movne	r3, #0
 800837e:	b2db      	uxtb	r3, r3
 8008380:	e015      	b.n	80083ae <HAL_TIM_PWM_Start_DMA+0x72>
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	2b08      	cmp	r3, #8
 8008386:	d109      	bne.n	800839c <HAL_TIM_PWM_Start_DMA+0x60>
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800838e:	b2db      	uxtb	r3, r3
 8008390:	2b02      	cmp	r3, #2
 8008392:	bf0c      	ite	eq
 8008394:	2301      	moveq	r3, #1
 8008396:	2300      	movne	r3, #0
 8008398:	b2db      	uxtb	r3, r3
 800839a:	e008      	b.n	80083ae <HAL_TIM_PWM_Start_DMA+0x72>
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083a2:	b2db      	uxtb	r3, r3
 80083a4:	2b02      	cmp	r3, #2
 80083a6:	bf0c      	ite	eq
 80083a8:	2301      	moveq	r3, #1
 80083aa:	2300      	movne	r3, #0
 80083ac:	b2db      	uxtb	r3, r3
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d001      	beq.n	80083b6 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80083b2:	2302      	movs	r3, #2
 80083b4:	e171      	b.n	800869a <HAL_TIM_PWM_Start_DMA+0x35e>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80083b6:	68bb      	ldr	r3, [r7, #8]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d109      	bne.n	80083d0 <HAL_TIM_PWM_Start_DMA+0x94>
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	2b01      	cmp	r3, #1
 80083c6:	bf0c      	ite	eq
 80083c8:	2301      	moveq	r3, #1
 80083ca:	2300      	movne	r3, #0
 80083cc:	b2db      	uxtb	r3, r3
 80083ce:	e022      	b.n	8008416 <HAL_TIM_PWM_Start_DMA+0xda>
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	2b04      	cmp	r3, #4
 80083d4:	d109      	bne.n	80083ea <HAL_TIM_PWM_Start_DMA+0xae>
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80083dc:	b2db      	uxtb	r3, r3
 80083de:	2b01      	cmp	r3, #1
 80083e0:	bf0c      	ite	eq
 80083e2:	2301      	moveq	r3, #1
 80083e4:	2300      	movne	r3, #0
 80083e6:	b2db      	uxtb	r3, r3
 80083e8:	e015      	b.n	8008416 <HAL_TIM_PWM_Start_DMA+0xda>
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	2b08      	cmp	r3, #8
 80083ee:	d109      	bne.n	8008404 <HAL_TIM_PWM_Start_DMA+0xc8>
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80083f6:	b2db      	uxtb	r3, r3
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	bf0c      	ite	eq
 80083fc:	2301      	moveq	r3, #1
 80083fe:	2300      	movne	r3, #0
 8008400:	b2db      	uxtb	r3, r3
 8008402:	e008      	b.n	8008416 <HAL_TIM_PWM_Start_DMA+0xda>
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800840a:	b2db      	uxtb	r3, r3
 800840c:	2b01      	cmp	r3, #1
 800840e:	bf0c      	ite	eq
 8008410:	2301      	moveq	r3, #1
 8008412:	2300      	movne	r3, #0
 8008414:	b2db      	uxtb	r3, r3
 8008416:	2b00      	cmp	r3, #0
 8008418:	d024      	beq.n	8008464 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d002      	beq.n	8008426 <HAL_TIM_PWM_Start_DMA+0xea>
 8008420:	887b      	ldrh	r3, [r7, #2]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d101      	bne.n	800842a <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8008426:	2301      	movs	r3, #1
 8008428:	e137      	b.n	800869a <HAL_TIM_PWM_Start_DMA+0x35e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d104      	bne.n	800843a <HAL_TIM_PWM_Start_DMA+0xfe>
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2202      	movs	r2, #2
 8008434:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008438:	e016      	b.n	8008468 <HAL_TIM_PWM_Start_DMA+0x12c>
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	2b04      	cmp	r3, #4
 800843e:	d104      	bne.n	800844a <HAL_TIM_PWM_Start_DMA+0x10e>
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2202      	movs	r2, #2
 8008444:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008448:	e00e      	b.n	8008468 <HAL_TIM_PWM_Start_DMA+0x12c>
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	2b08      	cmp	r3, #8
 800844e:	d104      	bne.n	800845a <HAL_TIM_PWM_Start_DMA+0x11e>
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	2202      	movs	r2, #2
 8008454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008458:	e006      	b.n	8008468 <HAL_TIM_PWM_Start_DMA+0x12c>
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	2202      	movs	r2, #2
 800845e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008462:	e001      	b.n	8008468 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8008464:	2301      	movs	r3, #1
 8008466:	e118      	b.n	800869a <HAL_TIM_PWM_Start_DMA+0x35e>
  }

  switch (Channel)
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	2b0c      	cmp	r3, #12
 800846c:	f200 80ae 	bhi.w	80085cc <HAL_TIM_PWM_Start_DMA+0x290>
 8008470:	a201      	add	r2, pc, #4	; (adr r2, 8008478 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8008472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008476:	bf00      	nop
 8008478:	080084ad 	.word	0x080084ad
 800847c:	080085cd 	.word	0x080085cd
 8008480:	080085cd 	.word	0x080085cd
 8008484:	080085cd 	.word	0x080085cd
 8008488:	080084f5 	.word	0x080084f5
 800848c:	080085cd 	.word	0x080085cd
 8008490:	080085cd 	.word	0x080085cd
 8008494:	080085cd 	.word	0x080085cd
 8008498:	0800853d 	.word	0x0800853d
 800849c:	080085cd 	.word	0x080085cd
 80084a0:	080085cd 	.word	0x080085cd
 80084a4:	080085cd 	.word	0x080085cd
 80084a8:	08008585 	.word	0x08008585
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b0:	4a7c      	ldr	r2, [pc, #496]	; (80086a4 <HAL_TIM_PWM_Start_DMA+0x368>)
 80084b2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b8:	4a7b      	ldr	r2, [pc, #492]	; (80086a8 <HAL_TIM_PWM_Start_DMA+0x36c>)
 80084ba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c0:	4a7a      	ldr	r2, [pc, #488]	; (80086ac <HAL_TIM_PWM_Start_DMA+0x370>)
 80084c2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80084c8:	6879      	ldr	r1, [r7, #4]
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	3334      	adds	r3, #52	; 0x34
 80084d0:	461a      	mov	r2, r3
 80084d2:	887b      	ldrh	r3, [r7, #2]
 80084d4:	f7fc f91a 	bl	800470c <HAL_DMA_Start_IT>
 80084d8:	4603      	mov	r3, r0
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d001      	beq.n	80084e2 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80084de:	2301      	movs	r3, #1
 80084e0:	e0db      	b.n	800869a <HAL_TIM_PWM_Start_DMA+0x35e>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	68da      	ldr	r2, [r3, #12]
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084f0:	60da      	str	r2, [r3, #12]
      break;
 80084f2:	e06e      	b.n	80085d2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084f8:	4a6a      	ldr	r2, [pc, #424]	; (80086a4 <HAL_TIM_PWM_Start_DMA+0x368>)
 80084fa:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008500:	4a69      	ldr	r2, [pc, #420]	; (80086a8 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8008502:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008508:	4a68      	ldr	r2, [pc, #416]	; (80086ac <HAL_TIM_PWM_Start_DMA+0x370>)
 800850a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8008510:	6879      	ldr	r1, [r7, #4]
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	3338      	adds	r3, #56	; 0x38
 8008518:	461a      	mov	r2, r3
 800851a:	887b      	ldrh	r3, [r7, #2]
 800851c:	f7fc f8f6 	bl	800470c <HAL_DMA_Start_IT>
 8008520:	4603      	mov	r3, r0
 8008522:	2b00      	cmp	r3, #0
 8008524:	d001      	beq.n	800852a <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008526:	2301      	movs	r3, #1
 8008528:	e0b7      	b.n	800869a <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	68da      	ldr	r2, [r3, #12]
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008538:	60da      	str	r2, [r3, #12]
      break;
 800853a:	e04a      	b.n	80085d2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008540:	4a58      	ldr	r2, [pc, #352]	; (80086a4 <HAL_TIM_PWM_Start_DMA+0x368>)
 8008542:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008548:	4a57      	ldr	r2, [pc, #348]	; (80086a8 <HAL_TIM_PWM_Start_DMA+0x36c>)
 800854a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008550:	4a56      	ldr	r2, [pc, #344]	; (80086ac <HAL_TIM_PWM_Start_DMA+0x370>)
 8008552:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8008558:	6879      	ldr	r1, [r7, #4]
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	333c      	adds	r3, #60	; 0x3c
 8008560:	461a      	mov	r2, r3
 8008562:	887b      	ldrh	r3, [r7, #2]
 8008564:	f7fc f8d2 	bl	800470c <HAL_DMA_Start_IT>
 8008568:	4603      	mov	r3, r0
 800856a:	2b00      	cmp	r3, #0
 800856c:	d001      	beq.n	8008572 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800856e:	2301      	movs	r3, #1
 8008570:	e093      	b.n	800869a <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	68da      	ldr	r2, [r3, #12]
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008580:	60da      	str	r2, [r3, #12]
      break;
 8008582:	e026      	b.n	80085d2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008588:	4a46      	ldr	r2, [pc, #280]	; (80086a4 <HAL_TIM_PWM_Start_DMA+0x368>)
 800858a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008590:	4a45      	ldr	r2, [pc, #276]	; (80086a8 <HAL_TIM_PWM_Start_DMA+0x36c>)
 8008592:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008598:	4a44      	ldr	r2, [pc, #272]	; (80086ac <HAL_TIM_PWM_Start_DMA+0x370>)
 800859a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80085a0:	6879      	ldr	r1, [r7, #4]
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	3340      	adds	r3, #64	; 0x40
 80085a8:	461a      	mov	r2, r3
 80085aa:	887b      	ldrh	r3, [r7, #2]
 80085ac:	f7fc f8ae 	bl	800470c <HAL_DMA_Start_IT>
 80085b0:	4603      	mov	r3, r0
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d001      	beq.n	80085ba <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80085b6:	2301      	movs	r3, #1
 80085b8:	e06f      	b.n	800869a <HAL_TIM_PWM_Start_DMA+0x35e>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	68da      	ldr	r2, [r3, #12]
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80085c8:	60da      	str	r2, [r3, #12]
      break;
 80085ca:	e002      	b.n	80085d2 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80085cc:	2301      	movs	r3, #1
 80085ce:	75fb      	strb	r3, [r7, #23]
      break;
 80085d0:	bf00      	nop
  }

  if (status == HAL_OK)
 80085d2:	7dfb      	ldrb	r3, [r7, #23]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d15f      	bne.n	8008698 <HAL_TIM_PWM_Start_DMA+0x35c>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	2201      	movs	r2, #1
 80085de:	68b9      	ldr	r1, [r7, #8]
 80085e0:	4618      	mov	r0, r3
 80085e2:	f000 fe57 	bl	8009294 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a31      	ldr	r2, [pc, #196]	; (80086b0 <HAL_TIM_PWM_Start_DMA+0x374>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d004      	beq.n	80085fa <HAL_TIM_PWM_Start_DMA+0x2be>
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a2f      	ldr	r2, [pc, #188]	; (80086b4 <HAL_TIM_PWM_Start_DMA+0x378>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d101      	bne.n	80085fe <HAL_TIM_PWM_Start_DMA+0x2c2>
 80085fa:	2301      	movs	r3, #1
 80085fc:	e000      	b.n	8008600 <HAL_TIM_PWM_Start_DMA+0x2c4>
 80085fe:	2300      	movs	r3, #0
 8008600:	2b00      	cmp	r3, #0
 8008602:	d007      	beq.n	8008614 <HAL_TIM_PWM_Start_DMA+0x2d8>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008612:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4a25      	ldr	r2, [pc, #148]	; (80086b0 <HAL_TIM_PWM_Start_DMA+0x374>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d022      	beq.n	8008664 <HAL_TIM_PWM_Start_DMA+0x328>
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008626:	d01d      	beq.n	8008664 <HAL_TIM_PWM_Start_DMA+0x328>
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a22      	ldr	r2, [pc, #136]	; (80086b8 <HAL_TIM_PWM_Start_DMA+0x37c>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d018      	beq.n	8008664 <HAL_TIM_PWM_Start_DMA+0x328>
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4a21      	ldr	r2, [pc, #132]	; (80086bc <HAL_TIM_PWM_Start_DMA+0x380>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d013      	beq.n	8008664 <HAL_TIM_PWM_Start_DMA+0x328>
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a1f      	ldr	r2, [pc, #124]	; (80086c0 <HAL_TIM_PWM_Start_DMA+0x384>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d00e      	beq.n	8008664 <HAL_TIM_PWM_Start_DMA+0x328>
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a1a      	ldr	r2, [pc, #104]	; (80086b4 <HAL_TIM_PWM_Start_DMA+0x378>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d009      	beq.n	8008664 <HAL_TIM_PWM_Start_DMA+0x328>
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a1b      	ldr	r2, [pc, #108]	; (80086c4 <HAL_TIM_PWM_Start_DMA+0x388>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d004      	beq.n	8008664 <HAL_TIM_PWM_Start_DMA+0x328>
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a1a      	ldr	r2, [pc, #104]	; (80086c8 <HAL_TIM_PWM_Start_DMA+0x38c>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d111      	bne.n	8008688 <HAL_TIM_PWM_Start_DMA+0x34c>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	689b      	ldr	r3, [r3, #8]
 800866a:	f003 0307 	and.w	r3, r3, #7
 800866e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	2b06      	cmp	r3, #6
 8008674:	d010      	beq.n	8008698 <HAL_TIM_PWM_Start_DMA+0x35c>
      {
        __HAL_TIM_ENABLE(htim);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f042 0201 	orr.w	r2, r2, #1
 8008684:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008686:	e007      	b.n	8008698 <HAL_TIM_PWM_Start_DMA+0x35c>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	681a      	ldr	r2, [r3, #0]
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f042 0201 	orr.w	r2, r2, #1
 8008696:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8008698:	7dfb      	ldrb	r3, [r7, #23]
}
 800869a:	4618      	mov	r0, r3
 800869c:	3718      	adds	r7, #24
 800869e:	46bd      	mov	sp, r7
 80086a0:	bd80      	pop	{r7, pc}
 80086a2:	bf00      	nop
 80086a4:	08008ccb 	.word	0x08008ccb
 80086a8:	08008d73 	.word	0x08008d73
 80086ac:	08008c39 	.word	0x08008c39
 80086b0:	40010000 	.word	0x40010000
 80086b4:	40010400 	.word	0x40010400
 80086b8:	40000400 	.word	0x40000400
 80086bc:	40000800 	.word	0x40000800
 80086c0:	40000c00 	.word	0x40000c00
 80086c4:	40014000 	.word	0x40014000
 80086c8:	40001800 	.word	0x40001800

080086cc <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80086d6:	2300      	movs	r3, #0
 80086d8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80086da:	683b      	ldr	r3, [r7, #0]
 80086dc:	2b0c      	cmp	r3, #12
 80086de:	d855      	bhi.n	800878c <HAL_TIM_PWM_Stop_DMA+0xc0>
 80086e0:	a201      	add	r2, pc, #4	; (adr r2, 80086e8 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80086e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086e6:	bf00      	nop
 80086e8:	0800871d 	.word	0x0800871d
 80086ec:	0800878d 	.word	0x0800878d
 80086f0:	0800878d 	.word	0x0800878d
 80086f4:	0800878d 	.word	0x0800878d
 80086f8:	08008739 	.word	0x08008739
 80086fc:	0800878d 	.word	0x0800878d
 8008700:	0800878d 	.word	0x0800878d
 8008704:	0800878d 	.word	0x0800878d
 8008708:	08008755 	.word	0x08008755
 800870c:	0800878d 	.word	0x0800878d
 8008710:	0800878d 	.word	0x0800878d
 8008714:	0800878d 	.word	0x0800878d
 8008718:	08008771 	.word	0x08008771
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	68da      	ldr	r2, [r3, #12]
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800872a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008730:	4618      	mov	r0, r3
 8008732:	f7fc f8b3 	bl	800489c <HAL_DMA_Abort_IT>
      break;
 8008736:	e02c      	b.n	8008792 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	68da      	ldr	r2, [r3, #12]
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008746:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800874c:	4618      	mov	r0, r3
 800874e:	f7fc f8a5 	bl	800489c <HAL_DMA_Abort_IT>
      break;
 8008752:	e01e      	b.n	8008792 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	68da      	ldr	r2, [r3, #12]
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008762:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008768:	4618      	mov	r0, r3
 800876a:	f7fc f897 	bl	800489c <HAL_DMA_Abort_IT>
      break;
 800876e:	e010      	b.n	8008792 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	68da      	ldr	r2, [r3, #12]
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800877e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008784:	4618      	mov	r0, r3
 8008786:	f7fc f889 	bl	800489c <HAL_DMA_Abort_IT>
      break;
 800878a:	e002      	b.n	8008792 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800878c:	2301      	movs	r3, #1
 800878e:	73fb      	strb	r3, [r7, #15]
      break;
 8008790:	bf00      	nop
  }

  if (status == HAL_OK)
 8008792:	7bfb      	ldrb	r3, [r7, #15]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d161      	bne.n	800885c <HAL_TIM_PWM_Stop_DMA+0x190>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	2200      	movs	r2, #0
 800879e:	6839      	ldr	r1, [r7, #0]
 80087a0:	4618      	mov	r0, r3
 80087a2:	f000 fd77 	bl	8009294 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a2f      	ldr	r2, [pc, #188]	; (8008868 <HAL_TIM_PWM_Stop_DMA+0x19c>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d004      	beq.n	80087ba <HAL_TIM_PWM_Stop_DMA+0xee>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a2d      	ldr	r2, [pc, #180]	; (800886c <HAL_TIM_PWM_Stop_DMA+0x1a0>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d101      	bne.n	80087be <HAL_TIM_PWM_Stop_DMA+0xf2>
 80087ba:	2301      	movs	r3, #1
 80087bc:	e000      	b.n	80087c0 <HAL_TIM_PWM_Stop_DMA+0xf4>
 80087be:	2300      	movs	r3, #0
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d017      	beq.n	80087f4 <HAL_TIM_PWM_Stop_DMA+0x128>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	6a1a      	ldr	r2, [r3, #32]
 80087ca:	f241 1311 	movw	r3, #4369	; 0x1111
 80087ce:	4013      	ands	r3, r2
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d10f      	bne.n	80087f4 <HAL_TIM_PWM_Stop_DMA+0x128>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	6a1a      	ldr	r2, [r3, #32]
 80087da:	f240 4344 	movw	r3, #1092	; 0x444
 80087de:	4013      	ands	r3, r2
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d107      	bne.n	80087f4 <HAL_TIM_PWM_Stop_DMA+0x128>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80087f2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	6a1a      	ldr	r2, [r3, #32]
 80087fa:	f241 1311 	movw	r3, #4369	; 0x1111
 80087fe:	4013      	ands	r3, r2
 8008800:	2b00      	cmp	r3, #0
 8008802:	d10f      	bne.n	8008824 <HAL_TIM_PWM_Stop_DMA+0x158>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	6a1a      	ldr	r2, [r3, #32]
 800880a:	f240 4344 	movw	r3, #1092	; 0x444
 800880e:	4013      	ands	r3, r2
 8008810:	2b00      	cmp	r3, #0
 8008812:	d107      	bne.n	8008824 <HAL_TIM_PWM_Stop_DMA+0x158>
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f022 0201 	bic.w	r2, r2, #1
 8008822:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d104      	bne.n	8008834 <HAL_TIM_PWM_Stop_DMA+0x168>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2201      	movs	r2, #1
 800882e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008832:	e013      	b.n	800885c <HAL_TIM_PWM_Stop_DMA+0x190>
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	2b04      	cmp	r3, #4
 8008838:	d104      	bne.n	8008844 <HAL_TIM_PWM_Stop_DMA+0x178>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2201      	movs	r2, #1
 800883e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008842:	e00b      	b.n	800885c <HAL_TIM_PWM_Stop_DMA+0x190>
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	2b08      	cmp	r3, #8
 8008848:	d104      	bne.n	8008854 <HAL_TIM_PWM_Stop_DMA+0x188>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2201      	movs	r2, #1
 800884e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008852:	e003      	b.n	800885c <HAL_TIM_PWM_Stop_DMA+0x190>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2201      	movs	r2, #1
 8008858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 800885c:	7bfb      	ldrb	r3, [r7, #15]
}
 800885e:	4618      	mov	r0, r3
 8008860:	3710      	adds	r7, #16
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}
 8008866:	bf00      	nop
 8008868:	40010000 	.word	0x40010000
 800886c:	40010400 	.word	0x40010400

08008870 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b084      	sub	sp, #16
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	68db      	ldr	r3, [r3, #12]
 800887e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	691b      	ldr	r3, [r3, #16]
 8008886:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	f003 0302 	and.w	r3, r3, #2
 800888e:	2b00      	cmp	r3, #0
 8008890:	d020      	beq.n	80088d4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	f003 0302 	and.w	r3, r3, #2
 8008898:	2b00      	cmp	r3, #0
 800889a:	d01b      	beq.n	80088d4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f06f 0202 	mvn.w	r2, #2
 80088a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2201      	movs	r2, #1
 80088aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	699b      	ldr	r3, [r3, #24]
 80088b2:	f003 0303 	and.w	r3, r3, #3
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d003      	beq.n	80088c2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f000 f994 	bl	8008be8 <HAL_TIM_IC_CaptureCallback>
 80088c0:	e005      	b.n	80088ce <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80088c2:	6878      	ldr	r0, [r7, #4]
 80088c4:	f000 f986 	bl	8008bd4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f7f8 fd57 	bl	800137c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	2200      	movs	r2, #0
 80088d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	f003 0304 	and.w	r3, r3, #4
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d020      	beq.n	8008920 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	f003 0304 	and.w	r3, r3, #4
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d01b      	beq.n	8008920 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f06f 0204 	mvn.w	r2, #4
 80088f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2202      	movs	r2, #2
 80088f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	699b      	ldr	r3, [r3, #24]
 80088fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008902:	2b00      	cmp	r3, #0
 8008904:	d003      	beq.n	800890e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f000 f96e 	bl	8008be8 <HAL_TIM_IC_CaptureCallback>
 800890c:	e005      	b.n	800891a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f000 f960 	bl	8008bd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008914:	6878      	ldr	r0, [r7, #4]
 8008916:	f7f8 fd31 	bl	800137c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2200      	movs	r2, #0
 800891e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	f003 0308 	and.w	r3, r3, #8
 8008926:	2b00      	cmp	r3, #0
 8008928:	d020      	beq.n	800896c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	f003 0308 	and.w	r3, r3, #8
 8008930:	2b00      	cmp	r3, #0
 8008932:	d01b      	beq.n	800896c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	f06f 0208 	mvn.w	r2, #8
 800893c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2204      	movs	r2, #4
 8008942:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	69db      	ldr	r3, [r3, #28]
 800894a:	f003 0303 	and.w	r3, r3, #3
 800894e:	2b00      	cmp	r3, #0
 8008950:	d003      	beq.n	800895a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f000 f948 	bl	8008be8 <HAL_TIM_IC_CaptureCallback>
 8008958:	e005      	b.n	8008966 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f000 f93a 	bl	8008bd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f7f8 fd0b 	bl	800137c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	2200      	movs	r2, #0
 800896a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	f003 0310 	and.w	r3, r3, #16
 8008972:	2b00      	cmp	r3, #0
 8008974:	d020      	beq.n	80089b8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	f003 0310 	and.w	r3, r3, #16
 800897c:	2b00      	cmp	r3, #0
 800897e:	d01b      	beq.n	80089b8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f06f 0210 	mvn.w	r2, #16
 8008988:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2208      	movs	r2, #8
 800898e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	69db      	ldr	r3, [r3, #28]
 8008996:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800899a:	2b00      	cmp	r3, #0
 800899c:	d003      	beq.n	80089a6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f000 f922 	bl	8008be8 <HAL_TIM_IC_CaptureCallback>
 80089a4:	e005      	b.n	80089b2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f000 f914 	bl	8008bd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f7f8 fce5 	bl	800137c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2200      	movs	r2, #0
 80089b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	f003 0301 	and.w	r3, r3, #1
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d00c      	beq.n	80089dc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	f003 0301 	and.w	r3, r3, #1
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d007      	beq.n	80089dc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	f06f 0201 	mvn.w	r2, #1
 80089d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80089d6:	6878      	ldr	r0, [r7, #4]
 80089d8:	f7fa fabc 	bl	8002f54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	d00c      	beq.n	8008a00 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d007      	beq.n	8008a00 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80089f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f000 fcf6 	bl	80093ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d00c      	beq.n	8008a24 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d007      	beq.n	8008a24 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008a1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 f8f6 	bl	8008c10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	f003 0320 	and.w	r3, r3, #32
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d00c      	beq.n	8008a48 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	f003 0320 	and.w	r3, r3, #32
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d007      	beq.n	8008a48 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f06f 0220 	mvn.w	r2, #32
 8008a40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f000 fcc8 	bl	80093d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008a48:	bf00      	nop
 8008a4a:	3710      	adds	r7, #16
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b086      	sub	sp, #24
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	60f8      	str	r0, [r7, #12]
 8008a58:	60b9      	str	r1, [r7, #8]
 8008a5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a66:	2b01      	cmp	r3, #1
 8008a68:	d101      	bne.n	8008a6e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008a6a:	2302      	movs	r3, #2
 8008a6c:	e0ae      	b.n	8008bcc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2201      	movs	r2, #1
 8008a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	2b0c      	cmp	r3, #12
 8008a7a:	f200 809f 	bhi.w	8008bbc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008a7e:	a201      	add	r2, pc, #4	; (adr r2, 8008a84 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a84:	08008ab9 	.word	0x08008ab9
 8008a88:	08008bbd 	.word	0x08008bbd
 8008a8c:	08008bbd 	.word	0x08008bbd
 8008a90:	08008bbd 	.word	0x08008bbd
 8008a94:	08008af9 	.word	0x08008af9
 8008a98:	08008bbd 	.word	0x08008bbd
 8008a9c:	08008bbd 	.word	0x08008bbd
 8008aa0:	08008bbd 	.word	0x08008bbd
 8008aa4:	08008b3b 	.word	0x08008b3b
 8008aa8:	08008bbd 	.word	0x08008bbd
 8008aac:	08008bbd 	.word	0x08008bbd
 8008ab0:	08008bbd 	.word	0x08008bbd
 8008ab4:	08008b7b 	.word	0x08008b7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	68b9      	ldr	r1, [r7, #8]
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f000 fa38 	bl	8008f34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	699a      	ldr	r2, [r3, #24]
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f042 0208 	orr.w	r2, r2, #8
 8008ad2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	699a      	ldr	r2, [r3, #24]
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f022 0204 	bic.w	r2, r2, #4
 8008ae2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	6999      	ldr	r1, [r3, #24]
 8008aea:	68bb      	ldr	r3, [r7, #8]
 8008aec:	691a      	ldr	r2, [r3, #16]
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	430a      	orrs	r2, r1
 8008af4:	619a      	str	r2, [r3, #24]
      break;
 8008af6:	e064      	b.n	8008bc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	68b9      	ldr	r1, [r7, #8]
 8008afe:	4618      	mov	r0, r3
 8008b00:	f000 fa88 	bl	8009014 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	699a      	ldr	r2, [r3, #24]
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	699a      	ldr	r2, [r3, #24]
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	6999      	ldr	r1, [r3, #24]
 8008b2a:	68bb      	ldr	r3, [r7, #8]
 8008b2c:	691b      	ldr	r3, [r3, #16]
 8008b2e:	021a      	lsls	r2, r3, #8
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	430a      	orrs	r2, r1
 8008b36:	619a      	str	r2, [r3, #24]
      break;
 8008b38:	e043      	b.n	8008bc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008b3a:	68fb      	ldr	r3, [r7, #12]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	68b9      	ldr	r1, [r7, #8]
 8008b40:	4618      	mov	r0, r3
 8008b42:	f000 fadd 	bl	8009100 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008b46:	68fb      	ldr	r3, [r7, #12]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	69da      	ldr	r2, [r3, #28]
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	f042 0208 	orr.w	r2, r2, #8
 8008b54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	69da      	ldr	r2, [r3, #28]
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f022 0204 	bic.w	r2, r2, #4
 8008b64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	69d9      	ldr	r1, [r3, #28]
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	691a      	ldr	r2, [r3, #16]
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	430a      	orrs	r2, r1
 8008b76:	61da      	str	r2, [r3, #28]
      break;
 8008b78:	e023      	b.n	8008bc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008b7a:	68fb      	ldr	r3, [r7, #12]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	68b9      	ldr	r1, [r7, #8]
 8008b80:	4618      	mov	r0, r3
 8008b82:	f000 fb31 	bl	80091e8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	69da      	ldr	r2, [r3, #28]
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008b94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	69da      	ldr	r2, [r3, #28]
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ba4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	69d9      	ldr	r1, [r3, #28]
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	691b      	ldr	r3, [r3, #16]
 8008bb0:	021a      	lsls	r2, r3, #8
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	430a      	orrs	r2, r1
 8008bb8:	61da      	str	r2, [r3, #28]
      break;
 8008bba:	e002      	b.n	8008bc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8008bbc:	2301      	movs	r3, #1
 8008bbe:	75fb      	strb	r3, [r7, #23]
      break;
 8008bc0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008bca:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3718      	adds	r7, #24
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}

08008bd4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008bd4:	b480      	push	{r7}
 8008bd6:	b083      	sub	sp, #12
 8008bd8:	af00      	add	r7, sp, #0
 8008bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008bdc:	bf00      	nop
 8008bde:	370c      	adds	r7, #12
 8008be0:	46bd      	mov	sp, r7
 8008be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be6:	4770      	bx	lr

08008be8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008be8:	b480      	push	{r7}
 8008bea:	b083      	sub	sp, #12
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008bf0:	bf00      	nop
 8008bf2:	370c      	adds	r7, #12
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfa:	4770      	bx	lr

08008bfc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008bfc:	b480      	push	{r7}
 8008bfe:	b083      	sub	sp, #12
 8008c00:	af00      	add	r7, sp, #0
 8008c02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008c04:	bf00      	nop
 8008c06:	370c      	adds	r7, #12
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr

08008c10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b083      	sub	sp, #12
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008c18:	bf00      	nop
 8008c1a:	370c      	adds	r7, #12
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr

08008c24 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008c24:	b480      	push	{r7}
 8008c26:	b083      	sub	sp, #12
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008c2c:	bf00      	nop
 8008c2e:	370c      	adds	r7, #12
 8008c30:	46bd      	mov	sp, r7
 8008c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c36:	4770      	bx	lr

08008c38 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008c38:	b580      	push	{r7, lr}
 8008c3a:	b084      	sub	sp, #16
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c44:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c4a:	687a      	ldr	r2, [r7, #4]
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d107      	bne.n	8008c60 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2201      	movs	r2, #1
 8008c54:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2201      	movs	r2, #1
 8008c5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008c5e:	e02a      	b.n	8008cb6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c64:	687a      	ldr	r2, [r7, #4]
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d107      	bne.n	8008c7a <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2202      	movs	r2, #2
 8008c6e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2201      	movs	r2, #1
 8008c74:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008c78:	e01d      	b.n	8008cb6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c7e:	687a      	ldr	r2, [r7, #4]
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d107      	bne.n	8008c94 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2204      	movs	r2, #4
 8008c88:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	2201      	movs	r2, #1
 8008c8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008c92:	e010      	b.n	8008cb6 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c98:	687a      	ldr	r2, [r7, #4]
 8008c9a:	429a      	cmp	r2, r3
 8008c9c:	d107      	bne.n	8008cae <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	2208      	movs	r2, #8
 8008ca2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	2201      	movs	r2, #1
 8008ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008cac:	e003      	b.n	8008cb6 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8008cb6:	68f8      	ldr	r0, [r7, #12]
 8008cb8:	f7ff ffb4 	bl	8008c24 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	771a      	strb	r2, [r3, #28]
}
 8008cc2:	bf00      	nop
 8008cc4:	3710      	adds	r7, #16
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	bd80      	pop	{r7, pc}

08008cca <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8008cca:	b580      	push	{r7, lr}
 8008ccc:	b084      	sub	sp, #16
 8008cce:	af00      	add	r7, sp, #0
 8008cd0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cd6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cdc:	687a      	ldr	r2, [r7, #4]
 8008cde:	429a      	cmp	r2, r3
 8008ce0:	d10b      	bne.n	8008cfa <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	69db      	ldr	r3, [r3, #28]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d136      	bne.n	8008d5e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2201      	movs	r2, #1
 8008cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008cf8:	e031      	b.n	8008d5e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cfe:	687a      	ldr	r2, [r7, #4]
 8008d00:	429a      	cmp	r2, r3
 8008d02:	d10b      	bne.n	8008d1c <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	2202      	movs	r2, #2
 8008d08:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	69db      	ldr	r3, [r3, #28]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d125      	bne.n	8008d5e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	2201      	movs	r2, #1
 8008d16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008d1a:	e020      	b.n	8008d5e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d20:	687a      	ldr	r2, [r7, #4]
 8008d22:	429a      	cmp	r2, r3
 8008d24:	d10b      	bne.n	8008d3e <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	2204      	movs	r2, #4
 8008d2a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	69db      	ldr	r3, [r3, #28]
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d114      	bne.n	8008d5e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2201      	movs	r2, #1
 8008d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008d3c:	e00f      	b.n	8008d5e <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	429a      	cmp	r2, r3
 8008d46:	d10a      	bne.n	8008d5e <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	2208      	movs	r2, #8
 8008d4c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	69db      	ldr	r3, [r3, #28]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d103      	bne.n	8008d5e <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2201      	movs	r2, #1
 8008d5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d5e:	68f8      	ldr	r0, [r7, #12]
 8008d60:	f7f8 fb0c 	bl	800137c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2200      	movs	r2, #0
 8008d68:	771a      	strb	r2, [r3, #28]
}
 8008d6a:	bf00      	nop
 8008d6c:	3710      	adds	r7, #16
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}

08008d72 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008d72:	b580      	push	{r7, lr}
 8008d74:	b084      	sub	sp, #16
 8008d76:	af00      	add	r7, sp, #0
 8008d78:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d7e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d84:	687a      	ldr	r2, [r7, #4]
 8008d86:	429a      	cmp	r2, r3
 8008d88:	d103      	bne.n	8008d92 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	2201      	movs	r2, #1
 8008d8e:	771a      	strb	r2, [r3, #28]
 8008d90:	e019      	b.n	8008dc6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d96:	687a      	ldr	r2, [r7, #4]
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	d103      	bne.n	8008da4 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	2202      	movs	r2, #2
 8008da0:	771a      	strb	r2, [r3, #28]
 8008da2:	e010      	b.n	8008dc6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008da8:	687a      	ldr	r2, [r7, #4]
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d103      	bne.n	8008db6 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	2204      	movs	r2, #4
 8008db2:	771a      	strb	r2, [r3, #28]
 8008db4:	e007      	b.n	8008dc6 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dba:	687a      	ldr	r2, [r7, #4]
 8008dbc:	429a      	cmp	r2, r3
 8008dbe:	d102      	bne.n	8008dc6 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2208      	movs	r2, #8
 8008dc4:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8008dc6:	68f8      	ldr	r0, [r7, #12]
 8008dc8:	f7ff ff18 	bl	8008bfc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	2200      	movs	r2, #0
 8008dd0:	771a      	strb	r2, [r3, #28]
}
 8008dd2:	bf00      	nop
 8008dd4:	3710      	adds	r7, #16
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
	...

08008ddc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008ddc:	b480      	push	{r7}
 8008dde:	b085      	sub	sp, #20
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
 8008de4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	4a46      	ldr	r2, [pc, #280]	; (8008f08 <TIM_Base_SetConfig+0x12c>)
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d013      	beq.n	8008e1c <TIM_Base_SetConfig+0x40>
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008dfa:	d00f      	beq.n	8008e1c <TIM_Base_SetConfig+0x40>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	4a43      	ldr	r2, [pc, #268]	; (8008f0c <TIM_Base_SetConfig+0x130>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d00b      	beq.n	8008e1c <TIM_Base_SetConfig+0x40>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	4a42      	ldr	r2, [pc, #264]	; (8008f10 <TIM_Base_SetConfig+0x134>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d007      	beq.n	8008e1c <TIM_Base_SetConfig+0x40>
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	4a41      	ldr	r2, [pc, #260]	; (8008f14 <TIM_Base_SetConfig+0x138>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d003      	beq.n	8008e1c <TIM_Base_SetConfig+0x40>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	4a40      	ldr	r2, [pc, #256]	; (8008f18 <TIM_Base_SetConfig+0x13c>)
 8008e18:	4293      	cmp	r3, r2
 8008e1a:	d108      	bne.n	8008e2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	68fa      	ldr	r2, [r7, #12]
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	4a35      	ldr	r2, [pc, #212]	; (8008f08 <TIM_Base_SetConfig+0x12c>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d02b      	beq.n	8008e8e <TIM_Base_SetConfig+0xb2>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008e3c:	d027      	beq.n	8008e8e <TIM_Base_SetConfig+0xb2>
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	4a32      	ldr	r2, [pc, #200]	; (8008f0c <TIM_Base_SetConfig+0x130>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d023      	beq.n	8008e8e <TIM_Base_SetConfig+0xb2>
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	4a31      	ldr	r2, [pc, #196]	; (8008f10 <TIM_Base_SetConfig+0x134>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d01f      	beq.n	8008e8e <TIM_Base_SetConfig+0xb2>
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	4a30      	ldr	r2, [pc, #192]	; (8008f14 <TIM_Base_SetConfig+0x138>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d01b      	beq.n	8008e8e <TIM_Base_SetConfig+0xb2>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	4a2f      	ldr	r2, [pc, #188]	; (8008f18 <TIM_Base_SetConfig+0x13c>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d017      	beq.n	8008e8e <TIM_Base_SetConfig+0xb2>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	4a2e      	ldr	r2, [pc, #184]	; (8008f1c <TIM_Base_SetConfig+0x140>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d013      	beq.n	8008e8e <TIM_Base_SetConfig+0xb2>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	4a2d      	ldr	r2, [pc, #180]	; (8008f20 <TIM_Base_SetConfig+0x144>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d00f      	beq.n	8008e8e <TIM_Base_SetConfig+0xb2>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	4a2c      	ldr	r2, [pc, #176]	; (8008f24 <TIM_Base_SetConfig+0x148>)
 8008e72:	4293      	cmp	r3, r2
 8008e74:	d00b      	beq.n	8008e8e <TIM_Base_SetConfig+0xb2>
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	4a2b      	ldr	r2, [pc, #172]	; (8008f28 <TIM_Base_SetConfig+0x14c>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d007      	beq.n	8008e8e <TIM_Base_SetConfig+0xb2>
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	4a2a      	ldr	r2, [pc, #168]	; (8008f2c <TIM_Base_SetConfig+0x150>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d003      	beq.n	8008e8e <TIM_Base_SetConfig+0xb2>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	4a29      	ldr	r2, [pc, #164]	; (8008f30 <TIM_Base_SetConfig+0x154>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d108      	bne.n	8008ea0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	68db      	ldr	r3, [r3, #12]
 8008e9a:	68fa      	ldr	r2, [r7, #12]
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	695b      	ldr	r3, [r3, #20]
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	68fa      	ldr	r2, [r7, #12]
 8008eb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	689a      	ldr	r2, [r3, #8]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008ebc:	683b      	ldr	r3, [r7, #0]
 8008ebe:	681a      	ldr	r2, [r3, #0]
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	4a10      	ldr	r2, [pc, #64]	; (8008f08 <TIM_Base_SetConfig+0x12c>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d003      	beq.n	8008ed4 <TIM_Base_SetConfig+0xf8>
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	4a12      	ldr	r2, [pc, #72]	; (8008f18 <TIM_Base_SetConfig+0x13c>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d103      	bne.n	8008edc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008ed4:	683b      	ldr	r3, [r7, #0]
 8008ed6:	691a      	ldr	r2, [r3, #16]
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2201      	movs	r2, #1
 8008ee0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	691b      	ldr	r3, [r3, #16]
 8008ee6:	f003 0301 	and.w	r3, r3, #1
 8008eea:	2b01      	cmp	r3, #1
 8008eec:	d105      	bne.n	8008efa <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	691b      	ldr	r3, [r3, #16]
 8008ef2:	f023 0201 	bic.w	r2, r3, #1
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	611a      	str	r2, [r3, #16]
  }
}
 8008efa:	bf00      	nop
 8008efc:	3714      	adds	r7, #20
 8008efe:	46bd      	mov	sp, r7
 8008f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f04:	4770      	bx	lr
 8008f06:	bf00      	nop
 8008f08:	40010000 	.word	0x40010000
 8008f0c:	40000400 	.word	0x40000400
 8008f10:	40000800 	.word	0x40000800
 8008f14:	40000c00 	.word	0x40000c00
 8008f18:	40010400 	.word	0x40010400
 8008f1c:	40014000 	.word	0x40014000
 8008f20:	40014400 	.word	0x40014400
 8008f24:	40014800 	.word	0x40014800
 8008f28:	40001800 	.word	0x40001800
 8008f2c:	40001c00 	.word	0x40001c00
 8008f30:	40002000 	.word	0x40002000

08008f34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b087      	sub	sp, #28
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6a1b      	ldr	r3, [r3, #32]
 8008f42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6a1b      	ldr	r3, [r3, #32]
 8008f48:	f023 0201 	bic.w	r2, r3, #1
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	685b      	ldr	r3, [r3, #4]
 8008f54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	699b      	ldr	r3, [r3, #24]
 8008f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f023 0303 	bic.w	r3, r3, #3
 8008f6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	68fa      	ldr	r2, [r7, #12]
 8008f72:	4313      	orrs	r3, r2
 8008f74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008f76:	697b      	ldr	r3, [r7, #20]
 8008f78:	f023 0302 	bic.w	r3, r3, #2
 8008f7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	689b      	ldr	r3, [r3, #8]
 8008f82:	697a      	ldr	r2, [r7, #20]
 8008f84:	4313      	orrs	r3, r2
 8008f86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	4a20      	ldr	r2, [pc, #128]	; (800900c <TIM_OC1_SetConfig+0xd8>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d003      	beq.n	8008f98 <TIM_OC1_SetConfig+0x64>
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	4a1f      	ldr	r2, [pc, #124]	; (8009010 <TIM_OC1_SetConfig+0xdc>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d10c      	bne.n	8008fb2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	f023 0308 	bic.w	r3, r3, #8
 8008f9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008fa0:	683b      	ldr	r3, [r7, #0]
 8008fa2:	68db      	ldr	r3, [r3, #12]
 8008fa4:	697a      	ldr	r2, [r7, #20]
 8008fa6:	4313      	orrs	r3, r2
 8008fa8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	f023 0304 	bic.w	r3, r3, #4
 8008fb0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	4a15      	ldr	r2, [pc, #84]	; (800900c <TIM_OC1_SetConfig+0xd8>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d003      	beq.n	8008fc2 <TIM_OC1_SetConfig+0x8e>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	4a14      	ldr	r2, [pc, #80]	; (8009010 <TIM_OC1_SetConfig+0xdc>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d111      	bne.n	8008fe6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008fc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008fd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	695b      	ldr	r3, [r3, #20]
 8008fd6:	693a      	ldr	r2, [r7, #16]
 8008fd8:	4313      	orrs	r3, r2
 8008fda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008fdc:	683b      	ldr	r3, [r7, #0]
 8008fde:	699b      	ldr	r3, [r3, #24]
 8008fe0:	693a      	ldr	r2, [r7, #16]
 8008fe2:	4313      	orrs	r3, r2
 8008fe4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	693a      	ldr	r2, [r7, #16]
 8008fea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	68fa      	ldr	r2, [r7, #12]
 8008ff0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008ff2:	683b      	ldr	r3, [r7, #0]
 8008ff4:	685a      	ldr	r2, [r3, #4]
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	697a      	ldr	r2, [r7, #20]
 8008ffe:	621a      	str	r2, [r3, #32]
}
 8009000:	bf00      	nop
 8009002:	371c      	adds	r7, #28
 8009004:	46bd      	mov	sp, r7
 8009006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900a:	4770      	bx	lr
 800900c:	40010000 	.word	0x40010000
 8009010:	40010400 	.word	0x40010400

08009014 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009014:	b480      	push	{r7}
 8009016:	b087      	sub	sp, #28
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
 800901c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6a1b      	ldr	r3, [r3, #32]
 8009022:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	6a1b      	ldr	r3, [r3, #32]
 8009028:	f023 0210 	bic.w	r2, r3, #16
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	699b      	ldr	r3, [r3, #24]
 800903a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009042:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800904a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	021b      	lsls	r3, r3, #8
 8009052:	68fa      	ldr	r2, [r7, #12]
 8009054:	4313      	orrs	r3, r2
 8009056:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009058:	697b      	ldr	r3, [r7, #20]
 800905a:	f023 0320 	bic.w	r3, r3, #32
 800905e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	689b      	ldr	r3, [r3, #8]
 8009064:	011b      	lsls	r3, r3, #4
 8009066:	697a      	ldr	r2, [r7, #20]
 8009068:	4313      	orrs	r3, r2
 800906a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	4a22      	ldr	r2, [pc, #136]	; (80090f8 <TIM_OC2_SetConfig+0xe4>)
 8009070:	4293      	cmp	r3, r2
 8009072:	d003      	beq.n	800907c <TIM_OC2_SetConfig+0x68>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	4a21      	ldr	r2, [pc, #132]	; (80090fc <TIM_OC2_SetConfig+0xe8>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d10d      	bne.n	8009098 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800907c:	697b      	ldr	r3, [r7, #20]
 800907e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009082:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	68db      	ldr	r3, [r3, #12]
 8009088:	011b      	lsls	r3, r3, #4
 800908a:	697a      	ldr	r2, [r7, #20]
 800908c:	4313      	orrs	r3, r2
 800908e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009090:	697b      	ldr	r3, [r7, #20]
 8009092:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009096:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	4a17      	ldr	r2, [pc, #92]	; (80090f8 <TIM_OC2_SetConfig+0xe4>)
 800909c:	4293      	cmp	r3, r2
 800909e:	d003      	beq.n	80090a8 <TIM_OC2_SetConfig+0x94>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	4a16      	ldr	r2, [pc, #88]	; (80090fc <TIM_OC2_SetConfig+0xe8>)
 80090a4:	4293      	cmp	r3, r2
 80090a6:	d113      	bne.n	80090d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80090a8:	693b      	ldr	r3, [r7, #16]
 80090aa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80090ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80090b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	695b      	ldr	r3, [r3, #20]
 80090bc:	009b      	lsls	r3, r3, #2
 80090be:	693a      	ldr	r2, [r7, #16]
 80090c0:	4313      	orrs	r3, r2
 80090c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	699b      	ldr	r3, [r3, #24]
 80090c8:	009b      	lsls	r3, r3, #2
 80090ca:	693a      	ldr	r2, [r7, #16]
 80090cc:	4313      	orrs	r3, r2
 80090ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	693a      	ldr	r2, [r7, #16]
 80090d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	68fa      	ldr	r2, [r7, #12]
 80090da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80090dc:	683b      	ldr	r3, [r7, #0]
 80090de:	685a      	ldr	r2, [r3, #4]
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	697a      	ldr	r2, [r7, #20]
 80090e8:	621a      	str	r2, [r3, #32]
}
 80090ea:	bf00      	nop
 80090ec:	371c      	adds	r7, #28
 80090ee:	46bd      	mov	sp, r7
 80090f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f4:	4770      	bx	lr
 80090f6:	bf00      	nop
 80090f8:	40010000 	.word	0x40010000
 80090fc:	40010400 	.word	0x40010400

08009100 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009100:	b480      	push	{r7}
 8009102:	b087      	sub	sp, #28
 8009104:	af00      	add	r7, sp, #0
 8009106:	6078      	str	r0, [r7, #4]
 8009108:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6a1b      	ldr	r3, [r3, #32]
 800910e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	6a1b      	ldr	r3, [r3, #32]
 8009114:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	685b      	ldr	r3, [r3, #4]
 8009120:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	69db      	ldr	r3, [r3, #28]
 8009126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800912e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	f023 0303 	bic.w	r3, r3, #3
 8009136:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	68fa      	ldr	r2, [r7, #12]
 800913e:	4313      	orrs	r3, r2
 8009140:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009148:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	689b      	ldr	r3, [r3, #8]
 800914e:	021b      	lsls	r3, r3, #8
 8009150:	697a      	ldr	r2, [r7, #20]
 8009152:	4313      	orrs	r3, r2
 8009154:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	4a21      	ldr	r2, [pc, #132]	; (80091e0 <TIM_OC3_SetConfig+0xe0>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d003      	beq.n	8009166 <TIM_OC3_SetConfig+0x66>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	4a20      	ldr	r2, [pc, #128]	; (80091e4 <TIM_OC3_SetConfig+0xe4>)
 8009162:	4293      	cmp	r3, r2
 8009164:	d10d      	bne.n	8009182 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009166:	697b      	ldr	r3, [r7, #20]
 8009168:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800916c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800916e:	683b      	ldr	r3, [r7, #0]
 8009170:	68db      	ldr	r3, [r3, #12]
 8009172:	021b      	lsls	r3, r3, #8
 8009174:	697a      	ldr	r2, [r7, #20]
 8009176:	4313      	orrs	r3, r2
 8009178:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009180:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	4a16      	ldr	r2, [pc, #88]	; (80091e0 <TIM_OC3_SetConfig+0xe0>)
 8009186:	4293      	cmp	r3, r2
 8009188:	d003      	beq.n	8009192 <TIM_OC3_SetConfig+0x92>
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	4a15      	ldr	r2, [pc, #84]	; (80091e4 <TIM_OC3_SetConfig+0xe4>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d113      	bne.n	80091ba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009198:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80091a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	695b      	ldr	r3, [r3, #20]
 80091a6:	011b      	lsls	r3, r3, #4
 80091a8:	693a      	ldr	r2, [r7, #16]
 80091aa:	4313      	orrs	r3, r2
 80091ac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80091ae:	683b      	ldr	r3, [r7, #0]
 80091b0:	699b      	ldr	r3, [r3, #24]
 80091b2:	011b      	lsls	r3, r3, #4
 80091b4:	693a      	ldr	r2, [r7, #16]
 80091b6:	4313      	orrs	r3, r2
 80091b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	693a      	ldr	r2, [r7, #16]
 80091be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	68fa      	ldr	r2, [r7, #12]
 80091c4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	685a      	ldr	r2, [r3, #4]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	697a      	ldr	r2, [r7, #20]
 80091d2:	621a      	str	r2, [r3, #32]
}
 80091d4:	bf00      	nop
 80091d6:	371c      	adds	r7, #28
 80091d8:	46bd      	mov	sp, r7
 80091da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091de:	4770      	bx	lr
 80091e0:	40010000 	.word	0x40010000
 80091e4:	40010400 	.word	0x40010400

080091e8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b087      	sub	sp, #28
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	6078      	str	r0, [r7, #4]
 80091f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6a1b      	ldr	r3, [r3, #32]
 80091f6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6a1b      	ldr	r3, [r3, #32]
 80091fc:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	685b      	ldr	r3, [r3, #4]
 8009208:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	69db      	ldr	r3, [r3, #28]
 800920e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009216:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800921e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	021b      	lsls	r3, r3, #8
 8009226:	68fa      	ldr	r2, [r7, #12]
 8009228:	4313      	orrs	r3, r2
 800922a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800922c:	693b      	ldr	r3, [r7, #16]
 800922e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009232:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	689b      	ldr	r3, [r3, #8]
 8009238:	031b      	lsls	r3, r3, #12
 800923a:	693a      	ldr	r2, [r7, #16]
 800923c:	4313      	orrs	r3, r2
 800923e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	4a12      	ldr	r2, [pc, #72]	; (800928c <TIM_OC4_SetConfig+0xa4>)
 8009244:	4293      	cmp	r3, r2
 8009246:	d003      	beq.n	8009250 <TIM_OC4_SetConfig+0x68>
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	4a11      	ldr	r2, [pc, #68]	; (8009290 <TIM_OC4_SetConfig+0xa8>)
 800924c:	4293      	cmp	r3, r2
 800924e:	d109      	bne.n	8009264 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009256:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009258:	683b      	ldr	r3, [r7, #0]
 800925a:	695b      	ldr	r3, [r3, #20]
 800925c:	019b      	lsls	r3, r3, #6
 800925e:	697a      	ldr	r2, [r7, #20]
 8009260:	4313      	orrs	r3, r2
 8009262:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	697a      	ldr	r2, [r7, #20]
 8009268:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	68fa      	ldr	r2, [r7, #12]
 800926e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	685a      	ldr	r2, [r3, #4]
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	693a      	ldr	r2, [r7, #16]
 800927c:	621a      	str	r2, [r3, #32]
}
 800927e:	bf00      	nop
 8009280:	371c      	adds	r7, #28
 8009282:	46bd      	mov	sp, r7
 8009284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009288:	4770      	bx	lr
 800928a:	bf00      	nop
 800928c:	40010000 	.word	0x40010000
 8009290:	40010400 	.word	0x40010400

08009294 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009294:	b480      	push	{r7}
 8009296:	b087      	sub	sp, #28
 8009298:	af00      	add	r7, sp, #0
 800929a:	60f8      	str	r0, [r7, #12]
 800929c:	60b9      	str	r1, [r7, #8]
 800929e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	f003 031f 	and.w	r3, r3, #31
 80092a6:	2201      	movs	r2, #1
 80092a8:	fa02 f303 	lsl.w	r3, r2, r3
 80092ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	6a1a      	ldr	r2, [r3, #32]
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	43db      	mvns	r3, r3
 80092b6:	401a      	ands	r2, r3
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	6a1a      	ldr	r2, [r3, #32]
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	f003 031f 	and.w	r3, r3, #31
 80092c6:	6879      	ldr	r1, [r7, #4]
 80092c8:	fa01 f303 	lsl.w	r3, r1, r3
 80092cc:	431a      	orrs	r2, r3
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	621a      	str	r2, [r3, #32]
}
 80092d2:	bf00      	nop
 80092d4:	371c      	adds	r7, #28
 80092d6:	46bd      	mov	sp, r7
 80092d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092dc:	4770      	bx	lr
	...

080092e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80092e0:	b480      	push	{r7}
 80092e2:	b085      	sub	sp, #20
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
 80092e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092f0:	2b01      	cmp	r3, #1
 80092f2:	d101      	bne.n	80092f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80092f4:	2302      	movs	r3, #2
 80092f6:	e05a      	b.n	80093ae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2201      	movs	r2, #1
 80092fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2202      	movs	r2, #2
 8009304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	685b      	ldr	r3, [r3, #4]
 800930e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	689b      	ldr	r3, [r3, #8]
 8009316:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800931e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	68fa      	ldr	r2, [r7, #12]
 8009326:	4313      	orrs	r3, r2
 8009328:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	68fa      	ldr	r2, [r7, #12]
 8009330:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	4a21      	ldr	r2, [pc, #132]	; (80093bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009338:	4293      	cmp	r3, r2
 800933a:	d022      	beq.n	8009382 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009344:	d01d      	beq.n	8009382 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	4a1d      	ldr	r2, [pc, #116]	; (80093c0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800934c:	4293      	cmp	r3, r2
 800934e:	d018      	beq.n	8009382 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	4a1b      	ldr	r2, [pc, #108]	; (80093c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009356:	4293      	cmp	r3, r2
 8009358:	d013      	beq.n	8009382 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4a1a      	ldr	r2, [pc, #104]	; (80093c8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d00e      	beq.n	8009382 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	4a18      	ldr	r2, [pc, #96]	; (80093cc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800936a:	4293      	cmp	r3, r2
 800936c:	d009      	beq.n	8009382 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	4a17      	ldr	r2, [pc, #92]	; (80093d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009374:	4293      	cmp	r3, r2
 8009376:	d004      	beq.n	8009382 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4a15      	ldr	r2, [pc, #84]	; (80093d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800937e:	4293      	cmp	r3, r2
 8009380:	d10c      	bne.n	800939c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009382:	68bb      	ldr	r3, [r7, #8]
 8009384:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009388:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	68ba      	ldr	r2, [r7, #8]
 8009390:	4313      	orrs	r3, r2
 8009392:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	68ba      	ldr	r2, [r7, #8]
 800939a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2201      	movs	r2, #1
 80093a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2200      	movs	r2, #0
 80093a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80093ac:	2300      	movs	r3, #0
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3714      	adds	r7, #20
 80093b2:	46bd      	mov	sp, r7
 80093b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b8:	4770      	bx	lr
 80093ba:	bf00      	nop
 80093bc:	40010000 	.word	0x40010000
 80093c0:	40000400 	.word	0x40000400
 80093c4:	40000800 	.word	0x40000800
 80093c8:	40000c00 	.word	0x40000c00
 80093cc:	40010400 	.word	0x40010400
 80093d0:	40014000 	.word	0x40014000
 80093d4:	40001800 	.word	0x40001800

080093d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80093d8:	b480      	push	{r7}
 80093da:	b083      	sub	sp, #12
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80093e0:	bf00      	nop
 80093e2:	370c      	adds	r7, #12
 80093e4:	46bd      	mov	sp, r7
 80093e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ea:	4770      	bx	lr

080093ec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80093ec:	b480      	push	{r7}
 80093ee:	b083      	sub	sp, #12
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80093f4:	bf00      	nop
 80093f6:	370c      	adds	r7, #12
 80093f8:	46bd      	mov	sp, r7
 80093fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fe:	4770      	bx	lr

08009400 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b082      	sub	sp, #8
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d101      	bne.n	8009412 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800940e:	2301      	movs	r3, #1
 8009410:	e042      	b.n	8009498 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009418:	b2db      	uxtb	r3, r3
 800941a:	2b00      	cmp	r3, #0
 800941c:	d106      	bne.n	800942c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2200      	movs	r2, #0
 8009422:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f7fa fa18 	bl	800385c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2224      	movs	r2, #36	; 0x24
 8009430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	68da      	ldr	r2, [r3, #12]
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009442:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f000 fcdb 	bl	8009e00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	691a      	ldr	r2, [r3, #16]
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009458:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	695a      	ldr	r2, [r3, #20]
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009468:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	68da      	ldr	r2, [r3, #12]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009478:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2200      	movs	r2, #0
 800947e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	2220      	movs	r2, #32
 8009484:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2220      	movs	r2, #32
 800948c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2200      	movs	r2, #0
 8009494:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8009496:	2300      	movs	r3, #0
}
 8009498:	4618      	mov	r0, r3
 800949a:	3708      	adds	r7, #8
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}

080094a0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b084      	sub	sp, #16
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	60f8      	str	r0, [r7, #12]
 80094a8:	60b9      	str	r1, [r7, #8]
 80094aa:	4613      	mov	r3, r2
 80094ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80094b4:	b2db      	uxtb	r3, r3
 80094b6:	2b20      	cmp	r3, #32
 80094b8:	d112      	bne.n	80094e0 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d002      	beq.n	80094c6 <HAL_UART_Receive_IT+0x26>
 80094c0:	88fb      	ldrh	r3, [r7, #6]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d101      	bne.n	80094ca <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80094c6:	2301      	movs	r3, #1
 80094c8:	e00b      	b.n	80094e2 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	2200      	movs	r2, #0
 80094ce:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80094d0:	88fb      	ldrh	r3, [r7, #6]
 80094d2:	461a      	mov	r2, r3
 80094d4:	68b9      	ldr	r1, [r7, #8]
 80094d6:	68f8      	ldr	r0, [r7, #12]
 80094d8:	f000 faba 	bl	8009a50 <UART_Start_Receive_IT>
 80094dc:	4603      	mov	r3, r0
 80094de:	e000      	b.n	80094e2 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80094e0:	2302      	movs	r3, #2
  }
}
 80094e2:	4618      	mov	r0, r3
 80094e4:	3710      	adds	r7, #16
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}
	...

080094ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b0ba      	sub	sp, #232	; 0xe8
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	68db      	ldr	r3, [r3, #12]
 8009504:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	695b      	ldr	r3, [r3, #20]
 800950e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009512:	2300      	movs	r3, #0
 8009514:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009518:	2300      	movs	r3, #0
 800951a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800951e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009522:	f003 030f 	and.w	r3, r3, #15
 8009526:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800952a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800952e:	2b00      	cmp	r3, #0
 8009530:	d10f      	bne.n	8009552 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009532:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009536:	f003 0320 	and.w	r3, r3, #32
 800953a:	2b00      	cmp	r3, #0
 800953c:	d009      	beq.n	8009552 <HAL_UART_IRQHandler+0x66>
 800953e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009542:	f003 0320 	and.w	r3, r3, #32
 8009546:	2b00      	cmp	r3, #0
 8009548:	d003      	beq.n	8009552 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800954a:	6878      	ldr	r0, [r7, #4]
 800954c:	f000 fb99 	bl	8009c82 <UART_Receive_IT>
      return;
 8009550:	e25b      	b.n	8009a0a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009552:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009556:	2b00      	cmp	r3, #0
 8009558:	f000 80de 	beq.w	8009718 <HAL_UART_IRQHandler+0x22c>
 800955c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009560:	f003 0301 	and.w	r3, r3, #1
 8009564:	2b00      	cmp	r3, #0
 8009566:	d106      	bne.n	8009576 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800956c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009570:	2b00      	cmp	r3, #0
 8009572:	f000 80d1 	beq.w	8009718 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800957a:	f003 0301 	and.w	r3, r3, #1
 800957e:	2b00      	cmp	r3, #0
 8009580:	d00b      	beq.n	800959a <HAL_UART_IRQHandler+0xae>
 8009582:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800958a:	2b00      	cmp	r3, #0
 800958c:	d005      	beq.n	800959a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009592:	f043 0201 	orr.w	r2, r3, #1
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800959a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800959e:	f003 0304 	and.w	r3, r3, #4
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d00b      	beq.n	80095be <HAL_UART_IRQHandler+0xd2>
 80095a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095aa:	f003 0301 	and.w	r3, r3, #1
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d005      	beq.n	80095be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095b6:	f043 0202 	orr.w	r2, r3, #2
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80095be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095c2:	f003 0302 	and.w	r3, r3, #2
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d00b      	beq.n	80095e2 <HAL_UART_IRQHandler+0xf6>
 80095ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095ce:	f003 0301 	and.w	r3, r3, #1
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d005      	beq.n	80095e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095da:	f043 0204 	orr.w	r2, r3, #4
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80095e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095e6:	f003 0308 	and.w	r3, r3, #8
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d011      	beq.n	8009612 <HAL_UART_IRQHandler+0x126>
 80095ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095f2:	f003 0320 	and.w	r3, r3, #32
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d105      	bne.n	8009606 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80095fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095fe:	f003 0301 	and.w	r3, r3, #1
 8009602:	2b00      	cmp	r3, #0
 8009604:	d005      	beq.n	8009612 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800960a:	f043 0208 	orr.w	r2, r3, #8
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009616:	2b00      	cmp	r3, #0
 8009618:	f000 81f2 	beq.w	8009a00 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800961c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009620:	f003 0320 	and.w	r3, r3, #32
 8009624:	2b00      	cmp	r3, #0
 8009626:	d008      	beq.n	800963a <HAL_UART_IRQHandler+0x14e>
 8009628:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800962c:	f003 0320 	and.w	r3, r3, #32
 8009630:	2b00      	cmp	r3, #0
 8009632:	d002      	beq.n	800963a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f000 fb24 	bl	8009c82 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	695b      	ldr	r3, [r3, #20]
 8009640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009644:	2b40      	cmp	r3, #64	; 0x40
 8009646:	bf0c      	ite	eq
 8009648:	2301      	moveq	r3, #1
 800964a:	2300      	movne	r3, #0
 800964c:	b2db      	uxtb	r3, r3
 800964e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009656:	f003 0308 	and.w	r3, r3, #8
 800965a:	2b00      	cmp	r3, #0
 800965c:	d103      	bne.n	8009666 <HAL_UART_IRQHandler+0x17a>
 800965e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009662:	2b00      	cmp	r3, #0
 8009664:	d04f      	beq.n	8009706 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f000 fa2c 	bl	8009ac4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	695b      	ldr	r3, [r3, #20]
 8009672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009676:	2b40      	cmp	r3, #64	; 0x40
 8009678:	d141      	bne.n	80096fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	3314      	adds	r3, #20
 8009680:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009684:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009688:	e853 3f00 	ldrex	r3, [r3]
 800968c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009690:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009694:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009698:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	3314      	adds	r3, #20
 80096a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80096a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80096aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80096b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80096b6:	e841 2300 	strex	r3, r2, [r1]
 80096ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80096be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d1d9      	bne.n	800967a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d013      	beq.n	80096f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096d2:	4a7e      	ldr	r2, [pc, #504]	; (80098cc <HAL_UART_IRQHandler+0x3e0>)
 80096d4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096da:	4618      	mov	r0, r3
 80096dc:	f7fb f8de 	bl	800489c <HAL_DMA_Abort_IT>
 80096e0:	4603      	mov	r3, r0
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d016      	beq.n	8009714 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80096ec:	687a      	ldr	r2, [r7, #4]
 80096ee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80096f0:	4610      	mov	r0, r2
 80096f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096f4:	e00e      	b.n	8009714 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f000 f994 	bl	8009a24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096fc:	e00a      	b.n	8009714 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80096fe:	6878      	ldr	r0, [r7, #4]
 8009700:	f000 f990 	bl	8009a24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009704:	e006      	b.n	8009714 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009706:	6878      	ldr	r0, [r7, #4]
 8009708:	f000 f98c 	bl	8009a24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2200      	movs	r2, #0
 8009710:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8009712:	e175      	b.n	8009a00 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009714:	bf00      	nop
    return;
 8009716:	e173      	b.n	8009a00 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800971c:	2b01      	cmp	r3, #1
 800971e:	f040 814f 	bne.w	80099c0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009722:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009726:	f003 0310 	and.w	r3, r3, #16
 800972a:	2b00      	cmp	r3, #0
 800972c:	f000 8148 	beq.w	80099c0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009730:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009734:	f003 0310 	and.w	r3, r3, #16
 8009738:	2b00      	cmp	r3, #0
 800973a:	f000 8141 	beq.w	80099c0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800973e:	2300      	movs	r3, #0
 8009740:	60bb      	str	r3, [r7, #8]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	60bb      	str	r3, [r7, #8]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	685b      	ldr	r3, [r3, #4]
 8009750:	60bb      	str	r3, [r7, #8]
 8009752:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	695b      	ldr	r3, [r3, #20]
 800975a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800975e:	2b40      	cmp	r3, #64	; 0x40
 8009760:	f040 80b6 	bne.w	80098d0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	685b      	ldr	r3, [r3, #4]
 800976c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009770:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009774:	2b00      	cmp	r3, #0
 8009776:	f000 8145 	beq.w	8009a04 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800977e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009782:	429a      	cmp	r2, r3
 8009784:	f080 813e 	bcs.w	8009a04 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800978e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009794:	69db      	ldr	r3, [r3, #28]
 8009796:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800979a:	f000 8088 	beq.w	80098ae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	330c      	adds	r3, #12
 80097a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80097ac:	e853 3f00 	ldrex	r3, [r3]
 80097b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80097b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80097b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80097bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	330c      	adds	r3, #12
 80097c6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80097ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80097ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80097d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80097da:	e841 2300 	strex	r3, r2, [r1]
 80097de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80097e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d1d9      	bne.n	800979e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	3314      	adds	r3, #20
 80097f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80097f4:	e853 3f00 	ldrex	r3, [r3]
 80097f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80097fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80097fc:	f023 0301 	bic.w	r3, r3, #1
 8009800:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	3314      	adds	r3, #20
 800980a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800980e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009812:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009814:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009816:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800981a:	e841 2300 	strex	r3, r2, [r1]
 800981e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009820:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009822:	2b00      	cmp	r3, #0
 8009824:	d1e1      	bne.n	80097ea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	3314      	adds	r3, #20
 800982c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800982e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009830:	e853 3f00 	ldrex	r3, [r3]
 8009834:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009836:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009838:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800983c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	3314      	adds	r3, #20
 8009846:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800984a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800984c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800984e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009850:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009852:	e841 2300 	strex	r3, r2, [r1]
 8009856:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009858:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800985a:	2b00      	cmp	r3, #0
 800985c:	d1e3      	bne.n	8009826 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2220      	movs	r2, #32
 8009862:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2200      	movs	r2, #0
 800986a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	330c      	adds	r3, #12
 8009872:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009874:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009876:	e853 3f00 	ldrex	r3, [r3]
 800987a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800987c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800987e:	f023 0310 	bic.w	r3, r3, #16
 8009882:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	330c      	adds	r3, #12
 800988c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8009890:	65ba      	str	r2, [r7, #88]	; 0x58
 8009892:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009894:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009896:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009898:	e841 2300 	strex	r3, r2, [r1]
 800989c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800989e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d1e3      	bne.n	800986c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098a8:	4618      	mov	r0, r3
 80098aa:	f7fa ff87 	bl	80047bc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2202      	movs	r2, #2
 80098b2:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80098bc:	b29b      	uxth	r3, r3
 80098be:	1ad3      	subs	r3, r2, r3
 80098c0:	b29b      	uxth	r3, r3
 80098c2:	4619      	mov	r1, r3
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f000 f8b7 	bl	8009a38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80098ca:	e09b      	b.n	8009a04 <HAL_UART_IRQHandler+0x518>
 80098cc:	08009b8b 	.word	0x08009b8b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80098d8:	b29b      	uxth	r3, r3
 80098da:	1ad3      	subs	r3, r2, r3
 80098dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80098e4:	b29b      	uxth	r3, r3
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	f000 808e 	beq.w	8009a08 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80098ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	f000 8089 	beq.w	8009a08 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	330c      	adds	r3, #12
 80098fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009900:	e853 3f00 	ldrex	r3, [r3]
 8009904:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009908:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800990c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	330c      	adds	r3, #12
 8009916:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800991a:	647a      	str	r2, [r7, #68]	; 0x44
 800991c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800991e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009920:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009922:	e841 2300 	strex	r3, r2, [r1]
 8009926:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800992a:	2b00      	cmp	r3, #0
 800992c:	d1e3      	bne.n	80098f6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	3314      	adds	r3, #20
 8009934:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009938:	e853 3f00 	ldrex	r3, [r3]
 800993c:	623b      	str	r3, [r7, #32]
   return(result);
 800993e:	6a3b      	ldr	r3, [r7, #32]
 8009940:	f023 0301 	bic.w	r3, r3, #1
 8009944:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	3314      	adds	r3, #20
 800994e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009952:	633a      	str	r2, [r7, #48]	; 0x30
 8009954:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009956:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009958:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800995a:	e841 2300 	strex	r3, r2, [r1]
 800995e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009962:	2b00      	cmp	r3, #0
 8009964:	d1e3      	bne.n	800992e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	2220      	movs	r2, #32
 800996a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2200      	movs	r2, #0
 8009972:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	330c      	adds	r3, #12
 800997a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	e853 3f00 	ldrex	r3, [r3]
 8009982:	60fb      	str	r3, [r7, #12]
   return(result);
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	f023 0310 	bic.w	r3, r3, #16
 800998a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	330c      	adds	r3, #12
 8009994:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009998:	61fa      	str	r2, [r7, #28]
 800999a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800999c:	69b9      	ldr	r1, [r7, #24]
 800999e:	69fa      	ldr	r2, [r7, #28]
 80099a0:	e841 2300 	strex	r3, r2, [r1]
 80099a4:	617b      	str	r3, [r7, #20]
   return(result);
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d1e3      	bne.n	8009974 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2202      	movs	r2, #2
 80099b0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80099b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80099b6:	4619      	mov	r1, r3
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f000 f83d 	bl	8009a38 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80099be:	e023      	b.n	8009a08 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80099c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d009      	beq.n	80099e0 <HAL_UART_IRQHandler+0x4f4>
 80099cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d003      	beq.n	80099e0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80099d8:	6878      	ldr	r0, [r7, #4]
 80099da:	f000 f8ea 	bl	8009bb2 <UART_Transmit_IT>
    return;
 80099de:	e014      	b.n	8009a0a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80099e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80099e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d00e      	beq.n	8009a0a <HAL_UART_IRQHandler+0x51e>
 80099ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80099f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d008      	beq.n	8009a0a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f000 f92a 	bl	8009c52 <UART_EndTransmit_IT>
    return;
 80099fe:	e004      	b.n	8009a0a <HAL_UART_IRQHandler+0x51e>
    return;
 8009a00:	bf00      	nop
 8009a02:	e002      	b.n	8009a0a <HAL_UART_IRQHandler+0x51e>
      return;
 8009a04:	bf00      	nop
 8009a06:	e000      	b.n	8009a0a <HAL_UART_IRQHandler+0x51e>
      return;
 8009a08:	bf00      	nop
  }
}
 8009a0a:	37e8      	adds	r7, #232	; 0xe8
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}

08009a10 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009a10:	b480      	push	{r7}
 8009a12:	b083      	sub	sp, #12
 8009a14:	af00      	add	r7, sp, #0
 8009a16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009a18:	bf00      	nop
 8009a1a:	370c      	adds	r7, #12
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a22:	4770      	bx	lr

08009a24 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009a24:	b480      	push	{r7}
 8009a26:	b083      	sub	sp, #12
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009a2c:	bf00      	nop
 8009a2e:	370c      	adds	r7, #12
 8009a30:	46bd      	mov	sp, r7
 8009a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a36:	4770      	bx	lr

08009a38 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b083      	sub	sp, #12
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
 8009a40:	460b      	mov	r3, r1
 8009a42:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009a44:	bf00      	nop
 8009a46:	370c      	adds	r7, #12
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4e:	4770      	bx	lr

08009a50 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009a50:	b480      	push	{r7}
 8009a52:	b085      	sub	sp, #20
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	60f8      	str	r0, [r7, #12]
 8009a58:	60b9      	str	r1, [r7, #8]
 8009a5a:	4613      	mov	r3, r2
 8009a5c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	68ba      	ldr	r2, [r7, #8]
 8009a62:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	88fa      	ldrh	r2, [r7, #6]
 8009a68:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	88fa      	ldrh	r2, [r7, #6]
 8009a6e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	2200      	movs	r2, #0
 8009a74:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	2222      	movs	r2, #34	; 0x22
 8009a7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	691b      	ldr	r3, [r3, #16]
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d007      	beq.n	8009a96 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	68da      	ldr	r2, [r3, #12]
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009a94:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009a96:	68fb      	ldr	r3, [r7, #12]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	695a      	ldr	r2, [r3, #20]
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f042 0201 	orr.w	r2, r2, #1
 8009aa4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	68da      	ldr	r2, [r3, #12]
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f042 0220 	orr.w	r2, r2, #32
 8009ab4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009ab6:	2300      	movs	r3, #0
}
 8009ab8:	4618      	mov	r0, r3
 8009aba:	3714      	adds	r7, #20
 8009abc:	46bd      	mov	sp, r7
 8009abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac2:	4770      	bx	lr

08009ac4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b095      	sub	sp, #84	; 0x54
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	330c      	adds	r3, #12
 8009ad2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009ad6:	e853 3f00 	ldrex	r3, [r3]
 8009ada:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ade:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	330c      	adds	r3, #12
 8009aea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009aec:	643a      	str	r2, [r7, #64]	; 0x40
 8009aee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009af0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009af2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009af4:	e841 2300 	strex	r3, r2, [r1]
 8009af8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d1e5      	bne.n	8009acc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	3314      	adds	r3, #20
 8009b06:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b08:	6a3b      	ldr	r3, [r7, #32]
 8009b0a:	e853 3f00 	ldrex	r3, [r3]
 8009b0e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b10:	69fb      	ldr	r3, [r7, #28]
 8009b12:	f023 0301 	bic.w	r3, r3, #1
 8009b16:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	3314      	adds	r3, #20
 8009b1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009b20:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009b22:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b24:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009b26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009b28:	e841 2300 	strex	r3, r2, [r1]
 8009b2c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d1e5      	bne.n	8009b00 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b38:	2b01      	cmp	r3, #1
 8009b3a:	d119      	bne.n	8009b70 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	330c      	adds	r3, #12
 8009b42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	e853 3f00 	ldrex	r3, [r3]
 8009b4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	f023 0310 	bic.w	r3, r3, #16
 8009b52:	647b      	str	r3, [r7, #68]	; 0x44
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	330c      	adds	r3, #12
 8009b5a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b5c:	61ba      	str	r2, [r7, #24]
 8009b5e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b60:	6979      	ldr	r1, [r7, #20]
 8009b62:	69ba      	ldr	r2, [r7, #24]
 8009b64:	e841 2300 	strex	r3, r2, [r1]
 8009b68:	613b      	str	r3, [r7, #16]
   return(result);
 8009b6a:	693b      	ldr	r3, [r7, #16]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d1e5      	bne.n	8009b3c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2220      	movs	r2, #32
 8009b74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8009b7e:	bf00      	nop
 8009b80:	3754      	adds	r7, #84	; 0x54
 8009b82:	46bd      	mov	sp, r7
 8009b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b88:	4770      	bx	lr

08009b8a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009b8a:	b580      	push	{r7, lr}
 8009b8c:	b084      	sub	sp, #16
 8009b8e:	af00      	add	r7, sp, #0
 8009b90:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b96:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	2200      	movs	r2, #0
 8009ba2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009ba4:	68f8      	ldr	r0, [r7, #12]
 8009ba6:	f7ff ff3d 	bl	8009a24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009baa:	bf00      	nop
 8009bac:	3710      	adds	r7, #16
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	bd80      	pop	{r7, pc}

08009bb2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009bb2:	b480      	push	{r7}
 8009bb4:	b085      	sub	sp, #20
 8009bb6:	af00      	add	r7, sp, #0
 8009bb8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009bc0:	b2db      	uxtb	r3, r3
 8009bc2:	2b21      	cmp	r3, #33	; 0x21
 8009bc4:	d13e      	bne.n	8009c44 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	689b      	ldr	r3, [r3, #8]
 8009bca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bce:	d114      	bne.n	8009bfa <UART_Transmit_IT+0x48>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	691b      	ldr	r3, [r3, #16]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d110      	bne.n	8009bfa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6a1b      	ldr	r3, [r3, #32]
 8009bdc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	881b      	ldrh	r3, [r3, #0]
 8009be2:	461a      	mov	r2, r3
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009bec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	6a1b      	ldr	r3, [r3, #32]
 8009bf2:	1c9a      	adds	r2, r3, #2
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	621a      	str	r2, [r3, #32]
 8009bf8:	e008      	b.n	8009c0c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	6a1b      	ldr	r3, [r3, #32]
 8009bfe:	1c59      	adds	r1, r3, #1
 8009c00:	687a      	ldr	r2, [r7, #4]
 8009c02:	6211      	str	r1, [r2, #32]
 8009c04:	781a      	ldrb	r2, [r3, #0]
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009c10:	b29b      	uxth	r3, r3
 8009c12:	3b01      	subs	r3, #1
 8009c14:	b29b      	uxth	r3, r3
 8009c16:	687a      	ldr	r2, [r7, #4]
 8009c18:	4619      	mov	r1, r3
 8009c1a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d10f      	bne.n	8009c40 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	68da      	ldr	r2, [r3, #12]
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009c2e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	68da      	ldr	r2, [r3, #12]
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009c3e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009c40:	2300      	movs	r3, #0
 8009c42:	e000      	b.n	8009c46 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009c44:	2302      	movs	r3, #2
  }
}
 8009c46:	4618      	mov	r0, r3
 8009c48:	3714      	adds	r7, #20
 8009c4a:	46bd      	mov	sp, r7
 8009c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c50:	4770      	bx	lr

08009c52 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009c52:	b580      	push	{r7, lr}
 8009c54:	b082      	sub	sp, #8
 8009c56:	af00      	add	r7, sp, #0
 8009c58:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	68da      	ldr	r2, [r3, #12]
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c68:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2220      	movs	r2, #32
 8009c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f7ff fecc 	bl	8009a10 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009c78:	2300      	movs	r3, #0
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3708      	adds	r7, #8
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}

08009c82 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009c82:	b580      	push	{r7, lr}
 8009c84:	b08c      	sub	sp, #48	; 0x30
 8009c86:	af00      	add	r7, sp, #0
 8009c88:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009c90:	b2db      	uxtb	r3, r3
 8009c92:	2b22      	cmp	r3, #34	; 0x22
 8009c94:	f040 80ae 	bne.w	8009df4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	689b      	ldr	r3, [r3, #8]
 8009c9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ca0:	d117      	bne.n	8009cd2 <UART_Receive_IT+0x50>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	691b      	ldr	r3, [r3, #16]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d113      	bne.n	8009cd2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009caa:	2300      	movs	r3, #0
 8009cac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cb2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	685b      	ldr	r3, [r3, #4]
 8009cba:	b29b      	uxth	r3, r3
 8009cbc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009cc0:	b29a      	uxth	r2, r3
 8009cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cc4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cca:	1c9a      	adds	r2, r3, #2
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	629a      	str	r2, [r3, #40]	; 0x28
 8009cd0:	e026      	b.n	8009d20 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cd6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	689b      	ldr	r3, [r3, #8]
 8009ce0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ce4:	d007      	beq.n	8009cf6 <UART_Receive_IT+0x74>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	689b      	ldr	r3, [r3, #8]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	d10a      	bne.n	8009d04 <UART_Receive_IT+0x82>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	691b      	ldr	r3, [r3, #16]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d106      	bne.n	8009d04 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	685b      	ldr	r3, [r3, #4]
 8009cfc:	b2da      	uxtb	r2, r3
 8009cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d00:	701a      	strb	r2, [r3, #0]
 8009d02:	e008      	b.n	8009d16 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	685b      	ldr	r3, [r3, #4]
 8009d0a:	b2db      	uxtb	r3, r3
 8009d0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009d10:	b2da      	uxtb	r2, r3
 8009d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d14:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d1a:	1c5a      	adds	r2, r3, #1
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009d24:	b29b      	uxth	r3, r3
 8009d26:	3b01      	subs	r3, #1
 8009d28:	b29b      	uxth	r3, r3
 8009d2a:	687a      	ldr	r2, [r7, #4]
 8009d2c:	4619      	mov	r1, r3
 8009d2e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d15d      	bne.n	8009df0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	68da      	ldr	r2, [r3, #12]
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f022 0220 	bic.w	r2, r2, #32
 8009d42:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	68da      	ldr	r2, [r3, #12]
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009d52:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	681b      	ldr	r3, [r3, #0]
 8009d58:	695a      	ldr	r2, [r3, #20]
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f022 0201 	bic.w	r2, r2, #1
 8009d62:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	2220      	movs	r2, #32
 8009d68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2200      	movs	r2, #0
 8009d70:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d76:	2b01      	cmp	r3, #1
 8009d78:	d135      	bne.n	8009de6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	330c      	adds	r3, #12
 8009d86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	e853 3f00 	ldrex	r3, [r3]
 8009d8e:	613b      	str	r3, [r7, #16]
   return(result);
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	f023 0310 	bic.w	r3, r3, #16
 8009d96:	627b      	str	r3, [r7, #36]	; 0x24
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	330c      	adds	r3, #12
 8009d9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009da0:	623a      	str	r2, [r7, #32]
 8009da2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009da4:	69f9      	ldr	r1, [r7, #28]
 8009da6:	6a3a      	ldr	r2, [r7, #32]
 8009da8:	e841 2300 	strex	r3, r2, [r1]
 8009dac:	61bb      	str	r3, [r7, #24]
   return(result);
 8009dae:	69bb      	ldr	r3, [r7, #24]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d1e5      	bne.n	8009d80 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f003 0310 	and.w	r3, r3, #16
 8009dbe:	2b10      	cmp	r3, #16
 8009dc0:	d10a      	bne.n	8009dd8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	60fb      	str	r3, [r7, #12]
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	60fb      	str	r3, [r7, #12]
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	685b      	ldr	r3, [r3, #4]
 8009dd4:	60fb      	str	r3, [r7, #12]
 8009dd6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009ddc:	4619      	mov	r1, r3
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f7ff fe2a 	bl	8009a38 <HAL_UARTEx_RxEventCallback>
 8009de4:	e002      	b.n	8009dec <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f7f7 f974 	bl	80010d4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009dec:	2300      	movs	r3, #0
 8009dee:	e002      	b.n	8009df6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009df0:	2300      	movs	r3, #0
 8009df2:	e000      	b.n	8009df6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009df4:	2302      	movs	r3, #2
  }
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	3730      	adds	r7, #48	; 0x30
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd80      	pop	{r7, pc}
	...

08009e00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009e00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009e04:	b0c0      	sub	sp, #256	; 0x100
 8009e06:	af00      	add	r7, sp, #0
 8009e08:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	691b      	ldr	r3, [r3, #16]
 8009e14:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e1c:	68d9      	ldr	r1, [r3, #12]
 8009e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e22:	681a      	ldr	r2, [r3, #0]
 8009e24:	ea40 0301 	orr.w	r3, r0, r1
 8009e28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e2e:	689a      	ldr	r2, [r3, #8]
 8009e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e34:	691b      	ldr	r3, [r3, #16]
 8009e36:	431a      	orrs	r2, r3
 8009e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e3c:	695b      	ldr	r3, [r3, #20]
 8009e3e:	431a      	orrs	r2, r3
 8009e40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e44:	69db      	ldr	r3, [r3, #28]
 8009e46:	4313      	orrs	r3, r2
 8009e48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	68db      	ldr	r3, [r3, #12]
 8009e54:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009e58:	f021 010c 	bic.w	r1, r1, #12
 8009e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e60:	681a      	ldr	r2, [r3, #0]
 8009e62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009e66:	430b      	orrs	r3, r1
 8009e68:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	695b      	ldr	r3, [r3, #20]
 8009e72:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e7a:	6999      	ldr	r1, [r3, #24]
 8009e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e80:	681a      	ldr	r2, [r3, #0]
 8009e82:	ea40 0301 	orr.w	r3, r0, r1
 8009e86:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e8c:	681a      	ldr	r2, [r3, #0]
 8009e8e:	4b8f      	ldr	r3, [pc, #572]	; (800a0cc <UART_SetConfig+0x2cc>)
 8009e90:	429a      	cmp	r2, r3
 8009e92:	d005      	beq.n	8009ea0 <UART_SetConfig+0xa0>
 8009e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e98:	681a      	ldr	r2, [r3, #0]
 8009e9a:	4b8d      	ldr	r3, [pc, #564]	; (800a0d0 <UART_SetConfig+0x2d0>)
 8009e9c:	429a      	cmp	r2, r3
 8009e9e:	d104      	bne.n	8009eaa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009ea0:	f7fe f824 	bl	8007eec <HAL_RCC_GetPCLK2Freq>
 8009ea4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009ea8:	e003      	b.n	8009eb2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009eaa:	f7fe f80b 	bl	8007ec4 <HAL_RCC_GetPCLK1Freq>
 8009eae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009eb6:	69db      	ldr	r3, [r3, #28]
 8009eb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ebc:	f040 810c 	bne.w	800a0d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009ec0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009eca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009ece:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009ed2:	4622      	mov	r2, r4
 8009ed4:	462b      	mov	r3, r5
 8009ed6:	1891      	adds	r1, r2, r2
 8009ed8:	65b9      	str	r1, [r7, #88]	; 0x58
 8009eda:	415b      	adcs	r3, r3
 8009edc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009ede:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009ee2:	4621      	mov	r1, r4
 8009ee4:	eb12 0801 	adds.w	r8, r2, r1
 8009ee8:	4629      	mov	r1, r5
 8009eea:	eb43 0901 	adc.w	r9, r3, r1
 8009eee:	f04f 0200 	mov.w	r2, #0
 8009ef2:	f04f 0300 	mov.w	r3, #0
 8009ef6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009efa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009efe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009f02:	4690      	mov	r8, r2
 8009f04:	4699      	mov	r9, r3
 8009f06:	4623      	mov	r3, r4
 8009f08:	eb18 0303 	adds.w	r3, r8, r3
 8009f0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009f10:	462b      	mov	r3, r5
 8009f12:	eb49 0303 	adc.w	r3, r9, r3
 8009f16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009f1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009f1e:	685b      	ldr	r3, [r3, #4]
 8009f20:	2200      	movs	r2, #0
 8009f22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009f26:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009f2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009f2e:	460b      	mov	r3, r1
 8009f30:	18db      	adds	r3, r3, r3
 8009f32:	653b      	str	r3, [r7, #80]	; 0x50
 8009f34:	4613      	mov	r3, r2
 8009f36:	eb42 0303 	adc.w	r3, r2, r3
 8009f3a:	657b      	str	r3, [r7, #84]	; 0x54
 8009f3c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009f40:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009f44:	f7f6 fe12 	bl	8000b6c <__aeabi_uldivmod>
 8009f48:	4602      	mov	r2, r0
 8009f4a:	460b      	mov	r3, r1
 8009f4c:	4b61      	ldr	r3, [pc, #388]	; (800a0d4 <UART_SetConfig+0x2d4>)
 8009f4e:	fba3 2302 	umull	r2, r3, r3, r2
 8009f52:	095b      	lsrs	r3, r3, #5
 8009f54:	011c      	lsls	r4, r3, #4
 8009f56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009f60:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009f64:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009f68:	4642      	mov	r2, r8
 8009f6a:	464b      	mov	r3, r9
 8009f6c:	1891      	adds	r1, r2, r2
 8009f6e:	64b9      	str	r1, [r7, #72]	; 0x48
 8009f70:	415b      	adcs	r3, r3
 8009f72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009f74:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009f78:	4641      	mov	r1, r8
 8009f7a:	eb12 0a01 	adds.w	sl, r2, r1
 8009f7e:	4649      	mov	r1, r9
 8009f80:	eb43 0b01 	adc.w	fp, r3, r1
 8009f84:	f04f 0200 	mov.w	r2, #0
 8009f88:	f04f 0300 	mov.w	r3, #0
 8009f8c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009f90:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009f94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009f98:	4692      	mov	sl, r2
 8009f9a:	469b      	mov	fp, r3
 8009f9c:	4643      	mov	r3, r8
 8009f9e:	eb1a 0303 	adds.w	r3, sl, r3
 8009fa2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009fa6:	464b      	mov	r3, r9
 8009fa8:	eb4b 0303 	adc.w	r3, fp, r3
 8009fac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009fb4:	685b      	ldr	r3, [r3, #4]
 8009fb6:	2200      	movs	r2, #0
 8009fb8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009fbc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009fc0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009fc4:	460b      	mov	r3, r1
 8009fc6:	18db      	adds	r3, r3, r3
 8009fc8:	643b      	str	r3, [r7, #64]	; 0x40
 8009fca:	4613      	mov	r3, r2
 8009fcc:	eb42 0303 	adc.w	r3, r2, r3
 8009fd0:	647b      	str	r3, [r7, #68]	; 0x44
 8009fd2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009fd6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009fda:	f7f6 fdc7 	bl	8000b6c <__aeabi_uldivmod>
 8009fde:	4602      	mov	r2, r0
 8009fe0:	460b      	mov	r3, r1
 8009fe2:	4611      	mov	r1, r2
 8009fe4:	4b3b      	ldr	r3, [pc, #236]	; (800a0d4 <UART_SetConfig+0x2d4>)
 8009fe6:	fba3 2301 	umull	r2, r3, r3, r1
 8009fea:	095b      	lsrs	r3, r3, #5
 8009fec:	2264      	movs	r2, #100	; 0x64
 8009fee:	fb02 f303 	mul.w	r3, r2, r3
 8009ff2:	1acb      	subs	r3, r1, r3
 8009ff4:	00db      	lsls	r3, r3, #3
 8009ff6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009ffa:	4b36      	ldr	r3, [pc, #216]	; (800a0d4 <UART_SetConfig+0x2d4>)
 8009ffc:	fba3 2302 	umull	r2, r3, r3, r2
 800a000:	095b      	lsrs	r3, r3, #5
 800a002:	005b      	lsls	r3, r3, #1
 800a004:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a008:	441c      	add	r4, r3
 800a00a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a00e:	2200      	movs	r2, #0
 800a010:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a014:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a018:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a01c:	4642      	mov	r2, r8
 800a01e:	464b      	mov	r3, r9
 800a020:	1891      	adds	r1, r2, r2
 800a022:	63b9      	str	r1, [r7, #56]	; 0x38
 800a024:	415b      	adcs	r3, r3
 800a026:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a028:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a02c:	4641      	mov	r1, r8
 800a02e:	1851      	adds	r1, r2, r1
 800a030:	6339      	str	r1, [r7, #48]	; 0x30
 800a032:	4649      	mov	r1, r9
 800a034:	414b      	adcs	r3, r1
 800a036:	637b      	str	r3, [r7, #52]	; 0x34
 800a038:	f04f 0200 	mov.w	r2, #0
 800a03c:	f04f 0300 	mov.w	r3, #0
 800a040:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a044:	4659      	mov	r1, fp
 800a046:	00cb      	lsls	r3, r1, #3
 800a048:	4651      	mov	r1, sl
 800a04a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a04e:	4651      	mov	r1, sl
 800a050:	00ca      	lsls	r2, r1, #3
 800a052:	4610      	mov	r0, r2
 800a054:	4619      	mov	r1, r3
 800a056:	4603      	mov	r3, r0
 800a058:	4642      	mov	r2, r8
 800a05a:	189b      	adds	r3, r3, r2
 800a05c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a060:	464b      	mov	r3, r9
 800a062:	460a      	mov	r2, r1
 800a064:	eb42 0303 	adc.w	r3, r2, r3
 800a068:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a06c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a070:	685b      	ldr	r3, [r3, #4]
 800a072:	2200      	movs	r2, #0
 800a074:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a078:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a07c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a080:	460b      	mov	r3, r1
 800a082:	18db      	adds	r3, r3, r3
 800a084:	62bb      	str	r3, [r7, #40]	; 0x28
 800a086:	4613      	mov	r3, r2
 800a088:	eb42 0303 	adc.w	r3, r2, r3
 800a08c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a08e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800a092:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800a096:	f7f6 fd69 	bl	8000b6c <__aeabi_uldivmod>
 800a09a:	4602      	mov	r2, r0
 800a09c:	460b      	mov	r3, r1
 800a09e:	4b0d      	ldr	r3, [pc, #52]	; (800a0d4 <UART_SetConfig+0x2d4>)
 800a0a0:	fba3 1302 	umull	r1, r3, r3, r2
 800a0a4:	095b      	lsrs	r3, r3, #5
 800a0a6:	2164      	movs	r1, #100	; 0x64
 800a0a8:	fb01 f303 	mul.w	r3, r1, r3
 800a0ac:	1ad3      	subs	r3, r2, r3
 800a0ae:	00db      	lsls	r3, r3, #3
 800a0b0:	3332      	adds	r3, #50	; 0x32
 800a0b2:	4a08      	ldr	r2, [pc, #32]	; (800a0d4 <UART_SetConfig+0x2d4>)
 800a0b4:	fba2 2303 	umull	r2, r3, r2, r3
 800a0b8:	095b      	lsrs	r3, r3, #5
 800a0ba:	f003 0207 	and.w	r2, r3, #7
 800a0be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	4422      	add	r2, r4
 800a0c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a0c8:	e106      	b.n	800a2d8 <UART_SetConfig+0x4d8>
 800a0ca:	bf00      	nop
 800a0cc:	40011000 	.word	0x40011000
 800a0d0:	40011400 	.word	0x40011400
 800a0d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a0d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a0dc:	2200      	movs	r2, #0
 800a0de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a0e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800a0e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800a0ea:	4642      	mov	r2, r8
 800a0ec:	464b      	mov	r3, r9
 800a0ee:	1891      	adds	r1, r2, r2
 800a0f0:	6239      	str	r1, [r7, #32]
 800a0f2:	415b      	adcs	r3, r3
 800a0f4:	627b      	str	r3, [r7, #36]	; 0x24
 800a0f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a0fa:	4641      	mov	r1, r8
 800a0fc:	1854      	adds	r4, r2, r1
 800a0fe:	4649      	mov	r1, r9
 800a100:	eb43 0501 	adc.w	r5, r3, r1
 800a104:	f04f 0200 	mov.w	r2, #0
 800a108:	f04f 0300 	mov.w	r3, #0
 800a10c:	00eb      	lsls	r3, r5, #3
 800a10e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a112:	00e2      	lsls	r2, r4, #3
 800a114:	4614      	mov	r4, r2
 800a116:	461d      	mov	r5, r3
 800a118:	4643      	mov	r3, r8
 800a11a:	18e3      	adds	r3, r4, r3
 800a11c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a120:	464b      	mov	r3, r9
 800a122:	eb45 0303 	adc.w	r3, r5, r3
 800a126:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a12a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a12e:	685b      	ldr	r3, [r3, #4]
 800a130:	2200      	movs	r2, #0
 800a132:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a136:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a13a:	f04f 0200 	mov.w	r2, #0
 800a13e:	f04f 0300 	mov.w	r3, #0
 800a142:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800a146:	4629      	mov	r1, r5
 800a148:	008b      	lsls	r3, r1, #2
 800a14a:	4621      	mov	r1, r4
 800a14c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a150:	4621      	mov	r1, r4
 800a152:	008a      	lsls	r2, r1, #2
 800a154:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800a158:	f7f6 fd08 	bl	8000b6c <__aeabi_uldivmod>
 800a15c:	4602      	mov	r2, r0
 800a15e:	460b      	mov	r3, r1
 800a160:	4b60      	ldr	r3, [pc, #384]	; (800a2e4 <UART_SetConfig+0x4e4>)
 800a162:	fba3 2302 	umull	r2, r3, r3, r2
 800a166:	095b      	lsrs	r3, r3, #5
 800a168:	011c      	lsls	r4, r3, #4
 800a16a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a16e:	2200      	movs	r2, #0
 800a170:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a174:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a178:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800a17c:	4642      	mov	r2, r8
 800a17e:	464b      	mov	r3, r9
 800a180:	1891      	adds	r1, r2, r2
 800a182:	61b9      	str	r1, [r7, #24]
 800a184:	415b      	adcs	r3, r3
 800a186:	61fb      	str	r3, [r7, #28]
 800a188:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a18c:	4641      	mov	r1, r8
 800a18e:	1851      	adds	r1, r2, r1
 800a190:	6139      	str	r1, [r7, #16]
 800a192:	4649      	mov	r1, r9
 800a194:	414b      	adcs	r3, r1
 800a196:	617b      	str	r3, [r7, #20]
 800a198:	f04f 0200 	mov.w	r2, #0
 800a19c:	f04f 0300 	mov.w	r3, #0
 800a1a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a1a4:	4659      	mov	r1, fp
 800a1a6:	00cb      	lsls	r3, r1, #3
 800a1a8:	4651      	mov	r1, sl
 800a1aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a1ae:	4651      	mov	r1, sl
 800a1b0:	00ca      	lsls	r2, r1, #3
 800a1b2:	4610      	mov	r0, r2
 800a1b4:	4619      	mov	r1, r3
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	4642      	mov	r2, r8
 800a1ba:	189b      	adds	r3, r3, r2
 800a1bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a1c0:	464b      	mov	r3, r9
 800a1c2:	460a      	mov	r2, r1
 800a1c4:	eb42 0303 	adc.w	r3, r2, r3
 800a1c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a1cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a1d0:	685b      	ldr	r3, [r3, #4]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	67bb      	str	r3, [r7, #120]	; 0x78
 800a1d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a1d8:	f04f 0200 	mov.w	r2, #0
 800a1dc:	f04f 0300 	mov.w	r3, #0
 800a1e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800a1e4:	4649      	mov	r1, r9
 800a1e6:	008b      	lsls	r3, r1, #2
 800a1e8:	4641      	mov	r1, r8
 800a1ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a1ee:	4641      	mov	r1, r8
 800a1f0:	008a      	lsls	r2, r1, #2
 800a1f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800a1f6:	f7f6 fcb9 	bl	8000b6c <__aeabi_uldivmod>
 800a1fa:	4602      	mov	r2, r0
 800a1fc:	460b      	mov	r3, r1
 800a1fe:	4611      	mov	r1, r2
 800a200:	4b38      	ldr	r3, [pc, #224]	; (800a2e4 <UART_SetConfig+0x4e4>)
 800a202:	fba3 2301 	umull	r2, r3, r3, r1
 800a206:	095b      	lsrs	r3, r3, #5
 800a208:	2264      	movs	r2, #100	; 0x64
 800a20a:	fb02 f303 	mul.w	r3, r2, r3
 800a20e:	1acb      	subs	r3, r1, r3
 800a210:	011b      	lsls	r3, r3, #4
 800a212:	3332      	adds	r3, #50	; 0x32
 800a214:	4a33      	ldr	r2, [pc, #204]	; (800a2e4 <UART_SetConfig+0x4e4>)
 800a216:	fba2 2303 	umull	r2, r3, r2, r3
 800a21a:	095b      	lsrs	r3, r3, #5
 800a21c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a220:	441c      	add	r4, r3
 800a222:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a226:	2200      	movs	r2, #0
 800a228:	673b      	str	r3, [r7, #112]	; 0x70
 800a22a:	677a      	str	r2, [r7, #116]	; 0x74
 800a22c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800a230:	4642      	mov	r2, r8
 800a232:	464b      	mov	r3, r9
 800a234:	1891      	adds	r1, r2, r2
 800a236:	60b9      	str	r1, [r7, #8]
 800a238:	415b      	adcs	r3, r3
 800a23a:	60fb      	str	r3, [r7, #12]
 800a23c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a240:	4641      	mov	r1, r8
 800a242:	1851      	adds	r1, r2, r1
 800a244:	6039      	str	r1, [r7, #0]
 800a246:	4649      	mov	r1, r9
 800a248:	414b      	adcs	r3, r1
 800a24a:	607b      	str	r3, [r7, #4]
 800a24c:	f04f 0200 	mov.w	r2, #0
 800a250:	f04f 0300 	mov.w	r3, #0
 800a254:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a258:	4659      	mov	r1, fp
 800a25a:	00cb      	lsls	r3, r1, #3
 800a25c:	4651      	mov	r1, sl
 800a25e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a262:	4651      	mov	r1, sl
 800a264:	00ca      	lsls	r2, r1, #3
 800a266:	4610      	mov	r0, r2
 800a268:	4619      	mov	r1, r3
 800a26a:	4603      	mov	r3, r0
 800a26c:	4642      	mov	r2, r8
 800a26e:	189b      	adds	r3, r3, r2
 800a270:	66bb      	str	r3, [r7, #104]	; 0x68
 800a272:	464b      	mov	r3, r9
 800a274:	460a      	mov	r2, r1
 800a276:	eb42 0303 	adc.w	r3, r2, r3
 800a27a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a27c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a280:	685b      	ldr	r3, [r3, #4]
 800a282:	2200      	movs	r2, #0
 800a284:	663b      	str	r3, [r7, #96]	; 0x60
 800a286:	667a      	str	r2, [r7, #100]	; 0x64
 800a288:	f04f 0200 	mov.w	r2, #0
 800a28c:	f04f 0300 	mov.w	r3, #0
 800a290:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800a294:	4649      	mov	r1, r9
 800a296:	008b      	lsls	r3, r1, #2
 800a298:	4641      	mov	r1, r8
 800a29a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a29e:	4641      	mov	r1, r8
 800a2a0:	008a      	lsls	r2, r1, #2
 800a2a2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800a2a6:	f7f6 fc61 	bl	8000b6c <__aeabi_uldivmod>
 800a2aa:	4602      	mov	r2, r0
 800a2ac:	460b      	mov	r3, r1
 800a2ae:	4b0d      	ldr	r3, [pc, #52]	; (800a2e4 <UART_SetConfig+0x4e4>)
 800a2b0:	fba3 1302 	umull	r1, r3, r3, r2
 800a2b4:	095b      	lsrs	r3, r3, #5
 800a2b6:	2164      	movs	r1, #100	; 0x64
 800a2b8:	fb01 f303 	mul.w	r3, r1, r3
 800a2bc:	1ad3      	subs	r3, r2, r3
 800a2be:	011b      	lsls	r3, r3, #4
 800a2c0:	3332      	adds	r3, #50	; 0x32
 800a2c2:	4a08      	ldr	r2, [pc, #32]	; (800a2e4 <UART_SetConfig+0x4e4>)
 800a2c4:	fba2 2303 	umull	r2, r3, r2, r3
 800a2c8:	095b      	lsrs	r3, r3, #5
 800a2ca:	f003 020f 	and.w	r2, r3, #15
 800a2ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	4422      	add	r2, r4
 800a2d6:	609a      	str	r2, [r3, #8]
}
 800a2d8:	bf00      	nop
 800a2da:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a2e4:	51eb851f 	.word	0x51eb851f

0800a2e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a2e8:	b084      	sub	sp, #16
 800a2ea:	b580      	push	{r7, lr}
 800a2ec:	b084      	sub	sp, #16
 800a2ee:	af00      	add	r7, sp, #0
 800a2f0:	6078      	str	r0, [r7, #4]
 800a2f2:	f107 001c 	add.w	r0, r7, #28
 800a2f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a2fa:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800a2fe:	2b01      	cmp	r3, #1
 800a300:	d123      	bne.n	800a34a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a306:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	68db      	ldr	r3, [r3, #12]
 800a312:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800a316:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a31a:	687a      	ldr	r2, [r7, #4]
 800a31c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	68db      	ldr	r3, [r3, #12]
 800a322:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a32a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a32e:	2b01      	cmp	r3, #1
 800a330:	d105      	bne.n	800a33e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	68db      	ldr	r3, [r3, #12]
 800a336:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a33e:	6878      	ldr	r0, [r7, #4]
 800a340:	f001 fae2 	bl	800b908 <USB_CoreReset>
 800a344:	4603      	mov	r3, r0
 800a346:	73fb      	strb	r3, [r7, #15]
 800a348:	e01b      	b.n	800a382 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	68db      	ldr	r3, [r3, #12]
 800a34e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f001 fad6 	bl	800b908 <USB_CoreReset>
 800a35c:	4603      	mov	r3, r0
 800a35e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800a360:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a364:	2b00      	cmp	r3, #0
 800a366:	d106      	bne.n	800a376 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a36c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	639a      	str	r2, [r3, #56]	; 0x38
 800a374:	e005      	b.n	800a382 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a37a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800a382:	7fbb      	ldrb	r3, [r7, #30]
 800a384:	2b01      	cmp	r3, #1
 800a386:	d10b      	bne.n	800a3a0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	689b      	ldr	r3, [r3, #8]
 800a38c:	f043 0206 	orr.w	r2, r3, #6
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	689b      	ldr	r3, [r3, #8]
 800a398:	f043 0220 	orr.w	r2, r3, #32
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a3a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	3710      	adds	r7, #16
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a3ac:	b004      	add	sp, #16
 800a3ae:	4770      	bx	lr

0800a3b0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a3b0:	b480      	push	{r7}
 800a3b2:	b087      	sub	sp, #28
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	60f8      	str	r0, [r7, #12]
 800a3b8:	60b9      	str	r1, [r7, #8]
 800a3ba:	4613      	mov	r3, r2
 800a3bc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a3be:	79fb      	ldrb	r3, [r7, #7]
 800a3c0:	2b02      	cmp	r3, #2
 800a3c2:	d165      	bne.n	800a490 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a3c4:	68bb      	ldr	r3, [r7, #8]
 800a3c6:	4a41      	ldr	r2, [pc, #260]	; (800a4cc <USB_SetTurnaroundTime+0x11c>)
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	d906      	bls.n	800a3da <USB_SetTurnaroundTime+0x2a>
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	4a40      	ldr	r2, [pc, #256]	; (800a4d0 <USB_SetTurnaroundTime+0x120>)
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	d202      	bcs.n	800a3da <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a3d4:	230f      	movs	r3, #15
 800a3d6:	617b      	str	r3, [r7, #20]
 800a3d8:	e062      	b.n	800a4a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	4a3c      	ldr	r2, [pc, #240]	; (800a4d0 <USB_SetTurnaroundTime+0x120>)
 800a3de:	4293      	cmp	r3, r2
 800a3e0:	d306      	bcc.n	800a3f0 <USB_SetTurnaroundTime+0x40>
 800a3e2:	68bb      	ldr	r3, [r7, #8]
 800a3e4:	4a3b      	ldr	r2, [pc, #236]	; (800a4d4 <USB_SetTurnaroundTime+0x124>)
 800a3e6:	4293      	cmp	r3, r2
 800a3e8:	d202      	bcs.n	800a3f0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a3ea:	230e      	movs	r3, #14
 800a3ec:	617b      	str	r3, [r7, #20]
 800a3ee:	e057      	b.n	800a4a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a3f0:	68bb      	ldr	r3, [r7, #8]
 800a3f2:	4a38      	ldr	r2, [pc, #224]	; (800a4d4 <USB_SetTurnaroundTime+0x124>)
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d306      	bcc.n	800a406 <USB_SetTurnaroundTime+0x56>
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	4a37      	ldr	r2, [pc, #220]	; (800a4d8 <USB_SetTurnaroundTime+0x128>)
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d202      	bcs.n	800a406 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a400:	230d      	movs	r3, #13
 800a402:	617b      	str	r3, [r7, #20]
 800a404:	e04c      	b.n	800a4a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a406:	68bb      	ldr	r3, [r7, #8]
 800a408:	4a33      	ldr	r2, [pc, #204]	; (800a4d8 <USB_SetTurnaroundTime+0x128>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d306      	bcc.n	800a41c <USB_SetTurnaroundTime+0x6c>
 800a40e:	68bb      	ldr	r3, [r7, #8]
 800a410:	4a32      	ldr	r2, [pc, #200]	; (800a4dc <USB_SetTurnaroundTime+0x12c>)
 800a412:	4293      	cmp	r3, r2
 800a414:	d802      	bhi.n	800a41c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a416:	230c      	movs	r3, #12
 800a418:	617b      	str	r3, [r7, #20]
 800a41a:	e041      	b.n	800a4a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	4a2f      	ldr	r2, [pc, #188]	; (800a4dc <USB_SetTurnaroundTime+0x12c>)
 800a420:	4293      	cmp	r3, r2
 800a422:	d906      	bls.n	800a432 <USB_SetTurnaroundTime+0x82>
 800a424:	68bb      	ldr	r3, [r7, #8]
 800a426:	4a2e      	ldr	r2, [pc, #184]	; (800a4e0 <USB_SetTurnaroundTime+0x130>)
 800a428:	4293      	cmp	r3, r2
 800a42a:	d802      	bhi.n	800a432 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a42c:	230b      	movs	r3, #11
 800a42e:	617b      	str	r3, [r7, #20]
 800a430:	e036      	b.n	800a4a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	4a2a      	ldr	r2, [pc, #168]	; (800a4e0 <USB_SetTurnaroundTime+0x130>)
 800a436:	4293      	cmp	r3, r2
 800a438:	d906      	bls.n	800a448 <USB_SetTurnaroundTime+0x98>
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	4a29      	ldr	r2, [pc, #164]	; (800a4e4 <USB_SetTurnaroundTime+0x134>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	d802      	bhi.n	800a448 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a442:	230a      	movs	r3, #10
 800a444:	617b      	str	r3, [r7, #20]
 800a446:	e02b      	b.n	800a4a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	4a26      	ldr	r2, [pc, #152]	; (800a4e4 <USB_SetTurnaroundTime+0x134>)
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d906      	bls.n	800a45e <USB_SetTurnaroundTime+0xae>
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	4a25      	ldr	r2, [pc, #148]	; (800a4e8 <USB_SetTurnaroundTime+0x138>)
 800a454:	4293      	cmp	r3, r2
 800a456:	d202      	bcs.n	800a45e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a458:	2309      	movs	r3, #9
 800a45a:	617b      	str	r3, [r7, #20]
 800a45c:	e020      	b.n	800a4a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a45e:	68bb      	ldr	r3, [r7, #8]
 800a460:	4a21      	ldr	r2, [pc, #132]	; (800a4e8 <USB_SetTurnaroundTime+0x138>)
 800a462:	4293      	cmp	r3, r2
 800a464:	d306      	bcc.n	800a474 <USB_SetTurnaroundTime+0xc4>
 800a466:	68bb      	ldr	r3, [r7, #8]
 800a468:	4a20      	ldr	r2, [pc, #128]	; (800a4ec <USB_SetTurnaroundTime+0x13c>)
 800a46a:	4293      	cmp	r3, r2
 800a46c:	d802      	bhi.n	800a474 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a46e:	2308      	movs	r3, #8
 800a470:	617b      	str	r3, [r7, #20]
 800a472:	e015      	b.n	800a4a0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a474:	68bb      	ldr	r3, [r7, #8]
 800a476:	4a1d      	ldr	r2, [pc, #116]	; (800a4ec <USB_SetTurnaroundTime+0x13c>)
 800a478:	4293      	cmp	r3, r2
 800a47a:	d906      	bls.n	800a48a <USB_SetTurnaroundTime+0xda>
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	4a1c      	ldr	r2, [pc, #112]	; (800a4f0 <USB_SetTurnaroundTime+0x140>)
 800a480:	4293      	cmp	r3, r2
 800a482:	d202      	bcs.n	800a48a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a484:	2307      	movs	r3, #7
 800a486:	617b      	str	r3, [r7, #20]
 800a488:	e00a      	b.n	800a4a0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a48a:	2306      	movs	r3, #6
 800a48c:	617b      	str	r3, [r7, #20]
 800a48e:	e007      	b.n	800a4a0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a490:	79fb      	ldrb	r3, [r7, #7]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d102      	bne.n	800a49c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a496:	2309      	movs	r3, #9
 800a498:	617b      	str	r3, [r7, #20]
 800a49a:	e001      	b.n	800a4a0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a49c:	2309      	movs	r3, #9
 800a49e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	68db      	ldr	r3, [r3, #12]
 800a4a4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	68da      	ldr	r2, [r3, #12]
 800a4b0:	697b      	ldr	r3, [r7, #20]
 800a4b2:	029b      	lsls	r3, r3, #10
 800a4b4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a4b8:	431a      	orrs	r2, r3
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a4be:	2300      	movs	r3, #0
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	371c      	adds	r7, #28
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ca:	4770      	bx	lr
 800a4cc:	00d8acbf 	.word	0x00d8acbf
 800a4d0:	00e4e1c0 	.word	0x00e4e1c0
 800a4d4:	00f42400 	.word	0x00f42400
 800a4d8:	01067380 	.word	0x01067380
 800a4dc:	011a499f 	.word	0x011a499f
 800a4e0:	01312cff 	.word	0x01312cff
 800a4e4:	014ca43f 	.word	0x014ca43f
 800a4e8:	016e3600 	.word	0x016e3600
 800a4ec:	01a6ab1f 	.word	0x01a6ab1f
 800a4f0:	01e84800 	.word	0x01e84800

0800a4f4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b083      	sub	sp, #12
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	689b      	ldr	r3, [r3, #8]
 800a500:	f043 0201 	orr.w	r2, r3, #1
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a508:	2300      	movs	r3, #0
}
 800a50a:	4618      	mov	r0, r3
 800a50c:	370c      	adds	r7, #12
 800a50e:	46bd      	mov	sp, r7
 800a510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a514:	4770      	bx	lr

0800a516 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a516:	b480      	push	{r7}
 800a518:	b083      	sub	sp, #12
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	689b      	ldr	r3, [r3, #8]
 800a522:	f023 0201 	bic.w	r2, r3, #1
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a52a:	2300      	movs	r3, #0
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	370c      	adds	r7, #12
 800a530:	46bd      	mov	sp, r7
 800a532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a536:	4770      	bx	lr

0800a538 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b084      	sub	sp, #16
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
 800a540:	460b      	mov	r3, r1
 800a542:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a544:	2300      	movs	r3, #0
 800a546:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	68db      	ldr	r3, [r3, #12]
 800a54c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a554:	78fb      	ldrb	r3, [r7, #3]
 800a556:	2b01      	cmp	r3, #1
 800a558:	d115      	bne.n	800a586 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	68db      	ldr	r3, [r3, #12]
 800a55e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a566:	200a      	movs	r0, #10
 800a568:	f7f9 fb0a 	bl	8003b80 <HAL_Delay>
      ms += 10U;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	330a      	adds	r3, #10
 800a570:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a572:	6878      	ldr	r0, [r7, #4]
 800a574:	f001 f939 	bl	800b7ea <USB_GetMode>
 800a578:	4603      	mov	r3, r0
 800a57a:	2b01      	cmp	r3, #1
 800a57c:	d01e      	beq.n	800a5bc <USB_SetCurrentMode+0x84>
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	2bc7      	cmp	r3, #199	; 0xc7
 800a582:	d9f0      	bls.n	800a566 <USB_SetCurrentMode+0x2e>
 800a584:	e01a      	b.n	800a5bc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a586:	78fb      	ldrb	r3, [r7, #3]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d115      	bne.n	800a5b8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	68db      	ldr	r3, [r3, #12]
 800a590:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800a598:	200a      	movs	r0, #10
 800a59a:	f7f9 faf1 	bl	8003b80 <HAL_Delay>
      ms += 10U;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	330a      	adds	r3, #10
 800a5a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800a5a4:	6878      	ldr	r0, [r7, #4]
 800a5a6:	f001 f920 	bl	800b7ea <USB_GetMode>
 800a5aa:	4603      	mov	r3, r0
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d005      	beq.n	800a5bc <USB_SetCurrentMode+0x84>
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	2bc7      	cmp	r3, #199	; 0xc7
 800a5b4:	d9f0      	bls.n	800a598 <USB_SetCurrentMode+0x60>
 800a5b6:	e001      	b.n	800a5bc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	e005      	b.n	800a5c8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	2bc8      	cmp	r3, #200	; 0xc8
 800a5c0:	d101      	bne.n	800a5c6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	e000      	b.n	800a5c8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a5c6:	2300      	movs	r3, #0
}
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	3710      	adds	r7, #16
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}

0800a5d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a5d0:	b084      	sub	sp, #16
 800a5d2:	b580      	push	{r7, lr}
 800a5d4:	b086      	sub	sp, #24
 800a5d6:	af00      	add	r7, sp, #0
 800a5d8:	6078      	str	r0, [r7, #4]
 800a5da:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a5de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a5ea:	2300      	movs	r3, #0
 800a5ec:	613b      	str	r3, [r7, #16]
 800a5ee:	e009      	b.n	800a604 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a5f0:	687a      	ldr	r2, [r7, #4]
 800a5f2:	693b      	ldr	r3, [r7, #16]
 800a5f4:	3340      	adds	r3, #64	; 0x40
 800a5f6:	009b      	lsls	r3, r3, #2
 800a5f8:	4413      	add	r3, r2
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a5fe:	693b      	ldr	r3, [r7, #16]
 800a600:	3301      	adds	r3, #1
 800a602:	613b      	str	r3, [r7, #16]
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	2b0e      	cmp	r3, #14
 800a608:	d9f2      	bls.n	800a5f0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a60a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d11c      	bne.n	800a64c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a618:	685b      	ldr	r3, [r3, #4]
 800a61a:	68fa      	ldr	r2, [r7, #12]
 800a61c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a620:	f043 0302 	orr.w	r3, r3, #2
 800a624:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a62a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a636:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a642:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	639a      	str	r2, [r3, #56]	; 0x38
 800a64a:	e00b      	b.n	800a664 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a650:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a65c:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a66a:	461a      	mov	r2, r3
 800a66c:	2300      	movs	r3, #0
 800a66e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a670:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800a674:	2b01      	cmp	r3, #1
 800a676:	d10d      	bne.n	800a694 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a678:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d104      	bne.n	800a68a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a680:	2100      	movs	r1, #0
 800a682:	6878      	ldr	r0, [r7, #4]
 800a684:	f000 f968 	bl	800a958 <USB_SetDevSpeed>
 800a688:	e008      	b.n	800a69c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a68a:	2101      	movs	r1, #1
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f000 f963 	bl	800a958 <USB_SetDevSpeed>
 800a692:	e003      	b.n	800a69c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a694:	2103      	movs	r1, #3
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f000 f95e 	bl	800a958 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a69c:	2110      	movs	r1, #16
 800a69e:	6878      	ldr	r0, [r7, #4]
 800a6a0:	f000 f8fa 	bl	800a898 <USB_FlushTxFifo>
 800a6a4:	4603      	mov	r3, r0
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d001      	beq.n	800a6ae <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f000 f924 	bl	800a8fc <USB_FlushRxFifo>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	2b00      	cmp	r3, #0
 800a6b8:	d001      	beq.n	800a6be <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800a6ba:	2301      	movs	r3, #1
 800a6bc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6c4:	461a      	mov	r2, r3
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6d0:	461a      	mov	r2, r3
 800a6d2:	2300      	movs	r3, #0
 800a6d4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a6dc:	461a      	mov	r2, r3
 800a6de:	2300      	movs	r3, #0
 800a6e0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	613b      	str	r3, [r7, #16]
 800a6e6:	e043      	b.n	800a770 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a6e8:	693b      	ldr	r3, [r7, #16]
 800a6ea:	015a      	lsls	r2, r3, #5
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	4413      	add	r3, r2
 800a6f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a6fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a6fe:	d118      	bne.n	800a732 <USB_DevInit+0x162>
    {
      if (i == 0U)
 800a700:	693b      	ldr	r3, [r7, #16]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d10a      	bne.n	800a71c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a706:	693b      	ldr	r3, [r7, #16]
 800a708:	015a      	lsls	r2, r3, #5
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	4413      	add	r3, r2
 800a70e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a712:	461a      	mov	r2, r3
 800a714:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a718:	6013      	str	r3, [r2, #0]
 800a71a:	e013      	b.n	800a744 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a71c:	693b      	ldr	r3, [r7, #16]
 800a71e:	015a      	lsls	r2, r3, #5
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	4413      	add	r3, r2
 800a724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a728:	461a      	mov	r2, r3
 800a72a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a72e:	6013      	str	r3, [r2, #0]
 800a730:	e008      	b.n	800a744 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a732:	693b      	ldr	r3, [r7, #16]
 800a734:	015a      	lsls	r2, r3, #5
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	4413      	add	r3, r2
 800a73a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a73e:	461a      	mov	r2, r3
 800a740:	2300      	movs	r3, #0
 800a742:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a744:	693b      	ldr	r3, [r7, #16]
 800a746:	015a      	lsls	r2, r3, #5
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	4413      	add	r3, r2
 800a74c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a750:	461a      	mov	r2, r3
 800a752:	2300      	movs	r3, #0
 800a754:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	015a      	lsls	r2, r3, #5
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	4413      	add	r3, r2
 800a75e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a762:	461a      	mov	r2, r3
 800a764:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a768:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a76a:	693b      	ldr	r3, [r7, #16]
 800a76c:	3301      	adds	r3, #1
 800a76e:	613b      	str	r3, [r7, #16]
 800a770:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a774:	461a      	mov	r2, r3
 800a776:	693b      	ldr	r3, [r7, #16]
 800a778:	4293      	cmp	r3, r2
 800a77a:	d3b5      	bcc.n	800a6e8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a77c:	2300      	movs	r3, #0
 800a77e:	613b      	str	r3, [r7, #16]
 800a780:	e043      	b.n	800a80a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a782:	693b      	ldr	r3, [r7, #16]
 800a784:	015a      	lsls	r2, r3, #5
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	4413      	add	r3, r2
 800a78a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a794:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a798:	d118      	bne.n	800a7cc <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800a79a:	693b      	ldr	r3, [r7, #16]
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d10a      	bne.n	800a7b6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	015a      	lsls	r2, r3, #5
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	4413      	add	r3, r2
 800a7a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7ac:	461a      	mov	r2, r3
 800a7ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a7b2:	6013      	str	r3, [r2, #0]
 800a7b4:	e013      	b.n	800a7de <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	015a      	lsls	r2, r3, #5
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	4413      	add	r3, r2
 800a7be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7c2:	461a      	mov	r2, r3
 800a7c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a7c8:	6013      	str	r3, [r2, #0]
 800a7ca:	e008      	b.n	800a7de <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a7cc:	693b      	ldr	r3, [r7, #16]
 800a7ce:	015a      	lsls	r2, r3, #5
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	4413      	add	r3, r2
 800a7d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7d8:	461a      	mov	r2, r3
 800a7da:	2300      	movs	r3, #0
 800a7dc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a7de:	693b      	ldr	r3, [r7, #16]
 800a7e0:	015a      	lsls	r2, r3, #5
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	4413      	add	r3, r2
 800a7e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7ea:	461a      	mov	r2, r3
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	015a      	lsls	r2, r3, #5
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	4413      	add	r3, r2
 800a7f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7fc:	461a      	mov	r2, r3
 800a7fe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a802:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a804:	693b      	ldr	r3, [r7, #16]
 800a806:	3301      	adds	r3, #1
 800a808:	613b      	str	r3, [r7, #16]
 800a80a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a80e:	461a      	mov	r2, r3
 800a810:	693b      	ldr	r3, [r7, #16]
 800a812:	4293      	cmp	r3, r2
 800a814:	d3b5      	bcc.n	800a782 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a81c:	691b      	ldr	r3, [r3, #16]
 800a81e:	68fa      	ldr	r2, [r7, #12]
 800a820:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a824:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a828:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2200      	movs	r2, #0
 800a82e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a836:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a838:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d105      	bne.n	800a84c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	699b      	ldr	r3, [r3, #24]
 800a844:	f043 0210 	orr.w	r2, r3, #16
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	699a      	ldr	r2, [r3, #24]
 800a850:	4b10      	ldr	r3, [pc, #64]	; (800a894 <USB_DevInit+0x2c4>)
 800a852:	4313      	orrs	r3, r2
 800a854:	687a      	ldr	r2, [r7, #4]
 800a856:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a858:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d005      	beq.n	800a86c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	699b      	ldr	r3, [r3, #24]
 800a864:	f043 0208 	orr.w	r2, r3, #8
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a86c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800a870:	2b01      	cmp	r3, #1
 800a872:	d107      	bne.n	800a884 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	699b      	ldr	r3, [r3, #24]
 800a878:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a87c:	f043 0304 	orr.w	r3, r3, #4
 800a880:	687a      	ldr	r2, [r7, #4]
 800a882:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a884:	7dfb      	ldrb	r3, [r7, #23]
}
 800a886:	4618      	mov	r0, r3
 800a888:	3718      	adds	r7, #24
 800a88a:	46bd      	mov	sp, r7
 800a88c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a890:	b004      	add	sp, #16
 800a892:	4770      	bx	lr
 800a894:	803c3800 	.word	0x803c3800

0800a898 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a898:	b480      	push	{r7}
 800a89a:	b085      	sub	sp, #20
 800a89c:	af00      	add	r7, sp, #0
 800a89e:	6078      	str	r0, [r7, #4]
 800a8a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a8a2:	2300      	movs	r3, #0
 800a8a4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	3301      	adds	r3, #1
 800a8aa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800a8b2:	d901      	bls.n	800a8b8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a8b4:	2303      	movs	r3, #3
 800a8b6:	e01b      	b.n	800a8f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	691b      	ldr	r3, [r3, #16]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	daf2      	bge.n	800a8a6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	019b      	lsls	r3, r3, #6
 800a8c8:	f043 0220 	orr.w	r2, r3, #32
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	3301      	adds	r3, #1
 800a8d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800a8dc:	d901      	bls.n	800a8e2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a8de:	2303      	movs	r3, #3
 800a8e0:	e006      	b.n	800a8f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	691b      	ldr	r3, [r3, #16]
 800a8e6:	f003 0320 	and.w	r3, r3, #32
 800a8ea:	2b20      	cmp	r3, #32
 800a8ec:	d0f0      	beq.n	800a8d0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a8ee:	2300      	movs	r3, #0
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	3714      	adds	r7, #20
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8fa:	4770      	bx	lr

0800a8fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	b085      	sub	sp, #20
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a904:	2300      	movs	r3, #0
 800a906:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	3301      	adds	r3, #1
 800a90c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800a914:	d901      	bls.n	800a91a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a916:	2303      	movs	r3, #3
 800a918:	e018      	b.n	800a94c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	691b      	ldr	r3, [r3, #16]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	daf2      	bge.n	800a908 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a922:	2300      	movs	r3, #0
 800a924:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	2210      	movs	r2, #16
 800a92a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	3301      	adds	r3, #1
 800a930:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800a938:	d901      	bls.n	800a93e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a93a:	2303      	movs	r3, #3
 800a93c:	e006      	b.n	800a94c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	691b      	ldr	r3, [r3, #16]
 800a942:	f003 0310 	and.w	r3, r3, #16
 800a946:	2b10      	cmp	r3, #16
 800a948:	d0f0      	beq.n	800a92c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a94a:	2300      	movs	r3, #0
}
 800a94c:	4618      	mov	r0, r3
 800a94e:	3714      	adds	r7, #20
 800a950:	46bd      	mov	sp, r7
 800a952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a956:	4770      	bx	lr

0800a958 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a958:	b480      	push	{r7}
 800a95a:	b085      	sub	sp, #20
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
 800a960:	460b      	mov	r3, r1
 800a962:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a96e:	681a      	ldr	r2, [r3, #0]
 800a970:	78fb      	ldrb	r3, [r7, #3]
 800a972:	68f9      	ldr	r1, [r7, #12]
 800a974:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a978:	4313      	orrs	r3, r2
 800a97a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a97c:	2300      	movs	r3, #0
}
 800a97e:	4618      	mov	r0, r3
 800a980:	3714      	adds	r7, #20
 800a982:	46bd      	mov	sp, r7
 800a984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a988:	4770      	bx	lr

0800a98a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800a98a:	b480      	push	{r7}
 800a98c:	b087      	sub	sp, #28
 800a98e:	af00      	add	r7, sp, #0
 800a990:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800a996:	693b      	ldr	r3, [r7, #16]
 800a998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a99c:	689b      	ldr	r3, [r3, #8]
 800a99e:	f003 0306 	and.w	r3, r3, #6
 800a9a2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d102      	bne.n	800a9b0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	75fb      	strb	r3, [r7, #23]
 800a9ae:	e00a      	b.n	800a9c6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	2b02      	cmp	r3, #2
 800a9b4:	d002      	beq.n	800a9bc <USB_GetDevSpeed+0x32>
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	2b06      	cmp	r3, #6
 800a9ba:	d102      	bne.n	800a9c2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800a9bc:	2302      	movs	r3, #2
 800a9be:	75fb      	strb	r3, [r7, #23]
 800a9c0:	e001      	b.n	800a9c6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800a9c2:	230f      	movs	r3, #15
 800a9c4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800a9c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9c8:	4618      	mov	r0, r3
 800a9ca:	371c      	adds	r7, #28
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d2:	4770      	bx	lr

0800a9d4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a9d4:	b480      	push	{r7}
 800a9d6:	b085      	sub	sp, #20
 800a9d8:	af00      	add	r7, sp, #0
 800a9da:	6078      	str	r0, [r7, #4]
 800a9dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	781b      	ldrb	r3, [r3, #0]
 800a9e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a9e8:	683b      	ldr	r3, [r7, #0]
 800a9ea:	785b      	ldrb	r3, [r3, #1]
 800a9ec:	2b01      	cmp	r3, #1
 800a9ee:	d13a      	bne.n	800aa66 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9f6:	69da      	ldr	r2, [r3, #28]
 800a9f8:	683b      	ldr	r3, [r7, #0]
 800a9fa:	781b      	ldrb	r3, [r3, #0]
 800a9fc:	f003 030f 	and.w	r3, r3, #15
 800aa00:	2101      	movs	r1, #1
 800aa02:	fa01 f303 	lsl.w	r3, r1, r3
 800aa06:	b29b      	uxth	r3, r3
 800aa08:	68f9      	ldr	r1, [r7, #12]
 800aa0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aa0e:	4313      	orrs	r3, r2
 800aa10:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800aa12:	68bb      	ldr	r3, [r7, #8]
 800aa14:	015a      	lsls	r2, r3, #5
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	4413      	add	r3, r2
 800aa1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d155      	bne.n	800aad4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	015a      	lsls	r2, r3, #5
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	4413      	add	r3, r2
 800aa30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa34:	681a      	ldr	r2, [r3, #0]
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	689b      	ldr	r3, [r3, #8]
 800aa3a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	791b      	ldrb	r3, [r3, #4]
 800aa42:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800aa44:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	059b      	lsls	r3, r3, #22
 800aa4a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800aa4c:	4313      	orrs	r3, r2
 800aa4e:	68ba      	ldr	r2, [r7, #8]
 800aa50:	0151      	lsls	r1, r2, #5
 800aa52:	68fa      	ldr	r2, [r7, #12]
 800aa54:	440a      	add	r2, r1
 800aa56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aa5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aa5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aa62:	6013      	str	r3, [r2, #0]
 800aa64:	e036      	b.n	800aad4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa6c:	69da      	ldr	r2, [r3, #28]
 800aa6e:	683b      	ldr	r3, [r7, #0]
 800aa70:	781b      	ldrb	r3, [r3, #0]
 800aa72:	f003 030f 	and.w	r3, r3, #15
 800aa76:	2101      	movs	r1, #1
 800aa78:	fa01 f303 	lsl.w	r3, r1, r3
 800aa7c:	041b      	lsls	r3, r3, #16
 800aa7e:	68f9      	ldr	r1, [r7, #12]
 800aa80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aa84:	4313      	orrs	r3, r2
 800aa86:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	015a      	lsls	r2, r3, #5
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	4413      	add	r3, r2
 800aa90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d11a      	bne.n	800aad4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	015a      	lsls	r2, r3, #5
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	4413      	add	r3, r2
 800aaa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaaa:	681a      	ldr	r2, [r3, #0]
 800aaac:	683b      	ldr	r3, [r7, #0]
 800aaae:	689b      	ldr	r3, [r3, #8]
 800aab0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	791b      	ldrb	r3, [r3, #4]
 800aab8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800aaba:	430b      	orrs	r3, r1
 800aabc:	4313      	orrs	r3, r2
 800aabe:	68ba      	ldr	r2, [r7, #8]
 800aac0:	0151      	lsls	r1, r2, #5
 800aac2:	68fa      	ldr	r2, [r7, #12]
 800aac4:	440a      	add	r2, r1
 800aac6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aaca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aace:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800aad2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800aad4:	2300      	movs	r3, #0
}
 800aad6:	4618      	mov	r0, r3
 800aad8:	3714      	adds	r7, #20
 800aada:	46bd      	mov	sp, r7
 800aadc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aae0:	4770      	bx	lr
	...

0800aae4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800aae4:	b480      	push	{r7}
 800aae6:	b085      	sub	sp, #20
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
 800aaec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	781b      	ldrb	r3, [r3, #0]
 800aaf6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	785b      	ldrb	r3, [r3, #1]
 800aafc:	2b01      	cmp	r3, #1
 800aafe:	d161      	bne.n	800abc4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	015a      	lsls	r2, r3, #5
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	4413      	add	r3, r2
 800ab08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab0c:	681b      	ldr	r3, [r3, #0]
 800ab0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ab12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ab16:	d11f      	bne.n	800ab58 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	015a      	lsls	r2, r3, #5
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	4413      	add	r3, r2
 800ab20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	68ba      	ldr	r2, [r7, #8]
 800ab28:	0151      	lsls	r1, r2, #5
 800ab2a:	68fa      	ldr	r2, [r7, #12]
 800ab2c:	440a      	add	r2, r1
 800ab2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab32:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ab36:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ab38:	68bb      	ldr	r3, [r7, #8]
 800ab3a:	015a      	lsls	r2, r3, #5
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	4413      	add	r3, r2
 800ab40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	68ba      	ldr	r2, [r7, #8]
 800ab48:	0151      	lsls	r1, r2, #5
 800ab4a:	68fa      	ldr	r2, [r7, #12]
 800ab4c:	440a      	add	r2, r1
 800ab4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ab56:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	781b      	ldrb	r3, [r3, #0]
 800ab64:	f003 030f 	and.w	r3, r3, #15
 800ab68:	2101      	movs	r1, #1
 800ab6a:	fa01 f303 	lsl.w	r3, r1, r3
 800ab6e:	b29b      	uxth	r3, r3
 800ab70:	43db      	mvns	r3, r3
 800ab72:	68f9      	ldr	r1, [r7, #12]
 800ab74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ab78:	4013      	ands	r3, r2
 800ab7a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab82:	69da      	ldr	r2, [r3, #28]
 800ab84:	683b      	ldr	r3, [r7, #0]
 800ab86:	781b      	ldrb	r3, [r3, #0]
 800ab88:	f003 030f 	and.w	r3, r3, #15
 800ab8c:	2101      	movs	r1, #1
 800ab8e:	fa01 f303 	lsl.w	r3, r1, r3
 800ab92:	b29b      	uxth	r3, r3
 800ab94:	43db      	mvns	r3, r3
 800ab96:	68f9      	ldr	r1, [r7, #12]
 800ab98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ab9c:	4013      	ands	r3, r2
 800ab9e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800aba0:	68bb      	ldr	r3, [r7, #8]
 800aba2:	015a      	lsls	r2, r3, #5
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	4413      	add	r3, r2
 800aba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abac:	681a      	ldr	r2, [r3, #0]
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	0159      	lsls	r1, r3, #5
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	440b      	add	r3, r1
 800abb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abba:	4619      	mov	r1, r3
 800abbc:	4b35      	ldr	r3, [pc, #212]	; (800ac94 <USB_DeactivateEndpoint+0x1b0>)
 800abbe:	4013      	ands	r3, r2
 800abc0:	600b      	str	r3, [r1, #0]
 800abc2:	e060      	b.n	800ac86 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800abc4:	68bb      	ldr	r3, [r7, #8]
 800abc6:	015a      	lsls	r2, r3, #5
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	4413      	add	r3, r2
 800abcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800abd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800abda:	d11f      	bne.n	800ac1c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	015a      	lsls	r2, r3, #5
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	4413      	add	r3, r2
 800abe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	68ba      	ldr	r2, [r7, #8]
 800abec:	0151      	lsls	r1, r2, #5
 800abee:	68fa      	ldr	r2, [r7, #12]
 800abf0:	440a      	add	r2, r1
 800abf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800abf6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800abfa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800abfc:	68bb      	ldr	r3, [r7, #8]
 800abfe:	015a      	lsls	r2, r3, #5
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	4413      	add	r3, r2
 800ac04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	68ba      	ldr	r2, [r7, #8]
 800ac0c:	0151      	lsls	r1, r2, #5
 800ac0e:	68fa      	ldr	r2, [r7, #12]
 800ac10:	440a      	add	r2, r1
 800ac12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ac1a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	781b      	ldrb	r3, [r3, #0]
 800ac28:	f003 030f 	and.w	r3, r3, #15
 800ac2c:	2101      	movs	r1, #1
 800ac2e:	fa01 f303 	lsl.w	r3, r1, r3
 800ac32:	041b      	lsls	r3, r3, #16
 800ac34:	43db      	mvns	r3, r3
 800ac36:	68f9      	ldr	r1, [r7, #12]
 800ac38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac3c:	4013      	ands	r3, r2
 800ac3e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac46:	69da      	ldr	r2, [r3, #28]
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	781b      	ldrb	r3, [r3, #0]
 800ac4c:	f003 030f 	and.w	r3, r3, #15
 800ac50:	2101      	movs	r1, #1
 800ac52:	fa01 f303 	lsl.w	r3, r1, r3
 800ac56:	041b      	lsls	r3, r3, #16
 800ac58:	43db      	mvns	r3, r3
 800ac5a:	68f9      	ldr	r1, [r7, #12]
 800ac5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac60:	4013      	ands	r3, r2
 800ac62:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	015a      	lsls	r2, r3, #5
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	4413      	add	r3, r2
 800ac6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac70:	681a      	ldr	r2, [r3, #0]
 800ac72:	68bb      	ldr	r3, [r7, #8]
 800ac74:	0159      	lsls	r1, r3, #5
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	440b      	add	r3, r1
 800ac7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac7e:	4619      	mov	r1, r3
 800ac80:	4b05      	ldr	r3, [pc, #20]	; (800ac98 <USB_DeactivateEndpoint+0x1b4>)
 800ac82:	4013      	ands	r3, r2
 800ac84:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ac86:	2300      	movs	r3, #0
}
 800ac88:	4618      	mov	r0, r3
 800ac8a:	3714      	adds	r7, #20
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac92:	4770      	bx	lr
 800ac94:	ec337800 	.word	0xec337800
 800ac98:	eff37800 	.word	0xeff37800

0800ac9c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b08a      	sub	sp, #40	; 0x28
 800aca0:	af02      	add	r7, sp, #8
 800aca2:	60f8      	str	r0, [r7, #12]
 800aca4:	60b9      	str	r1, [r7, #8]
 800aca6:	4613      	mov	r3, r2
 800aca8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800acae:	68bb      	ldr	r3, [r7, #8]
 800acb0:	781b      	ldrb	r3, [r3, #0]
 800acb2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	785b      	ldrb	r3, [r3, #1]
 800acb8:	2b01      	cmp	r3, #1
 800acba:	f040 817a 	bne.w	800afb2 <USB_EPStartXfer+0x316>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800acbe:	68bb      	ldr	r3, [r7, #8]
 800acc0:	691b      	ldr	r3, [r3, #16]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d132      	bne.n	800ad2c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800acc6:	69bb      	ldr	r3, [r7, #24]
 800acc8:	015a      	lsls	r2, r3, #5
 800acca:	69fb      	ldr	r3, [r7, #28]
 800accc:	4413      	add	r3, r2
 800acce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acd2:	691b      	ldr	r3, [r3, #16]
 800acd4:	69ba      	ldr	r2, [r7, #24]
 800acd6:	0151      	lsls	r1, r2, #5
 800acd8:	69fa      	ldr	r2, [r7, #28]
 800acda:	440a      	add	r2, r1
 800acdc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ace0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ace4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ace8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800acea:	69bb      	ldr	r3, [r7, #24]
 800acec:	015a      	lsls	r2, r3, #5
 800acee:	69fb      	ldr	r3, [r7, #28]
 800acf0:	4413      	add	r3, r2
 800acf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800acf6:	691b      	ldr	r3, [r3, #16]
 800acf8:	69ba      	ldr	r2, [r7, #24]
 800acfa:	0151      	lsls	r1, r2, #5
 800acfc:	69fa      	ldr	r2, [r7, #28]
 800acfe:	440a      	add	r2, r1
 800ad00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ad08:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ad0a:	69bb      	ldr	r3, [r7, #24]
 800ad0c:	015a      	lsls	r2, r3, #5
 800ad0e:	69fb      	ldr	r3, [r7, #28]
 800ad10:	4413      	add	r3, r2
 800ad12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad16:	691b      	ldr	r3, [r3, #16]
 800ad18:	69ba      	ldr	r2, [r7, #24]
 800ad1a:	0151      	lsls	r1, r2, #5
 800ad1c:	69fa      	ldr	r2, [r7, #28]
 800ad1e:	440a      	add	r2, r1
 800ad20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad24:	0cdb      	lsrs	r3, r3, #19
 800ad26:	04db      	lsls	r3, r3, #19
 800ad28:	6113      	str	r3, [r2, #16]
 800ad2a:	e092      	b.n	800ae52 <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ad2c:	69bb      	ldr	r3, [r7, #24]
 800ad2e:	015a      	lsls	r2, r3, #5
 800ad30:	69fb      	ldr	r3, [r7, #28]
 800ad32:	4413      	add	r3, r2
 800ad34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad38:	691b      	ldr	r3, [r3, #16]
 800ad3a:	69ba      	ldr	r2, [r7, #24]
 800ad3c:	0151      	lsls	r1, r2, #5
 800ad3e:	69fa      	ldr	r2, [r7, #28]
 800ad40:	440a      	add	r2, r1
 800ad42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad46:	0cdb      	lsrs	r3, r3, #19
 800ad48:	04db      	lsls	r3, r3, #19
 800ad4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ad4c:	69bb      	ldr	r3, [r7, #24]
 800ad4e:	015a      	lsls	r2, r3, #5
 800ad50:	69fb      	ldr	r3, [r7, #28]
 800ad52:	4413      	add	r3, r2
 800ad54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad58:	691b      	ldr	r3, [r3, #16]
 800ad5a:	69ba      	ldr	r2, [r7, #24]
 800ad5c:	0151      	lsls	r1, r2, #5
 800ad5e:	69fa      	ldr	r2, [r7, #28]
 800ad60:	440a      	add	r2, r1
 800ad62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad66:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800ad6a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800ad6e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800ad70:	69bb      	ldr	r3, [r7, #24]
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d11a      	bne.n	800adac <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800ad76:	68bb      	ldr	r3, [r7, #8]
 800ad78:	691a      	ldr	r2, [r3, #16]
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	689b      	ldr	r3, [r3, #8]
 800ad7e:	429a      	cmp	r2, r3
 800ad80:	d903      	bls.n	800ad8a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800ad82:	68bb      	ldr	r3, [r7, #8]
 800ad84:	689a      	ldr	r2, [r3, #8]
 800ad86:	68bb      	ldr	r3, [r7, #8]
 800ad88:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800ad8a:	69bb      	ldr	r3, [r7, #24]
 800ad8c:	015a      	lsls	r2, r3, #5
 800ad8e:	69fb      	ldr	r3, [r7, #28]
 800ad90:	4413      	add	r3, r2
 800ad92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad96:	691b      	ldr	r3, [r3, #16]
 800ad98:	69ba      	ldr	r2, [r7, #24]
 800ad9a:	0151      	lsls	r1, r2, #5
 800ad9c:	69fa      	ldr	r2, [r7, #28]
 800ad9e:	440a      	add	r2, r1
 800ada0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ada4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ada8:	6113      	str	r3, [r2, #16]
 800adaa:	e01b      	b.n	800ade4 <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800adac:	69bb      	ldr	r3, [r7, #24]
 800adae:	015a      	lsls	r2, r3, #5
 800adb0:	69fb      	ldr	r3, [r7, #28]
 800adb2:	4413      	add	r3, r2
 800adb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adb8:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800adba:	68bb      	ldr	r3, [r7, #8]
 800adbc:	6919      	ldr	r1, [r3, #16]
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	689b      	ldr	r3, [r3, #8]
 800adc2:	440b      	add	r3, r1
 800adc4:	1e59      	subs	r1, r3, #1
 800adc6:	68bb      	ldr	r3, [r7, #8]
 800adc8:	689b      	ldr	r3, [r3, #8]
 800adca:	fbb1 f3f3 	udiv	r3, r1, r3
 800adce:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800add0:	4ba2      	ldr	r3, [pc, #648]	; (800b05c <USB_EPStartXfer+0x3c0>)
 800add2:	400b      	ands	r3, r1
 800add4:	69b9      	ldr	r1, [r7, #24]
 800add6:	0148      	lsls	r0, r1, #5
 800add8:	69f9      	ldr	r1, [r7, #28]
 800adda:	4401      	add	r1, r0
 800addc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ade0:	4313      	orrs	r3, r2
 800ade2:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800ade4:	69bb      	ldr	r3, [r7, #24]
 800ade6:	015a      	lsls	r2, r3, #5
 800ade8:	69fb      	ldr	r3, [r7, #28]
 800adea:	4413      	add	r3, r2
 800adec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adf0:	691a      	ldr	r2, [r3, #16]
 800adf2:	68bb      	ldr	r3, [r7, #8]
 800adf4:	691b      	ldr	r3, [r3, #16]
 800adf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800adfa:	69b9      	ldr	r1, [r7, #24]
 800adfc:	0148      	lsls	r0, r1, #5
 800adfe:	69f9      	ldr	r1, [r7, #28]
 800ae00:	4401      	add	r1, r0
 800ae02:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800ae06:	4313      	orrs	r3, r2
 800ae08:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800ae0a:	68bb      	ldr	r3, [r7, #8]
 800ae0c:	791b      	ldrb	r3, [r3, #4]
 800ae0e:	2b01      	cmp	r3, #1
 800ae10:	d11f      	bne.n	800ae52 <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800ae12:	69bb      	ldr	r3, [r7, #24]
 800ae14:	015a      	lsls	r2, r3, #5
 800ae16:	69fb      	ldr	r3, [r7, #28]
 800ae18:	4413      	add	r3, r2
 800ae1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae1e:	691b      	ldr	r3, [r3, #16]
 800ae20:	69ba      	ldr	r2, [r7, #24]
 800ae22:	0151      	lsls	r1, r2, #5
 800ae24:	69fa      	ldr	r2, [r7, #28]
 800ae26:	440a      	add	r2, r1
 800ae28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae2c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800ae30:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800ae32:	69bb      	ldr	r3, [r7, #24]
 800ae34:	015a      	lsls	r2, r3, #5
 800ae36:	69fb      	ldr	r3, [r7, #28]
 800ae38:	4413      	add	r3, r2
 800ae3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae3e:	691b      	ldr	r3, [r3, #16]
 800ae40:	69ba      	ldr	r2, [r7, #24]
 800ae42:	0151      	lsls	r1, r2, #5
 800ae44:	69fa      	ldr	r2, [r7, #28]
 800ae46:	440a      	add	r2, r1
 800ae48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae4c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ae50:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800ae52:	79fb      	ldrb	r3, [r7, #7]
 800ae54:	2b01      	cmp	r3, #1
 800ae56:	d14b      	bne.n	800aef0 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	69db      	ldr	r3, [r3, #28]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d009      	beq.n	800ae74 <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800ae60:	69bb      	ldr	r3, [r7, #24]
 800ae62:	015a      	lsls	r2, r3, #5
 800ae64:	69fb      	ldr	r3, [r7, #28]
 800ae66:	4413      	add	r3, r2
 800ae68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae6c:	461a      	mov	r2, r3
 800ae6e:	68bb      	ldr	r3, [r7, #8]
 800ae70:	69db      	ldr	r3, [r3, #28]
 800ae72:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800ae74:	68bb      	ldr	r3, [r7, #8]
 800ae76:	791b      	ldrb	r3, [r3, #4]
 800ae78:	2b01      	cmp	r3, #1
 800ae7a:	d128      	bne.n	800aece <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ae7c:	69fb      	ldr	r3, [r7, #28]
 800ae7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae82:	689b      	ldr	r3, [r3, #8]
 800ae84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae88:	2b00      	cmp	r3, #0
 800ae8a:	d110      	bne.n	800aeae <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ae8c:	69bb      	ldr	r3, [r7, #24]
 800ae8e:	015a      	lsls	r2, r3, #5
 800ae90:	69fb      	ldr	r3, [r7, #28]
 800ae92:	4413      	add	r3, r2
 800ae94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	69ba      	ldr	r2, [r7, #24]
 800ae9c:	0151      	lsls	r1, r2, #5
 800ae9e:	69fa      	ldr	r2, [r7, #28]
 800aea0:	440a      	add	r2, r1
 800aea2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aea6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800aeaa:	6013      	str	r3, [r2, #0]
 800aeac:	e00f      	b.n	800aece <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800aeae:	69bb      	ldr	r3, [r7, #24]
 800aeb0:	015a      	lsls	r2, r3, #5
 800aeb2:	69fb      	ldr	r3, [r7, #28]
 800aeb4:	4413      	add	r3, r2
 800aeb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	69ba      	ldr	r2, [r7, #24]
 800aebe:	0151      	lsls	r1, r2, #5
 800aec0:	69fa      	ldr	r2, [r7, #28]
 800aec2:	440a      	add	r2, r1
 800aec4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800aecc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800aece:	69bb      	ldr	r3, [r7, #24]
 800aed0:	015a      	lsls	r2, r3, #5
 800aed2:	69fb      	ldr	r3, [r7, #28]
 800aed4:	4413      	add	r3, r2
 800aed6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	69ba      	ldr	r2, [r7, #24]
 800aede:	0151      	lsls	r1, r2, #5
 800aee0:	69fa      	ldr	r2, [r7, #28]
 800aee2:	440a      	add	r2, r1
 800aee4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aee8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800aeec:	6013      	str	r3, [r2, #0]
 800aeee:	e165      	b.n	800b1bc <USB_EPStartXfer+0x520>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800aef0:	69bb      	ldr	r3, [r7, #24]
 800aef2:	015a      	lsls	r2, r3, #5
 800aef4:	69fb      	ldr	r3, [r7, #28]
 800aef6:	4413      	add	r3, r2
 800aef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	69ba      	ldr	r2, [r7, #24]
 800af00:	0151      	lsls	r1, r2, #5
 800af02:	69fa      	ldr	r2, [r7, #28]
 800af04:	440a      	add	r2, r1
 800af06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af0a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800af0e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800af10:	68bb      	ldr	r3, [r7, #8]
 800af12:	791b      	ldrb	r3, [r3, #4]
 800af14:	2b01      	cmp	r3, #1
 800af16:	d015      	beq.n	800af44 <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800af18:	68bb      	ldr	r3, [r7, #8]
 800af1a:	691b      	ldr	r3, [r3, #16]
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	f000 814d 	beq.w	800b1bc <USB_EPStartXfer+0x520>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800af22:	69fb      	ldr	r3, [r7, #28]
 800af24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800af2a:	68bb      	ldr	r3, [r7, #8]
 800af2c:	781b      	ldrb	r3, [r3, #0]
 800af2e:	f003 030f 	and.w	r3, r3, #15
 800af32:	2101      	movs	r1, #1
 800af34:	fa01 f303 	lsl.w	r3, r1, r3
 800af38:	69f9      	ldr	r1, [r7, #28]
 800af3a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af3e:	4313      	orrs	r3, r2
 800af40:	634b      	str	r3, [r1, #52]	; 0x34
 800af42:	e13b      	b.n	800b1bc <USB_EPStartXfer+0x520>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800af44:	69fb      	ldr	r3, [r7, #28]
 800af46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af4a:	689b      	ldr	r3, [r3, #8]
 800af4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af50:	2b00      	cmp	r3, #0
 800af52:	d110      	bne.n	800af76 <USB_EPStartXfer+0x2da>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800af54:	69bb      	ldr	r3, [r7, #24]
 800af56:	015a      	lsls	r2, r3, #5
 800af58:	69fb      	ldr	r3, [r7, #28]
 800af5a:	4413      	add	r3, r2
 800af5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	69ba      	ldr	r2, [r7, #24]
 800af64:	0151      	lsls	r1, r2, #5
 800af66:	69fa      	ldr	r2, [r7, #28]
 800af68:	440a      	add	r2, r1
 800af6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af6e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800af72:	6013      	str	r3, [r2, #0]
 800af74:	e00f      	b.n	800af96 <USB_EPStartXfer+0x2fa>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800af76:	69bb      	ldr	r3, [r7, #24]
 800af78:	015a      	lsls	r2, r3, #5
 800af7a:	69fb      	ldr	r3, [r7, #28]
 800af7c:	4413      	add	r3, r2
 800af7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	69ba      	ldr	r2, [r7, #24]
 800af86:	0151      	lsls	r1, r2, #5
 800af88:	69fa      	ldr	r2, [r7, #28]
 800af8a:	440a      	add	r2, r1
 800af8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800af94:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800af96:	68bb      	ldr	r3, [r7, #8]
 800af98:	68d9      	ldr	r1, [r3, #12]
 800af9a:	68bb      	ldr	r3, [r7, #8]
 800af9c:	781a      	ldrb	r2, [r3, #0]
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	691b      	ldr	r3, [r3, #16]
 800afa2:	b298      	uxth	r0, r3
 800afa4:	79fb      	ldrb	r3, [r7, #7]
 800afa6:	9300      	str	r3, [sp, #0]
 800afa8:	4603      	mov	r3, r0
 800afaa:	68f8      	ldr	r0, [r7, #12]
 800afac:	f000 f9b8 	bl	800b320 <USB_WritePacket>
 800afb0:	e104      	b.n	800b1bc <USB_EPStartXfer+0x520>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800afb2:	69bb      	ldr	r3, [r7, #24]
 800afb4:	015a      	lsls	r2, r3, #5
 800afb6:	69fb      	ldr	r3, [r7, #28]
 800afb8:	4413      	add	r3, r2
 800afba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afbe:	691b      	ldr	r3, [r3, #16]
 800afc0:	69ba      	ldr	r2, [r7, #24]
 800afc2:	0151      	lsls	r1, r2, #5
 800afc4:	69fa      	ldr	r2, [r7, #28]
 800afc6:	440a      	add	r2, r1
 800afc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800afcc:	0cdb      	lsrs	r3, r3, #19
 800afce:	04db      	lsls	r3, r3, #19
 800afd0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800afd2:	69bb      	ldr	r3, [r7, #24]
 800afd4:	015a      	lsls	r2, r3, #5
 800afd6:	69fb      	ldr	r3, [r7, #28]
 800afd8:	4413      	add	r3, r2
 800afda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afde:	691b      	ldr	r3, [r3, #16]
 800afe0:	69ba      	ldr	r2, [r7, #24]
 800afe2:	0151      	lsls	r1, r2, #5
 800afe4:	69fa      	ldr	r2, [r7, #28]
 800afe6:	440a      	add	r2, r1
 800afe8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800afec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800aff0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800aff4:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800aff6:	69bb      	ldr	r3, [r7, #24]
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d131      	bne.n	800b060 <USB_EPStartXfer+0x3c4>
    {
      if (ep->xfer_len > 0U)
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	691b      	ldr	r3, [r3, #16]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d003      	beq.n	800b00c <USB_EPStartXfer+0x370>
      {
        ep->xfer_len = ep->maxpacket;
 800b004:	68bb      	ldr	r3, [r7, #8]
 800b006:	689a      	ldr	r2, [r3, #8]
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800b00c:	68bb      	ldr	r3, [r7, #8]
 800b00e:	689a      	ldr	r2, [r3, #8]
 800b010:	68bb      	ldr	r3, [r7, #8]
 800b012:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b014:	69bb      	ldr	r3, [r7, #24]
 800b016:	015a      	lsls	r2, r3, #5
 800b018:	69fb      	ldr	r3, [r7, #28]
 800b01a:	4413      	add	r3, r2
 800b01c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b020:	691a      	ldr	r2, [r3, #16]
 800b022:	68bb      	ldr	r3, [r7, #8]
 800b024:	6a1b      	ldr	r3, [r3, #32]
 800b026:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b02a:	69b9      	ldr	r1, [r7, #24]
 800b02c:	0148      	lsls	r0, r1, #5
 800b02e:	69f9      	ldr	r1, [r7, #28]
 800b030:	4401      	add	r1, r0
 800b032:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b036:	4313      	orrs	r3, r2
 800b038:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b03a:	69bb      	ldr	r3, [r7, #24]
 800b03c:	015a      	lsls	r2, r3, #5
 800b03e:	69fb      	ldr	r3, [r7, #28]
 800b040:	4413      	add	r3, r2
 800b042:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b046:	691b      	ldr	r3, [r3, #16]
 800b048:	69ba      	ldr	r2, [r7, #24]
 800b04a:	0151      	lsls	r1, r2, #5
 800b04c:	69fa      	ldr	r2, [r7, #28]
 800b04e:	440a      	add	r2, r1
 800b050:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b054:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b058:	6113      	str	r3, [r2, #16]
 800b05a:	e061      	b.n	800b120 <USB_EPStartXfer+0x484>
 800b05c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800b060:	68bb      	ldr	r3, [r7, #8]
 800b062:	691b      	ldr	r3, [r3, #16]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d123      	bne.n	800b0b0 <USB_EPStartXfer+0x414>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b068:	69bb      	ldr	r3, [r7, #24]
 800b06a:	015a      	lsls	r2, r3, #5
 800b06c:	69fb      	ldr	r3, [r7, #28]
 800b06e:	4413      	add	r3, r2
 800b070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b074:	691a      	ldr	r2, [r3, #16]
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	689b      	ldr	r3, [r3, #8]
 800b07a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b07e:	69b9      	ldr	r1, [r7, #24]
 800b080:	0148      	lsls	r0, r1, #5
 800b082:	69f9      	ldr	r1, [r7, #28]
 800b084:	4401      	add	r1, r0
 800b086:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b08a:	4313      	orrs	r3, r2
 800b08c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b08e:	69bb      	ldr	r3, [r7, #24]
 800b090:	015a      	lsls	r2, r3, #5
 800b092:	69fb      	ldr	r3, [r7, #28]
 800b094:	4413      	add	r3, r2
 800b096:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b09a:	691b      	ldr	r3, [r3, #16]
 800b09c:	69ba      	ldr	r2, [r7, #24]
 800b09e:	0151      	lsls	r1, r2, #5
 800b0a0:	69fa      	ldr	r2, [r7, #28]
 800b0a2:	440a      	add	r2, r1
 800b0a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b0a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b0ac:	6113      	str	r3, [r2, #16]
 800b0ae:	e037      	b.n	800b120 <USB_EPStartXfer+0x484>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	691a      	ldr	r2, [r3, #16]
 800b0b4:	68bb      	ldr	r3, [r7, #8]
 800b0b6:	689b      	ldr	r3, [r3, #8]
 800b0b8:	4413      	add	r3, r2
 800b0ba:	1e5a      	subs	r2, r3, #1
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	689b      	ldr	r3, [r3, #8]
 800b0c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b0c4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	689b      	ldr	r3, [r3, #8]
 800b0ca:	8afa      	ldrh	r2, [r7, #22]
 800b0cc:	fb03 f202 	mul.w	r2, r3, r2
 800b0d0:	68bb      	ldr	r3, [r7, #8]
 800b0d2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b0d4:	69bb      	ldr	r3, [r7, #24]
 800b0d6:	015a      	lsls	r2, r3, #5
 800b0d8:	69fb      	ldr	r3, [r7, #28]
 800b0da:	4413      	add	r3, r2
 800b0dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b0e0:	691a      	ldr	r2, [r3, #16]
 800b0e2:	8afb      	ldrh	r3, [r7, #22]
 800b0e4:	04d9      	lsls	r1, r3, #19
 800b0e6:	4b38      	ldr	r3, [pc, #224]	; (800b1c8 <USB_EPStartXfer+0x52c>)
 800b0e8:	400b      	ands	r3, r1
 800b0ea:	69b9      	ldr	r1, [r7, #24]
 800b0ec:	0148      	lsls	r0, r1, #5
 800b0ee:	69f9      	ldr	r1, [r7, #28]
 800b0f0:	4401      	add	r1, r0
 800b0f2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b0f6:	4313      	orrs	r3, r2
 800b0f8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b0fa:	69bb      	ldr	r3, [r7, #24]
 800b0fc:	015a      	lsls	r2, r3, #5
 800b0fe:	69fb      	ldr	r3, [r7, #28]
 800b100:	4413      	add	r3, r2
 800b102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b106:	691a      	ldr	r2, [r3, #16]
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	6a1b      	ldr	r3, [r3, #32]
 800b10c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b110:	69b9      	ldr	r1, [r7, #24]
 800b112:	0148      	lsls	r0, r1, #5
 800b114:	69f9      	ldr	r1, [r7, #28]
 800b116:	4401      	add	r1, r0
 800b118:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b11c:	4313      	orrs	r3, r2
 800b11e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800b120:	79fb      	ldrb	r3, [r7, #7]
 800b122:	2b01      	cmp	r3, #1
 800b124:	d10d      	bne.n	800b142 <USB_EPStartXfer+0x4a6>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	68db      	ldr	r3, [r3, #12]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d009      	beq.n	800b142 <USB_EPStartXfer+0x4a6>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b12e:	68bb      	ldr	r3, [r7, #8]
 800b130:	68d9      	ldr	r1, [r3, #12]
 800b132:	69bb      	ldr	r3, [r7, #24]
 800b134:	015a      	lsls	r2, r3, #5
 800b136:	69fb      	ldr	r3, [r7, #28]
 800b138:	4413      	add	r3, r2
 800b13a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b13e:	460a      	mov	r2, r1
 800b140:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b142:	68bb      	ldr	r3, [r7, #8]
 800b144:	791b      	ldrb	r3, [r3, #4]
 800b146:	2b01      	cmp	r3, #1
 800b148:	d128      	bne.n	800b19c <USB_EPStartXfer+0x500>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b14a:	69fb      	ldr	r3, [r7, #28]
 800b14c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b150:	689b      	ldr	r3, [r3, #8]
 800b152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b156:	2b00      	cmp	r3, #0
 800b158:	d110      	bne.n	800b17c <USB_EPStartXfer+0x4e0>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b15a:	69bb      	ldr	r3, [r7, #24]
 800b15c:	015a      	lsls	r2, r3, #5
 800b15e:	69fb      	ldr	r3, [r7, #28]
 800b160:	4413      	add	r3, r2
 800b162:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	69ba      	ldr	r2, [r7, #24]
 800b16a:	0151      	lsls	r1, r2, #5
 800b16c:	69fa      	ldr	r2, [r7, #28]
 800b16e:	440a      	add	r2, r1
 800b170:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b174:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b178:	6013      	str	r3, [r2, #0]
 800b17a:	e00f      	b.n	800b19c <USB_EPStartXfer+0x500>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b17c:	69bb      	ldr	r3, [r7, #24]
 800b17e:	015a      	lsls	r2, r3, #5
 800b180:	69fb      	ldr	r3, [r7, #28]
 800b182:	4413      	add	r3, r2
 800b184:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	69ba      	ldr	r2, [r7, #24]
 800b18c:	0151      	lsls	r1, r2, #5
 800b18e:	69fa      	ldr	r2, [r7, #28]
 800b190:	440a      	add	r2, r1
 800b192:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b196:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b19a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b19c:	69bb      	ldr	r3, [r7, #24]
 800b19e:	015a      	lsls	r2, r3, #5
 800b1a0:	69fb      	ldr	r3, [r7, #28]
 800b1a2:	4413      	add	r3, r2
 800b1a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	69ba      	ldr	r2, [r7, #24]
 800b1ac:	0151      	lsls	r1, r2, #5
 800b1ae:	69fa      	ldr	r2, [r7, #28]
 800b1b0:	440a      	add	r2, r1
 800b1b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b1b6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b1ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b1bc:	2300      	movs	r3, #0
}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	3720      	adds	r7, #32
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}
 800b1c6:	bf00      	nop
 800b1c8:	1ff80000 	.word	0x1ff80000

0800b1cc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b1cc:	b480      	push	{r7}
 800b1ce:	b087      	sub	sp, #28
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
 800b1d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b1da:	2300      	movs	r3, #0
 800b1dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	785b      	ldrb	r3, [r3, #1]
 800b1e6:	2b01      	cmp	r3, #1
 800b1e8:	d14a      	bne.n	800b280 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	781b      	ldrb	r3, [r3, #0]
 800b1ee:	015a      	lsls	r2, r3, #5
 800b1f0:	693b      	ldr	r3, [r7, #16]
 800b1f2:	4413      	add	r3, r2
 800b1f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b1fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b202:	f040 8086 	bne.w	800b312 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	781b      	ldrb	r3, [r3, #0]
 800b20a:	015a      	lsls	r2, r3, #5
 800b20c:	693b      	ldr	r3, [r7, #16]
 800b20e:	4413      	add	r3, r2
 800b210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	683a      	ldr	r2, [r7, #0]
 800b218:	7812      	ldrb	r2, [r2, #0]
 800b21a:	0151      	lsls	r1, r2, #5
 800b21c:	693a      	ldr	r2, [r7, #16]
 800b21e:	440a      	add	r2, r1
 800b220:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b224:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b228:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	781b      	ldrb	r3, [r3, #0]
 800b22e:	015a      	lsls	r2, r3, #5
 800b230:	693b      	ldr	r3, [r7, #16]
 800b232:	4413      	add	r3, r2
 800b234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	683a      	ldr	r2, [r7, #0]
 800b23c:	7812      	ldrb	r2, [r2, #0]
 800b23e:	0151      	lsls	r1, r2, #5
 800b240:	693a      	ldr	r2, [r7, #16]
 800b242:	440a      	add	r2, r1
 800b244:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b248:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b24c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	3301      	adds	r3, #1
 800b252:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	f242 7210 	movw	r2, #10000	; 0x2710
 800b25a:	4293      	cmp	r3, r2
 800b25c:	d902      	bls.n	800b264 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b25e:	2301      	movs	r3, #1
 800b260:	75fb      	strb	r3, [r7, #23]
          break;
 800b262:	e056      	b.n	800b312 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b264:	683b      	ldr	r3, [r7, #0]
 800b266:	781b      	ldrb	r3, [r3, #0]
 800b268:	015a      	lsls	r2, r3, #5
 800b26a:	693b      	ldr	r3, [r7, #16]
 800b26c:	4413      	add	r3, r2
 800b26e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b278:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b27c:	d0e7      	beq.n	800b24e <USB_EPStopXfer+0x82>
 800b27e:	e048      	b.n	800b312 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b280:	683b      	ldr	r3, [r7, #0]
 800b282:	781b      	ldrb	r3, [r3, #0]
 800b284:	015a      	lsls	r2, r3, #5
 800b286:	693b      	ldr	r3, [r7, #16]
 800b288:	4413      	add	r3, r2
 800b28a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b294:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b298:	d13b      	bne.n	800b312 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	781b      	ldrb	r3, [r3, #0]
 800b29e:	015a      	lsls	r2, r3, #5
 800b2a0:	693b      	ldr	r3, [r7, #16]
 800b2a2:	4413      	add	r3, r2
 800b2a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	683a      	ldr	r2, [r7, #0]
 800b2ac:	7812      	ldrb	r2, [r2, #0]
 800b2ae:	0151      	lsls	r1, r2, #5
 800b2b0:	693a      	ldr	r2, [r7, #16]
 800b2b2:	440a      	add	r2, r1
 800b2b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b2b8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b2bc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b2be:	683b      	ldr	r3, [r7, #0]
 800b2c0:	781b      	ldrb	r3, [r3, #0]
 800b2c2:	015a      	lsls	r2, r3, #5
 800b2c4:	693b      	ldr	r3, [r7, #16]
 800b2c6:	4413      	add	r3, r2
 800b2c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	683a      	ldr	r2, [r7, #0]
 800b2d0:	7812      	ldrb	r2, [r2, #0]
 800b2d2:	0151      	lsls	r1, r2, #5
 800b2d4:	693a      	ldr	r2, [r7, #16]
 800b2d6:	440a      	add	r2, r1
 800b2d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b2dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b2e0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	3301      	adds	r3, #1
 800b2e6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	f242 7210 	movw	r2, #10000	; 0x2710
 800b2ee:	4293      	cmp	r3, r2
 800b2f0:	d902      	bls.n	800b2f8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	75fb      	strb	r3, [r7, #23]
          break;
 800b2f6:	e00c      	b.n	800b312 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	781b      	ldrb	r3, [r3, #0]
 800b2fc:	015a      	lsls	r2, r3, #5
 800b2fe:	693b      	ldr	r3, [r7, #16]
 800b300:	4413      	add	r3, r2
 800b302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b30c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b310:	d0e7      	beq.n	800b2e2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b312:	7dfb      	ldrb	r3, [r7, #23]
}
 800b314:	4618      	mov	r0, r3
 800b316:	371c      	adds	r7, #28
 800b318:	46bd      	mov	sp, r7
 800b31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b31e:	4770      	bx	lr

0800b320 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b320:	b480      	push	{r7}
 800b322:	b089      	sub	sp, #36	; 0x24
 800b324:	af00      	add	r7, sp, #0
 800b326:	60f8      	str	r0, [r7, #12]
 800b328:	60b9      	str	r1, [r7, #8]
 800b32a:	4611      	mov	r1, r2
 800b32c:	461a      	mov	r2, r3
 800b32e:	460b      	mov	r3, r1
 800b330:	71fb      	strb	r3, [r7, #7]
 800b332:	4613      	mov	r3, r2
 800b334:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b33e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b342:	2b00      	cmp	r3, #0
 800b344:	d123      	bne.n	800b38e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b346:	88bb      	ldrh	r3, [r7, #4]
 800b348:	3303      	adds	r3, #3
 800b34a:	089b      	lsrs	r3, r3, #2
 800b34c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b34e:	2300      	movs	r3, #0
 800b350:	61bb      	str	r3, [r7, #24]
 800b352:	e018      	b.n	800b386 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b354:	79fb      	ldrb	r3, [r7, #7]
 800b356:	031a      	lsls	r2, r3, #12
 800b358:	697b      	ldr	r3, [r7, #20]
 800b35a:	4413      	add	r3, r2
 800b35c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b360:	461a      	mov	r2, r3
 800b362:	69fb      	ldr	r3, [r7, #28]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b368:	69fb      	ldr	r3, [r7, #28]
 800b36a:	3301      	adds	r3, #1
 800b36c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b36e:	69fb      	ldr	r3, [r7, #28]
 800b370:	3301      	adds	r3, #1
 800b372:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b374:	69fb      	ldr	r3, [r7, #28]
 800b376:	3301      	adds	r3, #1
 800b378:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b37a:	69fb      	ldr	r3, [r7, #28]
 800b37c:	3301      	adds	r3, #1
 800b37e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b380:	69bb      	ldr	r3, [r7, #24]
 800b382:	3301      	adds	r3, #1
 800b384:	61bb      	str	r3, [r7, #24]
 800b386:	69ba      	ldr	r2, [r7, #24]
 800b388:	693b      	ldr	r3, [r7, #16]
 800b38a:	429a      	cmp	r2, r3
 800b38c:	d3e2      	bcc.n	800b354 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b38e:	2300      	movs	r3, #0
}
 800b390:	4618      	mov	r0, r3
 800b392:	3724      	adds	r7, #36	; 0x24
 800b394:	46bd      	mov	sp, r7
 800b396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39a:	4770      	bx	lr

0800b39c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b39c:	b480      	push	{r7}
 800b39e:	b08b      	sub	sp, #44	; 0x2c
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	60f8      	str	r0, [r7, #12]
 800b3a4:	60b9      	str	r1, [r7, #8]
 800b3a6:	4613      	mov	r3, r2
 800b3a8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b3ae:	68bb      	ldr	r3, [r7, #8]
 800b3b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b3b2:	88fb      	ldrh	r3, [r7, #6]
 800b3b4:	089b      	lsrs	r3, r3, #2
 800b3b6:	b29b      	uxth	r3, r3
 800b3b8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b3ba:	88fb      	ldrh	r3, [r7, #6]
 800b3bc:	f003 0303 	and.w	r3, r3, #3
 800b3c0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	623b      	str	r3, [r7, #32]
 800b3c6:	e014      	b.n	800b3f2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b3c8:	69bb      	ldr	r3, [r7, #24]
 800b3ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b3ce:	681a      	ldr	r2, [r3, #0]
 800b3d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3d2:	601a      	str	r2, [r3, #0]
    pDest++;
 800b3d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3d6:	3301      	adds	r3, #1
 800b3d8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b3da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3dc:	3301      	adds	r3, #1
 800b3de:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b3e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3e2:	3301      	adds	r3, #1
 800b3e4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b3e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3e8:	3301      	adds	r3, #1
 800b3ea:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800b3ec:	6a3b      	ldr	r3, [r7, #32]
 800b3ee:	3301      	adds	r3, #1
 800b3f0:	623b      	str	r3, [r7, #32]
 800b3f2:	6a3a      	ldr	r2, [r7, #32]
 800b3f4:	697b      	ldr	r3, [r7, #20]
 800b3f6:	429a      	cmp	r2, r3
 800b3f8:	d3e6      	bcc.n	800b3c8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b3fa:	8bfb      	ldrh	r3, [r7, #30]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d01e      	beq.n	800b43e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b400:	2300      	movs	r3, #0
 800b402:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b404:	69bb      	ldr	r3, [r7, #24]
 800b406:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b40a:	461a      	mov	r2, r3
 800b40c:	f107 0310 	add.w	r3, r7, #16
 800b410:	6812      	ldr	r2, [r2, #0]
 800b412:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b414:	693a      	ldr	r2, [r7, #16]
 800b416:	6a3b      	ldr	r3, [r7, #32]
 800b418:	b2db      	uxtb	r3, r3
 800b41a:	00db      	lsls	r3, r3, #3
 800b41c:	fa22 f303 	lsr.w	r3, r2, r3
 800b420:	b2da      	uxtb	r2, r3
 800b422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b424:	701a      	strb	r2, [r3, #0]
      i++;
 800b426:	6a3b      	ldr	r3, [r7, #32]
 800b428:	3301      	adds	r3, #1
 800b42a:	623b      	str	r3, [r7, #32]
      pDest++;
 800b42c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b42e:	3301      	adds	r3, #1
 800b430:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800b432:	8bfb      	ldrh	r3, [r7, #30]
 800b434:	3b01      	subs	r3, #1
 800b436:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b438:	8bfb      	ldrh	r3, [r7, #30]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d1ea      	bne.n	800b414 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b43e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b440:	4618      	mov	r0, r3
 800b442:	372c      	adds	r7, #44	; 0x2c
 800b444:	46bd      	mov	sp, r7
 800b446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44a:	4770      	bx	lr

0800b44c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b44c:	b480      	push	{r7}
 800b44e:	b085      	sub	sp, #20
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
 800b454:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	781b      	ldrb	r3, [r3, #0]
 800b45e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b460:	683b      	ldr	r3, [r7, #0]
 800b462:	785b      	ldrb	r3, [r3, #1]
 800b464:	2b01      	cmp	r3, #1
 800b466:	d12c      	bne.n	800b4c2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b468:	68bb      	ldr	r3, [r7, #8]
 800b46a:	015a      	lsls	r2, r3, #5
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	4413      	add	r3, r2
 800b470:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	2b00      	cmp	r3, #0
 800b478:	db12      	blt.n	800b4a0 <USB_EPSetStall+0x54>
 800b47a:	68bb      	ldr	r3, [r7, #8]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d00f      	beq.n	800b4a0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b480:	68bb      	ldr	r3, [r7, #8]
 800b482:	015a      	lsls	r2, r3, #5
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	4413      	add	r3, r2
 800b488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	68ba      	ldr	r2, [r7, #8]
 800b490:	0151      	lsls	r1, r2, #5
 800b492:	68fa      	ldr	r2, [r7, #12]
 800b494:	440a      	add	r2, r1
 800b496:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b49a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b49e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b4a0:	68bb      	ldr	r3, [r7, #8]
 800b4a2:	015a      	lsls	r2, r3, #5
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	4413      	add	r3, r2
 800b4a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	68ba      	ldr	r2, [r7, #8]
 800b4b0:	0151      	lsls	r1, r2, #5
 800b4b2:	68fa      	ldr	r2, [r7, #12]
 800b4b4:	440a      	add	r2, r1
 800b4b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b4be:	6013      	str	r3, [r2, #0]
 800b4c0:	e02b      	b.n	800b51a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	015a      	lsls	r2, r3, #5
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	4413      	add	r3, r2
 800b4ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	db12      	blt.n	800b4fa <USB_EPSetStall+0xae>
 800b4d4:	68bb      	ldr	r3, [r7, #8]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d00f      	beq.n	800b4fa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b4da:	68bb      	ldr	r3, [r7, #8]
 800b4dc:	015a      	lsls	r2, r3, #5
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	4413      	add	r3, r2
 800b4e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	68ba      	ldr	r2, [r7, #8]
 800b4ea:	0151      	lsls	r1, r2, #5
 800b4ec:	68fa      	ldr	r2, [r7, #12]
 800b4ee:	440a      	add	r2, r1
 800b4f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b4f4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b4f8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b4fa:	68bb      	ldr	r3, [r7, #8]
 800b4fc:	015a      	lsls	r2, r3, #5
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	4413      	add	r3, r2
 800b502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	68ba      	ldr	r2, [r7, #8]
 800b50a:	0151      	lsls	r1, r2, #5
 800b50c:	68fa      	ldr	r2, [r7, #12]
 800b50e:	440a      	add	r2, r1
 800b510:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b514:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b518:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b51a:	2300      	movs	r3, #0
}
 800b51c:	4618      	mov	r0, r3
 800b51e:	3714      	adds	r7, #20
 800b520:	46bd      	mov	sp, r7
 800b522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b526:	4770      	bx	lr

0800b528 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800b528:	b480      	push	{r7}
 800b52a:	b085      	sub	sp, #20
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
 800b530:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b536:	683b      	ldr	r3, [r7, #0]
 800b538:	781b      	ldrb	r3, [r3, #0]
 800b53a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	785b      	ldrb	r3, [r3, #1]
 800b540:	2b01      	cmp	r3, #1
 800b542:	d128      	bne.n	800b596 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b544:	68bb      	ldr	r3, [r7, #8]
 800b546:	015a      	lsls	r2, r3, #5
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	4413      	add	r3, r2
 800b54c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	68ba      	ldr	r2, [r7, #8]
 800b554:	0151      	lsls	r1, r2, #5
 800b556:	68fa      	ldr	r2, [r7, #12]
 800b558:	440a      	add	r2, r1
 800b55a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b55e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b562:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b564:	683b      	ldr	r3, [r7, #0]
 800b566:	791b      	ldrb	r3, [r3, #4]
 800b568:	2b03      	cmp	r3, #3
 800b56a:	d003      	beq.n	800b574 <USB_EPClearStall+0x4c>
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	791b      	ldrb	r3, [r3, #4]
 800b570:	2b02      	cmp	r3, #2
 800b572:	d138      	bne.n	800b5e6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	015a      	lsls	r2, r3, #5
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	4413      	add	r3, r2
 800b57c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	68ba      	ldr	r2, [r7, #8]
 800b584:	0151      	lsls	r1, r2, #5
 800b586:	68fa      	ldr	r2, [r7, #12]
 800b588:	440a      	add	r2, r1
 800b58a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b58e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b592:	6013      	str	r3, [r2, #0]
 800b594:	e027      	b.n	800b5e6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b596:	68bb      	ldr	r3, [r7, #8]
 800b598:	015a      	lsls	r2, r3, #5
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	4413      	add	r3, r2
 800b59e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	68ba      	ldr	r2, [r7, #8]
 800b5a6:	0151      	lsls	r1, r2, #5
 800b5a8:	68fa      	ldr	r2, [r7, #12]
 800b5aa:	440a      	add	r2, r1
 800b5ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b5b0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b5b4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	791b      	ldrb	r3, [r3, #4]
 800b5ba:	2b03      	cmp	r3, #3
 800b5bc:	d003      	beq.n	800b5c6 <USB_EPClearStall+0x9e>
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	791b      	ldrb	r3, [r3, #4]
 800b5c2:	2b02      	cmp	r3, #2
 800b5c4:	d10f      	bne.n	800b5e6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b5c6:	68bb      	ldr	r3, [r7, #8]
 800b5c8:	015a      	lsls	r2, r3, #5
 800b5ca:	68fb      	ldr	r3, [r7, #12]
 800b5cc:	4413      	add	r3, r2
 800b5ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	68ba      	ldr	r2, [r7, #8]
 800b5d6:	0151      	lsls	r1, r2, #5
 800b5d8:	68fa      	ldr	r2, [r7, #12]
 800b5da:	440a      	add	r2, r1
 800b5dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b5e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b5e4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800b5e6:	2300      	movs	r3, #0
}
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	3714      	adds	r7, #20
 800b5ec:	46bd      	mov	sp, r7
 800b5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f2:	4770      	bx	lr

0800b5f4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800b5f4:	b480      	push	{r7}
 800b5f6:	b085      	sub	sp, #20
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
 800b5fc:	460b      	mov	r3, r1
 800b5fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	68fa      	ldr	r2, [r7, #12]
 800b60e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b612:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b616:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b61e:	681a      	ldr	r2, [r3, #0]
 800b620:	78fb      	ldrb	r3, [r7, #3]
 800b622:	011b      	lsls	r3, r3, #4
 800b624:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800b628:	68f9      	ldr	r1, [r7, #12]
 800b62a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b62e:	4313      	orrs	r3, r2
 800b630:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800b632:	2300      	movs	r3, #0
}
 800b634:	4618      	mov	r0, r3
 800b636:	3714      	adds	r7, #20
 800b638:	46bd      	mov	sp, r7
 800b63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63e:	4770      	bx	lr

0800b640 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b640:	b480      	push	{r7}
 800b642:	b085      	sub	sp, #20
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	68fa      	ldr	r2, [r7, #12]
 800b656:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b65a:	f023 0303 	bic.w	r3, r3, #3
 800b65e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b666:	685b      	ldr	r3, [r3, #4]
 800b668:	68fa      	ldr	r2, [r7, #12]
 800b66a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b66e:	f023 0302 	bic.w	r3, r3, #2
 800b672:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b674:	2300      	movs	r3, #0
}
 800b676:	4618      	mov	r0, r3
 800b678:	3714      	adds	r7, #20
 800b67a:	46bd      	mov	sp, r7
 800b67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b680:	4770      	bx	lr

0800b682 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800b682:	b480      	push	{r7}
 800b684:	b085      	sub	sp, #20
 800b686:	af00      	add	r7, sp, #0
 800b688:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	68fa      	ldr	r2, [r7, #12]
 800b698:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b69c:	f023 0303 	bic.w	r3, r3, #3
 800b6a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6a8:	685b      	ldr	r3, [r3, #4]
 800b6aa:	68fa      	ldr	r2, [r7, #12]
 800b6ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b6b0:	f043 0302 	orr.w	r3, r3, #2
 800b6b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b6b6:	2300      	movs	r3, #0
}
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	3714      	adds	r7, #20
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c2:	4770      	bx	lr

0800b6c4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800b6c4:	b480      	push	{r7}
 800b6c6:	b085      	sub	sp, #20
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	695b      	ldr	r3, [r3, #20]
 800b6d0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	699b      	ldr	r3, [r3, #24]
 800b6d6:	68fa      	ldr	r2, [r7, #12]
 800b6d8:	4013      	ands	r3, r2
 800b6da:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	3714      	adds	r7, #20
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e8:	4770      	bx	lr

0800b6ea <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b6ea:	b480      	push	{r7}
 800b6ec:	b085      	sub	sp, #20
 800b6ee:	af00      	add	r7, sp, #0
 800b6f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6fc:	699b      	ldr	r3, [r3, #24]
 800b6fe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b706:	69db      	ldr	r3, [r3, #28]
 800b708:	68ba      	ldr	r2, [r7, #8]
 800b70a:	4013      	ands	r3, r2
 800b70c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800b70e:	68bb      	ldr	r3, [r7, #8]
 800b710:	0c1b      	lsrs	r3, r3, #16
}
 800b712:	4618      	mov	r0, r3
 800b714:	3714      	adds	r7, #20
 800b716:	46bd      	mov	sp, r7
 800b718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71c:	4770      	bx	lr

0800b71e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800b71e:	b480      	push	{r7}
 800b720:	b085      	sub	sp, #20
 800b722:	af00      	add	r7, sp, #0
 800b724:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b730:	699b      	ldr	r3, [r3, #24]
 800b732:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b73a:	69db      	ldr	r3, [r3, #28]
 800b73c:	68ba      	ldr	r2, [r7, #8]
 800b73e:	4013      	ands	r3, r2
 800b740:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800b742:	68bb      	ldr	r3, [r7, #8]
 800b744:	b29b      	uxth	r3, r3
}
 800b746:	4618      	mov	r0, r3
 800b748:	3714      	adds	r7, #20
 800b74a:	46bd      	mov	sp, r7
 800b74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b750:	4770      	bx	lr

0800b752 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b752:	b480      	push	{r7}
 800b754:	b085      	sub	sp, #20
 800b756:	af00      	add	r7, sp, #0
 800b758:	6078      	str	r0, [r7, #4]
 800b75a:	460b      	mov	r3, r1
 800b75c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800b762:	78fb      	ldrb	r3, [r7, #3]
 800b764:	015a      	lsls	r2, r3, #5
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	4413      	add	r3, r2
 800b76a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b76e:	689b      	ldr	r3, [r3, #8]
 800b770:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b778:	695b      	ldr	r3, [r3, #20]
 800b77a:	68ba      	ldr	r2, [r7, #8]
 800b77c:	4013      	ands	r3, r2
 800b77e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b780:	68bb      	ldr	r3, [r7, #8]
}
 800b782:	4618      	mov	r0, r3
 800b784:	3714      	adds	r7, #20
 800b786:	46bd      	mov	sp, r7
 800b788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78c:	4770      	bx	lr

0800b78e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800b78e:	b480      	push	{r7}
 800b790:	b087      	sub	sp, #28
 800b792:	af00      	add	r7, sp, #0
 800b794:	6078      	str	r0, [r7, #4]
 800b796:	460b      	mov	r3, r1
 800b798:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800b79e:	697b      	ldr	r3, [r7, #20]
 800b7a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7a4:	691b      	ldr	r3, [r3, #16]
 800b7a6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800b7a8:	697b      	ldr	r3, [r7, #20]
 800b7aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b7ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b7b0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800b7b2:	78fb      	ldrb	r3, [r7, #3]
 800b7b4:	f003 030f 	and.w	r3, r3, #15
 800b7b8:	68fa      	ldr	r2, [r7, #12]
 800b7ba:	fa22 f303 	lsr.w	r3, r2, r3
 800b7be:	01db      	lsls	r3, r3, #7
 800b7c0:	b2db      	uxtb	r3, r3
 800b7c2:	693a      	ldr	r2, [r7, #16]
 800b7c4:	4313      	orrs	r3, r2
 800b7c6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800b7c8:	78fb      	ldrb	r3, [r7, #3]
 800b7ca:	015a      	lsls	r2, r3, #5
 800b7cc:	697b      	ldr	r3, [r7, #20]
 800b7ce:	4413      	add	r3, r2
 800b7d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7d4:	689b      	ldr	r3, [r3, #8]
 800b7d6:	693a      	ldr	r2, [r7, #16]
 800b7d8:	4013      	ands	r3, r2
 800b7da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800b7dc:	68bb      	ldr	r3, [r7, #8]
}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	371c      	adds	r7, #28
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e8:	4770      	bx	lr

0800b7ea <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800b7ea:	b480      	push	{r7}
 800b7ec:	b083      	sub	sp, #12
 800b7ee:	af00      	add	r7, sp, #0
 800b7f0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	695b      	ldr	r3, [r3, #20]
 800b7f6:	f003 0301 	and.w	r3, r3, #1
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	370c      	adds	r7, #12
 800b7fe:	46bd      	mov	sp, r7
 800b800:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b804:	4770      	bx	lr

0800b806 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800b806:	b480      	push	{r7}
 800b808:	b085      	sub	sp, #20
 800b80a:	af00      	add	r7, sp, #0
 800b80c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	68fa      	ldr	r2, [r7, #12]
 800b81c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b820:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800b824:	f023 0307 	bic.w	r3, r3, #7
 800b828:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b830:	685b      	ldr	r3, [r3, #4]
 800b832:	68fa      	ldr	r2, [r7, #12]
 800b834:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b838:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b83c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b83e:	2300      	movs	r3, #0
}
 800b840:	4618      	mov	r0, r3
 800b842:	3714      	adds	r7, #20
 800b844:	46bd      	mov	sp, r7
 800b846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b84a:	4770      	bx	lr

0800b84c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800b84c:	b480      	push	{r7}
 800b84e:	b087      	sub	sp, #28
 800b850:	af00      	add	r7, sp, #0
 800b852:	60f8      	str	r0, [r7, #12]
 800b854:	460b      	mov	r3, r1
 800b856:	607a      	str	r2, [r7, #4]
 800b858:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	333c      	adds	r3, #60	; 0x3c
 800b862:	3304      	adds	r3, #4
 800b864:	681b      	ldr	r3, [r3, #0]
 800b866:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800b868:	693b      	ldr	r3, [r7, #16]
 800b86a:	4a26      	ldr	r2, [pc, #152]	; (800b904 <USB_EP0_OutStart+0xb8>)
 800b86c:	4293      	cmp	r3, r2
 800b86e:	d90a      	bls.n	800b886 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b870:	697b      	ldr	r3, [r7, #20]
 800b872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b87c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b880:	d101      	bne.n	800b886 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800b882:	2300      	movs	r3, #0
 800b884:	e037      	b.n	800b8f6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800b886:	697b      	ldr	r3, [r7, #20]
 800b888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b88c:	461a      	mov	r2, r3
 800b88e:	2300      	movs	r3, #0
 800b890:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b892:	697b      	ldr	r3, [r7, #20]
 800b894:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b898:	691b      	ldr	r3, [r3, #16]
 800b89a:	697a      	ldr	r2, [r7, #20]
 800b89c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b8a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b8a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800b8a6:	697b      	ldr	r3, [r7, #20]
 800b8a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8ac:	691b      	ldr	r3, [r3, #16]
 800b8ae:	697a      	ldr	r2, [r7, #20]
 800b8b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b8b4:	f043 0318 	orr.w	r3, r3, #24
 800b8b8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800b8ba:	697b      	ldr	r3, [r7, #20]
 800b8bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8c0:	691b      	ldr	r3, [r3, #16]
 800b8c2:	697a      	ldr	r2, [r7, #20]
 800b8c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b8c8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800b8cc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800b8ce:	7afb      	ldrb	r3, [r7, #11]
 800b8d0:	2b01      	cmp	r3, #1
 800b8d2:	d10f      	bne.n	800b8f4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800b8d4:	697b      	ldr	r3, [r7, #20]
 800b8d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8da:	461a      	mov	r2, r3
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800b8e0:	697b      	ldr	r3, [r7, #20]
 800b8e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	697a      	ldr	r2, [r7, #20]
 800b8ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b8ee:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800b8f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b8f4:	2300      	movs	r3, #0
}
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	371c      	adds	r7, #28
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b900:	4770      	bx	lr
 800b902:	bf00      	nop
 800b904:	4f54300a 	.word	0x4f54300a

0800b908 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b908:	b480      	push	{r7}
 800b90a:	b085      	sub	sp, #20
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b910:	2300      	movs	r3, #0
 800b912:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	3301      	adds	r3, #1
 800b918:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800b920:	d901      	bls.n	800b926 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b922:	2303      	movs	r3, #3
 800b924:	e01b      	b.n	800b95e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	691b      	ldr	r3, [r3, #16]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	daf2      	bge.n	800b914 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b92e:	2300      	movs	r3, #0
 800b930:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	691b      	ldr	r3, [r3, #16]
 800b936:	f043 0201 	orr.w	r2, r3, #1
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	3301      	adds	r3, #1
 800b942:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800b94a:	d901      	bls.n	800b950 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b94c:	2303      	movs	r3, #3
 800b94e:	e006      	b.n	800b95e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	691b      	ldr	r3, [r3, #16]
 800b954:	f003 0301 	and.w	r3, r3, #1
 800b958:	2b01      	cmp	r3, #1
 800b95a:	d0f0      	beq.n	800b93e <USB_CoreReset+0x36>

  return HAL_OK;
 800b95c:	2300      	movs	r3, #0
}
 800b95e:	4618      	mov	r0, r3
 800b960:	3714      	adds	r7, #20
 800b962:	46bd      	mov	sp, r7
 800b964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b968:	4770      	bx	lr
	...

0800b96c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b96c:	b580      	push	{r7, lr}
 800b96e:	b084      	sub	sp, #16
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
 800b974:	460b      	mov	r3, r1
 800b976:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b978:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b97c:	f003 fefa 	bl	800f774 <USBD_static_malloc>
 800b980:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d109      	bne.n	800b99c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	32b0      	adds	r2, #176	; 0xb0
 800b992:	2100      	movs	r1, #0
 800b994:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b998:	2302      	movs	r3, #2
 800b99a:	e0d4      	b.n	800bb46 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b99c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800b9a0:	2100      	movs	r1, #0
 800b9a2:	68f8      	ldr	r0, [r7, #12]
 800b9a4:	f003 ff2a 	bl	800f7fc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	32b0      	adds	r2, #176	; 0xb0
 800b9b2:	68f9      	ldr	r1, [r7, #12]
 800b9b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	32b0      	adds	r2, #176	; 0xb0
 800b9c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	7c1b      	ldrb	r3, [r3, #16]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d138      	bne.n	800ba46 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b9d4:	4b5e      	ldr	r3, [pc, #376]	; (800bb50 <USBD_CDC_Init+0x1e4>)
 800b9d6:	7819      	ldrb	r1, [r3, #0]
 800b9d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b9dc:	2202      	movs	r2, #2
 800b9de:	6878      	ldr	r0, [r7, #4]
 800b9e0:	f003 fda5 	bl	800f52e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b9e4:	4b5a      	ldr	r3, [pc, #360]	; (800bb50 <USBD_CDC_Init+0x1e4>)
 800b9e6:	781b      	ldrb	r3, [r3, #0]
 800b9e8:	f003 020f 	and.w	r2, r3, #15
 800b9ec:	6879      	ldr	r1, [r7, #4]
 800b9ee:	4613      	mov	r3, r2
 800b9f0:	009b      	lsls	r3, r3, #2
 800b9f2:	4413      	add	r3, r2
 800b9f4:	009b      	lsls	r3, r3, #2
 800b9f6:	440b      	add	r3, r1
 800b9f8:	3324      	adds	r3, #36	; 0x24
 800b9fa:	2201      	movs	r2, #1
 800b9fc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b9fe:	4b55      	ldr	r3, [pc, #340]	; (800bb54 <USBD_CDC_Init+0x1e8>)
 800ba00:	7819      	ldrb	r1, [r3, #0]
 800ba02:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ba06:	2202      	movs	r2, #2
 800ba08:	6878      	ldr	r0, [r7, #4]
 800ba0a:	f003 fd90 	bl	800f52e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ba0e:	4b51      	ldr	r3, [pc, #324]	; (800bb54 <USBD_CDC_Init+0x1e8>)
 800ba10:	781b      	ldrb	r3, [r3, #0]
 800ba12:	f003 020f 	and.w	r2, r3, #15
 800ba16:	6879      	ldr	r1, [r7, #4]
 800ba18:	4613      	mov	r3, r2
 800ba1a:	009b      	lsls	r3, r3, #2
 800ba1c:	4413      	add	r3, r2
 800ba1e:	009b      	lsls	r3, r3, #2
 800ba20:	440b      	add	r3, r1
 800ba22:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ba26:	2201      	movs	r2, #1
 800ba28:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ba2a:	4b4b      	ldr	r3, [pc, #300]	; (800bb58 <USBD_CDC_Init+0x1ec>)
 800ba2c:	781b      	ldrb	r3, [r3, #0]
 800ba2e:	f003 020f 	and.w	r2, r3, #15
 800ba32:	6879      	ldr	r1, [r7, #4]
 800ba34:	4613      	mov	r3, r2
 800ba36:	009b      	lsls	r3, r3, #2
 800ba38:	4413      	add	r3, r2
 800ba3a:	009b      	lsls	r3, r3, #2
 800ba3c:	440b      	add	r3, r1
 800ba3e:	3326      	adds	r3, #38	; 0x26
 800ba40:	2210      	movs	r2, #16
 800ba42:	801a      	strh	r2, [r3, #0]
 800ba44:	e035      	b.n	800bab2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ba46:	4b42      	ldr	r3, [pc, #264]	; (800bb50 <USBD_CDC_Init+0x1e4>)
 800ba48:	7819      	ldrb	r1, [r3, #0]
 800ba4a:	2340      	movs	r3, #64	; 0x40
 800ba4c:	2202      	movs	r2, #2
 800ba4e:	6878      	ldr	r0, [r7, #4]
 800ba50:	f003 fd6d 	bl	800f52e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ba54:	4b3e      	ldr	r3, [pc, #248]	; (800bb50 <USBD_CDC_Init+0x1e4>)
 800ba56:	781b      	ldrb	r3, [r3, #0]
 800ba58:	f003 020f 	and.w	r2, r3, #15
 800ba5c:	6879      	ldr	r1, [r7, #4]
 800ba5e:	4613      	mov	r3, r2
 800ba60:	009b      	lsls	r3, r3, #2
 800ba62:	4413      	add	r3, r2
 800ba64:	009b      	lsls	r3, r3, #2
 800ba66:	440b      	add	r3, r1
 800ba68:	3324      	adds	r3, #36	; 0x24
 800ba6a:	2201      	movs	r2, #1
 800ba6c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ba6e:	4b39      	ldr	r3, [pc, #228]	; (800bb54 <USBD_CDC_Init+0x1e8>)
 800ba70:	7819      	ldrb	r1, [r3, #0]
 800ba72:	2340      	movs	r3, #64	; 0x40
 800ba74:	2202      	movs	r2, #2
 800ba76:	6878      	ldr	r0, [r7, #4]
 800ba78:	f003 fd59 	bl	800f52e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ba7c:	4b35      	ldr	r3, [pc, #212]	; (800bb54 <USBD_CDC_Init+0x1e8>)
 800ba7e:	781b      	ldrb	r3, [r3, #0]
 800ba80:	f003 020f 	and.w	r2, r3, #15
 800ba84:	6879      	ldr	r1, [r7, #4]
 800ba86:	4613      	mov	r3, r2
 800ba88:	009b      	lsls	r3, r3, #2
 800ba8a:	4413      	add	r3, r2
 800ba8c:	009b      	lsls	r3, r3, #2
 800ba8e:	440b      	add	r3, r1
 800ba90:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ba94:	2201      	movs	r2, #1
 800ba96:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ba98:	4b2f      	ldr	r3, [pc, #188]	; (800bb58 <USBD_CDC_Init+0x1ec>)
 800ba9a:	781b      	ldrb	r3, [r3, #0]
 800ba9c:	f003 020f 	and.w	r2, r3, #15
 800baa0:	6879      	ldr	r1, [r7, #4]
 800baa2:	4613      	mov	r3, r2
 800baa4:	009b      	lsls	r3, r3, #2
 800baa6:	4413      	add	r3, r2
 800baa8:	009b      	lsls	r3, r3, #2
 800baaa:	440b      	add	r3, r1
 800baac:	3326      	adds	r3, #38	; 0x26
 800baae:	2210      	movs	r2, #16
 800bab0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800bab2:	4b29      	ldr	r3, [pc, #164]	; (800bb58 <USBD_CDC_Init+0x1ec>)
 800bab4:	7819      	ldrb	r1, [r3, #0]
 800bab6:	2308      	movs	r3, #8
 800bab8:	2203      	movs	r2, #3
 800baba:	6878      	ldr	r0, [r7, #4]
 800babc:	f003 fd37 	bl	800f52e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800bac0:	4b25      	ldr	r3, [pc, #148]	; (800bb58 <USBD_CDC_Init+0x1ec>)
 800bac2:	781b      	ldrb	r3, [r3, #0]
 800bac4:	f003 020f 	and.w	r2, r3, #15
 800bac8:	6879      	ldr	r1, [r7, #4]
 800baca:	4613      	mov	r3, r2
 800bacc:	009b      	lsls	r3, r3, #2
 800bace:	4413      	add	r3, r2
 800bad0:	009b      	lsls	r3, r3, #2
 800bad2:	440b      	add	r3, r1
 800bad4:	3324      	adds	r3, #36	; 0x24
 800bad6:	2201      	movs	r2, #1
 800bad8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	2200      	movs	r2, #0
 800bade:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bae8:	687a      	ldr	r2, [r7, #4]
 800baea:	33b0      	adds	r3, #176	; 0xb0
 800baec:	009b      	lsls	r3, r3, #2
 800baee:	4413      	add	r3, r2
 800baf0:	685b      	ldr	r3, [r3, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	2200      	movs	r2, #0
 800bafa:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	2200      	movs	r2, #0
 800bb02:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d101      	bne.n	800bb14 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800bb10:	2302      	movs	r3, #2
 800bb12:	e018      	b.n	800bb46 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	7c1b      	ldrb	r3, [r3, #16]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d10a      	bne.n	800bb32 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bb1c:	4b0d      	ldr	r3, [pc, #52]	; (800bb54 <USBD_CDC_Init+0x1e8>)
 800bb1e:	7819      	ldrb	r1, [r3, #0]
 800bb20:	68fb      	ldr	r3, [r7, #12]
 800bb22:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bb26:	f44f 7300 	mov.w	r3, #512	; 0x200
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f003 fdee 	bl	800f70c <USBD_LL_PrepareReceive>
 800bb30:	e008      	b.n	800bb44 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800bb32:	4b08      	ldr	r3, [pc, #32]	; (800bb54 <USBD_CDC_Init+0x1e8>)
 800bb34:	7819      	ldrb	r1, [r3, #0]
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800bb3c:	2340      	movs	r3, #64	; 0x40
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f003 fde4 	bl	800f70c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800bb44:	2300      	movs	r3, #0
}
 800bb46:	4618      	mov	r0, r3
 800bb48:	3710      	adds	r7, #16
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bd80      	pop	{r7, pc}
 800bb4e:	bf00      	nop
 800bb50:	200000e3 	.word	0x200000e3
 800bb54:	200000e4 	.word	0x200000e4
 800bb58:	200000e5 	.word	0x200000e5

0800bb5c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b082      	sub	sp, #8
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
 800bb64:	460b      	mov	r3, r1
 800bb66:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800bb68:	4b3a      	ldr	r3, [pc, #232]	; (800bc54 <USBD_CDC_DeInit+0xf8>)
 800bb6a:	781b      	ldrb	r3, [r3, #0]
 800bb6c:	4619      	mov	r1, r3
 800bb6e:	6878      	ldr	r0, [r7, #4]
 800bb70:	f003 fd03 	bl	800f57a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800bb74:	4b37      	ldr	r3, [pc, #220]	; (800bc54 <USBD_CDC_DeInit+0xf8>)
 800bb76:	781b      	ldrb	r3, [r3, #0]
 800bb78:	f003 020f 	and.w	r2, r3, #15
 800bb7c:	6879      	ldr	r1, [r7, #4]
 800bb7e:	4613      	mov	r3, r2
 800bb80:	009b      	lsls	r3, r3, #2
 800bb82:	4413      	add	r3, r2
 800bb84:	009b      	lsls	r3, r3, #2
 800bb86:	440b      	add	r3, r1
 800bb88:	3324      	adds	r3, #36	; 0x24
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800bb8e:	4b32      	ldr	r3, [pc, #200]	; (800bc58 <USBD_CDC_DeInit+0xfc>)
 800bb90:	781b      	ldrb	r3, [r3, #0]
 800bb92:	4619      	mov	r1, r3
 800bb94:	6878      	ldr	r0, [r7, #4]
 800bb96:	f003 fcf0 	bl	800f57a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800bb9a:	4b2f      	ldr	r3, [pc, #188]	; (800bc58 <USBD_CDC_DeInit+0xfc>)
 800bb9c:	781b      	ldrb	r3, [r3, #0]
 800bb9e:	f003 020f 	and.w	r2, r3, #15
 800bba2:	6879      	ldr	r1, [r7, #4]
 800bba4:	4613      	mov	r3, r2
 800bba6:	009b      	lsls	r3, r3, #2
 800bba8:	4413      	add	r3, r2
 800bbaa:	009b      	lsls	r3, r3, #2
 800bbac:	440b      	add	r3, r1
 800bbae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800bbb6:	4b29      	ldr	r3, [pc, #164]	; (800bc5c <USBD_CDC_DeInit+0x100>)
 800bbb8:	781b      	ldrb	r3, [r3, #0]
 800bbba:	4619      	mov	r1, r3
 800bbbc:	6878      	ldr	r0, [r7, #4]
 800bbbe:	f003 fcdc 	bl	800f57a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800bbc2:	4b26      	ldr	r3, [pc, #152]	; (800bc5c <USBD_CDC_DeInit+0x100>)
 800bbc4:	781b      	ldrb	r3, [r3, #0]
 800bbc6:	f003 020f 	and.w	r2, r3, #15
 800bbca:	6879      	ldr	r1, [r7, #4]
 800bbcc:	4613      	mov	r3, r2
 800bbce:	009b      	lsls	r3, r3, #2
 800bbd0:	4413      	add	r3, r2
 800bbd2:	009b      	lsls	r3, r3, #2
 800bbd4:	440b      	add	r3, r1
 800bbd6:	3324      	adds	r3, #36	; 0x24
 800bbd8:	2200      	movs	r2, #0
 800bbda:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800bbdc:	4b1f      	ldr	r3, [pc, #124]	; (800bc5c <USBD_CDC_DeInit+0x100>)
 800bbde:	781b      	ldrb	r3, [r3, #0]
 800bbe0:	f003 020f 	and.w	r2, r3, #15
 800bbe4:	6879      	ldr	r1, [r7, #4]
 800bbe6:	4613      	mov	r3, r2
 800bbe8:	009b      	lsls	r3, r3, #2
 800bbea:	4413      	add	r3, r2
 800bbec:	009b      	lsls	r3, r3, #2
 800bbee:	440b      	add	r3, r1
 800bbf0:	3326      	adds	r3, #38	; 0x26
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	32b0      	adds	r2, #176	; 0xb0
 800bc00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d01f      	beq.n	800bc48 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bc0e:	687a      	ldr	r2, [r7, #4]
 800bc10:	33b0      	adds	r3, #176	; 0xb0
 800bc12:	009b      	lsls	r3, r3, #2
 800bc14:	4413      	add	r3, r2
 800bc16:	685b      	ldr	r3, [r3, #4]
 800bc18:	685b      	ldr	r3, [r3, #4]
 800bc1a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	32b0      	adds	r2, #176	; 0xb0
 800bc26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	f003 fdb0 	bl	800f790 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	32b0      	adds	r2, #176	; 0xb0
 800bc3a:	2100      	movs	r1, #0
 800bc3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2200      	movs	r2, #0
 800bc44:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800bc48:	2300      	movs	r3, #0
}
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	3708      	adds	r7, #8
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bd80      	pop	{r7, pc}
 800bc52:	bf00      	nop
 800bc54:	200000e3 	.word	0x200000e3
 800bc58:	200000e4 	.word	0x200000e4
 800bc5c:	200000e5 	.word	0x200000e5

0800bc60 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800bc60:	b580      	push	{r7, lr}
 800bc62:	b086      	sub	sp, #24
 800bc64:	af00      	add	r7, sp, #0
 800bc66:	6078      	str	r0, [r7, #4]
 800bc68:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	32b0      	adds	r2, #176	; 0xb0
 800bc74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc78:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800bc7a:	2300      	movs	r3, #0
 800bc7c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800bc82:	2300      	movs	r3, #0
 800bc84:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800bc86:	693b      	ldr	r3, [r7, #16]
 800bc88:	2b00      	cmp	r3, #0
 800bc8a:	d101      	bne.n	800bc90 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800bc8c:	2303      	movs	r3, #3
 800bc8e:	e0bf      	b.n	800be10 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bc90:	683b      	ldr	r3, [r7, #0]
 800bc92:	781b      	ldrb	r3, [r3, #0]
 800bc94:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d050      	beq.n	800bd3e <USBD_CDC_Setup+0xde>
 800bc9c:	2b20      	cmp	r3, #32
 800bc9e:	f040 80af 	bne.w	800be00 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	88db      	ldrh	r3, [r3, #6]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d03a      	beq.n	800bd20 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	781b      	ldrb	r3, [r3, #0]
 800bcae:	b25b      	sxtb	r3, r3
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	da1b      	bge.n	800bcec <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bcba:	687a      	ldr	r2, [r7, #4]
 800bcbc:	33b0      	adds	r3, #176	; 0xb0
 800bcbe:	009b      	lsls	r3, r3, #2
 800bcc0:	4413      	add	r3, r2
 800bcc2:	685b      	ldr	r3, [r3, #4]
 800bcc4:	689b      	ldr	r3, [r3, #8]
 800bcc6:	683a      	ldr	r2, [r7, #0]
 800bcc8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800bcca:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bccc:	683a      	ldr	r2, [r7, #0]
 800bcce:	88d2      	ldrh	r2, [r2, #6]
 800bcd0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	88db      	ldrh	r3, [r3, #6]
 800bcd6:	2b07      	cmp	r3, #7
 800bcd8:	bf28      	it	cs
 800bcda:	2307      	movcs	r3, #7
 800bcdc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800bcde:	693b      	ldr	r3, [r7, #16]
 800bce0:	89fa      	ldrh	r2, [r7, #14]
 800bce2:	4619      	mov	r1, r3
 800bce4:	6878      	ldr	r0, [r7, #4]
 800bce6:	f001 fd89 	bl	800d7fc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800bcea:	e090      	b.n	800be0e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800bcec:	683b      	ldr	r3, [r7, #0]
 800bcee:	785a      	ldrb	r2, [r3, #1]
 800bcf0:	693b      	ldr	r3, [r7, #16]
 800bcf2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800bcf6:	683b      	ldr	r3, [r7, #0]
 800bcf8:	88db      	ldrh	r3, [r3, #6]
 800bcfa:	2b3f      	cmp	r3, #63	; 0x3f
 800bcfc:	d803      	bhi.n	800bd06 <USBD_CDC_Setup+0xa6>
 800bcfe:	683b      	ldr	r3, [r7, #0]
 800bd00:	88db      	ldrh	r3, [r3, #6]
 800bd02:	b2da      	uxtb	r2, r3
 800bd04:	e000      	b.n	800bd08 <USBD_CDC_Setup+0xa8>
 800bd06:	2240      	movs	r2, #64	; 0x40
 800bd08:	693b      	ldr	r3, [r7, #16]
 800bd0a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800bd0e:	6939      	ldr	r1, [r7, #16]
 800bd10:	693b      	ldr	r3, [r7, #16]
 800bd12:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800bd16:	461a      	mov	r2, r3
 800bd18:	6878      	ldr	r0, [r7, #4]
 800bd1a:	f001 fd9b 	bl	800d854 <USBD_CtlPrepareRx>
      break;
 800bd1e:	e076      	b.n	800be0e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bd26:	687a      	ldr	r2, [r7, #4]
 800bd28:	33b0      	adds	r3, #176	; 0xb0
 800bd2a:	009b      	lsls	r3, r3, #2
 800bd2c:	4413      	add	r3, r2
 800bd2e:	685b      	ldr	r3, [r3, #4]
 800bd30:	689b      	ldr	r3, [r3, #8]
 800bd32:	683a      	ldr	r2, [r7, #0]
 800bd34:	7850      	ldrb	r0, [r2, #1]
 800bd36:	2200      	movs	r2, #0
 800bd38:	6839      	ldr	r1, [r7, #0]
 800bd3a:	4798      	blx	r3
      break;
 800bd3c:	e067      	b.n	800be0e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	785b      	ldrb	r3, [r3, #1]
 800bd42:	2b0b      	cmp	r3, #11
 800bd44:	d851      	bhi.n	800bdea <USBD_CDC_Setup+0x18a>
 800bd46:	a201      	add	r2, pc, #4	; (adr r2, 800bd4c <USBD_CDC_Setup+0xec>)
 800bd48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd4c:	0800bd7d 	.word	0x0800bd7d
 800bd50:	0800bdf9 	.word	0x0800bdf9
 800bd54:	0800bdeb 	.word	0x0800bdeb
 800bd58:	0800bdeb 	.word	0x0800bdeb
 800bd5c:	0800bdeb 	.word	0x0800bdeb
 800bd60:	0800bdeb 	.word	0x0800bdeb
 800bd64:	0800bdeb 	.word	0x0800bdeb
 800bd68:	0800bdeb 	.word	0x0800bdeb
 800bd6c:	0800bdeb 	.word	0x0800bdeb
 800bd70:	0800bdeb 	.word	0x0800bdeb
 800bd74:	0800bda7 	.word	0x0800bda7
 800bd78:	0800bdd1 	.word	0x0800bdd1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bd82:	b2db      	uxtb	r3, r3
 800bd84:	2b03      	cmp	r3, #3
 800bd86:	d107      	bne.n	800bd98 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bd88:	f107 030a 	add.w	r3, r7, #10
 800bd8c:	2202      	movs	r2, #2
 800bd8e:	4619      	mov	r1, r3
 800bd90:	6878      	ldr	r0, [r7, #4]
 800bd92:	f001 fd33 	bl	800d7fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bd96:	e032      	b.n	800bdfe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bd98:	6839      	ldr	r1, [r7, #0]
 800bd9a:	6878      	ldr	r0, [r7, #4]
 800bd9c:	f001 fcbd 	bl	800d71a <USBD_CtlError>
            ret = USBD_FAIL;
 800bda0:	2303      	movs	r3, #3
 800bda2:	75fb      	strb	r3, [r7, #23]
          break;
 800bda4:	e02b      	b.n	800bdfe <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdac:	b2db      	uxtb	r3, r3
 800bdae:	2b03      	cmp	r3, #3
 800bdb0:	d107      	bne.n	800bdc2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800bdb2:	f107 030d 	add.w	r3, r7, #13
 800bdb6:	2201      	movs	r2, #1
 800bdb8:	4619      	mov	r1, r3
 800bdba:	6878      	ldr	r0, [r7, #4]
 800bdbc:	f001 fd1e 	bl	800d7fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bdc0:	e01d      	b.n	800bdfe <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bdc2:	6839      	ldr	r1, [r7, #0]
 800bdc4:	6878      	ldr	r0, [r7, #4]
 800bdc6:	f001 fca8 	bl	800d71a <USBD_CtlError>
            ret = USBD_FAIL;
 800bdca:	2303      	movs	r3, #3
 800bdcc:	75fb      	strb	r3, [r7, #23]
          break;
 800bdce:	e016      	b.n	800bdfe <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bdd6:	b2db      	uxtb	r3, r3
 800bdd8:	2b03      	cmp	r3, #3
 800bdda:	d00f      	beq.n	800bdfc <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800bddc:	6839      	ldr	r1, [r7, #0]
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	f001 fc9b 	bl	800d71a <USBD_CtlError>
            ret = USBD_FAIL;
 800bde4:	2303      	movs	r3, #3
 800bde6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800bde8:	e008      	b.n	800bdfc <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800bdea:	6839      	ldr	r1, [r7, #0]
 800bdec:	6878      	ldr	r0, [r7, #4]
 800bdee:	f001 fc94 	bl	800d71a <USBD_CtlError>
          ret = USBD_FAIL;
 800bdf2:	2303      	movs	r3, #3
 800bdf4:	75fb      	strb	r3, [r7, #23]
          break;
 800bdf6:	e002      	b.n	800bdfe <USBD_CDC_Setup+0x19e>
          break;
 800bdf8:	bf00      	nop
 800bdfa:	e008      	b.n	800be0e <USBD_CDC_Setup+0x1ae>
          break;
 800bdfc:	bf00      	nop
      }
      break;
 800bdfe:	e006      	b.n	800be0e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800be00:	6839      	ldr	r1, [r7, #0]
 800be02:	6878      	ldr	r0, [r7, #4]
 800be04:	f001 fc89 	bl	800d71a <USBD_CtlError>
      ret = USBD_FAIL;
 800be08:	2303      	movs	r3, #3
 800be0a:	75fb      	strb	r3, [r7, #23]
      break;
 800be0c:	bf00      	nop
  }

  return (uint8_t)ret;
 800be0e:	7dfb      	ldrb	r3, [r7, #23]
}
 800be10:	4618      	mov	r0, r3
 800be12:	3718      	adds	r7, #24
 800be14:	46bd      	mov	sp, r7
 800be16:	bd80      	pop	{r7, pc}

0800be18 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b084      	sub	sp, #16
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
 800be20:	460b      	mov	r3, r1
 800be22:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800be2a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	32b0      	adds	r2, #176	; 0xb0
 800be36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d101      	bne.n	800be42 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800be3e:	2303      	movs	r3, #3
 800be40:	e065      	b.n	800bf0e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	32b0      	adds	r2, #176	; 0xb0
 800be4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be50:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800be52:	78fb      	ldrb	r3, [r7, #3]
 800be54:	f003 020f 	and.w	r2, r3, #15
 800be58:	6879      	ldr	r1, [r7, #4]
 800be5a:	4613      	mov	r3, r2
 800be5c:	009b      	lsls	r3, r3, #2
 800be5e:	4413      	add	r3, r2
 800be60:	009b      	lsls	r3, r3, #2
 800be62:	440b      	add	r3, r1
 800be64:	3318      	adds	r3, #24
 800be66:	681b      	ldr	r3, [r3, #0]
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d02f      	beq.n	800becc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800be6c:	78fb      	ldrb	r3, [r7, #3]
 800be6e:	f003 020f 	and.w	r2, r3, #15
 800be72:	6879      	ldr	r1, [r7, #4]
 800be74:	4613      	mov	r3, r2
 800be76:	009b      	lsls	r3, r3, #2
 800be78:	4413      	add	r3, r2
 800be7a:	009b      	lsls	r3, r3, #2
 800be7c:	440b      	add	r3, r1
 800be7e:	3318      	adds	r3, #24
 800be80:	681a      	ldr	r2, [r3, #0]
 800be82:	78fb      	ldrb	r3, [r7, #3]
 800be84:	f003 010f 	and.w	r1, r3, #15
 800be88:	68f8      	ldr	r0, [r7, #12]
 800be8a:	460b      	mov	r3, r1
 800be8c:	00db      	lsls	r3, r3, #3
 800be8e:	440b      	add	r3, r1
 800be90:	009b      	lsls	r3, r3, #2
 800be92:	4403      	add	r3, r0
 800be94:	331c      	adds	r3, #28
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	fbb2 f1f3 	udiv	r1, r2, r3
 800be9c:	fb01 f303 	mul.w	r3, r1, r3
 800bea0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bea2:	2b00      	cmp	r3, #0
 800bea4:	d112      	bne.n	800becc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800bea6:	78fb      	ldrb	r3, [r7, #3]
 800bea8:	f003 020f 	and.w	r2, r3, #15
 800beac:	6879      	ldr	r1, [r7, #4]
 800beae:	4613      	mov	r3, r2
 800beb0:	009b      	lsls	r3, r3, #2
 800beb2:	4413      	add	r3, r2
 800beb4:	009b      	lsls	r3, r3, #2
 800beb6:	440b      	add	r3, r1
 800beb8:	3318      	adds	r3, #24
 800beba:	2200      	movs	r2, #0
 800bebc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bebe:	78f9      	ldrb	r1, [r7, #3]
 800bec0:	2300      	movs	r3, #0
 800bec2:	2200      	movs	r2, #0
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f003 fc00 	bl	800f6ca <USBD_LL_Transmit>
 800beca:	e01f      	b.n	800bf0c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800becc:	68bb      	ldr	r3, [r7, #8]
 800bece:	2200      	movs	r2, #0
 800bed0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800beda:	687a      	ldr	r2, [r7, #4]
 800bedc:	33b0      	adds	r3, #176	; 0xb0
 800bede:	009b      	lsls	r3, r3, #2
 800bee0:	4413      	add	r3, r2
 800bee2:	685b      	ldr	r3, [r3, #4]
 800bee4:	691b      	ldr	r3, [r3, #16]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d010      	beq.n	800bf0c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bef0:	687a      	ldr	r2, [r7, #4]
 800bef2:	33b0      	adds	r3, #176	; 0xb0
 800bef4:	009b      	lsls	r3, r3, #2
 800bef6:	4413      	add	r3, r2
 800bef8:	685b      	ldr	r3, [r3, #4]
 800befa:	691b      	ldr	r3, [r3, #16]
 800befc:	68ba      	ldr	r2, [r7, #8]
 800befe:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800bf02:	68ba      	ldr	r2, [r7, #8]
 800bf04:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800bf08:	78fa      	ldrb	r2, [r7, #3]
 800bf0a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800bf0c:	2300      	movs	r3, #0
}
 800bf0e:	4618      	mov	r0, r3
 800bf10:	3710      	adds	r7, #16
 800bf12:	46bd      	mov	sp, r7
 800bf14:	bd80      	pop	{r7, pc}

0800bf16 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bf16:	b580      	push	{r7, lr}
 800bf18:	b084      	sub	sp, #16
 800bf1a:	af00      	add	r7, sp, #0
 800bf1c:	6078      	str	r0, [r7, #4]
 800bf1e:	460b      	mov	r3, r1
 800bf20:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	32b0      	adds	r2, #176	; 0xb0
 800bf2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf30:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	32b0      	adds	r2, #176	; 0xb0
 800bf3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d101      	bne.n	800bf48 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800bf44:	2303      	movs	r3, #3
 800bf46:	e01a      	b.n	800bf7e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bf48:	78fb      	ldrb	r3, [r7, #3]
 800bf4a:	4619      	mov	r1, r3
 800bf4c:	6878      	ldr	r0, [r7, #4]
 800bf4e:	f003 fbfe 	bl	800f74e <USBD_LL_GetRxDataSize>
 800bf52:	4602      	mov	r2, r0
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bf60:	687a      	ldr	r2, [r7, #4]
 800bf62:	33b0      	adds	r3, #176	; 0xb0
 800bf64:	009b      	lsls	r3, r3, #2
 800bf66:	4413      	add	r3, r2
 800bf68:	685b      	ldr	r3, [r3, #4]
 800bf6a:	68db      	ldr	r3, [r3, #12]
 800bf6c:	68fa      	ldr	r2, [r7, #12]
 800bf6e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800bf72:	68fa      	ldr	r2, [r7, #12]
 800bf74:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800bf78:	4611      	mov	r1, r2
 800bf7a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800bf7c:	2300      	movs	r3, #0
}
 800bf7e:	4618      	mov	r0, r3
 800bf80:	3710      	adds	r7, #16
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}

0800bf86 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bf86:	b580      	push	{r7, lr}
 800bf88:	b084      	sub	sp, #16
 800bf8a:	af00      	add	r7, sp, #0
 800bf8c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	32b0      	adds	r2, #176	; 0xb0
 800bf98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf9c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bf9e:	68fb      	ldr	r3, [r7, #12]
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d101      	bne.n	800bfa8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bfa4:	2303      	movs	r3, #3
 800bfa6:	e025      	b.n	800bff4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bfae:	687a      	ldr	r2, [r7, #4]
 800bfb0:	33b0      	adds	r3, #176	; 0xb0
 800bfb2:	009b      	lsls	r3, r3, #2
 800bfb4:	4413      	add	r3, r2
 800bfb6:	685b      	ldr	r3, [r3, #4]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d01a      	beq.n	800bff2 <USBD_CDC_EP0_RxReady+0x6c>
 800bfbc:	68fb      	ldr	r3, [r7, #12]
 800bfbe:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800bfc2:	2bff      	cmp	r3, #255	; 0xff
 800bfc4:	d015      	beq.n	800bff2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bfcc:	687a      	ldr	r2, [r7, #4]
 800bfce:	33b0      	adds	r3, #176	; 0xb0
 800bfd0:	009b      	lsls	r3, r3, #2
 800bfd2:	4413      	add	r3, r2
 800bfd4:	685b      	ldr	r3, [r3, #4]
 800bfd6:	689b      	ldr	r3, [r3, #8]
 800bfd8:	68fa      	ldr	r2, [r7, #12]
 800bfda:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800bfde:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800bfe0:	68fa      	ldr	r2, [r7, #12]
 800bfe2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800bfe6:	b292      	uxth	r2, r2
 800bfe8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	22ff      	movs	r2, #255	; 0xff
 800bfee:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800bff2:	2300      	movs	r3, #0
}
 800bff4:	4618      	mov	r0, r3
 800bff6:	3710      	adds	r7, #16
 800bff8:	46bd      	mov	sp, r7
 800bffa:	bd80      	pop	{r7, pc}

0800bffc <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b086      	sub	sp, #24
 800c000:	af00      	add	r7, sp, #0
 800c002:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c004:	2182      	movs	r1, #130	; 0x82
 800c006:	4818      	ldr	r0, [pc, #96]	; (800c068 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c008:	f000 fd4f 	bl	800caaa <USBD_GetEpDesc>
 800c00c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c00e:	2101      	movs	r1, #1
 800c010:	4815      	ldr	r0, [pc, #84]	; (800c068 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c012:	f000 fd4a 	bl	800caaa <USBD_GetEpDesc>
 800c016:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c018:	2181      	movs	r1, #129	; 0x81
 800c01a:	4813      	ldr	r0, [pc, #76]	; (800c068 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c01c:	f000 fd45 	bl	800caaa <USBD_GetEpDesc>
 800c020:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c022:	697b      	ldr	r3, [r7, #20]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d002      	beq.n	800c02e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c028:	697b      	ldr	r3, [r7, #20]
 800c02a:	2210      	movs	r2, #16
 800c02c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c02e:	693b      	ldr	r3, [r7, #16]
 800c030:	2b00      	cmp	r3, #0
 800c032:	d006      	beq.n	800c042 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c034:	693b      	ldr	r3, [r7, #16]
 800c036:	2200      	movs	r2, #0
 800c038:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c03c:	711a      	strb	r2, [r3, #4]
 800c03e:	2200      	movs	r2, #0
 800c040:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	2b00      	cmp	r3, #0
 800c046:	d006      	beq.n	800c056 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	2200      	movs	r2, #0
 800c04c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c050:	711a      	strb	r2, [r3, #4]
 800c052:	2200      	movs	r2, #0
 800c054:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	2243      	movs	r2, #67	; 0x43
 800c05a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c05c:	4b02      	ldr	r3, [pc, #8]	; (800c068 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800c05e:	4618      	mov	r0, r3
 800c060:	3718      	adds	r7, #24
 800c062:	46bd      	mov	sp, r7
 800c064:	bd80      	pop	{r7, pc}
 800c066:	bf00      	nop
 800c068:	200000a0 	.word	0x200000a0

0800c06c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800c06c:	b580      	push	{r7, lr}
 800c06e:	b086      	sub	sp, #24
 800c070:	af00      	add	r7, sp, #0
 800c072:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c074:	2182      	movs	r1, #130	; 0x82
 800c076:	4818      	ldr	r0, [pc, #96]	; (800c0d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c078:	f000 fd17 	bl	800caaa <USBD_GetEpDesc>
 800c07c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c07e:	2101      	movs	r1, #1
 800c080:	4815      	ldr	r0, [pc, #84]	; (800c0d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c082:	f000 fd12 	bl	800caaa <USBD_GetEpDesc>
 800c086:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c088:	2181      	movs	r1, #129	; 0x81
 800c08a:	4813      	ldr	r0, [pc, #76]	; (800c0d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800c08c:	f000 fd0d 	bl	800caaa <USBD_GetEpDesc>
 800c090:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c092:	697b      	ldr	r3, [r7, #20]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d002      	beq.n	800c09e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800c098:	697b      	ldr	r3, [r7, #20]
 800c09a:	2210      	movs	r2, #16
 800c09c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c09e:	693b      	ldr	r3, [r7, #16]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d006      	beq.n	800c0b2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c0a4:	693b      	ldr	r3, [r7, #16]
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	711a      	strb	r2, [r3, #4]
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	f042 0202 	orr.w	r2, r2, #2
 800c0b0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d006      	beq.n	800c0c6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	2200      	movs	r2, #0
 800c0bc:	711a      	strb	r2, [r3, #4]
 800c0be:	2200      	movs	r2, #0
 800c0c0:	f042 0202 	orr.w	r2, r2, #2
 800c0c4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	2243      	movs	r2, #67	; 0x43
 800c0ca:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c0cc:	4b02      	ldr	r3, [pc, #8]	; (800c0d8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	3718      	adds	r7, #24
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	bd80      	pop	{r7, pc}
 800c0d6:	bf00      	nop
 800c0d8:	200000a0 	.word	0x200000a0

0800c0dc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b086      	sub	sp, #24
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c0e4:	2182      	movs	r1, #130	; 0x82
 800c0e6:	4818      	ldr	r0, [pc, #96]	; (800c148 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c0e8:	f000 fcdf 	bl	800caaa <USBD_GetEpDesc>
 800c0ec:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c0ee:	2101      	movs	r1, #1
 800c0f0:	4815      	ldr	r0, [pc, #84]	; (800c148 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c0f2:	f000 fcda 	bl	800caaa <USBD_GetEpDesc>
 800c0f6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800c0f8:	2181      	movs	r1, #129	; 0x81
 800c0fa:	4813      	ldr	r0, [pc, #76]	; (800c148 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800c0fc:	f000 fcd5 	bl	800caaa <USBD_GetEpDesc>
 800c100:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800c102:	697b      	ldr	r3, [r7, #20]
 800c104:	2b00      	cmp	r3, #0
 800c106:	d002      	beq.n	800c10e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800c108:	697b      	ldr	r3, [r7, #20]
 800c10a:	2210      	movs	r2, #16
 800c10c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800c10e:	693b      	ldr	r3, [r7, #16]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d006      	beq.n	800c122 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c114:	693b      	ldr	r3, [r7, #16]
 800c116:	2200      	movs	r2, #0
 800c118:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c11c:	711a      	strb	r2, [r3, #4]
 800c11e:	2200      	movs	r2, #0
 800c120:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d006      	beq.n	800c136 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	2200      	movs	r2, #0
 800c12c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c130:	711a      	strb	r2, [r3, #4]
 800c132:	2200      	movs	r2, #0
 800c134:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	2243      	movs	r2, #67	; 0x43
 800c13a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800c13c:	4b02      	ldr	r3, [pc, #8]	; (800c148 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800c13e:	4618      	mov	r0, r3
 800c140:	3718      	adds	r7, #24
 800c142:	46bd      	mov	sp, r7
 800c144:	bd80      	pop	{r7, pc}
 800c146:	bf00      	nop
 800c148:	200000a0 	.word	0x200000a0

0800c14c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800c14c:	b480      	push	{r7}
 800c14e:	b083      	sub	sp, #12
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	220a      	movs	r2, #10
 800c158:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800c15a:	4b03      	ldr	r3, [pc, #12]	; (800c168 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800c15c:	4618      	mov	r0, r3
 800c15e:	370c      	adds	r7, #12
 800c160:	46bd      	mov	sp, r7
 800c162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c166:	4770      	bx	lr
 800c168:	2000005c 	.word	0x2000005c

0800c16c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800c16c:	b480      	push	{r7}
 800c16e:	b083      	sub	sp, #12
 800c170:	af00      	add	r7, sp, #0
 800c172:	6078      	str	r0, [r7, #4]
 800c174:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d101      	bne.n	800c180 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800c17c:	2303      	movs	r3, #3
 800c17e:	e009      	b.n	800c194 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c186:	687a      	ldr	r2, [r7, #4]
 800c188:	33b0      	adds	r3, #176	; 0xb0
 800c18a:	009b      	lsls	r3, r3, #2
 800c18c:	4413      	add	r3, r2
 800c18e:	683a      	ldr	r2, [r7, #0]
 800c190:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800c192:	2300      	movs	r3, #0
}
 800c194:	4618      	mov	r0, r3
 800c196:	370c      	adds	r7, #12
 800c198:	46bd      	mov	sp, r7
 800c19a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19e:	4770      	bx	lr

0800c1a0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800c1a0:	b480      	push	{r7}
 800c1a2:	b087      	sub	sp, #28
 800c1a4:	af00      	add	r7, sp, #0
 800c1a6:	60f8      	str	r0, [r7, #12]
 800c1a8:	60b9      	str	r1, [r7, #8]
 800c1aa:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	32b0      	adds	r2, #176	; 0xb0
 800c1b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1ba:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c1bc:	697b      	ldr	r3, [r7, #20]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d101      	bne.n	800c1c6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c1c2:	2303      	movs	r3, #3
 800c1c4:	e008      	b.n	800c1d8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800c1c6:	697b      	ldr	r3, [r7, #20]
 800c1c8:	68ba      	ldr	r2, [r7, #8]
 800c1ca:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800c1ce:	697b      	ldr	r3, [r7, #20]
 800c1d0:	687a      	ldr	r2, [r7, #4]
 800c1d2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800c1d6:	2300      	movs	r3, #0
}
 800c1d8:	4618      	mov	r0, r3
 800c1da:	371c      	adds	r7, #28
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e2:	4770      	bx	lr

0800c1e4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800c1e4:	b480      	push	{r7}
 800c1e6:	b085      	sub	sp, #20
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
 800c1ec:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	32b0      	adds	r2, #176	; 0xb0
 800c1f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c1fc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c1fe:	68fb      	ldr	r3, [r7, #12]
 800c200:	2b00      	cmp	r3, #0
 800c202:	d101      	bne.n	800c208 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800c204:	2303      	movs	r3, #3
 800c206:	e004      	b.n	800c212 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	683a      	ldr	r2, [r7, #0]
 800c20c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800c210:	2300      	movs	r3, #0
}
 800c212:	4618      	mov	r0, r3
 800c214:	3714      	adds	r7, #20
 800c216:	46bd      	mov	sp, r7
 800c218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21c:	4770      	bx	lr
	...

0800c220 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800c220:	b580      	push	{r7, lr}
 800c222:	b084      	sub	sp, #16
 800c224:	af00      	add	r7, sp, #0
 800c226:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	32b0      	adds	r2, #176	; 0xb0
 800c232:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c236:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800c238:	2301      	movs	r3, #1
 800c23a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800c23c:	68bb      	ldr	r3, [r7, #8]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d101      	bne.n	800c246 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800c242:	2303      	movs	r3, #3
 800c244:	e025      	b.n	800c292 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800c246:	68bb      	ldr	r3, [r7, #8]
 800c248:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d11f      	bne.n	800c290 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800c250:	68bb      	ldr	r3, [r7, #8]
 800c252:	2201      	movs	r2, #1
 800c254:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800c258:	4b10      	ldr	r3, [pc, #64]	; (800c29c <USBD_CDC_TransmitPacket+0x7c>)
 800c25a:	781b      	ldrb	r3, [r3, #0]
 800c25c:	f003 020f 	and.w	r2, r3, #15
 800c260:	68bb      	ldr	r3, [r7, #8]
 800c262:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800c266:	6878      	ldr	r0, [r7, #4]
 800c268:	4613      	mov	r3, r2
 800c26a:	009b      	lsls	r3, r3, #2
 800c26c:	4413      	add	r3, r2
 800c26e:	009b      	lsls	r3, r3, #2
 800c270:	4403      	add	r3, r0
 800c272:	3318      	adds	r3, #24
 800c274:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c276:	4b09      	ldr	r3, [pc, #36]	; (800c29c <USBD_CDC_TransmitPacket+0x7c>)
 800c278:	7819      	ldrb	r1, [r3, #0]
 800c27a:	68bb      	ldr	r3, [r7, #8]
 800c27c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c280:	68bb      	ldr	r3, [r7, #8]
 800c282:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c286:	6878      	ldr	r0, [r7, #4]
 800c288:	f003 fa1f 	bl	800f6ca <USBD_LL_Transmit>

    ret = USBD_OK;
 800c28c:	2300      	movs	r3, #0
 800c28e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c290:	7bfb      	ldrb	r3, [r7, #15]
}
 800c292:	4618      	mov	r0, r3
 800c294:	3710      	adds	r7, #16
 800c296:	46bd      	mov	sp, r7
 800c298:	bd80      	pop	{r7, pc}
 800c29a:	bf00      	nop
 800c29c:	200000e3 	.word	0x200000e3

0800c2a0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b084      	sub	sp, #16
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	32b0      	adds	r2, #176	; 0xb0
 800c2b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2b6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	32b0      	adds	r2, #176	; 0xb0
 800c2c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d101      	bne.n	800c2ce <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c2ca:	2303      	movs	r3, #3
 800c2cc:	e018      	b.n	800c300 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	7c1b      	ldrb	r3, [r3, #16]
 800c2d2:	2b00      	cmp	r3, #0
 800c2d4:	d10a      	bne.n	800c2ec <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c2d6:	4b0c      	ldr	r3, [pc, #48]	; (800c308 <USBD_CDC_ReceivePacket+0x68>)
 800c2d8:	7819      	ldrb	r1, [r3, #0]
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c2e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c2e4:	6878      	ldr	r0, [r7, #4]
 800c2e6:	f003 fa11 	bl	800f70c <USBD_LL_PrepareReceive>
 800c2ea:	e008      	b.n	800c2fe <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c2ec:	4b06      	ldr	r3, [pc, #24]	; (800c308 <USBD_CDC_ReceivePacket+0x68>)
 800c2ee:	7819      	ldrb	r1, [r3, #0]
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c2f6:	2340      	movs	r3, #64	; 0x40
 800c2f8:	6878      	ldr	r0, [r7, #4]
 800c2fa:	f003 fa07 	bl	800f70c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c2fe:	2300      	movs	r3, #0
}
 800c300:	4618      	mov	r0, r3
 800c302:	3710      	adds	r7, #16
 800c304:	46bd      	mov	sp, r7
 800c306:	bd80      	pop	{r7, pc}
 800c308:	200000e4 	.word	0x200000e4

0800c30c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c30c:	b580      	push	{r7, lr}
 800c30e:	b086      	sub	sp, #24
 800c310:	af00      	add	r7, sp, #0
 800c312:	60f8      	str	r0, [r7, #12]
 800c314:	60b9      	str	r1, [r7, #8]
 800c316:	4613      	mov	r3, r2
 800c318:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d101      	bne.n	800c324 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c320:	2303      	movs	r3, #3
 800c322:	e01f      	b.n	800c364 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	2200      	movs	r2, #0
 800c328:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800c32c:	68fb      	ldr	r3, [r7, #12]
 800c32e:	2200      	movs	r2, #0
 800c330:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	2200      	movs	r2, #0
 800c338:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c33c:	68bb      	ldr	r3, [r7, #8]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d003      	beq.n	800c34a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c342:	68fb      	ldr	r3, [r7, #12]
 800c344:	68ba      	ldr	r2, [r7, #8]
 800c346:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	2201      	movs	r2, #1
 800c34e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	79fa      	ldrb	r2, [r7, #7]
 800c356:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c358:	68f8      	ldr	r0, [r7, #12]
 800c35a:	f003 f881 	bl	800f460 <USBD_LL_Init>
 800c35e:	4603      	mov	r3, r0
 800c360:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c362:	7dfb      	ldrb	r3, [r7, #23]
}
 800c364:	4618      	mov	r0, r3
 800c366:	3718      	adds	r7, #24
 800c368:	46bd      	mov	sp, r7
 800c36a:	bd80      	pop	{r7, pc}

0800c36c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b084      	sub	sp, #16
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
 800c374:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c376:	2300      	movs	r3, #0
 800c378:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c37a:	683b      	ldr	r3, [r7, #0]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d101      	bne.n	800c384 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c380:	2303      	movs	r3, #3
 800c382:	e025      	b.n	800c3d0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	683a      	ldr	r2, [r7, #0]
 800c388:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	32ae      	adds	r2, #174	; 0xae
 800c396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c39a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	d00f      	beq.n	800c3c0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	32ae      	adds	r2, #174	; 0xae
 800c3aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3b0:	f107 020e 	add.w	r2, r7, #14
 800c3b4:	4610      	mov	r0, r2
 800c3b6:	4798      	blx	r3
 800c3b8:	4602      	mov	r2, r0
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c3c6:	1c5a      	adds	r2, r3, #1
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800c3ce:	2300      	movs	r3, #0
}
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	3710      	adds	r7, #16
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	bd80      	pop	{r7, pc}

0800c3d8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b082      	sub	sp, #8
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c3e0:	6878      	ldr	r0, [r7, #4]
 800c3e2:	f003 f889 	bl	800f4f8 <USBD_LL_Start>
 800c3e6:	4603      	mov	r3, r0
}
 800c3e8:	4618      	mov	r0, r3
 800c3ea:	3708      	adds	r7, #8
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bd80      	pop	{r7, pc}

0800c3f0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c3f0:	b480      	push	{r7}
 800c3f2:	b083      	sub	sp, #12
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c3f8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c3fa:	4618      	mov	r0, r3
 800c3fc:	370c      	adds	r7, #12
 800c3fe:	46bd      	mov	sp, r7
 800c400:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c404:	4770      	bx	lr

0800c406 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c406:	b580      	push	{r7, lr}
 800c408:	b084      	sub	sp, #16
 800c40a:	af00      	add	r7, sp, #0
 800c40c:	6078      	str	r0, [r7, #4]
 800c40e:	460b      	mov	r3, r1
 800c410:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c412:	2300      	movs	r3, #0
 800c414:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d009      	beq.n	800c434 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	78fa      	ldrb	r2, [r7, #3]
 800c42a:	4611      	mov	r1, r2
 800c42c:	6878      	ldr	r0, [r7, #4]
 800c42e:	4798      	blx	r3
 800c430:	4603      	mov	r3, r0
 800c432:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c434:	7bfb      	ldrb	r3, [r7, #15]
}
 800c436:	4618      	mov	r0, r3
 800c438:	3710      	adds	r7, #16
 800c43a:	46bd      	mov	sp, r7
 800c43c:	bd80      	pop	{r7, pc}

0800c43e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c43e:	b580      	push	{r7, lr}
 800c440:	b084      	sub	sp, #16
 800c442:	af00      	add	r7, sp, #0
 800c444:	6078      	str	r0, [r7, #4]
 800c446:	460b      	mov	r3, r1
 800c448:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c44a:	2300      	movs	r3, #0
 800c44c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c454:	685b      	ldr	r3, [r3, #4]
 800c456:	78fa      	ldrb	r2, [r7, #3]
 800c458:	4611      	mov	r1, r2
 800c45a:	6878      	ldr	r0, [r7, #4]
 800c45c:	4798      	blx	r3
 800c45e:	4603      	mov	r3, r0
 800c460:	2b00      	cmp	r3, #0
 800c462:	d001      	beq.n	800c468 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c464:	2303      	movs	r3, #3
 800c466:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c468:	7bfb      	ldrb	r3, [r7, #15]
}
 800c46a:	4618      	mov	r0, r3
 800c46c:	3710      	adds	r7, #16
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}

0800c472 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c472:	b580      	push	{r7, lr}
 800c474:	b084      	sub	sp, #16
 800c476:	af00      	add	r7, sp, #0
 800c478:	6078      	str	r0, [r7, #4]
 800c47a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c482:	6839      	ldr	r1, [r7, #0]
 800c484:	4618      	mov	r0, r3
 800c486:	f001 f90e 	bl	800d6a6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	2201      	movs	r2, #1
 800c48e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c498:	461a      	mov	r2, r3
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c4a6:	f003 031f 	and.w	r3, r3, #31
 800c4aa:	2b02      	cmp	r3, #2
 800c4ac:	d01a      	beq.n	800c4e4 <USBD_LL_SetupStage+0x72>
 800c4ae:	2b02      	cmp	r3, #2
 800c4b0:	d822      	bhi.n	800c4f8 <USBD_LL_SetupStage+0x86>
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d002      	beq.n	800c4bc <USBD_LL_SetupStage+0x4a>
 800c4b6:	2b01      	cmp	r3, #1
 800c4b8:	d00a      	beq.n	800c4d0 <USBD_LL_SetupStage+0x5e>
 800c4ba:	e01d      	b.n	800c4f8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c4c2:	4619      	mov	r1, r3
 800c4c4:	6878      	ldr	r0, [r7, #4]
 800c4c6:	f000 fb65 	bl	800cb94 <USBD_StdDevReq>
 800c4ca:	4603      	mov	r3, r0
 800c4cc:	73fb      	strb	r3, [r7, #15]
      break;
 800c4ce:	e020      	b.n	800c512 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c4d6:	4619      	mov	r1, r3
 800c4d8:	6878      	ldr	r0, [r7, #4]
 800c4da:	f000 fbcd 	bl	800cc78 <USBD_StdItfReq>
 800c4de:	4603      	mov	r3, r0
 800c4e0:	73fb      	strb	r3, [r7, #15]
      break;
 800c4e2:	e016      	b.n	800c512 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c4ea:	4619      	mov	r1, r3
 800c4ec:	6878      	ldr	r0, [r7, #4]
 800c4ee:	f000 fc2f 	bl	800cd50 <USBD_StdEPReq>
 800c4f2:	4603      	mov	r3, r0
 800c4f4:	73fb      	strb	r3, [r7, #15]
      break;
 800c4f6:	e00c      	b.n	800c512 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c4fe:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c502:	b2db      	uxtb	r3, r3
 800c504:	4619      	mov	r1, r3
 800c506:	6878      	ldr	r0, [r7, #4]
 800c508:	f003 f856 	bl	800f5b8 <USBD_LL_StallEP>
 800c50c:	4603      	mov	r3, r0
 800c50e:	73fb      	strb	r3, [r7, #15]
      break;
 800c510:	bf00      	nop
  }

  return ret;
 800c512:	7bfb      	ldrb	r3, [r7, #15]
}
 800c514:	4618      	mov	r0, r3
 800c516:	3710      	adds	r7, #16
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}

0800c51c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c51c:	b580      	push	{r7, lr}
 800c51e:	b086      	sub	sp, #24
 800c520:	af00      	add	r7, sp, #0
 800c522:	60f8      	str	r0, [r7, #12]
 800c524:	460b      	mov	r3, r1
 800c526:	607a      	str	r2, [r7, #4]
 800c528:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c52a:	2300      	movs	r3, #0
 800c52c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c52e:	7afb      	ldrb	r3, [r7, #11]
 800c530:	2b00      	cmp	r3, #0
 800c532:	d16e      	bne.n	800c612 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c53a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c542:	2b03      	cmp	r3, #3
 800c544:	f040 8098 	bne.w	800c678 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c548:	693b      	ldr	r3, [r7, #16]
 800c54a:	689a      	ldr	r2, [r3, #8]
 800c54c:	693b      	ldr	r3, [r7, #16]
 800c54e:	68db      	ldr	r3, [r3, #12]
 800c550:	429a      	cmp	r2, r3
 800c552:	d913      	bls.n	800c57c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c554:	693b      	ldr	r3, [r7, #16]
 800c556:	689a      	ldr	r2, [r3, #8]
 800c558:	693b      	ldr	r3, [r7, #16]
 800c55a:	68db      	ldr	r3, [r3, #12]
 800c55c:	1ad2      	subs	r2, r2, r3
 800c55e:	693b      	ldr	r3, [r7, #16]
 800c560:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c562:	693b      	ldr	r3, [r7, #16]
 800c564:	68da      	ldr	r2, [r3, #12]
 800c566:	693b      	ldr	r3, [r7, #16]
 800c568:	689b      	ldr	r3, [r3, #8]
 800c56a:	4293      	cmp	r3, r2
 800c56c:	bf28      	it	cs
 800c56e:	4613      	movcs	r3, r2
 800c570:	461a      	mov	r2, r3
 800c572:	6879      	ldr	r1, [r7, #4]
 800c574:	68f8      	ldr	r0, [r7, #12]
 800c576:	f001 f98a 	bl	800d88e <USBD_CtlContinueRx>
 800c57a:	e07d      	b.n	800c678 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c582:	f003 031f 	and.w	r3, r3, #31
 800c586:	2b02      	cmp	r3, #2
 800c588:	d014      	beq.n	800c5b4 <USBD_LL_DataOutStage+0x98>
 800c58a:	2b02      	cmp	r3, #2
 800c58c:	d81d      	bhi.n	800c5ca <USBD_LL_DataOutStage+0xae>
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d002      	beq.n	800c598 <USBD_LL_DataOutStage+0x7c>
 800c592:	2b01      	cmp	r3, #1
 800c594:	d003      	beq.n	800c59e <USBD_LL_DataOutStage+0x82>
 800c596:	e018      	b.n	800c5ca <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c598:	2300      	movs	r3, #0
 800c59a:	75bb      	strb	r3, [r7, #22]
            break;
 800c59c:	e018      	b.n	800c5d0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c5a4:	b2db      	uxtb	r3, r3
 800c5a6:	4619      	mov	r1, r3
 800c5a8:	68f8      	ldr	r0, [r7, #12]
 800c5aa:	f000 fa64 	bl	800ca76 <USBD_CoreFindIF>
 800c5ae:	4603      	mov	r3, r0
 800c5b0:	75bb      	strb	r3, [r7, #22]
            break;
 800c5b2:	e00d      	b.n	800c5d0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c5ba:	b2db      	uxtb	r3, r3
 800c5bc:	4619      	mov	r1, r3
 800c5be:	68f8      	ldr	r0, [r7, #12]
 800c5c0:	f000 fa66 	bl	800ca90 <USBD_CoreFindEP>
 800c5c4:	4603      	mov	r3, r0
 800c5c6:	75bb      	strb	r3, [r7, #22]
            break;
 800c5c8:	e002      	b.n	800c5d0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	75bb      	strb	r3, [r7, #22]
            break;
 800c5ce:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c5d0:	7dbb      	ldrb	r3, [r7, #22]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d119      	bne.n	800c60a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c5dc:	b2db      	uxtb	r3, r3
 800c5de:	2b03      	cmp	r3, #3
 800c5e0:	d113      	bne.n	800c60a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c5e2:	7dba      	ldrb	r2, [r7, #22]
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	32ae      	adds	r2, #174	; 0xae
 800c5e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5ec:	691b      	ldr	r3, [r3, #16]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d00b      	beq.n	800c60a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c5f2:	7dba      	ldrb	r2, [r7, #22]
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c5fa:	7dba      	ldrb	r2, [r7, #22]
 800c5fc:	68fb      	ldr	r3, [r7, #12]
 800c5fe:	32ae      	adds	r2, #174	; 0xae
 800c600:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c604:	691b      	ldr	r3, [r3, #16]
 800c606:	68f8      	ldr	r0, [r7, #12]
 800c608:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c60a:	68f8      	ldr	r0, [r7, #12]
 800c60c:	f001 f950 	bl	800d8b0 <USBD_CtlSendStatus>
 800c610:	e032      	b.n	800c678 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c612:	7afb      	ldrb	r3, [r7, #11]
 800c614:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c618:	b2db      	uxtb	r3, r3
 800c61a:	4619      	mov	r1, r3
 800c61c:	68f8      	ldr	r0, [r7, #12]
 800c61e:	f000 fa37 	bl	800ca90 <USBD_CoreFindEP>
 800c622:	4603      	mov	r3, r0
 800c624:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c626:	7dbb      	ldrb	r3, [r7, #22]
 800c628:	2bff      	cmp	r3, #255	; 0xff
 800c62a:	d025      	beq.n	800c678 <USBD_LL_DataOutStage+0x15c>
 800c62c:	7dbb      	ldrb	r3, [r7, #22]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d122      	bne.n	800c678 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c632:	68fb      	ldr	r3, [r7, #12]
 800c634:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c638:	b2db      	uxtb	r3, r3
 800c63a:	2b03      	cmp	r3, #3
 800c63c:	d117      	bne.n	800c66e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c63e:	7dba      	ldrb	r2, [r7, #22]
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	32ae      	adds	r2, #174	; 0xae
 800c644:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c648:	699b      	ldr	r3, [r3, #24]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d00f      	beq.n	800c66e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800c64e:	7dba      	ldrb	r2, [r7, #22]
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c656:	7dba      	ldrb	r2, [r7, #22]
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	32ae      	adds	r2, #174	; 0xae
 800c65c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c660:	699b      	ldr	r3, [r3, #24]
 800c662:	7afa      	ldrb	r2, [r7, #11]
 800c664:	4611      	mov	r1, r2
 800c666:	68f8      	ldr	r0, [r7, #12]
 800c668:	4798      	blx	r3
 800c66a:	4603      	mov	r3, r0
 800c66c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c66e:	7dfb      	ldrb	r3, [r7, #23]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d001      	beq.n	800c678 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c674:	7dfb      	ldrb	r3, [r7, #23]
 800c676:	e000      	b.n	800c67a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c678:	2300      	movs	r3, #0
}
 800c67a:	4618      	mov	r0, r3
 800c67c:	3718      	adds	r7, #24
 800c67e:	46bd      	mov	sp, r7
 800c680:	bd80      	pop	{r7, pc}

0800c682 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c682:	b580      	push	{r7, lr}
 800c684:	b086      	sub	sp, #24
 800c686:	af00      	add	r7, sp, #0
 800c688:	60f8      	str	r0, [r7, #12]
 800c68a:	460b      	mov	r3, r1
 800c68c:	607a      	str	r2, [r7, #4]
 800c68e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c690:	7afb      	ldrb	r3, [r7, #11]
 800c692:	2b00      	cmp	r3, #0
 800c694:	d16f      	bne.n	800c776 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	3314      	adds	r3, #20
 800c69a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c6a2:	2b02      	cmp	r3, #2
 800c6a4:	d15a      	bne.n	800c75c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800c6a6:	693b      	ldr	r3, [r7, #16]
 800c6a8:	689a      	ldr	r2, [r3, #8]
 800c6aa:	693b      	ldr	r3, [r7, #16]
 800c6ac:	68db      	ldr	r3, [r3, #12]
 800c6ae:	429a      	cmp	r2, r3
 800c6b0:	d914      	bls.n	800c6dc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c6b2:	693b      	ldr	r3, [r7, #16]
 800c6b4:	689a      	ldr	r2, [r3, #8]
 800c6b6:	693b      	ldr	r3, [r7, #16]
 800c6b8:	68db      	ldr	r3, [r3, #12]
 800c6ba:	1ad2      	subs	r2, r2, r3
 800c6bc:	693b      	ldr	r3, [r7, #16]
 800c6be:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c6c0:	693b      	ldr	r3, [r7, #16]
 800c6c2:	689b      	ldr	r3, [r3, #8]
 800c6c4:	461a      	mov	r2, r3
 800c6c6:	6879      	ldr	r1, [r7, #4]
 800c6c8:	68f8      	ldr	r0, [r7, #12]
 800c6ca:	f001 f8b2 	bl	800d832 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c6ce:	2300      	movs	r3, #0
 800c6d0:	2200      	movs	r2, #0
 800c6d2:	2100      	movs	r1, #0
 800c6d4:	68f8      	ldr	r0, [r7, #12]
 800c6d6:	f003 f819 	bl	800f70c <USBD_LL_PrepareReceive>
 800c6da:	e03f      	b.n	800c75c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c6dc:	693b      	ldr	r3, [r7, #16]
 800c6de:	68da      	ldr	r2, [r3, #12]
 800c6e0:	693b      	ldr	r3, [r7, #16]
 800c6e2:	689b      	ldr	r3, [r3, #8]
 800c6e4:	429a      	cmp	r2, r3
 800c6e6:	d11c      	bne.n	800c722 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c6e8:	693b      	ldr	r3, [r7, #16]
 800c6ea:	685a      	ldr	r2, [r3, #4]
 800c6ec:	693b      	ldr	r3, [r7, #16]
 800c6ee:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c6f0:	429a      	cmp	r2, r3
 800c6f2:	d316      	bcc.n	800c722 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c6f4:	693b      	ldr	r3, [r7, #16]
 800c6f6:	685a      	ldr	r2, [r3, #4]
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c6fe:	429a      	cmp	r2, r3
 800c700:	d20f      	bcs.n	800c722 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c702:	2200      	movs	r2, #0
 800c704:	2100      	movs	r1, #0
 800c706:	68f8      	ldr	r0, [r7, #12]
 800c708:	f001 f893 	bl	800d832 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c70c:	68fb      	ldr	r3, [r7, #12]
 800c70e:	2200      	movs	r2, #0
 800c710:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c714:	2300      	movs	r3, #0
 800c716:	2200      	movs	r2, #0
 800c718:	2100      	movs	r1, #0
 800c71a:	68f8      	ldr	r0, [r7, #12]
 800c71c:	f002 fff6 	bl	800f70c <USBD_LL_PrepareReceive>
 800c720:	e01c      	b.n	800c75c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c722:	68fb      	ldr	r3, [r7, #12]
 800c724:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c728:	b2db      	uxtb	r3, r3
 800c72a:	2b03      	cmp	r3, #3
 800c72c:	d10f      	bne.n	800c74e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c734:	68db      	ldr	r3, [r3, #12]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d009      	beq.n	800c74e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	2200      	movs	r2, #0
 800c73e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c748:	68db      	ldr	r3, [r3, #12]
 800c74a:	68f8      	ldr	r0, [r7, #12]
 800c74c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c74e:	2180      	movs	r1, #128	; 0x80
 800c750:	68f8      	ldr	r0, [r7, #12]
 800c752:	f002 ff31 	bl	800f5b8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c756:	68f8      	ldr	r0, [r7, #12]
 800c758:	f001 f8bd 	bl	800d8d6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c762:	2b00      	cmp	r3, #0
 800c764:	d03a      	beq.n	800c7dc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800c766:	68f8      	ldr	r0, [r7, #12]
 800c768:	f7ff fe42 	bl	800c3f0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	2200      	movs	r2, #0
 800c770:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c774:	e032      	b.n	800c7dc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c776:	7afb      	ldrb	r3, [r7, #11]
 800c778:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c77c:	b2db      	uxtb	r3, r3
 800c77e:	4619      	mov	r1, r3
 800c780:	68f8      	ldr	r0, [r7, #12]
 800c782:	f000 f985 	bl	800ca90 <USBD_CoreFindEP>
 800c786:	4603      	mov	r3, r0
 800c788:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c78a:	7dfb      	ldrb	r3, [r7, #23]
 800c78c:	2bff      	cmp	r3, #255	; 0xff
 800c78e:	d025      	beq.n	800c7dc <USBD_LL_DataInStage+0x15a>
 800c790:	7dfb      	ldrb	r3, [r7, #23]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d122      	bne.n	800c7dc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c79c:	b2db      	uxtb	r3, r3
 800c79e:	2b03      	cmp	r3, #3
 800c7a0:	d11c      	bne.n	800c7dc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c7a2:	7dfa      	ldrb	r2, [r7, #23]
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	32ae      	adds	r2, #174	; 0xae
 800c7a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7ac:	695b      	ldr	r3, [r3, #20]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d014      	beq.n	800c7dc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800c7b2:	7dfa      	ldrb	r2, [r7, #23]
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c7ba:	7dfa      	ldrb	r2, [r7, #23]
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	32ae      	adds	r2, #174	; 0xae
 800c7c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c7c4:	695b      	ldr	r3, [r3, #20]
 800c7c6:	7afa      	ldrb	r2, [r7, #11]
 800c7c8:	4611      	mov	r1, r2
 800c7ca:	68f8      	ldr	r0, [r7, #12]
 800c7cc:	4798      	blx	r3
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c7d2:	7dbb      	ldrb	r3, [r7, #22]
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d001      	beq.n	800c7dc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800c7d8:	7dbb      	ldrb	r3, [r7, #22]
 800c7da:	e000      	b.n	800c7de <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800c7dc:	2300      	movs	r3, #0
}
 800c7de:	4618      	mov	r0, r3
 800c7e0:	3718      	adds	r7, #24
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	bd80      	pop	{r7, pc}

0800c7e6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c7e6:	b580      	push	{r7, lr}
 800c7e8:	b084      	sub	sp, #16
 800c7ea:	af00      	add	r7, sp, #0
 800c7ec:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c7ee:	2300      	movs	r3, #0
 800c7f0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	2201      	movs	r2, #1
 800c7f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	2200      	movs	r2, #0
 800c806:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2200      	movs	r2, #0
 800c80c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2200      	movs	r2, #0
 800c814:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d014      	beq.n	800c84c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c828:	685b      	ldr	r3, [r3, #4]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d00e      	beq.n	800c84c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c834:	685b      	ldr	r3, [r3, #4]
 800c836:	687a      	ldr	r2, [r7, #4]
 800c838:	6852      	ldr	r2, [r2, #4]
 800c83a:	b2d2      	uxtb	r2, r2
 800c83c:	4611      	mov	r1, r2
 800c83e:	6878      	ldr	r0, [r7, #4]
 800c840:	4798      	blx	r3
 800c842:	4603      	mov	r3, r0
 800c844:	2b00      	cmp	r3, #0
 800c846:	d001      	beq.n	800c84c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c848:	2303      	movs	r3, #3
 800c84a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c84c:	2340      	movs	r3, #64	; 0x40
 800c84e:	2200      	movs	r2, #0
 800c850:	2100      	movs	r1, #0
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f002 fe6b 	bl	800f52e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2201      	movs	r2, #1
 800c85c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2240      	movs	r2, #64	; 0x40
 800c864:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c868:	2340      	movs	r3, #64	; 0x40
 800c86a:	2200      	movs	r2, #0
 800c86c:	2180      	movs	r1, #128	; 0x80
 800c86e:	6878      	ldr	r0, [r7, #4]
 800c870:	f002 fe5d 	bl	800f52e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	2201      	movs	r2, #1
 800c878:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	2240      	movs	r2, #64	; 0x40
 800c87e:	621a      	str	r2, [r3, #32]

  return ret;
 800c880:	7bfb      	ldrb	r3, [r7, #15]
}
 800c882:	4618      	mov	r0, r3
 800c884:	3710      	adds	r7, #16
 800c886:	46bd      	mov	sp, r7
 800c888:	bd80      	pop	{r7, pc}

0800c88a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c88a:	b480      	push	{r7}
 800c88c:	b083      	sub	sp, #12
 800c88e:	af00      	add	r7, sp, #0
 800c890:	6078      	str	r0, [r7, #4]
 800c892:	460b      	mov	r3, r1
 800c894:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	78fa      	ldrb	r2, [r7, #3]
 800c89a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c89c:	2300      	movs	r3, #0
}
 800c89e:	4618      	mov	r0, r3
 800c8a0:	370c      	adds	r7, #12
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8a8:	4770      	bx	lr

0800c8aa <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c8aa:	b480      	push	{r7}
 800c8ac:	b083      	sub	sp, #12
 800c8ae:	af00      	add	r7, sp, #0
 800c8b0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8b8:	b2db      	uxtb	r3, r3
 800c8ba:	2b04      	cmp	r3, #4
 800c8bc:	d006      	beq.n	800c8cc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8c4:	b2da      	uxtb	r2, r3
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	2204      	movs	r2, #4
 800c8d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c8d4:	2300      	movs	r3, #0
}
 800c8d6:	4618      	mov	r0, r3
 800c8d8:	370c      	adds	r7, #12
 800c8da:	46bd      	mov	sp, r7
 800c8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e0:	4770      	bx	lr

0800c8e2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c8e2:	b480      	push	{r7}
 800c8e4:	b083      	sub	sp, #12
 800c8e6:	af00      	add	r7, sp, #0
 800c8e8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c8f0:	b2db      	uxtb	r3, r3
 800c8f2:	2b04      	cmp	r3, #4
 800c8f4:	d106      	bne.n	800c904 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c8fc:	b2da      	uxtb	r2, r3
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c904:	2300      	movs	r3, #0
}
 800c906:	4618      	mov	r0, r3
 800c908:	370c      	adds	r7, #12
 800c90a:	46bd      	mov	sp, r7
 800c90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c910:	4770      	bx	lr

0800c912 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c912:	b580      	push	{r7, lr}
 800c914:	b082      	sub	sp, #8
 800c916:	af00      	add	r7, sp, #0
 800c918:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c920:	b2db      	uxtb	r3, r3
 800c922:	2b03      	cmp	r3, #3
 800c924:	d110      	bne.n	800c948 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d00b      	beq.n	800c948 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c936:	69db      	ldr	r3, [r3, #28]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d005      	beq.n	800c948 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c942:	69db      	ldr	r3, [r3, #28]
 800c944:	6878      	ldr	r0, [r7, #4]
 800c946:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c948:	2300      	movs	r3, #0
}
 800c94a:	4618      	mov	r0, r3
 800c94c:	3708      	adds	r7, #8
 800c94e:	46bd      	mov	sp, r7
 800c950:	bd80      	pop	{r7, pc}

0800c952 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c952:	b580      	push	{r7, lr}
 800c954:	b082      	sub	sp, #8
 800c956:	af00      	add	r7, sp, #0
 800c958:	6078      	str	r0, [r7, #4]
 800c95a:	460b      	mov	r3, r1
 800c95c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	32ae      	adds	r2, #174	; 0xae
 800c968:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d101      	bne.n	800c974 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c970:	2303      	movs	r3, #3
 800c972:	e01c      	b.n	800c9ae <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c97a:	b2db      	uxtb	r3, r3
 800c97c:	2b03      	cmp	r3, #3
 800c97e:	d115      	bne.n	800c9ac <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	32ae      	adds	r2, #174	; 0xae
 800c98a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c98e:	6a1b      	ldr	r3, [r3, #32]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d00b      	beq.n	800c9ac <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	32ae      	adds	r2, #174	; 0xae
 800c99e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9a2:	6a1b      	ldr	r3, [r3, #32]
 800c9a4:	78fa      	ldrb	r2, [r7, #3]
 800c9a6:	4611      	mov	r1, r2
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c9ac:	2300      	movs	r3, #0
}
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	3708      	adds	r7, #8
 800c9b2:	46bd      	mov	sp, r7
 800c9b4:	bd80      	pop	{r7, pc}

0800c9b6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c9b6:	b580      	push	{r7, lr}
 800c9b8:	b082      	sub	sp, #8
 800c9ba:	af00      	add	r7, sp, #0
 800c9bc:	6078      	str	r0, [r7, #4]
 800c9be:	460b      	mov	r3, r1
 800c9c0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	32ae      	adds	r2, #174	; 0xae
 800c9cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9d0:	2b00      	cmp	r3, #0
 800c9d2:	d101      	bne.n	800c9d8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c9d4:	2303      	movs	r3, #3
 800c9d6:	e01c      	b.n	800ca12 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c9de:	b2db      	uxtb	r3, r3
 800c9e0:	2b03      	cmp	r3, #3
 800c9e2:	d115      	bne.n	800ca10 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	32ae      	adds	r2, #174	; 0xae
 800c9ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c9f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d00b      	beq.n	800ca10 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	32ae      	adds	r2, #174	; 0xae
 800ca02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca08:	78fa      	ldrb	r2, [r7, #3]
 800ca0a:	4611      	mov	r1, r2
 800ca0c:	6878      	ldr	r0, [r7, #4]
 800ca0e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ca10:	2300      	movs	r3, #0
}
 800ca12:	4618      	mov	r0, r3
 800ca14:	3708      	adds	r7, #8
 800ca16:	46bd      	mov	sp, r7
 800ca18:	bd80      	pop	{r7, pc}

0800ca1a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ca1a:	b480      	push	{r7}
 800ca1c:	b083      	sub	sp, #12
 800ca1e:	af00      	add	r7, sp, #0
 800ca20:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ca22:	2300      	movs	r3, #0
}
 800ca24:	4618      	mov	r0, r3
 800ca26:	370c      	adds	r7, #12
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2e:	4770      	bx	lr

0800ca30 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b084      	sub	sp, #16
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ca38:	2300      	movs	r3, #0
 800ca3a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2201      	movs	r2, #1
 800ca40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d00e      	beq.n	800ca6c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ca54:	685b      	ldr	r3, [r3, #4]
 800ca56:	687a      	ldr	r2, [r7, #4]
 800ca58:	6852      	ldr	r2, [r2, #4]
 800ca5a:	b2d2      	uxtb	r2, r2
 800ca5c:	4611      	mov	r1, r2
 800ca5e:	6878      	ldr	r0, [r7, #4]
 800ca60:	4798      	blx	r3
 800ca62:	4603      	mov	r3, r0
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d001      	beq.n	800ca6c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ca68:	2303      	movs	r3, #3
 800ca6a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ca6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca6e:	4618      	mov	r0, r3
 800ca70:	3710      	adds	r7, #16
 800ca72:	46bd      	mov	sp, r7
 800ca74:	bd80      	pop	{r7, pc}

0800ca76 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ca76:	b480      	push	{r7}
 800ca78:	b083      	sub	sp, #12
 800ca7a:	af00      	add	r7, sp, #0
 800ca7c:	6078      	str	r0, [r7, #4]
 800ca7e:	460b      	mov	r3, r1
 800ca80:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ca82:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ca84:	4618      	mov	r0, r3
 800ca86:	370c      	adds	r7, #12
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca8e:	4770      	bx	lr

0800ca90 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ca90:	b480      	push	{r7}
 800ca92:	b083      	sub	sp, #12
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	6078      	str	r0, [r7, #4]
 800ca98:	460b      	mov	r3, r1
 800ca9a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ca9c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ca9e:	4618      	mov	r0, r3
 800caa0:	370c      	adds	r7, #12
 800caa2:	46bd      	mov	sp, r7
 800caa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa8:	4770      	bx	lr

0800caaa <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800caaa:	b580      	push	{r7, lr}
 800caac:	b086      	sub	sp, #24
 800caae:	af00      	add	r7, sp, #0
 800cab0:	6078      	str	r0, [r7, #4]
 800cab2:	460b      	mov	r3, r1
 800cab4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800cabe:	2300      	movs	r3, #0
 800cac0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	885b      	ldrh	r3, [r3, #2]
 800cac6:	b29a      	uxth	r2, r3
 800cac8:	68fb      	ldr	r3, [r7, #12]
 800caca:	781b      	ldrb	r3, [r3, #0]
 800cacc:	b29b      	uxth	r3, r3
 800cace:	429a      	cmp	r2, r3
 800cad0:	d920      	bls.n	800cb14 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	781b      	ldrb	r3, [r3, #0]
 800cad6:	b29b      	uxth	r3, r3
 800cad8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800cada:	e013      	b.n	800cb04 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800cadc:	f107 030a 	add.w	r3, r7, #10
 800cae0:	4619      	mov	r1, r3
 800cae2:	6978      	ldr	r0, [r7, #20]
 800cae4:	f000 f81b 	bl	800cb1e <USBD_GetNextDesc>
 800cae8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800caea:	697b      	ldr	r3, [r7, #20]
 800caec:	785b      	ldrb	r3, [r3, #1]
 800caee:	2b05      	cmp	r3, #5
 800caf0:	d108      	bne.n	800cb04 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800caf2:	697b      	ldr	r3, [r7, #20]
 800caf4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800caf6:	693b      	ldr	r3, [r7, #16]
 800caf8:	789b      	ldrb	r3, [r3, #2]
 800cafa:	78fa      	ldrb	r2, [r7, #3]
 800cafc:	429a      	cmp	r2, r3
 800cafe:	d008      	beq.n	800cb12 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800cb00:	2300      	movs	r3, #0
 800cb02:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800cb04:	68fb      	ldr	r3, [r7, #12]
 800cb06:	885b      	ldrh	r3, [r3, #2]
 800cb08:	b29a      	uxth	r2, r3
 800cb0a:	897b      	ldrh	r3, [r7, #10]
 800cb0c:	429a      	cmp	r2, r3
 800cb0e:	d8e5      	bhi.n	800cadc <USBD_GetEpDesc+0x32>
 800cb10:	e000      	b.n	800cb14 <USBD_GetEpDesc+0x6a>
          break;
 800cb12:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800cb14:	693b      	ldr	r3, [r7, #16]
}
 800cb16:	4618      	mov	r0, r3
 800cb18:	3718      	adds	r7, #24
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	bd80      	pop	{r7, pc}

0800cb1e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800cb1e:	b480      	push	{r7}
 800cb20:	b085      	sub	sp, #20
 800cb22:	af00      	add	r7, sp, #0
 800cb24:	6078      	str	r0, [r7, #4]
 800cb26:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	881a      	ldrh	r2, [r3, #0]
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	781b      	ldrb	r3, [r3, #0]
 800cb34:	b29b      	uxth	r3, r3
 800cb36:	4413      	add	r3, r2
 800cb38:	b29a      	uxth	r2, r3
 800cb3a:	683b      	ldr	r3, [r7, #0]
 800cb3c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	781b      	ldrb	r3, [r3, #0]
 800cb42:	461a      	mov	r2, r3
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	4413      	add	r3, r2
 800cb48:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800cb4a:	68fb      	ldr	r3, [r7, #12]
}
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	3714      	adds	r7, #20
 800cb50:	46bd      	mov	sp, r7
 800cb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb56:	4770      	bx	lr

0800cb58 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800cb58:	b480      	push	{r7}
 800cb5a:	b087      	sub	sp, #28
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800cb64:	697b      	ldr	r3, [r7, #20]
 800cb66:	781b      	ldrb	r3, [r3, #0]
 800cb68:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800cb6a:	697b      	ldr	r3, [r7, #20]
 800cb6c:	3301      	adds	r3, #1
 800cb6e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800cb70:	697b      	ldr	r3, [r7, #20]
 800cb72:	781b      	ldrb	r3, [r3, #0]
 800cb74:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800cb76:	8a3b      	ldrh	r3, [r7, #16]
 800cb78:	021b      	lsls	r3, r3, #8
 800cb7a:	b21a      	sxth	r2, r3
 800cb7c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800cb80:	4313      	orrs	r3, r2
 800cb82:	b21b      	sxth	r3, r3
 800cb84:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800cb86:	89fb      	ldrh	r3, [r7, #14]
}
 800cb88:	4618      	mov	r0, r3
 800cb8a:	371c      	adds	r7, #28
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb92:	4770      	bx	lr

0800cb94 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cb94:	b580      	push	{r7, lr}
 800cb96:	b084      	sub	sp, #16
 800cb98:	af00      	add	r7, sp, #0
 800cb9a:	6078      	str	r0, [r7, #4]
 800cb9c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cb9e:	2300      	movs	r3, #0
 800cba0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cba2:	683b      	ldr	r3, [r7, #0]
 800cba4:	781b      	ldrb	r3, [r3, #0]
 800cba6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cbaa:	2b40      	cmp	r3, #64	; 0x40
 800cbac:	d005      	beq.n	800cbba <USBD_StdDevReq+0x26>
 800cbae:	2b40      	cmp	r3, #64	; 0x40
 800cbb0:	d857      	bhi.n	800cc62 <USBD_StdDevReq+0xce>
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d00f      	beq.n	800cbd6 <USBD_StdDevReq+0x42>
 800cbb6:	2b20      	cmp	r3, #32
 800cbb8:	d153      	bne.n	800cc62 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	32ae      	adds	r2, #174	; 0xae
 800cbc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbc8:	689b      	ldr	r3, [r3, #8]
 800cbca:	6839      	ldr	r1, [r7, #0]
 800cbcc:	6878      	ldr	r0, [r7, #4]
 800cbce:	4798      	blx	r3
 800cbd0:	4603      	mov	r3, r0
 800cbd2:	73fb      	strb	r3, [r7, #15]
      break;
 800cbd4:	e04a      	b.n	800cc6c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	785b      	ldrb	r3, [r3, #1]
 800cbda:	2b09      	cmp	r3, #9
 800cbdc:	d83b      	bhi.n	800cc56 <USBD_StdDevReq+0xc2>
 800cbde:	a201      	add	r2, pc, #4	; (adr r2, 800cbe4 <USBD_StdDevReq+0x50>)
 800cbe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbe4:	0800cc39 	.word	0x0800cc39
 800cbe8:	0800cc4d 	.word	0x0800cc4d
 800cbec:	0800cc57 	.word	0x0800cc57
 800cbf0:	0800cc43 	.word	0x0800cc43
 800cbf4:	0800cc57 	.word	0x0800cc57
 800cbf8:	0800cc17 	.word	0x0800cc17
 800cbfc:	0800cc0d 	.word	0x0800cc0d
 800cc00:	0800cc57 	.word	0x0800cc57
 800cc04:	0800cc2f 	.word	0x0800cc2f
 800cc08:	0800cc21 	.word	0x0800cc21
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800cc0c:	6839      	ldr	r1, [r7, #0]
 800cc0e:	6878      	ldr	r0, [r7, #4]
 800cc10:	f000 fa3c 	bl	800d08c <USBD_GetDescriptor>
          break;
 800cc14:	e024      	b.n	800cc60 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800cc16:	6839      	ldr	r1, [r7, #0]
 800cc18:	6878      	ldr	r0, [r7, #4]
 800cc1a:	f000 fba1 	bl	800d360 <USBD_SetAddress>
          break;
 800cc1e:	e01f      	b.n	800cc60 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800cc20:	6839      	ldr	r1, [r7, #0]
 800cc22:	6878      	ldr	r0, [r7, #4]
 800cc24:	f000 fbe0 	bl	800d3e8 <USBD_SetConfig>
 800cc28:	4603      	mov	r3, r0
 800cc2a:	73fb      	strb	r3, [r7, #15]
          break;
 800cc2c:	e018      	b.n	800cc60 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800cc2e:	6839      	ldr	r1, [r7, #0]
 800cc30:	6878      	ldr	r0, [r7, #4]
 800cc32:	f000 fc83 	bl	800d53c <USBD_GetConfig>
          break;
 800cc36:	e013      	b.n	800cc60 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800cc38:	6839      	ldr	r1, [r7, #0]
 800cc3a:	6878      	ldr	r0, [r7, #4]
 800cc3c:	f000 fcb4 	bl	800d5a8 <USBD_GetStatus>
          break;
 800cc40:	e00e      	b.n	800cc60 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800cc42:	6839      	ldr	r1, [r7, #0]
 800cc44:	6878      	ldr	r0, [r7, #4]
 800cc46:	f000 fce3 	bl	800d610 <USBD_SetFeature>
          break;
 800cc4a:	e009      	b.n	800cc60 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800cc4c:	6839      	ldr	r1, [r7, #0]
 800cc4e:	6878      	ldr	r0, [r7, #4]
 800cc50:	f000 fd07 	bl	800d662 <USBD_ClrFeature>
          break;
 800cc54:	e004      	b.n	800cc60 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800cc56:	6839      	ldr	r1, [r7, #0]
 800cc58:	6878      	ldr	r0, [r7, #4]
 800cc5a:	f000 fd5e 	bl	800d71a <USBD_CtlError>
          break;
 800cc5e:	bf00      	nop
      }
      break;
 800cc60:	e004      	b.n	800cc6c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800cc62:	6839      	ldr	r1, [r7, #0]
 800cc64:	6878      	ldr	r0, [r7, #4]
 800cc66:	f000 fd58 	bl	800d71a <USBD_CtlError>
      break;
 800cc6a:	bf00      	nop
  }

  return ret;
 800cc6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc6e:	4618      	mov	r0, r3
 800cc70:	3710      	adds	r7, #16
 800cc72:	46bd      	mov	sp, r7
 800cc74:	bd80      	pop	{r7, pc}
 800cc76:	bf00      	nop

0800cc78 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b084      	sub	sp, #16
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
 800cc80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800cc82:	2300      	movs	r3, #0
 800cc84:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cc86:	683b      	ldr	r3, [r7, #0]
 800cc88:	781b      	ldrb	r3, [r3, #0]
 800cc8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cc8e:	2b40      	cmp	r3, #64	; 0x40
 800cc90:	d005      	beq.n	800cc9e <USBD_StdItfReq+0x26>
 800cc92:	2b40      	cmp	r3, #64	; 0x40
 800cc94:	d852      	bhi.n	800cd3c <USBD_StdItfReq+0xc4>
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d001      	beq.n	800cc9e <USBD_StdItfReq+0x26>
 800cc9a:	2b20      	cmp	r3, #32
 800cc9c:	d14e      	bne.n	800cd3c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cca4:	b2db      	uxtb	r3, r3
 800cca6:	3b01      	subs	r3, #1
 800cca8:	2b02      	cmp	r3, #2
 800ccaa:	d840      	bhi.n	800cd2e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ccac:	683b      	ldr	r3, [r7, #0]
 800ccae:	889b      	ldrh	r3, [r3, #4]
 800ccb0:	b2db      	uxtb	r3, r3
 800ccb2:	2b01      	cmp	r3, #1
 800ccb4:	d836      	bhi.n	800cd24 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	889b      	ldrh	r3, [r3, #4]
 800ccba:	b2db      	uxtb	r3, r3
 800ccbc:	4619      	mov	r1, r3
 800ccbe:	6878      	ldr	r0, [r7, #4]
 800ccc0:	f7ff fed9 	bl	800ca76 <USBD_CoreFindIF>
 800ccc4:	4603      	mov	r3, r0
 800ccc6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ccc8:	7bbb      	ldrb	r3, [r7, #14]
 800ccca:	2bff      	cmp	r3, #255	; 0xff
 800cccc:	d01d      	beq.n	800cd0a <USBD_StdItfReq+0x92>
 800ccce:	7bbb      	ldrb	r3, [r7, #14]
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d11a      	bne.n	800cd0a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ccd4:	7bba      	ldrb	r2, [r7, #14]
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	32ae      	adds	r2, #174	; 0xae
 800ccda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccde:	689b      	ldr	r3, [r3, #8]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d00f      	beq.n	800cd04 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800cce4:	7bba      	ldrb	r2, [r7, #14]
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ccec:	7bba      	ldrb	r2, [r7, #14]
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	32ae      	adds	r2, #174	; 0xae
 800ccf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccf6:	689b      	ldr	r3, [r3, #8]
 800ccf8:	6839      	ldr	r1, [r7, #0]
 800ccfa:	6878      	ldr	r0, [r7, #4]
 800ccfc:	4798      	blx	r3
 800ccfe:	4603      	mov	r3, r0
 800cd00:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800cd02:	e004      	b.n	800cd0e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800cd04:	2303      	movs	r3, #3
 800cd06:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800cd08:	e001      	b.n	800cd0e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800cd0a:	2303      	movs	r3, #3
 800cd0c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	88db      	ldrh	r3, [r3, #6]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d110      	bne.n	800cd38 <USBD_StdItfReq+0xc0>
 800cd16:	7bfb      	ldrb	r3, [r7, #15]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d10d      	bne.n	800cd38 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800cd1c:	6878      	ldr	r0, [r7, #4]
 800cd1e:	f000 fdc7 	bl	800d8b0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800cd22:	e009      	b.n	800cd38 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800cd24:	6839      	ldr	r1, [r7, #0]
 800cd26:	6878      	ldr	r0, [r7, #4]
 800cd28:	f000 fcf7 	bl	800d71a <USBD_CtlError>
          break;
 800cd2c:	e004      	b.n	800cd38 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800cd2e:	6839      	ldr	r1, [r7, #0]
 800cd30:	6878      	ldr	r0, [r7, #4]
 800cd32:	f000 fcf2 	bl	800d71a <USBD_CtlError>
          break;
 800cd36:	e000      	b.n	800cd3a <USBD_StdItfReq+0xc2>
          break;
 800cd38:	bf00      	nop
      }
      break;
 800cd3a:	e004      	b.n	800cd46 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800cd3c:	6839      	ldr	r1, [r7, #0]
 800cd3e:	6878      	ldr	r0, [r7, #4]
 800cd40:	f000 fceb 	bl	800d71a <USBD_CtlError>
      break;
 800cd44:	bf00      	nop
  }

  return ret;
 800cd46:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd48:	4618      	mov	r0, r3
 800cd4a:	3710      	adds	r7, #16
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	bd80      	pop	{r7, pc}

0800cd50 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b084      	sub	sp, #16
 800cd54:	af00      	add	r7, sp, #0
 800cd56:	6078      	str	r0, [r7, #4]
 800cd58:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800cd5e:	683b      	ldr	r3, [r7, #0]
 800cd60:	889b      	ldrh	r3, [r3, #4]
 800cd62:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	781b      	ldrb	r3, [r3, #0]
 800cd68:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cd6c:	2b40      	cmp	r3, #64	; 0x40
 800cd6e:	d007      	beq.n	800cd80 <USBD_StdEPReq+0x30>
 800cd70:	2b40      	cmp	r3, #64	; 0x40
 800cd72:	f200 817f 	bhi.w	800d074 <USBD_StdEPReq+0x324>
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d02a      	beq.n	800cdd0 <USBD_StdEPReq+0x80>
 800cd7a:	2b20      	cmp	r3, #32
 800cd7c:	f040 817a 	bne.w	800d074 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800cd80:	7bbb      	ldrb	r3, [r7, #14]
 800cd82:	4619      	mov	r1, r3
 800cd84:	6878      	ldr	r0, [r7, #4]
 800cd86:	f7ff fe83 	bl	800ca90 <USBD_CoreFindEP>
 800cd8a:	4603      	mov	r3, r0
 800cd8c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cd8e:	7b7b      	ldrb	r3, [r7, #13]
 800cd90:	2bff      	cmp	r3, #255	; 0xff
 800cd92:	f000 8174 	beq.w	800d07e <USBD_StdEPReq+0x32e>
 800cd96:	7b7b      	ldrb	r3, [r7, #13]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	f040 8170 	bne.w	800d07e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800cd9e:	7b7a      	ldrb	r2, [r7, #13]
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800cda6:	7b7a      	ldrb	r2, [r7, #13]
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	32ae      	adds	r2, #174	; 0xae
 800cdac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdb0:	689b      	ldr	r3, [r3, #8]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	f000 8163 	beq.w	800d07e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800cdb8:	7b7a      	ldrb	r2, [r7, #13]
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	32ae      	adds	r2, #174	; 0xae
 800cdbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cdc2:	689b      	ldr	r3, [r3, #8]
 800cdc4:	6839      	ldr	r1, [r7, #0]
 800cdc6:	6878      	ldr	r0, [r7, #4]
 800cdc8:	4798      	blx	r3
 800cdca:	4603      	mov	r3, r0
 800cdcc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800cdce:	e156      	b.n	800d07e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cdd0:	683b      	ldr	r3, [r7, #0]
 800cdd2:	785b      	ldrb	r3, [r3, #1]
 800cdd4:	2b03      	cmp	r3, #3
 800cdd6:	d008      	beq.n	800cdea <USBD_StdEPReq+0x9a>
 800cdd8:	2b03      	cmp	r3, #3
 800cdda:	f300 8145 	bgt.w	800d068 <USBD_StdEPReq+0x318>
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	f000 809b 	beq.w	800cf1a <USBD_StdEPReq+0x1ca>
 800cde4:	2b01      	cmp	r3, #1
 800cde6:	d03c      	beq.n	800ce62 <USBD_StdEPReq+0x112>
 800cde8:	e13e      	b.n	800d068 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cdf0:	b2db      	uxtb	r3, r3
 800cdf2:	2b02      	cmp	r3, #2
 800cdf4:	d002      	beq.n	800cdfc <USBD_StdEPReq+0xac>
 800cdf6:	2b03      	cmp	r3, #3
 800cdf8:	d016      	beq.n	800ce28 <USBD_StdEPReq+0xd8>
 800cdfa:	e02c      	b.n	800ce56 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cdfc:	7bbb      	ldrb	r3, [r7, #14]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d00d      	beq.n	800ce1e <USBD_StdEPReq+0xce>
 800ce02:	7bbb      	ldrb	r3, [r7, #14]
 800ce04:	2b80      	cmp	r3, #128	; 0x80
 800ce06:	d00a      	beq.n	800ce1e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ce08:	7bbb      	ldrb	r3, [r7, #14]
 800ce0a:	4619      	mov	r1, r3
 800ce0c:	6878      	ldr	r0, [r7, #4]
 800ce0e:	f002 fbd3 	bl	800f5b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ce12:	2180      	movs	r1, #128	; 0x80
 800ce14:	6878      	ldr	r0, [r7, #4]
 800ce16:	f002 fbcf 	bl	800f5b8 <USBD_LL_StallEP>
 800ce1a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ce1c:	e020      	b.n	800ce60 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ce1e:	6839      	ldr	r1, [r7, #0]
 800ce20:	6878      	ldr	r0, [r7, #4]
 800ce22:	f000 fc7a 	bl	800d71a <USBD_CtlError>
              break;
 800ce26:	e01b      	b.n	800ce60 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ce28:	683b      	ldr	r3, [r7, #0]
 800ce2a:	885b      	ldrh	r3, [r3, #2]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d10e      	bne.n	800ce4e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ce30:	7bbb      	ldrb	r3, [r7, #14]
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d00b      	beq.n	800ce4e <USBD_StdEPReq+0xfe>
 800ce36:	7bbb      	ldrb	r3, [r7, #14]
 800ce38:	2b80      	cmp	r3, #128	; 0x80
 800ce3a:	d008      	beq.n	800ce4e <USBD_StdEPReq+0xfe>
 800ce3c:	683b      	ldr	r3, [r7, #0]
 800ce3e:	88db      	ldrh	r3, [r3, #6]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d104      	bne.n	800ce4e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ce44:	7bbb      	ldrb	r3, [r7, #14]
 800ce46:	4619      	mov	r1, r3
 800ce48:	6878      	ldr	r0, [r7, #4]
 800ce4a:	f002 fbb5 	bl	800f5b8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ce4e:	6878      	ldr	r0, [r7, #4]
 800ce50:	f000 fd2e 	bl	800d8b0 <USBD_CtlSendStatus>

              break;
 800ce54:	e004      	b.n	800ce60 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ce56:	6839      	ldr	r1, [r7, #0]
 800ce58:	6878      	ldr	r0, [r7, #4]
 800ce5a:	f000 fc5e 	bl	800d71a <USBD_CtlError>
              break;
 800ce5e:	bf00      	nop
          }
          break;
 800ce60:	e107      	b.n	800d072 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ce68:	b2db      	uxtb	r3, r3
 800ce6a:	2b02      	cmp	r3, #2
 800ce6c:	d002      	beq.n	800ce74 <USBD_StdEPReq+0x124>
 800ce6e:	2b03      	cmp	r3, #3
 800ce70:	d016      	beq.n	800cea0 <USBD_StdEPReq+0x150>
 800ce72:	e04b      	b.n	800cf0c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ce74:	7bbb      	ldrb	r3, [r7, #14]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d00d      	beq.n	800ce96 <USBD_StdEPReq+0x146>
 800ce7a:	7bbb      	ldrb	r3, [r7, #14]
 800ce7c:	2b80      	cmp	r3, #128	; 0x80
 800ce7e:	d00a      	beq.n	800ce96 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ce80:	7bbb      	ldrb	r3, [r7, #14]
 800ce82:	4619      	mov	r1, r3
 800ce84:	6878      	ldr	r0, [r7, #4]
 800ce86:	f002 fb97 	bl	800f5b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ce8a:	2180      	movs	r1, #128	; 0x80
 800ce8c:	6878      	ldr	r0, [r7, #4]
 800ce8e:	f002 fb93 	bl	800f5b8 <USBD_LL_StallEP>
 800ce92:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ce94:	e040      	b.n	800cf18 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ce96:	6839      	ldr	r1, [r7, #0]
 800ce98:	6878      	ldr	r0, [r7, #4]
 800ce9a:	f000 fc3e 	bl	800d71a <USBD_CtlError>
              break;
 800ce9e:	e03b      	b.n	800cf18 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cea0:	683b      	ldr	r3, [r7, #0]
 800cea2:	885b      	ldrh	r3, [r3, #2]
 800cea4:	2b00      	cmp	r3, #0
 800cea6:	d136      	bne.n	800cf16 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800cea8:	7bbb      	ldrb	r3, [r7, #14]
 800ceaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d004      	beq.n	800cebc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ceb2:	7bbb      	ldrb	r3, [r7, #14]
 800ceb4:	4619      	mov	r1, r3
 800ceb6:	6878      	ldr	r0, [r7, #4]
 800ceb8:	f002 fb9d 	bl	800f5f6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800cebc:	6878      	ldr	r0, [r7, #4]
 800cebe:	f000 fcf7 	bl	800d8b0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800cec2:	7bbb      	ldrb	r3, [r7, #14]
 800cec4:	4619      	mov	r1, r3
 800cec6:	6878      	ldr	r0, [r7, #4]
 800cec8:	f7ff fde2 	bl	800ca90 <USBD_CoreFindEP>
 800cecc:	4603      	mov	r3, r0
 800cece:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ced0:	7b7b      	ldrb	r3, [r7, #13]
 800ced2:	2bff      	cmp	r3, #255	; 0xff
 800ced4:	d01f      	beq.n	800cf16 <USBD_StdEPReq+0x1c6>
 800ced6:	7b7b      	ldrb	r3, [r7, #13]
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d11c      	bne.n	800cf16 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800cedc:	7b7a      	ldrb	r2, [r7, #13]
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800cee4:	7b7a      	ldrb	r2, [r7, #13]
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	32ae      	adds	r2, #174	; 0xae
 800ceea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ceee:	689b      	ldr	r3, [r3, #8]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d010      	beq.n	800cf16 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cef4:	7b7a      	ldrb	r2, [r7, #13]
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	32ae      	adds	r2, #174	; 0xae
 800cefa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cefe:	689b      	ldr	r3, [r3, #8]
 800cf00:	6839      	ldr	r1, [r7, #0]
 800cf02:	6878      	ldr	r0, [r7, #4]
 800cf04:	4798      	blx	r3
 800cf06:	4603      	mov	r3, r0
 800cf08:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800cf0a:	e004      	b.n	800cf16 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800cf0c:	6839      	ldr	r1, [r7, #0]
 800cf0e:	6878      	ldr	r0, [r7, #4]
 800cf10:	f000 fc03 	bl	800d71a <USBD_CtlError>
              break;
 800cf14:	e000      	b.n	800cf18 <USBD_StdEPReq+0x1c8>
              break;
 800cf16:	bf00      	nop
          }
          break;
 800cf18:	e0ab      	b.n	800d072 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800cf1a:	687b      	ldr	r3, [r7, #4]
 800cf1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf20:	b2db      	uxtb	r3, r3
 800cf22:	2b02      	cmp	r3, #2
 800cf24:	d002      	beq.n	800cf2c <USBD_StdEPReq+0x1dc>
 800cf26:	2b03      	cmp	r3, #3
 800cf28:	d032      	beq.n	800cf90 <USBD_StdEPReq+0x240>
 800cf2a:	e097      	b.n	800d05c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cf2c:	7bbb      	ldrb	r3, [r7, #14]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d007      	beq.n	800cf42 <USBD_StdEPReq+0x1f2>
 800cf32:	7bbb      	ldrb	r3, [r7, #14]
 800cf34:	2b80      	cmp	r3, #128	; 0x80
 800cf36:	d004      	beq.n	800cf42 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800cf38:	6839      	ldr	r1, [r7, #0]
 800cf3a:	6878      	ldr	r0, [r7, #4]
 800cf3c:	f000 fbed 	bl	800d71a <USBD_CtlError>
                break;
 800cf40:	e091      	b.n	800d066 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cf42:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	da0b      	bge.n	800cf62 <USBD_StdEPReq+0x212>
 800cf4a:	7bbb      	ldrb	r3, [r7, #14]
 800cf4c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cf50:	4613      	mov	r3, r2
 800cf52:	009b      	lsls	r3, r3, #2
 800cf54:	4413      	add	r3, r2
 800cf56:	009b      	lsls	r3, r3, #2
 800cf58:	3310      	adds	r3, #16
 800cf5a:	687a      	ldr	r2, [r7, #4]
 800cf5c:	4413      	add	r3, r2
 800cf5e:	3304      	adds	r3, #4
 800cf60:	e00b      	b.n	800cf7a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cf62:	7bbb      	ldrb	r3, [r7, #14]
 800cf64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cf68:	4613      	mov	r3, r2
 800cf6a:	009b      	lsls	r3, r3, #2
 800cf6c:	4413      	add	r3, r2
 800cf6e:	009b      	lsls	r3, r3, #2
 800cf70:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cf74:	687a      	ldr	r2, [r7, #4]
 800cf76:	4413      	add	r3, r2
 800cf78:	3304      	adds	r3, #4
 800cf7a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800cf7c:	68bb      	ldr	r3, [r7, #8]
 800cf7e:	2200      	movs	r2, #0
 800cf80:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cf82:	68bb      	ldr	r3, [r7, #8]
 800cf84:	2202      	movs	r2, #2
 800cf86:	4619      	mov	r1, r3
 800cf88:	6878      	ldr	r0, [r7, #4]
 800cf8a:	f000 fc37 	bl	800d7fc <USBD_CtlSendData>
              break;
 800cf8e:	e06a      	b.n	800d066 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800cf90:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	da11      	bge.n	800cfbc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cf98:	7bbb      	ldrb	r3, [r7, #14]
 800cf9a:	f003 020f 	and.w	r2, r3, #15
 800cf9e:	6879      	ldr	r1, [r7, #4]
 800cfa0:	4613      	mov	r3, r2
 800cfa2:	009b      	lsls	r3, r3, #2
 800cfa4:	4413      	add	r3, r2
 800cfa6:	009b      	lsls	r3, r3, #2
 800cfa8:	440b      	add	r3, r1
 800cfaa:	3324      	adds	r3, #36	; 0x24
 800cfac:	881b      	ldrh	r3, [r3, #0]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d117      	bne.n	800cfe2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cfb2:	6839      	ldr	r1, [r7, #0]
 800cfb4:	6878      	ldr	r0, [r7, #4]
 800cfb6:	f000 fbb0 	bl	800d71a <USBD_CtlError>
                  break;
 800cfba:	e054      	b.n	800d066 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cfbc:	7bbb      	ldrb	r3, [r7, #14]
 800cfbe:	f003 020f 	and.w	r2, r3, #15
 800cfc2:	6879      	ldr	r1, [r7, #4]
 800cfc4:	4613      	mov	r3, r2
 800cfc6:	009b      	lsls	r3, r3, #2
 800cfc8:	4413      	add	r3, r2
 800cfca:	009b      	lsls	r3, r3, #2
 800cfcc:	440b      	add	r3, r1
 800cfce:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cfd2:	881b      	ldrh	r3, [r3, #0]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d104      	bne.n	800cfe2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cfd8:	6839      	ldr	r1, [r7, #0]
 800cfda:	6878      	ldr	r0, [r7, #4]
 800cfdc:	f000 fb9d 	bl	800d71a <USBD_CtlError>
                  break;
 800cfe0:	e041      	b.n	800d066 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cfe2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	da0b      	bge.n	800d002 <USBD_StdEPReq+0x2b2>
 800cfea:	7bbb      	ldrb	r3, [r7, #14]
 800cfec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cff0:	4613      	mov	r3, r2
 800cff2:	009b      	lsls	r3, r3, #2
 800cff4:	4413      	add	r3, r2
 800cff6:	009b      	lsls	r3, r3, #2
 800cff8:	3310      	adds	r3, #16
 800cffa:	687a      	ldr	r2, [r7, #4]
 800cffc:	4413      	add	r3, r2
 800cffe:	3304      	adds	r3, #4
 800d000:	e00b      	b.n	800d01a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d002:	7bbb      	ldrb	r3, [r7, #14]
 800d004:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d008:	4613      	mov	r3, r2
 800d00a:	009b      	lsls	r3, r3, #2
 800d00c:	4413      	add	r3, r2
 800d00e:	009b      	lsls	r3, r3, #2
 800d010:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d014:	687a      	ldr	r2, [r7, #4]
 800d016:	4413      	add	r3, r2
 800d018:	3304      	adds	r3, #4
 800d01a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d01c:	7bbb      	ldrb	r3, [r7, #14]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d002      	beq.n	800d028 <USBD_StdEPReq+0x2d8>
 800d022:	7bbb      	ldrb	r3, [r7, #14]
 800d024:	2b80      	cmp	r3, #128	; 0x80
 800d026:	d103      	bne.n	800d030 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800d028:	68bb      	ldr	r3, [r7, #8]
 800d02a:	2200      	movs	r2, #0
 800d02c:	601a      	str	r2, [r3, #0]
 800d02e:	e00e      	b.n	800d04e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800d030:	7bbb      	ldrb	r3, [r7, #14]
 800d032:	4619      	mov	r1, r3
 800d034:	6878      	ldr	r0, [r7, #4]
 800d036:	f002 fafd 	bl	800f634 <USBD_LL_IsStallEP>
 800d03a:	4603      	mov	r3, r0
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d003      	beq.n	800d048 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800d040:	68bb      	ldr	r3, [r7, #8]
 800d042:	2201      	movs	r2, #1
 800d044:	601a      	str	r2, [r3, #0]
 800d046:	e002      	b.n	800d04e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800d048:	68bb      	ldr	r3, [r7, #8]
 800d04a:	2200      	movs	r2, #0
 800d04c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d04e:	68bb      	ldr	r3, [r7, #8]
 800d050:	2202      	movs	r2, #2
 800d052:	4619      	mov	r1, r3
 800d054:	6878      	ldr	r0, [r7, #4]
 800d056:	f000 fbd1 	bl	800d7fc <USBD_CtlSendData>
              break;
 800d05a:	e004      	b.n	800d066 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800d05c:	6839      	ldr	r1, [r7, #0]
 800d05e:	6878      	ldr	r0, [r7, #4]
 800d060:	f000 fb5b 	bl	800d71a <USBD_CtlError>
              break;
 800d064:	bf00      	nop
          }
          break;
 800d066:	e004      	b.n	800d072 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800d068:	6839      	ldr	r1, [r7, #0]
 800d06a:	6878      	ldr	r0, [r7, #4]
 800d06c:	f000 fb55 	bl	800d71a <USBD_CtlError>
          break;
 800d070:	bf00      	nop
      }
      break;
 800d072:	e005      	b.n	800d080 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800d074:	6839      	ldr	r1, [r7, #0]
 800d076:	6878      	ldr	r0, [r7, #4]
 800d078:	f000 fb4f 	bl	800d71a <USBD_CtlError>
      break;
 800d07c:	e000      	b.n	800d080 <USBD_StdEPReq+0x330>
      break;
 800d07e:	bf00      	nop
  }

  return ret;
 800d080:	7bfb      	ldrb	r3, [r7, #15]
}
 800d082:	4618      	mov	r0, r3
 800d084:	3710      	adds	r7, #16
 800d086:	46bd      	mov	sp, r7
 800d088:	bd80      	pop	{r7, pc}
	...

0800d08c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b084      	sub	sp, #16
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]
 800d094:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d096:	2300      	movs	r3, #0
 800d098:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800d09a:	2300      	movs	r3, #0
 800d09c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800d09e:	2300      	movs	r3, #0
 800d0a0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800d0a2:	683b      	ldr	r3, [r7, #0]
 800d0a4:	885b      	ldrh	r3, [r3, #2]
 800d0a6:	0a1b      	lsrs	r3, r3, #8
 800d0a8:	b29b      	uxth	r3, r3
 800d0aa:	3b01      	subs	r3, #1
 800d0ac:	2b06      	cmp	r3, #6
 800d0ae:	f200 8128 	bhi.w	800d302 <USBD_GetDescriptor+0x276>
 800d0b2:	a201      	add	r2, pc, #4	; (adr r2, 800d0b8 <USBD_GetDescriptor+0x2c>)
 800d0b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0b8:	0800d0d5 	.word	0x0800d0d5
 800d0bc:	0800d0ed 	.word	0x0800d0ed
 800d0c0:	0800d12d 	.word	0x0800d12d
 800d0c4:	0800d303 	.word	0x0800d303
 800d0c8:	0800d303 	.word	0x0800d303
 800d0cc:	0800d2a3 	.word	0x0800d2a3
 800d0d0:	0800d2cf 	.word	0x0800d2cf
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	687a      	ldr	r2, [r7, #4]
 800d0de:	7c12      	ldrb	r2, [r2, #16]
 800d0e0:	f107 0108 	add.w	r1, r7, #8
 800d0e4:	4610      	mov	r0, r2
 800d0e6:	4798      	blx	r3
 800d0e8:	60f8      	str	r0, [r7, #12]
      break;
 800d0ea:	e112      	b.n	800d312 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	7c1b      	ldrb	r3, [r3, #16]
 800d0f0:	2b00      	cmp	r3, #0
 800d0f2:	d10d      	bne.n	800d110 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d0fc:	f107 0208 	add.w	r2, r7, #8
 800d100:	4610      	mov	r0, r2
 800d102:	4798      	blx	r3
 800d104:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	3301      	adds	r3, #1
 800d10a:	2202      	movs	r2, #2
 800d10c:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800d10e:	e100      	b.n	800d312 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d118:	f107 0208 	add.w	r2, r7, #8
 800d11c:	4610      	mov	r0, r2
 800d11e:	4798      	blx	r3
 800d120:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	3301      	adds	r3, #1
 800d126:	2202      	movs	r2, #2
 800d128:	701a      	strb	r2, [r3, #0]
      break;
 800d12a:	e0f2      	b.n	800d312 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800d12c:	683b      	ldr	r3, [r7, #0]
 800d12e:	885b      	ldrh	r3, [r3, #2]
 800d130:	b2db      	uxtb	r3, r3
 800d132:	2b05      	cmp	r3, #5
 800d134:	f200 80ac 	bhi.w	800d290 <USBD_GetDescriptor+0x204>
 800d138:	a201      	add	r2, pc, #4	; (adr r2, 800d140 <USBD_GetDescriptor+0xb4>)
 800d13a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d13e:	bf00      	nop
 800d140:	0800d159 	.word	0x0800d159
 800d144:	0800d18d 	.word	0x0800d18d
 800d148:	0800d1c1 	.word	0x0800d1c1
 800d14c:	0800d1f5 	.word	0x0800d1f5
 800d150:	0800d229 	.word	0x0800d229
 800d154:	0800d25d 	.word	0x0800d25d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d15e:	685b      	ldr	r3, [r3, #4]
 800d160:	2b00      	cmp	r3, #0
 800d162:	d00b      	beq.n	800d17c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d16a:	685b      	ldr	r3, [r3, #4]
 800d16c:	687a      	ldr	r2, [r7, #4]
 800d16e:	7c12      	ldrb	r2, [r2, #16]
 800d170:	f107 0108 	add.w	r1, r7, #8
 800d174:	4610      	mov	r0, r2
 800d176:	4798      	blx	r3
 800d178:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d17a:	e091      	b.n	800d2a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d17c:	6839      	ldr	r1, [r7, #0]
 800d17e:	6878      	ldr	r0, [r7, #4]
 800d180:	f000 facb 	bl	800d71a <USBD_CtlError>
            err++;
 800d184:	7afb      	ldrb	r3, [r7, #11]
 800d186:	3301      	adds	r3, #1
 800d188:	72fb      	strb	r3, [r7, #11]
          break;
 800d18a:	e089      	b.n	800d2a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d192:	689b      	ldr	r3, [r3, #8]
 800d194:	2b00      	cmp	r3, #0
 800d196:	d00b      	beq.n	800d1b0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d19e:	689b      	ldr	r3, [r3, #8]
 800d1a0:	687a      	ldr	r2, [r7, #4]
 800d1a2:	7c12      	ldrb	r2, [r2, #16]
 800d1a4:	f107 0108 	add.w	r1, r7, #8
 800d1a8:	4610      	mov	r0, r2
 800d1aa:	4798      	blx	r3
 800d1ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d1ae:	e077      	b.n	800d2a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d1b0:	6839      	ldr	r1, [r7, #0]
 800d1b2:	6878      	ldr	r0, [r7, #4]
 800d1b4:	f000 fab1 	bl	800d71a <USBD_CtlError>
            err++;
 800d1b8:	7afb      	ldrb	r3, [r7, #11]
 800d1ba:	3301      	adds	r3, #1
 800d1bc:	72fb      	strb	r3, [r7, #11]
          break;
 800d1be:	e06f      	b.n	800d2a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d1c6:	68db      	ldr	r3, [r3, #12]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d00b      	beq.n	800d1e4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d1d2:	68db      	ldr	r3, [r3, #12]
 800d1d4:	687a      	ldr	r2, [r7, #4]
 800d1d6:	7c12      	ldrb	r2, [r2, #16]
 800d1d8:	f107 0108 	add.w	r1, r7, #8
 800d1dc:	4610      	mov	r0, r2
 800d1de:	4798      	blx	r3
 800d1e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d1e2:	e05d      	b.n	800d2a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d1e4:	6839      	ldr	r1, [r7, #0]
 800d1e6:	6878      	ldr	r0, [r7, #4]
 800d1e8:	f000 fa97 	bl	800d71a <USBD_CtlError>
            err++;
 800d1ec:	7afb      	ldrb	r3, [r7, #11]
 800d1ee:	3301      	adds	r3, #1
 800d1f0:	72fb      	strb	r3, [r7, #11]
          break;
 800d1f2:	e055      	b.n	800d2a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d1fa:	691b      	ldr	r3, [r3, #16]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d00b      	beq.n	800d218 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d206:	691b      	ldr	r3, [r3, #16]
 800d208:	687a      	ldr	r2, [r7, #4]
 800d20a:	7c12      	ldrb	r2, [r2, #16]
 800d20c:	f107 0108 	add.w	r1, r7, #8
 800d210:	4610      	mov	r0, r2
 800d212:	4798      	blx	r3
 800d214:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d216:	e043      	b.n	800d2a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d218:	6839      	ldr	r1, [r7, #0]
 800d21a:	6878      	ldr	r0, [r7, #4]
 800d21c:	f000 fa7d 	bl	800d71a <USBD_CtlError>
            err++;
 800d220:	7afb      	ldrb	r3, [r7, #11]
 800d222:	3301      	adds	r3, #1
 800d224:	72fb      	strb	r3, [r7, #11]
          break;
 800d226:	e03b      	b.n	800d2a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d22e:	695b      	ldr	r3, [r3, #20]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d00b      	beq.n	800d24c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d23a:	695b      	ldr	r3, [r3, #20]
 800d23c:	687a      	ldr	r2, [r7, #4]
 800d23e:	7c12      	ldrb	r2, [r2, #16]
 800d240:	f107 0108 	add.w	r1, r7, #8
 800d244:	4610      	mov	r0, r2
 800d246:	4798      	blx	r3
 800d248:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d24a:	e029      	b.n	800d2a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d24c:	6839      	ldr	r1, [r7, #0]
 800d24e:	6878      	ldr	r0, [r7, #4]
 800d250:	f000 fa63 	bl	800d71a <USBD_CtlError>
            err++;
 800d254:	7afb      	ldrb	r3, [r7, #11]
 800d256:	3301      	adds	r3, #1
 800d258:	72fb      	strb	r3, [r7, #11]
          break;
 800d25a:	e021      	b.n	800d2a0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d262:	699b      	ldr	r3, [r3, #24]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d00b      	beq.n	800d280 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d26e:	699b      	ldr	r3, [r3, #24]
 800d270:	687a      	ldr	r2, [r7, #4]
 800d272:	7c12      	ldrb	r2, [r2, #16]
 800d274:	f107 0108 	add.w	r1, r7, #8
 800d278:	4610      	mov	r0, r2
 800d27a:	4798      	blx	r3
 800d27c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d27e:	e00f      	b.n	800d2a0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800d280:	6839      	ldr	r1, [r7, #0]
 800d282:	6878      	ldr	r0, [r7, #4]
 800d284:	f000 fa49 	bl	800d71a <USBD_CtlError>
            err++;
 800d288:	7afb      	ldrb	r3, [r7, #11]
 800d28a:	3301      	adds	r3, #1
 800d28c:	72fb      	strb	r3, [r7, #11]
          break;
 800d28e:	e007      	b.n	800d2a0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d290:	6839      	ldr	r1, [r7, #0]
 800d292:	6878      	ldr	r0, [r7, #4]
 800d294:	f000 fa41 	bl	800d71a <USBD_CtlError>
          err++;
 800d298:	7afb      	ldrb	r3, [r7, #11]
 800d29a:	3301      	adds	r3, #1
 800d29c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d29e:	bf00      	nop
      }
      break;
 800d2a0:	e037      	b.n	800d312 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	7c1b      	ldrb	r3, [r3, #16]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d109      	bne.n	800d2be <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2b2:	f107 0208 	add.w	r2, r7, #8
 800d2b6:	4610      	mov	r0, r2
 800d2b8:	4798      	blx	r3
 800d2ba:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d2bc:	e029      	b.n	800d312 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d2be:	6839      	ldr	r1, [r7, #0]
 800d2c0:	6878      	ldr	r0, [r7, #4]
 800d2c2:	f000 fa2a 	bl	800d71a <USBD_CtlError>
        err++;
 800d2c6:	7afb      	ldrb	r3, [r7, #11]
 800d2c8:	3301      	adds	r3, #1
 800d2ca:	72fb      	strb	r3, [r7, #11]
      break;
 800d2cc:	e021      	b.n	800d312 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	7c1b      	ldrb	r3, [r3, #16]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d10d      	bne.n	800d2f2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d2dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2de:	f107 0208 	add.w	r2, r7, #8
 800d2e2:	4610      	mov	r0, r2
 800d2e4:	4798      	blx	r3
 800d2e6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d2e8:	68fb      	ldr	r3, [r7, #12]
 800d2ea:	3301      	adds	r3, #1
 800d2ec:	2207      	movs	r2, #7
 800d2ee:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d2f0:	e00f      	b.n	800d312 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800d2f2:	6839      	ldr	r1, [r7, #0]
 800d2f4:	6878      	ldr	r0, [r7, #4]
 800d2f6:	f000 fa10 	bl	800d71a <USBD_CtlError>
        err++;
 800d2fa:	7afb      	ldrb	r3, [r7, #11]
 800d2fc:	3301      	adds	r3, #1
 800d2fe:	72fb      	strb	r3, [r7, #11]
      break;
 800d300:	e007      	b.n	800d312 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800d302:	6839      	ldr	r1, [r7, #0]
 800d304:	6878      	ldr	r0, [r7, #4]
 800d306:	f000 fa08 	bl	800d71a <USBD_CtlError>
      err++;
 800d30a:	7afb      	ldrb	r3, [r7, #11]
 800d30c:	3301      	adds	r3, #1
 800d30e:	72fb      	strb	r3, [r7, #11]
      break;
 800d310:	bf00      	nop
  }

  if (err != 0U)
 800d312:	7afb      	ldrb	r3, [r7, #11]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d11e      	bne.n	800d356 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800d318:	683b      	ldr	r3, [r7, #0]
 800d31a:	88db      	ldrh	r3, [r3, #6]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d016      	beq.n	800d34e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800d320:	893b      	ldrh	r3, [r7, #8]
 800d322:	2b00      	cmp	r3, #0
 800d324:	d00e      	beq.n	800d344 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800d326:	683b      	ldr	r3, [r7, #0]
 800d328:	88da      	ldrh	r2, [r3, #6]
 800d32a:	893b      	ldrh	r3, [r7, #8]
 800d32c:	4293      	cmp	r3, r2
 800d32e:	bf28      	it	cs
 800d330:	4613      	movcs	r3, r2
 800d332:	b29b      	uxth	r3, r3
 800d334:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d336:	893b      	ldrh	r3, [r7, #8]
 800d338:	461a      	mov	r2, r3
 800d33a:	68f9      	ldr	r1, [r7, #12]
 800d33c:	6878      	ldr	r0, [r7, #4]
 800d33e:	f000 fa5d 	bl	800d7fc <USBD_CtlSendData>
 800d342:	e009      	b.n	800d358 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d344:	6839      	ldr	r1, [r7, #0]
 800d346:	6878      	ldr	r0, [r7, #4]
 800d348:	f000 f9e7 	bl	800d71a <USBD_CtlError>
 800d34c:	e004      	b.n	800d358 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d34e:	6878      	ldr	r0, [r7, #4]
 800d350:	f000 faae 	bl	800d8b0 <USBD_CtlSendStatus>
 800d354:	e000      	b.n	800d358 <USBD_GetDescriptor+0x2cc>
    return;
 800d356:	bf00      	nop
  }
}
 800d358:	3710      	adds	r7, #16
 800d35a:	46bd      	mov	sp, r7
 800d35c:	bd80      	pop	{r7, pc}
 800d35e:	bf00      	nop

0800d360 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b084      	sub	sp, #16
 800d364:	af00      	add	r7, sp, #0
 800d366:	6078      	str	r0, [r7, #4]
 800d368:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	889b      	ldrh	r3, [r3, #4]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d131      	bne.n	800d3d6 <USBD_SetAddress+0x76>
 800d372:	683b      	ldr	r3, [r7, #0]
 800d374:	88db      	ldrh	r3, [r3, #6]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d12d      	bne.n	800d3d6 <USBD_SetAddress+0x76>
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	885b      	ldrh	r3, [r3, #2]
 800d37e:	2b7f      	cmp	r3, #127	; 0x7f
 800d380:	d829      	bhi.n	800d3d6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	885b      	ldrh	r3, [r3, #2]
 800d386:	b2db      	uxtb	r3, r3
 800d388:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d38c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d394:	b2db      	uxtb	r3, r3
 800d396:	2b03      	cmp	r3, #3
 800d398:	d104      	bne.n	800d3a4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d39a:	6839      	ldr	r1, [r7, #0]
 800d39c:	6878      	ldr	r0, [r7, #4]
 800d39e:	f000 f9bc 	bl	800d71a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d3a2:	e01d      	b.n	800d3e0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	7bfa      	ldrb	r2, [r7, #15]
 800d3a8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d3ac:	7bfb      	ldrb	r3, [r7, #15]
 800d3ae:	4619      	mov	r1, r3
 800d3b0:	6878      	ldr	r0, [r7, #4]
 800d3b2:	f002 f96b 	bl	800f68c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d3b6:	6878      	ldr	r0, [r7, #4]
 800d3b8:	f000 fa7a 	bl	800d8b0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d3bc:	7bfb      	ldrb	r3, [r7, #15]
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d004      	beq.n	800d3cc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	2202      	movs	r2, #2
 800d3c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d3ca:	e009      	b.n	800d3e0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	2201      	movs	r2, #1
 800d3d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d3d4:	e004      	b.n	800d3e0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d3d6:	6839      	ldr	r1, [r7, #0]
 800d3d8:	6878      	ldr	r0, [r7, #4]
 800d3da:	f000 f99e 	bl	800d71a <USBD_CtlError>
  }
}
 800d3de:	bf00      	nop
 800d3e0:	bf00      	nop
 800d3e2:	3710      	adds	r7, #16
 800d3e4:	46bd      	mov	sp, r7
 800d3e6:	bd80      	pop	{r7, pc}

0800d3e8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b084      	sub	sp, #16
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
 800d3f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d3f6:	683b      	ldr	r3, [r7, #0]
 800d3f8:	885b      	ldrh	r3, [r3, #2]
 800d3fa:	b2da      	uxtb	r2, r3
 800d3fc:	4b4e      	ldr	r3, [pc, #312]	; (800d538 <USBD_SetConfig+0x150>)
 800d3fe:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d400:	4b4d      	ldr	r3, [pc, #308]	; (800d538 <USBD_SetConfig+0x150>)
 800d402:	781b      	ldrb	r3, [r3, #0]
 800d404:	2b01      	cmp	r3, #1
 800d406:	d905      	bls.n	800d414 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d408:	6839      	ldr	r1, [r7, #0]
 800d40a:	6878      	ldr	r0, [r7, #4]
 800d40c:	f000 f985 	bl	800d71a <USBD_CtlError>
    return USBD_FAIL;
 800d410:	2303      	movs	r3, #3
 800d412:	e08c      	b.n	800d52e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d41a:	b2db      	uxtb	r3, r3
 800d41c:	2b02      	cmp	r3, #2
 800d41e:	d002      	beq.n	800d426 <USBD_SetConfig+0x3e>
 800d420:	2b03      	cmp	r3, #3
 800d422:	d029      	beq.n	800d478 <USBD_SetConfig+0x90>
 800d424:	e075      	b.n	800d512 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d426:	4b44      	ldr	r3, [pc, #272]	; (800d538 <USBD_SetConfig+0x150>)
 800d428:	781b      	ldrb	r3, [r3, #0]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d020      	beq.n	800d470 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d42e:	4b42      	ldr	r3, [pc, #264]	; (800d538 <USBD_SetConfig+0x150>)
 800d430:	781b      	ldrb	r3, [r3, #0]
 800d432:	461a      	mov	r2, r3
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d438:	4b3f      	ldr	r3, [pc, #252]	; (800d538 <USBD_SetConfig+0x150>)
 800d43a:	781b      	ldrb	r3, [r3, #0]
 800d43c:	4619      	mov	r1, r3
 800d43e:	6878      	ldr	r0, [r7, #4]
 800d440:	f7fe ffe1 	bl	800c406 <USBD_SetClassConfig>
 800d444:	4603      	mov	r3, r0
 800d446:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d448:	7bfb      	ldrb	r3, [r7, #15]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d008      	beq.n	800d460 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d44e:	6839      	ldr	r1, [r7, #0]
 800d450:	6878      	ldr	r0, [r7, #4]
 800d452:	f000 f962 	bl	800d71a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d456:	687b      	ldr	r3, [r7, #4]
 800d458:	2202      	movs	r2, #2
 800d45a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d45e:	e065      	b.n	800d52c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d460:	6878      	ldr	r0, [r7, #4]
 800d462:	f000 fa25 	bl	800d8b0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	2203      	movs	r2, #3
 800d46a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d46e:	e05d      	b.n	800d52c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d470:	6878      	ldr	r0, [r7, #4]
 800d472:	f000 fa1d 	bl	800d8b0 <USBD_CtlSendStatus>
      break;
 800d476:	e059      	b.n	800d52c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d478:	4b2f      	ldr	r3, [pc, #188]	; (800d538 <USBD_SetConfig+0x150>)
 800d47a:	781b      	ldrb	r3, [r3, #0]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d112      	bne.n	800d4a6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	2202      	movs	r2, #2
 800d484:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d488:	4b2b      	ldr	r3, [pc, #172]	; (800d538 <USBD_SetConfig+0x150>)
 800d48a:	781b      	ldrb	r3, [r3, #0]
 800d48c:	461a      	mov	r2, r3
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d492:	4b29      	ldr	r3, [pc, #164]	; (800d538 <USBD_SetConfig+0x150>)
 800d494:	781b      	ldrb	r3, [r3, #0]
 800d496:	4619      	mov	r1, r3
 800d498:	6878      	ldr	r0, [r7, #4]
 800d49a:	f7fe ffd0 	bl	800c43e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d49e:	6878      	ldr	r0, [r7, #4]
 800d4a0:	f000 fa06 	bl	800d8b0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d4a4:	e042      	b.n	800d52c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d4a6:	4b24      	ldr	r3, [pc, #144]	; (800d538 <USBD_SetConfig+0x150>)
 800d4a8:	781b      	ldrb	r3, [r3, #0]
 800d4aa:	461a      	mov	r2, r3
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	685b      	ldr	r3, [r3, #4]
 800d4b0:	429a      	cmp	r2, r3
 800d4b2:	d02a      	beq.n	800d50a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	685b      	ldr	r3, [r3, #4]
 800d4b8:	b2db      	uxtb	r3, r3
 800d4ba:	4619      	mov	r1, r3
 800d4bc:	6878      	ldr	r0, [r7, #4]
 800d4be:	f7fe ffbe 	bl	800c43e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d4c2:	4b1d      	ldr	r3, [pc, #116]	; (800d538 <USBD_SetConfig+0x150>)
 800d4c4:	781b      	ldrb	r3, [r3, #0]
 800d4c6:	461a      	mov	r2, r3
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d4cc:	4b1a      	ldr	r3, [pc, #104]	; (800d538 <USBD_SetConfig+0x150>)
 800d4ce:	781b      	ldrb	r3, [r3, #0]
 800d4d0:	4619      	mov	r1, r3
 800d4d2:	6878      	ldr	r0, [r7, #4]
 800d4d4:	f7fe ff97 	bl	800c406 <USBD_SetClassConfig>
 800d4d8:	4603      	mov	r3, r0
 800d4da:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d4dc:	7bfb      	ldrb	r3, [r7, #15]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d00f      	beq.n	800d502 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d4e2:	6839      	ldr	r1, [r7, #0]
 800d4e4:	6878      	ldr	r0, [r7, #4]
 800d4e6:	f000 f918 	bl	800d71a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	685b      	ldr	r3, [r3, #4]
 800d4ee:	b2db      	uxtb	r3, r3
 800d4f0:	4619      	mov	r1, r3
 800d4f2:	6878      	ldr	r0, [r7, #4]
 800d4f4:	f7fe ffa3 	bl	800c43e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	2202      	movs	r2, #2
 800d4fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d500:	e014      	b.n	800d52c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d502:	6878      	ldr	r0, [r7, #4]
 800d504:	f000 f9d4 	bl	800d8b0 <USBD_CtlSendStatus>
      break;
 800d508:	e010      	b.n	800d52c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d50a:	6878      	ldr	r0, [r7, #4]
 800d50c:	f000 f9d0 	bl	800d8b0 <USBD_CtlSendStatus>
      break;
 800d510:	e00c      	b.n	800d52c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d512:	6839      	ldr	r1, [r7, #0]
 800d514:	6878      	ldr	r0, [r7, #4]
 800d516:	f000 f900 	bl	800d71a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d51a:	4b07      	ldr	r3, [pc, #28]	; (800d538 <USBD_SetConfig+0x150>)
 800d51c:	781b      	ldrb	r3, [r3, #0]
 800d51e:	4619      	mov	r1, r3
 800d520:	6878      	ldr	r0, [r7, #4]
 800d522:	f7fe ff8c 	bl	800c43e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d526:	2303      	movs	r3, #3
 800d528:	73fb      	strb	r3, [r7, #15]
      break;
 800d52a:	bf00      	nop
  }

  return ret;
 800d52c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d52e:	4618      	mov	r0, r3
 800d530:	3710      	adds	r7, #16
 800d532:	46bd      	mov	sp, r7
 800d534:	bd80      	pop	{r7, pc}
 800d536:	bf00      	nop
 800d538:	20000ba8 	.word	0x20000ba8

0800d53c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b082      	sub	sp, #8
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
 800d544:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d546:	683b      	ldr	r3, [r7, #0]
 800d548:	88db      	ldrh	r3, [r3, #6]
 800d54a:	2b01      	cmp	r3, #1
 800d54c:	d004      	beq.n	800d558 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d54e:	6839      	ldr	r1, [r7, #0]
 800d550:	6878      	ldr	r0, [r7, #4]
 800d552:	f000 f8e2 	bl	800d71a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d556:	e023      	b.n	800d5a0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d55e:	b2db      	uxtb	r3, r3
 800d560:	2b02      	cmp	r3, #2
 800d562:	dc02      	bgt.n	800d56a <USBD_GetConfig+0x2e>
 800d564:	2b00      	cmp	r3, #0
 800d566:	dc03      	bgt.n	800d570 <USBD_GetConfig+0x34>
 800d568:	e015      	b.n	800d596 <USBD_GetConfig+0x5a>
 800d56a:	2b03      	cmp	r3, #3
 800d56c:	d00b      	beq.n	800d586 <USBD_GetConfig+0x4a>
 800d56e:	e012      	b.n	800d596 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	2200      	movs	r2, #0
 800d574:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	3308      	adds	r3, #8
 800d57a:	2201      	movs	r2, #1
 800d57c:	4619      	mov	r1, r3
 800d57e:	6878      	ldr	r0, [r7, #4]
 800d580:	f000 f93c 	bl	800d7fc <USBD_CtlSendData>
        break;
 800d584:	e00c      	b.n	800d5a0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	3304      	adds	r3, #4
 800d58a:	2201      	movs	r2, #1
 800d58c:	4619      	mov	r1, r3
 800d58e:	6878      	ldr	r0, [r7, #4]
 800d590:	f000 f934 	bl	800d7fc <USBD_CtlSendData>
        break;
 800d594:	e004      	b.n	800d5a0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d596:	6839      	ldr	r1, [r7, #0]
 800d598:	6878      	ldr	r0, [r7, #4]
 800d59a:	f000 f8be 	bl	800d71a <USBD_CtlError>
        break;
 800d59e:	bf00      	nop
}
 800d5a0:	bf00      	nop
 800d5a2:	3708      	adds	r7, #8
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	bd80      	pop	{r7, pc}

0800d5a8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b082      	sub	sp, #8
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
 800d5b0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d5b8:	b2db      	uxtb	r3, r3
 800d5ba:	3b01      	subs	r3, #1
 800d5bc:	2b02      	cmp	r3, #2
 800d5be:	d81e      	bhi.n	800d5fe <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d5c0:	683b      	ldr	r3, [r7, #0]
 800d5c2:	88db      	ldrh	r3, [r3, #6]
 800d5c4:	2b02      	cmp	r3, #2
 800d5c6:	d004      	beq.n	800d5d2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d5c8:	6839      	ldr	r1, [r7, #0]
 800d5ca:	6878      	ldr	r0, [r7, #4]
 800d5cc:	f000 f8a5 	bl	800d71a <USBD_CtlError>
        break;
 800d5d0:	e01a      	b.n	800d608 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	2201      	movs	r2, #1
 800d5d6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d005      	beq.n	800d5ee <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	68db      	ldr	r3, [r3, #12]
 800d5e6:	f043 0202 	orr.w	r2, r3, #2
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d5ee:	687b      	ldr	r3, [r7, #4]
 800d5f0:	330c      	adds	r3, #12
 800d5f2:	2202      	movs	r2, #2
 800d5f4:	4619      	mov	r1, r3
 800d5f6:	6878      	ldr	r0, [r7, #4]
 800d5f8:	f000 f900 	bl	800d7fc <USBD_CtlSendData>
      break;
 800d5fc:	e004      	b.n	800d608 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d5fe:	6839      	ldr	r1, [r7, #0]
 800d600:	6878      	ldr	r0, [r7, #4]
 800d602:	f000 f88a 	bl	800d71a <USBD_CtlError>
      break;
 800d606:	bf00      	nop
  }
}
 800d608:	bf00      	nop
 800d60a:	3708      	adds	r7, #8
 800d60c:	46bd      	mov	sp, r7
 800d60e:	bd80      	pop	{r7, pc}

0800d610 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d610:	b580      	push	{r7, lr}
 800d612:	b082      	sub	sp, #8
 800d614:	af00      	add	r7, sp, #0
 800d616:	6078      	str	r0, [r7, #4]
 800d618:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d61a:	683b      	ldr	r3, [r7, #0]
 800d61c:	885b      	ldrh	r3, [r3, #2]
 800d61e:	2b01      	cmp	r3, #1
 800d620:	d107      	bne.n	800d632 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	2201      	movs	r2, #1
 800d626:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d62a:	6878      	ldr	r0, [r7, #4]
 800d62c:	f000 f940 	bl	800d8b0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d630:	e013      	b.n	800d65a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d632:	683b      	ldr	r3, [r7, #0]
 800d634:	885b      	ldrh	r3, [r3, #2]
 800d636:	2b02      	cmp	r3, #2
 800d638:	d10b      	bne.n	800d652 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800d63a:	683b      	ldr	r3, [r7, #0]
 800d63c:	889b      	ldrh	r3, [r3, #4]
 800d63e:	0a1b      	lsrs	r3, r3, #8
 800d640:	b29b      	uxth	r3, r3
 800d642:	b2da      	uxtb	r2, r3
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d64a:	6878      	ldr	r0, [r7, #4]
 800d64c:	f000 f930 	bl	800d8b0 <USBD_CtlSendStatus>
}
 800d650:	e003      	b.n	800d65a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d652:	6839      	ldr	r1, [r7, #0]
 800d654:	6878      	ldr	r0, [r7, #4]
 800d656:	f000 f860 	bl	800d71a <USBD_CtlError>
}
 800d65a:	bf00      	nop
 800d65c:	3708      	adds	r7, #8
 800d65e:	46bd      	mov	sp, r7
 800d660:	bd80      	pop	{r7, pc}

0800d662 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d662:	b580      	push	{r7, lr}
 800d664:	b082      	sub	sp, #8
 800d666:	af00      	add	r7, sp, #0
 800d668:	6078      	str	r0, [r7, #4]
 800d66a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d672:	b2db      	uxtb	r3, r3
 800d674:	3b01      	subs	r3, #1
 800d676:	2b02      	cmp	r3, #2
 800d678:	d80b      	bhi.n	800d692 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d67a:	683b      	ldr	r3, [r7, #0]
 800d67c:	885b      	ldrh	r3, [r3, #2]
 800d67e:	2b01      	cmp	r3, #1
 800d680:	d10c      	bne.n	800d69c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2200      	movs	r2, #0
 800d686:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d68a:	6878      	ldr	r0, [r7, #4]
 800d68c:	f000 f910 	bl	800d8b0 <USBD_CtlSendStatus>
      }
      break;
 800d690:	e004      	b.n	800d69c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d692:	6839      	ldr	r1, [r7, #0]
 800d694:	6878      	ldr	r0, [r7, #4]
 800d696:	f000 f840 	bl	800d71a <USBD_CtlError>
      break;
 800d69a:	e000      	b.n	800d69e <USBD_ClrFeature+0x3c>
      break;
 800d69c:	bf00      	nop
  }
}
 800d69e:	bf00      	nop
 800d6a0:	3708      	adds	r7, #8
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	bd80      	pop	{r7, pc}

0800d6a6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d6a6:	b580      	push	{r7, lr}
 800d6a8:	b084      	sub	sp, #16
 800d6aa:	af00      	add	r7, sp, #0
 800d6ac:	6078      	str	r0, [r7, #4]
 800d6ae:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d6b0:	683b      	ldr	r3, [r7, #0]
 800d6b2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d6b4:	68fb      	ldr	r3, [r7, #12]
 800d6b6:	781a      	ldrb	r2, [r3, #0]
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	3301      	adds	r3, #1
 800d6c0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	781a      	ldrb	r2, [r3, #0]
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	3301      	adds	r3, #1
 800d6ce:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d6d0:	68f8      	ldr	r0, [r7, #12]
 800d6d2:	f7ff fa41 	bl	800cb58 <SWAPBYTE>
 800d6d6:	4603      	mov	r3, r0
 800d6d8:	461a      	mov	r2, r3
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	3301      	adds	r3, #1
 800d6e2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	3301      	adds	r3, #1
 800d6e8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d6ea:	68f8      	ldr	r0, [r7, #12]
 800d6ec:	f7ff fa34 	bl	800cb58 <SWAPBYTE>
 800d6f0:	4603      	mov	r3, r0
 800d6f2:	461a      	mov	r2, r3
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	3301      	adds	r3, #1
 800d6fc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	3301      	adds	r3, #1
 800d702:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d704:	68f8      	ldr	r0, [r7, #12]
 800d706:	f7ff fa27 	bl	800cb58 <SWAPBYTE>
 800d70a:	4603      	mov	r3, r0
 800d70c:	461a      	mov	r2, r3
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	80da      	strh	r2, [r3, #6]
}
 800d712:	bf00      	nop
 800d714:	3710      	adds	r7, #16
 800d716:	46bd      	mov	sp, r7
 800d718:	bd80      	pop	{r7, pc}

0800d71a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d71a:	b580      	push	{r7, lr}
 800d71c:	b082      	sub	sp, #8
 800d71e:	af00      	add	r7, sp, #0
 800d720:	6078      	str	r0, [r7, #4]
 800d722:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d724:	2180      	movs	r1, #128	; 0x80
 800d726:	6878      	ldr	r0, [r7, #4]
 800d728:	f001 ff46 	bl	800f5b8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d72c:	2100      	movs	r1, #0
 800d72e:	6878      	ldr	r0, [r7, #4]
 800d730:	f001 ff42 	bl	800f5b8 <USBD_LL_StallEP>
}
 800d734:	bf00      	nop
 800d736:	3708      	adds	r7, #8
 800d738:	46bd      	mov	sp, r7
 800d73a:	bd80      	pop	{r7, pc}

0800d73c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d73c:	b580      	push	{r7, lr}
 800d73e:	b086      	sub	sp, #24
 800d740:	af00      	add	r7, sp, #0
 800d742:	60f8      	str	r0, [r7, #12]
 800d744:	60b9      	str	r1, [r7, #8]
 800d746:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d748:	2300      	movs	r3, #0
 800d74a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d036      	beq.n	800d7c0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d756:	6938      	ldr	r0, [r7, #16]
 800d758:	f000 f836 	bl	800d7c8 <USBD_GetLen>
 800d75c:	4603      	mov	r3, r0
 800d75e:	3301      	adds	r3, #1
 800d760:	b29b      	uxth	r3, r3
 800d762:	005b      	lsls	r3, r3, #1
 800d764:	b29a      	uxth	r2, r3
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d76a:	7dfb      	ldrb	r3, [r7, #23]
 800d76c:	68ba      	ldr	r2, [r7, #8]
 800d76e:	4413      	add	r3, r2
 800d770:	687a      	ldr	r2, [r7, #4]
 800d772:	7812      	ldrb	r2, [r2, #0]
 800d774:	701a      	strb	r2, [r3, #0]
  idx++;
 800d776:	7dfb      	ldrb	r3, [r7, #23]
 800d778:	3301      	adds	r3, #1
 800d77a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d77c:	7dfb      	ldrb	r3, [r7, #23]
 800d77e:	68ba      	ldr	r2, [r7, #8]
 800d780:	4413      	add	r3, r2
 800d782:	2203      	movs	r2, #3
 800d784:	701a      	strb	r2, [r3, #0]
  idx++;
 800d786:	7dfb      	ldrb	r3, [r7, #23]
 800d788:	3301      	adds	r3, #1
 800d78a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d78c:	e013      	b.n	800d7b6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d78e:	7dfb      	ldrb	r3, [r7, #23]
 800d790:	68ba      	ldr	r2, [r7, #8]
 800d792:	4413      	add	r3, r2
 800d794:	693a      	ldr	r2, [r7, #16]
 800d796:	7812      	ldrb	r2, [r2, #0]
 800d798:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d79a:	693b      	ldr	r3, [r7, #16]
 800d79c:	3301      	adds	r3, #1
 800d79e:	613b      	str	r3, [r7, #16]
    idx++;
 800d7a0:	7dfb      	ldrb	r3, [r7, #23]
 800d7a2:	3301      	adds	r3, #1
 800d7a4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d7a6:	7dfb      	ldrb	r3, [r7, #23]
 800d7a8:	68ba      	ldr	r2, [r7, #8]
 800d7aa:	4413      	add	r3, r2
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	701a      	strb	r2, [r3, #0]
    idx++;
 800d7b0:	7dfb      	ldrb	r3, [r7, #23]
 800d7b2:	3301      	adds	r3, #1
 800d7b4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d7b6:	693b      	ldr	r3, [r7, #16]
 800d7b8:	781b      	ldrb	r3, [r3, #0]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d1e7      	bne.n	800d78e <USBD_GetString+0x52>
 800d7be:	e000      	b.n	800d7c2 <USBD_GetString+0x86>
    return;
 800d7c0:	bf00      	nop
  }
}
 800d7c2:	3718      	adds	r7, #24
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	bd80      	pop	{r7, pc}

0800d7c8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d7c8:	b480      	push	{r7}
 800d7ca:	b085      	sub	sp, #20
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d7d0:	2300      	movs	r3, #0
 800d7d2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d7d8:	e005      	b.n	800d7e6 <USBD_GetLen+0x1e>
  {
    len++;
 800d7da:	7bfb      	ldrb	r3, [r7, #15]
 800d7dc:	3301      	adds	r3, #1
 800d7de:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d7e0:	68bb      	ldr	r3, [r7, #8]
 800d7e2:	3301      	adds	r3, #1
 800d7e4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d7e6:	68bb      	ldr	r3, [r7, #8]
 800d7e8:	781b      	ldrb	r3, [r3, #0]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d1f5      	bne.n	800d7da <USBD_GetLen+0x12>
  }

  return len;
 800d7ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	3714      	adds	r7, #20
 800d7f4:	46bd      	mov	sp, r7
 800d7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7fa:	4770      	bx	lr

0800d7fc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b084      	sub	sp, #16
 800d800:	af00      	add	r7, sp, #0
 800d802:	60f8      	str	r0, [r7, #12]
 800d804:	60b9      	str	r1, [r7, #8]
 800d806:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	2202      	movs	r2, #2
 800d80c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	687a      	ldr	r2, [r7, #4]
 800d814:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	687a      	ldr	r2, [r7, #4]
 800d81a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	68ba      	ldr	r2, [r7, #8]
 800d820:	2100      	movs	r1, #0
 800d822:	68f8      	ldr	r0, [r7, #12]
 800d824:	f001 ff51 	bl	800f6ca <USBD_LL_Transmit>

  return USBD_OK;
 800d828:	2300      	movs	r3, #0
}
 800d82a:	4618      	mov	r0, r3
 800d82c:	3710      	adds	r7, #16
 800d82e:	46bd      	mov	sp, r7
 800d830:	bd80      	pop	{r7, pc}

0800d832 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d832:	b580      	push	{r7, lr}
 800d834:	b084      	sub	sp, #16
 800d836:	af00      	add	r7, sp, #0
 800d838:	60f8      	str	r0, [r7, #12]
 800d83a:	60b9      	str	r1, [r7, #8]
 800d83c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	68ba      	ldr	r2, [r7, #8]
 800d842:	2100      	movs	r1, #0
 800d844:	68f8      	ldr	r0, [r7, #12]
 800d846:	f001 ff40 	bl	800f6ca <USBD_LL_Transmit>

  return USBD_OK;
 800d84a:	2300      	movs	r3, #0
}
 800d84c:	4618      	mov	r0, r3
 800d84e:	3710      	adds	r7, #16
 800d850:	46bd      	mov	sp, r7
 800d852:	bd80      	pop	{r7, pc}

0800d854 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d854:	b580      	push	{r7, lr}
 800d856:	b084      	sub	sp, #16
 800d858:	af00      	add	r7, sp, #0
 800d85a:	60f8      	str	r0, [r7, #12]
 800d85c:	60b9      	str	r1, [r7, #8]
 800d85e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d860:	68fb      	ldr	r3, [r7, #12]
 800d862:	2203      	movs	r2, #3
 800d864:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	687a      	ldr	r2, [r7, #4]
 800d86c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	687a      	ldr	r2, [r7, #4]
 800d874:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	68ba      	ldr	r2, [r7, #8]
 800d87c:	2100      	movs	r1, #0
 800d87e:	68f8      	ldr	r0, [r7, #12]
 800d880:	f001 ff44 	bl	800f70c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d884:	2300      	movs	r3, #0
}
 800d886:	4618      	mov	r0, r3
 800d888:	3710      	adds	r7, #16
 800d88a:	46bd      	mov	sp, r7
 800d88c:	bd80      	pop	{r7, pc}

0800d88e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d88e:	b580      	push	{r7, lr}
 800d890:	b084      	sub	sp, #16
 800d892:	af00      	add	r7, sp, #0
 800d894:	60f8      	str	r0, [r7, #12]
 800d896:	60b9      	str	r1, [r7, #8]
 800d898:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	68ba      	ldr	r2, [r7, #8]
 800d89e:	2100      	movs	r1, #0
 800d8a0:	68f8      	ldr	r0, [r7, #12]
 800d8a2:	f001 ff33 	bl	800f70c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d8a6:	2300      	movs	r3, #0
}
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	3710      	adds	r7, #16
 800d8ac:	46bd      	mov	sp, r7
 800d8ae:	bd80      	pop	{r7, pc}

0800d8b0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d8b0:	b580      	push	{r7, lr}
 800d8b2:	b082      	sub	sp, #8
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	2204      	movs	r2, #4
 800d8bc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	2200      	movs	r2, #0
 800d8c4:	2100      	movs	r1, #0
 800d8c6:	6878      	ldr	r0, [r7, #4]
 800d8c8:	f001 feff 	bl	800f6ca <USBD_LL_Transmit>

  return USBD_OK;
 800d8cc:	2300      	movs	r3, #0
}
 800d8ce:	4618      	mov	r0, r3
 800d8d0:	3708      	adds	r7, #8
 800d8d2:	46bd      	mov	sp, r7
 800d8d4:	bd80      	pop	{r7, pc}

0800d8d6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d8d6:	b580      	push	{r7, lr}
 800d8d8:	b082      	sub	sp, #8
 800d8da:	af00      	add	r7, sp, #0
 800d8dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d8de:	687b      	ldr	r3, [r7, #4]
 800d8e0:	2205      	movs	r2, #5
 800d8e2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	2200      	movs	r2, #0
 800d8ea:	2100      	movs	r1, #0
 800d8ec:	6878      	ldr	r0, [r7, #4]
 800d8ee:	f001 ff0d 	bl	800f70c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d8f2:	2300      	movs	r3, #0
}
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	3708      	adds	r7, #8
 800d8f8:	46bd      	mov	sp, r7
 800d8fa:	bd80      	pop	{r7, pc}

0800d8fc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800d8fc:	b480      	push	{r7}
 800d8fe:	b085      	sub	sp, #20
 800d900:	af00      	add	r7, sp, #0
 800d902:	4603      	mov	r3, r0
 800d904:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800d906:	2300      	movs	r3, #0
 800d908:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800d90a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800d90e:	2b84      	cmp	r3, #132	; 0x84
 800d910:	d005      	beq.n	800d91e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800d912:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	4413      	add	r3, r2
 800d91a:	3303      	adds	r3, #3
 800d91c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800d91e:	68fb      	ldr	r3, [r7, #12]
}
 800d920:	4618      	mov	r0, r3
 800d922:	3714      	adds	r7, #20
 800d924:	46bd      	mov	sp, r7
 800d926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92a:	4770      	bx	lr

0800d92c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800d92c:	b580      	push	{r7, lr}
 800d92e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800d930:	f000 fade 	bl	800def0 <vTaskStartScheduler>
  
  return osOK;
 800d934:	2300      	movs	r3, #0
}
 800d936:	4618      	mov	r0, r3
 800d938:	bd80      	pop	{r7, pc}

0800d93a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800d93a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d93c:	b089      	sub	sp, #36	; 0x24
 800d93e:	af04      	add	r7, sp, #16
 800d940:	6078      	str	r0, [r7, #4]
 800d942:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	695b      	ldr	r3, [r3, #20]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d020      	beq.n	800d98e <osThreadCreate+0x54>
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	699b      	ldr	r3, [r3, #24]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d01c      	beq.n	800d98e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	685c      	ldr	r4, [r3, #4]
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	691e      	ldr	r6, [r3, #16]
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d966:	4618      	mov	r0, r3
 800d968:	f7ff ffc8 	bl	800d8fc <makeFreeRtosPriority>
 800d96c:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	695b      	ldr	r3, [r3, #20]
 800d972:	687a      	ldr	r2, [r7, #4]
 800d974:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d976:	9202      	str	r2, [sp, #8]
 800d978:	9301      	str	r3, [sp, #4]
 800d97a:	9100      	str	r1, [sp, #0]
 800d97c:	683b      	ldr	r3, [r7, #0]
 800d97e:	4632      	mov	r2, r6
 800d980:	4629      	mov	r1, r5
 800d982:	4620      	mov	r0, r4
 800d984:	f000 f8ed 	bl	800db62 <xTaskCreateStatic>
 800d988:	4603      	mov	r3, r0
 800d98a:	60fb      	str	r3, [r7, #12]
 800d98c:	e01c      	b.n	800d9c8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	685c      	ldr	r4, [r3, #4]
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d99a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	f7ff ffaa 	bl	800d8fc <makeFreeRtosPriority>
 800d9a8:	4602      	mov	r2, r0
 800d9aa:	f107 030c 	add.w	r3, r7, #12
 800d9ae:	9301      	str	r3, [sp, #4]
 800d9b0:	9200      	str	r2, [sp, #0]
 800d9b2:	683b      	ldr	r3, [r7, #0]
 800d9b4:	4632      	mov	r2, r6
 800d9b6:	4629      	mov	r1, r5
 800d9b8:	4620      	mov	r0, r4
 800d9ba:	f000 f92f 	bl	800dc1c <xTaskCreate>
 800d9be:	4603      	mov	r3, r0
 800d9c0:	2b01      	cmp	r3, #1
 800d9c2:	d001      	beq.n	800d9c8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800d9c4:	2300      	movs	r3, #0
 800d9c6:	e000      	b.n	800d9ca <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800d9c8:	68fb      	ldr	r3, [r7, #12]
}
 800d9ca:	4618      	mov	r0, r3
 800d9cc:	3714      	adds	r7, #20
 800d9ce:	46bd      	mov	sp, r7
 800d9d0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d9d2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800d9d2:	b580      	push	{r7, lr}
 800d9d4:	b084      	sub	sp, #16
 800d9d6:	af00      	add	r7, sp, #0
 800d9d8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800d9da:	687b      	ldr	r3, [r7, #4]
 800d9dc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	2b00      	cmp	r3, #0
 800d9e2:	d001      	beq.n	800d9e8 <osDelay+0x16>
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	e000      	b.n	800d9ea <osDelay+0x18>
 800d9e8:	2301      	movs	r3, #1
 800d9ea:	4618      	mov	r0, r3
 800d9ec:	f000 fa4c 	bl	800de88 <vTaskDelay>
  
  return osOK;
 800d9f0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	3710      	adds	r7, #16
 800d9f6:	46bd      	mov	sp, r7
 800d9f8:	bd80      	pop	{r7, pc}

0800d9fa <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d9fa:	b480      	push	{r7}
 800d9fc:	b083      	sub	sp, #12
 800d9fe:	af00      	add	r7, sp, #0
 800da00:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	f103 0208 	add.w	r2, r3, #8
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800da12:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	f103 0208 	add.w	r2, r3, #8
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	f103 0208 	add.w	r2, r3, #8
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	2200      	movs	r2, #0
 800da2c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800da2e:	bf00      	nop
 800da30:	370c      	adds	r7, #12
 800da32:	46bd      	mov	sp, r7
 800da34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da38:	4770      	bx	lr

0800da3a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800da3a:	b480      	push	{r7}
 800da3c:	b083      	sub	sp, #12
 800da3e:	af00      	add	r7, sp, #0
 800da40:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	2200      	movs	r2, #0
 800da46:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800da48:	bf00      	nop
 800da4a:	370c      	adds	r7, #12
 800da4c:	46bd      	mov	sp, r7
 800da4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da52:	4770      	bx	lr

0800da54 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800da54:	b480      	push	{r7}
 800da56:	b085      	sub	sp, #20
 800da58:	af00      	add	r7, sp, #0
 800da5a:	6078      	str	r0, [r7, #4]
 800da5c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	685b      	ldr	r3, [r3, #4]
 800da62:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800da64:	683b      	ldr	r3, [r7, #0]
 800da66:	68fa      	ldr	r2, [r7, #12]
 800da68:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	689a      	ldr	r2, [r3, #8]
 800da6e:	683b      	ldr	r3, [r7, #0]
 800da70:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	689b      	ldr	r3, [r3, #8]
 800da76:	683a      	ldr	r2, [r7, #0]
 800da78:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	683a      	ldr	r2, [r7, #0]
 800da7e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800da80:	683b      	ldr	r3, [r7, #0]
 800da82:	687a      	ldr	r2, [r7, #4]
 800da84:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	1c5a      	adds	r2, r3, #1
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	601a      	str	r2, [r3, #0]
}
 800da90:	bf00      	nop
 800da92:	3714      	adds	r7, #20
 800da94:	46bd      	mov	sp, r7
 800da96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9a:	4770      	bx	lr

0800da9c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800da9c:	b480      	push	{r7}
 800da9e:	b085      	sub	sp, #20
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	6078      	str	r0, [r7, #4]
 800daa4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800daa6:	683b      	ldr	r3, [r7, #0]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800daac:	68bb      	ldr	r3, [r7, #8]
 800daae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dab2:	d103      	bne.n	800dabc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	691b      	ldr	r3, [r3, #16]
 800dab8:	60fb      	str	r3, [r7, #12]
 800daba:	e00c      	b.n	800dad6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	3308      	adds	r3, #8
 800dac0:	60fb      	str	r3, [r7, #12]
 800dac2:	e002      	b.n	800daca <vListInsert+0x2e>
 800dac4:	68fb      	ldr	r3, [r7, #12]
 800dac6:	685b      	ldr	r3, [r3, #4]
 800dac8:	60fb      	str	r3, [r7, #12]
 800daca:	68fb      	ldr	r3, [r7, #12]
 800dacc:	685b      	ldr	r3, [r3, #4]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	68ba      	ldr	r2, [r7, #8]
 800dad2:	429a      	cmp	r2, r3
 800dad4:	d2f6      	bcs.n	800dac4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	685a      	ldr	r2, [r3, #4]
 800dada:	683b      	ldr	r3, [r7, #0]
 800dadc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800dade:	683b      	ldr	r3, [r7, #0]
 800dae0:	685b      	ldr	r3, [r3, #4]
 800dae2:	683a      	ldr	r2, [r7, #0]
 800dae4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800dae6:	683b      	ldr	r3, [r7, #0]
 800dae8:	68fa      	ldr	r2, [r7, #12]
 800daea:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	683a      	ldr	r2, [r7, #0]
 800daf0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800daf2:	683b      	ldr	r3, [r7, #0]
 800daf4:	687a      	ldr	r2, [r7, #4]
 800daf6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	1c5a      	adds	r2, r3, #1
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	601a      	str	r2, [r3, #0]
}
 800db02:	bf00      	nop
 800db04:	3714      	adds	r7, #20
 800db06:	46bd      	mov	sp, r7
 800db08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0c:	4770      	bx	lr

0800db0e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800db0e:	b480      	push	{r7}
 800db10:	b085      	sub	sp, #20
 800db12:	af00      	add	r7, sp, #0
 800db14:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	691b      	ldr	r3, [r3, #16]
 800db1a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	685b      	ldr	r3, [r3, #4]
 800db20:	687a      	ldr	r2, [r7, #4]
 800db22:	6892      	ldr	r2, [r2, #8]
 800db24:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	689b      	ldr	r3, [r3, #8]
 800db2a:	687a      	ldr	r2, [r7, #4]
 800db2c:	6852      	ldr	r2, [r2, #4]
 800db2e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800db30:	68fb      	ldr	r3, [r7, #12]
 800db32:	685b      	ldr	r3, [r3, #4]
 800db34:	687a      	ldr	r2, [r7, #4]
 800db36:	429a      	cmp	r2, r3
 800db38:	d103      	bne.n	800db42 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	689a      	ldr	r2, [r3, #8]
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	2200      	movs	r2, #0
 800db46:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	1e5a      	subs	r2, r3, #1
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	681b      	ldr	r3, [r3, #0]
}
 800db56:	4618      	mov	r0, r3
 800db58:	3714      	adds	r7, #20
 800db5a:	46bd      	mov	sp, r7
 800db5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db60:	4770      	bx	lr

0800db62 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800db62:	b580      	push	{r7, lr}
 800db64:	b08e      	sub	sp, #56	; 0x38
 800db66:	af04      	add	r7, sp, #16
 800db68:	60f8      	str	r0, [r7, #12]
 800db6a:	60b9      	str	r1, [r7, #8]
 800db6c:	607a      	str	r2, [r7, #4]
 800db6e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800db70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db72:	2b00      	cmp	r3, #0
 800db74:	d10a      	bne.n	800db8c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800db76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db7a:	f383 8811 	msr	BASEPRI, r3
 800db7e:	f3bf 8f6f 	isb	sy
 800db82:	f3bf 8f4f 	dsb	sy
 800db86:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800db88:	bf00      	nop
 800db8a:	e7fe      	b.n	800db8a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800db8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d10a      	bne.n	800dba8 <xTaskCreateStatic+0x46>
	__asm volatile
 800db92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db96:	f383 8811 	msr	BASEPRI, r3
 800db9a:	f3bf 8f6f 	isb	sy
 800db9e:	f3bf 8f4f 	dsb	sy
 800dba2:	61fb      	str	r3, [r7, #28]
}
 800dba4:	bf00      	nop
 800dba6:	e7fe      	b.n	800dba6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800dba8:	2354      	movs	r3, #84	; 0x54
 800dbaa:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800dbac:	693b      	ldr	r3, [r7, #16]
 800dbae:	2b54      	cmp	r3, #84	; 0x54
 800dbb0:	d00a      	beq.n	800dbc8 <xTaskCreateStatic+0x66>
	__asm volatile
 800dbb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbb6:	f383 8811 	msr	BASEPRI, r3
 800dbba:	f3bf 8f6f 	isb	sy
 800dbbe:	f3bf 8f4f 	dsb	sy
 800dbc2:	61bb      	str	r3, [r7, #24]
}
 800dbc4:	bf00      	nop
 800dbc6:	e7fe      	b.n	800dbc6 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800dbc8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800dbca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d01e      	beq.n	800dc0e <xTaskCreateStatic+0xac>
 800dbd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d01b      	beq.n	800dc0e <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dbd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbd8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800dbda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbdc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dbde:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800dbe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbe2:	2202      	movs	r2, #2
 800dbe4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800dbe8:	2300      	movs	r3, #0
 800dbea:	9303      	str	r3, [sp, #12]
 800dbec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbee:	9302      	str	r3, [sp, #8]
 800dbf0:	f107 0314 	add.w	r3, r7, #20
 800dbf4:	9301      	str	r3, [sp, #4]
 800dbf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbf8:	9300      	str	r3, [sp, #0]
 800dbfa:	683b      	ldr	r3, [r7, #0]
 800dbfc:	687a      	ldr	r2, [r7, #4]
 800dbfe:	68b9      	ldr	r1, [r7, #8]
 800dc00:	68f8      	ldr	r0, [r7, #12]
 800dc02:	f000 f850 	bl	800dca6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dc06:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dc08:	f000 f8d4 	bl	800ddb4 <prvAddNewTaskToReadyList>
 800dc0c:	e001      	b.n	800dc12 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800dc0e:	2300      	movs	r3, #0
 800dc10:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800dc12:	697b      	ldr	r3, [r7, #20]
	}
 800dc14:	4618      	mov	r0, r3
 800dc16:	3728      	adds	r7, #40	; 0x28
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	bd80      	pop	{r7, pc}

0800dc1c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b08c      	sub	sp, #48	; 0x30
 800dc20:	af04      	add	r7, sp, #16
 800dc22:	60f8      	str	r0, [r7, #12]
 800dc24:	60b9      	str	r1, [r7, #8]
 800dc26:	603b      	str	r3, [r7, #0]
 800dc28:	4613      	mov	r3, r2
 800dc2a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800dc2c:	88fb      	ldrh	r3, [r7, #6]
 800dc2e:	009b      	lsls	r3, r3, #2
 800dc30:	4618      	mov	r0, r3
 800dc32:	f000 fec9 	bl	800e9c8 <pvPortMalloc>
 800dc36:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800dc38:	697b      	ldr	r3, [r7, #20]
 800dc3a:	2b00      	cmp	r3, #0
 800dc3c:	d00e      	beq.n	800dc5c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800dc3e:	2054      	movs	r0, #84	; 0x54
 800dc40:	f000 fec2 	bl	800e9c8 <pvPortMalloc>
 800dc44:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800dc46:	69fb      	ldr	r3, [r7, #28]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d003      	beq.n	800dc54 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800dc4c:	69fb      	ldr	r3, [r7, #28]
 800dc4e:	697a      	ldr	r2, [r7, #20]
 800dc50:	631a      	str	r2, [r3, #48]	; 0x30
 800dc52:	e005      	b.n	800dc60 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800dc54:	6978      	ldr	r0, [r7, #20]
 800dc56:	f000 ff83 	bl	800eb60 <vPortFree>
 800dc5a:	e001      	b.n	800dc60 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800dc5c:	2300      	movs	r3, #0
 800dc5e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800dc60:	69fb      	ldr	r3, [r7, #28]
 800dc62:	2b00      	cmp	r3, #0
 800dc64:	d017      	beq.n	800dc96 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800dc66:	69fb      	ldr	r3, [r7, #28]
 800dc68:	2200      	movs	r2, #0
 800dc6a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800dc6e:	88fa      	ldrh	r2, [r7, #6]
 800dc70:	2300      	movs	r3, #0
 800dc72:	9303      	str	r3, [sp, #12]
 800dc74:	69fb      	ldr	r3, [r7, #28]
 800dc76:	9302      	str	r3, [sp, #8]
 800dc78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc7a:	9301      	str	r3, [sp, #4]
 800dc7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc7e:	9300      	str	r3, [sp, #0]
 800dc80:	683b      	ldr	r3, [r7, #0]
 800dc82:	68b9      	ldr	r1, [r7, #8]
 800dc84:	68f8      	ldr	r0, [r7, #12]
 800dc86:	f000 f80e 	bl	800dca6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dc8a:	69f8      	ldr	r0, [r7, #28]
 800dc8c:	f000 f892 	bl	800ddb4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800dc90:	2301      	movs	r3, #1
 800dc92:	61bb      	str	r3, [r7, #24]
 800dc94:	e002      	b.n	800dc9c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dc96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dc9a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800dc9c:	69bb      	ldr	r3, [r7, #24]
	}
 800dc9e:	4618      	mov	r0, r3
 800dca0:	3720      	adds	r7, #32
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bd80      	pop	{r7, pc}

0800dca6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800dca6:	b580      	push	{r7, lr}
 800dca8:	b088      	sub	sp, #32
 800dcaa:	af00      	add	r7, sp, #0
 800dcac:	60f8      	str	r0, [r7, #12]
 800dcae:	60b9      	str	r1, [r7, #8]
 800dcb0:	607a      	str	r2, [r7, #4]
 800dcb2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800dcb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800dcbe:	3b01      	subs	r3, #1
 800dcc0:	009b      	lsls	r3, r3, #2
 800dcc2:	4413      	add	r3, r2
 800dcc4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800dcc6:	69bb      	ldr	r3, [r7, #24]
 800dcc8:	f023 0307 	bic.w	r3, r3, #7
 800dccc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800dcce:	69bb      	ldr	r3, [r7, #24]
 800dcd0:	f003 0307 	and.w	r3, r3, #7
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d00a      	beq.n	800dcee <prvInitialiseNewTask+0x48>
	__asm volatile
 800dcd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcdc:	f383 8811 	msr	BASEPRI, r3
 800dce0:	f3bf 8f6f 	isb	sy
 800dce4:	f3bf 8f4f 	dsb	sy
 800dce8:	617b      	str	r3, [r7, #20]
}
 800dcea:	bf00      	nop
 800dcec:	e7fe      	b.n	800dcec <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800dcee:	68bb      	ldr	r3, [r7, #8]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d01f      	beq.n	800dd34 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	61fb      	str	r3, [r7, #28]
 800dcf8:	e012      	b.n	800dd20 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800dcfa:	68ba      	ldr	r2, [r7, #8]
 800dcfc:	69fb      	ldr	r3, [r7, #28]
 800dcfe:	4413      	add	r3, r2
 800dd00:	7819      	ldrb	r1, [r3, #0]
 800dd02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd04:	69fb      	ldr	r3, [r7, #28]
 800dd06:	4413      	add	r3, r2
 800dd08:	3334      	adds	r3, #52	; 0x34
 800dd0a:	460a      	mov	r2, r1
 800dd0c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800dd0e:	68ba      	ldr	r2, [r7, #8]
 800dd10:	69fb      	ldr	r3, [r7, #28]
 800dd12:	4413      	add	r3, r2
 800dd14:	781b      	ldrb	r3, [r3, #0]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d006      	beq.n	800dd28 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dd1a:	69fb      	ldr	r3, [r7, #28]
 800dd1c:	3301      	adds	r3, #1
 800dd1e:	61fb      	str	r3, [r7, #28]
 800dd20:	69fb      	ldr	r3, [r7, #28]
 800dd22:	2b0f      	cmp	r3, #15
 800dd24:	d9e9      	bls.n	800dcfa <prvInitialiseNewTask+0x54>
 800dd26:	e000      	b.n	800dd2a <prvInitialiseNewTask+0x84>
			{
				break;
 800dd28:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800dd2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800dd32:	e003      	b.n	800dd3c <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800dd34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd36:	2200      	movs	r2, #0
 800dd38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dd3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd3e:	2b06      	cmp	r3, #6
 800dd40:	d901      	bls.n	800dd46 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dd42:	2306      	movs	r3, #6
 800dd44:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800dd46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd4a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800dd4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd50:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800dd52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd54:	2200      	movs	r2, #0
 800dd56:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800dd58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd5a:	3304      	adds	r3, #4
 800dd5c:	4618      	mov	r0, r3
 800dd5e:	f7ff fe6c 	bl	800da3a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dd62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd64:	3318      	adds	r3, #24
 800dd66:	4618      	mov	r0, r3
 800dd68:	f7ff fe67 	bl	800da3a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800dd6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd70:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dd72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd74:	f1c3 0207 	rsb	r2, r3, #7
 800dd78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd7a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800dd7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dd80:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800dd82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd84:	2200      	movs	r2, #0
 800dd86:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800dd88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800dd90:	683a      	ldr	r2, [r7, #0]
 800dd92:	68f9      	ldr	r1, [r7, #12]
 800dd94:	69b8      	ldr	r0, [r7, #24]
 800dd96:	f000 fc05 	bl	800e5a4 <pxPortInitialiseStack>
 800dd9a:	4602      	mov	r2, r0
 800dd9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd9e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800dda0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	d002      	beq.n	800ddac <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800dda6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dda8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ddaa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ddac:	bf00      	nop
 800ddae:	3720      	adds	r7, #32
 800ddb0:	46bd      	mov	sp, r7
 800ddb2:	bd80      	pop	{r7, pc}

0800ddb4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ddb4:	b580      	push	{r7, lr}
 800ddb6:	b082      	sub	sp, #8
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ddbc:	f000 fd22 	bl	800e804 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ddc0:	4b2a      	ldr	r3, [pc, #168]	; (800de6c <prvAddNewTaskToReadyList+0xb8>)
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	3301      	adds	r3, #1
 800ddc6:	4a29      	ldr	r2, [pc, #164]	; (800de6c <prvAddNewTaskToReadyList+0xb8>)
 800ddc8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ddca:	4b29      	ldr	r3, [pc, #164]	; (800de70 <prvAddNewTaskToReadyList+0xbc>)
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d109      	bne.n	800dde6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ddd2:	4a27      	ldr	r2, [pc, #156]	; (800de70 <prvAddNewTaskToReadyList+0xbc>)
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ddd8:	4b24      	ldr	r3, [pc, #144]	; (800de6c <prvAddNewTaskToReadyList+0xb8>)
 800ddda:	681b      	ldr	r3, [r3, #0]
 800dddc:	2b01      	cmp	r3, #1
 800ddde:	d110      	bne.n	800de02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800dde0:	f000 fabc 	bl	800e35c <prvInitialiseTaskLists>
 800dde4:	e00d      	b.n	800de02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800dde6:	4b23      	ldr	r3, [pc, #140]	; (800de74 <prvAddNewTaskToReadyList+0xc0>)
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d109      	bne.n	800de02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ddee:	4b20      	ldr	r3, [pc, #128]	; (800de70 <prvAddNewTaskToReadyList+0xbc>)
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ddf8:	429a      	cmp	r2, r3
 800ddfa:	d802      	bhi.n	800de02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ddfc:	4a1c      	ldr	r2, [pc, #112]	; (800de70 <prvAddNewTaskToReadyList+0xbc>)
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800de02:	4b1d      	ldr	r3, [pc, #116]	; (800de78 <prvAddNewTaskToReadyList+0xc4>)
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	3301      	adds	r3, #1
 800de08:	4a1b      	ldr	r2, [pc, #108]	; (800de78 <prvAddNewTaskToReadyList+0xc4>)
 800de0a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de10:	2201      	movs	r2, #1
 800de12:	409a      	lsls	r2, r3
 800de14:	4b19      	ldr	r3, [pc, #100]	; (800de7c <prvAddNewTaskToReadyList+0xc8>)
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	4313      	orrs	r3, r2
 800de1a:	4a18      	ldr	r2, [pc, #96]	; (800de7c <prvAddNewTaskToReadyList+0xc8>)
 800de1c:	6013      	str	r3, [r2, #0]
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de22:	4613      	mov	r3, r2
 800de24:	009b      	lsls	r3, r3, #2
 800de26:	4413      	add	r3, r2
 800de28:	009b      	lsls	r3, r3, #2
 800de2a:	4a15      	ldr	r2, [pc, #84]	; (800de80 <prvAddNewTaskToReadyList+0xcc>)
 800de2c:	441a      	add	r2, r3
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	3304      	adds	r3, #4
 800de32:	4619      	mov	r1, r3
 800de34:	4610      	mov	r0, r2
 800de36:	f7ff fe0d 	bl	800da54 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800de3a:	f000 fd13 	bl	800e864 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800de3e:	4b0d      	ldr	r3, [pc, #52]	; (800de74 <prvAddNewTaskToReadyList+0xc0>)
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	2b00      	cmp	r3, #0
 800de44:	d00e      	beq.n	800de64 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800de46:	4b0a      	ldr	r3, [pc, #40]	; (800de70 <prvAddNewTaskToReadyList+0xbc>)
 800de48:	681b      	ldr	r3, [r3, #0]
 800de4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de50:	429a      	cmp	r2, r3
 800de52:	d207      	bcs.n	800de64 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800de54:	4b0b      	ldr	r3, [pc, #44]	; (800de84 <prvAddNewTaskToReadyList+0xd0>)
 800de56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de5a:	601a      	str	r2, [r3, #0]
 800de5c:	f3bf 8f4f 	dsb	sy
 800de60:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800de64:	bf00      	nop
 800de66:	3708      	adds	r7, #8
 800de68:	46bd      	mov	sp, r7
 800de6a:	bd80      	pop	{r7, pc}
 800de6c:	20000cac 	.word	0x20000cac
 800de70:	20000bac 	.word	0x20000bac
 800de74:	20000cb8 	.word	0x20000cb8
 800de78:	20000cc8 	.word	0x20000cc8
 800de7c:	20000cb4 	.word	0x20000cb4
 800de80:	20000bb0 	.word	0x20000bb0
 800de84:	e000ed04 	.word	0xe000ed04

0800de88 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b084      	sub	sp, #16
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800de90:	2300      	movs	r3, #0
 800de92:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d017      	beq.n	800deca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800de9a:	4b13      	ldr	r3, [pc, #76]	; (800dee8 <vTaskDelay+0x60>)
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d00a      	beq.n	800deb8 <vTaskDelay+0x30>
	__asm volatile
 800dea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dea6:	f383 8811 	msr	BASEPRI, r3
 800deaa:	f3bf 8f6f 	isb	sy
 800deae:	f3bf 8f4f 	dsb	sy
 800deb2:	60bb      	str	r3, [r7, #8]
}
 800deb4:	bf00      	nop
 800deb6:	e7fe      	b.n	800deb6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800deb8:	f000 f87a 	bl	800dfb0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800debc:	2100      	movs	r1, #0
 800debe:	6878      	ldr	r0, [r7, #4]
 800dec0:	f000 fb0a 	bl	800e4d8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800dec4:	f000 f882 	bl	800dfcc <xTaskResumeAll>
 800dec8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800deca:	68fb      	ldr	r3, [r7, #12]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d107      	bne.n	800dee0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ded0:	4b06      	ldr	r3, [pc, #24]	; (800deec <vTaskDelay+0x64>)
 800ded2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ded6:	601a      	str	r2, [r3, #0]
 800ded8:	f3bf 8f4f 	dsb	sy
 800dedc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dee0:	bf00      	nop
 800dee2:	3710      	adds	r7, #16
 800dee4:	46bd      	mov	sp, r7
 800dee6:	bd80      	pop	{r7, pc}
 800dee8:	20000cd4 	.word	0x20000cd4
 800deec:	e000ed04 	.word	0xe000ed04

0800def0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800def0:	b580      	push	{r7, lr}
 800def2:	b08a      	sub	sp, #40	; 0x28
 800def4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800def6:	2300      	movs	r3, #0
 800def8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800defa:	2300      	movs	r3, #0
 800defc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800defe:	463a      	mov	r2, r7
 800df00:	1d39      	adds	r1, r7, #4
 800df02:	f107 0308 	add.w	r3, r7, #8
 800df06:	4618      	mov	r0, r3
 800df08:	f7f3 f8ca 	bl	80010a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800df0c:	6839      	ldr	r1, [r7, #0]
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	68ba      	ldr	r2, [r7, #8]
 800df12:	9202      	str	r2, [sp, #8]
 800df14:	9301      	str	r3, [sp, #4]
 800df16:	2300      	movs	r3, #0
 800df18:	9300      	str	r3, [sp, #0]
 800df1a:	2300      	movs	r3, #0
 800df1c:	460a      	mov	r2, r1
 800df1e:	491e      	ldr	r1, [pc, #120]	; (800df98 <vTaskStartScheduler+0xa8>)
 800df20:	481e      	ldr	r0, [pc, #120]	; (800df9c <vTaskStartScheduler+0xac>)
 800df22:	f7ff fe1e 	bl	800db62 <xTaskCreateStatic>
 800df26:	4603      	mov	r3, r0
 800df28:	4a1d      	ldr	r2, [pc, #116]	; (800dfa0 <vTaskStartScheduler+0xb0>)
 800df2a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800df2c:	4b1c      	ldr	r3, [pc, #112]	; (800dfa0 <vTaskStartScheduler+0xb0>)
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d002      	beq.n	800df3a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800df34:	2301      	movs	r3, #1
 800df36:	617b      	str	r3, [r7, #20]
 800df38:	e001      	b.n	800df3e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800df3a:	2300      	movs	r3, #0
 800df3c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800df3e:	697b      	ldr	r3, [r7, #20]
 800df40:	2b01      	cmp	r3, #1
 800df42:	d116      	bne.n	800df72 <vTaskStartScheduler+0x82>
	__asm volatile
 800df44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df48:	f383 8811 	msr	BASEPRI, r3
 800df4c:	f3bf 8f6f 	isb	sy
 800df50:	f3bf 8f4f 	dsb	sy
 800df54:	613b      	str	r3, [r7, #16]
}
 800df56:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800df58:	4b12      	ldr	r3, [pc, #72]	; (800dfa4 <vTaskStartScheduler+0xb4>)
 800df5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800df5e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800df60:	4b11      	ldr	r3, [pc, #68]	; (800dfa8 <vTaskStartScheduler+0xb8>)
 800df62:	2201      	movs	r2, #1
 800df64:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800df66:	4b11      	ldr	r3, [pc, #68]	; (800dfac <vTaskStartScheduler+0xbc>)
 800df68:	2200      	movs	r2, #0
 800df6a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800df6c:	f000 fba8 	bl	800e6c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800df70:	e00e      	b.n	800df90 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800df72:	697b      	ldr	r3, [r7, #20]
 800df74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800df78:	d10a      	bne.n	800df90 <vTaskStartScheduler+0xa0>
	__asm volatile
 800df7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df7e:	f383 8811 	msr	BASEPRI, r3
 800df82:	f3bf 8f6f 	isb	sy
 800df86:	f3bf 8f4f 	dsb	sy
 800df8a:	60fb      	str	r3, [r7, #12]
}
 800df8c:	bf00      	nop
 800df8e:	e7fe      	b.n	800df8e <vTaskStartScheduler+0x9e>
}
 800df90:	bf00      	nop
 800df92:	3718      	adds	r7, #24
 800df94:	46bd      	mov	sp, r7
 800df96:	bd80      	pop	{r7, pc}
 800df98:	0800faa8 	.word	0x0800faa8
 800df9c:	0800e32d 	.word	0x0800e32d
 800dfa0:	20000cd0 	.word	0x20000cd0
 800dfa4:	20000ccc 	.word	0x20000ccc
 800dfa8:	20000cb8 	.word	0x20000cb8
 800dfac:	20000cb0 	.word	0x20000cb0

0800dfb0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dfb0:	b480      	push	{r7}
 800dfb2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800dfb4:	4b04      	ldr	r3, [pc, #16]	; (800dfc8 <vTaskSuspendAll+0x18>)
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	3301      	adds	r3, #1
 800dfba:	4a03      	ldr	r2, [pc, #12]	; (800dfc8 <vTaskSuspendAll+0x18>)
 800dfbc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800dfbe:	bf00      	nop
 800dfc0:	46bd      	mov	sp, r7
 800dfc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfc6:	4770      	bx	lr
 800dfc8:	20000cd4 	.word	0x20000cd4

0800dfcc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b084      	sub	sp, #16
 800dfd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800dfd6:	2300      	movs	r3, #0
 800dfd8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800dfda:	4b41      	ldr	r3, [pc, #260]	; (800e0e0 <xTaskResumeAll+0x114>)
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d10a      	bne.n	800dff8 <xTaskResumeAll+0x2c>
	__asm volatile
 800dfe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfe6:	f383 8811 	msr	BASEPRI, r3
 800dfea:	f3bf 8f6f 	isb	sy
 800dfee:	f3bf 8f4f 	dsb	sy
 800dff2:	603b      	str	r3, [r7, #0]
}
 800dff4:	bf00      	nop
 800dff6:	e7fe      	b.n	800dff6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dff8:	f000 fc04 	bl	800e804 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dffc:	4b38      	ldr	r3, [pc, #224]	; (800e0e0 <xTaskResumeAll+0x114>)
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	3b01      	subs	r3, #1
 800e002:	4a37      	ldr	r2, [pc, #220]	; (800e0e0 <xTaskResumeAll+0x114>)
 800e004:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e006:	4b36      	ldr	r3, [pc, #216]	; (800e0e0 <xTaskResumeAll+0x114>)
 800e008:	681b      	ldr	r3, [r3, #0]
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d161      	bne.n	800e0d2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e00e:	4b35      	ldr	r3, [pc, #212]	; (800e0e4 <xTaskResumeAll+0x118>)
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	2b00      	cmp	r3, #0
 800e014:	d05d      	beq.n	800e0d2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e016:	e02e      	b.n	800e076 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e018:	4b33      	ldr	r3, [pc, #204]	; (800e0e8 <xTaskResumeAll+0x11c>)
 800e01a:	68db      	ldr	r3, [r3, #12]
 800e01c:	68db      	ldr	r3, [r3, #12]
 800e01e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	3318      	adds	r3, #24
 800e024:	4618      	mov	r0, r3
 800e026:	f7ff fd72 	bl	800db0e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e02a:	68fb      	ldr	r3, [r7, #12]
 800e02c:	3304      	adds	r3, #4
 800e02e:	4618      	mov	r0, r3
 800e030:	f7ff fd6d 	bl	800db0e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e038:	2201      	movs	r2, #1
 800e03a:	409a      	lsls	r2, r3
 800e03c:	4b2b      	ldr	r3, [pc, #172]	; (800e0ec <xTaskResumeAll+0x120>)
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	4313      	orrs	r3, r2
 800e042:	4a2a      	ldr	r2, [pc, #168]	; (800e0ec <xTaskResumeAll+0x120>)
 800e044:	6013      	str	r3, [r2, #0]
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e04a:	4613      	mov	r3, r2
 800e04c:	009b      	lsls	r3, r3, #2
 800e04e:	4413      	add	r3, r2
 800e050:	009b      	lsls	r3, r3, #2
 800e052:	4a27      	ldr	r2, [pc, #156]	; (800e0f0 <xTaskResumeAll+0x124>)
 800e054:	441a      	add	r2, r3
 800e056:	68fb      	ldr	r3, [r7, #12]
 800e058:	3304      	adds	r3, #4
 800e05a:	4619      	mov	r1, r3
 800e05c:	4610      	mov	r0, r2
 800e05e:	f7ff fcf9 	bl	800da54 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e062:	68fb      	ldr	r3, [r7, #12]
 800e064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e066:	4b23      	ldr	r3, [pc, #140]	; (800e0f4 <xTaskResumeAll+0x128>)
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e06c:	429a      	cmp	r2, r3
 800e06e:	d302      	bcc.n	800e076 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800e070:	4b21      	ldr	r3, [pc, #132]	; (800e0f8 <xTaskResumeAll+0x12c>)
 800e072:	2201      	movs	r2, #1
 800e074:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e076:	4b1c      	ldr	r3, [pc, #112]	; (800e0e8 <xTaskResumeAll+0x11c>)
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d1cc      	bne.n	800e018 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	2b00      	cmp	r3, #0
 800e082:	d001      	beq.n	800e088 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e084:	f000 fa08 	bl	800e498 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e088:	4b1c      	ldr	r3, [pc, #112]	; (800e0fc <xTaskResumeAll+0x130>)
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d010      	beq.n	800e0b6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e094:	f000 f836 	bl	800e104 <xTaskIncrementTick>
 800e098:	4603      	mov	r3, r0
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d002      	beq.n	800e0a4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800e09e:	4b16      	ldr	r3, [pc, #88]	; (800e0f8 <xTaskResumeAll+0x12c>)
 800e0a0:	2201      	movs	r2, #1
 800e0a2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	3b01      	subs	r3, #1
 800e0a8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d1f1      	bne.n	800e094 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 800e0b0:	4b12      	ldr	r3, [pc, #72]	; (800e0fc <xTaskResumeAll+0x130>)
 800e0b2:	2200      	movs	r2, #0
 800e0b4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e0b6:	4b10      	ldr	r3, [pc, #64]	; (800e0f8 <xTaskResumeAll+0x12c>)
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d009      	beq.n	800e0d2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e0be:	2301      	movs	r3, #1
 800e0c0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e0c2:	4b0f      	ldr	r3, [pc, #60]	; (800e100 <xTaskResumeAll+0x134>)
 800e0c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0c8:	601a      	str	r2, [r3, #0]
 800e0ca:	f3bf 8f4f 	dsb	sy
 800e0ce:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e0d2:	f000 fbc7 	bl	800e864 <vPortExitCritical>

	return xAlreadyYielded;
 800e0d6:	68bb      	ldr	r3, [r7, #8]
}
 800e0d8:	4618      	mov	r0, r3
 800e0da:	3710      	adds	r7, #16
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	bd80      	pop	{r7, pc}
 800e0e0:	20000cd4 	.word	0x20000cd4
 800e0e4:	20000cac 	.word	0x20000cac
 800e0e8:	20000c6c 	.word	0x20000c6c
 800e0ec:	20000cb4 	.word	0x20000cb4
 800e0f0:	20000bb0 	.word	0x20000bb0
 800e0f4:	20000bac 	.word	0x20000bac
 800e0f8:	20000cc0 	.word	0x20000cc0
 800e0fc:	20000cbc 	.word	0x20000cbc
 800e100:	e000ed04 	.word	0xe000ed04

0800e104 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e104:	b580      	push	{r7, lr}
 800e106:	b086      	sub	sp, #24
 800e108:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e10a:	2300      	movs	r3, #0
 800e10c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e10e:	4b4e      	ldr	r3, [pc, #312]	; (800e248 <xTaskIncrementTick+0x144>)
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	2b00      	cmp	r3, #0
 800e114:	f040 808e 	bne.w	800e234 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e118:	4b4c      	ldr	r3, [pc, #304]	; (800e24c <xTaskIncrementTick+0x148>)
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	3301      	adds	r3, #1
 800e11e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e120:	4a4a      	ldr	r2, [pc, #296]	; (800e24c <xTaskIncrementTick+0x148>)
 800e122:	693b      	ldr	r3, [r7, #16]
 800e124:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e126:	693b      	ldr	r3, [r7, #16]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d120      	bne.n	800e16e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e12c:	4b48      	ldr	r3, [pc, #288]	; (800e250 <xTaskIncrementTick+0x14c>)
 800e12e:	681b      	ldr	r3, [r3, #0]
 800e130:	681b      	ldr	r3, [r3, #0]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d00a      	beq.n	800e14c <xTaskIncrementTick+0x48>
	__asm volatile
 800e136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e13a:	f383 8811 	msr	BASEPRI, r3
 800e13e:	f3bf 8f6f 	isb	sy
 800e142:	f3bf 8f4f 	dsb	sy
 800e146:	603b      	str	r3, [r7, #0]
}
 800e148:	bf00      	nop
 800e14a:	e7fe      	b.n	800e14a <xTaskIncrementTick+0x46>
 800e14c:	4b40      	ldr	r3, [pc, #256]	; (800e250 <xTaskIncrementTick+0x14c>)
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	60fb      	str	r3, [r7, #12]
 800e152:	4b40      	ldr	r3, [pc, #256]	; (800e254 <xTaskIncrementTick+0x150>)
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	4a3e      	ldr	r2, [pc, #248]	; (800e250 <xTaskIncrementTick+0x14c>)
 800e158:	6013      	str	r3, [r2, #0]
 800e15a:	4a3e      	ldr	r2, [pc, #248]	; (800e254 <xTaskIncrementTick+0x150>)
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	6013      	str	r3, [r2, #0]
 800e160:	4b3d      	ldr	r3, [pc, #244]	; (800e258 <xTaskIncrementTick+0x154>)
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	3301      	adds	r3, #1
 800e166:	4a3c      	ldr	r2, [pc, #240]	; (800e258 <xTaskIncrementTick+0x154>)
 800e168:	6013      	str	r3, [r2, #0]
 800e16a:	f000 f995 	bl	800e498 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e16e:	4b3b      	ldr	r3, [pc, #236]	; (800e25c <xTaskIncrementTick+0x158>)
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	693a      	ldr	r2, [r7, #16]
 800e174:	429a      	cmp	r2, r3
 800e176:	d348      	bcc.n	800e20a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e178:	4b35      	ldr	r3, [pc, #212]	; (800e250 <xTaskIncrementTick+0x14c>)
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d104      	bne.n	800e18c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e182:	4b36      	ldr	r3, [pc, #216]	; (800e25c <xTaskIncrementTick+0x158>)
 800e184:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e188:	601a      	str	r2, [r3, #0]
					break;
 800e18a:	e03e      	b.n	800e20a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e18c:	4b30      	ldr	r3, [pc, #192]	; (800e250 <xTaskIncrementTick+0x14c>)
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	68db      	ldr	r3, [r3, #12]
 800e192:	68db      	ldr	r3, [r3, #12]
 800e194:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e196:	68bb      	ldr	r3, [r7, #8]
 800e198:	685b      	ldr	r3, [r3, #4]
 800e19a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e19c:	693a      	ldr	r2, [r7, #16]
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	429a      	cmp	r2, r3
 800e1a2:	d203      	bcs.n	800e1ac <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e1a4:	4a2d      	ldr	r2, [pc, #180]	; (800e25c <xTaskIncrementTick+0x158>)
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e1aa:	e02e      	b.n	800e20a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e1ac:	68bb      	ldr	r3, [r7, #8]
 800e1ae:	3304      	adds	r3, #4
 800e1b0:	4618      	mov	r0, r3
 800e1b2:	f7ff fcac 	bl	800db0e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e1b6:	68bb      	ldr	r3, [r7, #8]
 800e1b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d004      	beq.n	800e1c8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e1be:	68bb      	ldr	r3, [r7, #8]
 800e1c0:	3318      	adds	r3, #24
 800e1c2:	4618      	mov	r0, r3
 800e1c4:	f7ff fca3 	bl	800db0e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e1c8:	68bb      	ldr	r3, [r7, #8]
 800e1ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1cc:	2201      	movs	r2, #1
 800e1ce:	409a      	lsls	r2, r3
 800e1d0:	4b23      	ldr	r3, [pc, #140]	; (800e260 <xTaskIncrementTick+0x15c>)
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	4313      	orrs	r3, r2
 800e1d6:	4a22      	ldr	r2, [pc, #136]	; (800e260 <xTaskIncrementTick+0x15c>)
 800e1d8:	6013      	str	r3, [r2, #0]
 800e1da:	68bb      	ldr	r3, [r7, #8]
 800e1dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1de:	4613      	mov	r3, r2
 800e1e0:	009b      	lsls	r3, r3, #2
 800e1e2:	4413      	add	r3, r2
 800e1e4:	009b      	lsls	r3, r3, #2
 800e1e6:	4a1f      	ldr	r2, [pc, #124]	; (800e264 <xTaskIncrementTick+0x160>)
 800e1e8:	441a      	add	r2, r3
 800e1ea:	68bb      	ldr	r3, [r7, #8]
 800e1ec:	3304      	adds	r3, #4
 800e1ee:	4619      	mov	r1, r3
 800e1f0:	4610      	mov	r0, r2
 800e1f2:	f7ff fc2f 	bl	800da54 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e1f6:	68bb      	ldr	r3, [r7, #8]
 800e1f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e1fa:	4b1b      	ldr	r3, [pc, #108]	; (800e268 <xTaskIncrementTick+0x164>)
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e200:	429a      	cmp	r2, r3
 800e202:	d3b9      	bcc.n	800e178 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e204:	2301      	movs	r3, #1
 800e206:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e208:	e7b6      	b.n	800e178 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e20a:	4b17      	ldr	r3, [pc, #92]	; (800e268 <xTaskIncrementTick+0x164>)
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e210:	4914      	ldr	r1, [pc, #80]	; (800e264 <xTaskIncrementTick+0x160>)
 800e212:	4613      	mov	r3, r2
 800e214:	009b      	lsls	r3, r3, #2
 800e216:	4413      	add	r3, r2
 800e218:	009b      	lsls	r3, r3, #2
 800e21a:	440b      	add	r3, r1
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	2b01      	cmp	r3, #1
 800e220:	d901      	bls.n	800e226 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 800e222:	2301      	movs	r3, #1
 800e224:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e226:	4b11      	ldr	r3, [pc, #68]	; (800e26c <xTaskIncrementTick+0x168>)
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d007      	beq.n	800e23e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800e22e:	2301      	movs	r3, #1
 800e230:	617b      	str	r3, [r7, #20]
 800e232:	e004      	b.n	800e23e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e234:	4b0e      	ldr	r3, [pc, #56]	; (800e270 <xTaskIncrementTick+0x16c>)
 800e236:	681b      	ldr	r3, [r3, #0]
 800e238:	3301      	adds	r3, #1
 800e23a:	4a0d      	ldr	r2, [pc, #52]	; (800e270 <xTaskIncrementTick+0x16c>)
 800e23c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e23e:	697b      	ldr	r3, [r7, #20]
}
 800e240:	4618      	mov	r0, r3
 800e242:	3718      	adds	r7, #24
 800e244:	46bd      	mov	sp, r7
 800e246:	bd80      	pop	{r7, pc}
 800e248:	20000cd4 	.word	0x20000cd4
 800e24c:	20000cb0 	.word	0x20000cb0
 800e250:	20000c64 	.word	0x20000c64
 800e254:	20000c68 	.word	0x20000c68
 800e258:	20000cc4 	.word	0x20000cc4
 800e25c:	20000ccc 	.word	0x20000ccc
 800e260:	20000cb4 	.word	0x20000cb4
 800e264:	20000bb0 	.word	0x20000bb0
 800e268:	20000bac 	.word	0x20000bac
 800e26c:	20000cc0 	.word	0x20000cc0
 800e270:	20000cbc 	.word	0x20000cbc

0800e274 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e274:	b480      	push	{r7}
 800e276:	b087      	sub	sp, #28
 800e278:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e27a:	4b27      	ldr	r3, [pc, #156]	; (800e318 <vTaskSwitchContext+0xa4>)
 800e27c:	681b      	ldr	r3, [r3, #0]
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d003      	beq.n	800e28a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e282:	4b26      	ldr	r3, [pc, #152]	; (800e31c <vTaskSwitchContext+0xa8>)
 800e284:	2201      	movs	r2, #1
 800e286:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e288:	e03f      	b.n	800e30a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800e28a:	4b24      	ldr	r3, [pc, #144]	; (800e31c <vTaskSwitchContext+0xa8>)
 800e28c:	2200      	movs	r2, #0
 800e28e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e290:	4b23      	ldr	r3, [pc, #140]	; (800e320 <vTaskSwitchContext+0xac>)
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e296:	68fb      	ldr	r3, [r7, #12]
 800e298:	fab3 f383 	clz	r3, r3
 800e29c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e29e:	7afb      	ldrb	r3, [r7, #11]
 800e2a0:	f1c3 031f 	rsb	r3, r3, #31
 800e2a4:	617b      	str	r3, [r7, #20]
 800e2a6:	491f      	ldr	r1, [pc, #124]	; (800e324 <vTaskSwitchContext+0xb0>)
 800e2a8:	697a      	ldr	r2, [r7, #20]
 800e2aa:	4613      	mov	r3, r2
 800e2ac:	009b      	lsls	r3, r3, #2
 800e2ae:	4413      	add	r3, r2
 800e2b0:	009b      	lsls	r3, r3, #2
 800e2b2:	440b      	add	r3, r1
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d10a      	bne.n	800e2d0 <vTaskSwitchContext+0x5c>
	__asm volatile
 800e2ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2be:	f383 8811 	msr	BASEPRI, r3
 800e2c2:	f3bf 8f6f 	isb	sy
 800e2c6:	f3bf 8f4f 	dsb	sy
 800e2ca:	607b      	str	r3, [r7, #4]
}
 800e2cc:	bf00      	nop
 800e2ce:	e7fe      	b.n	800e2ce <vTaskSwitchContext+0x5a>
 800e2d0:	697a      	ldr	r2, [r7, #20]
 800e2d2:	4613      	mov	r3, r2
 800e2d4:	009b      	lsls	r3, r3, #2
 800e2d6:	4413      	add	r3, r2
 800e2d8:	009b      	lsls	r3, r3, #2
 800e2da:	4a12      	ldr	r2, [pc, #72]	; (800e324 <vTaskSwitchContext+0xb0>)
 800e2dc:	4413      	add	r3, r2
 800e2de:	613b      	str	r3, [r7, #16]
 800e2e0:	693b      	ldr	r3, [r7, #16]
 800e2e2:	685b      	ldr	r3, [r3, #4]
 800e2e4:	685a      	ldr	r2, [r3, #4]
 800e2e6:	693b      	ldr	r3, [r7, #16]
 800e2e8:	605a      	str	r2, [r3, #4]
 800e2ea:	693b      	ldr	r3, [r7, #16]
 800e2ec:	685a      	ldr	r2, [r3, #4]
 800e2ee:	693b      	ldr	r3, [r7, #16]
 800e2f0:	3308      	adds	r3, #8
 800e2f2:	429a      	cmp	r2, r3
 800e2f4:	d104      	bne.n	800e300 <vTaskSwitchContext+0x8c>
 800e2f6:	693b      	ldr	r3, [r7, #16]
 800e2f8:	685b      	ldr	r3, [r3, #4]
 800e2fa:	685a      	ldr	r2, [r3, #4]
 800e2fc:	693b      	ldr	r3, [r7, #16]
 800e2fe:	605a      	str	r2, [r3, #4]
 800e300:	693b      	ldr	r3, [r7, #16]
 800e302:	685b      	ldr	r3, [r3, #4]
 800e304:	68db      	ldr	r3, [r3, #12]
 800e306:	4a08      	ldr	r2, [pc, #32]	; (800e328 <vTaskSwitchContext+0xb4>)
 800e308:	6013      	str	r3, [r2, #0]
}
 800e30a:	bf00      	nop
 800e30c:	371c      	adds	r7, #28
 800e30e:	46bd      	mov	sp, r7
 800e310:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e314:	4770      	bx	lr
 800e316:	bf00      	nop
 800e318:	20000cd4 	.word	0x20000cd4
 800e31c:	20000cc0 	.word	0x20000cc0
 800e320:	20000cb4 	.word	0x20000cb4
 800e324:	20000bb0 	.word	0x20000bb0
 800e328:	20000bac 	.word	0x20000bac

0800e32c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e32c:	b580      	push	{r7, lr}
 800e32e:	b082      	sub	sp, #8
 800e330:	af00      	add	r7, sp, #0
 800e332:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e334:	f000 f852 	bl	800e3dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e338:	4b06      	ldr	r3, [pc, #24]	; (800e354 <prvIdleTask+0x28>)
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	2b01      	cmp	r3, #1
 800e33e:	d9f9      	bls.n	800e334 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e340:	4b05      	ldr	r3, [pc, #20]	; (800e358 <prvIdleTask+0x2c>)
 800e342:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e346:	601a      	str	r2, [r3, #0]
 800e348:	f3bf 8f4f 	dsb	sy
 800e34c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e350:	e7f0      	b.n	800e334 <prvIdleTask+0x8>
 800e352:	bf00      	nop
 800e354:	20000bb0 	.word	0x20000bb0
 800e358:	e000ed04 	.word	0xe000ed04

0800e35c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e35c:	b580      	push	{r7, lr}
 800e35e:	b082      	sub	sp, #8
 800e360:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e362:	2300      	movs	r3, #0
 800e364:	607b      	str	r3, [r7, #4]
 800e366:	e00c      	b.n	800e382 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e368:	687a      	ldr	r2, [r7, #4]
 800e36a:	4613      	mov	r3, r2
 800e36c:	009b      	lsls	r3, r3, #2
 800e36e:	4413      	add	r3, r2
 800e370:	009b      	lsls	r3, r3, #2
 800e372:	4a12      	ldr	r2, [pc, #72]	; (800e3bc <prvInitialiseTaskLists+0x60>)
 800e374:	4413      	add	r3, r2
 800e376:	4618      	mov	r0, r3
 800e378:	f7ff fb3f 	bl	800d9fa <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	3301      	adds	r3, #1
 800e380:	607b      	str	r3, [r7, #4]
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	2b06      	cmp	r3, #6
 800e386:	d9ef      	bls.n	800e368 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e388:	480d      	ldr	r0, [pc, #52]	; (800e3c0 <prvInitialiseTaskLists+0x64>)
 800e38a:	f7ff fb36 	bl	800d9fa <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e38e:	480d      	ldr	r0, [pc, #52]	; (800e3c4 <prvInitialiseTaskLists+0x68>)
 800e390:	f7ff fb33 	bl	800d9fa <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e394:	480c      	ldr	r0, [pc, #48]	; (800e3c8 <prvInitialiseTaskLists+0x6c>)
 800e396:	f7ff fb30 	bl	800d9fa <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e39a:	480c      	ldr	r0, [pc, #48]	; (800e3cc <prvInitialiseTaskLists+0x70>)
 800e39c:	f7ff fb2d 	bl	800d9fa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e3a0:	480b      	ldr	r0, [pc, #44]	; (800e3d0 <prvInitialiseTaskLists+0x74>)
 800e3a2:	f7ff fb2a 	bl	800d9fa <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e3a6:	4b0b      	ldr	r3, [pc, #44]	; (800e3d4 <prvInitialiseTaskLists+0x78>)
 800e3a8:	4a05      	ldr	r2, [pc, #20]	; (800e3c0 <prvInitialiseTaskLists+0x64>)
 800e3aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e3ac:	4b0a      	ldr	r3, [pc, #40]	; (800e3d8 <prvInitialiseTaskLists+0x7c>)
 800e3ae:	4a05      	ldr	r2, [pc, #20]	; (800e3c4 <prvInitialiseTaskLists+0x68>)
 800e3b0:	601a      	str	r2, [r3, #0]
}
 800e3b2:	bf00      	nop
 800e3b4:	3708      	adds	r7, #8
 800e3b6:	46bd      	mov	sp, r7
 800e3b8:	bd80      	pop	{r7, pc}
 800e3ba:	bf00      	nop
 800e3bc:	20000bb0 	.word	0x20000bb0
 800e3c0:	20000c3c 	.word	0x20000c3c
 800e3c4:	20000c50 	.word	0x20000c50
 800e3c8:	20000c6c 	.word	0x20000c6c
 800e3cc:	20000c80 	.word	0x20000c80
 800e3d0:	20000c98 	.word	0x20000c98
 800e3d4:	20000c64 	.word	0x20000c64
 800e3d8:	20000c68 	.word	0x20000c68

0800e3dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b082      	sub	sp, #8
 800e3e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e3e2:	e019      	b.n	800e418 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e3e4:	f000 fa0e 	bl	800e804 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3e8:	4b10      	ldr	r3, [pc, #64]	; (800e42c <prvCheckTasksWaitingTermination+0x50>)
 800e3ea:	68db      	ldr	r3, [r3, #12]
 800e3ec:	68db      	ldr	r3, [r3, #12]
 800e3ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	3304      	adds	r3, #4
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	f7ff fb8a 	bl	800db0e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e3fa:	4b0d      	ldr	r3, [pc, #52]	; (800e430 <prvCheckTasksWaitingTermination+0x54>)
 800e3fc:	681b      	ldr	r3, [r3, #0]
 800e3fe:	3b01      	subs	r3, #1
 800e400:	4a0b      	ldr	r2, [pc, #44]	; (800e430 <prvCheckTasksWaitingTermination+0x54>)
 800e402:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e404:	4b0b      	ldr	r3, [pc, #44]	; (800e434 <prvCheckTasksWaitingTermination+0x58>)
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	3b01      	subs	r3, #1
 800e40a:	4a0a      	ldr	r2, [pc, #40]	; (800e434 <prvCheckTasksWaitingTermination+0x58>)
 800e40c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e40e:	f000 fa29 	bl	800e864 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e412:	6878      	ldr	r0, [r7, #4]
 800e414:	f000 f810 	bl	800e438 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e418:	4b06      	ldr	r3, [pc, #24]	; (800e434 <prvCheckTasksWaitingTermination+0x58>)
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	d1e1      	bne.n	800e3e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e420:	bf00      	nop
 800e422:	bf00      	nop
 800e424:	3708      	adds	r7, #8
 800e426:	46bd      	mov	sp, r7
 800e428:	bd80      	pop	{r7, pc}
 800e42a:	bf00      	nop
 800e42c:	20000c80 	.word	0x20000c80
 800e430:	20000cac 	.word	0x20000cac
 800e434:	20000c94 	.word	0x20000c94

0800e438 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b084      	sub	sp, #16
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e446:	2b00      	cmp	r3, #0
 800e448:	d108      	bne.n	800e45c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e44e:	4618      	mov	r0, r3
 800e450:	f000 fb86 	bl	800eb60 <vPortFree>
				vPortFree( pxTCB );
 800e454:	6878      	ldr	r0, [r7, #4]
 800e456:	f000 fb83 	bl	800eb60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e45a:	e018      	b.n	800e48e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e462:	2b01      	cmp	r3, #1
 800e464:	d103      	bne.n	800e46e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e466:	6878      	ldr	r0, [r7, #4]
 800e468:	f000 fb7a 	bl	800eb60 <vPortFree>
	}
 800e46c:	e00f      	b.n	800e48e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800e474:	2b02      	cmp	r3, #2
 800e476:	d00a      	beq.n	800e48e <prvDeleteTCB+0x56>
	__asm volatile
 800e478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e47c:	f383 8811 	msr	BASEPRI, r3
 800e480:	f3bf 8f6f 	isb	sy
 800e484:	f3bf 8f4f 	dsb	sy
 800e488:	60fb      	str	r3, [r7, #12]
}
 800e48a:	bf00      	nop
 800e48c:	e7fe      	b.n	800e48c <prvDeleteTCB+0x54>
	}
 800e48e:	bf00      	nop
 800e490:	3710      	adds	r7, #16
 800e492:	46bd      	mov	sp, r7
 800e494:	bd80      	pop	{r7, pc}
	...

0800e498 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e498:	b480      	push	{r7}
 800e49a:	b083      	sub	sp, #12
 800e49c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e49e:	4b0c      	ldr	r3, [pc, #48]	; (800e4d0 <prvResetNextTaskUnblockTime+0x38>)
 800e4a0:	681b      	ldr	r3, [r3, #0]
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d104      	bne.n	800e4b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e4a8:	4b0a      	ldr	r3, [pc, #40]	; (800e4d4 <prvResetNextTaskUnblockTime+0x3c>)
 800e4aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e4ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e4b0:	e008      	b.n	800e4c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4b2:	4b07      	ldr	r3, [pc, #28]	; (800e4d0 <prvResetNextTaskUnblockTime+0x38>)
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	68db      	ldr	r3, [r3, #12]
 800e4b8:	68db      	ldr	r3, [r3, #12]
 800e4ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e4bc:	687b      	ldr	r3, [r7, #4]
 800e4be:	685b      	ldr	r3, [r3, #4]
 800e4c0:	4a04      	ldr	r2, [pc, #16]	; (800e4d4 <prvResetNextTaskUnblockTime+0x3c>)
 800e4c2:	6013      	str	r3, [r2, #0]
}
 800e4c4:	bf00      	nop
 800e4c6:	370c      	adds	r7, #12
 800e4c8:	46bd      	mov	sp, r7
 800e4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ce:	4770      	bx	lr
 800e4d0:	20000c64 	.word	0x20000c64
 800e4d4:	20000ccc 	.word	0x20000ccc

0800e4d8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e4d8:	b580      	push	{r7, lr}
 800e4da:	b084      	sub	sp, #16
 800e4dc:	af00      	add	r7, sp, #0
 800e4de:	6078      	str	r0, [r7, #4]
 800e4e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e4e2:	4b29      	ldr	r3, [pc, #164]	; (800e588 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e4e8:	4b28      	ldr	r3, [pc, #160]	; (800e58c <prvAddCurrentTaskToDelayedList+0xb4>)
 800e4ea:	681b      	ldr	r3, [r3, #0]
 800e4ec:	3304      	adds	r3, #4
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	f7ff fb0d 	bl	800db0e <uxListRemove>
 800e4f4:	4603      	mov	r3, r0
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d10b      	bne.n	800e512 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e4fa:	4b24      	ldr	r3, [pc, #144]	; (800e58c <prvAddCurrentTaskToDelayedList+0xb4>)
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e500:	2201      	movs	r2, #1
 800e502:	fa02 f303 	lsl.w	r3, r2, r3
 800e506:	43da      	mvns	r2, r3
 800e508:	4b21      	ldr	r3, [pc, #132]	; (800e590 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	4013      	ands	r3, r2
 800e50e:	4a20      	ldr	r2, [pc, #128]	; (800e590 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e510:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e518:	d10a      	bne.n	800e530 <prvAddCurrentTaskToDelayedList+0x58>
 800e51a:	683b      	ldr	r3, [r7, #0]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d007      	beq.n	800e530 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e520:	4b1a      	ldr	r3, [pc, #104]	; (800e58c <prvAddCurrentTaskToDelayedList+0xb4>)
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	3304      	adds	r3, #4
 800e526:	4619      	mov	r1, r3
 800e528:	481a      	ldr	r0, [pc, #104]	; (800e594 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e52a:	f7ff fa93 	bl	800da54 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e52e:	e026      	b.n	800e57e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e530:	68fa      	ldr	r2, [r7, #12]
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	4413      	add	r3, r2
 800e536:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e538:	4b14      	ldr	r3, [pc, #80]	; (800e58c <prvAddCurrentTaskToDelayedList+0xb4>)
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	68ba      	ldr	r2, [r7, #8]
 800e53e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e540:	68ba      	ldr	r2, [r7, #8]
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	429a      	cmp	r2, r3
 800e546:	d209      	bcs.n	800e55c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e548:	4b13      	ldr	r3, [pc, #76]	; (800e598 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e54a:	681a      	ldr	r2, [r3, #0]
 800e54c:	4b0f      	ldr	r3, [pc, #60]	; (800e58c <prvAddCurrentTaskToDelayedList+0xb4>)
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	3304      	adds	r3, #4
 800e552:	4619      	mov	r1, r3
 800e554:	4610      	mov	r0, r2
 800e556:	f7ff faa1 	bl	800da9c <vListInsert>
}
 800e55a:	e010      	b.n	800e57e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e55c:	4b0f      	ldr	r3, [pc, #60]	; (800e59c <prvAddCurrentTaskToDelayedList+0xc4>)
 800e55e:	681a      	ldr	r2, [r3, #0]
 800e560:	4b0a      	ldr	r3, [pc, #40]	; (800e58c <prvAddCurrentTaskToDelayedList+0xb4>)
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	3304      	adds	r3, #4
 800e566:	4619      	mov	r1, r3
 800e568:	4610      	mov	r0, r2
 800e56a:	f7ff fa97 	bl	800da9c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e56e:	4b0c      	ldr	r3, [pc, #48]	; (800e5a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	68ba      	ldr	r2, [r7, #8]
 800e574:	429a      	cmp	r2, r3
 800e576:	d202      	bcs.n	800e57e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e578:	4a09      	ldr	r2, [pc, #36]	; (800e5a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e57a:	68bb      	ldr	r3, [r7, #8]
 800e57c:	6013      	str	r3, [r2, #0]
}
 800e57e:	bf00      	nop
 800e580:	3710      	adds	r7, #16
 800e582:	46bd      	mov	sp, r7
 800e584:	bd80      	pop	{r7, pc}
 800e586:	bf00      	nop
 800e588:	20000cb0 	.word	0x20000cb0
 800e58c:	20000bac 	.word	0x20000bac
 800e590:	20000cb4 	.word	0x20000cb4
 800e594:	20000c98 	.word	0x20000c98
 800e598:	20000c68 	.word	0x20000c68
 800e59c:	20000c64 	.word	0x20000c64
 800e5a0:	20000ccc 	.word	0x20000ccc

0800e5a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e5a4:	b480      	push	{r7}
 800e5a6:	b085      	sub	sp, #20
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	60f8      	str	r0, [r7, #12]
 800e5ac:	60b9      	str	r1, [r7, #8]
 800e5ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	3b04      	subs	r3, #4
 800e5b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e5bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e5be:	68fb      	ldr	r3, [r7, #12]
 800e5c0:	3b04      	subs	r3, #4
 800e5c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e5c4:	68bb      	ldr	r3, [r7, #8]
 800e5c6:	f023 0201 	bic.w	r2, r3, #1
 800e5ca:	68fb      	ldr	r3, [r7, #12]
 800e5cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	3b04      	subs	r3, #4
 800e5d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e5d4:	4a0c      	ldr	r2, [pc, #48]	; (800e608 <pxPortInitialiseStack+0x64>)
 800e5d6:	68fb      	ldr	r3, [r7, #12]
 800e5d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	3b14      	subs	r3, #20
 800e5de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e5e0:	687a      	ldr	r2, [r7, #4]
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e5e6:	68fb      	ldr	r3, [r7, #12]
 800e5e8:	3b04      	subs	r3, #4
 800e5ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	f06f 0202 	mvn.w	r2, #2
 800e5f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e5f4:	68fb      	ldr	r3, [r7, #12]
 800e5f6:	3b20      	subs	r3, #32
 800e5f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e5fa:	68fb      	ldr	r3, [r7, #12]
}
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	3714      	adds	r7, #20
 800e600:	46bd      	mov	sp, r7
 800e602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e606:	4770      	bx	lr
 800e608:	0800e60d 	.word	0x0800e60d

0800e60c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e60c:	b480      	push	{r7}
 800e60e:	b085      	sub	sp, #20
 800e610:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e612:	2300      	movs	r3, #0
 800e614:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e616:	4b12      	ldr	r3, [pc, #72]	; (800e660 <prvTaskExitError+0x54>)
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e61e:	d00a      	beq.n	800e636 <prvTaskExitError+0x2a>
	__asm volatile
 800e620:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e624:	f383 8811 	msr	BASEPRI, r3
 800e628:	f3bf 8f6f 	isb	sy
 800e62c:	f3bf 8f4f 	dsb	sy
 800e630:	60fb      	str	r3, [r7, #12]
}
 800e632:	bf00      	nop
 800e634:	e7fe      	b.n	800e634 <prvTaskExitError+0x28>
	__asm volatile
 800e636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e63a:	f383 8811 	msr	BASEPRI, r3
 800e63e:	f3bf 8f6f 	isb	sy
 800e642:	f3bf 8f4f 	dsb	sy
 800e646:	60bb      	str	r3, [r7, #8]
}
 800e648:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e64a:	bf00      	nop
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d0fc      	beq.n	800e64c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e652:	bf00      	nop
 800e654:	bf00      	nop
 800e656:	3714      	adds	r7, #20
 800e658:	46bd      	mov	sp, r7
 800e65a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e65e:	4770      	bx	lr
 800e660:	200000e8 	.word	0x200000e8
	...

0800e670 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e670:	4b07      	ldr	r3, [pc, #28]	; (800e690 <pxCurrentTCBConst2>)
 800e672:	6819      	ldr	r1, [r3, #0]
 800e674:	6808      	ldr	r0, [r1, #0]
 800e676:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e67a:	f380 8809 	msr	PSP, r0
 800e67e:	f3bf 8f6f 	isb	sy
 800e682:	f04f 0000 	mov.w	r0, #0
 800e686:	f380 8811 	msr	BASEPRI, r0
 800e68a:	4770      	bx	lr
 800e68c:	f3af 8000 	nop.w

0800e690 <pxCurrentTCBConst2>:
 800e690:	20000bac 	.word	0x20000bac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e694:	bf00      	nop
 800e696:	bf00      	nop

0800e698 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e698:	4808      	ldr	r0, [pc, #32]	; (800e6bc <prvPortStartFirstTask+0x24>)
 800e69a:	6800      	ldr	r0, [r0, #0]
 800e69c:	6800      	ldr	r0, [r0, #0]
 800e69e:	f380 8808 	msr	MSP, r0
 800e6a2:	f04f 0000 	mov.w	r0, #0
 800e6a6:	f380 8814 	msr	CONTROL, r0
 800e6aa:	b662      	cpsie	i
 800e6ac:	b661      	cpsie	f
 800e6ae:	f3bf 8f4f 	dsb	sy
 800e6b2:	f3bf 8f6f 	isb	sy
 800e6b6:	df00      	svc	0
 800e6b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e6ba:	bf00      	nop
 800e6bc:	e000ed08 	.word	0xe000ed08

0800e6c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b086      	sub	sp, #24
 800e6c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e6c6:	4b46      	ldr	r3, [pc, #280]	; (800e7e0 <xPortStartScheduler+0x120>)
 800e6c8:	681b      	ldr	r3, [r3, #0]
 800e6ca:	4a46      	ldr	r2, [pc, #280]	; (800e7e4 <xPortStartScheduler+0x124>)
 800e6cc:	4293      	cmp	r3, r2
 800e6ce:	d10a      	bne.n	800e6e6 <xPortStartScheduler+0x26>
	__asm volatile
 800e6d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6d4:	f383 8811 	msr	BASEPRI, r3
 800e6d8:	f3bf 8f6f 	isb	sy
 800e6dc:	f3bf 8f4f 	dsb	sy
 800e6e0:	613b      	str	r3, [r7, #16]
}
 800e6e2:	bf00      	nop
 800e6e4:	e7fe      	b.n	800e6e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e6e6:	4b3e      	ldr	r3, [pc, #248]	; (800e7e0 <xPortStartScheduler+0x120>)
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	4a3f      	ldr	r2, [pc, #252]	; (800e7e8 <xPortStartScheduler+0x128>)
 800e6ec:	4293      	cmp	r3, r2
 800e6ee:	d10a      	bne.n	800e706 <xPortStartScheduler+0x46>
	__asm volatile
 800e6f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6f4:	f383 8811 	msr	BASEPRI, r3
 800e6f8:	f3bf 8f6f 	isb	sy
 800e6fc:	f3bf 8f4f 	dsb	sy
 800e700:	60fb      	str	r3, [r7, #12]
}
 800e702:	bf00      	nop
 800e704:	e7fe      	b.n	800e704 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e706:	4b39      	ldr	r3, [pc, #228]	; (800e7ec <xPortStartScheduler+0x12c>)
 800e708:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e70a:	697b      	ldr	r3, [r7, #20]
 800e70c:	781b      	ldrb	r3, [r3, #0]
 800e70e:	b2db      	uxtb	r3, r3
 800e710:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e712:	697b      	ldr	r3, [r7, #20]
 800e714:	22ff      	movs	r2, #255	; 0xff
 800e716:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e718:	697b      	ldr	r3, [r7, #20]
 800e71a:	781b      	ldrb	r3, [r3, #0]
 800e71c:	b2db      	uxtb	r3, r3
 800e71e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e720:	78fb      	ldrb	r3, [r7, #3]
 800e722:	b2db      	uxtb	r3, r3
 800e724:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e728:	b2da      	uxtb	r2, r3
 800e72a:	4b31      	ldr	r3, [pc, #196]	; (800e7f0 <xPortStartScheduler+0x130>)
 800e72c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e72e:	4b31      	ldr	r3, [pc, #196]	; (800e7f4 <xPortStartScheduler+0x134>)
 800e730:	2207      	movs	r2, #7
 800e732:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e734:	e009      	b.n	800e74a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e736:	4b2f      	ldr	r3, [pc, #188]	; (800e7f4 <xPortStartScheduler+0x134>)
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	3b01      	subs	r3, #1
 800e73c:	4a2d      	ldr	r2, [pc, #180]	; (800e7f4 <xPortStartScheduler+0x134>)
 800e73e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e740:	78fb      	ldrb	r3, [r7, #3]
 800e742:	b2db      	uxtb	r3, r3
 800e744:	005b      	lsls	r3, r3, #1
 800e746:	b2db      	uxtb	r3, r3
 800e748:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e74a:	78fb      	ldrb	r3, [r7, #3]
 800e74c:	b2db      	uxtb	r3, r3
 800e74e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e752:	2b80      	cmp	r3, #128	; 0x80
 800e754:	d0ef      	beq.n	800e736 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e756:	4b27      	ldr	r3, [pc, #156]	; (800e7f4 <xPortStartScheduler+0x134>)
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	f1c3 0307 	rsb	r3, r3, #7
 800e75e:	2b04      	cmp	r3, #4
 800e760:	d00a      	beq.n	800e778 <xPortStartScheduler+0xb8>
	__asm volatile
 800e762:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e766:	f383 8811 	msr	BASEPRI, r3
 800e76a:	f3bf 8f6f 	isb	sy
 800e76e:	f3bf 8f4f 	dsb	sy
 800e772:	60bb      	str	r3, [r7, #8]
}
 800e774:	bf00      	nop
 800e776:	e7fe      	b.n	800e776 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e778:	4b1e      	ldr	r3, [pc, #120]	; (800e7f4 <xPortStartScheduler+0x134>)
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	021b      	lsls	r3, r3, #8
 800e77e:	4a1d      	ldr	r2, [pc, #116]	; (800e7f4 <xPortStartScheduler+0x134>)
 800e780:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e782:	4b1c      	ldr	r3, [pc, #112]	; (800e7f4 <xPortStartScheduler+0x134>)
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e78a:	4a1a      	ldr	r2, [pc, #104]	; (800e7f4 <xPortStartScheduler+0x134>)
 800e78c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	b2da      	uxtb	r2, r3
 800e792:	697b      	ldr	r3, [r7, #20]
 800e794:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e796:	4b18      	ldr	r3, [pc, #96]	; (800e7f8 <xPortStartScheduler+0x138>)
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	4a17      	ldr	r2, [pc, #92]	; (800e7f8 <xPortStartScheduler+0x138>)
 800e79c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e7a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e7a2:	4b15      	ldr	r3, [pc, #84]	; (800e7f8 <xPortStartScheduler+0x138>)
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	4a14      	ldr	r2, [pc, #80]	; (800e7f8 <xPortStartScheduler+0x138>)
 800e7a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e7ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e7ae:	f000 f8dd 	bl	800e96c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e7b2:	4b12      	ldr	r3, [pc, #72]	; (800e7fc <xPortStartScheduler+0x13c>)
 800e7b4:	2200      	movs	r2, #0
 800e7b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e7b8:	f000 f8fc 	bl	800e9b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e7bc:	4b10      	ldr	r3, [pc, #64]	; (800e800 <xPortStartScheduler+0x140>)
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	4a0f      	ldr	r2, [pc, #60]	; (800e800 <xPortStartScheduler+0x140>)
 800e7c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e7c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e7c8:	f7ff ff66 	bl	800e698 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e7cc:	f7ff fd52 	bl	800e274 <vTaskSwitchContext>
	prvTaskExitError();
 800e7d0:	f7ff ff1c 	bl	800e60c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e7d4:	2300      	movs	r3, #0
}
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	3718      	adds	r7, #24
 800e7da:	46bd      	mov	sp, r7
 800e7dc:	bd80      	pop	{r7, pc}
 800e7de:	bf00      	nop
 800e7e0:	e000ed00 	.word	0xe000ed00
 800e7e4:	410fc271 	.word	0x410fc271
 800e7e8:	410fc270 	.word	0x410fc270
 800e7ec:	e000e400 	.word	0xe000e400
 800e7f0:	20000cd8 	.word	0x20000cd8
 800e7f4:	20000cdc 	.word	0x20000cdc
 800e7f8:	e000ed20 	.word	0xe000ed20
 800e7fc:	200000e8 	.word	0x200000e8
 800e800:	e000ef34 	.word	0xe000ef34

0800e804 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e804:	b480      	push	{r7}
 800e806:	b083      	sub	sp, #12
 800e808:	af00      	add	r7, sp, #0
	__asm volatile
 800e80a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e80e:	f383 8811 	msr	BASEPRI, r3
 800e812:	f3bf 8f6f 	isb	sy
 800e816:	f3bf 8f4f 	dsb	sy
 800e81a:	607b      	str	r3, [r7, #4]
}
 800e81c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e81e:	4b0f      	ldr	r3, [pc, #60]	; (800e85c <vPortEnterCritical+0x58>)
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	3301      	adds	r3, #1
 800e824:	4a0d      	ldr	r2, [pc, #52]	; (800e85c <vPortEnterCritical+0x58>)
 800e826:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e828:	4b0c      	ldr	r3, [pc, #48]	; (800e85c <vPortEnterCritical+0x58>)
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	2b01      	cmp	r3, #1
 800e82e:	d10f      	bne.n	800e850 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e830:	4b0b      	ldr	r3, [pc, #44]	; (800e860 <vPortEnterCritical+0x5c>)
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	b2db      	uxtb	r3, r3
 800e836:	2b00      	cmp	r3, #0
 800e838:	d00a      	beq.n	800e850 <vPortEnterCritical+0x4c>
	__asm volatile
 800e83a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e83e:	f383 8811 	msr	BASEPRI, r3
 800e842:	f3bf 8f6f 	isb	sy
 800e846:	f3bf 8f4f 	dsb	sy
 800e84a:	603b      	str	r3, [r7, #0]
}
 800e84c:	bf00      	nop
 800e84e:	e7fe      	b.n	800e84e <vPortEnterCritical+0x4a>
	}
}
 800e850:	bf00      	nop
 800e852:	370c      	adds	r7, #12
 800e854:	46bd      	mov	sp, r7
 800e856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e85a:	4770      	bx	lr
 800e85c:	200000e8 	.word	0x200000e8
 800e860:	e000ed04 	.word	0xe000ed04

0800e864 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e864:	b480      	push	{r7}
 800e866:	b083      	sub	sp, #12
 800e868:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e86a:	4b12      	ldr	r3, [pc, #72]	; (800e8b4 <vPortExitCritical+0x50>)
 800e86c:	681b      	ldr	r3, [r3, #0]
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d10a      	bne.n	800e888 <vPortExitCritical+0x24>
	__asm volatile
 800e872:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e876:	f383 8811 	msr	BASEPRI, r3
 800e87a:	f3bf 8f6f 	isb	sy
 800e87e:	f3bf 8f4f 	dsb	sy
 800e882:	607b      	str	r3, [r7, #4]
}
 800e884:	bf00      	nop
 800e886:	e7fe      	b.n	800e886 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e888:	4b0a      	ldr	r3, [pc, #40]	; (800e8b4 <vPortExitCritical+0x50>)
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	3b01      	subs	r3, #1
 800e88e:	4a09      	ldr	r2, [pc, #36]	; (800e8b4 <vPortExitCritical+0x50>)
 800e890:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e892:	4b08      	ldr	r3, [pc, #32]	; (800e8b4 <vPortExitCritical+0x50>)
 800e894:	681b      	ldr	r3, [r3, #0]
 800e896:	2b00      	cmp	r3, #0
 800e898:	d105      	bne.n	800e8a6 <vPortExitCritical+0x42>
 800e89a:	2300      	movs	r3, #0
 800e89c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e89e:	683b      	ldr	r3, [r7, #0]
 800e8a0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e8a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e8a6:	bf00      	nop
 800e8a8:	370c      	adds	r7, #12
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b0:	4770      	bx	lr
 800e8b2:	bf00      	nop
 800e8b4:	200000e8 	.word	0x200000e8
	...

0800e8c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e8c0:	f3ef 8009 	mrs	r0, PSP
 800e8c4:	f3bf 8f6f 	isb	sy
 800e8c8:	4b15      	ldr	r3, [pc, #84]	; (800e920 <pxCurrentTCBConst>)
 800e8ca:	681a      	ldr	r2, [r3, #0]
 800e8cc:	f01e 0f10 	tst.w	lr, #16
 800e8d0:	bf08      	it	eq
 800e8d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e8d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8da:	6010      	str	r0, [r2, #0]
 800e8dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e8e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e8e4:	f380 8811 	msr	BASEPRI, r0
 800e8e8:	f3bf 8f4f 	dsb	sy
 800e8ec:	f3bf 8f6f 	isb	sy
 800e8f0:	f7ff fcc0 	bl	800e274 <vTaskSwitchContext>
 800e8f4:	f04f 0000 	mov.w	r0, #0
 800e8f8:	f380 8811 	msr	BASEPRI, r0
 800e8fc:	bc09      	pop	{r0, r3}
 800e8fe:	6819      	ldr	r1, [r3, #0]
 800e900:	6808      	ldr	r0, [r1, #0]
 800e902:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e906:	f01e 0f10 	tst.w	lr, #16
 800e90a:	bf08      	it	eq
 800e90c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e910:	f380 8809 	msr	PSP, r0
 800e914:	f3bf 8f6f 	isb	sy
 800e918:	4770      	bx	lr
 800e91a:	bf00      	nop
 800e91c:	f3af 8000 	nop.w

0800e920 <pxCurrentTCBConst>:
 800e920:	20000bac 	.word	0x20000bac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e924:	bf00      	nop
 800e926:	bf00      	nop

0800e928 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e928:	b580      	push	{r7, lr}
 800e92a:	b082      	sub	sp, #8
 800e92c:	af00      	add	r7, sp, #0
	__asm volatile
 800e92e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e932:	f383 8811 	msr	BASEPRI, r3
 800e936:	f3bf 8f6f 	isb	sy
 800e93a:	f3bf 8f4f 	dsb	sy
 800e93e:	607b      	str	r3, [r7, #4]
}
 800e940:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e942:	f7ff fbdf 	bl	800e104 <xTaskIncrementTick>
 800e946:	4603      	mov	r3, r0
 800e948:	2b00      	cmp	r3, #0
 800e94a:	d003      	beq.n	800e954 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e94c:	4b06      	ldr	r3, [pc, #24]	; (800e968 <SysTick_Handler+0x40>)
 800e94e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e952:	601a      	str	r2, [r3, #0]
 800e954:	2300      	movs	r3, #0
 800e956:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e958:	683b      	ldr	r3, [r7, #0]
 800e95a:	f383 8811 	msr	BASEPRI, r3
}
 800e95e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e960:	bf00      	nop
 800e962:	3708      	adds	r7, #8
 800e964:	46bd      	mov	sp, r7
 800e966:	bd80      	pop	{r7, pc}
 800e968:	e000ed04 	.word	0xe000ed04

0800e96c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e96c:	b480      	push	{r7}
 800e96e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e970:	4b0b      	ldr	r3, [pc, #44]	; (800e9a0 <vPortSetupTimerInterrupt+0x34>)
 800e972:	2200      	movs	r2, #0
 800e974:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e976:	4b0b      	ldr	r3, [pc, #44]	; (800e9a4 <vPortSetupTimerInterrupt+0x38>)
 800e978:	2200      	movs	r2, #0
 800e97a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e97c:	4b0a      	ldr	r3, [pc, #40]	; (800e9a8 <vPortSetupTimerInterrupt+0x3c>)
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	4a0a      	ldr	r2, [pc, #40]	; (800e9ac <vPortSetupTimerInterrupt+0x40>)
 800e982:	fba2 2303 	umull	r2, r3, r2, r3
 800e986:	099b      	lsrs	r3, r3, #6
 800e988:	4a09      	ldr	r2, [pc, #36]	; (800e9b0 <vPortSetupTimerInterrupt+0x44>)
 800e98a:	3b01      	subs	r3, #1
 800e98c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e98e:	4b04      	ldr	r3, [pc, #16]	; (800e9a0 <vPortSetupTimerInterrupt+0x34>)
 800e990:	2207      	movs	r2, #7
 800e992:	601a      	str	r2, [r3, #0]
}
 800e994:	bf00      	nop
 800e996:	46bd      	mov	sp, r7
 800e998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99c:	4770      	bx	lr
 800e99e:	bf00      	nop
 800e9a0:	e000e010 	.word	0xe000e010
 800e9a4:	e000e018 	.word	0xe000e018
 800e9a8:	20000050 	.word	0x20000050
 800e9ac:	10624dd3 	.word	0x10624dd3
 800e9b0:	e000e014 	.word	0xe000e014

0800e9b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e9b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e9c4 <vPortEnableVFP+0x10>
 800e9b8:	6801      	ldr	r1, [r0, #0]
 800e9ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e9be:	6001      	str	r1, [r0, #0]
 800e9c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e9c2:	bf00      	nop
 800e9c4:	e000ed88 	.word	0xe000ed88

0800e9c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e9c8:	b580      	push	{r7, lr}
 800e9ca:	b08a      	sub	sp, #40	; 0x28
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e9d0:	2300      	movs	r3, #0
 800e9d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e9d4:	f7ff faec 	bl	800dfb0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e9d8:	4b5b      	ldr	r3, [pc, #364]	; (800eb48 <pvPortMalloc+0x180>)
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d101      	bne.n	800e9e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e9e0:	f000 f920 	bl	800ec24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e9e4:	4b59      	ldr	r3, [pc, #356]	; (800eb4c <pvPortMalloc+0x184>)
 800e9e6:	681a      	ldr	r2, [r3, #0]
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	4013      	ands	r3, r2
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	f040 8093 	bne.w	800eb18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d01d      	beq.n	800ea34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e9f8:	2208      	movs	r2, #8
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	4413      	add	r3, r2
 800e9fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	f003 0307 	and.w	r3, r3, #7
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d014      	beq.n	800ea34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	f023 0307 	bic.w	r3, r3, #7
 800ea10:	3308      	adds	r3, #8
 800ea12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	f003 0307 	and.w	r3, r3, #7
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d00a      	beq.n	800ea34 <pvPortMalloc+0x6c>
	__asm volatile
 800ea1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea22:	f383 8811 	msr	BASEPRI, r3
 800ea26:	f3bf 8f6f 	isb	sy
 800ea2a:	f3bf 8f4f 	dsb	sy
 800ea2e:	617b      	str	r3, [r7, #20]
}
 800ea30:	bf00      	nop
 800ea32:	e7fe      	b.n	800ea32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d06e      	beq.n	800eb18 <pvPortMalloc+0x150>
 800ea3a:	4b45      	ldr	r3, [pc, #276]	; (800eb50 <pvPortMalloc+0x188>)
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	687a      	ldr	r2, [r7, #4]
 800ea40:	429a      	cmp	r2, r3
 800ea42:	d869      	bhi.n	800eb18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ea44:	4b43      	ldr	r3, [pc, #268]	; (800eb54 <pvPortMalloc+0x18c>)
 800ea46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ea48:	4b42      	ldr	r3, [pc, #264]	; (800eb54 <pvPortMalloc+0x18c>)
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ea4e:	e004      	b.n	800ea5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800ea50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ea54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ea5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea5c:	685b      	ldr	r3, [r3, #4]
 800ea5e:	687a      	ldr	r2, [r7, #4]
 800ea60:	429a      	cmp	r2, r3
 800ea62:	d903      	bls.n	800ea6c <pvPortMalloc+0xa4>
 800ea64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	2b00      	cmp	r3, #0
 800ea6a:	d1f1      	bne.n	800ea50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ea6c:	4b36      	ldr	r3, [pc, #216]	; (800eb48 <pvPortMalloc+0x180>)
 800ea6e:	681b      	ldr	r3, [r3, #0]
 800ea70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea72:	429a      	cmp	r2, r3
 800ea74:	d050      	beq.n	800eb18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ea76:	6a3b      	ldr	r3, [r7, #32]
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	2208      	movs	r2, #8
 800ea7c:	4413      	add	r3, r2
 800ea7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ea80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea82:	681a      	ldr	r2, [r3, #0]
 800ea84:	6a3b      	ldr	r3, [r7, #32]
 800ea86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ea88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea8a:	685a      	ldr	r2, [r3, #4]
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	1ad2      	subs	r2, r2, r3
 800ea90:	2308      	movs	r3, #8
 800ea92:	005b      	lsls	r3, r3, #1
 800ea94:	429a      	cmp	r2, r3
 800ea96:	d91f      	bls.n	800ead8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ea98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	4413      	add	r3, r2
 800ea9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800eaa0:	69bb      	ldr	r3, [r7, #24]
 800eaa2:	f003 0307 	and.w	r3, r3, #7
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d00a      	beq.n	800eac0 <pvPortMalloc+0xf8>
	__asm volatile
 800eaaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eaae:	f383 8811 	msr	BASEPRI, r3
 800eab2:	f3bf 8f6f 	isb	sy
 800eab6:	f3bf 8f4f 	dsb	sy
 800eaba:	613b      	str	r3, [r7, #16]
}
 800eabc:	bf00      	nop
 800eabe:	e7fe      	b.n	800eabe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800eac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eac2:	685a      	ldr	r2, [r3, #4]
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	1ad2      	subs	r2, r2, r3
 800eac8:	69bb      	ldr	r3, [r7, #24]
 800eaca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800eacc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eace:	687a      	ldr	r2, [r7, #4]
 800ead0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ead2:	69b8      	ldr	r0, [r7, #24]
 800ead4:	f000 f908 	bl	800ece8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ead8:	4b1d      	ldr	r3, [pc, #116]	; (800eb50 <pvPortMalloc+0x188>)
 800eada:	681a      	ldr	r2, [r3, #0]
 800eadc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eade:	685b      	ldr	r3, [r3, #4]
 800eae0:	1ad3      	subs	r3, r2, r3
 800eae2:	4a1b      	ldr	r2, [pc, #108]	; (800eb50 <pvPortMalloc+0x188>)
 800eae4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800eae6:	4b1a      	ldr	r3, [pc, #104]	; (800eb50 <pvPortMalloc+0x188>)
 800eae8:	681a      	ldr	r2, [r3, #0]
 800eaea:	4b1b      	ldr	r3, [pc, #108]	; (800eb58 <pvPortMalloc+0x190>)
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	429a      	cmp	r2, r3
 800eaf0:	d203      	bcs.n	800eafa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800eaf2:	4b17      	ldr	r3, [pc, #92]	; (800eb50 <pvPortMalloc+0x188>)
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	4a18      	ldr	r2, [pc, #96]	; (800eb58 <pvPortMalloc+0x190>)
 800eaf8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800eafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eafc:	685a      	ldr	r2, [r3, #4]
 800eafe:	4b13      	ldr	r3, [pc, #76]	; (800eb4c <pvPortMalloc+0x184>)
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	431a      	orrs	r2, r3
 800eb04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800eb08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb0a:	2200      	movs	r2, #0
 800eb0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800eb0e:	4b13      	ldr	r3, [pc, #76]	; (800eb5c <pvPortMalloc+0x194>)
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	3301      	adds	r3, #1
 800eb14:	4a11      	ldr	r2, [pc, #68]	; (800eb5c <pvPortMalloc+0x194>)
 800eb16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800eb18:	f7ff fa58 	bl	800dfcc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800eb1c:	69fb      	ldr	r3, [r7, #28]
 800eb1e:	f003 0307 	and.w	r3, r3, #7
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d00a      	beq.n	800eb3c <pvPortMalloc+0x174>
	__asm volatile
 800eb26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb2a:	f383 8811 	msr	BASEPRI, r3
 800eb2e:	f3bf 8f6f 	isb	sy
 800eb32:	f3bf 8f4f 	dsb	sy
 800eb36:	60fb      	str	r3, [r7, #12]
}
 800eb38:	bf00      	nop
 800eb3a:	e7fe      	b.n	800eb3a <pvPortMalloc+0x172>
	return pvReturn;
 800eb3c:	69fb      	ldr	r3, [r7, #28]
}
 800eb3e:	4618      	mov	r0, r3
 800eb40:	3728      	adds	r7, #40	; 0x28
 800eb42:	46bd      	mov	sp, r7
 800eb44:	bd80      	pop	{r7, pc}
 800eb46:	bf00      	nop
 800eb48:	200048e8 	.word	0x200048e8
 800eb4c:	200048fc 	.word	0x200048fc
 800eb50:	200048ec 	.word	0x200048ec
 800eb54:	200048e0 	.word	0x200048e0
 800eb58:	200048f0 	.word	0x200048f0
 800eb5c:	200048f4 	.word	0x200048f4

0800eb60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800eb60:	b580      	push	{r7, lr}
 800eb62:	b086      	sub	sp, #24
 800eb64:	af00      	add	r7, sp, #0
 800eb66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800eb6c:	687b      	ldr	r3, [r7, #4]
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d04d      	beq.n	800ec0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800eb72:	2308      	movs	r3, #8
 800eb74:	425b      	negs	r3, r3
 800eb76:	697a      	ldr	r2, [r7, #20]
 800eb78:	4413      	add	r3, r2
 800eb7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800eb7c:	697b      	ldr	r3, [r7, #20]
 800eb7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800eb80:	693b      	ldr	r3, [r7, #16]
 800eb82:	685a      	ldr	r2, [r3, #4]
 800eb84:	4b24      	ldr	r3, [pc, #144]	; (800ec18 <vPortFree+0xb8>)
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	4013      	ands	r3, r2
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d10a      	bne.n	800eba4 <vPortFree+0x44>
	__asm volatile
 800eb8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb92:	f383 8811 	msr	BASEPRI, r3
 800eb96:	f3bf 8f6f 	isb	sy
 800eb9a:	f3bf 8f4f 	dsb	sy
 800eb9e:	60fb      	str	r3, [r7, #12]
}
 800eba0:	bf00      	nop
 800eba2:	e7fe      	b.n	800eba2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800eba4:	693b      	ldr	r3, [r7, #16]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	2b00      	cmp	r3, #0
 800ebaa:	d00a      	beq.n	800ebc2 <vPortFree+0x62>
	__asm volatile
 800ebac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ebb0:	f383 8811 	msr	BASEPRI, r3
 800ebb4:	f3bf 8f6f 	isb	sy
 800ebb8:	f3bf 8f4f 	dsb	sy
 800ebbc:	60bb      	str	r3, [r7, #8]
}
 800ebbe:	bf00      	nop
 800ebc0:	e7fe      	b.n	800ebc0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ebc2:	693b      	ldr	r3, [r7, #16]
 800ebc4:	685a      	ldr	r2, [r3, #4]
 800ebc6:	4b14      	ldr	r3, [pc, #80]	; (800ec18 <vPortFree+0xb8>)
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	4013      	ands	r3, r2
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d01e      	beq.n	800ec0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ebd0:	693b      	ldr	r3, [r7, #16]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d11a      	bne.n	800ec0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ebd8:	693b      	ldr	r3, [r7, #16]
 800ebda:	685a      	ldr	r2, [r3, #4]
 800ebdc:	4b0e      	ldr	r3, [pc, #56]	; (800ec18 <vPortFree+0xb8>)
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	43db      	mvns	r3, r3
 800ebe2:	401a      	ands	r2, r3
 800ebe4:	693b      	ldr	r3, [r7, #16]
 800ebe6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ebe8:	f7ff f9e2 	bl	800dfb0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ebec:	693b      	ldr	r3, [r7, #16]
 800ebee:	685a      	ldr	r2, [r3, #4]
 800ebf0:	4b0a      	ldr	r3, [pc, #40]	; (800ec1c <vPortFree+0xbc>)
 800ebf2:	681b      	ldr	r3, [r3, #0]
 800ebf4:	4413      	add	r3, r2
 800ebf6:	4a09      	ldr	r2, [pc, #36]	; (800ec1c <vPortFree+0xbc>)
 800ebf8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ebfa:	6938      	ldr	r0, [r7, #16]
 800ebfc:	f000 f874 	bl	800ece8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ec00:	4b07      	ldr	r3, [pc, #28]	; (800ec20 <vPortFree+0xc0>)
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	3301      	adds	r3, #1
 800ec06:	4a06      	ldr	r2, [pc, #24]	; (800ec20 <vPortFree+0xc0>)
 800ec08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ec0a:	f7ff f9df 	bl	800dfcc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ec0e:	bf00      	nop
 800ec10:	3718      	adds	r7, #24
 800ec12:	46bd      	mov	sp, r7
 800ec14:	bd80      	pop	{r7, pc}
 800ec16:	bf00      	nop
 800ec18:	200048fc 	.word	0x200048fc
 800ec1c:	200048ec 	.word	0x200048ec
 800ec20:	200048f8 	.word	0x200048f8

0800ec24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ec24:	b480      	push	{r7}
 800ec26:	b085      	sub	sp, #20
 800ec28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ec2a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800ec2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ec30:	4b27      	ldr	r3, [pc, #156]	; (800ecd0 <prvHeapInit+0xac>)
 800ec32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ec34:	68fb      	ldr	r3, [r7, #12]
 800ec36:	f003 0307 	and.w	r3, r3, #7
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d00c      	beq.n	800ec58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	3307      	adds	r3, #7
 800ec42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ec44:	68fb      	ldr	r3, [r7, #12]
 800ec46:	f023 0307 	bic.w	r3, r3, #7
 800ec4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ec4c:	68ba      	ldr	r2, [r7, #8]
 800ec4e:	68fb      	ldr	r3, [r7, #12]
 800ec50:	1ad3      	subs	r3, r2, r3
 800ec52:	4a1f      	ldr	r2, [pc, #124]	; (800ecd0 <prvHeapInit+0xac>)
 800ec54:	4413      	add	r3, r2
 800ec56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ec5c:	4a1d      	ldr	r2, [pc, #116]	; (800ecd4 <prvHeapInit+0xb0>)
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ec62:	4b1c      	ldr	r3, [pc, #112]	; (800ecd4 <prvHeapInit+0xb0>)
 800ec64:	2200      	movs	r2, #0
 800ec66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ec68:	687b      	ldr	r3, [r7, #4]
 800ec6a:	68ba      	ldr	r2, [r7, #8]
 800ec6c:	4413      	add	r3, r2
 800ec6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ec70:	2208      	movs	r2, #8
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	1a9b      	subs	r3, r3, r2
 800ec76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ec78:	68fb      	ldr	r3, [r7, #12]
 800ec7a:	f023 0307 	bic.w	r3, r3, #7
 800ec7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	4a15      	ldr	r2, [pc, #84]	; (800ecd8 <prvHeapInit+0xb4>)
 800ec84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ec86:	4b14      	ldr	r3, [pc, #80]	; (800ecd8 <prvHeapInit+0xb4>)
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	2200      	movs	r2, #0
 800ec8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ec8e:	4b12      	ldr	r3, [pc, #72]	; (800ecd8 <prvHeapInit+0xb4>)
 800ec90:	681b      	ldr	r3, [r3, #0]
 800ec92:	2200      	movs	r2, #0
 800ec94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ec9a:	683b      	ldr	r3, [r7, #0]
 800ec9c:	68fa      	ldr	r2, [r7, #12]
 800ec9e:	1ad2      	subs	r2, r2, r3
 800eca0:	683b      	ldr	r3, [r7, #0]
 800eca2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800eca4:	4b0c      	ldr	r3, [pc, #48]	; (800ecd8 <prvHeapInit+0xb4>)
 800eca6:	681a      	ldr	r2, [r3, #0]
 800eca8:	683b      	ldr	r3, [r7, #0]
 800ecaa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ecac:	683b      	ldr	r3, [r7, #0]
 800ecae:	685b      	ldr	r3, [r3, #4]
 800ecb0:	4a0a      	ldr	r2, [pc, #40]	; (800ecdc <prvHeapInit+0xb8>)
 800ecb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ecb4:	683b      	ldr	r3, [r7, #0]
 800ecb6:	685b      	ldr	r3, [r3, #4]
 800ecb8:	4a09      	ldr	r2, [pc, #36]	; (800ece0 <prvHeapInit+0xbc>)
 800ecba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ecbc:	4b09      	ldr	r3, [pc, #36]	; (800ece4 <prvHeapInit+0xc0>)
 800ecbe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ecc2:	601a      	str	r2, [r3, #0]
}
 800ecc4:	bf00      	nop
 800ecc6:	3714      	adds	r7, #20
 800ecc8:	46bd      	mov	sp, r7
 800ecca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecce:	4770      	bx	lr
 800ecd0:	20000ce0 	.word	0x20000ce0
 800ecd4:	200048e0 	.word	0x200048e0
 800ecd8:	200048e8 	.word	0x200048e8
 800ecdc:	200048f0 	.word	0x200048f0
 800ece0:	200048ec 	.word	0x200048ec
 800ece4:	200048fc 	.word	0x200048fc

0800ece8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ece8:	b480      	push	{r7}
 800ecea:	b085      	sub	sp, #20
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ecf0:	4b28      	ldr	r3, [pc, #160]	; (800ed94 <prvInsertBlockIntoFreeList+0xac>)
 800ecf2:	60fb      	str	r3, [r7, #12]
 800ecf4:	e002      	b.n	800ecfc <prvInsertBlockIntoFreeList+0x14>
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	60fb      	str	r3, [r7, #12]
 800ecfc:	68fb      	ldr	r3, [r7, #12]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	687a      	ldr	r2, [r7, #4]
 800ed02:	429a      	cmp	r2, r3
 800ed04:	d8f7      	bhi.n	800ecf6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ed06:	68fb      	ldr	r3, [r7, #12]
 800ed08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	685b      	ldr	r3, [r3, #4]
 800ed0e:	68ba      	ldr	r2, [r7, #8]
 800ed10:	4413      	add	r3, r2
 800ed12:	687a      	ldr	r2, [r7, #4]
 800ed14:	429a      	cmp	r2, r3
 800ed16:	d108      	bne.n	800ed2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	685a      	ldr	r2, [r3, #4]
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	685b      	ldr	r3, [r3, #4]
 800ed20:	441a      	add	r2, r3
 800ed22:	68fb      	ldr	r3, [r7, #12]
 800ed24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	685b      	ldr	r3, [r3, #4]
 800ed32:	68ba      	ldr	r2, [r7, #8]
 800ed34:	441a      	add	r2, r3
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	429a      	cmp	r2, r3
 800ed3c:	d118      	bne.n	800ed70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ed3e:	68fb      	ldr	r3, [r7, #12]
 800ed40:	681a      	ldr	r2, [r3, #0]
 800ed42:	4b15      	ldr	r3, [pc, #84]	; (800ed98 <prvInsertBlockIntoFreeList+0xb0>)
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	429a      	cmp	r2, r3
 800ed48:	d00d      	beq.n	800ed66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	685a      	ldr	r2, [r3, #4]
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	685b      	ldr	r3, [r3, #4]
 800ed54:	441a      	add	r2, r3
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	681a      	ldr	r2, [r3, #0]
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	601a      	str	r2, [r3, #0]
 800ed64:	e008      	b.n	800ed78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ed66:	4b0c      	ldr	r3, [pc, #48]	; (800ed98 <prvInsertBlockIntoFreeList+0xb0>)
 800ed68:	681a      	ldr	r2, [r3, #0]
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	601a      	str	r2, [r3, #0]
 800ed6e:	e003      	b.n	800ed78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ed70:	68fb      	ldr	r3, [r7, #12]
 800ed72:	681a      	ldr	r2, [r3, #0]
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ed78:	68fa      	ldr	r2, [r7, #12]
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	429a      	cmp	r2, r3
 800ed7e:	d002      	beq.n	800ed86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ed80:	68fb      	ldr	r3, [r7, #12]
 800ed82:	687a      	ldr	r2, [r7, #4]
 800ed84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ed86:	bf00      	nop
 800ed88:	3714      	adds	r7, #20
 800ed8a:	46bd      	mov	sp, r7
 800ed8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed90:	4770      	bx	lr
 800ed92:	bf00      	nop
 800ed94:	200048e0 	.word	0x200048e0
 800ed98:	200048e8 	.word	0x200048e8

0800ed9c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800eda0:	2200      	movs	r2, #0
 800eda2:	4912      	ldr	r1, [pc, #72]	; (800edec <MX_USB_DEVICE_Init+0x50>)
 800eda4:	4812      	ldr	r0, [pc, #72]	; (800edf0 <MX_USB_DEVICE_Init+0x54>)
 800eda6:	f7fd fab1 	bl	800c30c <USBD_Init>
 800edaa:	4603      	mov	r3, r0
 800edac:	2b00      	cmp	r3, #0
 800edae:	d001      	beq.n	800edb4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800edb0:	f7f4 f8e2 	bl	8002f78 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800edb4:	490f      	ldr	r1, [pc, #60]	; (800edf4 <MX_USB_DEVICE_Init+0x58>)
 800edb6:	480e      	ldr	r0, [pc, #56]	; (800edf0 <MX_USB_DEVICE_Init+0x54>)
 800edb8:	f7fd fad8 	bl	800c36c <USBD_RegisterClass>
 800edbc:	4603      	mov	r3, r0
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d001      	beq.n	800edc6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800edc2:	f7f4 f8d9 	bl	8002f78 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800edc6:	490c      	ldr	r1, [pc, #48]	; (800edf8 <MX_USB_DEVICE_Init+0x5c>)
 800edc8:	4809      	ldr	r0, [pc, #36]	; (800edf0 <MX_USB_DEVICE_Init+0x54>)
 800edca:	f7fd f9cf 	bl	800c16c <USBD_CDC_RegisterInterface>
 800edce:	4603      	mov	r3, r0
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d001      	beq.n	800edd8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800edd4:	f7f4 f8d0 	bl	8002f78 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800edd8:	4805      	ldr	r0, [pc, #20]	; (800edf0 <MX_USB_DEVICE_Init+0x54>)
 800edda:	f7fd fafd 	bl	800c3d8 <USBD_Start>
 800edde:	4603      	mov	r3, r0
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d001      	beq.n	800ede8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ede4:	f7f4 f8c8 	bl	8002f78 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ede8:	bf00      	nop
 800edea:	bd80      	pop	{r7, pc}
 800edec:	20000100 	.word	0x20000100
 800edf0:	20004900 	.word	0x20004900
 800edf4:	20000068 	.word	0x20000068
 800edf8:	200000ec 	.word	0x200000ec

0800edfc <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800edfc:	b580      	push	{r7, lr}
 800edfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ee00:	2200      	movs	r2, #0
 800ee02:	4905      	ldr	r1, [pc, #20]	; (800ee18 <CDC_Init_FS+0x1c>)
 800ee04:	4805      	ldr	r0, [pc, #20]	; (800ee1c <CDC_Init_FS+0x20>)
 800ee06:	f7fd f9cb 	bl	800c1a0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ee0a:	4905      	ldr	r1, [pc, #20]	; (800ee20 <CDC_Init_FS+0x24>)
 800ee0c:	4803      	ldr	r0, [pc, #12]	; (800ee1c <CDC_Init_FS+0x20>)
 800ee0e:	f7fd f9e9 	bl	800c1e4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ee12:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ee14:	4618      	mov	r0, r3
 800ee16:	bd80      	pop	{r7, pc}
 800ee18:	200053dc 	.word	0x200053dc
 800ee1c:	20004900 	.word	0x20004900
 800ee20:	20004bdc 	.word	0x20004bdc

0800ee24 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ee24:	b480      	push	{r7}
 800ee26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ee28:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	46bd      	mov	sp, r7
 800ee2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee32:	4770      	bx	lr

0800ee34 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ee34:	b480      	push	{r7}
 800ee36:	b083      	sub	sp, #12
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	4603      	mov	r3, r0
 800ee3c:	6039      	str	r1, [r7, #0]
 800ee3e:	71fb      	strb	r3, [r7, #7]
 800ee40:	4613      	mov	r3, r2
 800ee42:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ee44:	79fb      	ldrb	r3, [r7, #7]
 800ee46:	2b23      	cmp	r3, #35	; 0x23
 800ee48:	d84a      	bhi.n	800eee0 <CDC_Control_FS+0xac>
 800ee4a:	a201      	add	r2, pc, #4	; (adr r2, 800ee50 <CDC_Control_FS+0x1c>)
 800ee4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee50:	0800eee1 	.word	0x0800eee1
 800ee54:	0800eee1 	.word	0x0800eee1
 800ee58:	0800eee1 	.word	0x0800eee1
 800ee5c:	0800eee1 	.word	0x0800eee1
 800ee60:	0800eee1 	.word	0x0800eee1
 800ee64:	0800eee1 	.word	0x0800eee1
 800ee68:	0800eee1 	.word	0x0800eee1
 800ee6c:	0800eee1 	.word	0x0800eee1
 800ee70:	0800eee1 	.word	0x0800eee1
 800ee74:	0800eee1 	.word	0x0800eee1
 800ee78:	0800eee1 	.word	0x0800eee1
 800ee7c:	0800eee1 	.word	0x0800eee1
 800ee80:	0800eee1 	.word	0x0800eee1
 800ee84:	0800eee1 	.word	0x0800eee1
 800ee88:	0800eee1 	.word	0x0800eee1
 800ee8c:	0800eee1 	.word	0x0800eee1
 800ee90:	0800eee1 	.word	0x0800eee1
 800ee94:	0800eee1 	.word	0x0800eee1
 800ee98:	0800eee1 	.word	0x0800eee1
 800ee9c:	0800eee1 	.word	0x0800eee1
 800eea0:	0800eee1 	.word	0x0800eee1
 800eea4:	0800eee1 	.word	0x0800eee1
 800eea8:	0800eee1 	.word	0x0800eee1
 800eeac:	0800eee1 	.word	0x0800eee1
 800eeb0:	0800eee1 	.word	0x0800eee1
 800eeb4:	0800eee1 	.word	0x0800eee1
 800eeb8:	0800eee1 	.word	0x0800eee1
 800eebc:	0800eee1 	.word	0x0800eee1
 800eec0:	0800eee1 	.word	0x0800eee1
 800eec4:	0800eee1 	.word	0x0800eee1
 800eec8:	0800eee1 	.word	0x0800eee1
 800eecc:	0800eee1 	.word	0x0800eee1
 800eed0:	0800eee1 	.word	0x0800eee1
 800eed4:	0800eee1 	.word	0x0800eee1
 800eed8:	0800eee1 	.word	0x0800eee1
 800eedc:	0800eee1 	.word	0x0800eee1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800eee0:	bf00      	nop
  }

  return (USBD_OK);
 800eee2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800eee4:	4618      	mov	r0, r3
 800eee6:	370c      	adds	r7, #12
 800eee8:	46bd      	mov	sp, r7
 800eeea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeee:	4770      	bx	lr

0800eef0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800eef0:	b580      	push	{r7, lr}
 800eef2:	b084      	sub	sp, #16
 800eef4:	af00      	add	r7, sp, #0
 800eef6:	6078      	str	r0, [r7, #4]
 800eef8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800eefa:	6879      	ldr	r1, [r7, #4]
 800eefc:	480e      	ldr	r0, [pc, #56]	; (800ef38 <CDC_Receive_FS+0x48>)
 800eefe:	f7fd f971 	bl	800c1e4 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ef02:	480d      	ldr	r0, [pc, #52]	; (800ef38 <CDC_Receive_FS+0x48>)
 800ef04:	f7fd f9cc 	bl	800c2a0 <USBD_CDC_ReceivePacket>

	lastReceiveTime = HAL_GetTick(); //failsafe
 800ef08:	f7f4 fe2e 	bl	8003b68 <HAL_GetTick>
 800ef0c:	4603      	mov	r3, r0
 800ef0e:	4a0b      	ldr	r2, [pc, #44]	; (800ef3c <CDC_Receive_FS+0x4c>)
 800ef10:	6013      	str	r3, [r2, #0]

	uint8_t len = (uint8_t) *Len;
 800ef12:	683b      	ldr	r3, [r7, #0]
 800ef14:	681b      	ldr	r3, [r3, #0]
 800ef16:	73fb      	strb	r3, [r7, #15]
	memset(serialBuffer, '\0', 16);
 800ef18:	2210      	movs	r2, #16
 800ef1a:	2100      	movs	r1, #0
 800ef1c:	4808      	ldr	r0, [pc, #32]	; (800ef40 <CDC_Receive_FS+0x50>)
 800ef1e:	f000 fc6d 	bl	800f7fc <memset>
	memcpy(serialBuffer, Buf, len);
 800ef22:	7bfb      	ldrb	r3, [r7, #15]
 800ef24:	461a      	mov	r2, r3
 800ef26:	6879      	ldr	r1, [r7, #4]
 800ef28:	4805      	ldr	r0, [pc, #20]	; (800ef40 <CDC_Receive_FS+0x50>)
 800ef2a:	f000 fc93 	bl	800f854 <memcpy>
  return (USBD_OK);
 800ef2e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ef30:	4618      	mov	r0, r3
 800ef32:	3710      	adds	r7, #16
 800ef34:	46bd      	mov	sp, r7
 800ef36:	bd80      	pop	{r7, pc}
 800ef38:	20004900 	.word	0x20004900
 800ef3c:	20000a0c 	.word	0x20000a0c
 800ef40:	20000938 	.word	0x20000938

0800ef44 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ef44:	b580      	push	{r7, lr}
 800ef46:	b084      	sub	sp, #16
 800ef48:	af00      	add	r7, sp, #0
 800ef4a:	6078      	str	r0, [r7, #4]
 800ef4c:	460b      	mov	r3, r1
 800ef4e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ef50:	2300      	movs	r3, #0
 800ef52:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ef54:	4b0d      	ldr	r3, [pc, #52]	; (800ef8c <CDC_Transmit_FS+0x48>)
 800ef56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ef5a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ef5c:	68bb      	ldr	r3, [r7, #8]
 800ef5e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d001      	beq.n	800ef6a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ef66:	2301      	movs	r3, #1
 800ef68:	e00b      	b.n	800ef82 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ef6a:	887b      	ldrh	r3, [r7, #2]
 800ef6c:	461a      	mov	r2, r3
 800ef6e:	6879      	ldr	r1, [r7, #4]
 800ef70:	4806      	ldr	r0, [pc, #24]	; (800ef8c <CDC_Transmit_FS+0x48>)
 800ef72:	f7fd f915 	bl	800c1a0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ef76:	4805      	ldr	r0, [pc, #20]	; (800ef8c <CDC_Transmit_FS+0x48>)
 800ef78:	f7fd f952 	bl	800c220 <USBD_CDC_TransmitPacket>
 800ef7c:	4603      	mov	r3, r0
 800ef7e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ef80:	7bfb      	ldrb	r3, [r7, #15]
}
 800ef82:	4618      	mov	r0, r3
 800ef84:	3710      	adds	r7, #16
 800ef86:	46bd      	mov	sp, r7
 800ef88:	bd80      	pop	{r7, pc}
 800ef8a:	bf00      	nop
 800ef8c:	20004900 	.word	0x20004900

0800ef90 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ef90:	b480      	push	{r7}
 800ef92:	b087      	sub	sp, #28
 800ef94:	af00      	add	r7, sp, #0
 800ef96:	60f8      	str	r0, [r7, #12]
 800ef98:	60b9      	str	r1, [r7, #8]
 800ef9a:	4613      	mov	r3, r2
 800ef9c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ef9e:	2300      	movs	r3, #0
 800efa0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800efa2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800efa6:	4618      	mov	r0, r3
 800efa8:	371c      	adds	r7, #28
 800efaa:	46bd      	mov	sp, r7
 800efac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb0:	4770      	bx	lr
	...

0800efb4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800efb4:	b480      	push	{r7}
 800efb6:	b083      	sub	sp, #12
 800efb8:	af00      	add	r7, sp, #0
 800efba:	4603      	mov	r3, r0
 800efbc:	6039      	str	r1, [r7, #0]
 800efbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800efc0:	683b      	ldr	r3, [r7, #0]
 800efc2:	2212      	movs	r2, #18
 800efc4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800efc6:	4b03      	ldr	r3, [pc, #12]	; (800efd4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800efc8:	4618      	mov	r0, r3
 800efca:	370c      	adds	r7, #12
 800efcc:	46bd      	mov	sp, r7
 800efce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd2:	4770      	bx	lr
 800efd4:	2000011c 	.word	0x2000011c

0800efd8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800efd8:	b480      	push	{r7}
 800efda:	b083      	sub	sp, #12
 800efdc:	af00      	add	r7, sp, #0
 800efde:	4603      	mov	r3, r0
 800efe0:	6039      	str	r1, [r7, #0]
 800efe2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800efe4:	683b      	ldr	r3, [r7, #0]
 800efe6:	2204      	movs	r2, #4
 800efe8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800efea:	4b03      	ldr	r3, [pc, #12]	; (800eff8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800efec:	4618      	mov	r0, r3
 800efee:	370c      	adds	r7, #12
 800eff0:	46bd      	mov	sp, r7
 800eff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff6:	4770      	bx	lr
 800eff8:	20000130 	.word	0x20000130

0800effc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800effc:	b580      	push	{r7, lr}
 800effe:	b082      	sub	sp, #8
 800f000:	af00      	add	r7, sp, #0
 800f002:	4603      	mov	r3, r0
 800f004:	6039      	str	r1, [r7, #0]
 800f006:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f008:	79fb      	ldrb	r3, [r7, #7]
 800f00a:	2b00      	cmp	r3, #0
 800f00c:	d105      	bne.n	800f01a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f00e:	683a      	ldr	r2, [r7, #0]
 800f010:	4907      	ldr	r1, [pc, #28]	; (800f030 <USBD_FS_ProductStrDescriptor+0x34>)
 800f012:	4808      	ldr	r0, [pc, #32]	; (800f034 <USBD_FS_ProductStrDescriptor+0x38>)
 800f014:	f7fe fb92 	bl	800d73c <USBD_GetString>
 800f018:	e004      	b.n	800f024 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f01a:	683a      	ldr	r2, [r7, #0]
 800f01c:	4904      	ldr	r1, [pc, #16]	; (800f030 <USBD_FS_ProductStrDescriptor+0x34>)
 800f01e:	4805      	ldr	r0, [pc, #20]	; (800f034 <USBD_FS_ProductStrDescriptor+0x38>)
 800f020:	f7fe fb8c 	bl	800d73c <USBD_GetString>
  }
  return USBD_StrDesc;
 800f024:	4b02      	ldr	r3, [pc, #8]	; (800f030 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f026:	4618      	mov	r0, r3
 800f028:	3708      	adds	r7, #8
 800f02a:	46bd      	mov	sp, r7
 800f02c:	bd80      	pop	{r7, pc}
 800f02e:	bf00      	nop
 800f030:	20005bdc 	.word	0x20005bdc
 800f034:	0800fab0 	.word	0x0800fab0

0800f038 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f038:	b580      	push	{r7, lr}
 800f03a:	b082      	sub	sp, #8
 800f03c:	af00      	add	r7, sp, #0
 800f03e:	4603      	mov	r3, r0
 800f040:	6039      	str	r1, [r7, #0]
 800f042:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f044:	683a      	ldr	r2, [r7, #0]
 800f046:	4904      	ldr	r1, [pc, #16]	; (800f058 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f048:	4804      	ldr	r0, [pc, #16]	; (800f05c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f04a:	f7fe fb77 	bl	800d73c <USBD_GetString>
  return USBD_StrDesc;
 800f04e:	4b02      	ldr	r3, [pc, #8]	; (800f058 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f050:	4618      	mov	r0, r3
 800f052:	3708      	adds	r7, #8
 800f054:	46bd      	mov	sp, r7
 800f056:	bd80      	pop	{r7, pc}
 800f058:	20005bdc 	.word	0x20005bdc
 800f05c:	0800fac8 	.word	0x0800fac8

0800f060 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f060:	b580      	push	{r7, lr}
 800f062:	b082      	sub	sp, #8
 800f064:	af00      	add	r7, sp, #0
 800f066:	4603      	mov	r3, r0
 800f068:	6039      	str	r1, [r7, #0]
 800f06a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f06c:	683b      	ldr	r3, [r7, #0]
 800f06e:	221a      	movs	r2, #26
 800f070:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f072:	f000 f843 	bl	800f0fc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800f076:	4b02      	ldr	r3, [pc, #8]	; (800f080 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800f078:	4618      	mov	r0, r3
 800f07a:	3708      	adds	r7, #8
 800f07c:	46bd      	mov	sp, r7
 800f07e:	bd80      	pop	{r7, pc}
 800f080:	20000134 	.word	0x20000134

0800f084 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f084:	b580      	push	{r7, lr}
 800f086:	b082      	sub	sp, #8
 800f088:	af00      	add	r7, sp, #0
 800f08a:	4603      	mov	r3, r0
 800f08c:	6039      	str	r1, [r7, #0]
 800f08e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800f090:	79fb      	ldrb	r3, [r7, #7]
 800f092:	2b00      	cmp	r3, #0
 800f094:	d105      	bne.n	800f0a2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f096:	683a      	ldr	r2, [r7, #0]
 800f098:	4907      	ldr	r1, [pc, #28]	; (800f0b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f09a:	4808      	ldr	r0, [pc, #32]	; (800f0bc <USBD_FS_ConfigStrDescriptor+0x38>)
 800f09c:	f7fe fb4e 	bl	800d73c <USBD_GetString>
 800f0a0:	e004      	b.n	800f0ac <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800f0a2:	683a      	ldr	r2, [r7, #0]
 800f0a4:	4904      	ldr	r1, [pc, #16]	; (800f0b8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800f0a6:	4805      	ldr	r0, [pc, #20]	; (800f0bc <USBD_FS_ConfigStrDescriptor+0x38>)
 800f0a8:	f7fe fb48 	bl	800d73c <USBD_GetString>
  }
  return USBD_StrDesc;
 800f0ac:	4b02      	ldr	r3, [pc, #8]	; (800f0b8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800f0ae:	4618      	mov	r0, r3
 800f0b0:	3708      	adds	r7, #8
 800f0b2:	46bd      	mov	sp, r7
 800f0b4:	bd80      	pop	{r7, pc}
 800f0b6:	bf00      	nop
 800f0b8:	20005bdc 	.word	0x20005bdc
 800f0bc:	0800fadc 	.word	0x0800fadc

0800f0c0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f0c0:	b580      	push	{r7, lr}
 800f0c2:	b082      	sub	sp, #8
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	4603      	mov	r3, r0
 800f0c8:	6039      	str	r1, [r7, #0]
 800f0ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f0cc:	79fb      	ldrb	r3, [r7, #7]
 800f0ce:	2b00      	cmp	r3, #0
 800f0d0:	d105      	bne.n	800f0de <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f0d2:	683a      	ldr	r2, [r7, #0]
 800f0d4:	4907      	ldr	r1, [pc, #28]	; (800f0f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f0d6:	4808      	ldr	r0, [pc, #32]	; (800f0f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f0d8:	f7fe fb30 	bl	800d73c <USBD_GetString>
 800f0dc:	e004      	b.n	800f0e8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800f0de:	683a      	ldr	r2, [r7, #0]
 800f0e0:	4904      	ldr	r1, [pc, #16]	; (800f0f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800f0e2:	4805      	ldr	r0, [pc, #20]	; (800f0f8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800f0e4:	f7fe fb2a 	bl	800d73c <USBD_GetString>
  }
  return USBD_StrDesc;
 800f0e8:	4b02      	ldr	r3, [pc, #8]	; (800f0f4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	3708      	adds	r7, #8
 800f0ee:	46bd      	mov	sp, r7
 800f0f0:	bd80      	pop	{r7, pc}
 800f0f2:	bf00      	nop
 800f0f4:	20005bdc 	.word	0x20005bdc
 800f0f8:	0800fae8 	.word	0x0800fae8

0800f0fc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b084      	sub	sp, #16
 800f100:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f102:	4b0f      	ldr	r3, [pc, #60]	; (800f140 <Get_SerialNum+0x44>)
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f108:	4b0e      	ldr	r3, [pc, #56]	; (800f144 <Get_SerialNum+0x48>)
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f10e:	4b0e      	ldr	r3, [pc, #56]	; (800f148 <Get_SerialNum+0x4c>)
 800f110:	681b      	ldr	r3, [r3, #0]
 800f112:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f114:	68fa      	ldr	r2, [r7, #12]
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	4413      	add	r3, r2
 800f11a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d009      	beq.n	800f136 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f122:	2208      	movs	r2, #8
 800f124:	4909      	ldr	r1, [pc, #36]	; (800f14c <Get_SerialNum+0x50>)
 800f126:	68f8      	ldr	r0, [r7, #12]
 800f128:	f000 f814 	bl	800f154 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f12c:	2204      	movs	r2, #4
 800f12e:	4908      	ldr	r1, [pc, #32]	; (800f150 <Get_SerialNum+0x54>)
 800f130:	68b8      	ldr	r0, [r7, #8]
 800f132:	f000 f80f 	bl	800f154 <IntToUnicode>
  }
}
 800f136:	bf00      	nop
 800f138:	3710      	adds	r7, #16
 800f13a:	46bd      	mov	sp, r7
 800f13c:	bd80      	pop	{r7, pc}
 800f13e:	bf00      	nop
 800f140:	1fff7a10 	.word	0x1fff7a10
 800f144:	1fff7a14 	.word	0x1fff7a14
 800f148:	1fff7a18 	.word	0x1fff7a18
 800f14c:	20000136 	.word	0x20000136
 800f150:	20000146 	.word	0x20000146

0800f154 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f154:	b480      	push	{r7}
 800f156:	b087      	sub	sp, #28
 800f158:	af00      	add	r7, sp, #0
 800f15a:	60f8      	str	r0, [r7, #12]
 800f15c:	60b9      	str	r1, [r7, #8]
 800f15e:	4613      	mov	r3, r2
 800f160:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f162:	2300      	movs	r3, #0
 800f164:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f166:	2300      	movs	r3, #0
 800f168:	75fb      	strb	r3, [r7, #23]
 800f16a:	e027      	b.n	800f1bc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	0f1b      	lsrs	r3, r3, #28
 800f170:	2b09      	cmp	r3, #9
 800f172:	d80b      	bhi.n	800f18c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	0f1b      	lsrs	r3, r3, #28
 800f178:	b2da      	uxtb	r2, r3
 800f17a:	7dfb      	ldrb	r3, [r7, #23]
 800f17c:	005b      	lsls	r3, r3, #1
 800f17e:	4619      	mov	r1, r3
 800f180:	68bb      	ldr	r3, [r7, #8]
 800f182:	440b      	add	r3, r1
 800f184:	3230      	adds	r2, #48	; 0x30
 800f186:	b2d2      	uxtb	r2, r2
 800f188:	701a      	strb	r2, [r3, #0]
 800f18a:	e00a      	b.n	800f1a2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f18c:	68fb      	ldr	r3, [r7, #12]
 800f18e:	0f1b      	lsrs	r3, r3, #28
 800f190:	b2da      	uxtb	r2, r3
 800f192:	7dfb      	ldrb	r3, [r7, #23]
 800f194:	005b      	lsls	r3, r3, #1
 800f196:	4619      	mov	r1, r3
 800f198:	68bb      	ldr	r3, [r7, #8]
 800f19a:	440b      	add	r3, r1
 800f19c:	3237      	adds	r2, #55	; 0x37
 800f19e:	b2d2      	uxtb	r2, r2
 800f1a0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	011b      	lsls	r3, r3, #4
 800f1a6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f1a8:	7dfb      	ldrb	r3, [r7, #23]
 800f1aa:	005b      	lsls	r3, r3, #1
 800f1ac:	3301      	adds	r3, #1
 800f1ae:	68ba      	ldr	r2, [r7, #8]
 800f1b0:	4413      	add	r3, r2
 800f1b2:	2200      	movs	r2, #0
 800f1b4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f1b6:	7dfb      	ldrb	r3, [r7, #23]
 800f1b8:	3301      	adds	r3, #1
 800f1ba:	75fb      	strb	r3, [r7, #23]
 800f1bc:	7dfa      	ldrb	r2, [r7, #23]
 800f1be:	79fb      	ldrb	r3, [r7, #7]
 800f1c0:	429a      	cmp	r2, r3
 800f1c2:	d3d3      	bcc.n	800f16c <IntToUnicode+0x18>
  }
}
 800f1c4:	bf00      	nop
 800f1c6:	bf00      	nop
 800f1c8:	371c      	adds	r7, #28
 800f1ca:	46bd      	mov	sp, r7
 800f1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d0:	4770      	bx	lr
	...

0800f1d4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f1d4:	b580      	push	{r7, lr}
 800f1d6:	b08a      	sub	sp, #40	; 0x28
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f1dc:	f107 0314 	add.w	r3, r7, #20
 800f1e0:	2200      	movs	r2, #0
 800f1e2:	601a      	str	r2, [r3, #0]
 800f1e4:	605a      	str	r2, [r3, #4]
 800f1e6:	609a      	str	r2, [r3, #8]
 800f1e8:	60da      	str	r2, [r3, #12]
 800f1ea:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800f1f4:	d13a      	bne.n	800f26c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f1f6:	2300      	movs	r3, #0
 800f1f8:	613b      	str	r3, [r7, #16]
 800f1fa:	4b1e      	ldr	r3, [pc, #120]	; (800f274 <HAL_PCD_MspInit+0xa0>)
 800f1fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1fe:	4a1d      	ldr	r2, [pc, #116]	; (800f274 <HAL_PCD_MspInit+0xa0>)
 800f200:	f043 0301 	orr.w	r3, r3, #1
 800f204:	6313      	str	r3, [r2, #48]	; 0x30
 800f206:	4b1b      	ldr	r3, [pc, #108]	; (800f274 <HAL_PCD_MspInit+0xa0>)
 800f208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f20a:	f003 0301 	and.w	r3, r3, #1
 800f20e:	613b      	str	r3, [r7, #16]
 800f210:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f212:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800f216:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f218:	2302      	movs	r3, #2
 800f21a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f21c:	2300      	movs	r3, #0
 800f21e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f220:	2303      	movs	r3, #3
 800f222:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f224:	230a      	movs	r3, #10
 800f226:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f228:	f107 0314 	add.w	r3, r7, #20
 800f22c:	4619      	mov	r1, r3
 800f22e:	4812      	ldr	r0, [pc, #72]	; (800f278 <HAL_PCD_MspInit+0xa4>)
 800f230:	f7f5 fdc0 	bl	8004db4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f234:	4b0f      	ldr	r3, [pc, #60]	; (800f274 <HAL_PCD_MspInit+0xa0>)
 800f236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f238:	4a0e      	ldr	r2, [pc, #56]	; (800f274 <HAL_PCD_MspInit+0xa0>)
 800f23a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f23e:	6353      	str	r3, [r2, #52]	; 0x34
 800f240:	2300      	movs	r3, #0
 800f242:	60fb      	str	r3, [r7, #12]
 800f244:	4b0b      	ldr	r3, [pc, #44]	; (800f274 <HAL_PCD_MspInit+0xa0>)
 800f246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f248:	4a0a      	ldr	r2, [pc, #40]	; (800f274 <HAL_PCD_MspInit+0xa0>)
 800f24a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800f24e:	6453      	str	r3, [r2, #68]	; 0x44
 800f250:	4b08      	ldr	r3, [pc, #32]	; (800f274 <HAL_PCD_MspInit+0xa0>)
 800f252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f254:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800f258:	60fb      	str	r3, [r7, #12]
 800f25a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 800f25c:	2200      	movs	r2, #0
 800f25e:	2105      	movs	r1, #5
 800f260:	2043      	movs	r0, #67	; 0x43
 800f262:	f7f5 f97b 	bl	800455c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f266:	2043      	movs	r0, #67	; 0x43
 800f268:	f7f5 f994 	bl	8004594 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f26c:	bf00      	nop
 800f26e:	3728      	adds	r7, #40	; 0x28
 800f270:	46bd      	mov	sp, r7
 800f272:	bd80      	pop	{r7, pc}
 800f274:	40023800 	.word	0x40023800
 800f278:	40020000 	.word	0x40020000

0800f27c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b082      	sub	sp, #8
 800f280:	af00      	add	r7, sp, #0
 800f282:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	; 0x4e0
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	f203 439c 	addw	r3, r3, #1180	; 0x49c
 800f290:	4619      	mov	r1, r3
 800f292:	4610      	mov	r0, r2
 800f294:	f7fd f8ed 	bl	800c472 <USBD_LL_SetupStage>
}
 800f298:	bf00      	nop
 800f29a:	3708      	adds	r7, #8
 800f29c:	46bd      	mov	sp, r7
 800f29e:	bd80      	pop	{r7, pc}

0800f2a0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f2a0:	b580      	push	{r7, lr}
 800f2a2:	b082      	sub	sp, #8
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]
 800f2a8:	460b      	mov	r3, r1
 800f2aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800f2b2:	78fa      	ldrb	r2, [r7, #3]
 800f2b4:	6879      	ldr	r1, [r7, #4]
 800f2b6:	4613      	mov	r3, r2
 800f2b8:	00db      	lsls	r3, r3, #3
 800f2ba:	4413      	add	r3, r2
 800f2bc:	009b      	lsls	r3, r3, #2
 800f2be:	440b      	add	r3, r1
 800f2c0:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800f2c4:	681a      	ldr	r2, [r3, #0]
 800f2c6:	78fb      	ldrb	r3, [r7, #3]
 800f2c8:	4619      	mov	r1, r3
 800f2ca:	f7fd f927 	bl	800c51c <USBD_LL_DataOutStage>
}
 800f2ce:	bf00      	nop
 800f2d0:	3708      	adds	r7, #8
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	bd80      	pop	{r7, pc}

0800f2d6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f2d6:	b580      	push	{r7, lr}
 800f2d8:	b082      	sub	sp, #8
 800f2da:	af00      	add	r7, sp, #0
 800f2dc:	6078      	str	r0, [r7, #4]
 800f2de:	460b      	mov	r3, r1
 800f2e0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	; 0x4e0
 800f2e8:	78fa      	ldrb	r2, [r7, #3]
 800f2ea:	6879      	ldr	r1, [r7, #4]
 800f2ec:	4613      	mov	r3, r2
 800f2ee:	00db      	lsls	r3, r3, #3
 800f2f0:	4413      	add	r3, r2
 800f2f2:	009b      	lsls	r3, r3, #2
 800f2f4:	440b      	add	r3, r1
 800f2f6:	3320      	adds	r3, #32
 800f2f8:	681a      	ldr	r2, [r3, #0]
 800f2fa:	78fb      	ldrb	r3, [r7, #3]
 800f2fc:	4619      	mov	r1, r3
 800f2fe:	f7fd f9c0 	bl	800c682 <USBD_LL_DataInStage>
}
 800f302:	bf00      	nop
 800f304:	3708      	adds	r7, #8
 800f306:	46bd      	mov	sp, r7
 800f308:	bd80      	pop	{r7, pc}

0800f30a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f30a:	b580      	push	{r7, lr}
 800f30c:	b082      	sub	sp, #8
 800f30e:	af00      	add	r7, sp, #0
 800f310:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f318:	4618      	mov	r0, r3
 800f31a:	f7fd fafa 	bl	800c912 <USBD_LL_SOF>
}
 800f31e:	bf00      	nop
 800f320:	3708      	adds	r7, #8
 800f322:	46bd      	mov	sp, r7
 800f324:	bd80      	pop	{r7, pc}

0800f326 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f326:	b580      	push	{r7, lr}
 800f328:	b084      	sub	sp, #16
 800f32a:	af00      	add	r7, sp, #0
 800f32c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f32e:	2301      	movs	r3, #1
 800f330:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	79db      	ldrb	r3, [r3, #7]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d102      	bne.n	800f340 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800f33a:	2300      	movs	r3, #0
 800f33c:	73fb      	strb	r3, [r7, #15]
 800f33e:	e008      	b.n	800f352 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	79db      	ldrb	r3, [r3, #7]
 800f344:	2b02      	cmp	r3, #2
 800f346:	d102      	bne.n	800f34e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800f348:	2301      	movs	r3, #1
 800f34a:	73fb      	strb	r3, [r7, #15]
 800f34c:	e001      	b.n	800f352 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800f34e:	f7f3 fe13 	bl	8002f78 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f358:	7bfa      	ldrb	r2, [r7, #15]
 800f35a:	4611      	mov	r1, r2
 800f35c:	4618      	mov	r0, r3
 800f35e:	f7fd fa94 	bl	800c88a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f368:	4618      	mov	r0, r3
 800f36a:	f7fd fa3c 	bl	800c7e6 <USBD_LL_Reset>
}
 800f36e:	bf00      	nop
 800f370:	3710      	adds	r7, #16
 800f372:	46bd      	mov	sp, r7
 800f374:	bd80      	pop	{r7, pc}
	...

0800f378 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f378:	b580      	push	{r7, lr}
 800f37a:	b082      	sub	sp, #8
 800f37c:	af00      	add	r7, sp, #0
 800f37e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f386:	4618      	mov	r0, r3
 800f388:	f7fd fa8f 	bl	800c8aa <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	681b      	ldr	r3, [r3, #0]
 800f390:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	687a      	ldr	r2, [r7, #4]
 800f398:	6812      	ldr	r2, [r2, #0]
 800f39a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f39e:	f043 0301 	orr.w	r3, r3, #1
 800f3a2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	7adb      	ldrb	r3, [r3, #11]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d005      	beq.n	800f3b8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f3ac:	4b04      	ldr	r3, [pc, #16]	; (800f3c0 <HAL_PCD_SuspendCallback+0x48>)
 800f3ae:	691b      	ldr	r3, [r3, #16]
 800f3b0:	4a03      	ldr	r2, [pc, #12]	; (800f3c0 <HAL_PCD_SuspendCallback+0x48>)
 800f3b2:	f043 0306 	orr.w	r3, r3, #6
 800f3b6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f3b8:	bf00      	nop
 800f3ba:	3708      	adds	r7, #8
 800f3bc:	46bd      	mov	sp, r7
 800f3be:	bd80      	pop	{r7, pc}
 800f3c0:	e000ed00 	.word	0xe000ed00

0800f3c4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	b082      	sub	sp, #8
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f3cc:	687b      	ldr	r3, [r7, #4]
 800f3ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	f7fd fa85 	bl	800c8e2 <USBD_LL_Resume>
}
 800f3d8:	bf00      	nop
 800f3da:	3708      	adds	r7, #8
 800f3dc:	46bd      	mov	sp, r7
 800f3de:	bd80      	pop	{r7, pc}

0800f3e0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	b082      	sub	sp, #8
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	6078      	str	r0, [r7, #4]
 800f3e8:	460b      	mov	r3, r1
 800f3ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f3f2:	78fa      	ldrb	r2, [r7, #3]
 800f3f4:	4611      	mov	r1, r2
 800f3f6:	4618      	mov	r0, r3
 800f3f8:	f7fd fadd 	bl	800c9b6 <USBD_LL_IsoOUTIncomplete>
}
 800f3fc:	bf00      	nop
 800f3fe:	3708      	adds	r7, #8
 800f400:	46bd      	mov	sp, r7
 800f402:	bd80      	pop	{r7, pc}

0800f404 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f404:	b580      	push	{r7, lr}
 800f406:	b082      	sub	sp, #8
 800f408:	af00      	add	r7, sp, #0
 800f40a:	6078      	str	r0, [r7, #4]
 800f40c:	460b      	mov	r3, r1
 800f40e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f416:	78fa      	ldrb	r2, [r7, #3]
 800f418:	4611      	mov	r1, r2
 800f41a:	4618      	mov	r0, r3
 800f41c:	f7fd fa99 	bl	800c952 <USBD_LL_IsoINIncomplete>
}
 800f420:	bf00      	nop
 800f422:	3708      	adds	r7, #8
 800f424:	46bd      	mov	sp, r7
 800f426:	bd80      	pop	{r7, pc}

0800f428 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f428:	b580      	push	{r7, lr}
 800f42a:	b082      	sub	sp, #8
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f436:	4618      	mov	r0, r3
 800f438:	f7fd faef 	bl	800ca1a <USBD_LL_DevConnected>
}
 800f43c:	bf00      	nop
 800f43e:	3708      	adds	r7, #8
 800f440:	46bd      	mov	sp, r7
 800f442:	bd80      	pop	{r7, pc}

0800f444 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f444:	b580      	push	{r7, lr}
 800f446:	b082      	sub	sp, #8
 800f448:	af00      	add	r7, sp, #0
 800f44a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	; 0x4e0
 800f452:	4618      	mov	r0, r3
 800f454:	f7fd faec 	bl	800ca30 <USBD_LL_DevDisconnected>
}
 800f458:	bf00      	nop
 800f45a:	3708      	adds	r7, #8
 800f45c:	46bd      	mov	sp, r7
 800f45e:	bd80      	pop	{r7, pc}

0800f460 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f460:	b580      	push	{r7, lr}
 800f462:	b082      	sub	sp, #8
 800f464:	af00      	add	r7, sp, #0
 800f466:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	781b      	ldrb	r3, [r3, #0]
 800f46c:	2b00      	cmp	r3, #0
 800f46e:	d13c      	bne.n	800f4ea <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f470:	4a20      	ldr	r2, [pc, #128]	; (800f4f4 <USBD_LL_Init+0x94>)
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	f8c2 34e0 	str.w	r3, [r2, #1248]	; 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	4a1e      	ldr	r2, [pc, #120]	; (800f4f4 <USBD_LL_Init+0x94>)
 800f47c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f480:	4b1c      	ldr	r3, [pc, #112]	; (800f4f4 <USBD_LL_Init+0x94>)
 800f482:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800f486:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800f488:	4b1a      	ldr	r3, [pc, #104]	; (800f4f4 <USBD_LL_Init+0x94>)
 800f48a:	2204      	movs	r2, #4
 800f48c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f48e:	4b19      	ldr	r3, [pc, #100]	; (800f4f4 <USBD_LL_Init+0x94>)
 800f490:	2202      	movs	r2, #2
 800f492:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f494:	4b17      	ldr	r3, [pc, #92]	; (800f4f4 <USBD_LL_Init+0x94>)
 800f496:	2200      	movs	r2, #0
 800f498:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f49a:	4b16      	ldr	r3, [pc, #88]	; (800f4f4 <USBD_LL_Init+0x94>)
 800f49c:	2202      	movs	r2, #2
 800f49e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f4a0:	4b14      	ldr	r3, [pc, #80]	; (800f4f4 <USBD_LL_Init+0x94>)
 800f4a2:	2200      	movs	r2, #0
 800f4a4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f4a6:	4b13      	ldr	r3, [pc, #76]	; (800f4f4 <USBD_LL_Init+0x94>)
 800f4a8:	2200      	movs	r2, #0
 800f4aa:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f4ac:	4b11      	ldr	r3, [pc, #68]	; (800f4f4 <USBD_LL_Init+0x94>)
 800f4ae:	2200      	movs	r2, #0
 800f4b0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f4b2:	4b10      	ldr	r3, [pc, #64]	; (800f4f4 <USBD_LL_Init+0x94>)
 800f4b4:	2200      	movs	r2, #0
 800f4b6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f4b8:	4b0e      	ldr	r3, [pc, #56]	; (800f4f4 <USBD_LL_Init+0x94>)
 800f4ba:	2200      	movs	r2, #0
 800f4bc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f4be:	480d      	ldr	r0, [pc, #52]	; (800f4f4 <USBD_LL_Init+0x94>)
 800f4c0:	f7f6 fe40 	bl	8006144 <HAL_PCD_Init>
 800f4c4:	4603      	mov	r3, r0
 800f4c6:	2b00      	cmp	r3, #0
 800f4c8:	d001      	beq.n	800f4ce <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800f4ca:	f7f3 fd55 	bl	8002f78 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f4ce:	2180      	movs	r1, #128	; 0x80
 800f4d0:	4808      	ldr	r0, [pc, #32]	; (800f4f4 <USBD_LL_Init+0x94>)
 800f4d2:	f7f8 f86a 	bl	80075aa <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f4d6:	2240      	movs	r2, #64	; 0x40
 800f4d8:	2100      	movs	r1, #0
 800f4da:	4806      	ldr	r0, [pc, #24]	; (800f4f4 <USBD_LL_Init+0x94>)
 800f4dc:	f7f8 f81e 	bl	800751c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f4e0:	2280      	movs	r2, #128	; 0x80
 800f4e2:	2101      	movs	r1, #1
 800f4e4:	4803      	ldr	r0, [pc, #12]	; (800f4f4 <USBD_LL_Init+0x94>)
 800f4e6:	f7f8 f819 	bl	800751c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f4ea:	2300      	movs	r3, #0
}
 800f4ec:	4618      	mov	r0, r3
 800f4ee:	3708      	adds	r7, #8
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	bd80      	pop	{r7, pc}
 800f4f4:	20005ddc 	.word	0x20005ddc

0800f4f8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f4f8:	b580      	push	{r7, lr}
 800f4fa:	b084      	sub	sp, #16
 800f4fc:	af00      	add	r7, sp, #0
 800f4fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f500:	2300      	movs	r3, #0
 800f502:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f504:	2300      	movs	r3, #0
 800f506:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f50e:	4618      	mov	r0, r3
 800f510:	f7f6 ff27 	bl	8006362 <HAL_PCD_Start>
 800f514:	4603      	mov	r3, r0
 800f516:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f518:	7bfb      	ldrb	r3, [r7, #15]
 800f51a:	4618      	mov	r0, r3
 800f51c:	f000 f942 	bl	800f7a4 <USBD_Get_USB_Status>
 800f520:	4603      	mov	r3, r0
 800f522:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f524:	7bbb      	ldrb	r3, [r7, #14]
}
 800f526:	4618      	mov	r0, r3
 800f528:	3710      	adds	r7, #16
 800f52a:	46bd      	mov	sp, r7
 800f52c:	bd80      	pop	{r7, pc}

0800f52e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f52e:	b580      	push	{r7, lr}
 800f530:	b084      	sub	sp, #16
 800f532:	af00      	add	r7, sp, #0
 800f534:	6078      	str	r0, [r7, #4]
 800f536:	4608      	mov	r0, r1
 800f538:	4611      	mov	r1, r2
 800f53a:	461a      	mov	r2, r3
 800f53c:	4603      	mov	r3, r0
 800f53e:	70fb      	strb	r3, [r7, #3]
 800f540:	460b      	mov	r3, r1
 800f542:	70bb      	strb	r3, [r7, #2]
 800f544:	4613      	mov	r3, r2
 800f546:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f548:	2300      	movs	r3, #0
 800f54a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f54c:	2300      	movs	r3, #0
 800f54e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f556:	78bb      	ldrb	r3, [r7, #2]
 800f558:	883a      	ldrh	r2, [r7, #0]
 800f55a:	78f9      	ldrb	r1, [r7, #3]
 800f55c:	f7f7 fbfb 	bl	8006d56 <HAL_PCD_EP_Open>
 800f560:	4603      	mov	r3, r0
 800f562:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f564:	7bfb      	ldrb	r3, [r7, #15]
 800f566:	4618      	mov	r0, r3
 800f568:	f000 f91c 	bl	800f7a4 <USBD_Get_USB_Status>
 800f56c:	4603      	mov	r3, r0
 800f56e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f570:	7bbb      	ldrb	r3, [r7, #14]
}
 800f572:	4618      	mov	r0, r3
 800f574:	3710      	adds	r7, #16
 800f576:	46bd      	mov	sp, r7
 800f578:	bd80      	pop	{r7, pc}

0800f57a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f57a:	b580      	push	{r7, lr}
 800f57c:	b084      	sub	sp, #16
 800f57e:	af00      	add	r7, sp, #0
 800f580:	6078      	str	r0, [r7, #4]
 800f582:	460b      	mov	r3, r1
 800f584:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f586:	2300      	movs	r3, #0
 800f588:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f58a:	2300      	movs	r3, #0
 800f58c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f594:	78fa      	ldrb	r2, [r7, #3]
 800f596:	4611      	mov	r1, r2
 800f598:	4618      	mov	r0, r3
 800f59a:	f7f7 fc44 	bl	8006e26 <HAL_PCD_EP_Close>
 800f59e:	4603      	mov	r3, r0
 800f5a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f5a2:	7bfb      	ldrb	r3, [r7, #15]
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	f000 f8fd 	bl	800f7a4 <USBD_Get_USB_Status>
 800f5aa:	4603      	mov	r3, r0
 800f5ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f5ae:	7bbb      	ldrb	r3, [r7, #14]
}
 800f5b0:	4618      	mov	r0, r3
 800f5b2:	3710      	adds	r7, #16
 800f5b4:	46bd      	mov	sp, r7
 800f5b6:	bd80      	pop	{r7, pc}

0800f5b8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f5b8:	b580      	push	{r7, lr}
 800f5ba:	b084      	sub	sp, #16
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	6078      	str	r0, [r7, #4]
 800f5c0:	460b      	mov	r3, r1
 800f5c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f5c8:	2300      	movs	r3, #0
 800f5ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f5d2:	78fa      	ldrb	r2, [r7, #3]
 800f5d4:	4611      	mov	r1, r2
 800f5d6:	4618      	mov	r0, r3
 800f5d8:	f7f7 fcfc 	bl	8006fd4 <HAL_PCD_EP_SetStall>
 800f5dc:	4603      	mov	r3, r0
 800f5de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f5e0:	7bfb      	ldrb	r3, [r7, #15]
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	f000 f8de 	bl	800f7a4 <USBD_Get_USB_Status>
 800f5e8:	4603      	mov	r3, r0
 800f5ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f5ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	3710      	adds	r7, #16
 800f5f2:	46bd      	mov	sp, r7
 800f5f4:	bd80      	pop	{r7, pc}

0800f5f6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f5f6:	b580      	push	{r7, lr}
 800f5f8:	b084      	sub	sp, #16
 800f5fa:	af00      	add	r7, sp, #0
 800f5fc:	6078      	str	r0, [r7, #4]
 800f5fe:	460b      	mov	r3, r1
 800f600:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f602:	2300      	movs	r3, #0
 800f604:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f606:	2300      	movs	r3, #0
 800f608:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f610:	78fa      	ldrb	r2, [r7, #3]
 800f612:	4611      	mov	r1, r2
 800f614:	4618      	mov	r0, r3
 800f616:	f7f7 fd40 	bl	800709a <HAL_PCD_EP_ClrStall>
 800f61a:	4603      	mov	r3, r0
 800f61c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f61e:	7bfb      	ldrb	r3, [r7, #15]
 800f620:	4618      	mov	r0, r3
 800f622:	f000 f8bf 	bl	800f7a4 <USBD_Get_USB_Status>
 800f626:	4603      	mov	r3, r0
 800f628:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f62a:	7bbb      	ldrb	r3, [r7, #14]
}
 800f62c:	4618      	mov	r0, r3
 800f62e:	3710      	adds	r7, #16
 800f630:	46bd      	mov	sp, r7
 800f632:	bd80      	pop	{r7, pc}

0800f634 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f634:	b480      	push	{r7}
 800f636:	b085      	sub	sp, #20
 800f638:	af00      	add	r7, sp, #0
 800f63a:	6078      	str	r0, [r7, #4]
 800f63c:	460b      	mov	r3, r1
 800f63e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f646:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f648:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	da0b      	bge.n	800f668 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f650:	78fb      	ldrb	r3, [r7, #3]
 800f652:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f656:	68f9      	ldr	r1, [r7, #12]
 800f658:	4613      	mov	r3, r2
 800f65a:	00db      	lsls	r3, r3, #3
 800f65c:	4413      	add	r3, r2
 800f65e:	009b      	lsls	r3, r3, #2
 800f660:	440b      	add	r3, r1
 800f662:	3316      	adds	r3, #22
 800f664:	781b      	ldrb	r3, [r3, #0]
 800f666:	e00b      	b.n	800f680 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f668:	78fb      	ldrb	r3, [r7, #3]
 800f66a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f66e:	68f9      	ldr	r1, [r7, #12]
 800f670:	4613      	mov	r3, r2
 800f672:	00db      	lsls	r3, r3, #3
 800f674:	4413      	add	r3, r2
 800f676:	009b      	lsls	r3, r3, #2
 800f678:	440b      	add	r3, r1
 800f67a:	f203 2356 	addw	r3, r3, #598	; 0x256
 800f67e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f680:	4618      	mov	r0, r3
 800f682:	3714      	adds	r7, #20
 800f684:	46bd      	mov	sp, r7
 800f686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f68a:	4770      	bx	lr

0800f68c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f68c:	b580      	push	{r7, lr}
 800f68e:	b084      	sub	sp, #16
 800f690:	af00      	add	r7, sp, #0
 800f692:	6078      	str	r0, [r7, #4]
 800f694:	460b      	mov	r3, r1
 800f696:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f698:	2300      	movs	r3, #0
 800f69a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f69c:	2300      	movs	r3, #0
 800f69e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f6a0:	687b      	ldr	r3, [r7, #4]
 800f6a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f6a6:	78fa      	ldrb	r2, [r7, #3]
 800f6a8:	4611      	mov	r1, r2
 800f6aa:	4618      	mov	r0, r3
 800f6ac:	f7f7 fb2f 	bl	8006d0e <HAL_PCD_SetAddress>
 800f6b0:	4603      	mov	r3, r0
 800f6b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f6b4:	7bfb      	ldrb	r3, [r7, #15]
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	f000 f874 	bl	800f7a4 <USBD_Get_USB_Status>
 800f6bc:	4603      	mov	r3, r0
 800f6be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f6c0:	7bbb      	ldrb	r3, [r7, #14]
}
 800f6c2:	4618      	mov	r0, r3
 800f6c4:	3710      	adds	r7, #16
 800f6c6:	46bd      	mov	sp, r7
 800f6c8:	bd80      	pop	{r7, pc}

0800f6ca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f6ca:	b580      	push	{r7, lr}
 800f6cc:	b086      	sub	sp, #24
 800f6ce:	af00      	add	r7, sp, #0
 800f6d0:	60f8      	str	r0, [r7, #12]
 800f6d2:	607a      	str	r2, [r7, #4]
 800f6d4:	603b      	str	r3, [r7, #0]
 800f6d6:	460b      	mov	r3, r1
 800f6d8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f6da:	2300      	movs	r3, #0
 800f6dc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f6de:	2300      	movs	r3, #0
 800f6e0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f6e2:	68fb      	ldr	r3, [r7, #12]
 800f6e4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f6e8:	7af9      	ldrb	r1, [r7, #11]
 800f6ea:	683b      	ldr	r3, [r7, #0]
 800f6ec:	687a      	ldr	r2, [r7, #4]
 800f6ee:	f7f7 fc37 	bl	8006f60 <HAL_PCD_EP_Transmit>
 800f6f2:	4603      	mov	r3, r0
 800f6f4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f6f6:	7dfb      	ldrb	r3, [r7, #23]
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	f000 f853 	bl	800f7a4 <USBD_Get_USB_Status>
 800f6fe:	4603      	mov	r3, r0
 800f700:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f702:	7dbb      	ldrb	r3, [r7, #22]
}
 800f704:	4618      	mov	r0, r3
 800f706:	3718      	adds	r7, #24
 800f708:	46bd      	mov	sp, r7
 800f70a:	bd80      	pop	{r7, pc}

0800f70c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f70c:	b580      	push	{r7, lr}
 800f70e:	b086      	sub	sp, #24
 800f710:	af00      	add	r7, sp, #0
 800f712:	60f8      	str	r0, [r7, #12]
 800f714:	607a      	str	r2, [r7, #4]
 800f716:	603b      	str	r3, [r7, #0]
 800f718:	460b      	mov	r3, r1
 800f71a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f71c:	2300      	movs	r3, #0
 800f71e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f720:	2300      	movs	r3, #0
 800f722:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f72a:	7af9      	ldrb	r1, [r7, #11]
 800f72c:	683b      	ldr	r3, [r7, #0]
 800f72e:	687a      	ldr	r2, [r7, #4]
 800f730:	f7f7 fbc3 	bl	8006eba <HAL_PCD_EP_Receive>
 800f734:	4603      	mov	r3, r0
 800f736:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f738:	7dfb      	ldrb	r3, [r7, #23]
 800f73a:	4618      	mov	r0, r3
 800f73c:	f000 f832 	bl	800f7a4 <USBD_Get_USB_Status>
 800f740:	4603      	mov	r3, r0
 800f742:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f744:	7dbb      	ldrb	r3, [r7, #22]
}
 800f746:	4618      	mov	r0, r3
 800f748:	3718      	adds	r7, #24
 800f74a:	46bd      	mov	sp, r7
 800f74c:	bd80      	pop	{r7, pc}

0800f74e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f74e:	b580      	push	{r7, lr}
 800f750:	b082      	sub	sp, #8
 800f752:	af00      	add	r7, sp, #0
 800f754:	6078      	str	r0, [r7, #4]
 800f756:	460b      	mov	r3, r1
 800f758:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f760:	78fa      	ldrb	r2, [r7, #3]
 800f762:	4611      	mov	r1, r2
 800f764:	4618      	mov	r0, r3
 800f766:	f7f7 fbe3 	bl	8006f30 <HAL_PCD_EP_GetRxCount>
 800f76a:	4603      	mov	r3, r0
}
 800f76c:	4618      	mov	r0, r3
 800f76e:	3708      	adds	r7, #8
 800f770:	46bd      	mov	sp, r7
 800f772:	bd80      	pop	{r7, pc}

0800f774 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f774:	b480      	push	{r7}
 800f776:	b083      	sub	sp, #12
 800f778:	af00      	add	r7, sp, #0
 800f77a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f77c:	4b03      	ldr	r3, [pc, #12]	; (800f78c <USBD_static_malloc+0x18>)
}
 800f77e:	4618      	mov	r0, r3
 800f780:	370c      	adds	r7, #12
 800f782:	46bd      	mov	sp, r7
 800f784:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f788:	4770      	bx	lr
 800f78a:	bf00      	nop
 800f78c:	200062c0 	.word	0x200062c0

0800f790 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f790:	b480      	push	{r7}
 800f792:	b083      	sub	sp, #12
 800f794:	af00      	add	r7, sp, #0
 800f796:	6078      	str	r0, [r7, #4]

}
 800f798:	bf00      	nop
 800f79a:	370c      	adds	r7, #12
 800f79c:	46bd      	mov	sp, r7
 800f79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7a2:	4770      	bx	lr

0800f7a4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f7a4:	b480      	push	{r7}
 800f7a6:	b085      	sub	sp, #20
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	4603      	mov	r3, r0
 800f7ac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f7ae:	2300      	movs	r3, #0
 800f7b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f7b2:	79fb      	ldrb	r3, [r7, #7]
 800f7b4:	2b03      	cmp	r3, #3
 800f7b6:	d817      	bhi.n	800f7e8 <USBD_Get_USB_Status+0x44>
 800f7b8:	a201      	add	r2, pc, #4	; (adr r2, 800f7c0 <USBD_Get_USB_Status+0x1c>)
 800f7ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7be:	bf00      	nop
 800f7c0:	0800f7d1 	.word	0x0800f7d1
 800f7c4:	0800f7d7 	.word	0x0800f7d7
 800f7c8:	0800f7dd 	.word	0x0800f7dd
 800f7cc:	0800f7e3 	.word	0x0800f7e3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f7d0:	2300      	movs	r3, #0
 800f7d2:	73fb      	strb	r3, [r7, #15]
    break;
 800f7d4:	e00b      	b.n	800f7ee <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f7d6:	2303      	movs	r3, #3
 800f7d8:	73fb      	strb	r3, [r7, #15]
    break;
 800f7da:	e008      	b.n	800f7ee <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f7dc:	2301      	movs	r3, #1
 800f7de:	73fb      	strb	r3, [r7, #15]
    break;
 800f7e0:	e005      	b.n	800f7ee <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f7e2:	2303      	movs	r3, #3
 800f7e4:	73fb      	strb	r3, [r7, #15]
    break;
 800f7e6:	e002      	b.n	800f7ee <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f7e8:	2303      	movs	r3, #3
 800f7ea:	73fb      	strb	r3, [r7, #15]
    break;
 800f7ec:	bf00      	nop
  }
  return usb_status;
 800f7ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800f7f0:	4618      	mov	r0, r3
 800f7f2:	3714      	adds	r7, #20
 800f7f4:	46bd      	mov	sp, r7
 800f7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7fa:	4770      	bx	lr

0800f7fc <memset>:
 800f7fc:	4402      	add	r2, r0
 800f7fe:	4603      	mov	r3, r0
 800f800:	4293      	cmp	r3, r2
 800f802:	d100      	bne.n	800f806 <memset+0xa>
 800f804:	4770      	bx	lr
 800f806:	f803 1b01 	strb.w	r1, [r3], #1
 800f80a:	e7f9      	b.n	800f800 <memset+0x4>

0800f80c <__libc_init_array>:
 800f80c:	b570      	push	{r4, r5, r6, lr}
 800f80e:	4d0d      	ldr	r5, [pc, #52]	; (800f844 <__libc_init_array+0x38>)
 800f810:	4c0d      	ldr	r4, [pc, #52]	; (800f848 <__libc_init_array+0x3c>)
 800f812:	1b64      	subs	r4, r4, r5
 800f814:	10a4      	asrs	r4, r4, #2
 800f816:	2600      	movs	r6, #0
 800f818:	42a6      	cmp	r6, r4
 800f81a:	d109      	bne.n	800f830 <__libc_init_array+0x24>
 800f81c:	4d0b      	ldr	r5, [pc, #44]	; (800f84c <__libc_init_array+0x40>)
 800f81e:	4c0c      	ldr	r4, [pc, #48]	; (800f850 <__libc_init_array+0x44>)
 800f820:	f000 f8c0 	bl	800f9a4 <_init>
 800f824:	1b64      	subs	r4, r4, r5
 800f826:	10a4      	asrs	r4, r4, #2
 800f828:	2600      	movs	r6, #0
 800f82a:	42a6      	cmp	r6, r4
 800f82c:	d105      	bne.n	800f83a <__libc_init_array+0x2e>
 800f82e:	bd70      	pop	{r4, r5, r6, pc}
 800f830:	f855 3b04 	ldr.w	r3, [r5], #4
 800f834:	4798      	blx	r3
 800f836:	3601      	adds	r6, #1
 800f838:	e7ee      	b.n	800f818 <__libc_init_array+0xc>
 800f83a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f83e:	4798      	blx	r3
 800f840:	3601      	adds	r6, #1
 800f842:	e7f2      	b.n	800f82a <__libc_init_array+0x1e>
 800f844:	0800fb20 	.word	0x0800fb20
 800f848:	0800fb20 	.word	0x0800fb20
 800f84c:	0800fb20 	.word	0x0800fb20
 800f850:	0800fb24 	.word	0x0800fb24

0800f854 <memcpy>:
 800f854:	440a      	add	r2, r1
 800f856:	4291      	cmp	r1, r2
 800f858:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800f85c:	d100      	bne.n	800f860 <memcpy+0xc>
 800f85e:	4770      	bx	lr
 800f860:	b510      	push	{r4, lr}
 800f862:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f866:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f86a:	4291      	cmp	r1, r2
 800f86c:	d1f9      	bne.n	800f862 <memcpy+0xe>
 800f86e:	bd10      	pop	{r4, pc}

0800f870 <fmax>:
 800f870:	b508      	push	{r3, lr}
 800f872:	ed2d 8b04 	vpush	{d8-d9}
 800f876:	eeb0 8a40 	vmov.f32	s16, s0
 800f87a:	eef0 8a60 	vmov.f32	s17, s1
 800f87e:	eeb0 9a41 	vmov.f32	s18, s2
 800f882:	eef0 9a61 	vmov.f32	s19, s3
 800f886:	f000 f81b 	bl	800f8c0 <__fpclassifyd>
 800f88a:	b168      	cbz	r0, 800f8a8 <fmax+0x38>
 800f88c:	eeb0 0a49 	vmov.f32	s0, s18
 800f890:	eef0 0a69 	vmov.f32	s1, s19
 800f894:	f000 f814 	bl	800f8c0 <__fpclassifyd>
 800f898:	b150      	cbz	r0, 800f8b0 <fmax+0x40>
 800f89a:	ec53 2b19 	vmov	r2, r3, d9
 800f89e:	ec51 0b18 	vmov	r0, r1, d8
 800f8a2:	f7f1 f8e1 	bl	8000a68 <__aeabi_dcmpgt>
 800f8a6:	b918      	cbnz	r0, 800f8b0 <fmax+0x40>
 800f8a8:	eeb0 8a49 	vmov.f32	s16, s18
 800f8ac:	eef0 8a69 	vmov.f32	s17, s19
 800f8b0:	eeb0 0a48 	vmov.f32	s0, s16
 800f8b4:	eef0 0a68 	vmov.f32	s1, s17
 800f8b8:	ecbd 8b04 	vpop	{d8-d9}
 800f8bc:	bd08      	pop	{r3, pc}
	...

0800f8c0 <__fpclassifyd>:
 800f8c0:	ec51 0b10 	vmov	r0, r1, d0
 800f8c4:	b510      	push	{r4, lr}
 800f8c6:	f031 4400 	bics.w	r4, r1, #2147483648	; 0x80000000
 800f8ca:	460b      	mov	r3, r1
 800f8cc:	d019      	beq.n	800f902 <__fpclassifyd+0x42>
 800f8ce:	f5a1 1280 	sub.w	r2, r1, #1048576	; 0x100000
 800f8d2:	490e      	ldr	r1, [pc, #56]	; (800f90c <__fpclassifyd+0x4c>)
 800f8d4:	428a      	cmp	r2, r1
 800f8d6:	d90e      	bls.n	800f8f6 <__fpclassifyd+0x36>
 800f8d8:	f103 42ff 	add.w	r2, r3, #2139095040	; 0x7f800000
 800f8dc:	f502 02e0 	add.w	r2, r2, #7340032	; 0x700000
 800f8e0:	428a      	cmp	r2, r1
 800f8e2:	d908      	bls.n	800f8f6 <__fpclassifyd+0x36>
 800f8e4:	4a0a      	ldr	r2, [pc, #40]	; (800f910 <__fpclassifyd+0x50>)
 800f8e6:	4213      	tst	r3, r2
 800f8e8:	d007      	beq.n	800f8fa <__fpclassifyd+0x3a>
 800f8ea:	4294      	cmp	r4, r2
 800f8ec:	d107      	bne.n	800f8fe <__fpclassifyd+0x3e>
 800f8ee:	fab0 f080 	clz	r0, r0
 800f8f2:	0940      	lsrs	r0, r0, #5
 800f8f4:	bd10      	pop	{r4, pc}
 800f8f6:	2004      	movs	r0, #4
 800f8f8:	e7fc      	b.n	800f8f4 <__fpclassifyd+0x34>
 800f8fa:	2003      	movs	r0, #3
 800f8fc:	e7fa      	b.n	800f8f4 <__fpclassifyd+0x34>
 800f8fe:	2000      	movs	r0, #0
 800f900:	e7f8      	b.n	800f8f4 <__fpclassifyd+0x34>
 800f902:	2800      	cmp	r0, #0
 800f904:	d1ee      	bne.n	800f8e4 <__fpclassifyd+0x24>
 800f906:	2002      	movs	r0, #2
 800f908:	e7f4      	b.n	800f8f4 <__fpclassifyd+0x34>
 800f90a:	bf00      	nop
 800f90c:	7fdfffff 	.word	0x7fdfffff
 800f910:	7ff00000 	.word	0x7ff00000

0800f914 <round>:
 800f914:	ec53 2b10 	vmov	r2, r3, d0
 800f918:	b570      	push	{r4, r5, r6, lr}
 800f91a:	f3c3 540a 	ubfx	r4, r3, #20, #11
 800f91e:	f2a4 30ff 	subw	r0, r4, #1023	; 0x3ff
 800f922:	2813      	cmp	r0, #19
 800f924:	ee10 5a10 	vmov	r5, s0
 800f928:	4619      	mov	r1, r3
 800f92a:	dc18      	bgt.n	800f95e <round+0x4a>
 800f92c:	2800      	cmp	r0, #0
 800f92e:	da09      	bge.n	800f944 <round+0x30>
 800f930:	3001      	adds	r0, #1
 800f932:	f003 4100 	and.w	r1, r3, #2147483648	; 0x80000000
 800f936:	d103      	bne.n	800f940 <round+0x2c>
 800f938:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800f93c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800f940:	2300      	movs	r3, #0
 800f942:	e02a      	b.n	800f99a <round+0x86>
 800f944:	4c16      	ldr	r4, [pc, #88]	; (800f9a0 <round+0x8c>)
 800f946:	4104      	asrs	r4, r0
 800f948:	ea03 0604 	and.w	r6, r3, r4
 800f94c:	4316      	orrs	r6, r2
 800f94e:	d011      	beq.n	800f974 <round+0x60>
 800f950:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800f954:	4103      	asrs	r3, r0
 800f956:	440b      	add	r3, r1
 800f958:	ea23 0104 	bic.w	r1, r3, r4
 800f95c:	e7f0      	b.n	800f940 <round+0x2c>
 800f95e:	2833      	cmp	r0, #51	; 0x33
 800f960:	dd0b      	ble.n	800f97a <round+0x66>
 800f962:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 800f966:	d105      	bne.n	800f974 <round+0x60>
 800f968:	ee10 0a10 	vmov	r0, s0
 800f96c:	f7f0 fc36 	bl	80001dc <__adddf3>
 800f970:	4602      	mov	r2, r0
 800f972:	460b      	mov	r3, r1
 800f974:	ec43 2b10 	vmov	d0, r2, r3
 800f978:	bd70      	pop	{r4, r5, r6, pc}
 800f97a:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800f97e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800f982:	40f4      	lsrs	r4, r6
 800f984:	4214      	tst	r4, r2
 800f986:	d0f5      	beq.n	800f974 <round+0x60>
 800f988:	f1c0 0033 	rsb	r0, r0, #51	; 0x33
 800f98c:	2301      	movs	r3, #1
 800f98e:	4083      	lsls	r3, r0
 800f990:	195b      	adds	r3, r3, r5
 800f992:	bf28      	it	cs
 800f994:	3101      	addcs	r1, #1
 800f996:	ea23 0304 	bic.w	r3, r3, r4
 800f99a:	461a      	mov	r2, r3
 800f99c:	460b      	mov	r3, r1
 800f99e:	e7e9      	b.n	800f974 <round+0x60>
 800f9a0:	000fffff 	.word	0x000fffff

0800f9a4 <_init>:
 800f9a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9a6:	bf00      	nop
 800f9a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f9aa:	bc08      	pop	{r3}
 800f9ac:	469e      	mov	lr, r3
 800f9ae:	4770      	bx	lr

0800f9b0 <_fini>:
 800f9b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9b2:	bf00      	nop
 800f9b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f9b6:	bc08      	pop	{r3}
 800f9b8:	469e      	mov	lr, r3
 800f9ba:	4770      	bx	lr
